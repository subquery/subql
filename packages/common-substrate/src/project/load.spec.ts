// Copyright 2020-2022 OnFinality Limited authors & contributors
// SPDX-License-Identifier: Apache-2.0

import fs from 'fs';
import path from 'path';
import {parseChainTypes, loadChainTypesFromJs} from './load';

const projectsDir = path.join(__dirname, '../../test');

const jsChainTypesScript = `(()=>{"use strict";var e={3412:function(e,n){var t=this&&this.__rest||function(e,n){var t={};for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&n.indexOf(a)<0&&(t[a]=e[a]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(a=Object.getOwnPropertySymbols(e);o<a.length;o++)n.indexOf(a[o])<0&&Object.prototype.propertyIsEnumerable.call(e,a[o])&&(t[a[o]]=e[a[o]])}return t};Object.defineProperty(n,"__esModule",{value:!0}),n.typesBundleDeprecated=n.typesBundlePre900=n.moonbeamDefinitionsDeprecated=n.moonbeamDefinitions=n.rpcDefinitions=n.moduleDefinitions=void 0,n.moduleDefinitions={assetManager:{Balance:"TAssetBalance"},xTokens:{Balance:"TAssetBalance"}},n.rpcDefinitions={txpool:{content:{aliasSection:"txpool",description:"The detailed information regarding Ethereum transactions that are currently in the Substrate transaction pool.",params:[],type:"TxPoolResultContent"},inspect:{aliasSection:"txpool",description:"Summarized information of the Ethereum transactions that are currently in the Substrate transaction pool.",params:[],type:"TxPoolResultInspect"},status:{aliasSection:"txpool",description:"The number of Ethereum transaction that are currently in the Substrate transaction pool.",params:[],type:"TxPoolResultStatus"}},trace:{filter:{aliasSection:"trace",description:"Trace Filter",params:[{name:"filter",type:"FilterRequest"}],type:"Result<Vec<TransactionTrace>>"}},debug:{traceTransaction:{aliasSection:"debug",description:"Debug trace tx",params:[{name:"transaction_hash",type:"H256"}],type:"Result<Vec<TransactionTrace>>"}}};const a={AccountId:"EthereumAccountId",Address:"AccountId",Balance:"u128",RefCount:"u8",LookupSource:"AccountId",Account:{nonce:"U256",balance:"u128"}},{RefCount:o}=a,c=t(a,["RefCount"]),i=Object.assign(Object.assign({},c),{ExtrinsicSignature:"EthereumSignature",RoundIndex:"u32",Candidate:{id:"AccountId",fee:"Perbill",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"ValidatorStatus"},Nominator:{nominations:"Vec<Bond>",total:"Balance"},Bond:{owner:"AccountId",amount:"Balance"},ValidatorStatus:{_enum:{Active:"Null",Idle:"Null",Leaving:"RoundIndex"}},TxPoolResultContent:{pending:"HashMap<H160, HashMap<U256, PoolTransaction>>",queued:"HashMap<H160, HashMap<U256, PoolTransaction>>"},TxPoolResultInspect:{pending:"HashMap<H160, HashMap<U256, Summary>>",queued:"HashMap<H160, HashMap<U256, Summary>>"},TxPoolResultStatus:{pending:"U256",queued:"U256"},Summary:"Bytes",PoolTransaction:{hash:"H256",nonce:"U256",blockHash:"Option<H256>",blockNumber:"Option<U256>",from:"H160",to:"Option<H160>",value:"U256",gasPrice:"U256",gas:"U256",input:"Bytes"}}),{ValidatorStatus:s}=i,r=t(i,["ValidatorStatus"]),l=Object.assign(Object.assign({},r),{AccountInfo:"AccountInfoWithTripleRefCount",Candidate:{id:"AccountId",fee:"Perbill",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},CollatorStatus:{_enum:{Active:"Null",Idle:"Null",Leaving:"RoundIndex"}},Range:"RangeBalance",RangeBalance:{min:"Balance",ideal:"Balance",max:"Balance"},RangePerbill:{min:"Perbill",ideal:"Perbill",max:"Perbill"},InflationInfo:{expect:"RangeBalance",annual:"RangePerbill",round:"RangePerbill"},OrderedSet:"Vec<Bond>",Collator:{id:"AccountId",bond:"Balance",nominators:"Vec<Bond>",total:"Balance",state:"CollatorStatus"},CollatorSnapshot:{bond:"Balance",nominators:"Vec<Bond>",total:"Balance"},SystemInherentData:{validationData:"PersistedValidationData",relayChain_state:"StorageProof",downwardMessages:"Vec<InboundDownwardMessage>",horizontalMessages:"BTreeMap<ParaId, Vec<InboundHrmpMessage>>"},RoundInfo:{current:"RoundIndex",first:"BlockNumber",length:"u32"}}),u=Object.assign(Object.assign({},l),{AuthorId:"AccountId"}),d=Object.assign(Object.assign({},u),{AccountId32:"H256",AuthorId:"AccountId32",ProxyType:{_enum:["Any","NonTransfer","Governance","Staking","CancelProxy","Balances","AuthorMapping"]},RelayChainAccountId:"AccountId32",RewardInfo:{totalReward:"Balance",claimedReward:"Balance"}}),m=Object.assign(Object.assign({},d),{Collator2:{id:"AccountId",bond:"Balance",nominators:"Vec<AccountId>",topNominators:"Vec<Bond>",bottomNominators:"Vec<Bond>",totalCounted:"Balance",totalBacking:"Balance",state:"CollatorStatus"},NominatorAdded:{_enum:{AddedToBottom:"Null",AddedToTop:"Balance"}},RegistrationInfo:{account:"AccountId",deposit:"Balance"},ParachainBondConfig:{account:"AccountId",percent:"Percent"}}),p=Object.assign(Object.assign({},m),{EthereumSignature:{r:"H256",s:"H256",v:"U8"},NominatorAdded:{_enum:{AddedToTop:"Balance",AddedToBottom:"Null"}}}),b=Object.assign(Object.assign({},p),{NominatorStatus:{_enum:{Active:"Null",Leaving:"RoundIndex"}},Nominator2:{nominations:"Vec<Bond>",revocations:"Vec<AccountId>",total:"Balance",scheduledRevocationsCount:"u32",scheduledRevocationsTotal:"Balance",status:"NominatorStatus"},ExitQ:{candidates:"Vec<AccountId>",nominatorsLeaving:"Vec<AccountId>",candidateSchedule:"Vec<(AccountId, RoundIndex)>",nominatorSchedule:"Vec<(AccountId, Option<AccountId>, RoundIndex)>"}}),y=Object.assign(Object.assign({},b),{RewardInfo:{totalReward:"Balance",claimedReward:"Balance",contributedRelayAddresses:"Vec<RelayChainAccountId>"}}),I=Object.assign(Object.assign({},y),{AssetType:{_enum:{Xcm:"MultiLocation"}},AssetId:"u128",TAssetBalance:"u128",ENUM_AccountId32:{network:"NetworkId",id:"[u8; 32]"},ENUM_AccountKey20:{network:"NetworkId",key:"[u8; 20]"},ENUM_AccountIndex64:{network:"NetworkId",index:"Compact<u64>"},ENUM_Plurality:{id:"BodyId",part:"BodyPart"},JunctionV0:{_enum:{Parent:"Null",Parachain:"Compact<u32>",AccountId32:"ENUM_AccountId32",AccountIndex64:"ENUM_AccountIndex64",AccountKey20:"ENUM_AccountKey20",PalletInstance:"u8",GeneralIndex:"Compact<u128>",GeneralKey:"Vec<u8>",OnlyChild:"Null",Plurality:"ENUM_Plurality"}},CurrencyId:{_enum:{SelfReserve:"Null",OtherReserve:"u128"}},AssetRegistrarMetadata:{name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8",isFrozen:"bool"},VestingBlockNumber:"u32",MultiLocation:"MultiLocationV0"}),A=Object.assign(Object.assign({},I),{JunctionV1:{_enum:{Parachain:"Compact<u32>",AccountId32:"ENUM_AccountId32",AccountIndex64:"ENUM_AccountIndex64",AccountKey20:"ENUM_AccountKey20",PalletInstance:"u8",GeneralIndex:"Compact<u128>",GeneralKey:"Vec<u8>",OnlyChild:"Null",Plurality:"ENUM_Plurality"}},MultiLocation:"MultiLocationV1"}),g=Object.assign(Object.assign({},A),{MoonbaseRuntimeAssetRegistrarMetadata:{name:"Vec<u8>",symbol:"Vec<u8>",decimals:"u8",is_frozen:"bool"},PalletCrowdloanRewardsRewardInfo:{total_reward:"Balance",claimed_reward:"Balance",contributed_relay_addresses:"Vec<RelayChainAccountId>"},ParachainStakingNominator2:{nominations:"Vec<Bond>",revocations:"Vec<AccountId>",total:"Balance",scheduled_revocations_count:"u32",scheduled_revocations_total:"Balance",status:"NominatorStatus"},ParachainStakingExitQ:{candidates:"Vec<AccountId>",nominators_leaving:"Vec<AccountId>",candidate_schedule:"Vec<(AccountId, RoundIndex)>",nominator_schedule:"Vec<(AccountId, Option<AccountId>, RoundIndex)>"},ParachainStakingCollator2:{id:"AccountId",bond:"Balance",nominators:"Vec<AccountId>",top_nominators:"Vec<Bond>",bottom_nominators:"Vec<Bond>",total_counted:"Balance",total_backing:"Balance",state:"CollatorStatus"}});n.moonbeamDefinitions={alias:n.moduleDefinitions,rpc:n.rpcDefinitions,instances:{council:["councilCollective"],technicalCommittee:["techCommitteeCollective"]},types:[{minmax:[0,4],types:a},{minmax:[5,5],types:c},{minmax:[6,19],types:i},{minmax:[19,35],types:l},{minmax:[36,36],types:u},{minmax:[37,42],types:d},{minmax:[43,154],types:m},{minmax:[155,199],types:p},{minmax:[200,399],types:b},{minmax:[400,599],types:y},{minmax:[600,799],types:I},{minmax:[800,899],types:A},{minmax:[900,void 0],types:{ProxyType:{_enum:["Any","NonTransfer","Governance","Staking","CancelProxy","Balances","AuthorMapping"]}}}]},n.moonbeamDefinitionsDeprecated=Object.assign(Object.assign({},n.moonbeamDefinitions),{types:[...n.moonbeamDefinitions.types,{minmax:[900,void 0],types:g}]}),n.typesBundlePre900={spec:{moonbeam:n.moonbeamDefinitions,moonbeamDefinitions:n.moonbeamDefinitions,moonbase:n.moonbeamDefinitions,moonriver:n.moonbeamDefinitions}},n.typesBundleDeprecated={spec:{moonbeam:n.moonbeamDefinitionsDeprecated,moonbeamDefinitions:n.moonbeamDefinitionsDeprecated,moonbase:n.moonbeamDefinitionsDeprecated,moonriver:n.moonbeamDefinitionsDeprecated}}}},n={};function t(a){var o=n[a];if(void 0!==o)return o.exports;var c=n[a]={exports:{}};return e[a].call(c.exports,c,c.exports,t),c.exports}var a={};(()=>{var e=a;Object.defineProperty(e,"__esModule",{value:!0});const n=t(3412);e.default={typesBundle:n.typesBundleDeprecated}})();var o=exports;for(var c in a)o[c]=a[c];a.__esModule&&Object.defineProperty(o,"__esModule",{value:!0})})();`;

describe('load', () => {
  it('throw error on incorrect format chain types', () => {
    expect(() => parseChainTypes(jsChainTypesScript)).toThrow();
  });

  it.skip('can load yaml and json format chain types', () => {
    expect(parseChainTypes(jsChainTypesScript)).not.toThrowError();
  });
});
