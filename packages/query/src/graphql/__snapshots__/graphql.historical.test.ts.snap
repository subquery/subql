// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`GraphqlHistorical should generate block range SQL for entity queries 1`] = `
"with __local_0__ as (select to_json(lower(__local_1__._block_range)) as "__block_height", to_json((json_build_object('__identifiers'::text, json_build_array(__local_1__."_id"), 'id'::text, (__local_1__."id"), 'priceAmount'::text, ((__local_1__."price_amount"))::text))) as "@nodes" from (select 
__local_1__.*
from "subquery_2"."listings" as __local_1__

where (__local_1__._block_range && int8range($1::bigint, $2::bigint, '[]')) and (TRUE) and (TRUE)
order by __local_1__."_id" ASC

) __local_1__), __local_2__ as (select json_agg(to_json(__local_0__)) as data from __local_0__) select coalesce((select __local_2__.data from __local_2__), '[]'::json) as "data" "
`;

exports[`GraphqlHistorical should include blockRange parameter in schema for collections 1`] = `
"with __local_0__ as (select to_json(lower(__local_1__._block_range)) as "__block_height", to_json((json_build_object('__identifiers'::text, json_build_array(__local_1__."_id"), 'id'::text, (__local_1__."id"), 'ownerId'::text, (__local_1__."owner_id")))) as "@nodes" from (select 
__local_1__.*
from "subquery_2"."items" as __local_1__

where (__local_1__._block_range && int8range($1::bigint, $2::bigint, '[]')) and (TRUE) and (TRUE)
order by __local_1__."_id" ASC

) __local_1__), __local_2__ as (select json_agg(to_json(__local_0__)) as data from __local_0__) select coalesce((select __local_2__.data from __local_2__), '[]'::json) as "data" "
`;

exports[`GraphqlHistorical should maintain backwards compatibility with existing blockHeight 1`] = `
"with __local_0__ as (select to_json((json_build_object('__identifiers'::text, json_build_array(__local_1__."_id"), 'id'::text, (__local_1__."id"), 'ownerId'::text, (__local_1__."owner_id")))) as "@nodes" from (select 
__local_1__.*
from "subquery_2"."items" as __local_1__

where (__local_1__._block_range @> $1::bigint) and (TRUE) and (TRUE)
order by __local_1__."_id" ASC

) __local_1__), __local_2__ as (select json_agg(to_json(__local_0__)) as data from __local_0__) select coalesce((select __local_2__.data from __local_2__), '[]'::json) as "data" "
`;

exports[`GraphqlHistorical should support block range in nested relations 1`] = `
"with __local_0__ as (select to_json(lower(__local_1__._block_range)) as "__block_height", to_json((json_build_object('__identifiers'::text, json_build_array(__local_1__."_id"), 'id'::text, (__local_1__."id"), '@listings'::text, (with __local_2__ as (select to_json(lower(__local_3__._block_range)) as "__block_height", to_json((json_build_object('__identifiers'::text, json_build_array(__local_3__."_id"), 'id'::text, (__local_3__."id"), 'priceAmount'::text, ((__local_3__."price_amount"))::text))) as "@nodes" from (select 
__local_3__.*
from "subquery_2"."listings" as __local_3__

where (__local_3__."item_id" = __local_1__."id") and (__local_3__._block_range && int8range($1::bigint, $2::bigint, '[]')) and (__local_3__._block_range && int8range($3::bigint, $4::bigint, '[]')) and (TRUE) and (TRUE)
order by __local_3__."_id" ASC

) __local_3__), __local_4__ as (select json_agg(to_json(__local_2__)) as data from __local_2__) select json_build_object('data'::text, coalesce((select __local_4__.data from __local_4__), '[]'::json)) )))) as "@nodes" from (select 
__local_1__.*
from "subquery_2"."items" as __local_1__

where (__local_1__._block_range && int8range($5::bigint, $6::bigint, '[]')) and (TRUE) and (TRUE)
order by __local_1__."_id" ASC

) __local_1__), __local_5__ as (select json_agg(to_json(__local_0__)) as data from __local_0__) select coalesce((select __local_5__.data from __local_5__), '[]'::json) as "data" "
`;

exports[`GraphqlHistorical should work with block range and filtering together 1`] = `
"with __local_0__ as (select to_json(lower(__local_1__._block_range)) as "__block_height", to_json((json_build_object('__identifiers'::text, json_build_array(__local_1__."_id"), 'id'::text, (__local_1__."id"), 'approved'::text, (__local_1__."approved")))) as "@nodes" from (select 
__local_1__.*
from "subquery_2"."items" as __local_1__

where (__local_1__._block_range && int8range($1::bigint, $2::bigint, '[]')) and (((__local_1__."approved" = $3))) and (TRUE) and (TRUE)
order by __local_1__."_id" ASC

) __local_1__), __local_2__ as (select json_agg(to_json(__local_0__)) as data from __local_0__) select coalesce((select __local_2__.data from __local_2__), '[]'::json) as "data" "
`;

exports[`GraphqlHistorical to filter historical items when ordering 1`] = `
"with __local_0__ as (select to_json((json_build_object('__identifiers'::text, json_build_array(__local_1__."_id"), '@listings'::text, (with __local_2__ as (select to_json((json_build_object('__identifiers'::text, json_build_array(__local_3__."_id"), 'priceAmount'::text, ((__local_3__."price_amount"))::text))) as "@nodes" from (select 
__local_3__.*
from "subquery_2"."listings" as __local_3__

where (__local_3__."item_id" = __local_1__."id") and (TRUE) and (TRUE)
order by __local_3__."_id" ASC

) __local_3__), __local_4__ as (select json_agg(to_json(__local_2__)) as data from __local_2__) select json_build_object('data'::text, coalesce((select __local_4__.data from __local_4__), '[]'::json)) )))) as "@nodes" from (select 
__local_1__.*
from "subquery_2"."items" as __local_1__

where (TRUE) and (TRUE)
order by __local_1__."last_traded_price_amount" ASC,__local_1__."_id" ASC

) __local_1__), __local_5__ as (select json_agg(to_json(__local_0__)) as data from __local_0__) select coalesce((select __local_5__.data from __local_5__), '[]'::json) as "data" "
`;

exports[`GraphqlHistorical to filter historical nested (backward) 1`] = `
"with __local_0__ as (select to_json((json_build_object('__identifiers'::text, json_build_array(__local_1__."_id"), 'id'::text, (__local_1__."id")))) as "@nodes" from (select 
__local_1__.*
from "subquery_2"."items" as __local_1__

where (((exists(select 1 from "subquery_2"."listings" as __local_2__ where (__local_2__."item_id" = __local_1__."id") and (((__local_2__."price_token" = $1))))))) and (TRUE) and (TRUE)
order by __local_1__."_id" ASC

) __local_1__), __local_3__ as (select json_agg(to_json(__local_0__)) as data from __local_0__) select coalesce((select __local_3__.data from __local_3__), '[]'::json) as "data" "
`;

exports[`GraphqlHistorical to filter historical nested (forward) 1`] = `
"with __local_0__ as (select to_json((json_build_object('__identifiers'::text, json_build_array(__local_1__."_id"), 'id'::text, (__local_1__."id")))) as "@nodes" from (select 
__local_1__.*
from "subquery_2"."listings" as __local_1__

where ((      exists(
        select 1 from "subquery_2"."items" as __local_2__
        where (__local_1__."item_id" = __local_2__."id") and
          (((__local_2__."approved" = $1)))
      ))) and (TRUE) and (TRUE)
order by __local_1__."_id" ASC

) __local_1__), __local_3__ as (select json_agg(to_json(__local_0__)) as data from __local_0__) select coalesce((select __local_3__.data from __local_3__), '[]'::json) as "data" "
`;

exports[`GraphqlHistorical to filter historical top level 1`] = `
"with __local_0__ as (select to_json((json_build_object('__identifiers'::text, json_build_array(__local_1__."_id"), 'id'::text, (__local_1__."id"), '@listings'::text, (with __local_2__ as (select to_json((json_build_object('__identifiers'::text, json_build_array(__local_3__."_id"), 'id'::text, (__local_3__."id")))) as "@nodes" from (select 
__local_3__.*
from "subquery_2"."listings" as __local_3__

where (__local_3__."item_id" = __local_1__."id") and (TRUE) and (TRUE)
order by __local_3__."_id" ASC

) __local_3__), __local_4__ as (select json_agg(to_json(__local_2__)) as data from __local_2__) select json_build_object('data'::text, coalesce((select __local_4__.data from __local_4__), '[]'::json)) )))) as "@nodes" from (select 
__local_1__.*
from "subquery_2"."items" as __local_1__

where ((exists(select 1 from "subquery_2"."listings" as __local_5__ where (__local_5__."item_id" = __local_1__."id")))) and (TRUE) and (TRUE)
order by __local_1__."_id" ASC

) __local_1__), __local_6__ as (select json_agg(to_json(__local_0__)) as data from __local_0__) select coalesce((select __local_6__.data from __local_6__), '[]'::json) as "data", (
  select json_build_object('totalCount'::text, count(1))
  from "subquery_2"."items" as __local_1__
  where ((exists(select 1 from "subquery_2"."listings" as __local_5__ where (__local_5__."item_id" = __local_1__."id"))))
) as "aggregates" "
`;
