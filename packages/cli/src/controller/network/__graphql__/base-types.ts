export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends {[key: string]: unknown}> = {[K in keyof T]: T[K]};
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & {[SubKey in K]?: Maybe<T[SubKey]>};
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {[SubKey in K]: Maybe<T[SubKey]>};
export type MakeEmpty<T extends {[key: string]: unknown}, K extends keyof T> = {[_ in K]?: never};
export type Incremental<T> = T | {[P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never};
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: {input: string; output: string};
  String: {input: string; output: string};
  Boolean: {input: boolean; output: boolean};
  Int: {input: number; output: number};
  Float: {input: number; output: number};
  BigFloat: {input: string; output: string};
  BigInt: {input: string; output: string};
  Cursor: {input: string; output: string};
  Date: {input: Date; output: Date};
  Datetime: {input: Date; output: Date};
  JSON: {input: any; output: any};
};

export type AcceptedOffer = Node & {
  readonly __typename: 'AcceptedOffer';
  readonly createdBlock: Maybe<Scalars['Int']['output']>;
  readonly id: Scalars['String']['output'];
  /** Reads a single `Indexer` that is related to this `AcceptedOffer`. */
  readonly indexer: Maybe<Indexer>;
  readonly indexerId: Scalars['String']['output'];
  readonly lastEvent: Maybe<Scalars['String']['output']>;
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  readonly nodeId: Scalars['ID']['output'];
  /** Reads a single `Offer` that is related to this `AcceptedOffer`. */
  readonly offer: Maybe<Offer>;
  readonly offerId: Scalars['String']['output'];
  /** Reads a single `ServiceAgreement` that is related to this `AcceptedOffer`. */
  readonly serviceAgreement: Maybe<ServiceAgreement>;
  readonly serviceAgreementId: Scalars['String']['output'];
};

export type AcceptedOfferAggregates = {
  readonly __typename: 'AcceptedOfferAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly average: Maybe<AcceptedOfferAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly distinctCount: Maybe<AcceptedOfferDistinctCountAggregates>;
  readonly keys: Maybe<ReadonlyArray<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly max: Maybe<AcceptedOfferMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly min: Maybe<AcceptedOfferMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevPopulation: Maybe<AcceptedOfferStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevSample: Maybe<AcceptedOfferStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly sum: Maybe<AcceptedOfferSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly variancePopulation: Maybe<AcceptedOfferVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly varianceSample: Maybe<AcceptedOfferVarianceSampleAggregates>;
};

/** A filter to be used against aggregates of `AcceptedOffer` object types. */
export type AcceptedOfferAggregatesFilter = {
  /** Mean average aggregate over matching `AcceptedOffer` objects. */
  readonly average: InputMaybe<AcceptedOfferAverageAggregateFilter>;
  /** Distinct count aggregate over matching `AcceptedOffer` objects. */
  readonly distinctCount: InputMaybe<AcceptedOfferDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `AcceptedOffer` object to be included within the aggregate. */
  readonly filter: InputMaybe<AcceptedOfferFilter>;
  /** Maximum aggregate over matching `AcceptedOffer` objects. */
  readonly max: InputMaybe<AcceptedOfferMaxAggregateFilter>;
  /** Minimum aggregate over matching `AcceptedOffer` objects. */
  readonly min: InputMaybe<AcceptedOfferMinAggregateFilter>;
  /** Population standard deviation aggregate over matching `AcceptedOffer` objects. */
  readonly stddevPopulation: InputMaybe<AcceptedOfferStddevPopulationAggregateFilter>;
  /** Sample standard deviation aggregate over matching `AcceptedOffer` objects. */
  readonly stddevSample: InputMaybe<AcceptedOfferStddevSampleAggregateFilter>;
  /** Sum aggregate over matching `AcceptedOffer` objects. */
  readonly sum: InputMaybe<AcceptedOfferSumAggregateFilter>;
  /** Population variance aggregate over matching `AcceptedOffer` objects. */
  readonly variancePopulation: InputMaybe<AcceptedOfferVariancePopulationAggregateFilter>;
  /** Sample variance aggregate over matching `AcceptedOffer` objects. */
  readonly varianceSample: InputMaybe<AcceptedOfferVarianceSampleAggregateFilter>;
};

export type AcceptedOfferAverageAggregateFilter = {
  readonly createdBlock: InputMaybe<BigFloatFilter>;
};

export type AcceptedOfferAverageAggregates = {
  readonly __typename: 'AcceptedOfferAverageAggregates';
  /** Mean average of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
};

export type AcceptedOfferDistinctCountAggregateFilter = {
  readonly _blockRange: InputMaybe<BigIntFilter>;
  readonly _id: InputMaybe<BigIntFilter>;
  readonly createdBlock: InputMaybe<BigIntFilter>;
  readonly id: InputMaybe<BigIntFilter>;
  readonly indexerId: InputMaybe<BigIntFilter>;
  readonly lastEvent: InputMaybe<BigIntFilter>;
  readonly offerId: InputMaybe<BigIntFilter>;
  readonly serviceAgreementId: InputMaybe<BigIntFilter>;
};

export type AcceptedOfferDistinctCountAggregates = {
  readonly __typename: 'AcceptedOfferDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  readonly _blockRange: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  readonly _id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  readonly id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of indexerId across the matching connection */
  readonly indexerId: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of lastEvent across the matching connection */
  readonly lastEvent: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of offerId across the matching connection */
  readonly offerId: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of serviceAgreementId across the matching connection */
  readonly serviceAgreementId: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `AcceptedOffer` object types. All fields are combined with a logical ‘and.’ */
export type AcceptedOfferFilter = {
  /** Checks for all expressions in this list. */
  readonly and: InputMaybe<ReadonlyArray<AcceptedOfferFilter>>;
  /** Filter by the object’s `createdBlock` field. */
  readonly createdBlock: InputMaybe<IntFilter>;
  /** Filter by the object’s `id` field. */
  readonly id: InputMaybe<StringFilter>;
  /** Filter by the object’s `indexer` relation. */
  readonly indexer: InputMaybe<IndexerFilter>;
  /** Filter by the object’s `indexerId` field. */
  readonly indexerId: InputMaybe<StringFilter>;
  /** Filter by the object’s `lastEvent` field. */
  readonly lastEvent: InputMaybe<StringFilter>;
  /** Negates the expression. */
  readonly not: InputMaybe<AcceptedOfferFilter>;
  /** Filter by the object’s `offer` relation. */
  readonly offer: InputMaybe<OfferFilter>;
  /** Filter by the object’s `offerId` field. */
  readonly offerId: InputMaybe<StringFilter>;
  /** Checks for any expressions in this list. */
  readonly or: InputMaybe<ReadonlyArray<AcceptedOfferFilter>>;
  /** Filter by the object’s `serviceAgreement` relation. */
  readonly serviceAgreement: InputMaybe<ServiceAgreementFilter>;
  /** Filter by the object’s `serviceAgreementId` field. */
  readonly serviceAgreementId: InputMaybe<StringFilter>;
};

export type AcceptedOfferMaxAggregateFilter = {
  readonly createdBlock: InputMaybe<IntFilter>;
};

export type AcceptedOfferMaxAggregates = {
  readonly __typename: 'AcceptedOfferMaxAggregates';
  /** Maximum of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['Int']['output']>;
};

export type AcceptedOfferMinAggregateFilter = {
  readonly createdBlock: InputMaybe<IntFilter>;
};

export type AcceptedOfferMinAggregates = {
  readonly __typename: 'AcceptedOfferMinAggregates';
  /** Minimum of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['Int']['output']>;
};

export type AcceptedOfferStddevPopulationAggregateFilter = {
  readonly createdBlock: InputMaybe<BigFloatFilter>;
};

export type AcceptedOfferStddevPopulationAggregates = {
  readonly __typename: 'AcceptedOfferStddevPopulationAggregates';
  /** Population standard deviation of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
};

export type AcceptedOfferStddevSampleAggregateFilter = {
  readonly createdBlock: InputMaybe<BigFloatFilter>;
};

export type AcceptedOfferStddevSampleAggregates = {
  readonly __typename: 'AcceptedOfferStddevSampleAggregates';
  /** Sample standard deviation of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
};

export type AcceptedOfferSumAggregateFilter = {
  readonly createdBlock: InputMaybe<BigIntFilter>;
};

export type AcceptedOfferSumAggregates = {
  readonly __typename: 'AcceptedOfferSumAggregates';
  /** Sum of createdBlock across the matching connection */
  readonly createdBlock: Scalars['BigInt']['output'];
};

export type AcceptedOfferVariancePopulationAggregateFilter = {
  readonly createdBlock: InputMaybe<BigFloatFilter>;
};

export type AcceptedOfferVariancePopulationAggregates = {
  readonly __typename: 'AcceptedOfferVariancePopulationAggregates';
  /** Population variance of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
};

export type AcceptedOfferVarianceSampleAggregateFilter = {
  readonly createdBlock: InputMaybe<BigFloatFilter>;
};

export type AcceptedOfferVarianceSampleAggregates = {
  readonly __typename: 'AcceptedOfferVarianceSampleAggregates';
  /** Sample variance of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `AcceptedOffer` values. */
export type AcceptedOffersConnection = {
  readonly __typename: 'AcceptedOffersConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<AcceptedOfferAggregates>;
  /** A list of edges which contains the `AcceptedOffer` and cursor to aid in pagination. */
  readonly edges: ReadonlyArray<AcceptedOffersEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<AcceptedOfferAggregates>>;
  /** A list of `AcceptedOffer` objects. */
  readonly nodes: ReadonlyArray<Maybe<AcceptedOffer>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `AcceptedOffer` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `AcceptedOffer` values. */
export type AcceptedOffersConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<AcceptedOffersGroupBy>;
  having: InputMaybe<AcceptedOffersHavingInput>;
};

/** A `AcceptedOffer` edge in the connection. */
export type AcceptedOffersEdge = {
  readonly __typename: 'AcceptedOffersEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `AcceptedOffer` at the end of the edge. */
  readonly node: Maybe<AcceptedOffer>;
};

/** Grouping methods for `AcceptedOffer` for usage during aggregation. */
export enum AcceptedOffersGroupBy {
  CREATED_BLOCK = 'CREATED_BLOCK',
  ID = 'ID',
  INDEXER_ID = 'INDEXER_ID',
  LAST_EVENT = 'LAST_EVENT',
  OFFER_ID = 'OFFER_ID',
  SERVICE_AGREEMENT_ID = 'SERVICE_AGREEMENT_ID',
}

export type AcceptedOffersHavingAverageInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
};

export type AcceptedOffersHavingDistinctCountInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
};

/** Conditions for `AcceptedOffer` aggregates. */
export type AcceptedOffersHavingInput = {
  readonly AND: InputMaybe<ReadonlyArray<AcceptedOffersHavingInput>>;
  readonly OR: InputMaybe<ReadonlyArray<AcceptedOffersHavingInput>>;
  readonly average: InputMaybe<AcceptedOffersHavingAverageInput>;
  readonly distinctCount: InputMaybe<AcceptedOffersHavingDistinctCountInput>;
  readonly max: InputMaybe<AcceptedOffersHavingMaxInput>;
  readonly min: InputMaybe<AcceptedOffersHavingMinInput>;
  readonly stddevPopulation: InputMaybe<AcceptedOffersHavingStddevPopulationInput>;
  readonly stddevSample: InputMaybe<AcceptedOffersHavingStddevSampleInput>;
  readonly sum: InputMaybe<AcceptedOffersHavingSumInput>;
  readonly variancePopulation: InputMaybe<AcceptedOffersHavingVariancePopulationInput>;
  readonly varianceSample: InputMaybe<AcceptedOffersHavingVarianceSampleInput>;
};

export type AcceptedOffersHavingMaxInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
};

export type AcceptedOffersHavingMinInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
};

export type AcceptedOffersHavingStddevPopulationInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
};

export type AcceptedOffersHavingStddevSampleInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
};

export type AcceptedOffersHavingSumInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
};

export type AcceptedOffersHavingVariancePopulationInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
};

export type AcceptedOffersHavingVarianceSampleInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
};

/** Methods to use when ordering `AcceptedOffer`. */
export enum AcceptedOffersOrderBy {
  CREATED_BLOCK_ASC = 'CREATED_BLOCK_ASC',
  CREATED_BLOCK_DESC = 'CREATED_BLOCK_DESC',
  ID_ASC = 'ID_ASC',
  ID_DESC = 'ID_DESC',
  INDEXER_BY_INDEXER_ID__ACTIVE_ASC = 'INDEXER_BY_INDEXER_ID__ACTIVE_ASC',
  INDEXER_BY_INDEXER_ID__ACTIVE_DESC = 'INDEXER_BY_INDEXER_ID__ACTIVE_DESC',
  INDEXER_BY_INDEXER_ID__CAPACITY_ASC = 'INDEXER_BY_INDEXER_ID__CAPACITY_ASC',
  INDEXER_BY_INDEXER_ID__CAPACITY_DESC = 'INDEXER_BY_INDEXER_ID__CAPACITY_DESC',
  INDEXER_BY_INDEXER_ID__COMMISSION_ASC = 'INDEXER_BY_INDEXER_ID__COMMISSION_ASC',
  INDEXER_BY_INDEXER_ID__COMMISSION_DESC = 'INDEXER_BY_INDEXER_ID__COMMISSION_DESC',
  INDEXER_BY_INDEXER_ID__CONTROLLER_ASC = 'INDEXER_BY_INDEXER_ID__CONTROLLER_ASC',
  INDEXER_BY_INDEXER_ID__CONTROLLER_DESC = 'INDEXER_BY_INDEXER_ID__CONTROLLER_DESC',
  INDEXER_BY_INDEXER_ID__CREATED_BLOCK_ASC = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_ASC',
  INDEXER_BY_INDEXER_ID__CREATED_BLOCK_DESC = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_DESC',
  INDEXER_BY_INDEXER_ID__ID_ASC = 'INDEXER_BY_INDEXER_ID__ID_ASC',
  INDEXER_BY_INDEXER_ID__ID_DESC = 'INDEXER_BY_INDEXER_ID__ID_DESC',
  INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_ASC = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_ASC',
  INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_DESC = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_DESC',
  INDEXER_BY_INDEXER_ID__LAST_EVENT_ASC = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_ASC',
  INDEXER_BY_INDEXER_ID__LAST_EVENT_DESC = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_DESC',
  INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_ASC = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_ASC',
  INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_DESC = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_DESC',
  INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_ASC = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_ASC',
  INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_DESC = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_DESC',
  INDEXER_BY_INDEXER_ID__METADATA_ASC = 'INDEXER_BY_INDEXER_ID__METADATA_ASC',
  INDEXER_BY_INDEXER_ID__METADATA_DESC = 'INDEXER_BY_INDEXER_ID__METADATA_DESC',
  INDEXER_BY_INDEXER_ID__SELF_STAKE_ASC = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_ASC',
  INDEXER_BY_INDEXER_ID__SELF_STAKE_DESC = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_DESC',
  INDEXER_BY_INDEXER_ID__TOTAL_STAKE_ASC = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_ASC',
  INDEXER_BY_INDEXER_ID__TOTAL_STAKE_DESC = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_DESC',
  INDEXER_ID_ASC = 'INDEXER_ID_ASC',
  INDEXER_ID_DESC = 'INDEXER_ID_DESC',
  LAST_EVENT_ASC = 'LAST_EVENT_ASC',
  LAST_EVENT_DESC = 'LAST_EVENT_DESC',
  NATURAL = 'NATURAL',
  OFFER_BY_OFFER_ID__ACCEPTED_ASC = 'OFFER_BY_OFFER_ID__ACCEPTED_ASC',
  OFFER_BY_OFFER_ID__ACCEPTED_DESC = 'OFFER_BY_OFFER_ID__ACCEPTED_DESC',
  OFFER_BY_OFFER_ID__CONSUMER_ASC = 'OFFER_BY_OFFER_ID__CONSUMER_ASC',
  OFFER_BY_OFFER_ID__CONSUMER_DESC = 'OFFER_BY_OFFER_ID__CONSUMER_DESC',
  OFFER_BY_OFFER_ID__CREATED_BLOCK_ASC = 'OFFER_BY_OFFER_ID__CREATED_BLOCK_ASC',
  OFFER_BY_OFFER_ID__CREATED_BLOCK_DESC = 'OFFER_BY_OFFER_ID__CREATED_BLOCK_DESC',
  OFFER_BY_OFFER_ID__DEPLOYMENT_ID_ASC = 'OFFER_BY_OFFER_ID__DEPLOYMENT_ID_ASC',
  OFFER_BY_OFFER_ID__DEPLOYMENT_ID_DESC = 'OFFER_BY_OFFER_ID__DEPLOYMENT_ID_DESC',
  OFFER_BY_OFFER_ID__DEPOSIT_ASC = 'OFFER_BY_OFFER_ID__DEPOSIT_ASC',
  OFFER_BY_OFFER_ID__DEPOSIT_DESC = 'OFFER_BY_OFFER_ID__DEPOSIT_DESC',
  OFFER_BY_OFFER_ID__EXPIRE_DATE_ASC = 'OFFER_BY_OFFER_ID__EXPIRE_DATE_ASC',
  OFFER_BY_OFFER_ID__EXPIRE_DATE_DESC = 'OFFER_BY_OFFER_ID__EXPIRE_DATE_DESC',
  OFFER_BY_OFFER_ID__ID_ASC = 'OFFER_BY_OFFER_ID__ID_ASC',
  OFFER_BY_OFFER_ID__ID_DESC = 'OFFER_BY_OFFER_ID__ID_DESC',
  OFFER_BY_OFFER_ID__LAST_EVENT_ASC = 'OFFER_BY_OFFER_ID__LAST_EVENT_ASC',
  OFFER_BY_OFFER_ID__LAST_EVENT_DESC = 'OFFER_BY_OFFER_ID__LAST_EVENT_DESC',
  OFFER_BY_OFFER_ID__LIMIT_ASC = 'OFFER_BY_OFFER_ID__LIMIT_ASC',
  OFFER_BY_OFFER_ID__LIMIT_DESC = 'OFFER_BY_OFFER_ID__LIMIT_DESC',
  OFFER_BY_OFFER_ID__MINIMUM_ACCEPT_HEIGHT_ASC = 'OFFER_BY_OFFER_ID__MINIMUM_ACCEPT_HEIGHT_ASC',
  OFFER_BY_OFFER_ID__MINIMUM_ACCEPT_HEIGHT_DESC = 'OFFER_BY_OFFER_ID__MINIMUM_ACCEPT_HEIGHT_DESC',
  OFFER_BY_OFFER_ID__MINIMUM_STAKING_AMOUNT_ASC = 'OFFER_BY_OFFER_ID__MINIMUM_STAKING_AMOUNT_ASC',
  OFFER_BY_OFFER_ID__MINIMUM_STAKING_AMOUNT_DESC = 'OFFER_BY_OFFER_ID__MINIMUM_STAKING_AMOUNT_DESC',
  OFFER_BY_OFFER_ID__PLAN_TEMPLATE_ID_ASC = 'OFFER_BY_OFFER_ID__PLAN_TEMPLATE_ID_ASC',
  OFFER_BY_OFFER_ID__PLAN_TEMPLATE_ID_DESC = 'OFFER_BY_OFFER_ID__PLAN_TEMPLATE_ID_DESC',
  OFFER_BY_OFFER_ID__REACH_LIMIT_ASC = 'OFFER_BY_OFFER_ID__REACH_LIMIT_ASC',
  OFFER_BY_OFFER_ID__REACH_LIMIT_DESC = 'OFFER_BY_OFFER_ID__REACH_LIMIT_DESC',
  OFFER_BY_OFFER_ID__WITHDRAWN_ASC = 'OFFER_BY_OFFER_ID__WITHDRAWN_ASC',
  OFFER_BY_OFFER_ID__WITHDRAWN_DESC = 'OFFER_BY_OFFER_ID__WITHDRAWN_DESC',
  OFFER_BY_OFFER_ID__WITHDRAW_PENALTY_ASC = 'OFFER_BY_OFFER_ID__WITHDRAW_PENALTY_ASC',
  OFFER_BY_OFFER_ID__WITHDRAW_PENALTY_DESC = 'OFFER_BY_OFFER_ID__WITHDRAW_PENALTY_DESC',
  OFFER_ID_ASC = 'OFFER_ID_ASC',
  OFFER_ID_DESC = 'OFFER_ID_DESC',
  PRIMARY_KEY_ASC = 'PRIMARY_KEY_ASC',
  PRIMARY_KEY_DESC = 'PRIMARY_KEY_DESC',
  SERVICE_AGREEMENT_BY_SERVICE_AGREEMENT_ID__CONSUMER_ADDRESS_ASC = 'SERVICE_AGREEMENT_BY_SERVICE_AGREEMENT_ID__CONSUMER_ADDRESS_ASC',
  SERVICE_AGREEMENT_BY_SERVICE_AGREEMENT_ID__CONSUMER_ADDRESS_DESC = 'SERVICE_AGREEMENT_BY_SERVICE_AGREEMENT_ID__CONSUMER_ADDRESS_DESC',
  SERVICE_AGREEMENT_BY_SERVICE_AGREEMENT_ID__CREATED_BLOCK_ASC = 'SERVICE_AGREEMENT_BY_SERVICE_AGREEMENT_ID__CREATED_BLOCK_ASC',
  SERVICE_AGREEMENT_BY_SERVICE_AGREEMENT_ID__CREATED_BLOCK_DESC = 'SERVICE_AGREEMENT_BY_SERVICE_AGREEMENT_ID__CREATED_BLOCK_DESC',
  SERVICE_AGREEMENT_BY_SERVICE_AGREEMENT_ID__DEPLOYMENT_ID_ASC = 'SERVICE_AGREEMENT_BY_SERVICE_AGREEMENT_ID__DEPLOYMENT_ID_ASC',
  SERVICE_AGREEMENT_BY_SERVICE_AGREEMENT_ID__DEPLOYMENT_ID_DESC = 'SERVICE_AGREEMENT_BY_SERVICE_AGREEMENT_ID__DEPLOYMENT_ID_DESC',
  SERVICE_AGREEMENT_BY_SERVICE_AGREEMENT_ID__END_TIME_ASC = 'SERVICE_AGREEMENT_BY_SERVICE_AGREEMENT_ID__END_TIME_ASC',
  SERVICE_AGREEMENT_BY_SERVICE_AGREEMENT_ID__END_TIME_DESC = 'SERVICE_AGREEMENT_BY_SERVICE_AGREEMENT_ID__END_TIME_DESC',
  SERVICE_AGREEMENT_BY_SERVICE_AGREEMENT_ID__ID_ASC = 'SERVICE_AGREEMENT_BY_SERVICE_AGREEMENT_ID__ID_ASC',
  SERVICE_AGREEMENT_BY_SERVICE_AGREEMENT_ID__ID_DESC = 'SERVICE_AGREEMENT_BY_SERVICE_AGREEMENT_ID__ID_DESC',
  SERVICE_AGREEMENT_BY_SERVICE_AGREEMENT_ID__INDEXER_ADDRESS_ASC = 'SERVICE_AGREEMENT_BY_SERVICE_AGREEMENT_ID__INDEXER_ADDRESS_ASC',
  SERVICE_AGREEMENT_BY_SERVICE_AGREEMENT_ID__INDEXER_ADDRESS_DESC = 'SERVICE_AGREEMENT_BY_SERVICE_AGREEMENT_ID__INDEXER_ADDRESS_DESC',
  SERVICE_AGREEMENT_BY_SERVICE_AGREEMENT_ID__LAST_EVENT_ASC = 'SERVICE_AGREEMENT_BY_SERVICE_AGREEMENT_ID__LAST_EVENT_ASC',
  SERVICE_AGREEMENT_BY_SERVICE_AGREEMENT_ID__LAST_EVENT_DESC = 'SERVICE_AGREEMENT_BY_SERVICE_AGREEMENT_ID__LAST_EVENT_DESC',
  SERVICE_AGREEMENT_BY_SERVICE_AGREEMENT_ID__LOCKED_AMOUNT_ASC = 'SERVICE_AGREEMENT_BY_SERVICE_AGREEMENT_ID__LOCKED_AMOUNT_ASC',
  SERVICE_AGREEMENT_BY_SERVICE_AGREEMENT_ID__LOCKED_AMOUNT_DESC = 'SERVICE_AGREEMENT_BY_SERVICE_AGREEMENT_ID__LOCKED_AMOUNT_DESC',
  SERVICE_AGREEMENT_BY_SERVICE_AGREEMENT_ID__PERIOD_ASC = 'SERVICE_AGREEMENT_BY_SERVICE_AGREEMENT_ID__PERIOD_ASC',
  SERVICE_AGREEMENT_BY_SERVICE_AGREEMENT_ID__PERIOD_DESC = 'SERVICE_AGREEMENT_BY_SERVICE_AGREEMENT_ID__PERIOD_DESC',
  SERVICE_AGREEMENT_BY_SERVICE_AGREEMENT_ID__PLAN_TEMPLATE_ID_ASC = 'SERVICE_AGREEMENT_BY_SERVICE_AGREEMENT_ID__PLAN_TEMPLATE_ID_ASC',
  SERVICE_AGREEMENT_BY_SERVICE_AGREEMENT_ID__PLAN_TEMPLATE_ID_DESC = 'SERVICE_AGREEMENT_BY_SERVICE_AGREEMENT_ID__PLAN_TEMPLATE_ID_DESC',
  SERVICE_AGREEMENT_BY_SERVICE_AGREEMENT_ID__START_TIME_ASC = 'SERVICE_AGREEMENT_BY_SERVICE_AGREEMENT_ID__START_TIME_ASC',
  SERVICE_AGREEMENT_BY_SERVICE_AGREEMENT_ID__START_TIME_DESC = 'SERVICE_AGREEMENT_BY_SERVICE_AGREEMENT_ID__START_TIME_DESC',
  SERVICE_AGREEMENT_ID_ASC = 'SERVICE_AGREEMENT_ID_ASC',
  SERVICE_AGREEMENT_ID_DESC = 'SERVICE_AGREEMENT_ID_DESC',
}

export type Airdrop = Node & {
  readonly __typename: 'Airdrop';
  /** Reads and enables pagination through a set of `AirdropUser`. */
  readonly airdropUsers: AirdropUsersConnection;
  readonly createAt: Maybe<Scalars['String']['output']>;
  readonly endTime: Scalars['Datetime']['output'];
  readonly hasWithdrawn: Maybe<Scalars['Boolean']['output']>;
  readonly id: Scalars['String']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  readonly nodeId: Scalars['ID']['output'];
  readonly startTime: Scalars['Datetime']['output'];
  readonly tokenAddress: Scalars['String']['output'];
  readonly updateAt: Maybe<Scalars['String']['output']>;
  readonly withdrawAmount: Maybe<Scalars['BigFloat']['output']>;
};

export type AirdropAirdropUsersArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Airdrop_Users_Distinct_Enum>>>;
  filter: InputMaybe<AirdropUserFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<AirdropUsersOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type AirdropAggregates = {
  readonly __typename: 'AirdropAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly average: Maybe<AirdropAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly distinctCount: Maybe<AirdropDistinctCountAggregates>;
  readonly keys: Maybe<ReadonlyArray<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly max: Maybe<AirdropMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly min: Maybe<AirdropMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevPopulation: Maybe<AirdropStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevSample: Maybe<AirdropStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly sum: Maybe<AirdropSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly variancePopulation: Maybe<AirdropVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly varianceSample: Maybe<AirdropVarianceSampleAggregates>;
};

export type AirdropAmount = Node & {
  readonly __typename: 'AirdropAmount';
  readonly claimedAmount: Scalars['BigFloat']['output'];
  readonly createAt: Maybe<Scalars['String']['output']>;
  readonly id: Scalars['String']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  readonly nodeId: Scalars['ID']['output'];
  readonly totalAirdropAmount: Scalars['BigFloat']['output'];
  readonly updateAt: Maybe<Scalars['String']['output']>;
};

export type AirdropAmountAggregates = {
  readonly __typename: 'AirdropAmountAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly average: Maybe<AirdropAmountAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly distinctCount: Maybe<AirdropAmountDistinctCountAggregates>;
  readonly keys: Maybe<ReadonlyArray<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly max: Maybe<AirdropAmountMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly min: Maybe<AirdropAmountMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevPopulation: Maybe<AirdropAmountStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevSample: Maybe<AirdropAmountStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly sum: Maybe<AirdropAmountSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly variancePopulation: Maybe<AirdropAmountVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly varianceSample: Maybe<AirdropAmountVarianceSampleAggregates>;
};

export type AirdropAmountAverageAggregates = {
  readonly __typename: 'AirdropAmountAverageAggregates';
  /** Mean average of claimedAmount across the matching connection */
  readonly claimedAmount: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of totalAirdropAmount across the matching connection */
  readonly totalAirdropAmount: Maybe<Scalars['BigFloat']['output']>;
};

export type AirdropAmountDistinctCountAggregates = {
  readonly __typename: 'AirdropAmountDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  readonly _blockRange: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  readonly _id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of claimedAmount across the matching connection */
  readonly claimedAmount: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createAt across the matching connection */
  readonly createAt: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  readonly id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of totalAirdropAmount across the matching connection */
  readonly totalAirdropAmount: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of updateAt across the matching connection */
  readonly updateAt: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `AirdropAmount` object types. All fields are combined with a logical ‘and.’ */
export type AirdropAmountFilter = {
  /** Checks for all expressions in this list. */
  readonly and: InputMaybe<ReadonlyArray<AirdropAmountFilter>>;
  /** Filter by the object’s `claimedAmount` field. */
  readonly claimedAmount: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `createAt` field. */
  readonly createAt: InputMaybe<StringFilter>;
  /** Filter by the object’s `id` field. */
  readonly id: InputMaybe<StringFilter>;
  /** Negates the expression. */
  readonly not: InputMaybe<AirdropAmountFilter>;
  /** Checks for any expressions in this list. */
  readonly or: InputMaybe<ReadonlyArray<AirdropAmountFilter>>;
  /** Filter by the object’s `totalAirdropAmount` field. */
  readonly totalAirdropAmount: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `updateAt` field. */
  readonly updateAt: InputMaybe<StringFilter>;
};

export type AirdropAmountMaxAggregates = {
  readonly __typename: 'AirdropAmountMaxAggregates';
  /** Maximum of claimedAmount across the matching connection */
  readonly claimedAmount: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of totalAirdropAmount across the matching connection */
  readonly totalAirdropAmount: Maybe<Scalars['BigFloat']['output']>;
};

export type AirdropAmountMinAggregates = {
  readonly __typename: 'AirdropAmountMinAggregates';
  /** Minimum of claimedAmount across the matching connection */
  readonly claimedAmount: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of totalAirdropAmount across the matching connection */
  readonly totalAirdropAmount: Maybe<Scalars['BigFloat']['output']>;
};

export type AirdropAmountStddevPopulationAggregates = {
  readonly __typename: 'AirdropAmountStddevPopulationAggregates';
  /** Population standard deviation of claimedAmount across the matching connection */
  readonly claimedAmount: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of totalAirdropAmount across the matching connection */
  readonly totalAirdropAmount: Maybe<Scalars['BigFloat']['output']>;
};

export type AirdropAmountStddevSampleAggregates = {
  readonly __typename: 'AirdropAmountStddevSampleAggregates';
  /** Sample standard deviation of claimedAmount across the matching connection */
  readonly claimedAmount: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of totalAirdropAmount across the matching connection */
  readonly totalAirdropAmount: Maybe<Scalars['BigFloat']['output']>;
};

export type AirdropAmountSumAggregates = {
  readonly __typename: 'AirdropAmountSumAggregates';
  /** Sum of claimedAmount across the matching connection */
  readonly claimedAmount: Scalars['BigFloat']['output'];
  /** Sum of totalAirdropAmount across the matching connection */
  readonly totalAirdropAmount: Scalars['BigFloat']['output'];
};

export type AirdropAmountVariancePopulationAggregates = {
  readonly __typename: 'AirdropAmountVariancePopulationAggregates';
  /** Population variance of claimedAmount across the matching connection */
  readonly claimedAmount: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of totalAirdropAmount across the matching connection */
  readonly totalAirdropAmount: Maybe<Scalars['BigFloat']['output']>;
};

export type AirdropAmountVarianceSampleAggregates = {
  readonly __typename: 'AirdropAmountVarianceSampleAggregates';
  /** Sample variance of claimedAmount across the matching connection */
  readonly claimedAmount: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of totalAirdropAmount across the matching connection */
  readonly totalAirdropAmount: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `AirdropAmount` values. */
export type AirdropAmountsConnection = {
  readonly __typename: 'AirdropAmountsConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<AirdropAmountAggregates>;
  /** A list of edges which contains the `AirdropAmount` and cursor to aid in pagination. */
  readonly edges: ReadonlyArray<AirdropAmountsEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<AirdropAmountAggregates>>;
  /** A list of `AirdropAmount` objects. */
  readonly nodes: ReadonlyArray<Maybe<AirdropAmount>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `AirdropAmount` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `AirdropAmount` values. */
export type AirdropAmountsConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<AirdropAmountsGroupBy>;
  having: InputMaybe<AirdropAmountsHavingInput>;
};

/** A `AirdropAmount` edge in the connection. */
export type AirdropAmountsEdge = {
  readonly __typename: 'AirdropAmountsEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `AirdropAmount` at the end of the edge. */
  readonly node: Maybe<AirdropAmount>;
};

/** Grouping methods for `AirdropAmount` for usage during aggregation. */
export enum AirdropAmountsGroupBy {
  CLAIMED_AMOUNT = 'CLAIMED_AMOUNT',
  CREATE_AT = 'CREATE_AT',
  ID = 'ID',
  TOTAL_AIRDROP_AMOUNT = 'TOTAL_AIRDROP_AMOUNT',
  UPDATE_AT = 'UPDATE_AT',
}

export type AirdropAmountsHavingAverageInput = {
  readonly claimedAmount: InputMaybe<HavingBigfloatFilter>;
  readonly totalAirdropAmount: InputMaybe<HavingBigfloatFilter>;
};

export type AirdropAmountsHavingDistinctCountInput = {
  readonly claimedAmount: InputMaybe<HavingBigfloatFilter>;
  readonly totalAirdropAmount: InputMaybe<HavingBigfloatFilter>;
};

/** Conditions for `AirdropAmount` aggregates. */
export type AirdropAmountsHavingInput = {
  readonly AND: InputMaybe<ReadonlyArray<AirdropAmountsHavingInput>>;
  readonly OR: InputMaybe<ReadonlyArray<AirdropAmountsHavingInput>>;
  readonly average: InputMaybe<AirdropAmountsHavingAverageInput>;
  readonly distinctCount: InputMaybe<AirdropAmountsHavingDistinctCountInput>;
  readonly max: InputMaybe<AirdropAmountsHavingMaxInput>;
  readonly min: InputMaybe<AirdropAmountsHavingMinInput>;
  readonly stddevPopulation: InputMaybe<AirdropAmountsHavingStddevPopulationInput>;
  readonly stddevSample: InputMaybe<AirdropAmountsHavingStddevSampleInput>;
  readonly sum: InputMaybe<AirdropAmountsHavingSumInput>;
  readonly variancePopulation: InputMaybe<AirdropAmountsHavingVariancePopulationInput>;
  readonly varianceSample: InputMaybe<AirdropAmountsHavingVarianceSampleInput>;
};

export type AirdropAmountsHavingMaxInput = {
  readonly claimedAmount: InputMaybe<HavingBigfloatFilter>;
  readonly totalAirdropAmount: InputMaybe<HavingBigfloatFilter>;
};

export type AirdropAmountsHavingMinInput = {
  readonly claimedAmount: InputMaybe<HavingBigfloatFilter>;
  readonly totalAirdropAmount: InputMaybe<HavingBigfloatFilter>;
};

export type AirdropAmountsHavingStddevPopulationInput = {
  readonly claimedAmount: InputMaybe<HavingBigfloatFilter>;
  readonly totalAirdropAmount: InputMaybe<HavingBigfloatFilter>;
};

export type AirdropAmountsHavingStddevSampleInput = {
  readonly claimedAmount: InputMaybe<HavingBigfloatFilter>;
  readonly totalAirdropAmount: InputMaybe<HavingBigfloatFilter>;
};

export type AirdropAmountsHavingSumInput = {
  readonly claimedAmount: InputMaybe<HavingBigfloatFilter>;
  readonly totalAirdropAmount: InputMaybe<HavingBigfloatFilter>;
};

export type AirdropAmountsHavingVariancePopulationInput = {
  readonly claimedAmount: InputMaybe<HavingBigfloatFilter>;
  readonly totalAirdropAmount: InputMaybe<HavingBigfloatFilter>;
};

export type AirdropAmountsHavingVarianceSampleInput = {
  readonly claimedAmount: InputMaybe<HavingBigfloatFilter>;
  readonly totalAirdropAmount: InputMaybe<HavingBigfloatFilter>;
};

/** Methods to use when ordering `AirdropAmount`. */
export enum AirdropAmountsOrderBy {
  CLAIMED_AMOUNT_ASC = 'CLAIMED_AMOUNT_ASC',
  CLAIMED_AMOUNT_DESC = 'CLAIMED_AMOUNT_DESC',
  CREATE_AT_ASC = 'CREATE_AT_ASC',
  CREATE_AT_DESC = 'CREATE_AT_DESC',
  ID_ASC = 'ID_ASC',
  ID_DESC = 'ID_DESC',
  NATURAL = 'NATURAL',
  PRIMARY_KEY_ASC = 'PRIMARY_KEY_ASC',
  PRIMARY_KEY_DESC = 'PRIMARY_KEY_DESC',
  TOTAL_AIRDROP_AMOUNT_ASC = 'TOTAL_AIRDROP_AMOUNT_ASC',
  TOTAL_AIRDROP_AMOUNT_DESC = 'TOTAL_AIRDROP_AMOUNT_DESC',
  UPDATE_AT_ASC = 'UPDATE_AT_ASC',
  UPDATE_AT_DESC = 'UPDATE_AT_DESC',
}

export type AirdropAverageAggregates = {
  readonly __typename: 'AirdropAverageAggregates';
  /** Mean average of withdrawAmount across the matching connection */
  readonly withdrawAmount: Maybe<Scalars['BigFloat']['output']>;
};

export enum AirdropClaimStatus {
  CLAIMED = 'CLAIMED',
  UNCLAIMED = 'UNCLAIMED',
}

/** A filter to be used against AirdropClaimStatus fields. All fields are combined with a logical ‘and.’ */
export type AirdropClaimStatusFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  readonly distinctFrom: InputMaybe<AirdropClaimStatus>;
  /** Equal to the specified value. */
  readonly equalTo: InputMaybe<AirdropClaimStatus>;
  /** Greater than the specified value. */
  readonly greaterThan: InputMaybe<AirdropClaimStatus>;
  /** Greater than or equal to the specified value. */
  readonly greaterThanOrEqualTo: InputMaybe<AirdropClaimStatus>;
  /** Included in the specified list. */
  readonly in: InputMaybe<ReadonlyArray<AirdropClaimStatus>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  readonly isNull: InputMaybe<Scalars['Boolean']['input']>;
  /** Less than the specified value. */
  readonly lessThan: InputMaybe<AirdropClaimStatus>;
  /** Less than or equal to the specified value. */
  readonly lessThanOrEqualTo: InputMaybe<AirdropClaimStatus>;
  /** Equal to the specified value, treating null like an ordinary value. */
  readonly notDistinctFrom: InputMaybe<AirdropClaimStatus>;
  /** Not equal to the specified value. */
  readonly notEqualTo: InputMaybe<AirdropClaimStatus>;
  /** Not included in the specified list. */
  readonly notIn: InputMaybe<ReadonlyArray<AirdropClaimStatus>>;
};

export type AirdropDistinctCountAggregates = {
  readonly __typename: 'AirdropDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  readonly _blockRange: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  readonly _id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createAt across the matching connection */
  readonly createAt: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of endTime across the matching connection */
  readonly endTime: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of hasWithdrawn across the matching connection */
  readonly hasWithdrawn: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  readonly id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of startTime across the matching connection */
  readonly startTime: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of tokenAddress across the matching connection */
  readonly tokenAddress: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of updateAt across the matching connection */
  readonly updateAt: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of withdrawAmount across the matching connection */
  readonly withdrawAmount: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `Airdrop` object types. All fields are combined with a logical ‘and.’ */
export type AirdropFilter = {
  /** Filter by the object’s `airdropUsers` relation. */
  readonly airdropUsers: InputMaybe<AirdropToManyAirdropUserFilter>;
  /** Some related `airdropUsers` exist. */
  readonly airdropUsersExist: InputMaybe<Scalars['Boolean']['input']>;
  /** Checks for all expressions in this list. */
  readonly and: InputMaybe<ReadonlyArray<AirdropFilter>>;
  /** Filter by the object’s `createAt` field. */
  readonly createAt: InputMaybe<StringFilter>;
  /** Filter by the object’s `endTime` field. */
  readonly endTime: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `hasWithdrawn` field. */
  readonly hasWithdrawn: InputMaybe<BooleanFilter>;
  /** Filter by the object’s `id` field. */
  readonly id: InputMaybe<StringFilter>;
  /** Negates the expression. */
  readonly not: InputMaybe<AirdropFilter>;
  /** Checks for any expressions in this list. */
  readonly or: InputMaybe<ReadonlyArray<AirdropFilter>>;
  /** Filter by the object’s `startTime` field. */
  readonly startTime: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `tokenAddress` field. */
  readonly tokenAddress: InputMaybe<StringFilter>;
  /** Filter by the object’s `updateAt` field. */
  readonly updateAt: InputMaybe<StringFilter>;
  /** Filter by the object’s `withdrawAmount` field. */
  readonly withdrawAmount: InputMaybe<BigFloatFilter>;
};

export type AirdropMaxAggregates = {
  readonly __typename: 'AirdropMaxAggregates';
  /** Maximum of withdrawAmount across the matching connection */
  readonly withdrawAmount: Maybe<Scalars['BigFloat']['output']>;
};

export type AirdropMinAggregates = {
  readonly __typename: 'AirdropMinAggregates';
  /** Minimum of withdrawAmount across the matching connection */
  readonly withdrawAmount: Maybe<Scalars['BigFloat']['output']>;
};

export type AirdropStddevPopulationAggregates = {
  readonly __typename: 'AirdropStddevPopulationAggregates';
  /** Population standard deviation of withdrawAmount across the matching connection */
  readonly withdrawAmount: Maybe<Scalars['BigFloat']['output']>;
};

export type AirdropStddevSampleAggregates = {
  readonly __typename: 'AirdropStddevSampleAggregates';
  /** Sample standard deviation of withdrawAmount across the matching connection */
  readonly withdrawAmount: Maybe<Scalars['BigFloat']['output']>;
};

export type AirdropSumAggregates = {
  readonly __typename: 'AirdropSumAggregates';
  /** Sum of withdrawAmount across the matching connection */
  readonly withdrawAmount: Scalars['BigFloat']['output'];
};

/** A filter to be used against many `AirdropUser` object types. All fields are combined with a logical ‘and.’ */
export type AirdropToManyAirdropUserFilter = {
  /** Aggregates across related `AirdropUser` match the filter criteria. */
  readonly aggregates: InputMaybe<AirdropUserAggregatesFilter>;
  /** Every related `AirdropUser` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly every: InputMaybe<AirdropUserFilter>;
  /** No related `AirdropUser` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly none: InputMaybe<AirdropUserFilter>;
  /** Some related `AirdropUser` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly some: InputMaybe<AirdropUserFilter>;
};

export type AirdropUser = Node & {
  readonly __typename: 'AirdropUser';
  /** Reads a single `Airdrop` that is related to this `AirdropUser`. */
  readonly airdrop: Maybe<Airdrop>;
  readonly airdropId: Scalars['String']['output'];
  readonly amount: Scalars['BigFloat']['output'];
  readonly createAt: Maybe<Scalars['String']['output']>;
  readonly id: Scalars['String']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  readonly nodeId: Scalars['ID']['output'];
  readonly status: AirdropClaimStatus;
  readonly updateAt: Maybe<Scalars['String']['output']>;
  readonly user: Scalars['String']['output'];
};

export type AirdropUserAggregates = {
  readonly __typename: 'AirdropUserAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly average: Maybe<AirdropUserAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly distinctCount: Maybe<AirdropUserDistinctCountAggregates>;
  readonly keys: Maybe<ReadonlyArray<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly max: Maybe<AirdropUserMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly min: Maybe<AirdropUserMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevPopulation: Maybe<AirdropUserStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevSample: Maybe<AirdropUserStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly sum: Maybe<AirdropUserSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly variancePopulation: Maybe<AirdropUserVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly varianceSample: Maybe<AirdropUserVarianceSampleAggregates>;
};

/** A filter to be used against aggregates of `AirdropUser` object types. */
export type AirdropUserAggregatesFilter = {
  /** Mean average aggregate over matching `AirdropUser` objects. */
  readonly average: InputMaybe<AirdropUserAverageAggregateFilter>;
  /** Distinct count aggregate over matching `AirdropUser` objects. */
  readonly distinctCount: InputMaybe<AirdropUserDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `AirdropUser` object to be included within the aggregate. */
  readonly filter: InputMaybe<AirdropUserFilter>;
  /** Maximum aggregate over matching `AirdropUser` objects. */
  readonly max: InputMaybe<AirdropUserMaxAggregateFilter>;
  /** Minimum aggregate over matching `AirdropUser` objects. */
  readonly min: InputMaybe<AirdropUserMinAggregateFilter>;
  /** Population standard deviation aggregate over matching `AirdropUser` objects. */
  readonly stddevPopulation: InputMaybe<AirdropUserStddevPopulationAggregateFilter>;
  /** Sample standard deviation aggregate over matching `AirdropUser` objects. */
  readonly stddevSample: InputMaybe<AirdropUserStddevSampleAggregateFilter>;
  /** Sum aggregate over matching `AirdropUser` objects. */
  readonly sum: InputMaybe<AirdropUserSumAggregateFilter>;
  /** Population variance aggregate over matching `AirdropUser` objects. */
  readonly variancePopulation: InputMaybe<AirdropUserVariancePopulationAggregateFilter>;
  /** Sample variance aggregate over matching `AirdropUser` objects. */
  readonly varianceSample: InputMaybe<AirdropUserVarianceSampleAggregateFilter>;
};

export type AirdropUserAverageAggregateFilter = {
  readonly amount: InputMaybe<BigFloatFilter>;
};

export type AirdropUserAverageAggregates = {
  readonly __typename: 'AirdropUserAverageAggregates';
  /** Mean average of amount across the matching connection */
  readonly amount: Maybe<Scalars['BigFloat']['output']>;
};

export type AirdropUserDistinctCountAggregateFilter = {
  readonly _blockRange: InputMaybe<BigIntFilter>;
  readonly _id: InputMaybe<BigIntFilter>;
  readonly airdropId: InputMaybe<BigIntFilter>;
  readonly amount: InputMaybe<BigIntFilter>;
  readonly createAt: InputMaybe<BigIntFilter>;
  readonly id: InputMaybe<BigIntFilter>;
  readonly status: InputMaybe<BigIntFilter>;
  readonly updateAt: InputMaybe<BigIntFilter>;
  readonly user: InputMaybe<BigIntFilter>;
};

export type AirdropUserDistinctCountAggregates = {
  readonly __typename: 'AirdropUserDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  readonly _blockRange: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  readonly _id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of airdropId across the matching connection */
  readonly airdropId: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of amount across the matching connection */
  readonly amount: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createAt across the matching connection */
  readonly createAt: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  readonly id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of status across the matching connection */
  readonly status: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of updateAt across the matching connection */
  readonly updateAt: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of user across the matching connection */
  readonly user: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `AirdropUser` object types. All fields are combined with a logical ‘and.’ */
export type AirdropUserFilter = {
  /** Filter by the object’s `airdrop` relation. */
  readonly airdrop: InputMaybe<AirdropFilter>;
  /** Filter by the object’s `airdropId` field. */
  readonly airdropId: InputMaybe<StringFilter>;
  /** Filter by the object’s `amount` field. */
  readonly amount: InputMaybe<BigFloatFilter>;
  /** Checks for all expressions in this list. */
  readonly and: InputMaybe<ReadonlyArray<AirdropUserFilter>>;
  /** Filter by the object’s `createAt` field. */
  readonly createAt: InputMaybe<StringFilter>;
  /** Filter by the object’s `id` field. */
  readonly id: InputMaybe<StringFilter>;
  /** Negates the expression. */
  readonly not: InputMaybe<AirdropUserFilter>;
  /** Checks for any expressions in this list. */
  readonly or: InputMaybe<ReadonlyArray<AirdropUserFilter>>;
  /** Filter by the object’s `status` field. */
  readonly status: InputMaybe<AirdropClaimStatusFilter>;
  /** Filter by the object’s `updateAt` field. */
  readonly updateAt: InputMaybe<StringFilter>;
  /** Filter by the object’s `user` field. */
  readonly user: InputMaybe<StringFilter>;
};

export type AirdropUserMaxAggregateFilter = {
  readonly amount: InputMaybe<BigFloatFilter>;
};

export type AirdropUserMaxAggregates = {
  readonly __typename: 'AirdropUserMaxAggregates';
  /** Maximum of amount across the matching connection */
  readonly amount: Maybe<Scalars['BigFloat']['output']>;
};

export type AirdropUserMinAggregateFilter = {
  readonly amount: InputMaybe<BigFloatFilter>;
};

export type AirdropUserMinAggregates = {
  readonly __typename: 'AirdropUserMinAggregates';
  /** Minimum of amount across the matching connection */
  readonly amount: Maybe<Scalars['BigFloat']['output']>;
};

export type AirdropUserStddevPopulationAggregateFilter = {
  readonly amount: InputMaybe<BigFloatFilter>;
};

export type AirdropUserStddevPopulationAggregates = {
  readonly __typename: 'AirdropUserStddevPopulationAggregates';
  /** Population standard deviation of amount across the matching connection */
  readonly amount: Maybe<Scalars['BigFloat']['output']>;
};

export type AirdropUserStddevSampleAggregateFilter = {
  readonly amount: InputMaybe<BigFloatFilter>;
};

export type AirdropUserStddevSampleAggregates = {
  readonly __typename: 'AirdropUserStddevSampleAggregates';
  /** Sample standard deviation of amount across the matching connection */
  readonly amount: Maybe<Scalars['BigFloat']['output']>;
};

export type AirdropUserSumAggregateFilter = {
  readonly amount: InputMaybe<BigFloatFilter>;
};

export type AirdropUserSumAggregates = {
  readonly __typename: 'AirdropUserSumAggregates';
  /** Sum of amount across the matching connection */
  readonly amount: Scalars['BigFloat']['output'];
};

export type AirdropUserVariancePopulationAggregateFilter = {
  readonly amount: InputMaybe<BigFloatFilter>;
};

export type AirdropUserVariancePopulationAggregates = {
  readonly __typename: 'AirdropUserVariancePopulationAggregates';
  /** Population variance of amount across the matching connection */
  readonly amount: Maybe<Scalars['BigFloat']['output']>;
};

export type AirdropUserVarianceSampleAggregateFilter = {
  readonly amount: InputMaybe<BigFloatFilter>;
};

export type AirdropUserVarianceSampleAggregates = {
  readonly __typename: 'AirdropUserVarianceSampleAggregates';
  /** Sample variance of amount across the matching connection */
  readonly amount: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `AirdropUser` values. */
export type AirdropUsersConnection = {
  readonly __typename: 'AirdropUsersConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<AirdropUserAggregates>;
  /** A list of edges which contains the `AirdropUser` and cursor to aid in pagination. */
  readonly edges: ReadonlyArray<AirdropUsersEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<AirdropUserAggregates>>;
  /** A list of `AirdropUser` objects. */
  readonly nodes: ReadonlyArray<Maybe<AirdropUser>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `AirdropUser` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `AirdropUser` values. */
export type AirdropUsersConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<AirdropUsersGroupBy>;
  having: InputMaybe<AirdropUsersHavingInput>;
};

/** A `AirdropUser` edge in the connection. */
export type AirdropUsersEdge = {
  readonly __typename: 'AirdropUsersEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `AirdropUser` at the end of the edge. */
  readonly node: Maybe<AirdropUser>;
};

/** Grouping methods for `AirdropUser` for usage during aggregation. */
export enum AirdropUsersGroupBy {
  AIRDROP_ID = 'AIRDROP_ID',
  AMOUNT = 'AMOUNT',
  CREATE_AT = 'CREATE_AT',
  ID = 'ID',
  STATUS = 'STATUS',
  UPDATE_AT = 'UPDATE_AT',
  USER = 'USER',
}

export type AirdropUsersHavingAverageInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
};

export type AirdropUsersHavingDistinctCountInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
};

/** Conditions for `AirdropUser` aggregates. */
export type AirdropUsersHavingInput = {
  readonly AND: InputMaybe<ReadonlyArray<AirdropUsersHavingInput>>;
  readonly OR: InputMaybe<ReadonlyArray<AirdropUsersHavingInput>>;
  readonly average: InputMaybe<AirdropUsersHavingAverageInput>;
  readonly distinctCount: InputMaybe<AirdropUsersHavingDistinctCountInput>;
  readonly max: InputMaybe<AirdropUsersHavingMaxInput>;
  readonly min: InputMaybe<AirdropUsersHavingMinInput>;
  readonly stddevPopulation: InputMaybe<AirdropUsersHavingStddevPopulationInput>;
  readonly stddevSample: InputMaybe<AirdropUsersHavingStddevSampleInput>;
  readonly sum: InputMaybe<AirdropUsersHavingSumInput>;
  readonly variancePopulation: InputMaybe<AirdropUsersHavingVariancePopulationInput>;
  readonly varianceSample: InputMaybe<AirdropUsersHavingVarianceSampleInput>;
};

export type AirdropUsersHavingMaxInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
};

export type AirdropUsersHavingMinInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
};

export type AirdropUsersHavingStddevPopulationInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
};

export type AirdropUsersHavingStddevSampleInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
};

export type AirdropUsersHavingSumInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
};

export type AirdropUsersHavingVariancePopulationInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
};

export type AirdropUsersHavingVarianceSampleInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
};

/** Methods to use when ordering `AirdropUser`. */
export enum AirdropUsersOrderBy {
  AIRDROP_BY_AIRDROP_ID__CREATE_AT_ASC = 'AIRDROP_BY_AIRDROP_ID__CREATE_AT_ASC',
  AIRDROP_BY_AIRDROP_ID__CREATE_AT_DESC = 'AIRDROP_BY_AIRDROP_ID__CREATE_AT_DESC',
  AIRDROP_BY_AIRDROP_ID__END_TIME_ASC = 'AIRDROP_BY_AIRDROP_ID__END_TIME_ASC',
  AIRDROP_BY_AIRDROP_ID__END_TIME_DESC = 'AIRDROP_BY_AIRDROP_ID__END_TIME_DESC',
  AIRDROP_BY_AIRDROP_ID__HAS_WITHDRAWN_ASC = 'AIRDROP_BY_AIRDROP_ID__HAS_WITHDRAWN_ASC',
  AIRDROP_BY_AIRDROP_ID__HAS_WITHDRAWN_DESC = 'AIRDROP_BY_AIRDROP_ID__HAS_WITHDRAWN_DESC',
  AIRDROP_BY_AIRDROP_ID__ID_ASC = 'AIRDROP_BY_AIRDROP_ID__ID_ASC',
  AIRDROP_BY_AIRDROP_ID__ID_DESC = 'AIRDROP_BY_AIRDROP_ID__ID_DESC',
  AIRDROP_BY_AIRDROP_ID__START_TIME_ASC = 'AIRDROP_BY_AIRDROP_ID__START_TIME_ASC',
  AIRDROP_BY_AIRDROP_ID__START_TIME_DESC = 'AIRDROP_BY_AIRDROP_ID__START_TIME_DESC',
  AIRDROP_BY_AIRDROP_ID__TOKEN_ADDRESS_ASC = 'AIRDROP_BY_AIRDROP_ID__TOKEN_ADDRESS_ASC',
  AIRDROP_BY_AIRDROP_ID__TOKEN_ADDRESS_DESC = 'AIRDROP_BY_AIRDROP_ID__TOKEN_ADDRESS_DESC',
  AIRDROP_BY_AIRDROP_ID__UPDATE_AT_ASC = 'AIRDROP_BY_AIRDROP_ID__UPDATE_AT_ASC',
  AIRDROP_BY_AIRDROP_ID__UPDATE_AT_DESC = 'AIRDROP_BY_AIRDROP_ID__UPDATE_AT_DESC',
  AIRDROP_BY_AIRDROP_ID__WITHDRAW_AMOUNT_ASC = 'AIRDROP_BY_AIRDROP_ID__WITHDRAW_AMOUNT_ASC',
  AIRDROP_BY_AIRDROP_ID__WITHDRAW_AMOUNT_DESC = 'AIRDROP_BY_AIRDROP_ID__WITHDRAW_AMOUNT_DESC',
  AIRDROP_ID_ASC = 'AIRDROP_ID_ASC',
  AIRDROP_ID_DESC = 'AIRDROP_ID_DESC',
  AMOUNT_ASC = 'AMOUNT_ASC',
  AMOUNT_DESC = 'AMOUNT_DESC',
  CREATE_AT_ASC = 'CREATE_AT_ASC',
  CREATE_AT_DESC = 'CREATE_AT_DESC',
  ID_ASC = 'ID_ASC',
  ID_DESC = 'ID_DESC',
  NATURAL = 'NATURAL',
  PRIMARY_KEY_ASC = 'PRIMARY_KEY_ASC',
  PRIMARY_KEY_DESC = 'PRIMARY_KEY_DESC',
  STATUS_ASC = 'STATUS_ASC',
  STATUS_DESC = 'STATUS_DESC',
  UPDATE_AT_ASC = 'UPDATE_AT_ASC',
  UPDATE_AT_DESC = 'UPDATE_AT_DESC',
  USER_ASC = 'USER_ASC',
  USER_DESC = 'USER_DESC',
}

export type AirdropVariancePopulationAggregates = {
  readonly __typename: 'AirdropVariancePopulationAggregates';
  /** Population variance of withdrawAmount across the matching connection */
  readonly withdrawAmount: Maybe<Scalars['BigFloat']['output']>;
};

export type AirdropVarianceSampleAggregates = {
  readonly __typename: 'AirdropVarianceSampleAggregates';
  /** Sample variance of withdrawAmount across the matching connection */
  readonly withdrawAmount: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `Airdrop` values. */
export type AirdropsConnection = {
  readonly __typename: 'AirdropsConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<AirdropAggregates>;
  /** A list of edges which contains the `Airdrop` and cursor to aid in pagination. */
  readonly edges: ReadonlyArray<AirdropsEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<AirdropAggregates>>;
  /** A list of `Airdrop` objects. */
  readonly nodes: ReadonlyArray<Maybe<Airdrop>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Airdrop` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Airdrop` values. */
export type AirdropsConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<AirdropsGroupBy>;
  having: InputMaybe<AirdropsHavingInput>;
};

/** A `Airdrop` edge in the connection. */
export type AirdropsEdge = {
  readonly __typename: 'AirdropsEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `Airdrop` at the end of the edge. */
  readonly node: Maybe<Airdrop>;
};

/** Grouping methods for `Airdrop` for usage during aggregation. */
export enum AirdropsGroupBy {
  CREATE_AT = 'CREATE_AT',
  END_TIME = 'END_TIME',
  END_TIME_TRUNCATED_TO_DAY = 'END_TIME_TRUNCATED_TO_DAY',
  END_TIME_TRUNCATED_TO_HOUR = 'END_TIME_TRUNCATED_TO_HOUR',
  HAS_WITHDRAWN = 'HAS_WITHDRAWN',
  ID = 'ID',
  START_TIME = 'START_TIME',
  START_TIME_TRUNCATED_TO_DAY = 'START_TIME_TRUNCATED_TO_DAY',
  START_TIME_TRUNCATED_TO_HOUR = 'START_TIME_TRUNCATED_TO_HOUR',
  TOKEN_ADDRESS = 'TOKEN_ADDRESS',
  UPDATE_AT = 'UPDATE_AT',
  WITHDRAW_AMOUNT = 'WITHDRAW_AMOUNT',
}

export type AirdropsHavingAverageInput = {
  readonly endTime: InputMaybe<HavingDatetimeFilter>;
  readonly startTime: InputMaybe<HavingDatetimeFilter>;
  readonly withdrawAmount: InputMaybe<HavingBigfloatFilter>;
};

export type AirdropsHavingDistinctCountInput = {
  readonly endTime: InputMaybe<HavingDatetimeFilter>;
  readonly startTime: InputMaybe<HavingDatetimeFilter>;
  readonly withdrawAmount: InputMaybe<HavingBigfloatFilter>;
};

/** Conditions for `Airdrop` aggregates. */
export type AirdropsHavingInput = {
  readonly AND: InputMaybe<ReadonlyArray<AirdropsHavingInput>>;
  readonly OR: InputMaybe<ReadonlyArray<AirdropsHavingInput>>;
  readonly average: InputMaybe<AirdropsHavingAverageInput>;
  readonly distinctCount: InputMaybe<AirdropsHavingDistinctCountInput>;
  readonly max: InputMaybe<AirdropsHavingMaxInput>;
  readonly min: InputMaybe<AirdropsHavingMinInput>;
  readonly stddevPopulation: InputMaybe<AirdropsHavingStddevPopulationInput>;
  readonly stddevSample: InputMaybe<AirdropsHavingStddevSampleInput>;
  readonly sum: InputMaybe<AirdropsHavingSumInput>;
  readonly variancePopulation: InputMaybe<AirdropsHavingVariancePopulationInput>;
  readonly varianceSample: InputMaybe<AirdropsHavingVarianceSampleInput>;
};

export type AirdropsHavingMaxInput = {
  readonly endTime: InputMaybe<HavingDatetimeFilter>;
  readonly startTime: InputMaybe<HavingDatetimeFilter>;
  readonly withdrawAmount: InputMaybe<HavingBigfloatFilter>;
};

export type AirdropsHavingMinInput = {
  readonly endTime: InputMaybe<HavingDatetimeFilter>;
  readonly startTime: InputMaybe<HavingDatetimeFilter>;
  readonly withdrawAmount: InputMaybe<HavingBigfloatFilter>;
};

export type AirdropsHavingStddevPopulationInput = {
  readonly endTime: InputMaybe<HavingDatetimeFilter>;
  readonly startTime: InputMaybe<HavingDatetimeFilter>;
  readonly withdrawAmount: InputMaybe<HavingBigfloatFilter>;
};

export type AirdropsHavingStddevSampleInput = {
  readonly endTime: InputMaybe<HavingDatetimeFilter>;
  readonly startTime: InputMaybe<HavingDatetimeFilter>;
  readonly withdrawAmount: InputMaybe<HavingBigfloatFilter>;
};

export type AirdropsHavingSumInput = {
  readonly endTime: InputMaybe<HavingDatetimeFilter>;
  readonly startTime: InputMaybe<HavingDatetimeFilter>;
  readonly withdrawAmount: InputMaybe<HavingBigfloatFilter>;
};

export type AirdropsHavingVariancePopulationInput = {
  readonly endTime: InputMaybe<HavingDatetimeFilter>;
  readonly startTime: InputMaybe<HavingDatetimeFilter>;
  readonly withdrawAmount: InputMaybe<HavingBigfloatFilter>;
};

export type AirdropsHavingVarianceSampleInput = {
  readonly endTime: InputMaybe<HavingDatetimeFilter>;
  readonly startTime: InputMaybe<HavingDatetimeFilter>;
  readonly withdrawAmount: InputMaybe<HavingBigfloatFilter>;
};

/** Methods to use when ordering `Airdrop`. */
export enum AirdropsOrderBy {
  AIRDROP_USERS_AVERAGE_AIRDROP_ID_ASC = 'AIRDROP_USERS_AVERAGE_AIRDROP_ID_ASC',
  AIRDROP_USERS_AVERAGE_AIRDROP_ID_DESC = 'AIRDROP_USERS_AVERAGE_AIRDROP_ID_DESC',
  AIRDROP_USERS_AVERAGE_AMOUNT_ASC = 'AIRDROP_USERS_AVERAGE_AMOUNT_ASC',
  AIRDROP_USERS_AVERAGE_AMOUNT_DESC = 'AIRDROP_USERS_AVERAGE_AMOUNT_DESC',
  AIRDROP_USERS_AVERAGE_BLOCK_RANGE_ASC = 'AIRDROP_USERS_AVERAGE_BLOCK_RANGE_ASC',
  AIRDROP_USERS_AVERAGE_BLOCK_RANGE_DESC = 'AIRDROP_USERS_AVERAGE_BLOCK_RANGE_DESC',
  AIRDROP_USERS_AVERAGE_CREATE_AT_ASC = 'AIRDROP_USERS_AVERAGE_CREATE_AT_ASC',
  AIRDROP_USERS_AVERAGE_CREATE_AT_DESC = 'AIRDROP_USERS_AVERAGE_CREATE_AT_DESC',
  AIRDROP_USERS_AVERAGE_ID_ASC = 'AIRDROP_USERS_AVERAGE_ID_ASC',
  AIRDROP_USERS_AVERAGE_ID_DESC = 'AIRDROP_USERS_AVERAGE_ID_DESC',
  AIRDROP_USERS_AVERAGE_STATUS_ASC = 'AIRDROP_USERS_AVERAGE_STATUS_ASC',
  AIRDROP_USERS_AVERAGE_STATUS_DESC = 'AIRDROP_USERS_AVERAGE_STATUS_DESC',
  AIRDROP_USERS_AVERAGE_UPDATE_AT_ASC = 'AIRDROP_USERS_AVERAGE_UPDATE_AT_ASC',
  AIRDROP_USERS_AVERAGE_UPDATE_AT_DESC = 'AIRDROP_USERS_AVERAGE_UPDATE_AT_DESC',
  AIRDROP_USERS_AVERAGE_USER_ASC = 'AIRDROP_USERS_AVERAGE_USER_ASC',
  AIRDROP_USERS_AVERAGE_USER_DESC = 'AIRDROP_USERS_AVERAGE_USER_DESC',
  AIRDROP_USERS_BY_AIRDROP_ID__COUNT_ASC = 'AIRDROP_USERS_BY_AIRDROP_ID__COUNT_ASC',
  AIRDROP_USERS_BY_AIRDROP_ID__COUNT_DESC = 'AIRDROP_USERS_BY_AIRDROP_ID__COUNT_DESC',
  AIRDROP_USERS_COUNT_ASC = 'AIRDROP_USERS_COUNT_ASC',
  AIRDROP_USERS_COUNT_DESC = 'AIRDROP_USERS_COUNT_DESC',
  AIRDROP_USERS_DISTINCT_COUNT_AIRDROP_ID_ASC = 'AIRDROP_USERS_DISTINCT_COUNT_AIRDROP_ID_ASC',
  AIRDROP_USERS_DISTINCT_COUNT_AIRDROP_ID_DESC = 'AIRDROP_USERS_DISTINCT_COUNT_AIRDROP_ID_DESC',
  AIRDROP_USERS_DISTINCT_COUNT_AMOUNT_ASC = 'AIRDROP_USERS_DISTINCT_COUNT_AMOUNT_ASC',
  AIRDROP_USERS_DISTINCT_COUNT_AMOUNT_DESC = 'AIRDROP_USERS_DISTINCT_COUNT_AMOUNT_DESC',
  AIRDROP_USERS_DISTINCT_COUNT_BLOCK_RANGE_ASC = 'AIRDROP_USERS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  AIRDROP_USERS_DISTINCT_COUNT_BLOCK_RANGE_DESC = 'AIRDROP_USERS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  AIRDROP_USERS_DISTINCT_COUNT_CREATE_AT_ASC = 'AIRDROP_USERS_DISTINCT_COUNT_CREATE_AT_ASC',
  AIRDROP_USERS_DISTINCT_COUNT_CREATE_AT_DESC = 'AIRDROP_USERS_DISTINCT_COUNT_CREATE_AT_DESC',
  AIRDROP_USERS_DISTINCT_COUNT_ID_ASC = 'AIRDROP_USERS_DISTINCT_COUNT_ID_ASC',
  AIRDROP_USERS_DISTINCT_COUNT_ID_DESC = 'AIRDROP_USERS_DISTINCT_COUNT_ID_DESC',
  AIRDROP_USERS_DISTINCT_COUNT_STATUS_ASC = 'AIRDROP_USERS_DISTINCT_COUNT_STATUS_ASC',
  AIRDROP_USERS_DISTINCT_COUNT_STATUS_DESC = 'AIRDROP_USERS_DISTINCT_COUNT_STATUS_DESC',
  AIRDROP_USERS_DISTINCT_COUNT_UPDATE_AT_ASC = 'AIRDROP_USERS_DISTINCT_COUNT_UPDATE_AT_ASC',
  AIRDROP_USERS_DISTINCT_COUNT_UPDATE_AT_DESC = 'AIRDROP_USERS_DISTINCT_COUNT_UPDATE_AT_DESC',
  AIRDROP_USERS_DISTINCT_COUNT_USER_ASC = 'AIRDROP_USERS_DISTINCT_COUNT_USER_ASC',
  AIRDROP_USERS_DISTINCT_COUNT_USER_DESC = 'AIRDROP_USERS_DISTINCT_COUNT_USER_DESC',
  AIRDROP_USERS_MAX_AIRDROP_ID_ASC = 'AIRDROP_USERS_MAX_AIRDROP_ID_ASC',
  AIRDROP_USERS_MAX_AIRDROP_ID_DESC = 'AIRDROP_USERS_MAX_AIRDROP_ID_DESC',
  AIRDROP_USERS_MAX_AMOUNT_ASC = 'AIRDROP_USERS_MAX_AMOUNT_ASC',
  AIRDROP_USERS_MAX_AMOUNT_DESC = 'AIRDROP_USERS_MAX_AMOUNT_DESC',
  AIRDROP_USERS_MAX_BLOCK_RANGE_ASC = 'AIRDROP_USERS_MAX_BLOCK_RANGE_ASC',
  AIRDROP_USERS_MAX_BLOCK_RANGE_DESC = 'AIRDROP_USERS_MAX_BLOCK_RANGE_DESC',
  AIRDROP_USERS_MAX_CREATE_AT_ASC = 'AIRDROP_USERS_MAX_CREATE_AT_ASC',
  AIRDROP_USERS_MAX_CREATE_AT_DESC = 'AIRDROP_USERS_MAX_CREATE_AT_DESC',
  AIRDROP_USERS_MAX_ID_ASC = 'AIRDROP_USERS_MAX_ID_ASC',
  AIRDROP_USERS_MAX_ID_DESC = 'AIRDROP_USERS_MAX_ID_DESC',
  AIRDROP_USERS_MAX_STATUS_ASC = 'AIRDROP_USERS_MAX_STATUS_ASC',
  AIRDROP_USERS_MAX_STATUS_DESC = 'AIRDROP_USERS_MAX_STATUS_DESC',
  AIRDROP_USERS_MAX_UPDATE_AT_ASC = 'AIRDROP_USERS_MAX_UPDATE_AT_ASC',
  AIRDROP_USERS_MAX_UPDATE_AT_DESC = 'AIRDROP_USERS_MAX_UPDATE_AT_DESC',
  AIRDROP_USERS_MAX_USER_ASC = 'AIRDROP_USERS_MAX_USER_ASC',
  AIRDROP_USERS_MAX_USER_DESC = 'AIRDROP_USERS_MAX_USER_DESC',
  AIRDROP_USERS_MIN_AIRDROP_ID_ASC = 'AIRDROP_USERS_MIN_AIRDROP_ID_ASC',
  AIRDROP_USERS_MIN_AIRDROP_ID_DESC = 'AIRDROP_USERS_MIN_AIRDROP_ID_DESC',
  AIRDROP_USERS_MIN_AMOUNT_ASC = 'AIRDROP_USERS_MIN_AMOUNT_ASC',
  AIRDROP_USERS_MIN_AMOUNT_DESC = 'AIRDROP_USERS_MIN_AMOUNT_DESC',
  AIRDROP_USERS_MIN_BLOCK_RANGE_ASC = 'AIRDROP_USERS_MIN_BLOCK_RANGE_ASC',
  AIRDROP_USERS_MIN_BLOCK_RANGE_DESC = 'AIRDROP_USERS_MIN_BLOCK_RANGE_DESC',
  AIRDROP_USERS_MIN_CREATE_AT_ASC = 'AIRDROP_USERS_MIN_CREATE_AT_ASC',
  AIRDROP_USERS_MIN_CREATE_AT_DESC = 'AIRDROP_USERS_MIN_CREATE_AT_DESC',
  AIRDROP_USERS_MIN_ID_ASC = 'AIRDROP_USERS_MIN_ID_ASC',
  AIRDROP_USERS_MIN_ID_DESC = 'AIRDROP_USERS_MIN_ID_DESC',
  AIRDROP_USERS_MIN_STATUS_ASC = 'AIRDROP_USERS_MIN_STATUS_ASC',
  AIRDROP_USERS_MIN_STATUS_DESC = 'AIRDROP_USERS_MIN_STATUS_DESC',
  AIRDROP_USERS_MIN_UPDATE_AT_ASC = 'AIRDROP_USERS_MIN_UPDATE_AT_ASC',
  AIRDROP_USERS_MIN_UPDATE_AT_DESC = 'AIRDROP_USERS_MIN_UPDATE_AT_DESC',
  AIRDROP_USERS_MIN_USER_ASC = 'AIRDROP_USERS_MIN_USER_ASC',
  AIRDROP_USERS_MIN_USER_DESC = 'AIRDROP_USERS_MIN_USER_DESC',
  AIRDROP_USERS_STDDEV_POPULATION_AIRDROP_ID_ASC = 'AIRDROP_USERS_STDDEV_POPULATION_AIRDROP_ID_ASC',
  AIRDROP_USERS_STDDEV_POPULATION_AIRDROP_ID_DESC = 'AIRDROP_USERS_STDDEV_POPULATION_AIRDROP_ID_DESC',
  AIRDROP_USERS_STDDEV_POPULATION_AMOUNT_ASC = 'AIRDROP_USERS_STDDEV_POPULATION_AMOUNT_ASC',
  AIRDROP_USERS_STDDEV_POPULATION_AMOUNT_DESC = 'AIRDROP_USERS_STDDEV_POPULATION_AMOUNT_DESC',
  AIRDROP_USERS_STDDEV_POPULATION_BLOCK_RANGE_ASC = 'AIRDROP_USERS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  AIRDROP_USERS_STDDEV_POPULATION_BLOCK_RANGE_DESC = 'AIRDROP_USERS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  AIRDROP_USERS_STDDEV_POPULATION_CREATE_AT_ASC = 'AIRDROP_USERS_STDDEV_POPULATION_CREATE_AT_ASC',
  AIRDROP_USERS_STDDEV_POPULATION_CREATE_AT_DESC = 'AIRDROP_USERS_STDDEV_POPULATION_CREATE_AT_DESC',
  AIRDROP_USERS_STDDEV_POPULATION_ID_ASC = 'AIRDROP_USERS_STDDEV_POPULATION_ID_ASC',
  AIRDROP_USERS_STDDEV_POPULATION_ID_DESC = 'AIRDROP_USERS_STDDEV_POPULATION_ID_DESC',
  AIRDROP_USERS_STDDEV_POPULATION_STATUS_ASC = 'AIRDROP_USERS_STDDEV_POPULATION_STATUS_ASC',
  AIRDROP_USERS_STDDEV_POPULATION_STATUS_DESC = 'AIRDROP_USERS_STDDEV_POPULATION_STATUS_DESC',
  AIRDROP_USERS_STDDEV_POPULATION_UPDATE_AT_ASC = 'AIRDROP_USERS_STDDEV_POPULATION_UPDATE_AT_ASC',
  AIRDROP_USERS_STDDEV_POPULATION_UPDATE_AT_DESC = 'AIRDROP_USERS_STDDEV_POPULATION_UPDATE_AT_DESC',
  AIRDROP_USERS_STDDEV_POPULATION_USER_ASC = 'AIRDROP_USERS_STDDEV_POPULATION_USER_ASC',
  AIRDROP_USERS_STDDEV_POPULATION_USER_DESC = 'AIRDROP_USERS_STDDEV_POPULATION_USER_DESC',
  AIRDROP_USERS_STDDEV_SAMPLE_AIRDROP_ID_ASC = 'AIRDROP_USERS_STDDEV_SAMPLE_AIRDROP_ID_ASC',
  AIRDROP_USERS_STDDEV_SAMPLE_AIRDROP_ID_DESC = 'AIRDROP_USERS_STDDEV_SAMPLE_AIRDROP_ID_DESC',
  AIRDROP_USERS_STDDEV_SAMPLE_AMOUNT_ASC = 'AIRDROP_USERS_STDDEV_SAMPLE_AMOUNT_ASC',
  AIRDROP_USERS_STDDEV_SAMPLE_AMOUNT_DESC = 'AIRDROP_USERS_STDDEV_SAMPLE_AMOUNT_DESC',
  AIRDROP_USERS_STDDEV_SAMPLE_BLOCK_RANGE_ASC = 'AIRDROP_USERS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  AIRDROP_USERS_STDDEV_SAMPLE_BLOCK_RANGE_DESC = 'AIRDROP_USERS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  AIRDROP_USERS_STDDEV_SAMPLE_CREATE_AT_ASC = 'AIRDROP_USERS_STDDEV_SAMPLE_CREATE_AT_ASC',
  AIRDROP_USERS_STDDEV_SAMPLE_CREATE_AT_DESC = 'AIRDROP_USERS_STDDEV_SAMPLE_CREATE_AT_DESC',
  AIRDROP_USERS_STDDEV_SAMPLE_ID_ASC = 'AIRDROP_USERS_STDDEV_SAMPLE_ID_ASC',
  AIRDROP_USERS_STDDEV_SAMPLE_ID_DESC = 'AIRDROP_USERS_STDDEV_SAMPLE_ID_DESC',
  AIRDROP_USERS_STDDEV_SAMPLE_STATUS_ASC = 'AIRDROP_USERS_STDDEV_SAMPLE_STATUS_ASC',
  AIRDROP_USERS_STDDEV_SAMPLE_STATUS_DESC = 'AIRDROP_USERS_STDDEV_SAMPLE_STATUS_DESC',
  AIRDROP_USERS_STDDEV_SAMPLE_UPDATE_AT_ASC = 'AIRDROP_USERS_STDDEV_SAMPLE_UPDATE_AT_ASC',
  AIRDROP_USERS_STDDEV_SAMPLE_UPDATE_AT_DESC = 'AIRDROP_USERS_STDDEV_SAMPLE_UPDATE_AT_DESC',
  AIRDROP_USERS_STDDEV_SAMPLE_USER_ASC = 'AIRDROP_USERS_STDDEV_SAMPLE_USER_ASC',
  AIRDROP_USERS_STDDEV_SAMPLE_USER_DESC = 'AIRDROP_USERS_STDDEV_SAMPLE_USER_DESC',
  AIRDROP_USERS_SUM_AIRDROP_ID_ASC = 'AIRDROP_USERS_SUM_AIRDROP_ID_ASC',
  AIRDROP_USERS_SUM_AIRDROP_ID_DESC = 'AIRDROP_USERS_SUM_AIRDROP_ID_DESC',
  AIRDROP_USERS_SUM_AMOUNT_ASC = 'AIRDROP_USERS_SUM_AMOUNT_ASC',
  AIRDROP_USERS_SUM_AMOUNT_DESC = 'AIRDROP_USERS_SUM_AMOUNT_DESC',
  AIRDROP_USERS_SUM_BLOCK_RANGE_ASC = 'AIRDROP_USERS_SUM_BLOCK_RANGE_ASC',
  AIRDROP_USERS_SUM_BLOCK_RANGE_DESC = 'AIRDROP_USERS_SUM_BLOCK_RANGE_DESC',
  AIRDROP_USERS_SUM_CREATE_AT_ASC = 'AIRDROP_USERS_SUM_CREATE_AT_ASC',
  AIRDROP_USERS_SUM_CREATE_AT_DESC = 'AIRDROP_USERS_SUM_CREATE_AT_DESC',
  AIRDROP_USERS_SUM_ID_ASC = 'AIRDROP_USERS_SUM_ID_ASC',
  AIRDROP_USERS_SUM_ID_DESC = 'AIRDROP_USERS_SUM_ID_DESC',
  AIRDROP_USERS_SUM_STATUS_ASC = 'AIRDROP_USERS_SUM_STATUS_ASC',
  AIRDROP_USERS_SUM_STATUS_DESC = 'AIRDROP_USERS_SUM_STATUS_DESC',
  AIRDROP_USERS_SUM_UPDATE_AT_ASC = 'AIRDROP_USERS_SUM_UPDATE_AT_ASC',
  AIRDROP_USERS_SUM_UPDATE_AT_DESC = 'AIRDROP_USERS_SUM_UPDATE_AT_DESC',
  AIRDROP_USERS_SUM_USER_ASC = 'AIRDROP_USERS_SUM_USER_ASC',
  AIRDROP_USERS_SUM_USER_DESC = 'AIRDROP_USERS_SUM_USER_DESC',
  AIRDROP_USERS_VARIANCE_POPULATION_AIRDROP_ID_ASC = 'AIRDROP_USERS_VARIANCE_POPULATION_AIRDROP_ID_ASC',
  AIRDROP_USERS_VARIANCE_POPULATION_AIRDROP_ID_DESC = 'AIRDROP_USERS_VARIANCE_POPULATION_AIRDROP_ID_DESC',
  AIRDROP_USERS_VARIANCE_POPULATION_AMOUNT_ASC = 'AIRDROP_USERS_VARIANCE_POPULATION_AMOUNT_ASC',
  AIRDROP_USERS_VARIANCE_POPULATION_AMOUNT_DESC = 'AIRDROP_USERS_VARIANCE_POPULATION_AMOUNT_DESC',
  AIRDROP_USERS_VARIANCE_POPULATION_BLOCK_RANGE_ASC = 'AIRDROP_USERS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  AIRDROP_USERS_VARIANCE_POPULATION_BLOCK_RANGE_DESC = 'AIRDROP_USERS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  AIRDROP_USERS_VARIANCE_POPULATION_CREATE_AT_ASC = 'AIRDROP_USERS_VARIANCE_POPULATION_CREATE_AT_ASC',
  AIRDROP_USERS_VARIANCE_POPULATION_CREATE_AT_DESC = 'AIRDROP_USERS_VARIANCE_POPULATION_CREATE_AT_DESC',
  AIRDROP_USERS_VARIANCE_POPULATION_ID_ASC = 'AIRDROP_USERS_VARIANCE_POPULATION_ID_ASC',
  AIRDROP_USERS_VARIANCE_POPULATION_ID_DESC = 'AIRDROP_USERS_VARIANCE_POPULATION_ID_DESC',
  AIRDROP_USERS_VARIANCE_POPULATION_STATUS_ASC = 'AIRDROP_USERS_VARIANCE_POPULATION_STATUS_ASC',
  AIRDROP_USERS_VARIANCE_POPULATION_STATUS_DESC = 'AIRDROP_USERS_VARIANCE_POPULATION_STATUS_DESC',
  AIRDROP_USERS_VARIANCE_POPULATION_UPDATE_AT_ASC = 'AIRDROP_USERS_VARIANCE_POPULATION_UPDATE_AT_ASC',
  AIRDROP_USERS_VARIANCE_POPULATION_UPDATE_AT_DESC = 'AIRDROP_USERS_VARIANCE_POPULATION_UPDATE_AT_DESC',
  AIRDROP_USERS_VARIANCE_POPULATION_USER_ASC = 'AIRDROP_USERS_VARIANCE_POPULATION_USER_ASC',
  AIRDROP_USERS_VARIANCE_POPULATION_USER_DESC = 'AIRDROP_USERS_VARIANCE_POPULATION_USER_DESC',
  AIRDROP_USERS_VARIANCE_SAMPLE_AIRDROP_ID_ASC = 'AIRDROP_USERS_VARIANCE_SAMPLE_AIRDROP_ID_ASC',
  AIRDROP_USERS_VARIANCE_SAMPLE_AIRDROP_ID_DESC = 'AIRDROP_USERS_VARIANCE_SAMPLE_AIRDROP_ID_DESC',
  AIRDROP_USERS_VARIANCE_SAMPLE_AMOUNT_ASC = 'AIRDROP_USERS_VARIANCE_SAMPLE_AMOUNT_ASC',
  AIRDROP_USERS_VARIANCE_SAMPLE_AMOUNT_DESC = 'AIRDROP_USERS_VARIANCE_SAMPLE_AMOUNT_DESC',
  AIRDROP_USERS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC = 'AIRDROP_USERS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  AIRDROP_USERS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC = 'AIRDROP_USERS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  AIRDROP_USERS_VARIANCE_SAMPLE_CREATE_AT_ASC = 'AIRDROP_USERS_VARIANCE_SAMPLE_CREATE_AT_ASC',
  AIRDROP_USERS_VARIANCE_SAMPLE_CREATE_AT_DESC = 'AIRDROP_USERS_VARIANCE_SAMPLE_CREATE_AT_DESC',
  AIRDROP_USERS_VARIANCE_SAMPLE_ID_ASC = 'AIRDROP_USERS_VARIANCE_SAMPLE_ID_ASC',
  AIRDROP_USERS_VARIANCE_SAMPLE_ID_DESC = 'AIRDROP_USERS_VARIANCE_SAMPLE_ID_DESC',
  AIRDROP_USERS_VARIANCE_SAMPLE_STATUS_ASC = 'AIRDROP_USERS_VARIANCE_SAMPLE_STATUS_ASC',
  AIRDROP_USERS_VARIANCE_SAMPLE_STATUS_DESC = 'AIRDROP_USERS_VARIANCE_SAMPLE_STATUS_DESC',
  AIRDROP_USERS_VARIANCE_SAMPLE_UPDATE_AT_ASC = 'AIRDROP_USERS_VARIANCE_SAMPLE_UPDATE_AT_ASC',
  AIRDROP_USERS_VARIANCE_SAMPLE_UPDATE_AT_DESC = 'AIRDROP_USERS_VARIANCE_SAMPLE_UPDATE_AT_DESC',
  AIRDROP_USERS_VARIANCE_SAMPLE_USER_ASC = 'AIRDROP_USERS_VARIANCE_SAMPLE_USER_ASC',
  AIRDROP_USERS_VARIANCE_SAMPLE_USER_DESC = 'AIRDROP_USERS_VARIANCE_SAMPLE_USER_DESC',
  CREATE_AT_ASC = 'CREATE_AT_ASC',
  CREATE_AT_DESC = 'CREATE_AT_DESC',
  END_TIME_ASC = 'END_TIME_ASC',
  END_TIME_DESC = 'END_TIME_DESC',
  HAS_WITHDRAWN_ASC = 'HAS_WITHDRAWN_ASC',
  HAS_WITHDRAWN_DESC = 'HAS_WITHDRAWN_DESC',
  ID_ASC = 'ID_ASC',
  ID_DESC = 'ID_DESC',
  NATURAL = 'NATURAL',
  PRIMARY_KEY_ASC = 'PRIMARY_KEY_ASC',
  PRIMARY_KEY_DESC = 'PRIMARY_KEY_DESC',
  START_TIME_ASC = 'START_TIME_ASC',
  START_TIME_DESC = 'START_TIME_DESC',
  TOKEN_ADDRESS_ASC = 'TOKEN_ADDRESS_ASC',
  TOKEN_ADDRESS_DESC = 'TOKEN_ADDRESS_DESC',
  UPDATE_AT_ASC = 'UPDATE_AT_ASC',
  UPDATE_AT_DESC = 'UPDATE_AT_DESC',
  WITHDRAW_AMOUNT_ASC = 'WITHDRAW_AMOUNT_ASC',
  WITHDRAW_AMOUNT_DESC = 'WITHDRAW_AMOUNT_DESC',
}

/** A filter to be used against BigFloat fields. All fields are combined with a logical ‘and.’ */
export type BigFloatFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  readonly distinctFrom: InputMaybe<Scalars['BigFloat']['input']>;
  /** Equal to the specified value. */
  readonly equalTo: InputMaybe<Scalars['BigFloat']['input']>;
  /** Greater than the specified value. */
  readonly greaterThan: InputMaybe<Scalars['BigFloat']['input']>;
  /** Greater than or equal to the specified value. */
  readonly greaterThanOrEqualTo: InputMaybe<Scalars['BigFloat']['input']>;
  /** Included in the specified list. */
  readonly in: InputMaybe<ReadonlyArray<Scalars['BigFloat']['input']>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  readonly isNull: InputMaybe<Scalars['Boolean']['input']>;
  /** Less than the specified value. */
  readonly lessThan: InputMaybe<Scalars['BigFloat']['input']>;
  /** Less than or equal to the specified value. */
  readonly lessThanOrEqualTo: InputMaybe<Scalars['BigFloat']['input']>;
  /** Equal to the specified value, treating null like an ordinary value. */
  readonly notDistinctFrom: InputMaybe<Scalars['BigFloat']['input']>;
  /** Not equal to the specified value. */
  readonly notEqualTo: InputMaybe<Scalars['BigFloat']['input']>;
  /** Not included in the specified list. */
  readonly notIn: InputMaybe<ReadonlyArray<Scalars['BigFloat']['input']>>;
};

/** A filter to be used against BigInt fields. All fields are combined with a logical ‘and.’ */
export type BigIntFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  readonly distinctFrom: InputMaybe<Scalars['BigInt']['input']>;
  /** Equal to the specified value. */
  readonly equalTo: InputMaybe<Scalars['BigInt']['input']>;
  /** Greater than the specified value. */
  readonly greaterThan: InputMaybe<Scalars['BigInt']['input']>;
  /** Greater than or equal to the specified value. */
  readonly greaterThanOrEqualTo: InputMaybe<Scalars['BigInt']['input']>;
  /** Included in the specified list. */
  readonly in: InputMaybe<ReadonlyArray<Scalars['BigInt']['input']>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  readonly isNull: InputMaybe<Scalars['Boolean']['input']>;
  /** Less than the specified value. */
  readonly lessThan: InputMaybe<Scalars['BigInt']['input']>;
  /** Less than or equal to the specified value. */
  readonly lessThanOrEqualTo: InputMaybe<Scalars['BigInt']['input']>;
  /** Equal to the specified value, treating null like an ordinary value. */
  readonly notDistinctFrom: InputMaybe<Scalars['BigInt']['input']>;
  /** Not equal to the specified value. */
  readonly notEqualTo: InputMaybe<Scalars['BigInt']['input']>;
  /** Not included in the specified list. */
  readonly notIn: InputMaybe<ReadonlyArray<Scalars['BigInt']['input']>>;
};

/** A filter to be used against Boolean fields. All fields are combined with a logical ‘and.’ */
export type BooleanFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  readonly distinctFrom: InputMaybe<Scalars['Boolean']['input']>;
  /** Equal to the specified value. */
  readonly equalTo: InputMaybe<Scalars['Boolean']['input']>;
  /** Greater than the specified value. */
  readonly greaterThan: InputMaybe<Scalars['Boolean']['input']>;
  /** Greater than or equal to the specified value. */
  readonly greaterThanOrEqualTo: InputMaybe<Scalars['Boolean']['input']>;
  /** Included in the specified list. */
  readonly in: InputMaybe<ReadonlyArray<Scalars['Boolean']['input']>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  readonly isNull: InputMaybe<Scalars['Boolean']['input']>;
  /** Less than the specified value. */
  readonly lessThan: InputMaybe<Scalars['Boolean']['input']>;
  /** Less than or equal to the specified value. */
  readonly lessThanOrEqualTo: InputMaybe<Scalars['Boolean']['input']>;
  /** Equal to the specified value, treating null like an ordinary value. */
  readonly notDistinctFrom: InputMaybe<Scalars['Boolean']['input']>;
  /** Not equal to the specified value. */
  readonly notEqualTo: InputMaybe<Scalars['Boolean']['input']>;
  /** Not included in the specified list. */
  readonly notIn: InputMaybe<ReadonlyArray<Scalars['Boolean']['input']>>;
};

export type Cach = Node & {
  readonly __typename: 'Cach';
  readonly id: Scalars['String']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  readonly nodeId: Scalars['ID']['output'];
  readonly value: Scalars['String']['output'];
};

export type CachAggregates = {
  readonly __typename: 'CachAggregates';
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly distinctCount: Maybe<CachDistinctCountAggregates>;
  readonly keys: Maybe<ReadonlyArray<Scalars['String']['output']>>;
};

export type CachDistinctCountAggregates = {
  readonly __typename: 'CachDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  readonly _blockRange: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  readonly _id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  readonly id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of value across the matching connection */
  readonly value: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `Cach` object types. All fields are combined with a logical ‘and.’ */
export type CachFilter = {
  /** Checks for all expressions in this list. */
  readonly and: InputMaybe<ReadonlyArray<CachFilter>>;
  /** Filter by the object’s `id` field. */
  readonly id: InputMaybe<StringFilter>;
  /** Negates the expression. */
  readonly not: InputMaybe<CachFilter>;
  /** Checks for any expressions in this list. */
  readonly or: InputMaybe<ReadonlyArray<CachFilter>>;
  /** Filter by the object’s `value` field. */
  readonly value: InputMaybe<StringFilter>;
};

/** A connection to a list of `Cach` values. */
export type CachesConnection = {
  readonly __typename: 'CachesConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<CachAggregates>;
  /** A list of edges which contains the `Cach` and cursor to aid in pagination. */
  readonly edges: ReadonlyArray<CachesEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<CachAggregates>>;
  /** A list of `Cach` objects. */
  readonly nodes: ReadonlyArray<Maybe<Cach>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Cach` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Cach` values. */
export type CachesConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<CachesGroupBy>;
  having: InputMaybe<CachesHavingInput>;
};

/** A `Cach` edge in the connection. */
export type CachesEdge = {
  readonly __typename: 'CachesEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `Cach` at the end of the edge. */
  readonly node: Maybe<Cach>;
};

/** Grouping methods for `Cach` for usage during aggregation. */
export enum CachesGroupBy {
  ID = 'ID',
  VALUE = 'VALUE',
}

/** Conditions for `Cach` aggregates. */
export type CachesHavingInput = {
  readonly AND: InputMaybe<ReadonlyArray<CachesHavingInput>>;
  readonly OR: InputMaybe<ReadonlyArray<CachesHavingInput>>;
};

/** Methods to use when ordering `Cach`. */
export enum CachesOrderBy {
  ID_ASC = 'ID_ASC',
  ID_DESC = 'ID_DESC',
  NATURAL = 'NATURAL',
  PRIMARY_KEY_ASC = 'PRIMARY_KEY_ASC',
  PRIMARY_KEY_DESC = 'PRIMARY_KEY_DESC',
  VALUE_ASC = 'VALUE_ASC',
  VALUE_DESC = 'VALUE_DESC',
}

export enum ChannelStatus {
  FINALIZED = 'FINALIZED',
  OPEN = 'OPEN',
  TERMINATING = 'TERMINATING',
}

/** A filter to be used against ChannelStatus fields. All fields are combined with a logical ‘and.’ */
export type ChannelStatusFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  readonly distinctFrom: InputMaybe<ChannelStatus>;
  /** Equal to the specified value. */
  readonly equalTo: InputMaybe<ChannelStatus>;
  /** Greater than the specified value. */
  readonly greaterThan: InputMaybe<ChannelStatus>;
  /** Greater than or equal to the specified value. */
  readonly greaterThanOrEqualTo: InputMaybe<ChannelStatus>;
  /** Included in the specified list. */
  readonly in: InputMaybe<ReadonlyArray<ChannelStatus>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  readonly isNull: InputMaybe<Scalars['Boolean']['input']>;
  /** Less than the specified value. */
  readonly lessThan: InputMaybe<ChannelStatus>;
  /** Less than or equal to the specified value. */
  readonly lessThanOrEqualTo: InputMaybe<ChannelStatus>;
  /** Equal to the specified value, treating null like an ordinary value. */
  readonly notDistinctFrom: InputMaybe<ChannelStatus>;
  /** Not equal to the specified value. */
  readonly notEqualTo: InputMaybe<ChannelStatus>;
  /** Not included in the specified list. */
  readonly notIn: InputMaybe<ReadonlyArray<ChannelStatus>>;
};

export type ConsumerController = Node & {
  readonly __typename: 'ConsumerController';
  readonly consumer: Scalars['String']['output'];
  readonly controller: Scalars['String']['output'];
  readonly createdBlock: Maybe<Scalars['Int']['output']>;
  readonly id: Scalars['String']['output'];
  readonly lastEvent: Maybe<Scalars['String']['output']>;
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  readonly nodeId: Scalars['ID']['output'];
};

export type ConsumerControllerAggregates = {
  readonly __typename: 'ConsumerControllerAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly average: Maybe<ConsumerControllerAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly distinctCount: Maybe<ConsumerControllerDistinctCountAggregates>;
  readonly keys: Maybe<ReadonlyArray<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly max: Maybe<ConsumerControllerMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly min: Maybe<ConsumerControllerMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevPopulation: Maybe<ConsumerControllerStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevSample: Maybe<ConsumerControllerStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly sum: Maybe<ConsumerControllerSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly variancePopulation: Maybe<ConsumerControllerVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly varianceSample: Maybe<ConsumerControllerVarianceSampleAggregates>;
};

export type ConsumerControllerAverageAggregates = {
  readonly __typename: 'ConsumerControllerAverageAggregates';
  /** Mean average of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
};

export type ConsumerControllerDistinctCountAggregates = {
  readonly __typename: 'ConsumerControllerDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  readonly _blockRange: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  readonly _id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of consumer across the matching connection */
  readonly consumer: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of controller across the matching connection */
  readonly controller: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  readonly id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of lastEvent across the matching connection */
  readonly lastEvent: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `ConsumerController` object types. All fields are combined with a logical ‘and.’ */
export type ConsumerControllerFilter = {
  /** Checks for all expressions in this list. */
  readonly and: InputMaybe<ReadonlyArray<ConsumerControllerFilter>>;
  /** Filter by the object’s `consumer` field. */
  readonly consumer: InputMaybe<StringFilter>;
  /** Filter by the object’s `controller` field. */
  readonly controller: InputMaybe<StringFilter>;
  /** Filter by the object’s `createdBlock` field. */
  readonly createdBlock: InputMaybe<IntFilter>;
  /** Filter by the object’s `id` field. */
  readonly id: InputMaybe<StringFilter>;
  /** Filter by the object’s `lastEvent` field. */
  readonly lastEvent: InputMaybe<StringFilter>;
  /** Negates the expression. */
  readonly not: InputMaybe<ConsumerControllerFilter>;
  /** Checks for any expressions in this list. */
  readonly or: InputMaybe<ReadonlyArray<ConsumerControllerFilter>>;
};

export type ConsumerControllerMaxAggregates = {
  readonly __typename: 'ConsumerControllerMaxAggregates';
  /** Maximum of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['Int']['output']>;
};

export type ConsumerControllerMinAggregates = {
  readonly __typename: 'ConsumerControllerMinAggregates';
  /** Minimum of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['Int']['output']>;
};

export type ConsumerControllerStddevPopulationAggregates = {
  readonly __typename: 'ConsumerControllerStddevPopulationAggregates';
  /** Population standard deviation of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
};

export type ConsumerControllerStddevSampleAggregates = {
  readonly __typename: 'ConsumerControllerStddevSampleAggregates';
  /** Sample standard deviation of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
};

export type ConsumerControllerSumAggregates = {
  readonly __typename: 'ConsumerControllerSumAggregates';
  /** Sum of createdBlock across the matching connection */
  readonly createdBlock: Scalars['BigInt']['output'];
};

export type ConsumerControllerVariancePopulationAggregates = {
  readonly __typename: 'ConsumerControllerVariancePopulationAggregates';
  /** Population variance of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
};

export type ConsumerControllerVarianceSampleAggregates = {
  readonly __typename: 'ConsumerControllerVarianceSampleAggregates';
  /** Sample variance of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `ConsumerController` values. */
export type ConsumerControllersConnection = {
  readonly __typename: 'ConsumerControllersConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<ConsumerControllerAggregates>;
  /** A list of edges which contains the `ConsumerController` and cursor to aid in pagination. */
  readonly edges: ReadonlyArray<ConsumerControllersEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<ConsumerControllerAggregates>>;
  /** A list of `ConsumerController` objects. */
  readonly nodes: ReadonlyArray<Maybe<ConsumerController>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `ConsumerController` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `ConsumerController` values. */
export type ConsumerControllersConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<ConsumerControllersGroupBy>;
  having: InputMaybe<ConsumerControllersHavingInput>;
};

/** A `ConsumerController` edge in the connection. */
export type ConsumerControllersEdge = {
  readonly __typename: 'ConsumerControllersEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `ConsumerController` at the end of the edge. */
  readonly node: Maybe<ConsumerController>;
};

/** Grouping methods for `ConsumerController` for usage during aggregation. */
export enum ConsumerControllersGroupBy {
  CONSUMER = 'CONSUMER',
  CONTROLLER = 'CONTROLLER',
  CREATED_BLOCK = 'CREATED_BLOCK',
  ID = 'ID',
  LAST_EVENT = 'LAST_EVENT',
}

export type ConsumerControllersHavingAverageInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
};

export type ConsumerControllersHavingDistinctCountInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
};

/** Conditions for `ConsumerController` aggregates. */
export type ConsumerControllersHavingInput = {
  readonly AND: InputMaybe<ReadonlyArray<ConsumerControllersHavingInput>>;
  readonly OR: InputMaybe<ReadonlyArray<ConsumerControllersHavingInput>>;
  readonly average: InputMaybe<ConsumerControllersHavingAverageInput>;
  readonly distinctCount: InputMaybe<ConsumerControllersHavingDistinctCountInput>;
  readonly max: InputMaybe<ConsumerControllersHavingMaxInput>;
  readonly min: InputMaybe<ConsumerControllersHavingMinInput>;
  readonly stddevPopulation: InputMaybe<ConsumerControllersHavingStddevPopulationInput>;
  readonly stddevSample: InputMaybe<ConsumerControllersHavingStddevSampleInput>;
  readonly sum: InputMaybe<ConsumerControllersHavingSumInput>;
  readonly variancePopulation: InputMaybe<ConsumerControllersHavingVariancePopulationInput>;
  readonly varianceSample: InputMaybe<ConsumerControllersHavingVarianceSampleInput>;
};

export type ConsumerControllersHavingMaxInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
};

export type ConsumerControllersHavingMinInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
};

export type ConsumerControllersHavingStddevPopulationInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
};

export type ConsumerControllersHavingStddevSampleInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
};

export type ConsumerControllersHavingSumInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
};

export type ConsumerControllersHavingVariancePopulationInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
};

export type ConsumerControllersHavingVarianceSampleInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
};

/** Methods to use when ordering `ConsumerController`. */
export enum ConsumerControllersOrderBy {
  CONSUMER_ASC = 'CONSUMER_ASC',
  CONSUMER_DESC = 'CONSUMER_DESC',
  CONTROLLER_ASC = 'CONTROLLER_ASC',
  CONTROLLER_DESC = 'CONTROLLER_DESC',
  CREATED_BLOCK_ASC = 'CREATED_BLOCK_ASC',
  CREATED_BLOCK_DESC = 'CREATED_BLOCK_DESC',
  ID_ASC = 'ID_ASC',
  ID_DESC = 'ID_DESC',
  LAST_EVENT_ASC = 'LAST_EVENT_ASC',
  LAST_EVENT_DESC = 'LAST_EVENT_DESC',
  NATURAL = 'NATURAL',
  PRIMARY_KEY_ASC = 'PRIMARY_KEY_ASC',
  PRIMARY_KEY_DESC = 'PRIMARY_KEY_DESC',
}

export type ConsumerQueryReward = Node & {
  readonly __typename: 'ConsumerQueryReward';
  readonly consumer: Scalars['String']['output'];
  readonly createAt: Scalars['Datetime']['output'];
  /** Reads a single `Deployment` that is related to this `ConsumerQueryReward`. */
  readonly deployment: Maybe<Deployment>;
  readonly deploymentId: Scalars['String']['output'];
  readonly id: Scalars['String']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  readonly nodeId: Scalars['ID']['output'];
  readonly orderId: Scalars['String']['output'];
  readonly orderType: OrderType;
  /** Reads a single `Project` that is related to this `ConsumerQueryReward`. */
  readonly project: Maybe<Project>;
  readonly projectId: Scalars['String']['output'];
  readonly refunded: Scalars['BigFloat']['output'];
  readonly spent: Scalars['BigFloat']['output'];
  readonly updateAt: Scalars['Datetime']['output'];
};

export type ConsumerQueryRewardAggregates = {
  readonly __typename: 'ConsumerQueryRewardAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly average: Maybe<ConsumerQueryRewardAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly distinctCount: Maybe<ConsumerQueryRewardDistinctCountAggregates>;
  readonly keys: Maybe<ReadonlyArray<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly max: Maybe<ConsumerQueryRewardMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly min: Maybe<ConsumerQueryRewardMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevPopulation: Maybe<ConsumerQueryRewardStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevSample: Maybe<ConsumerQueryRewardStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly sum: Maybe<ConsumerQueryRewardSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly variancePopulation: Maybe<ConsumerQueryRewardVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly varianceSample: Maybe<ConsumerQueryRewardVarianceSampleAggregates>;
};

/** A filter to be used against aggregates of `ConsumerQueryReward` object types. */
export type ConsumerQueryRewardAggregatesFilter = {
  /** Mean average aggregate over matching `ConsumerQueryReward` objects. */
  readonly average: InputMaybe<ConsumerQueryRewardAverageAggregateFilter>;
  /** Distinct count aggregate over matching `ConsumerQueryReward` objects. */
  readonly distinctCount: InputMaybe<ConsumerQueryRewardDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `ConsumerQueryReward` object to be included within the aggregate. */
  readonly filter: InputMaybe<ConsumerQueryRewardFilter>;
  /** Maximum aggregate over matching `ConsumerQueryReward` objects. */
  readonly max: InputMaybe<ConsumerQueryRewardMaxAggregateFilter>;
  /** Minimum aggregate over matching `ConsumerQueryReward` objects. */
  readonly min: InputMaybe<ConsumerQueryRewardMinAggregateFilter>;
  /** Population standard deviation aggregate over matching `ConsumerQueryReward` objects. */
  readonly stddevPopulation: InputMaybe<ConsumerQueryRewardStddevPopulationAggregateFilter>;
  /** Sample standard deviation aggregate over matching `ConsumerQueryReward` objects. */
  readonly stddevSample: InputMaybe<ConsumerQueryRewardStddevSampleAggregateFilter>;
  /** Sum aggregate over matching `ConsumerQueryReward` objects. */
  readonly sum: InputMaybe<ConsumerQueryRewardSumAggregateFilter>;
  /** Population variance aggregate over matching `ConsumerQueryReward` objects. */
  readonly variancePopulation: InputMaybe<ConsumerQueryRewardVariancePopulationAggregateFilter>;
  /** Sample variance aggregate over matching `ConsumerQueryReward` objects. */
  readonly varianceSample: InputMaybe<ConsumerQueryRewardVarianceSampleAggregateFilter>;
};

export type ConsumerQueryRewardAverageAggregateFilter = {
  readonly refunded: InputMaybe<BigFloatFilter>;
  readonly spent: InputMaybe<BigFloatFilter>;
};

export type ConsumerQueryRewardAverageAggregates = {
  readonly __typename: 'ConsumerQueryRewardAverageAggregates';
  /** Mean average of refunded across the matching connection */
  readonly refunded: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of spent across the matching connection */
  readonly spent: Maybe<Scalars['BigFloat']['output']>;
};

export type ConsumerQueryRewardDistinctCountAggregateFilter = {
  readonly _blockRange: InputMaybe<BigIntFilter>;
  readonly _id: InputMaybe<BigIntFilter>;
  readonly consumer: InputMaybe<BigIntFilter>;
  readonly createAt: InputMaybe<BigIntFilter>;
  readonly deploymentId: InputMaybe<BigIntFilter>;
  readonly id: InputMaybe<BigIntFilter>;
  readonly orderId: InputMaybe<BigIntFilter>;
  readonly orderType: InputMaybe<BigIntFilter>;
  readonly projectId: InputMaybe<BigIntFilter>;
  readonly refunded: InputMaybe<BigIntFilter>;
  readonly spent: InputMaybe<BigIntFilter>;
  readonly updateAt: InputMaybe<BigIntFilter>;
};

export type ConsumerQueryRewardDistinctCountAggregates = {
  readonly __typename: 'ConsumerQueryRewardDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  readonly _blockRange: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  readonly _id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of consumer across the matching connection */
  readonly consumer: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createAt across the matching connection */
  readonly createAt: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of deploymentId across the matching connection */
  readonly deploymentId: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  readonly id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of orderId across the matching connection */
  readonly orderId: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of orderType across the matching connection */
  readonly orderType: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of projectId across the matching connection */
  readonly projectId: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of refunded across the matching connection */
  readonly refunded: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of spent across the matching connection */
  readonly spent: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of updateAt across the matching connection */
  readonly updateAt: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `ConsumerQueryReward` object types. All fields are combined with a logical ‘and.’ */
export type ConsumerQueryRewardFilter = {
  /** Checks for all expressions in this list. */
  readonly and: InputMaybe<ReadonlyArray<ConsumerQueryRewardFilter>>;
  /** Filter by the object’s `consumer` field. */
  readonly consumer: InputMaybe<StringFilter>;
  /** Filter by the object’s `createAt` field. */
  readonly createAt: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `deployment` relation. */
  readonly deployment: InputMaybe<DeploymentFilter>;
  /** Filter by the object’s `deploymentId` field. */
  readonly deploymentId: InputMaybe<StringFilter>;
  /** Filter by the object’s `id` field. */
  readonly id: InputMaybe<StringFilter>;
  /** Negates the expression. */
  readonly not: InputMaybe<ConsumerQueryRewardFilter>;
  /** Checks for any expressions in this list. */
  readonly or: InputMaybe<ReadonlyArray<ConsumerQueryRewardFilter>>;
  /** Filter by the object’s `orderId` field. */
  readonly orderId: InputMaybe<StringFilter>;
  /** Filter by the object’s `orderType` field. */
  readonly orderType: InputMaybe<OrderTypeFilter>;
  /** Filter by the object’s `project` relation. */
  readonly project: InputMaybe<ProjectFilter>;
  /** Filter by the object’s `projectId` field. */
  readonly projectId: InputMaybe<StringFilter>;
  /** Filter by the object’s `refunded` field. */
  readonly refunded: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `spent` field. */
  readonly spent: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `updateAt` field. */
  readonly updateAt: InputMaybe<DatetimeFilter>;
};

export type ConsumerQueryRewardMaxAggregateFilter = {
  readonly refunded: InputMaybe<BigFloatFilter>;
  readonly spent: InputMaybe<BigFloatFilter>;
};

export type ConsumerQueryRewardMaxAggregates = {
  readonly __typename: 'ConsumerQueryRewardMaxAggregates';
  /** Maximum of refunded across the matching connection */
  readonly refunded: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of spent across the matching connection */
  readonly spent: Maybe<Scalars['BigFloat']['output']>;
};

export type ConsumerQueryRewardMinAggregateFilter = {
  readonly refunded: InputMaybe<BigFloatFilter>;
  readonly spent: InputMaybe<BigFloatFilter>;
};

export type ConsumerQueryRewardMinAggregates = {
  readonly __typename: 'ConsumerQueryRewardMinAggregates';
  /** Minimum of refunded across the matching connection */
  readonly refunded: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of spent across the matching connection */
  readonly spent: Maybe<Scalars['BigFloat']['output']>;
};

export type ConsumerQueryRewardStddevPopulationAggregateFilter = {
  readonly refunded: InputMaybe<BigFloatFilter>;
  readonly spent: InputMaybe<BigFloatFilter>;
};

export type ConsumerQueryRewardStddevPopulationAggregates = {
  readonly __typename: 'ConsumerQueryRewardStddevPopulationAggregates';
  /** Population standard deviation of refunded across the matching connection */
  readonly refunded: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of spent across the matching connection */
  readonly spent: Maybe<Scalars['BigFloat']['output']>;
};

export type ConsumerQueryRewardStddevSampleAggregateFilter = {
  readonly refunded: InputMaybe<BigFloatFilter>;
  readonly spent: InputMaybe<BigFloatFilter>;
};

export type ConsumerQueryRewardStddevSampleAggregates = {
  readonly __typename: 'ConsumerQueryRewardStddevSampleAggregates';
  /** Sample standard deviation of refunded across the matching connection */
  readonly refunded: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of spent across the matching connection */
  readonly spent: Maybe<Scalars['BigFloat']['output']>;
};

export type ConsumerQueryRewardSumAggregateFilter = {
  readonly refunded: InputMaybe<BigFloatFilter>;
  readonly spent: InputMaybe<BigFloatFilter>;
};

export type ConsumerQueryRewardSumAggregates = {
  readonly __typename: 'ConsumerQueryRewardSumAggregates';
  /** Sum of refunded across the matching connection */
  readonly refunded: Scalars['BigFloat']['output'];
  /** Sum of spent across the matching connection */
  readonly spent: Scalars['BigFloat']['output'];
};

/** A connection to a list of `ConsumerQueryRewardSummary` values. */
export type ConsumerQueryRewardSummariesConnection = {
  readonly __typename: 'ConsumerQueryRewardSummariesConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<ConsumerQueryRewardSummaryAggregates>;
  /** A list of edges which contains the `ConsumerQueryRewardSummary` and cursor to aid in pagination. */
  readonly edges: ReadonlyArray<ConsumerQueryRewardSummariesEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<ConsumerQueryRewardSummaryAggregates>>;
  /** A list of `ConsumerQueryRewardSummary` objects. */
  readonly nodes: ReadonlyArray<Maybe<ConsumerQueryRewardSummary>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `ConsumerQueryRewardSummary` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `ConsumerQueryRewardSummary` values. */
export type ConsumerQueryRewardSummariesConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<ConsumerQueryRewardSummariesGroupBy>;
  having: InputMaybe<ConsumerQueryRewardSummariesHavingInput>;
};

/** A `ConsumerQueryRewardSummary` edge in the connection. */
export type ConsumerQueryRewardSummariesEdge = {
  readonly __typename: 'ConsumerQueryRewardSummariesEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `ConsumerQueryRewardSummary` at the end of the edge. */
  readonly node: Maybe<ConsumerQueryRewardSummary>;
};

/** Grouping methods for `ConsumerQueryRewardSummary` for usage during aggregation. */
export enum ConsumerQueryRewardSummariesGroupBy {
  CONSUMER = 'CONSUMER',
  CREATE_AT = 'CREATE_AT',
  CREATE_AT_TRUNCATED_TO_DAY = 'CREATE_AT_TRUNCATED_TO_DAY',
  CREATE_AT_TRUNCATED_TO_HOUR = 'CREATE_AT_TRUNCATED_TO_HOUR',
  DEPLOYMENT_ID = 'DEPLOYMENT_ID',
  ID = 'ID',
  ORDER_TYPE = 'ORDER_TYPE',
  PROJECT_ID = 'PROJECT_ID',
  TOTAL_REFUNDED = 'TOTAL_REFUNDED',
  TOTAL_SPENT = 'TOTAL_SPENT',
  UPDATE_AT = 'UPDATE_AT',
  UPDATE_AT_TRUNCATED_TO_DAY = 'UPDATE_AT_TRUNCATED_TO_DAY',
  UPDATE_AT_TRUNCATED_TO_HOUR = 'UPDATE_AT_TRUNCATED_TO_HOUR',
}

export type ConsumerQueryRewardSummariesHavingAverageInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly totalRefunded: InputMaybe<HavingBigfloatFilter>;
  readonly totalSpent: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type ConsumerQueryRewardSummariesHavingDistinctCountInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly totalRefunded: InputMaybe<HavingBigfloatFilter>;
  readonly totalSpent: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

/** Conditions for `ConsumerQueryRewardSummary` aggregates. */
export type ConsumerQueryRewardSummariesHavingInput = {
  readonly AND: InputMaybe<ReadonlyArray<ConsumerQueryRewardSummariesHavingInput>>;
  readonly OR: InputMaybe<ReadonlyArray<ConsumerQueryRewardSummariesHavingInput>>;
  readonly average: InputMaybe<ConsumerQueryRewardSummariesHavingAverageInput>;
  readonly distinctCount: InputMaybe<ConsumerQueryRewardSummariesHavingDistinctCountInput>;
  readonly max: InputMaybe<ConsumerQueryRewardSummariesHavingMaxInput>;
  readonly min: InputMaybe<ConsumerQueryRewardSummariesHavingMinInput>;
  readonly stddevPopulation: InputMaybe<ConsumerQueryRewardSummariesHavingStddevPopulationInput>;
  readonly stddevSample: InputMaybe<ConsumerQueryRewardSummariesHavingStddevSampleInput>;
  readonly sum: InputMaybe<ConsumerQueryRewardSummariesHavingSumInput>;
  readonly variancePopulation: InputMaybe<ConsumerQueryRewardSummariesHavingVariancePopulationInput>;
  readonly varianceSample: InputMaybe<ConsumerQueryRewardSummariesHavingVarianceSampleInput>;
};

export type ConsumerQueryRewardSummariesHavingMaxInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly totalRefunded: InputMaybe<HavingBigfloatFilter>;
  readonly totalSpent: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type ConsumerQueryRewardSummariesHavingMinInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly totalRefunded: InputMaybe<HavingBigfloatFilter>;
  readonly totalSpent: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type ConsumerQueryRewardSummariesHavingStddevPopulationInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly totalRefunded: InputMaybe<HavingBigfloatFilter>;
  readonly totalSpent: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type ConsumerQueryRewardSummariesHavingStddevSampleInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly totalRefunded: InputMaybe<HavingBigfloatFilter>;
  readonly totalSpent: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type ConsumerQueryRewardSummariesHavingSumInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly totalRefunded: InputMaybe<HavingBigfloatFilter>;
  readonly totalSpent: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type ConsumerQueryRewardSummariesHavingVariancePopulationInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly totalRefunded: InputMaybe<HavingBigfloatFilter>;
  readonly totalSpent: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type ConsumerQueryRewardSummariesHavingVarianceSampleInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly totalRefunded: InputMaybe<HavingBigfloatFilter>;
  readonly totalSpent: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

/** Methods to use when ordering `ConsumerQueryRewardSummary`. */
export enum ConsumerQueryRewardSummariesOrderBy {
  CONSUMER_ASC = 'CONSUMER_ASC',
  CONSUMER_DESC = 'CONSUMER_DESC',
  CREATE_AT_ASC = 'CREATE_AT_ASC',
  CREATE_AT_DESC = 'CREATE_AT_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__ID_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__ID_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__ID_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__ID_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_DESC',
  DEPLOYMENT_ID_ASC = 'DEPLOYMENT_ID_ASC',
  DEPLOYMENT_ID_DESC = 'DEPLOYMENT_ID_DESC',
  ID_ASC = 'ID_ASC',
  ID_DESC = 'ID_DESC',
  NATURAL = 'NATURAL',
  ORDER_TYPE_ASC = 'ORDER_TYPE_ASC',
  ORDER_TYPE_DESC = 'ORDER_TYPE_DESC',
  PRIMARY_KEY_ASC = 'PRIMARY_KEY_ASC',
  PRIMARY_KEY_DESC = 'PRIMARY_KEY_DESC',
  PROJECT_BY_PROJECT_ID__BOOST_ALLOCATION_RATIO_ASC = 'PROJECT_BY_PROJECT_ID__BOOST_ALLOCATION_RATIO_ASC',
  PROJECT_BY_PROJECT_ID__BOOST_ALLOCATION_RATIO_DESC = 'PROJECT_BY_PROJECT_ID__BOOST_ALLOCATION_RATIO_DESC',
  PROJECT_BY_PROJECT_ID__CREATED_BLOCK_ASC = 'PROJECT_BY_PROJECT_ID__CREATED_BLOCK_ASC',
  PROJECT_BY_PROJECT_ID__CREATED_BLOCK_DESC = 'PROJECT_BY_PROJECT_ID__CREATED_BLOCK_DESC',
  PROJECT_BY_PROJECT_ID__CREATED_TIMESTAMP_ASC = 'PROJECT_BY_PROJECT_ID__CREATED_TIMESTAMP_ASC',
  PROJECT_BY_PROJECT_ID__CREATED_TIMESTAMP_DESC = 'PROJECT_BY_PROJECT_ID__CREATED_TIMESTAMP_DESC',
  PROJECT_BY_PROJECT_ID__DEPLOYMENT_ID_ASC = 'PROJECT_BY_PROJECT_ID__DEPLOYMENT_ID_ASC',
  PROJECT_BY_PROJECT_ID__DEPLOYMENT_ID_DESC = 'PROJECT_BY_PROJECT_ID__DEPLOYMENT_ID_DESC',
  PROJECT_BY_PROJECT_ID__DEPLOYMENT_METADATA_ASC = 'PROJECT_BY_PROJECT_ID__DEPLOYMENT_METADATA_ASC',
  PROJECT_BY_PROJECT_ID__DEPLOYMENT_METADATA_DESC = 'PROJECT_BY_PROJECT_ID__DEPLOYMENT_METADATA_DESC',
  PROJECT_BY_PROJECT_ID__ID_ASC = 'PROJECT_BY_PROJECT_ID__ID_ASC',
  PROJECT_BY_PROJECT_ID__ID_DESC = 'PROJECT_BY_PROJECT_ID__ID_DESC',
  PROJECT_BY_PROJECT_ID__LAST_EVENT_ASC = 'PROJECT_BY_PROJECT_ID__LAST_EVENT_ASC',
  PROJECT_BY_PROJECT_ID__LAST_EVENT_DESC = 'PROJECT_BY_PROJECT_ID__LAST_EVENT_DESC',
  PROJECT_BY_PROJECT_ID__METADATA_ASC = 'PROJECT_BY_PROJECT_ID__METADATA_ASC',
  PROJECT_BY_PROJECT_ID__METADATA_DESC = 'PROJECT_BY_PROJECT_ID__METADATA_DESC',
  PROJECT_BY_PROJECT_ID__OWNER_ASC = 'PROJECT_BY_PROJECT_ID__OWNER_ASC',
  PROJECT_BY_PROJECT_ID__OWNER_DESC = 'PROJECT_BY_PROJECT_ID__OWNER_DESC',
  PROJECT_BY_PROJECT_ID__TOTAL_ALLOCATION_ASC = 'PROJECT_BY_PROJECT_ID__TOTAL_ALLOCATION_ASC',
  PROJECT_BY_PROJECT_ID__TOTAL_ALLOCATION_DESC = 'PROJECT_BY_PROJECT_ID__TOTAL_ALLOCATION_DESC',
  PROJECT_BY_PROJECT_ID__TOTAL_BOOST_ASC = 'PROJECT_BY_PROJECT_ID__TOTAL_BOOST_ASC',
  PROJECT_BY_PROJECT_ID__TOTAL_BOOST_DESC = 'PROJECT_BY_PROJECT_ID__TOTAL_BOOST_DESC',
  PROJECT_BY_PROJECT_ID__TOTAL_REWARD_ASC = 'PROJECT_BY_PROJECT_ID__TOTAL_REWARD_ASC',
  PROJECT_BY_PROJECT_ID__TOTAL_REWARD_DESC = 'PROJECT_BY_PROJECT_ID__TOTAL_REWARD_DESC',
  PROJECT_BY_PROJECT_ID__TYPE_ASC = 'PROJECT_BY_PROJECT_ID__TYPE_ASC',
  PROJECT_BY_PROJECT_ID__TYPE_DESC = 'PROJECT_BY_PROJECT_ID__TYPE_DESC',
  PROJECT_BY_PROJECT_ID__UPDATED_TIMESTAMP_ASC = 'PROJECT_BY_PROJECT_ID__UPDATED_TIMESTAMP_ASC',
  PROJECT_BY_PROJECT_ID__UPDATED_TIMESTAMP_DESC = 'PROJECT_BY_PROJECT_ID__UPDATED_TIMESTAMP_DESC',
  PROJECT_ID_ASC = 'PROJECT_ID_ASC',
  PROJECT_ID_DESC = 'PROJECT_ID_DESC',
  TOTAL_REFUNDED_ASC = 'TOTAL_REFUNDED_ASC',
  TOTAL_REFUNDED_DESC = 'TOTAL_REFUNDED_DESC',
  TOTAL_SPENT_ASC = 'TOTAL_SPENT_ASC',
  TOTAL_SPENT_DESC = 'TOTAL_SPENT_DESC',
  UPDATE_AT_ASC = 'UPDATE_AT_ASC',
  UPDATE_AT_DESC = 'UPDATE_AT_DESC',
}

export type ConsumerQueryRewardSummary = Node & {
  readonly __typename: 'ConsumerQueryRewardSummary';
  readonly consumer: Scalars['String']['output'];
  readonly createAt: Scalars['Datetime']['output'];
  /** Reads a single `Deployment` that is related to this `ConsumerQueryRewardSummary`. */
  readonly deployment: Maybe<Deployment>;
  readonly deploymentId: Scalars['String']['output'];
  readonly id: Scalars['String']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  readonly nodeId: Scalars['ID']['output'];
  readonly orderType: OrderType;
  /** Reads a single `Project` that is related to this `ConsumerQueryRewardSummary`. */
  readonly project: Maybe<Project>;
  readonly projectId: Scalars['String']['output'];
  readonly totalRefunded: Scalars['BigFloat']['output'];
  readonly totalSpent: Scalars['BigFloat']['output'];
  readonly updateAt: Scalars['Datetime']['output'];
};

export type ConsumerQueryRewardSummaryAggregates = {
  readonly __typename: 'ConsumerQueryRewardSummaryAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly average: Maybe<ConsumerQueryRewardSummaryAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly distinctCount: Maybe<ConsumerQueryRewardSummaryDistinctCountAggregates>;
  readonly keys: Maybe<ReadonlyArray<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly max: Maybe<ConsumerQueryRewardSummaryMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly min: Maybe<ConsumerQueryRewardSummaryMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevPopulation: Maybe<ConsumerQueryRewardSummaryStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevSample: Maybe<ConsumerQueryRewardSummaryStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly sum: Maybe<ConsumerQueryRewardSummarySumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly variancePopulation: Maybe<ConsumerQueryRewardSummaryVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly varianceSample: Maybe<ConsumerQueryRewardSummaryVarianceSampleAggregates>;
};

/** A filter to be used against aggregates of `ConsumerQueryRewardSummary` object types. */
export type ConsumerQueryRewardSummaryAggregatesFilter = {
  /** Mean average aggregate over matching `ConsumerQueryRewardSummary` objects. */
  readonly average: InputMaybe<ConsumerQueryRewardSummaryAverageAggregateFilter>;
  /** Distinct count aggregate over matching `ConsumerQueryRewardSummary` objects. */
  readonly distinctCount: InputMaybe<ConsumerQueryRewardSummaryDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `ConsumerQueryRewardSummary` object to be included within the aggregate. */
  readonly filter: InputMaybe<ConsumerQueryRewardSummaryFilter>;
  /** Maximum aggregate over matching `ConsumerQueryRewardSummary` objects. */
  readonly max: InputMaybe<ConsumerQueryRewardSummaryMaxAggregateFilter>;
  /** Minimum aggregate over matching `ConsumerQueryRewardSummary` objects. */
  readonly min: InputMaybe<ConsumerQueryRewardSummaryMinAggregateFilter>;
  /** Population standard deviation aggregate over matching `ConsumerQueryRewardSummary` objects. */
  readonly stddevPopulation: InputMaybe<ConsumerQueryRewardSummaryStddevPopulationAggregateFilter>;
  /** Sample standard deviation aggregate over matching `ConsumerQueryRewardSummary` objects. */
  readonly stddevSample: InputMaybe<ConsumerQueryRewardSummaryStddevSampleAggregateFilter>;
  /** Sum aggregate over matching `ConsumerQueryRewardSummary` objects. */
  readonly sum: InputMaybe<ConsumerQueryRewardSummarySumAggregateFilter>;
  /** Population variance aggregate over matching `ConsumerQueryRewardSummary` objects. */
  readonly variancePopulation: InputMaybe<ConsumerQueryRewardSummaryVariancePopulationAggregateFilter>;
  /** Sample variance aggregate over matching `ConsumerQueryRewardSummary` objects. */
  readonly varianceSample: InputMaybe<ConsumerQueryRewardSummaryVarianceSampleAggregateFilter>;
};

export type ConsumerQueryRewardSummaryAverageAggregateFilter = {
  readonly totalRefunded: InputMaybe<BigFloatFilter>;
  readonly totalSpent: InputMaybe<BigFloatFilter>;
};

export type ConsumerQueryRewardSummaryAverageAggregates = {
  readonly __typename: 'ConsumerQueryRewardSummaryAverageAggregates';
  /** Mean average of totalRefunded across the matching connection */
  readonly totalRefunded: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of totalSpent across the matching connection */
  readonly totalSpent: Maybe<Scalars['BigFloat']['output']>;
};

export type ConsumerQueryRewardSummaryDistinctCountAggregateFilter = {
  readonly _blockRange: InputMaybe<BigIntFilter>;
  readonly _id: InputMaybe<BigIntFilter>;
  readonly consumer: InputMaybe<BigIntFilter>;
  readonly createAt: InputMaybe<BigIntFilter>;
  readonly deploymentId: InputMaybe<BigIntFilter>;
  readonly id: InputMaybe<BigIntFilter>;
  readonly orderType: InputMaybe<BigIntFilter>;
  readonly projectId: InputMaybe<BigIntFilter>;
  readonly totalRefunded: InputMaybe<BigIntFilter>;
  readonly totalSpent: InputMaybe<BigIntFilter>;
  readonly updateAt: InputMaybe<BigIntFilter>;
};

export type ConsumerQueryRewardSummaryDistinctCountAggregates = {
  readonly __typename: 'ConsumerQueryRewardSummaryDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  readonly _blockRange: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  readonly _id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of consumer across the matching connection */
  readonly consumer: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createAt across the matching connection */
  readonly createAt: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of deploymentId across the matching connection */
  readonly deploymentId: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  readonly id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of orderType across the matching connection */
  readonly orderType: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of projectId across the matching connection */
  readonly projectId: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of totalRefunded across the matching connection */
  readonly totalRefunded: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of totalSpent across the matching connection */
  readonly totalSpent: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of updateAt across the matching connection */
  readonly updateAt: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `ConsumerQueryRewardSummary` object types. All fields are combined with a logical ‘and.’ */
export type ConsumerQueryRewardSummaryFilter = {
  /** Checks for all expressions in this list. */
  readonly and: InputMaybe<ReadonlyArray<ConsumerQueryRewardSummaryFilter>>;
  /** Filter by the object’s `consumer` field. */
  readonly consumer: InputMaybe<StringFilter>;
  /** Filter by the object’s `createAt` field. */
  readonly createAt: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `deployment` relation. */
  readonly deployment: InputMaybe<DeploymentFilter>;
  /** Filter by the object’s `deploymentId` field. */
  readonly deploymentId: InputMaybe<StringFilter>;
  /** Filter by the object’s `id` field. */
  readonly id: InputMaybe<StringFilter>;
  /** Negates the expression. */
  readonly not: InputMaybe<ConsumerQueryRewardSummaryFilter>;
  /** Checks for any expressions in this list. */
  readonly or: InputMaybe<ReadonlyArray<ConsumerQueryRewardSummaryFilter>>;
  /** Filter by the object’s `orderType` field. */
  readonly orderType: InputMaybe<OrderTypeFilter>;
  /** Filter by the object’s `project` relation. */
  readonly project: InputMaybe<ProjectFilter>;
  /** Filter by the object’s `projectId` field. */
  readonly projectId: InputMaybe<StringFilter>;
  /** Filter by the object’s `totalRefunded` field. */
  readonly totalRefunded: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `totalSpent` field. */
  readonly totalSpent: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `updateAt` field. */
  readonly updateAt: InputMaybe<DatetimeFilter>;
};

export type ConsumerQueryRewardSummaryMaxAggregateFilter = {
  readonly totalRefunded: InputMaybe<BigFloatFilter>;
  readonly totalSpent: InputMaybe<BigFloatFilter>;
};

export type ConsumerQueryRewardSummaryMaxAggregates = {
  readonly __typename: 'ConsumerQueryRewardSummaryMaxAggregates';
  /** Maximum of totalRefunded across the matching connection */
  readonly totalRefunded: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of totalSpent across the matching connection */
  readonly totalSpent: Maybe<Scalars['BigFloat']['output']>;
};

export type ConsumerQueryRewardSummaryMinAggregateFilter = {
  readonly totalRefunded: InputMaybe<BigFloatFilter>;
  readonly totalSpent: InputMaybe<BigFloatFilter>;
};

export type ConsumerQueryRewardSummaryMinAggregates = {
  readonly __typename: 'ConsumerQueryRewardSummaryMinAggregates';
  /** Minimum of totalRefunded across the matching connection */
  readonly totalRefunded: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of totalSpent across the matching connection */
  readonly totalSpent: Maybe<Scalars['BigFloat']['output']>;
};

export type ConsumerQueryRewardSummaryStddevPopulationAggregateFilter = {
  readonly totalRefunded: InputMaybe<BigFloatFilter>;
  readonly totalSpent: InputMaybe<BigFloatFilter>;
};

export type ConsumerQueryRewardSummaryStddevPopulationAggregates = {
  readonly __typename: 'ConsumerQueryRewardSummaryStddevPopulationAggregates';
  /** Population standard deviation of totalRefunded across the matching connection */
  readonly totalRefunded: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of totalSpent across the matching connection */
  readonly totalSpent: Maybe<Scalars['BigFloat']['output']>;
};

export type ConsumerQueryRewardSummaryStddevSampleAggregateFilter = {
  readonly totalRefunded: InputMaybe<BigFloatFilter>;
  readonly totalSpent: InputMaybe<BigFloatFilter>;
};

export type ConsumerQueryRewardSummaryStddevSampleAggregates = {
  readonly __typename: 'ConsumerQueryRewardSummaryStddevSampleAggregates';
  /** Sample standard deviation of totalRefunded across the matching connection */
  readonly totalRefunded: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of totalSpent across the matching connection */
  readonly totalSpent: Maybe<Scalars['BigFloat']['output']>;
};

export type ConsumerQueryRewardSummarySumAggregateFilter = {
  readonly totalRefunded: InputMaybe<BigFloatFilter>;
  readonly totalSpent: InputMaybe<BigFloatFilter>;
};

export type ConsumerQueryRewardSummarySumAggregates = {
  readonly __typename: 'ConsumerQueryRewardSummarySumAggregates';
  /** Sum of totalRefunded across the matching connection */
  readonly totalRefunded: Scalars['BigFloat']['output'];
  /** Sum of totalSpent across the matching connection */
  readonly totalSpent: Scalars['BigFloat']['output'];
};

export type ConsumerQueryRewardSummaryVariancePopulationAggregateFilter = {
  readonly totalRefunded: InputMaybe<BigFloatFilter>;
  readonly totalSpent: InputMaybe<BigFloatFilter>;
};

export type ConsumerQueryRewardSummaryVariancePopulationAggregates = {
  readonly __typename: 'ConsumerQueryRewardSummaryVariancePopulationAggregates';
  /** Population variance of totalRefunded across the matching connection */
  readonly totalRefunded: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of totalSpent across the matching connection */
  readonly totalSpent: Maybe<Scalars['BigFloat']['output']>;
};

export type ConsumerQueryRewardSummaryVarianceSampleAggregateFilter = {
  readonly totalRefunded: InputMaybe<BigFloatFilter>;
  readonly totalSpent: InputMaybe<BigFloatFilter>;
};

export type ConsumerQueryRewardSummaryVarianceSampleAggregates = {
  readonly __typename: 'ConsumerQueryRewardSummaryVarianceSampleAggregates';
  /** Sample variance of totalRefunded across the matching connection */
  readonly totalRefunded: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of totalSpent across the matching connection */
  readonly totalSpent: Maybe<Scalars['BigFloat']['output']>;
};

export type ConsumerQueryRewardVariancePopulationAggregateFilter = {
  readonly refunded: InputMaybe<BigFloatFilter>;
  readonly spent: InputMaybe<BigFloatFilter>;
};

export type ConsumerQueryRewardVariancePopulationAggregates = {
  readonly __typename: 'ConsumerQueryRewardVariancePopulationAggregates';
  /** Population variance of refunded across the matching connection */
  readonly refunded: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of spent across the matching connection */
  readonly spent: Maybe<Scalars['BigFloat']['output']>;
};

export type ConsumerQueryRewardVarianceSampleAggregateFilter = {
  readonly refunded: InputMaybe<BigFloatFilter>;
  readonly spent: InputMaybe<BigFloatFilter>;
};

export type ConsumerQueryRewardVarianceSampleAggregates = {
  readonly __typename: 'ConsumerQueryRewardVarianceSampleAggregates';
  /** Sample variance of refunded across the matching connection */
  readonly refunded: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of spent across the matching connection */
  readonly spent: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `ConsumerQueryReward` values. */
export type ConsumerQueryRewardsConnection = {
  readonly __typename: 'ConsumerQueryRewardsConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<ConsumerQueryRewardAggregates>;
  /** A list of edges which contains the `ConsumerQueryReward` and cursor to aid in pagination. */
  readonly edges: ReadonlyArray<ConsumerQueryRewardsEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<ConsumerQueryRewardAggregates>>;
  /** A list of `ConsumerQueryReward` objects. */
  readonly nodes: ReadonlyArray<Maybe<ConsumerQueryReward>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `ConsumerQueryReward` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `ConsumerQueryReward` values. */
export type ConsumerQueryRewardsConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<ConsumerQueryRewardsGroupBy>;
  having: InputMaybe<ConsumerQueryRewardsHavingInput>;
};

/** A `ConsumerQueryReward` edge in the connection. */
export type ConsumerQueryRewardsEdge = {
  readonly __typename: 'ConsumerQueryRewardsEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `ConsumerQueryReward` at the end of the edge. */
  readonly node: Maybe<ConsumerQueryReward>;
};

/** Grouping methods for `ConsumerQueryReward` for usage during aggregation. */
export enum ConsumerQueryRewardsGroupBy {
  CONSUMER = 'CONSUMER',
  CREATE_AT = 'CREATE_AT',
  CREATE_AT_TRUNCATED_TO_DAY = 'CREATE_AT_TRUNCATED_TO_DAY',
  CREATE_AT_TRUNCATED_TO_HOUR = 'CREATE_AT_TRUNCATED_TO_HOUR',
  DEPLOYMENT_ID = 'DEPLOYMENT_ID',
  ID = 'ID',
  ORDER_ID = 'ORDER_ID',
  ORDER_TYPE = 'ORDER_TYPE',
  PROJECT_ID = 'PROJECT_ID',
  REFUNDED = 'REFUNDED',
  SPENT = 'SPENT',
  UPDATE_AT = 'UPDATE_AT',
  UPDATE_AT_TRUNCATED_TO_DAY = 'UPDATE_AT_TRUNCATED_TO_DAY',
  UPDATE_AT_TRUNCATED_TO_HOUR = 'UPDATE_AT_TRUNCATED_TO_HOUR',
}

export type ConsumerQueryRewardsHavingAverageInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly refunded: InputMaybe<HavingBigfloatFilter>;
  readonly spent: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type ConsumerQueryRewardsHavingDistinctCountInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly refunded: InputMaybe<HavingBigfloatFilter>;
  readonly spent: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

/** Conditions for `ConsumerQueryReward` aggregates. */
export type ConsumerQueryRewardsHavingInput = {
  readonly AND: InputMaybe<ReadonlyArray<ConsumerQueryRewardsHavingInput>>;
  readonly OR: InputMaybe<ReadonlyArray<ConsumerQueryRewardsHavingInput>>;
  readonly average: InputMaybe<ConsumerQueryRewardsHavingAverageInput>;
  readonly distinctCount: InputMaybe<ConsumerQueryRewardsHavingDistinctCountInput>;
  readonly max: InputMaybe<ConsumerQueryRewardsHavingMaxInput>;
  readonly min: InputMaybe<ConsumerQueryRewardsHavingMinInput>;
  readonly stddevPopulation: InputMaybe<ConsumerQueryRewardsHavingStddevPopulationInput>;
  readonly stddevSample: InputMaybe<ConsumerQueryRewardsHavingStddevSampleInput>;
  readonly sum: InputMaybe<ConsumerQueryRewardsHavingSumInput>;
  readonly variancePopulation: InputMaybe<ConsumerQueryRewardsHavingVariancePopulationInput>;
  readonly varianceSample: InputMaybe<ConsumerQueryRewardsHavingVarianceSampleInput>;
};

export type ConsumerQueryRewardsHavingMaxInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly refunded: InputMaybe<HavingBigfloatFilter>;
  readonly spent: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type ConsumerQueryRewardsHavingMinInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly refunded: InputMaybe<HavingBigfloatFilter>;
  readonly spent: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type ConsumerQueryRewardsHavingStddevPopulationInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly refunded: InputMaybe<HavingBigfloatFilter>;
  readonly spent: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type ConsumerQueryRewardsHavingStddevSampleInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly refunded: InputMaybe<HavingBigfloatFilter>;
  readonly spent: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type ConsumerQueryRewardsHavingSumInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly refunded: InputMaybe<HavingBigfloatFilter>;
  readonly spent: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type ConsumerQueryRewardsHavingVariancePopulationInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly refunded: InputMaybe<HavingBigfloatFilter>;
  readonly spent: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type ConsumerQueryRewardsHavingVarianceSampleInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly refunded: InputMaybe<HavingBigfloatFilter>;
  readonly spent: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

/** Methods to use when ordering `ConsumerQueryReward`. */
export enum ConsumerQueryRewardsOrderBy {
  CONSUMER_ASC = 'CONSUMER_ASC',
  CONSUMER_DESC = 'CONSUMER_DESC',
  CREATE_AT_ASC = 'CREATE_AT_ASC',
  CREATE_AT_DESC = 'CREATE_AT_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__ID_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__ID_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__ID_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__ID_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_DESC',
  DEPLOYMENT_ID_ASC = 'DEPLOYMENT_ID_ASC',
  DEPLOYMENT_ID_DESC = 'DEPLOYMENT_ID_DESC',
  ID_ASC = 'ID_ASC',
  ID_DESC = 'ID_DESC',
  NATURAL = 'NATURAL',
  ORDER_ID_ASC = 'ORDER_ID_ASC',
  ORDER_ID_DESC = 'ORDER_ID_DESC',
  ORDER_TYPE_ASC = 'ORDER_TYPE_ASC',
  ORDER_TYPE_DESC = 'ORDER_TYPE_DESC',
  PRIMARY_KEY_ASC = 'PRIMARY_KEY_ASC',
  PRIMARY_KEY_DESC = 'PRIMARY_KEY_DESC',
  PROJECT_BY_PROJECT_ID__BOOST_ALLOCATION_RATIO_ASC = 'PROJECT_BY_PROJECT_ID__BOOST_ALLOCATION_RATIO_ASC',
  PROJECT_BY_PROJECT_ID__BOOST_ALLOCATION_RATIO_DESC = 'PROJECT_BY_PROJECT_ID__BOOST_ALLOCATION_RATIO_DESC',
  PROJECT_BY_PROJECT_ID__CREATED_BLOCK_ASC = 'PROJECT_BY_PROJECT_ID__CREATED_BLOCK_ASC',
  PROJECT_BY_PROJECT_ID__CREATED_BLOCK_DESC = 'PROJECT_BY_PROJECT_ID__CREATED_BLOCK_DESC',
  PROJECT_BY_PROJECT_ID__CREATED_TIMESTAMP_ASC = 'PROJECT_BY_PROJECT_ID__CREATED_TIMESTAMP_ASC',
  PROJECT_BY_PROJECT_ID__CREATED_TIMESTAMP_DESC = 'PROJECT_BY_PROJECT_ID__CREATED_TIMESTAMP_DESC',
  PROJECT_BY_PROJECT_ID__DEPLOYMENT_ID_ASC = 'PROJECT_BY_PROJECT_ID__DEPLOYMENT_ID_ASC',
  PROJECT_BY_PROJECT_ID__DEPLOYMENT_ID_DESC = 'PROJECT_BY_PROJECT_ID__DEPLOYMENT_ID_DESC',
  PROJECT_BY_PROJECT_ID__DEPLOYMENT_METADATA_ASC = 'PROJECT_BY_PROJECT_ID__DEPLOYMENT_METADATA_ASC',
  PROJECT_BY_PROJECT_ID__DEPLOYMENT_METADATA_DESC = 'PROJECT_BY_PROJECT_ID__DEPLOYMENT_METADATA_DESC',
  PROJECT_BY_PROJECT_ID__ID_ASC = 'PROJECT_BY_PROJECT_ID__ID_ASC',
  PROJECT_BY_PROJECT_ID__ID_DESC = 'PROJECT_BY_PROJECT_ID__ID_DESC',
  PROJECT_BY_PROJECT_ID__LAST_EVENT_ASC = 'PROJECT_BY_PROJECT_ID__LAST_EVENT_ASC',
  PROJECT_BY_PROJECT_ID__LAST_EVENT_DESC = 'PROJECT_BY_PROJECT_ID__LAST_EVENT_DESC',
  PROJECT_BY_PROJECT_ID__METADATA_ASC = 'PROJECT_BY_PROJECT_ID__METADATA_ASC',
  PROJECT_BY_PROJECT_ID__METADATA_DESC = 'PROJECT_BY_PROJECT_ID__METADATA_DESC',
  PROJECT_BY_PROJECT_ID__OWNER_ASC = 'PROJECT_BY_PROJECT_ID__OWNER_ASC',
  PROJECT_BY_PROJECT_ID__OWNER_DESC = 'PROJECT_BY_PROJECT_ID__OWNER_DESC',
  PROJECT_BY_PROJECT_ID__TOTAL_ALLOCATION_ASC = 'PROJECT_BY_PROJECT_ID__TOTAL_ALLOCATION_ASC',
  PROJECT_BY_PROJECT_ID__TOTAL_ALLOCATION_DESC = 'PROJECT_BY_PROJECT_ID__TOTAL_ALLOCATION_DESC',
  PROJECT_BY_PROJECT_ID__TOTAL_BOOST_ASC = 'PROJECT_BY_PROJECT_ID__TOTAL_BOOST_ASC',
  PROJECT_BY_PROJECT_ID__TOTAL_BOOST_DESC = 'PROJECT_BY_PROJECT_ID__TOTAL_BOOST_DESC',
  PROJECT_BY_PROJECT_ID__TOTAL_REWARD_ASC = 'PROJECT_BY_PROJECT_ID__TOTAL_REWARD_ASC',
  PROJECT_BY_PROJECT_ID__TOTAL_REWARD_DESC = 'PROJECT_BY_PROJECT_ID__TOTAL_REWARD_DESC',
  PROJECT_BY_PROJECT_ID__TYPE_ASC = 'PROJECT_BY_PROJECT_ID__TYPE_ASC',
  PROJECT_BY_PROJECT_ID__TYPE_DESC = 'PROJECT_BY_PROJECT_ID__TYPE_DESC',
  PROJECT_BY_PROJECT_ID__UPDATED_TIMESTAMP_ASC = 'PROJECT_BY_PROJECT_ID__UPDATED_TIMESTAMP_ASC',
  PROJECT_BY_PROJECT_ID__UPDATED_TIMESTAMP_DESC = 'PROJECT_BY_PROJECT_ID__UPDATED_TIMESTAMP_DESC',
  PROJECT_ID_ASC = 'PROJECT_ID_ASC',
  PROJECT_ID_DESC = 'PROJECT_ID_DESC',
  REFUNDED_ASC = 'REFUNDED_ASC',
  REFUNDED_DESC = 'REFUNDED_DESC',
  SPENT_ASC = 'SPENT_ASC',
  SPENT_DESC = 'SPENT_DESC',
  UPDATE_AT_ASC = 'UPDATE_AT_ASC',
  UPDATE_AT_DESC = 'UPDATE_AT_DESC',
}

export type Controller = Node & {
  readonly __typename: 'Controller';
  readonly controller: Scalars['String']['output'];
  readonly createdBlock: Maybe<Scalars['Int']['output']>;
  readonly id: Scalars['String']['output'];
  /** Reads a single `Indexer` that is related to this `Controller`. */
  readonly indexer: Maybe<Indexer>;
  readonly indexerId: Scalars['String']['output'];
  readonly isActive: Scalars['Boolean']['output'];
  readonly lastEvent: Maybe<Scalars['String']['output']>;
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  readonly nodeId: Scalars['ID']['output'];
};

export type ControllerAggregates = {
  readonly __typename: 'ControllerAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly average: Maybe<ControllerAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly distinctCount: Maybe<ControllerDistinctCountAggregates>;
  readonly keys: Maybe<ReadonlyArray<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly max: Maybe<ControllerMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly min: Maybe<ControllerMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevPopulation: Maybe<ControllerStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevSample: Maybe<ControllerStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly sum: Maybe<ControllerSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly variancePopulation: Maybe<ControllerVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly varianceSample: Maybe<ControllerVarianceSampleAggregates>;
};

/** A filter to be used against aggregates of `Controller` object types. */
export type ControllerAggregatesFilter = {
  /** Mean average aggregate over matching `Controller` objects. */
  readonly average: InputMaybe<ControllerAverageAggregateFilter>;
  /** Distinct count aggregate over matching `Controller` objects. */
  readonly distinctCount: InputMaybe<ControllerDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `Controller` object to be included within the aggregate. */
  readonly filter: InputMaybe<ControllerFilter>;
  /** Maximum aggregate over matching `Controller` objects. */
  readonly max: InputMaybe<ControllerMaxAggregateFilter>;
  /** Minimum aggregate over matching `Controller` objects. */
  readonly min: InputMaybe<ControllerMinAggregateFilter>;
  /** Population standard deviation aggregate over matching `Controller` objects. */
  readonly stddevPopulation: InputMaybe<ControllerStddevPopulationAggregateFilter>;
  /** Sample standard deviation aggregate over matching `Controller` objects. */
  readonly stddevSample: InputMaybe<ControllerStddevSampleAggregateFilter>;
  /** Sum aggregate over matching `Controller` objects. */
  readonly sum: InputMaybe<ControllerSumAggregateFilter>;
  /** Population variance aggregate over matching `Controller` objects. */
  readonly variancePopulation: InputMaybe<ControllerVariancePopulationAggregateFilter>;
  /** Sample variance aggregate over matching `Controller` objects. */
  readonly varianceSample: InputMaybe<ControllerVarianceSampleAggregateFilter>;
};

export type ControllerAverageAggregateFilter = {
  readonly createdBlock: InputMaybe<BigFloatFilter>;
};

export type ControllerAverageAggregates = {
  readonly __typename: 'ControllerAverageAggregates';
  /** Mean average of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
};

export type ControllerDistinctCountAggregateFilter = {
  readonly _blockRange: InputMaybe<BigIntFilter>;
  readonly _id: InputMaybe<BigIntFilter>;
  readonly controller: InputMaybe<BigIntFilter>;
  readonly createdBlock: InputMaybe<BigIntFilter>;
  readonly id: InputMaybe<BigIntFilter>;
  readonly indexerId: InputMaybe<BigIntFilter>;
  readonly isActive: InputMaybe<BigIntFilter>;
  readonly lastEvent: InputMaybe<BigIntFilter>;
};

export type ControllerDistinctCountAggregates = {
  readonly __typename: 'ControllerDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  readonly _blockRange: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  readonly _id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of controller across the matching connection */
  readonly controller: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  readonly id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of indexerId across the matching connection */
  readonly indexerId: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of isActive across the matching connection */
  readonly isActive: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of lastEvent across the matching connection */
  readonly lastEvent: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `Controller` object types. All fields are combined with a logical ‘and.’ */
export type ControllerFilter = {
  /** Checks for all expressions in this list. */
  readonly and: InputMaybe<ReadonlyArray<ControllerFilter>>;
  /** Filter by the object’s `controller` field. */
  readonly controller: InputMaybe<StringFilter>;
  /** Filter by the object’s `createdBlock` field. */
  readonly createdBlock: InputMaybe<IntFilter>;
  /** Filter by the object’s `id` field. */
  readonly id: InputMaybe<StringFilter>;
  /** Filter by the object’s `indexer` relation. */
  readonly indexer: InputMaybe<IndexerFilter>;
  /** Filter by the object’s `indexerId` field. */
  readonly indexerId: InputMaybe<StringFilter>;
  /** Filter by the object’s `isActive` field. */
  readonly isActive: InputMaybe<BooleanFilter>;
  /** Filter by the object’s `lastEvent` field. */
  readonly lastEvent: InputMaybe<StringFilter>;
  /** Negates the expression. */
  readonly not: InputMaybe<ControllerFilter>;
  /** Checks for any expressions in this list. */
  readonly or: InputMaybe<ReadonlyArray<ControllerFilter>>;
};

export type ControllerMaxAggregateFilter = {
  readonly createdBlock: InputMaybe<IntFilter>;
};

export type ControllerMaxAggregates = {
  readonly __typename: 'ControllerMaxAggregates';
  /** Maximum of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['Int']['output']>;
};

export type ControllerMinAggregateFilter = {
  readonly createdBlock: InputMaybe<IntFilter>;
};

export type ControllerMinAggregates = {
  readonly __typename: 'ControllerMinAggregates';
  /** Minimum of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['Int']['output']>;
};

export type ControllerStddevPopulationAggregateFilter = {
  readonly createdBlock: InputMaybe<BigFloatFilter>;
};

export type ControllerStddevPopulationAggregates = {
  readonly __typename: 'ControllerStddevPopulationAggregates';
  /** Population standard deviation of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
};

export type ControllerStddevSampleAggregateFilter = {
  readonly createdBlock: InputMaybe<BigFloatFilter>;
};

export type ControllerStddevSampleAggregates = {
  readonly __typename: 'ControllerStddevSampleAggregates';
  /** Sample standard deviation of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
};

export type ControllerSumAggregateFilter = {
  readonly createdBlock: InputMaybe<BigIntFilter>;
};

export type ControllerSumAggregates = {
  readonly __typename: 'ControllerSumAggregates';
  /** Sum of createdBlock across the matching connection */
  readonly createdBlock: Scalars['BigInt']['output'];
};

export type ControllerVariancePopulationAggregateFilter = {
  readonly createdBlock: InputMaybe<BigFloatFilter>;
};

export type ControllerVariancePopulationAggregates = {
  readonly __typename: 'ControllerVariancePopulationAggregates';
  /** Population variance of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
};

export type ControllerVarianceSampleAggregateFilter = {
  readonly createdBlock: InputMaybe<BigFloatFilter>;
};

export type ControllerVarianceSampleAggregates = {
  readonly __typename: 'ControllerVarianceSampleAggregates';
  /** Sample variance of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `Controller` values. */
export type ControllersConnection = {
  readonly __typename: 'ControllersConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<ControllerAggregates>;
  /** A list of edges which contains the `Controller` and cursor to aid in pagination. */
  readonly edges: ReadonlyArray<ControllersEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<ControllerAggregates>>;
  /** A list of `Controller` objects. */
  readonly nodes: ReadonlyArray<Maybe<Controller>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Controller` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Controller` values. */
export type ControllersConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<ControllersGroupBy>;
  having: InputMaybe<ControllersHavingInput>;
};

/** A `Controller` edge in the connection. */
export type ControllersEdge = {
  readonly __typename: 'ControllersEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `Controller` at the end of the edge. */
  readonly node: Maybe<Controller>;
};

/** Grouping methods for `Controller` for usage during aggregation. */
export enum ControllersGroupBy {
  CONTROLLER = 'CONTROLLER',
  CREATED_BLOCK = 'CREATED_BLOCK',
  ID = 'ID',
  INDEXER_ID = 'INDEXER_ID',
  IS_ACTIVE = 'IS_ACTIVE',
  LAST_EVENT = 'LAST_EVENT',
}

export type ControllersHavingAverageInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
};

export type ControllersHavingDistinctCountInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
};

/** Conditions for `Controller` aggregates. */
export type ControllersHavingInput = {
  readonly AND: InputMaybe<ReadonlyArray<ControllersHavingInput>>;
  readonly OR: InputMaybe<ReadonlyArray<ControllersHavingInput>>;
  readonly average: InputMaybe<ControllersHavingAverageInput>;
  readonly distinctCount: InputMaybe<ControllersHavingDistinctCountInput>;
  readonly max: InputMaybe<ControllersHavingMaxInput>;
  readonly min: InputMaybe<ControllersHavingMinInput>;
  readonly stddevPopulation: InputMaybe<ControllersHavingStddevPopulationInput>;
  readonly stddevSample: InputMaybe<ControllersHavingStddevSampleInput>;
  readonly sum: InputMaybe<ControllersHavingSumInput>;
  readonly variancePopulation: InputMaybe<ControllersHavingVariancePopulationInput>;
  readonly varianceSample: InputMaybe<ControllersHavingVarianceSampleInput>;
};

export type ControllersHavingMaxInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
};

export type ControllersHavingMinInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
};

export type ControllersHavingStddevPopulationInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
};

export type ControllersHavingStddevSampleInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
};

export type ControllersHavingSumInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
};

export type ControllersHavingVariancePopulationInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
};

export type ControllersHavingVarianceSampleInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
};

/** Methods to use when ordering `Controller`. */
export enum ControllersOrderBy {
  CONTROLLER_ASC = 'CONTROLLER_ASC',
  CONTROLLER_DESC = 'CONTROLLER_DESC',
  CREATED_BLOCK_ASC = 'CREATED_BLOCK_ASC',
  CREATED_BLOCK_DESC = 'CREATED_BLOCK_DESC',
  ID_ASC = 'ID_ASC',
  ID_DESC = 'ID_DESC',
  INDEXER_BY_INDEXER_ID__ACTIVE_ASC = 'INDEXER_BY_INDEXER_ID__ACTIVE_ASC',
  INDEXER_BY_INDEXER_ID__ACTIVE_DESC = 'INDEXER_BY_INDEXER_ID__ACTIVE_DESC',
  INDEXER_BY_INDEXER_ID__CAPACITY_ASC = 'INDEXER_BY_INDEXER_ID__CAPACITY_ASC',
  INDEXER_BY_INDEXER_ID__CAPACITY_DESC = 'INDEXER_BY_INDEXER_ID__CAPACITY_DESC',
  INDEXER_BY_INDEXER_ID__COMMISSION_ASC = 'INDEXER_BY_INDEXER_ID__COMMISSION_ASC',
  INDEXER_BY_INDEXER_ID__COMMISSION_DESC = 'INDEXER_BY_INDEXER_ID__COMMISSION_DESC',
  INDEXER_BY_INDEXER_ID__CONTROLLER_ASC = 'INDEXER_BY_INDEXER_ID__CONTROLLER_ASC',
  INDEXER_BY_INDEXER_ID__CONTROLLER_DESC = 'INDEXER_BY_INDEXER_ID__CONTROLLER_DESC',
  INDEXER_BY_INDEXER_ID__CREATED_BLOCK_ASC = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_ASC',
  INDEXER_BY_INDEXER_ID__CREATED_BLOCK_DESC = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_DESC',
  INDEXER_BY_INDEXER_ID__ID_ASC = 'INDEXER_BY_INDEXER_ID__ID_ASC',
  INDEXER_BY_INDEXER_ID__ID_DESC = 'INDEXER_BY_INDEXER_ID__ID_DESC',
  INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_ASC = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_ASC',
  INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_DESC = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_DESC',
  INDEXER_BY_INDEXER_ID__LAST_EVENT_ASC = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_ASC',
  INDEXER_BY_INDEXER_ID__LAST_EVENT_DESC = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_DESC',
  INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_ASC = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_ASC',
  INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_DESC = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_DESC',
  INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_ASC = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_ASC',
  INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_DESC = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_DESC',
  INDEXER_BY_INDEXER_ID__METADATA_ASC = 'INDEXER_BY_INDEXER_ID__METADATA_ASC',
  INDEXER_BY_INDEXER_ID__METADATA_DESC = 'INDEXER_BY_INDEXER_ID__METADATA_DESC',
  INDEXER_BY_INDEXER_ID__SELF_STAKE_ASC = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_ASC',
  INDEXER_BY_INDEXER_ID__SELF_STAKE_DESC = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_DESC',
  INDEXER_BY_INDEXER_ID__TOTAL_STAKE_ASC = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_ASC',
  INDEXER_BY_INDEXER_ID__TOTAL_STAKE_DESC = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_DESC',
  INDEXER_ID_ASC = 'INDEXER_ID_ASC',
  INDEXER_ID_DESC = 'INDEXER_ID_DESC',
  IS_ACTIVE_ASC = 'IS_ACTIVE_ASC',
  IS_ACTIVE_DESC = 'IS_ACTIVE_DESC',
  LAST_EVENT_ASC = 'LAST_EVENT_ASC',
  LAST_EVENT_DESC = 'LAST_EVENT_DESC',
  NATURAL = 'NATURAL',
  PRIMARY_KEY_ASC = 'PRIMARY_KEY_ASC',
  PRIMARY_KEY_DESC = 'PRIMARY_KEY_DESC',
}

/** A filter to be used against Datetime fields. All fields are combined with a logical ‘and.’ */
export type DatetimeFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  readonly distinctFrom: InputMaybe<Scalars['Datetime']['input']>;
  /** Equal to the specified value. */
  readonly equalTo: InputMaybe<Scalars['Datetime']['input']>;
  /** Greater than the specified value. */
  readonly greaterThan: InputMaybe<Scalars['Datetime']['input']>;
  /** Greater than or equal to the specified value. */
  readonly greaterThanOrEqualTo: InputMaybe<Scalars['Datetime']['input']>;
  /** Included in the specified list. */
  readonly in: InputMaybe<ReadonlyArray<Scalars['Datetime']['input']>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  readonly isNull: InputMaybe<Scalars['Boolean']['input']>;
  /** Less than the specified value. */
  readonly lessThan: InputMaybe<Scalars['Datetime']['input']>;
  /** Less than or equal to the specified value. */
  readonly lessThanOrEqualTo: InputMaybe<Scalars['Datetime']['input']>;
  /** Equal to the specified value, treating null like an ordinary value. */
  readonly notDistinctFrom: InputMaybe<Scalars['Datetime']['input']>;
  /** Not equal to the specified value. */
  readonly notEqualTo: InputMaybe<Scalars['Datetime']['input']>;
  /** Not included in the specified list. */
  readonly notIn: InputMaybe<ReadonlyArray<Scalars['Datetime']['input']>>;
};

export type Delegation = Node & {
  readonly __typename: 'Delegation';
  readonly amount: Scalars['JSON']['output'];
  readonly createdBlock: Maybe<Scalars['Int']['output']>;
  /** Reads a single `Delegator` that is related to this `Delegation`. */
  readonly delegator: Maybe<Delegator>;
  readonly delegatorId: Scalars['String']['output'];
  readonly exitEra: Maybe<Scalars['Int']['output']>;
  readonly id: Scalars['String']['output'];
  /** Reads a single `Indexer` that is related to this `Delegation`. */
  readonly indexer: Maybe<Indexer>;
  readonly indexerId: Scalars['String']['output'];
  readonly lastEvent: Maybe<Scalars['String']['output']>;
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  readonly nodeId: Scalars['ID']['output'];
};

export type DelegationAggregates = {
  readonly __typename: 'DelegationAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly average: Maybe<DelegationAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly distinctCount: Maybe<DelegationDistinctCountAggregates>;
  readonly keys: Maybe<ReadonlyArray<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly max: Maybe<DelegationMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly min: Maybe<DelegationMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevPopulation: Maybe<DelegationStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevSample: Maybe<DelegationStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly sum: Maybe<DelegationSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly variancePopulation: Maybe<DelegationVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly varianceSample: Maybe<DelegationVarianceSampleAggregates>;
};

/** A filter to be used against aggregates of `Delegation` object types. */
export type DelegationAggregatesFilter = {
  /** Mean average aggregate over matching `Delegation` objects. */
  readonly average: InputMaybe<DelegationAverageAggregateFilter>;
  /** Distinct count aggregate over matching `Delegation` objects. */
  readonly distinctCount: InputMaybe<DelegationDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `Delegation` object to be included within the aggregate. */
  readonly filter: InputMaybe<DelegationFilter>;
  /** Maximum aggregate over matching `Delegation` objects. */
  readonly max: InputMaybe<DelegationMaxAggregateFilter>;
  /** Minimum aggregate over matching `Delegation` objects. */
  readonly min: InputMaybe<DelegationMinAggregateFilter>;
  /** Population standard deviation aggregate over matching `Delegation` objects. */
  readonly stddevPopulation: InputMaybe<DelegationStddevPopulationAggregateFilter>;
  /** Sample standard deviation aggregate over matching `Delegation` objects. */
  readonly stddevSample: InputMaybe<DelegationStddevSampleAggregateFilter>;
  /** Sum aggregate over matching `Delegation` objects. */
  readonly sum: InputMaybe<DelegationSumAggregateFilter>;
  /** Population variance aggregate over matching `Delegation` objects. */
  readonly variancePopulation: InputMaybe<DelegationVariancePopulationAggregateFilter>;
  /** Sample variance aggregate over matching `Delegation` objects. */
  readonly varianceSample: InputMaybe<DelegationVarianceSampleAggregateFilter>;
};

export type DelegationAverageAggregateFilter = {
  readonly createdBlock: InputMaybe<BigFloatFilter>;
  readonly exitEra: InputMaybe<BigFloatFilter>;
};

export type DelegationAverageAggregates = {
  readonly __typename: 'DelegationAverageAggregates';
  /** Mean average of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of exitEra across the matching connection */
  readonly exitEra: Maybe<Scalars['BigFloat']['output']>;
};

export type DelegationDistinctCountAggregateFilter = {
  readonly _blockRange: InputMaybe<BigIntFilter>;
  readonly _id: InputMaybe<BigIntFilter>;
  readonly amount: InputMaybe<BigIntFilter>;
  readonly createdBlock: InputMaybe<BigIntFilter>;
  readonly delegatorId: InputMaybe<BigIntFilter>;
  readonly exitEra: InputMaybe<BigIntFilter>;
  readonly id: InputMaybe<BigIntFilter>;
  readonly indexerId: InputMaybe<BigIntFilter>;
  readonly lastEvent: InputMaybe<BigIntFilter>;
};

export type DelegationDistinctCountAggregates = {
  readonly __typename: 'DelegationDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  readonly _blockRange: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  readonly _id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of amount across the matching connection */
  readonly amount: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of delegatorId across the matching connection */
  readonly delegatorId: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of exitEra across the matching connection */
  readonly exitEra: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  readonly id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of indexerId across the matching connection */
  readonly indexerId: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of lastEvent across the matching connection */
  readonly lastEvent: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `Delegation` object types. All fields are combined with a logical ‘and.’ */
export type DelegationFilter = {
  /** Filter by the object’s `amount` field. */
  readonly amount: InputMaybe<JsonFilter>;
  /** Checks for all expressions in this list. */
  readonly and: InputMaybe<ReadonlyArray<DelegationFilter>>;
  /** Filter by the object’s `createdBlock` field. */
  readonly createdBlock: InputMaybe<IntFilter>;
  /** Filter by the object’s `delegator` relation. */
  readonly delegator: InputMaybe<DelegatorFilter>;
  /** Filter by the object’s `delegatorId` field. */
  readonly delegatorId: InputMaybe<StringFilter>;
  /** Filter by the object’s `exitEra` field. */
  readonly exitEra: InputMaybe<IntFilter>;
  /** Filter by the object’s `id` field. */
  readonly id: InputMaybe<StringFilter>;
  /** Filter by the object’s `indexer` relation. */
  readonly indexer: InputMaybe<IndexerFilter>;
  /** Filter by the object’s `indexerId` field. */
  readonly indexerId: InputMaybe<StringFilter>;
  /** Filter by the object’s `lastEvent` field. */
  readonly lastEvent: InputMaybe<StringFilter>;
  /** Negates the expression. */
  readonly not: InputMaybe<DelegationFilter>;
  /** Checks for any expressions in this list. */
  readonly or: InputMaybe<ReadonlyArray<DelegationFilter>>;
};

export type DelegationMaxAggregateFilter = {
  readonly createdBlock: InputMaybe<IntFilter>;
  readonly exitEra: InputMaybe<IntFilter>;
};

export type DelegationMaxAggregates = {
  readonly __typename: 'DelegationMaxAggregates';
  /** Maximum of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['Int']['output']>;
  /** Maximum of exitEra across the matching connection */
  readonly exitEra: Maybe<Scalars['Int']['output']>;
};

export type DelegationMinAggregateFilter = {
  readonly createdBlock: InputMaybe<IntFilter>;
  readonly exitEra: InputMaybe<IntFilter>;
};

export type DelegationMinAggregates = {
  readonly __typename: 'DelegationMinAggregates';
  /** Minimum of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['Int']['output']>;
  /** Minimum of exitEra across the matching connection */
  readonly exitEra: Maybe<Scalars['Int']['output']>;
};

export type DelegationStddevPopulationAggregateFilter = {
  readonly createdBlock: InputMaybe<BigFloatFilter>;
  readonly exitEra: InputMaybe<BigFloatFilter>;
};

export type DelegationStddevPopulationAggregates = {
  readonly __typename: 'DelegationStddevPopulationAggregates';
  /** Population standard deviation of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of exitEra across the matching connection */
  readonly exitEra: Maybe<Scalars['BigFloat']['output']>;
};

export type DelegationStddevSampleAggregateFilter = {
  readonly createdBlock: InputMaybe<BigFloatFilter>;
  readonly exitEra: InputMaybe<BigFloatFilter>;
};

export type DelegationStddevSampleAggregates = {
  readonly __typename: 'DelegationStddevSampleAggregates';
  /** Sample standard deviation of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of exitEra across the matching connection */
  readonly exitEra: Maybe<Scalars['BigFloat']['output']>;
};

export type DelegationSumAggregateFilter = {
  readonly createdBlock: InputMaybe<BigIntFilter>;
  readonly exitEra: InputMaybe<BigIntFilter>;
};

export type DelegationSumAggregates = {
  readonly __typename: 'DelegationSumAggregates';
  /** Sum of createdBlock across the matching connection */
  readonly createdBlock: Scalars['BigInt']['output'];
  /** Sum of exitEra across the matching connection */
  readonly exitEra: Scalars['BigInt']['output'];
};

export type DelegationVariancePopulationAggregateFilter = {
  readonly createdBlock: InputMaybe<BigFloatFilter>;
  readonly exitEra: InputMaybe<BigFloatFilter>;
};

export type DelegationVariancePopulationAggregates = {
  readonly __typename: 'DelegationVariancePopulationAggregates';
  /** Population variance of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of exitEra across the matching connection */
  readonly exitEra: Maybe<Scalars['BigFloat']['output']>;
};

export type DelegationVarianceSampleAggregateFilter = {
  readonly createdBlock: InputMaybe<BigFloatFilter>;
  readonly exitEra: InputMaybe<BigFloatFilter>;
};

export type DelegationVarianceSampleAggregates = {
  readonly __typename: 'DelegationVarianceSampleAggregates';
  /** Sample variance of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of exitEra across the matching connection */
  readonly exitEra: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `Delegation` values. */
export type DelegationsConnection = {
  readonly __typename: 'DelegationsConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<DelegationAggregates>;
  /** A list of edges which contains the `Delegation` and cursor to aid in pagination. */
  readonly edges: ReadonlyArray<DelegationsEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<DelegationAggregates>>;
  /** A list of `Delegation` objects. */
  readonly nodes: ReadonlyArray<Maybe<Delegation>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Delegation` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Delegation` values. */
export type DelegationsConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<DelegationsGroupBy>;
  having: InputMaybe<DelegationsHavingInput>;
};

/** A `Delegation` edge in the connection. */
export type DelegationsEdge = {
  readonly __typename: 'DelegationsEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `Delegation` at the end of the edge. */
  readonly node: Maybe<Delegation>;
};

/** Grouping methods for `Delegation` for usage during aggregation. */
export enum DelegationsGroupBy {
  AMOUNT = 'AMOUNT',
  CREATED_BLOCK = 'CREATED_BLOCK',
  DELEGATOR_ID = 'DELEGATOR_ID',
  EXIT_ERA = 'EXIT_ERA',
  ID = 'ID',
  INDEXER_ID = 'INDEXER_ID',
  LAST_EVENT = 'LAST_EVENT',
}

export type DelegationsHavingAverageInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly exitEra: InputMaybe<HavingIntFilter>;
};

export type DelegationsHavingDistinctCountInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly exitEra: InputMaybe<HavingIntFilter>;
};

/** Conditions for `Delegation` aggregates. */
export type DelegationsHavingInput = {
  readonly AND: InputMaybe<ReadonlyArray<DelegationsHavingInput>>;
  readonly OR: InputMaybe<ReadonlyArray<DelegationsHavingInput>>;
  readonly average: InputMaybe<DelegationsHavingAverageInput>;
  readonly distinctCount: InputMaybe<DelegationsHavingDistinctCountInput>;
  readonly max: InputMaybe<DelegationsHavingMaxInput>;
  readonly min: InputMaybe<DelegationsHavingMinInput>;
  readonly stddevPopulation: InputMaybe<DelegationsHavingStddevPopulationInput>;
  readonly stddevSample: InputMaybe<DelegationsHavingStddevSampleInput>;
  readonly sum: InputMaybe<DelegationsHavingSumInput>;
  readonly variancePopulation: InputMaybe<DelegationsHavingVariancePopulationInput>;
  readonly varianceSample: InputMaybe<DelegationsHavingVarianceSampleInput>;
};

export type DelegationsHavingMaxInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly exitEra: InputMaybe<HavingIntFilter>;
};

export type DelegationsHavingMinInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly exitEra: InputMaybe<HavingIntFilter>;
};

export type DelegationsHavingStddevPopulationInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly exitEra: InputMaybe<HavingIntFilter>;
};

export type DelegationsHavingStddevSampleInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly exitEra: InputMaybe<HavingIntFilter>;
};

export type DelegationsHavingSumInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly exitEra: InputMaybe<HavingIntFilter>;
};

export type DelegationsHavingVariancePopulationInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly exitEra: InputMaybe<HavingIntFilter>;
};

export type DelegationsHavingVarianceSampleInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly exitEra: InputMaybe<HavingIntFilter>;
};

/** Methods to use when ordering `Delegation`. */
export enum DelegationsOrderBy {
  AMOUNT_ASC = 'AMOUNT_ASC',
  AMOUNT_DESC = 'AMOUNT_DESC',
  CREATED_BLOCK_ASC = 'CREATED_BLOCK_ASC',
  CREATED_BLOCK_DESC = 'CREATED_BLOCK_DESC',
  DELEGATOR_BY_DELEGATOR_ID__CREATED_BLOCK_ASC = 'DELEGATOR_BY_DELEGATOR_ID__CREATED_BLOCK_ASC',
  DELEGATOR_BY_DELEGATOR_ID__CREATED_BLOCK_DESC = 'DELEGATOR_BY_DELEGATOR_ID__CREATED_BLOCK_DESC',
  DELEGATOR_BY_DELEGATOR_ID__EXIT_ERA_ASC = 'DELEGATOR_BY_DELEGATOR_ID__EXIT_ERA_ASC',
  DELEGATOR_BY_DELEGATOR_ID__EXIT_ERA_DESC = 'DELEGATOR_BY_DELEGATOR_ID__EXIT_ERA_DESC',
  DELEGATOR_BY_DELEGATOR_ID__ID_ASC = 'DELEGATOR_BY_DELEGATOR_ID__ID_ASC',
  DELEGATOR_BY_DELEGATOR_ID__ID_DESC = 'DELEGATOR_BY_DELEGATOR_ID__ID_DESC',
  DELEGATOR_BY_DELEGATOR_ID__LAST_EVENT_ASC = 'DELEGATOR_BY_DELEGATOR_ID__LAST_EVENT_ASC',
  DELEGATOR_BY_DELEGATOR_ID__LAST_EVENT_DESC = 'DELEGATOR_BY_DELEGATOR_ID__LAST_EVENT_DESC',
  DELEGATOR_BY_DELEGATOR_ID__START_ERA_ASC = 'DELEGATOR_BY_DELEGATOR_ID__START_ERA_ASC',
  DELEGATOR_BY_DELEGATOR_ID__START_ERA_DESC = 'DELEGATOR_BY_DELEGATOR_ID__START_ERA_DESC',
  DELEGATOR_BY_DELEGATOR_ID__TOTAL_DELEGATIONS_ASC = 'DELEGATOR_BY_DELEGATOR_ID__TOTAL_DELEGATIONS_ASC',
  DELEGATOR_BY_DELEGATOR_ID__TOTAL_DELEGATIONS_DESC = 'DELEGATOR_BY_DELEGATOR_ID__TOTAL_DELEGATIONS_DESC',
  DELEGATOR_ID_ASC = 'DELEGATOR_ID_ASC',
  DELEGATOR_ID_DESC = 'DELEGATOR_ID_DESC',
  EXIT_ERA_ASC = 'EXIT_ERA_ASC',
  EXIT_ERA_DESC = 'EXIT_ERA_DESC',
  ID_ASC = 'ID_ASC',
  ID_DESC = 'ID_DESC',
  INDEXER_BY_INDEXER_ID__ACTIVE_ASC = 'INDEXER_BY_INDEXER_ID__ACTIVE_ASC',
  INDEXER_BY_INDEXER_ID__ACTIVE_DESC = 'INDEXER_BY_INDEXER_ID__ACTIVE_DESC',
  INDEXER_BY_INDEXER_ID__CAPACITY_ASC = 'INDEXER_BY_INDEXER_ID__CAPACITY_ASC',
  INDEXER_BY_INDEXER_ID__CAPACITY_DESC = 'INDEXER_BY_INDEXER_ID__CAPACITY_DESC',
  INDEXER_BY_INDEXER_ID__COMMISSION_ASC = 'INDEXER_BY_INDEXER_ID__COMMISSION_ASC',
  INDEXER_BY_INDEXER_ID__COMMISSION_DESC = 'INDEXER_BY_INDEXER_ID__COMMISSION_DESC',
  INDEXER_BY_INDEXER_ID__CONTROLLER_ASC = 'INDEXER_BY_INDEXER_ID__CONTROLLER_ASC',
  INDEXER_BY_INDEXER_ID__CONTROLLER_DESC = 'INDEXER_BY_INDEXER_ID__CONTROLLER_DESC',
  INDEXER_BY_INDEXER_ID__CREATED_BLOCK_ASC = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_ASC',
  INDEXER_BY_INDEXER_ID__CREATED_BLOCK_DESC = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_DESC',
  INDEXER_BY_INDEXER_ID__ID_ASC = 'INDEXER_BY_INDEXER_ID__ID_ASC',
  INDEXER_BY_INDEXER_ID__ID_DESC = 'INDEXER_BY_INDEXER_ID__ID_DESC',
  INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_ASC = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_ASC',
  INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_DESC = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_DESC',
  INDEXER_BY_INDEXER_ID__LAST_EVENT_ASC = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_ASC',
  INDEXER_BY_INDEXER_ID__LAST_EVENT_DESC = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_DESC',
  INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_ASC = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_ASC',
  INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_DESC = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_DESC',
  INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_ASC = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_ASC',
  INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_DESC = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_DESC',
  INDEXER_BY_INDEXER_ID__METADATA_ASC = 'INDEXER_BY_INDEXER_ID__METADATA_ASC',
  INDEXER_BY_INDEXER_ID__METADATA_DESC = 'INDEXER_BY_INDEXER_ID__METADATA_DESC',
  INDEXER_BY_INDEXER_ID__SELF_STAKE_ASC = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_ASC',
  INDEXER_BY_INDEXER_ID__SELF_STAKE_DESC = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_DESC',
  INDEXER_BY_INDEXER_ID__TOTAL_STAKE_ASC = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_ASC',
  INDEXER_BY_INDEXER_ID__TOTAL_STAKE_DESC = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_DESC',
  INDEXER_ID_ASC = 'INDEXER_ID_ASC',
  INDEXER_ID_DESC = 'INDEXER_ID_DESC',
  LAST_EVENT_ASC = 'LAST_EVENT_ASC',
  LAST_EVENT_DESC = 'LAST_EVENT_DESC',
  NATURAL = 'NATURAL',
  PRIMARY_KEY_ASC = 'PRIMARY_KEY_ASC',
  PRIMARY_KEY_DESC = 'PRIMARY_KEY_DESC',
}

export type Delegator = Node & {
  readonly __typename: 'Delegator';
  /** Reads and enables pagination through a set of `Reward`. */
  readonly claimedRewards: RewardsConnection;
  readonly createdBlock: Maybe<Scalars['Int']['output']>;
  /** Reads and enables pagination through a set of `Delegation`. */
  readonly delegations: DelegationsConnection;
  /** Reads and enables pagination through a set of `EraDelegatorApy`. */
  readonly eraDelegatorApies: EraDelegatorApiesConnection;
  /** Reads and enables pagination through a set of `EraDelegatorIndexerApy`. */
  readonly eraDelegatorIndexerApies: EraDelegatorIndexerApiesConnection;
  /** Reads and enables pagination through a set of `EraReward`. */
  readonly eraRewards: EraRewardsConnection;
  /** Reads and enables pagination through a set of `EraStake`. */
  readonly eraStakes: EraStakesConnection;
  /** Reads and enables pagination through a set of `Era`. */
  readonly erasByEraRewardDelegatorIdAndEraId: DelegatorErasByEraRewardDelegatorIdAndEraIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Era`. */
  readonly erasByEraStakeDelegatorIdAndEraId: DelegatorErasByEraStakeDelegatorIdAndEraIdManyToManyConnection;
  readonly exitEra: Scalars['Int']['output'];
  readonly id: Scalars['String']['output'];
  /** Reads and enables pagination through a set of `Indexer`. */
  readonly indexersByDelegationDelegatorIdAndIndexerId: DelegatorIndexersByDelegationDelegatorIdAndIndexerIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Indexer`. */
  readonly indexersByEraDelegatorIndexerApyDelegatorIdAndIndexerId: DelegatorIndexersByEraDelegatorIndexerApyDelegatorIdAndIndexerIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Indexer`. */
  readonly indexersByEraRewardDelegatorIdAndIndexerId: DelegatorIndexersByEraRewardDelegatorIdAndIndexerIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Indexer`. */
  readonly indexersByEraStakeDelegatorIdAndIndexerId: DelegatorIndexersByEraStakeDelegatorIdAndIndexerIdManyToManyConnection;
  readonly lastEvent: Maybe<Scalars['String']['output']>;
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  readonly nodeId: Scalars['ID']['output'];
  readonly startEra: Scalars['Int']['output'];
  readonly totalDelegations: Scalars['JSON']['output'];
  /** Reads and enables pagination through a set of `UnclaimedReward`. */
  readonly unclaimedRewards: UnclaimedRewardsConnection;
};

export type DelegatorClaimedRewardsArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Rewards_Distinct_Enum>>>;
  filter: InputMaybe<RewardFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<RewardsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type DelegatorDelegationsArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Delegations_Distinct_Enum>>>;
  filter: InputMaybe<DelegationFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<DelegationsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type DelegatorEraDelegatorApiesArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Era_Delegator_Apies_Distinct_Enum>>>;
  filter: InputMaybe<EraDelegatorApyFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<EraDelegatorApiesOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type DelegatorEraDelegatorIndexerApiesArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Era_Delegator_Indexer_Apies_Distinct_Enum>>>;
  filter: InputMaybe<EraDelegatorIndexerApyFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<EraDelegatorIndexerApiesOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type DelegatorEraRewardsArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Era_Rewards_Distinct_Enum>>>;
  filter: InputMaybe<EraRewardFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<EraRewardsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type DelegatorEraStakesArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Era_Stakes_Distinct_Enum>>>;
  filter: InputMaybe<EraStakeFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<EraStakesOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type DelegatorErasByEraRewardDelegatorIdAndEraIdArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Eras_Distinct_Enum>>>;
  filter: InputMaybe<EraFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<ErasOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type DelegatorErasByEraStakeDelegatorIdAndEraIdArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Eras_Distinct_Enum>>>;
  filter: InputMaybe<EraFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<ErasOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type DelegatorIndexersByDelegationDelegatorIdAndIndexerIdArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexers_Distinct_Enum>>>;
  filter: InputMaybe<IndexerFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexersOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type DelegatorIndexersByEraDelegatorIndexerApyDelegatorIdAndIndexerIdArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexers_Distinct_Enum>>>;
  filter: InputMaybe<IndexerFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexersOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type DelegatorIndexersByEraRewardDelegatorIdAndIndexerIdArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexers_Distinct_Enum>>>;
  filter: InputMaybe<IndexerFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexersOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type DelegatorIndexersByEraStakeDelegatorIdAndIndexerIdArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexers_Distinct_Enum>>>;
  filter: InputMaybe<IndexerFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexersOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type DelegatorUnclaimedRewardsArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Unclaimed_Rewards_Distinct_Enum>>>;
  filter: InputMaybe<UnclaimedRewardFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<UnclaimedRewardsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type DelegatorAggregates = {
  readonly __typename: 'DelegatorAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly average: Maybe<DelegatorAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly distinctCount: Maybe<DelegatorDistinctCountAggregates>;
  readonly keys: Maybe<ReadonlyArray<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly max: Maybe<DelegatorMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly min: Maybe<DelegatorMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevPopulation: Maybe<DelegatorStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevSample: Maybe<DelegatorStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly sum: Maybe<DelegatorSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly variancePopulation: Maybe<DelegatorVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly varianceSample: Maybe<DelegatorVarianceSampleAggregates>;
};

export type DelegatorAverageAggregates = {
  readonly __typename: 'DelegatorAverageAggregates';
  /** Mean average of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of exitEra across the matching connection */
  readonly exitEra: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of startEra across the matching connection */
  readonly startEra: Maybe<Scalars['BigFloat']['output']>;
};

export type DelegatorDistinctCountAggregates = {
  readonly __typename: 'DelegatorDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  readonly _blockRange: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  readonly _id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of exitEra across the matching connection */
  readonly exitEra: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  readonly id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of lastEvent across the matching connection */
  readonly lastEvent: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of startEra across the matching connection */
  readonly startEra: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of totalDelegations across the matching connection */
  readonly totalDelegations: Maybe<Scalars['BigInt']['output']>;
};

/** A connection to a list of `Era` values, with data from `EraReward`. */
export type DelegatorErasByEraRewardDelegatorIdAndEraIdManyToManyConnection = {
  readonly __typename: 'DelegatorErasByEraRewardDelegatorIdAndEraIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<EraAggregates>;
  /** A list of edges which contains the `Era`, info from the `EraReward`, and the cursor to aid in pagination. */
  readonly edges: ReadonlyArray<DelegatorErasByEraRewardDelegatorIdAndEraIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<EraAggregates>>;
  /** A list of `Era` objects. */
  readonly nodes: ReadonlyArray<Maybe<Era>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Era` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Era` values, with data from `EraReward`. */
export type DelegatorErasByEraRewardDelegatorIdAndEraIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<ErasGroupBy>;
  having: InputMaybe<ErasHavingInput>;
};

/** A `Era` edge in the connection, with data from `EraReward`. */
export type DelegatorErasByEraRewardDelegatorIdAndEraIdManyToManyEdge = {
  readonly __typename: 'DelegatorErasByEraRewardDelegatorIdAndEraIdManyToManyEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `EraReward`. */
  readonly eraRewards: EraRewardsConnection;
  /** The `Era` at the end of the edge. */
  readonly node: Maybe<Era>;
};

/** A `Era` edge in the connection, with data from `EraReward`. */
export type DelegatorErasByEraRewardDelegatorIdAndEraIdManyToManyEdgeEraRewardsArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Era_Rewards_Distinct_Enum>>>;
  filter: InputMaybe<EraRewardFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<EraRewardsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** A connection to a list of `Era` values, with data from `EraStake`. */
export type DelegatorErasByEraStakeDelegatorIdAndEraIdManyToManyConnection = {
  readonly __typename: 'DelegatorErasByEraStakeDelegatorIdAndEraIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<EraAggregates>;
  /** A list of edges which contains the `Era`, info from the `EraStake`, and the cursor to aid in pagination. */
  readonly edges: ReadonlyArray<DelegatorErasByEraStakeDelegatorIdAndEraIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<EraAggregates>>;
  /** A list of `Era` objects. */
  readonly nodes: ReadonlyArray<Maybe<Era>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Era` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Era` values, with data from `EraStake`. */
export type DelegatorErasByEraStakeDelegatorIdAndEraIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<ErasGroupBy>;
  having: InputMaybe<ErasHavingInput>;
};

/** A `Era` edge in the connection, with data from `EraStake`. */
export type DelegatorErasByEraStakeDelegatorIdAndEraIdManyToManyEdge = {
  readonly __typename: 'DelegatorErasByEraStakeDelegatorIdAndEraIdManyToManyEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `EraStake`. */
  readonly eraStakes: EraStakesConnection;
  /** The `Era` at the end of the edge. */
  readonly node: Maybe<Era>;
};

/** A `Era` edge in the connection, with data from `EraStake`. */
export type DelegatorErasByEraStakeDelegatorIdAndEraIdManyToManyEdgeEraStakesArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Era_Stakes_Distinct_Enum>>>;
  filter: InputMaybe<EraStakeFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<EraStakesOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** A filter to be used against `Delegator` object types. All fields are combined with a logical ‘and.’ */
export type DelegatorFilter = {
  /** Checks for all expressions in this list. */
  readonly and: InputMaybe<ReadonlyArray<DelegatorFilter>>;
  /** Filter by the object’s `claimedRewards` relation. */
  readonly claimedRewards: InputMaybe<DelegatorToManyRewardFilter>;
  /** Some related `claimedRewards` exist. */
  readonly claimedRewardsExist: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `createdBlock` field. */
  readonly createdBlock: InputMaybe<IntFilter>;
  /** Filter by the object’s `delegations` relation. */
  readonly delegations: InputMaybe<DelegatorToManyDelegationFilter>;
  /** Some related `delegations` exist. */
  readonly delegationsExist: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `eraDelegatorApies` relation. */
  readonly eraDelegatorApies: InputMaybe<DelegatorToManyEraDelegatorApyFilter>;
  /** Some related `eraDelegatorApies` exist. */
  readonly eraDelegatorApiesExist: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `eraDelegatorIndexerApies` relation. */
  readonly eraDelegatorIndexerApies: InputMaybe<DelegatorToManyEraDelegatorIndexerApyFilter>;
  /** Some related `eraDelegatorIndexerApies` exist. */
  readonly eraDelegatorIndexerApiesExist: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `eraRewards` relation. */
  readonly eraRewards: InputMaybe<DelegatorToManyEraRewardFilter>;
  /** Some related `eraRewards` exist. */
  readonly eraRewardsExist: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `eraStakes` relation. */
  readonly eraStakes: InputMaybe<DelegatorToManyEraStakeFilter>;
  /** Some related `eraStakes` exist. */
  readonly eraStakesExist: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `exitEra` field. */
  readonly exitEra: InputMaybe<IntFilter>;
  /** Filter by the object’s `id` field. */
  readonly id: InputMaybe<StringFilter>;
  /** Filter by the object’s `lastEvent` field. */
  readonly lastEvent: InputMaybe<StringFilter>;
  /** Negates the expression. */
  readonly not: InputMaybe<DelegatorFilter>;
  /** Checks for any expressions in this list. */
  readonly or: InputMaybe<ReadonlyArray<DelegatorFilter>>;
  /** Filter by the object’s `startEra` field. */
  readonly startEra: InputMaybe<IntFilter>;
  /** Filter by the object’s `totalDelegations` field. */
  readonly totalDelegations: InputMaybe<JsonFilter>;
  /** Filter by the object’s `unclaimedRewards` relation. */
  readonly unclaimedRewards: InputMaybe<DelegatorToManyUnclaimedRewardFilter>;
  /** Some related `unclaimedRewards` exist. */
  readonly unclaimedRewardsExist: InputMaybe<Scalars['Boolean']['input']>;
};

/** A connection to a list of `Indexer` values, with data from `Delegation`. */
export type DelegatorIndexersByDelegationDelegatorIdAndIndexerIdManyToManyConnection = {
  readonly __typename: 'DelegatorIndexersByDelegationDelegatorIdAndIndexerIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<IndexerAggregates>;
  /** A list of edges which contains the `Indexer`, info from the `Delegation`, and the cursor to aid in pagination. */
  readonly edges: ReadonlyArray<DelegatorIndexersByDelegationDelegatorIdAndIndexerIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<IndexerAggregates>>;
  /** A list of `Indexer` objects. */
  readonly nodes: ReadonlyArray<Maybe<Indexer>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Indexer` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Indexer` values, with data from `Delegation`. */
export type DelegatorIndexersByDelegationDelegatorIdAndIndexerIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<IndexersGroupBy>;
  having: InputMaybe<IndexersHavingInput>;
};

/** A `Indexer` edge in the connection, with data from `Delegation`. */
export type DelegatorIndexersByDelegationDelegatorIdAndIndexerIdManyToManyEdge = {
  readonly __typename: 'DelegatorIndexersByDelegationDelegatorIdAndIndexerIdManyToManyEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `Delegation`. */
  readonly delegations: DelegationsConnection;
  /** The `Indexer` at the end of the edge. */
  readonly node: Maybe<Indexer>;
};

/** A `Indexer` edge in the connection, with data from `Delegation`. */
export type DelegatorIndexersByDelegationDelegatorIdAndIndexerIdManyToManyEdgeDelegationsArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Delegations_Distinct_Enum>>>;
  filter: InputMaybe<DelegationFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<DelegationsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** A connection to a list of `Indexer` values, with data from `EraDelegatorIndexerApy`. */
export type DelegatorIndexersByEraDelegatorIndexerApyDelegatorIdAndIndexerIdManyToManyConnection = {
  readonly __typename: 'DelegatorIndexersByEraDelegatorIndexerApyDelegatorIdAndIndexerIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<IndexerAggregates>;
  /** A list of edges which contains the `Indexer`, info from the `EraDelegatorIndexerApy`, and the cursor to aid in pagination. */
  readonly edges: ReadonlyArray<DelegatorIndexersByEraDelegatorIndexerApyDelegatorIdAndIndexerIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<IndexerAggregates>>;
  /** A list of `Indexer` objects. */
  readonly nodes: ReadonlyArray<Maybe<Indexer>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Indexer` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Indexer` values, with data from `EraDelegatorIndexerApy`. */
export type DelegatorIndexersByEraDelegatorIndexerApyDelegatorIdAndIndexerIdManyToManyConnectionGroupedAggregatesArgs =
  {
    groupBy: ReadonlyArray<IndexersGroupBy>;
    having: InputMaybe<IndexersHavingInput>;
  };

/** A `Indexer` edge in the connection, with data from `EraDelegatorIndexerApy`. */
export type DelegatorIndexersByEraDelegatorIndexerApyDelegatorIdAndIndexerIdManyToManyEdge = {
  readonly __typename: 'DelegatorIndexersByEraDelegatorIndexerApyDelegatorIdAndIndexerIdManyToManyEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `EraDelegatorIndexerApy`. */
  readonly eraDelegatorIndexerApies: EraDelegatorIndexerApiesConnection;
  /** The `Indexer` at the end of the edge. */
  readonly node: Maybe<Indexer>;
};

/** A `Indexer` edge in the connection, with data from `EraDelegatorIndexerApy`. */
export type DelegatorIndexersByEraDelegatorIndexerApyDelegatorIdAndIndexerIdManyToManyEdgeEraDelegatorIndexerApiesArgs =
  {
    after: InputMaybe<Scalars['Cursor']['input']>;
    before: InputMaybe<Scalars['Cursor']['input']>;
    blockHeight?: InputMaybe<Scalars['String']['input']>;
    distinct?: InputMaybe<ReadonlyArray<InputMaybe<Era_Delegator_Indexer_Apies_Distinct_Enum>>>;
    filter: InputMaybe<EraDelegatorIndexerApyFilter>;
    first: InputMaybe<Scalars['Int']['input']>;
    last: InputMaybe<Scalars['Int']['input']>;
    offset: InputMaybe<Scalars['Int']['input']>;
    orderBy: InputMaybe<ReadonlyArray<EraDelegatorIndexerApiesOrderBy>>;
    orderByNull: InputMaybe<NullOrder>;
  };

/** A connection to a list of `Indexer` values, with data from `EraReward`. */
export type DelegatorIndexersByEraRewardDelegatorIdAndIndexerIdManyToManyConnection = {
  readonly __typename: 'DelegatorIndexersByEraRewardDelegatorIdAndIndexerIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<IndexerAggregates>;
  /** A list of edges which contains the `Indexer`, info from the `EraReward`, and the cursor to aid in pagination. */
  readonly edges: ReadonlyArray<DelegatorIndexersByEraRewardDelegatorIdAndIndexerIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<IndexerAggregates>>;
  /** A list of `Indexer` objects. */
  readonly nodes: ReadonlyArray<Maybe<Indexer>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Indexer` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Indexer` values, with data from `EraReward`. */
export type DelegatorIndexersByEraRewardDelegatorIdAndIndexerIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<IndexersGroupBy>;
  having: InputMaybe<IndexersHavingInput>;
};

/** A `Indexer` edge in the connection, with data from `EraReward`. */
export type DelegatorIndexersByEraRewardDelegatorIdAndIndexerIdManyToManyEdge = {
  readonly __typename: 'DelegatorIndexersByEraRewardDelegatorIdAndIndexerIdManyToManyEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `EraReward`. */
  readonly eraRewards: EraRewardsConnection;
  /** The `Indexer` at the end of the edge. */
  readonly node: Maybe<Indexer>;
};

/** A `Indexer` edge in the connection, with data from `EraReward`. */
export type DelegatorIndexersByEraRewardDelegatorIdAndIndexerIdManyToManyEdgeEraRewardsArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Era_Rewards_Distinct_Enum>>>;
  filter: InputMaybe<EraRewardFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<EraRewardsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** A connection to a list of `Indexer` values, with data from `EraStake`. */
export type DelegatorIndexersByEraStakeDelegatorIdAndIndexerIdManyToManyConnection = {
  readonly __typename: 'DelegatorIndexersByEraStakeDelegatorIdAndIndexerIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<IndexerAggregates>;
  /** A list of edges which contains the `Indexer`, info from the `EraStake`, and the cursor to aid in pagination. */
  readonly edges: ReadonlyArray<DelegatorIndexersByEraStakeDelegatorIdAndIndexerIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<IndexerAggregates>>;
  /** A list of `Indexer` objects. */
  readonly nodes: ReadonlyArray<Maybe<Indexer>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Indexer` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Indexer` values, with data from `EraStake`. */
export type DelegatorIndexersByEraStakeDelegatorIdAndIndexerIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<IndexersGroupBy>;
  having: InputMaybe<IndexersHavingInput>;
};

/** A `Indexer` edge in the connection, with data from `EraStake`. */
export type DelegatorIndexersByEraStakeDelegatorIdAndIndexerIdManyToManyEdge = {
  readonly __typename: 'DelegatorIndexersByEraStakeDelegatorIdAndIndexerIdManyToManyEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `EraStake`. */
  readonly eraStakes: EraStakesConnection;
  /** The `Indexer` at the end of the edge. */
  readonly node: Maybe<Indexer>;
};

/** A `Indexer` edge in the connection, with data from `EraStake`. */
export type DelegatorIndexersByEraStakeDelegatorIdAndIndexerIdManyToManyEdgeEraStakesArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Era_Stakes_Distinct_Enum>>>;
  filter: InputMaybe<EraStakeFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<EraStakesOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type DelegatorMaxAggregates = {
  readonly __typename: 'DelegatorMaxAggregates';
  /** Maximum of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['Int']['output']>;
  /** Maximum of exitEra across the matching connection */
  readonly exitEra: Maybe<Scalars['Int']['output']>;
  /** Maximum of startEra across the matching connection */
  readonly startEra: Maybe<Scalars['Int']['output']>;
};

export type DelegatorMinAggregates = {
  readonly __typename: 'DelegatorMinAggregates';
  /** Minimum of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['Int']['output']>;
  /** Minimum of exitEra across the matching connection */
  readonly exitEra: Maybe<Scalars['Int']['output']>;
  /** Minimum of startEra across the matching connection */
  readonly startEra: Maybe<Scalars['Int']['output']>;
};

export type DelegatorStddevPopulationAggregates = {
  readonly __typename: 'DelegatorStddevPopulationAggregates';
  /** Population standard deviation of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of exitEra across the matching connection */
  readonly exitEra: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of startEra across the matching connection */
  readonly startEra: Maybe<Scalars['BigFloat']['output']>;
};

export type DelegatorStddevSampleAggregates = {
  readonly __typename: 'DelegatorStddevSampleAggregates';
  /** Sample standard deviation of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of exitEra across the matching connection */
  readonly exitEra: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of startEra across the matching connection */
  readonly startEra: Maybe<Scalars['BigFloat']['output']>;
};

export type DelegatorSumAggregates = {
  readonly __typename: 'DelegatorSumAggregates';
  /** Sum of createdBlock across the matching connection */
  readonly createdBlock: Scalars['BigInt']['output'];
  /** Sum of exitEra across the matching connection */
  readonly exitEra: Scalars['BigInt']['output'];
  /** Sum of startEra across the matching connection */
  readonly startEra: Scalars['BigInt']['output'];
};

/** A filter to be used against many `Delegation` object types. All fields are combined with a logical ‘and.’ */
export type DelegatorToManyDelegationFilter = {
  /** Aggregates across related `Delegation` match the filter criteria. */
  readonly aggregates: InputMaybe<DelegationAggregatesFilter>;
  /** Every related `Delegation` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly every: InputMaybe<DelegationFilter>;
  /** No related `Delegation` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly none: InputMaybe<DelegationFilter>;
  /** Some related `Delegation` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly some: InputMaybe<DelegationFilter>;
};

/** A filter to be used against many `EraDelegatorApy` object types. All fields are combined with a logical ‘and.’ */
export type DelegatorToManyEraDelegatorApyFilter = {
  /** Aggregates across related `EraDelegatorApy` match the filter criteria. */
  readonly aggregates: InputMaybe<EraDelegatorApyAggregatesFilter>;
  /** Every related `EraDelegatorApy` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly every: InputMaybe<EraDelegatorApyFilter>;
  /** No related `EraDelegatorApy` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly none: InputMaybe<EraDelegatorApyFilter>;
  /** Some related `EraDelegatorApy` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly some: InputMaybe<EraDelegatorApyFilter>;
};

/** A filter to be used against many `EraDelegatorIndexerApy` object types. All fields are combined with a logical ‘and.’ */
export type DelegatorToManyEraDelegatorIndexerApyFilter = {
  /** Aggregates across related `EraDelegatorIndexerApy` match the filter criteria. */
  readonly aggregates: InputMaybe<EraDelegatorIndexerApyAggregatesFilter>;
  /** Every related `EraDelegatorIndexerApy` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly every: InputMaybe<EraDelegatorIndexerApyFilter>;
  /** No related `EraDelegatorIndexerApy` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly none: InputMaybe<EraDelegatorIndexerApyFilter>;
  /** Some related `EraDelegatorIndexerApy` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly some: InputMaybe<EraDelegatorIndexerApyFilter>;
};

/** A filter to be used against many `EraReward` object types. All fields are combined with a logical ‘and.’ */
export type DelegatorToManyEraRewardFilter = {
  /** Aggregates across related `EraReward` match the filter criteria. */
  readonly aggregates: InputMaybe<EraRewardAggregatesFilter>;
  /** Every related `EraReward` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly every: InputMaybe<EraRewardFilter>;
  /** No related `EraReward` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly none: InputMaybe<EraRewardFilter>;
  /** Some related `EraReward` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly some: InputMaybe<EraRewardFilter>;
};

/** A filter to be used against many `EraStake` object types. All fields are combined with a logical ‘and.’ */
export type DelegatorToManyEraStakeFilter = {
  /** Aggregates across related `EraStake` match the filter criteria. */
  readonly aggregates: InputMaybe<EraStakeAggregatesFilter>;
  /** Every related `EraStake` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly every: InputMaybe<EraStakeFilter>;
  /** No related `EraStake` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly none: InputMaybe<EraStakeFilter>;
  /** Some related `EraStake` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly some: InputMaybe<EraStakeFilter>;
};

/** A filter to be used against many `Reward` object types. All fields are combined with a logical ‘and.’ */
export type DelegatorToManyRewardFilter = {
  /** Aggregates across related `Reward` match the filter criteria. */
  readonly aggregates: InputMaybe<RewardAggregatesFilter>;
  /** Every related `Reward` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly every: InputMaybe<RewardFilter>;
  /** No related `Reward` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly none: InputMaybe<RewardFilter>;
  /** Some related `Reward` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly some: InputMaybe<RewardFilter>;
};

/** A filter to be used against many `UnclaimedReward` object types. All fields are combined with a logical ‘and.’ */
export type DelegatorToManyUnclaimedRewardFilter = {
  /** Aggregates across related `UnclaimedReward` match the filter criteria. */
  readonly aggregates: InputMaybe<UnclaimedRewardAggregatesFilter>;
  /** Every related `UnclaimedReward` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly every: InputMaybe<UnclaimedRewardFilter>;
  /** No related `UnclaimedReward` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly none: InputMaybe<UnclaimedRewardFilter>;
  /** Some related `UnclaimedReward` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly some: InputMaybe<UnclaimedRewardFilter>;
};

export type DelegatorVariancePopulationAggregates = {
  readonly __typename: 'DelegatorVariancePopulationAggregates';
  /** Population variance of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of exitEra across the matching connection */
  readonly exitEra: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of startEra across the matching connection */
  readonly startEra: Maybe<Scalars['BigFloat']['output']>;
};

export type DelegatorVarianceSampleAggregates = {
  readonly __typename: 'DelegatorVarianceSampleAggregates';
  /** Sample variance of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of exitEra across the matching connection */
  readonly exitEra: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of startEra across the matching connection */
  readonly startEra: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `Delegator` values. */
export type DelegatorsConnection = {
  readonly __typename: 'DelegatorsConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<DelegatorAggregates>;
  /** A list of edges which contains the `Delegator` and cursor to aid in pagination. */
  readonly edges: ReadonlyArray<DelegatorsEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<DelegatorAggregates>>;
  /** A list of `Delegator` objects. */
  readonly nodes: ReadonlyArray<Maybe<Delegator>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Delegator` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Delegator` values. */
export type DelegatorsConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<DelegatorsGroupBy>;
  having: InputMaybe<DelegatorsHavingInput>;
};

/** A `Delegator` edge in the connection. */
export type DelegatorsEdge = {
  readonly __typename: 'DelegatorsEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `Delegator` at the end of the edge. */
  readonly node: Maybe<Delegator>;
};

/** Grouping methods for `Delegator` for usage during aggregation. */
export enum DelegatorsGroupBy {
  CREATED_BLOCK = 'CREATED_BLOCK',
  EXIT_ERA = 'EXIT_ERA',
  ID = 'ID',
  LAST_EVENT = 'LAST_EVENT',
  START_ERA = 'START_ERA',
  TOTAL_DELEGATIONS = 'TOTAL_DELEGATIONS',
}

export type DelegatorsHavingAverageInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly exitEra: InputMaybe<HavingIntFilter>;
  readonly startEra: InputMaybe<HavingIntFilter>;
};

export type DelegatorsHavingDistinctCountInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly exitEra: InputMaybe<HavingIntFilter>;
  readonly startEra: InputMaybe<HavingIntFilter>;
};

/** Conditions for `Delegator` aggregates. */
export type DelegatorsHavingInput = {
  readonly AND: InputMaybe<ReadonlyArray<DelegatorsHavingInput>>;
  readonly OR: InputMaybe<ReadonlyArray<DelegatorsHavingInput>>;
  readonly average: InputMaybe<DelegatorsHavingAverageInput>;
  readonly distinctCount: InputMaybe<DelegatorsHavingDistinctCountInput>;
  readonly max: InputMaybe<DelegatorsHavingMaxInput>;
  readonly min: InputMaybe<DelegatorsHavingMinInput>;
  readonly stddevPopulation: InputMaybe<DelegatorsHavingStddevPopulationInput>;
  readonly stddevSample: InputMaybe<DelegatorsHavingStddevSampleInput>;
  readonly sum: InputMaybe<DelegatorsHavingSumInput>;
  readonly variancePopulation: InputMaybe<DelegatorsHavingVariancePopulationInput>;
  readonly varianceSample: InputMaybe<DelegatorsHavingVarianceSampleInput>;
};

export type DelegatorsHavingMaxInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly exitEra: InputMaybe<HavingIntFilter>;
  readonly startEra: InputMaybe<HavingIntFilter>;
};

export type DelegatorsHavingMinInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly exitEra: InputMaybe<HavingIntFilter>;
  readonly startEra: InputMaybe<HavingIntFilter>;
};

export type DelegatorsHavingStddevPopulationInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly exitEra: InputMaybe<HavingIntFilter>;
  readonly startEra: InputMaybe<HavingIntFilter>;
};

export type DelegatorsHavingStddevSampleInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly exitEra: InputMaybe<HavingIntFilter>;
  readonly startEra: InputMaybe<HavingIntFilter>;
};

export type DelegatorsHavingSumInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly exitEra: InputMaybe<HavingIntFilter>;
  readonly startEra: InputMaybe<HavingIntFilter>;
};

export type DelegatorsHavingVariancePopulationInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly exitEra: InputMaybe<HavingIntFilter>;
  readonly startEra: InputMaybe<HavingIntFilter>;
};

export type DelegatorsHavingVarianceSampleInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly exitEra: InputMaybe<HavingIntFilter>;
  readonly startEra: InputMaybe<HavingIntFilter>;
};

/** Methods to use when ordering `Delegator`. */
export enum DelegatorsOrderBy {
  CLAIMED_REWARDS_AVERAGE_AMOUNT_ASC = 'CLAIMED_REWARDS_AVERAGE_AMOUNT_ASC',
  CLAIMED_REWARDS_AVERAGE_AMOUNT_DESC = 'CLAIMED_REWARDS_AVERAGE_AMOUNT_DESC',
  CLAIMED_REWARDS_AVERAGE_BLOCK_RANGE_ASC = 'CLAIMED_REWARDS_AVERAGE_BLOCK_RANGE_ASC',
  CLAIMED_REWARDS_AVERAGE_BLOCK_RANGE_DESC = 'CLAIMED_REWARDS_AVERAGE_BLOCK_RANGE_DESC',
  CLAIMED_REWARDS_AVERAGE_CLAIMED_TIME_ASC = 'CLAIMED_REWARDS_AVERAGE_CLAIMED_TIME_ASC',
  CLAIMED_REWARDS_AVERAGE_CLAIMED_TIME_DESC = 'CLAIMED_REWARDS_AVERAGE_CLAIMED_TIME_DESC',
  CLAIMED_REWARDS_AVERAGE_CREATED_BLOCK_ASC = 'CLAIMED_REWARDS_AVERAGE_CREATED_BLOCK_ASC',
  CLAIMED_REWARDS_AVERAGE_CREATED_BLOCK_DESC = 'CLAIMED_REWARDS_AVERAGE_CREATED_BLOCK_DESC',
  CLAIMED_REWARDS_AVERAGE_DELEGATOR_ADDRESS_ASC = 'CLAIMED_REWARDS_AVERAGE_DELEGATOR_ADDRESS_ASC',
  CLAIMED_REWARDS_AVERAGE_DELEGATOR_ADDRESS_DESC = 'CLAIMED_REWARDS_AVERAGE_DELEGATOR_ADDRESS_DESC',
  CLAIMED_REWARDS_AVERAGE_DELEGATOR_ID_ASC = 'CLAIMED_REWARDS_AVERAGE_DELEGATOR_ID_ASC',
  CLAIMED_REWARDS_AVERAGE_DELEGATOR_ID_DESC = 'CLAIMED_REWARDS_AVERAGE_DELEGATOR_ID_DESC',
  CLAIMED_REWARDS_AVERAGE_ID_ASC = 'CLAIMED_REWARDS_AVERAGE_ID_ASC',
  CLAIMED_REWARDS_AVERAGE_ID_DESC = 'CLAIMED_REWARDS_AVERAGE_ID_DESC',
  CLAIMED_REWARDS_AVERAGE_INDEXER_ADDRESS_ASC = 'CLAIMED_REWARDS_AVERAGE_INDEXER_ADDRESS_ASC',
  CLAIMED_REWARDS_AVERAGE_INDEXER_ADDRESS_DESC = 'CLAIMED_REWARDS_AVERAGE_INDEXER_ADDRESS_DESC',
  CLAIMED_REWARDS_AVERAGE_LAST_EVENT_ASC = 'CLAIMED_REWARDS_AVERAGE_LAST_EVENT_ASC',
  CLAIMED_REWARDS_AVERAGE_LAST_EVENT_DESC = 'CLAIMED_REWARDS_AVERAGE_LAST_EVENT_DESC',
  CLAIMED_REWARDS_COUNT_ASC = 'CLAIMED_REWARDS_COUNT_ASC',
  CLAIMED_REWARDS_COUNT_DESC = 'CLAIMED_REWARDS_COUNT_DESC',
  CLAIMED_REWARDS_DISTINCT_COUNT_AMOUNT_ASC = 'CLAIMED_REWARDS_DISTINCT_COUNT_AMOUNT_ASC',
  CLAIMED_REWARDS_DISTINCT_COUNT_AMOUNT_DESC = 'CLAIMED_REWARDS_DISTINCT_COUNT_AMOUNT_DESC',
  CLAIMED_REWARDS_DISTINCT_COUNT_BLOCK_RANGE_ASC = 'CLAIMED_REWARDS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  CLAIMED_REWARDS_DISTINCT_COUNT_BLOCK_RANGE_DESC = 'CLAIMED_REWARDS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  CLAIMED_REWARDS_DISTINCT_COUNT_CLAIMED_TIME_ASC = 'CLAIMED_REWARDS_DISTINCT_COUNT_CLAIMED_TIME_ASC',
  CLAIMED_REWARDS_DISTINCT_COUNT_CLAIMED_TIME_DESC = 'CLAIMED_REWARDS_DISTINCT_COUNT_CLAIMED_TIME_DESC',
  CLAIMED_REWARDS_DISTINCT_COUNT_CREATED_BLOCK_ASC = 'CLAIMED_REWARDS_DISTINCT_COUNT_CREATED_BLOCK_ASC',
  CLAIMED_REWARDS_DISTINCT_COUNT_CREATED_BLOCK_DESC = 'CLAIMED_REWARDS_DISTINCT_COUNT_CREATED_BLOCK_DESC',
  CLAIMED_REWARDS_DISTINCT_COUNT_DELEGATOR_ADDRESS_ASC = 'CLAIMED_REWARDS_DISTINCT_COUNT_DELEGATOR_ADDRESS_ASC',
  CLAIMED_REWARDS_DISTINCT_COUNT_DELEGATOR_ADDRESS_DESC = 'CLAIMED_REWARDS_DISTINCT_COUNT_DELEGATOR_ADDRESS_DESC',
  CLAIMED_REWARDS_DISTINCT_COUNT_DELEGATOR_ID_ASC = 'CLAIMED_REWARDS_DISTINCT_COUNT_DELEGATOR_ID_ASC',
  CLAIMED_REWARDS_DISTINCT_COUNT_DELEGATOR_ID_DESC = 'CLAIMED_REWARDS_DISTINCT_COUNT_DELEGATOR_ID_DESC',
  CLAIMED_REWARDS_DISTINCT_COUNT_ID_ASC = 'CLAIMED_REWARDS_DISTINCT_COUNT_ID_ASC',
  CLAIMED_REWARDS_DISTINCT_COUNT_ID_DESC = 'CLAIMED_REWARDS_DISTINCT_COUNT_ID_DESC',
  CLAIMED_REWARDS_DISTINCT_COUNT_INDEXER_ADDRESS_ASC = 'CLAIMED_REWARDS_DISTINCT_COUNT_INDEXER_ADDRESS_ASC',
  CLAIMED_REWARDS_DISTINCT_COUNT_INDEXER_ADDRESS_DESC = 'CLAIMED_REWARDS_DISTINCT_COUNT_INDEXER_ADDRESS_DESC',
  CLAIMED_REWARDS_DISTINCT_COUNT_LAST_EVENT_ASC = 'CLAIMED_REWARDS_DISTINCT_COUNT_LAST_EVENT_ASC',
  CLAIMED_REWARDS_DISTINCT_COUNT_LAST_EVENT_DESC = 'CLAIMED_REWARDS_DISTINCT_COUNT_LAST_EVENT_DESC',
  CLAIMED_REWARDS_MAX_AMOUNT_ASC = 'CLAIMED_REWARDS_MAX_AMOUNT_ASC',
  CLAIMED_REWARDS_MAX_AMOUNT_DESC = 'CLAIMED_REWARDS_MAX_AMOUNT_DESC',
  CLAIMED_REWARDS_MAX_BLOCK_RANGE_ASC = 'CLAIMED_REWARDS_MAX_BLOCK_RANGE_ASC',
  CLAIMED_REWARDS_MAX_BLOCK_RANGE_DESC = 'CLAIMED_REWARDS_MAX_BLOCK_RANGE_DESC',
  CLAIMED_REWARDS_MAX_CLAIMED_TIME_ASC = 'CLAIMED_REWARDS_MAX_CLAIMED_TIME_ASC',
  CLAIMED_REWARDS_MAX_CLAIMED_TIME_DESC = 'CLAIMED_REWARDS_MAX_CLAIMED_TIME_DESC',
  CLAIMED_REWARDS_MAX_CREATED_BLOCK_ASC = 'CLAIMED_REWARDS_MAX_CREATED_BLOCK_ASC',
  CLAIMED_REWARDS_MAX_CREATED_BLOCK_DESC = 'CLAIMED_REWARDS_MAX_CREATED_BLOCK_DESC',
  CLAIMED_REWARDS_MAX_DELEGATOR_ADDRESS_ASC = 'CLAIMED_REWARDS_MAX_DELEGATOR_ADDRESS_ASC',
  CLAIMED_REWARDS_MAX_DELEGATOR_ADDRESS_DESC = 'CLAIMED_REWARDS_MAX_DELEGATOR_ADDRESS_DESC',
  CLAIMED_REWARDS_MAX_DELEGATOR_ID_ASC = 'CLAIMED_REWARDS_MAX_DELEGATOR_ID_ASC',
  CLAIMED_REWARDS_MAX_DELEGATOR_ID_DESC = 'CLAIMED_REWARDS_MAX_DELEGATOR_ID_DESC',
  CLAIMED_REWARDS_MAX_ID_ASC = 'CLAIMED_REWARDS_MAX_ID_ASC',
  CLAIMED_REWARDS_MAX_ID_DESC = 'CLAIMED_REWARDS_MAX_ID_DESC',
  CLAIMED_REWARDS_MAX_INDEXER_ADDRESS_ASC = 'CLAIMED_REWARDS_MAX_INDEXER_ADDRESS_ASC',
  CLAIMED_REWARDS_MAX_INDEXER_ADDRESS_DESC = 'CLAIMED_REWARDS_MAX_INDEXER_ADDRESS_DESC',
  CLAIMED_REWARDS_MAX_LAST_EVENT_ASC = 'CLAIMED_REWARDS_MAX_LAST_EVENT_ASC',
  CLAIMED_REWARDS_MAX_LAST_EVENT_DESC = 'CLAIMED_REWARDS_MAX_LAST_EVENT_DESC',
  CLAIMED_REWARDS_MIN_AMOUNT_ASC = 'CLAIMED_REWARDS_MIN_AMOUNT_ASC',
  CLAIMED_REWARDS_MIN_AMOUNT_DESC = 'CLAIMED_REWARDS_MIN_AMOUNT_DESC',
  CLAIMED_REWARDS_MIN_BLOCK_RANGE_ASC = 'CLAIMED_REWARDS_MIN_BLOCK_RANGE_ASC',
  CLAIMED_REWARDS_MIN_BLOCK_RANGE_DESC = 'CLAIMED_REWARDS_MIN_BLOCK_RANGE_DESC',
  CLAIMED_REWARDS_MIN_CLAIMED_TIME_ASC = 'CLAIMED_REWARDS_MIN_CLAIMED_TIME_ASC',
  CLAIMED_REWARDS_MIN_CLAIMED_TIME_DESC = 'CLAIMED_REWARDS_MIN_CLAIMED_TIME_DESC',
  CLAIMED_REWARDS_MIN_CREATED_BLOCK_ASC = 'CLAIMED_REWARDS_MIN_CREATED_BLOCK_ASC',
  CLAIMED_REWARDS_MIN_CREATED_BLOCK_DESC = 'CLAIMED_REWARDS_MIN_CREATED_BLOCK_DESC',
  CLAIMED_REWARDS_MIN_DELEGATOR_ADDRESS_ASC = 'CLAIMED_REWARDS_MIN_DELEGATOR_ADDRESS_ASC',
  CLAIMED_REWARDS_MIN_DELEGATOR_ADDRESS_DESC = 'CLAIMED_REWARDS_MIN_DELEGATOR_ADDRESS_DESC',
  CLAIMED_REWARDS_MIN_DELEGATOR_ID_ASC = 'CLAIMED_REWARDS_MIN_DELEGATOR_ID_ASC',
  CLAIMED_REWARDS_MIN_DELEGATOR_ID_DESC = 'CLAIMED_REWARDS_MIN_DELEGATOR_ID_DESC',
  CLAIMED_REWARDS_MIN_ID_ASC = 'CLAIMED_REWARDS_MIN_ID_ASC',
  CLAIMED_REWARDS_MIN_ID_DESC = 'CLAIMED_REWARDS_MIN_ID_DESC',
  CLAIMED_REWARDS_MIN_INDEXER_ADDRESS_ASC = 'CLAIMED_REWARDS_MIN_INDEXER_ADDRESS_ASC',
  CLAIMED_REWARDS_MIN_INDEXER_ADDRESS_DESC = 'CLAIMED_REWARDS_MIN_INDEXER_ADDRESS_DESC',
  CLAIMED_REWARDS_MIN_LAST_EVENT_ASC = 'CLAIMED_REWARDS_MIN_LAST_EVENT_ASC',
  CLAIMED_REWARDS_MIN_LAST_EVENT_DESC = 'CLAIMED_REWARDS_MIN_LAST_EVENT_DESC',
  CLAIMED_REWARDS_STDDEV_POPULATION_AMOUNT_ASC = 'CLAIMED_REWARDS_STDDEV_POPULATION_AMOUNT_ASC',
  CLAIMED_REWARDS_STDDEV_POPULATION_AMOUNT_DESC = 'CLAIMED_REWARDS_STDDEV_POPULATION_AMOUNT_DESC',
  CLAIMED_REWARDS_STDDEV_POPULATION_BLOCK_RANGE_ASC = 'CLAIMED_REWARDS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  CLAIMED_REWARDS_STDDEV_POPULATION_BLOCK_RANGE_DESC = 'CLAIMED_REWARDS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  CLAIMED_REWARDS_STDDEV_POPULATION_CLAIMED_TIME_ASC = 'CLAIMED_REWARDS_STDDEV_POPULATION_CLAIMED_TIME_ASC',
  CLAIMED_REWARDS_STDDEV_POPULATION_CLAIMED_TIME_DESC = 'CLAIMED_REWARDS_STDDEV_POPULATION_CLAIMED_TIME_DESC',
  CLAIMED_REWARDS_STDDEV_POPULATION_CREATED_BLOCK_ASC = 'CLAIMED_REWARDS_STDDEV_POPULATION_CREATED_BLOCK_ASC',
  CLAIMED_REWARDS_STDDEV_POPULATION_CREATED_BLOCK_DESC = 'CLAIMED_REWARDS_STDDEV_POPULATION_CREATED_BLOCK_DESC',
  CLAIMED_REWARDS_STDDEV_POPULATION_DELEGATOR_ADDRESS_ASC = 'CLAIMED_REWARDS_STDDEV_POPULATION_DELEGATOR_ADDRESS_ASC',
  CLAIMED_REWARDS_STDDEV_POPULATION_DELEGATOR_ADDRESS_DESC = 'CLAIMED_REWARDS_STDDEV_POPULATION_DELEGATOR_ADDRESS_DESC',
  CLAIMED_REWARDS_STDDEV_POPULATION_DELEGATOR_ID_ASC = 'CLAIMED_REWARDS_STDDEV_POPULATION_DELEGATOR_ID_ASC',
  CLAIMED_REWARDS_STDDEV_POPULATION_DELEGATOR_ID_DESC = 'CLAIMED_REWARDS_STDDEV_POPULATION_DELEGATOR_ID_DESC',
  CLAIMED_REWARDS_STDDEV_POPULATION_ID_ASC = 'CLAIMED_REWARDS_STDDEV_POPULATION_ID_ASC',
  CLAIMED_REWARDS_STDDEV_POPULATION_ID_DESC = 'CLAIMED_REWARDS_STDDEV_POPULATION_ID_DESC',
  CLAIMED_REWARDS_STDDEV_POPULATION_INDEXER_ADDRESS_ASC = 'CLAIMED_REWARDS_STDDEV_POPULATION_INDEXER_ADDRESS_ASC',
  CLAIMED_REWARDS_STDDEV_POPULATION_INDEXER_ADDRESS_DESC = 'CLAIMED_REWARDS_STDDEV_POPULATION_INDEXER_ADDRESS_DESC',
  CLAIMED_REWARDS_STDDEV_POPULATION_LAST_EVENT_ASC = 'CLAIMED_REWARDS_STDDEV_POPULATION_LAST_EVENT_ASC',
  CLAIMED_REWARDS_STDDEV_POPULATION_LAST_EVENT_DESC = 'CLAIMED_REWARDS_STDDEV_POPULATION_LAST_EVENT_DESC',
  CLAIMED_REWARDS_STDDEV_SAMPLE_AMOUNT_ASC = 'CLAIMED_REWARDS_STDDEV_SAMPLE_AMOUNT_ASC',
  CLAIMED_REWARDS_STDDEV_SAMPLE_AMOUNT_DESC = 'CLAIMED_REWARDS_STDDEV_SAMPLE_AMOUNT_DESC',
  CLAIMED_REWARDS_STDDEV_SAMPLE_BLOCK_RANGE_ASC = 'CLAIMED_REWARDS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  CLAIMED_REWARDS_STDDEV_SAMPLE_BLOCK_RANGE_DESC = 'CLAIMED_REWARDS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  CLAIMED_REWARDS_STDDEV_SAMPLE_CLAIMED_TIME_ASC = 'CLAIMED_REWARDS_STDDEV_SAMPLE_CLAIMED_TIME_ASC',
  CLAIMED_REWARDS_STDDEV_SAMPLE_CLAIMED_TIME_DESC = 'CLAIMED_REWARDS_STDDEV_SAMPLE_CLAIMED_TIME_DESC',
  CLAIMED_REWARDS_STDDEV_SAMPLE_CREATED_BLOCK_ASC = 'CLAIMED_REWARDS_STDDEV_SAMPLE_CREATED_BLOCK_ASC',
  CLAIMED_REWARDS_STDDEV_SAMPLE_CREATED_BLOCK_DESC = 'CLAIMED_REWARDS_STDDEV_SAMPLE_CREATED_BLOCK_DESC',
  CLAIMED_REWARDS_STDDEV_SAMPLE_DELEGATOR_ADDRESS_ASC = 'CLAIMED_REWARDS_STDDEV_SAMPLE_DELEGATOR_ADDRESS_ASC',
  CLAIMED_REWARDS_STDDEV_SAMPLE_DELEGATOR_ADDRESS_DESC = 'CLAIMED_REWARDS_STDDEV_SAMPLE_DELEGATOR_ADDRESS_DESC',
  CLAIMED_REWARDS_STDDEV_SAMPLE_DELEGATOR_ID_ASC = 'CLAIMED_REWARDS_STDDEV_SAMPLE_DELEGATOR_ID_ASC',
  CLAIMED_REWARDS_STDDEV_SAMPLE_DELEGATOR_ID_DESC = 'CLAIMED_REWARDS_STDDEV_SAMPLE_DELEGATOR_ID_DESC',
  CLAIMED_REWARDS_STDDEV_SAMPLE_ID_ASC = 'CLAIMED_REWARDS_STDDEV_SAMPLE_ID_ASC',
  CLAIMED_REWARDS_STDDEV_SAMPLE_ID_DESC = 'CLAIMED_REWARDS_STDDEV_SAMPLE_ID_DESC',
  CLAIMED_REWARDS_STDDEV_SAMPLE_INDEXER_ADDRESS_ASC = 'CLAIMED_REWARDS_STDDEV_SAMPLE_INDEXER_ADDRESS_ASC',
  CLAIMED_REWARDS_STDDEV_SAMPLE_INDEXER_ADDRESS_DESC = 'CLAIMED_REWARDS_STDDEV_SAMPLE_INDEXER_ADDRESS_DESC',
  CLAIMED_REWARDS_STDDEV_SAMPLE_LAST_EVENT_ASC = 'CLAIMED_REWARDS_STDDEV_SAMPLE_LAST_EVENT_ASC',
  CLAIMED_REWARDS_STDDEV_SAMPLE_LAST_EVENT_DESC = 'CLAIMED_REWARDS_STDDEV_SAMPLE_LAST_EVENT_DESC',
  CLAIMED_REWARDS_SUM_AMOUNT_ASC = 'CLAIMED_REWARDS_SUM_AMOUNT_ASC',
  CLAIMED_REWARDS_SUM_AMOUNT_DESC = 'CLAIMED_REWARDS_SUM_AMOUNT_DESC',
  CLAIMED_REWARDS_SUM_BLOCK_RANGE_ASC = 'CLAIMED_REWARDS_SUM_BLOCK_RANGE_ASC',
  CLAIMED_REWARDS_SUM_BLOCK_RANGE_DESC = 'CLAIMED_REWARDS_SUM_BLOCK_RANGE_DESC',
  CLAIMED_REWARDS_SUM_CLAIMED_TIME_ASC = 'CLAIMED_REWARDS_SUM_CLAIMED_TIME_ASC',
  CLAIMED_REWARDS_SUM_CLAIMED_TIME_DESC = 'CLAIMED_REWARDS_SUM_CLAIMED_TIME_DESC',
  CLAIMED_REWARDS_SUM_CREATED_BLOCK_ASC = 'CLAIMED_REWARDS_SUM_CREATED_BLOCK_ASC',
  CLAIMED_REWARDS_SUM_CREATED_BLOCK_DESC = 'CLAIMED_REWARDS_SUM_CREATED_BLOCK_DESC',
  CLAIMED_REWARDS_SUM_DELEGATOR_ADDRESS_ASC = 'CLAIMED_REWARDS_SUM_DELEGATOR_ADDRESS_ASC',
  CLAIMED_REWARDS_SUM_DELEGATOR_ADDRESS_DESC = 'CLAIMED_REWARDS_SUM_DELEGATOR_ADDRESS_DESC',
  CLAIMED_REWARDS_SUM_DELEGATOR_ID_ASC = 'CLAIMED_REWARDS_SUM_DELEGATOR_ID_ASC',
  CLAIMED_REWARDS_SUM_DELEGATOR_ID_DESC = 'CLAIMED_REWARDS_SUM_DELEGATOR_ID_DESC',
  CLAIMED_REWARDS_SUM_ID_ASC = 'CLAIMED_REWARDS_SUM_ID_ASC',
  CLAIMED_REWARDS_SUM_ID_DESC = 'CLAIMED_REWARDS_SUM_ID_DESC',
  CLAIMED_REWARDS_SUM_INDEXER_ADDRESS_ASC = 'CLAIMED_REWARDS_SUM_INDEXER_ADDRESS_ASC',
  CLAIMED_REWARDS_SUM_INDEXER_ADDRESS_DESC = 'CLAIMED_REWARDS_SUM_INDEXER_ADDRESS_DESC',
  CLAIMED_REWARDS_SUM_LAST_EVENT_ASC = 'CLAIMED_REWARDS_SUM_LAST_EVENT_ASC',
  CLAIMED_REWARDS_SUM_LAST_EVENT_DESC = 'CLAIMED_REWARDS_SUM_LAST_EVENT_DESC',
  CLAIMED_REWARDS_VARIANCE_POPULATION_AMOUNT_ASC = 'CLAIMED_REWARDS_VARIANCE_POPULATION_AMOUNT_ASC',
  CLAIMED_REWARDS_VARIANCE_POPULATION_AMOUNT_DESC = 'CLAIMED_REWARDS_VARIANCE_POPULATION_AMOUNT_DESC',
  CLAIMED_REWARDS_VARIANCE_POPULATION_BLOCK_RANGE_ASC = 'CLAIMED_REWARDS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  CLAIMED_REWARDS_VARIANCE_POPULATION_BLOCK_RANGE_DESC = 'CLAIMED_REWARDS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  CLAIMED_REWARDS_VARIANCE_POPULATION_CLAIMED_TIME_ASC = 'CLAIMED_REWARDS_VARIANCE_POPULATION_CLAIMED_TIME_ASC',
  CLAIMED_REWARDS_VARIANCE_POPULATION_CLAIMED_TIME_DESC = 'CLAIMED_REWARDS_VARIANCE_POPULATION_CLAIMED_TIME_DESC',
  CLAIMED_REWARDS_VARIANCE_POPULATION_CREATED_BLOCK_ASC = 'CLAIMED_REWARDS_VARIANCE_POPULATION_CREATED_BLOCK_ASC',
  CLAIMED_REWARDS_VARIANCE_POPULATION_CREATED_BLOCK_DESC = 'CLAIMED_REWARDS_VARIANCE_POPULATION_CREATED_BLOCK_DESC',
  CLAIMED_REWARDS_VARIANCE_POPULATION_DELEGATOR_ADDRESS_ASC = 'CLAIMED_REWARDS_VARIANCE_POPULATION_DELEGATOR_ADDRESS_ASC',
  CLAIMED_REWARDS_VARIANCE_POPULATION_DELEGATOR_ADDRESS_DESC = 'CLAIMED_REWARDS_VARIANCE_POPULATION_DELEGATOR_ADDRESS_DESC',
  CLAIMED_REWARDS_VARIANCE_POPULATION_DELEGATOR_ID_ASC = 'CLAIMED_REWARDS_VARIANCE_POPULATION_DELEGATOR_ID_ASC',
  CLAIMED_REWARDS_VARIANCE_POPULATION_DELEGATOR_ID_DESC = 'CLAIMED_REWARDS_VARIANCE_POPULATION_DELEGATOR_ID_DESC',
  CLAIMED_REWARDS_VARIANCE_POPULATION_ID_ASC = 'CLAIMED_REWARDS_VARIANCE_POPULATION_ID_ASC',
  CLAIMED_REWARDS_VARIANCE_POPULATION_ID_DESC = 'CLAIMED_REWARDS_VARIANCE_POPULATION_ID_DESC',
  CLAIMED_REWARDS_VARIANCE_POPULATION_INDEXER_ADDRESS_ASC = 'CLAIMED_REWARDS_VARIANCE_POPULATION_INDEXER_ADDRESS_ASC',
  CLAIMED_REWARDS_VARIANCE_POPULATION_INDEXER_ADDRESS_DESC = 'CLAIMED_REWARDS_VARIANCE_POPULATION_INDEXER_ADDRESS_DESC',
  CLAIMED_REWARDS_VARIANCE_POPULATION_LAST_EVENT_ASC = 'CLAIMED_REWARDS_VARIANCE_POPULATION_LAST_EVENT_ASC',
  CLAIMED_REWARDS_VARIANCE_POPULATION_LAST_EVENT_DESC = 'CLAIMED_REWARDS_VARIANCE_POPULATION_LAST_EVENT_DESC',
  CLAIMED_REWARDS_VARIANCE_SAMPLE_AMOUNT_ASC = 'CLAIMED_REWARDS_VARIANCE_SAMPLE_AMOUNT_ASC',
  CLAIMED_REWARDS_VARIANCE_SAMPLE_AMOUNT_DESC = 'CLAIMED_REWARDS_VARIANCE_SAMPLE_AMOUNT_DESC',
  CLAIMED_REWARDS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC = 'CLAIMED_REWARDS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  CLAIMED_REWARDS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC = 'CLAIMED_REWARDS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  CLAIMED_REWARDS_VARIANCE_SAMPLE_CLAIMED_TIME_ASC = 'CLAIMED_REWARDS_VARIANCE_SAMPLE_CLAIMED_TIME_ASC',
  CLAIMED_REWARDS_VARIANCE_SAMPLE_CLAIMED_TIME_DESC = 'CLAIMED_REWARDS_VARIANCE_SAMPLE_CLAIMED_TIME_DESC',
  CLAIMED_REWARDS_VARIANCE_SAMPLE_CREATED_BLOCK_ASC = 'CLAIMED_REWARDS_VARIANCE_SAMPLE_CREATED_BLOCK_ASC',
  CLAIMED_REWARDS_VARIANCE_SAMPLE_CREATED_BLOCK_DESC = 'CLAIMED_REWARDS_VARIANCE_SAMPLE_CREATED_BLOCK_DESC',
  CLAIMED_REWARDS_VARIANCE_SAMPLE_DELEGATOR_ADDRESS_ASC = 'CLAIMED_REWARDS_VARIANCE_SAMPLE_DELEGATOR_ADDRESS_ASC',
  CLAIMED_REWARDS_VARIANCE_SAMPLE_DELEGATOR_ADDRESS_DESC = 'CLAIMED_REWARDS_VARIANCE_SAMPLE_DELEGATOR_ADDRESS_DESC',
  CLAIMED_REWARDS_VARIANCE_SAMPLE_DELEGATOR_ID_ASC = 'CLAIMED_REWARDS_VARIANCE_SAMPLE_DELEGATOR_ID_ASC',
  CLAIMED_REWARDS_VARIANCE_SAMPLE_DELEGATOR_ID_DESC = 'CLAIMED_REWARDS_VARIANCE_SAMPLE_DELEGATOR_ID_DESC',
  CLAIMED_REWARDS_VARIANCE_SAMPLE_ID_ASC = 'CLAIMED_REWARDS_VARIANCE_SAMPLE_ID_ASC',
  CLAIMED_REWARDS_VARIANCE_SAMPLE_ID_DESC = 'CLAIMED_REWARDS_VARIANCE_SAMPLE_ID_DESC',
  CLAIMED_REWARDS_VARIANCE_SAMPLE_INDEXER_ADDRESS_ASC = 'CLAIMED_REWARDS_VARIANCE_SAMPLE_INDEXER_ADDRESS_ASC',
  CLAIMED_REWARDS_VARIANCE_SAMPLE_INDEXER_ADDRESS_DESC = 'CLAIMED_REWARDS_VARIANCE_SAMPLE_INDEXER_ADDRESS_DESC',
  CLAIMED_REWARDS_VARIANCE_SAMPLE_LAST_EVENT_ASC = 'CLAIMED_REWARDS_VARIANCE_SAMPLE_LAST_EVENT_ASC',
  CLAIMED_REWARDS_VARIANCE_SAMPLE_LAST_EVENT_DESC = 'CLAIMED_REWARDS_VARIANCE_SAMPLE_LAST_EVENT_DESC',
  CREATED_BLOCK_ASC = 'CREATED_BLOCK_ASC',
  CREATED_BLOCK_DESC = 'CREATED_BLOCK_DESC',
  DELEGATIONS_AVERAGE_AMOUNT_ASC = 'DELEGATIONS_AVERAGE_AMOUNT_ASC',
  DELEGATIONS_AVERAGE_AMOUNT_DESC = 'DELEGATIONS_AVERAGE_AMOUNT_DESC',
  DELEGATIONS_AVERAGE_BLOCK_RANGE_ASC = 'DELEGATIONS_AVERAGE_BLOCK_RANGE_ASC',
  DELEGATIONS_AVERAGE_BLOCK_RANGE_DESC = 'DELEGATIONS_AVERAGE_BLOCK_RANGE_DESC',
  DELEGATIONS_AVERAGE_CREATED_BLOCK_ASC = 'DELEGATIONS_AVERAGE_CREATED_BLOCK_ASC',
  DELEGATIONS_AVERAGE_CREATED_BLOCK_DESC = 'DELEGATIONS_AVERAGE_CREATED_BLOCK_DESC',
  DELEGATIONS_AVERAGE_DELEGATOR_ID_ASC = 'DELEGATIONS_AVERAGE_DELEGATOR_ID_ASC',
  DELEGATIONS_AVERAGE_DELEGATOR_ID_DESC = 'DELEGATIONS_AVERAGE_DELEGATOR_ID_DESC',
  DELEGATIONS_AVERAGE_EXIT_ERA_ASC = 'DELEGATIONS_AVERAGE_EXIT_ERA_ASC',
  DELEGATIONS_AVERAGE_EXIT_ERA_DESC = 'DELEGATIONS_AVERAGE_EXIT_ERA_DESC',
  DELEGATIONS_AVERAGE_ID_ASC = 'DELEGATIONS_AVERAGE_ID_ASC',
  DELEGATIONS_AVERAGE_ID_DESC = 'DELEGATIONS_AVERAGE_ID_DESC',
  DELEGATIONS_AVERAGE_INDEXER_ID_ASC = 'DELEGATIONS_AVERAGE_INDEXER_ID_ASC',
  DELEGATIONS_AVERAGE_INDEXER_ID_DESC = 'DELEGATIONS_AVERAGE_INDEXER_ID_DESC',
  DELEGATIONS_AVERAGE_LAST_EVENT_ASC = 'DELEGATIONS_AVERAGE_LAST_EVENT_ASC',
  DELEGATIONS_AVERAGE_LAST_EVENT_DESC = 'DELEGATIONS_AVERAGE_LAST_EVENT_DESC',
  DELEGATIONS_BY_DELEGATOR_ID__COUNT_ASC = 'DELEGATIONS_BY_DELEGATOR_ID__COUNT_ASC',
  DELEGATIONS_BY_DELEGATOR_ID__COUNT_DESC = 'DELEGATIONS_BY_DELEGATOR_ID__COUNT_DESC',
  DELEGATIONS_COUNT_ASC = 'DELEGATIONS_COUNT_ASC',
  DELEGATIONS_COUNT_DESC = 'DELEGATIONS_COUNT_DESC',
  DELEGATIONS_DISTINCT_COUNT_AMOUNT_ASC = 'DELEGATIONS_DISTINCT_COUNT_AMOUNT_ASC',
  DELEGATIONS_DISTINCT_COUNT_AMOUNT_DESC = 'DELEGATIONS_DISTINCT_COUNT_AMOUNT_DESC',
  DELEGATIONS_DISTINCT_COUNT_BLOCK_RANGE_ASC = 'DELEGATIONS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  DELEGATIONS_DISTINCT_COUNT_BLOCK_RANGE_DESC = 'DELEGATIONS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  DELEGATIONS_DISTINCT_COUNT_CREATED_BLOCK_ASC = 'DELEGATIONS_DISTINCT_COUNT_CREATED_BLOCK_ASC',
  DELEGATIONS_DISTINCT_COUNT_CREATED_BLOCK_DESC = 'DELEGATIONS_DISTINCT_COUNT_CREATED_BLOCK_DESC',
  DELEGATIONS_DISTINCT_COUNT_DELEGATOR_ID_ASC = 'DELEGATIONS_DISTINCT_COUNT_DELEGATOR_ID_ASC',
  DELEGATIONS_DISTINCT_COUNT_DELEGATOR_ID_DESC = 'DELEGATIONS_DISTINCT_COUNT_DELEGATOR_ID_DESC',
  DELEGATIONS_DISTINCT_COUNT_EXIT_ERA_ASC = 'DELEGATIONS_DISTINCT_COUNT_EXIT_ERA_ASC',
  DELEGATIONS_DISTINCT_COUNT_EXIT_ERA_DESC = 'DELEGATIONS_DISTINCT_COUNT_EXIT_ERA_DESC',
  DELEGATIONS_DISTINCT_COUNT_ID_ASC = 'DELEGATIONS_DISTINCT_COUNT_ID_ASC',
  DELEGATIONS_DISTINCT_COUNT_ID_DESC = 'DELEGATIONS_DISTINCT_COUNT_ID_DESC',
  DELEGATIONS_DISTINCT_COUNT_INDEXER_ID_ASC = 'DELEGATIONS_DISTINCT_COUNT_INDEXER_ID_ASC',
  DELEGATIONS_DISTINCT_COUNT_INDEXER_ID_DESC = 'DELEGATIONS_DISTINCT_COUNT_INDEXER_ID_DESC',
  DELEGATIONS_DISTINCT_COUNT_LAST_EVENT_ASC = 'DELEGATIONS_DISTINCT_COUNT_LAST_EVENT_ASC',
  DELEGATIONS_DISTINCT_COUNT_LAST_EVENT_DESC = 'DELEGATIONS_DISTINCT_COUNT_LAST_EVENT_DESC',
  DELEGATIONS_MAX_AMOUNT_ASC = 'DELEGATIONS_MAX_AMOUNT_ASC',
  DELEGATIONS_MAX_AMOUNT_DESC = 'DELEGATIONS_MAX_AMOUNT_DESC',
  DELEGATIONS_MAX_BLOCK_RANGE_ASC = 'DELEGATIONS_MAX_BLOCK_RANGE_ASC',
  DELEGATIONS_MAX_BLOCK_RANGE_DESC = 'DELEGATIONS_MAX_BLOCK_RANGE_DESC',
  DELEGATIONS_MAX_CREATED_BLOCK_ASC = 'DELEGATIONS_MAX_CREATED_BLOCK_ASC',
  DELEGATIONS_MAX_CREATED_BLOCK_DESC = 'DELEGATIONS_MAX_CREATED_BLOCK_DESC',
  DELEGATIONS_MAX_DELEGATOR_ID_ASC = 'DELEGATIONS_MAX_DELEGATOR_ID_ASC',
  DELEGATIONS_MAX_DELEGATOR_ID_DESC = 'DELEGATIONS_MAX_DELEGATOR_ID_DESC',
  DELEGATIONS_MAX_EXIT_ERA_ASC = 'DELEGATIONS_MAX_EXIT_ERA_ASC',
  DELEGATIONS_MAX_EXIT_ERA_DESC = 'DELEGATIONS_MAX_EXIT_ERA_DESC',
  DELEGATIONS_MAX_ID_ASC = 'DELEGATIONS_MAX_ID_ASC',
  DELEGATIONS_MAX_ID_DESC = 'DELEGATIONS_MAX_ID_DESC',
  DELEGATIONS_MAX_INDEXER_ID_ASC = 'DELEGATIONS_MAX_INDEXER_ID_ASC',
  DELEGATIONS_MAX_INDEXER_ID_DESC = 'DELEGATIONS_MAX_INDEXER_ID_DESC',
  DELEGATIONS_MAX_LAST_EVENT_ASC = 'DELEGATIONS_MAX_LAST_EVENT_ASC',
  DELEGATIONS_MAX_LAST_EVENT_DESC = 'DELEGATIONS_MAX_LAST_EVENT_DESC',
  DELEGATIONS_MIN_AMOUNT_ASC = 'DELEGATIONS_MIN_AMOUNT_ASC',
  DELEGATIONS_MIN_AMOUNT_DESC = 'DELEGATIONS_MIN_AMOUNT_DESC',
  DELEGATIONS_MIN_BLOCK_RANGE_ASC = 'DELEGATIONS_MIN_BLOCK_RANGE_ASC',
  DELEGATIONS_MIN_BLOCK_RANGE_DESC = 'DELEGATIONS_MIN_BLOCK_RANGE_DESC',
  DELEGATIONS_MIN_CREATED_BLOCK_ASC = 'DELEGATIONS_MIN_CREATED_BLOCK_ASC',
  DELEGATIONS_MIN_CREATED_BLOCK_DESC = 'DELEGATIONS_MIN_CREATED_BLOCK_DESC',
  DELEGATIONS_MIN_DELEGATOR_ID_ASC = 'DELEGATIONS_MIN_DELEGATOR_ID_ASC',
  DELEGATIONS_MIN_DELEGATOR_ID_DESC = 'DELEGATIONS_MIN_DELEGATOR_ID_DESC',
  DELEGATIONS_MIN_EXIT_ERA_ASC = 'DELEGATIONS_MIN_EXIT_ERA_ASC',
  DELEGATIONS_MIN_EXIT_ERA_DESC = 'DELEGATIONS_MIN_EXIT_ERA_DESC',
  DELEGATIONS_MIN_ID_ASC = 'DELEGATIONS_MIN_ID_ASC',
  DELEGATIONS_MIN_ID_DESC = 'DELEGATIONS_MIN_ID_DESC',
  DELEGATIONS_MIN_INDEXER_ID_ASC = 'DELEGATIONS_MIN_INDEXER_ID_ASC',
  DELEGATIONS_MIN_INDEXER_ID_DESC = 'DELEGATIONS_MIN_INDEXER_ID_DESC',
  DELEGATIONS_MIN_LAST_EVENT_ASC = 'DELEGATIONS_MIN_LAST_EVENT_ASC',
  DELEGATIONS_MIN_LAST_EVENT_DESC = 'DELEGATIONS_MIN_LAST_EVENT_DESC',
  DELEGATIONS_STDDEV_POPULATION_AMOUNT_ASC = 'DELEGATIONS_STDDEV_POPULATION_AMOUNT_ASC',
  DELEGATIONS_STDDEV_POPULATION_AMOUNT_DESC = 'DELEGATIONS_STDDEV_POPULATION_AMOUNT_DESC',
  DELEGATIONS_STDDEV_POPULATION_BLOCK_RANGE_ASC = 'DELEGATIONS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  DELEGATIONS_STDDEV_POPULATION_BLOCK_RANGE_DESC = 'DELEGATIONS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  DELEGATIONS_STDDEV_POPULATION_CREATED_BLOCK_ASC = 'DELEGATIONS_STDDEV_POPULATION_CREATED_BLOCK_ASC',
  DELEGATIONS_STDDEV_POPULATION_CREATED_BLOCK_DESC = 'DELEGATIONS_STDDEV_POPULATION_CREATED_BLOCK_DESC',
  DELEGATIONS_STDDEV_POPULATION_DELEGATOR_ID_ASC = 'DELEGATIONS_STDDEV_POPULATION_DELEGATOR_ID_ASC',
  DELEGATIONS_STDDEV_POPULATION_DELEGATOR_ID_DESC = 'DELEGATIONS_STDDEV_POPULATION_DELEGATOR_ID_DESC',
  DELEGATIONS_STDDEV_POPULATION_EXIT_ERA_ASC = 'DELEGATIONS_STDDEV_POPULATION_EXIT_ERA_ASC',
  DELEGATIONS_STDDEV_POPULATION_EXIT_ERA_DESC = 'DELEGATIONS_STDDEV_POPULATION_EXIT_ERA_DESC',
  DELEGATIONS_STDDEV_POPULATION_ID_ASC = 'DELEGATIONS_STDDEV_POPULATION_ID_ASC',
  DELEGATIONS_STDDEV_POPULATION_ID_DESC = 'DELEGATIONS_STDDEV_POPULATION_ID_DESC',
  DELEGATIONS_STDDEV_POPULATION_INDEXER_ID_ASC = 'DELEGATIONS_STDDEV_POPULATION_INDEXER_ID_ASC',
  DELEGATIONS_STDDEV_POPULATION_INDEXER_ID_DESC = 'DELEGATIONS_STDDEV_POPULATION_INDEXER_ID_DESC',
  DELEGATIONS_STDDEV_POPULATION_LAST_EVENT_ASC = 'DELEGATIONS_STDDEV_POPULATION_LAST_EVENT_ASC',
  DELEGATIONS_STDDEV_POPULATION_LAST_EVENT_DESC = 'DELEGATIONS_STDDEV_POPULATION_LAST_EVENT_DESC',
  DELEGATIONS_STDDEV_SAMPLE_AMOUNT_ASC = 'DELEGATIONS_STDDEV_SAMPLE_AMOUNT_ASC',
  DELEGATIONS_STDDEV_SAMPLE_AMOUNT_DESC = 'DELEGATIONS_STDDEV_SAMPLE_AMOUNT_DESC',
  DELEGATIONS_STDDEV_SAMPLE_BLOCK_RANGE_ASC = 'DELEGATIONS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  DELEGATIONS_STDDEV_SAMPLE_BLOCK_RANGE_DESC = 'DELEGATIONS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  DELEGATIONS_STDDEV_SAMPLE_CREATED_BLOCK_ASC = 'DELEGATIONS_STDDEV_SAMPLE_CREATED_BLOCK_ASC',
  DELEGATIONS_STDDEV_SAMPLE_CREATED_BLOCK_DESC = 'DELEGATIONS_STDDEV_SAMPLE_CREATED_BLOCK_DESC',
  DELEGATIONS_STDDEV_SAMPLE_DELEGATOR_ID_ASC = 'DELEGATIONS_STDDEV_SAMPLE_DELEGATOR_ID_ASC',
  DELEGATIONS_STDDEV_SAMPLE_DELEGATOR_ID_DESC = 'DELEGATIONS_STDDEV_SAMPLE_DELEGATOR_ID_DESC',
  DELEGATIONS_STDDEV_SAMPLE_EXIT_ERA_ASC = 'DELEGATIONS_STDDEV_SAMPLE_EXIT_ERA_ASC',
  DELEGATIONS_STDDEV_SAMPLE_EXIT_ERA_DESC = 'DELEGATIONS_STDDEV_SAMPLE_EXIT_ERA_DESC',
  DELEGATIONS_STDDEV_SAMPLE_ID_ASC = 'DELEGATIONS_STDDEV_SAMPLE_ID_ASC',
  DELEGATIONS_STDDEV_SAMPLE_ID_DESC = 'DELEGATIONS_STDDEV_SAMPLE_ID_DESC',
  DELEGATIONS_STDDEV_SAMPLE_INDEXER_ID_ASC = 'DELEGATIONS_STDDEV_SAMPLE_INDEXER_ID_ASC',
  DELEGATIONS_STDDEV_SAMPLE_INDEXER_ID_DESC = 'DELEGATIONS_STDDEV_SAMPLE_INDEXER_ID_DESC',
  DELEGATIONS_STDDEV_SAMPLE_LAST_EVENT_ASC = 'DELEGATIONS_STDDEV_SAMPLE_LAST_EVENT_ASC',
  DELEGATIONS_STDDEV_SAMPLE_LAST_EVENT_DESC = 'DELEGATIONS_STDDEV_SAMPLE_LAST_EVENT_DESC',
  DELEGATIONS_SUM_AMOUNT_ASC = 'DELEGATIONS_SUM_AMOUNT_ASC',
  DELEGATIONS_SUM_AMOUNT_DESC = 'DELEGATIONS_SUM_AMOUNT_DESC',
  DELEGATIONS_SUM_BLOCK_RANGE_ASC = 'DELEGATIONS_SUM_BLOCK_RANGE_ASC',
  DELEGATIONS_SUM_BLOCK_RANGE_DESC = 'DELEGATIONS_SUM_BLOCK_RANGE_DESC',
  DELEGATIONS_SUM_CREATED_BLOCK_ASC = 'DELEGATIONS_SUM_CREATED_BLOCK_ASC',
  DELEGATIONS_SUM_CREATED_BLOCK_DESC = 'DELEGATIONS_SUM_CREATED_BLOCK_DESC',
  DELEGATIONS_SUM_DELEGATOR_ID_ASC = 'DELEGATIONS_SUM_DELEGATOR_ID_ASC',
  DELEGATIONS_SUM_DELEGATOR_ID_DESC = 'DELEGATIONS_SUM_DELEGATOR_ID_DESC',
  DELEGATIONS_SUM_EXIT_ERA_ASC = 'DELEGATIONS_SUM_EXIT_ERA_ASC',
  DELEGATIONS_SUM_EXIT_ERA_DESC = 'DELEGATIONS_SUM_EXIT_ERA_DESC',
  DELEGATIONS_SUM_ID_ASC = 'DELEGATIONS_SUM_ID_ASC',
  DELEGATIONS_SUM_ID_DESC = 'DELEGATIONS_SUM_ID_DESC',
  DELEGATIONS_SUM_INDEXER_ID_ASC = 'DELEGATIONS_SUM_INDEXER_ID_ASC',
  DELEGATIONS_SUM_INDEXER_ID_DESC = 'DELEGATIONS_SUM_INDEXER_ID_DESC',
  DELEGATIONS_SUM_LAST_EVENT_ASC = 'DELEGATIONS_SUM_LAST_EVENT_ASC',
  DELEGATIONS_SUM_LAST_EVENT_DESC = 'DELEGATIONS_SUM_LAST_EVENT_DESC',
  DELEGATIONS_VARIANCE_POPULATION_AMOUNT_ASC = 'DELEGATIONS_VARIANCE_POPULATION_AMOUNT_ASC',
  DELEGATIONS_VARIANCE_POPULATION_AMOUNT_DESC = 'DELEGATIONS_VARIANCE_POPULATION_AMOUNT_DESC',
  DELEGATIONS_VARIANCE_POPULATION_BLOCK_RANGE_ASC = 'DELEGATIONS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  DELEGATIONS_VARIANCE_POPULATION_BLOCK_RANGE_DESC = 'DELEGATIONS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  DELEGATIONS_VARIANCE_POPULATION_CREATED_BLOCK_ASC = 'DELEGATIONS_VARIANCE_POPULATION_CREATED_BLOCK_ASC',
  DELEGATIONS_VARIANCE_POPULATION_CREATED_BLOCK_DESC = 'DELEGATIONS_VARIANCE_POPULATION_CREATED_BLOCK_DESC',
  DELEGATIONS_VARIANCE_POPULATION_DELEGATOR_ID_ASC = 'DELEGATIONS_VARIANCE_POPULATION_DELEGATOR_ID_ASC',
  DELEGATIONS_VARIANCE_POPULATION_DELEGATOR_ID_DESC = 'DELEGATIONS_VARIANCE_POPULATION_DELEGATOR_ID_DESC',
  DELEGATIONS_VARIANCE_POPULATION_EXIT_ERA_ASC = 'DELEGATIONS_VARIANCE_POPULATION_EXIT_ERA_ASC',
  DELEGATIONS_VARIANCE_POPULATION_EXIT_ERA_DESC = 'DELEGATIONS_VARIANCE_POPULATION_EXIT_ERA_DESC',
  DELEGATIONS_VARIANCE_POPULATION_ID_ASC = 'DELEGATIONS_VARIANCE_POPULATION_ID_ASC',
  DELEGATIONS_VARIANCE_POPULATION_ID_DESC = 'DELEGATIONS_VARIANCE_POPULATION_ID_DESC',
  DELEGATIONS_VARIANCE_POPULATION_INDEXER_ID_ASC = 'DELEGATIONS_VARIANCE_POPULATION_INDEXER_ID_ASC',
  DELEGATIONS_VARIANCE_POPULATION_INDEXER_ID_DESC = 'DELEGATIONS_VARIANCE_POPULATION_INDEXER_ID_DESC',
  DELEGATIONS_VARIANCE_POPULATION_LAST_EVENT_ASC = 'DELEGATIONS_VARIANCE_POPULATION_LAST_EVENT_ASC',
  DELEGATIONS_VARIANCE_POPULATION_LAST_EVENT_DESC = 'DELEGATIONS_VARIANCE_POPULATION_LAST_EVENT_DESC',
  DELEGATIONS_VARIANCE_SAMPLE_AMOUNT_ASC = 'DELEGATIONS_VARIANCE_SAMPLE_AMOUNT_ASC',
  DELEGATIONS_VARIANCE_SAMPLE_AMOUNT_DESC = 'DELEGATIONS_VARIANCE_SAMPLE_AMOUNT_DESC',
  DELEGATIONS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC = 'DELEGATIONS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  DELEGATIONS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC = 'DELEGATIONS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  DELEGATIONS_VARIANCE_SAMPLE_CREATED_BLOCK_ASC = 'DELEGATIONS_VARIANCE_SAMPLE_CREATED_BLOCK_ASC',
  DELEGATIONS_VARIANCE_SAMPLE_CREATED_BLOCK_DESC = 'DELEGATIONS_VARIANCE_SAMPLE_CREATED_BLOCK_DESC',
  DELEGATIONS_VARIANCE_SAMPLE_DELEGATOR_ID_ASC = 'DELEGATIONS_VARIANCE_SAMPLE_DELEGATOR_ID_ASC',
  DELEGATIONS_VARIANCE_SAMPLE_DELEGATOR_ID_DESC = 'DELEGATIONS_VARIANCE_SAMPLE_DELEGATOR_ID_DESC',
  DELEGATIONS_VARIANCE_SAMPLE_EXIT_ERA_ASC = 'DELEGATIONS_VARIANCE_SAMPLE_EXIT_ERA_ASC',
  DELEGATIONS_VARIANCE_SAMPLE_EXIT_ERA_DESC = 'DELEGATIONS_VARIANCE_SAMPLE_EXIT_ERA_DESC',
  DELEGATIONS_VARIANCE_SAMPLE_ID_ASC = 'DELEGATIONS_VARIANCE_SAMPLE_ID_ASC',
  DELEGATIONS_VARIANCE_SAMPLE_ID_DESC = 'DELEGATIONS_VARIANCE_SAMPLE_ID_DESC',
  DELEGATIONS_VARIANCE_SAMPLE_INDEXER_ID_ASC = 'DELEGATIONS_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  DELEGATIONS_VARIANCE_SAMPLE_INDEXER_ID_DESC = 'DELEGATIONS_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  DELEGATIONS_VARIANCE_SAMPLE_LAST_EVENT_ASC = 'DELEGATIONS_VARIANCE_SAMPLE_LAST_EVENT_ASC',
  DELEGATIONS_VARIANCE_SAMPLE_LAST_EVENT_DESC = 'DELEGATIONS_VARIANCE_SAMPLE_LAST_EVENT_DESC',
  ERA_DELEGATOR_APIES_AVERAGE_APY_ASC = 'ERA_DELEGATOR_APIES_AVERAGE_APY_ASC',
  ERA_DELEGATOR_APIES_AVERAGE_APY_DESC = 'ERA_DELEGATOR_APIES_AVERAGE_APY_DESC',
  ERA_DELEGATOR_APIES_AVERAGE_BLOCK_RANGE_ASC = 'ERA_DELEGATOR_APIES_AVERAGE_BLOCK_RANGE_ASC',
  ERA_DELEGATOR_APIES_AVERAGE_BLOCK_RANGE_DESC = 'ERA_DELEGATOR_APIES_AVERAGE_BLOCK_RANGE_DESC',
  ERA_DELEGATOR_APIES_AVERAGE_CREATE_AT_ASC = 'ERA_DELEGATOR_APIES_AVERAGE_CREATE_AT_ASC',
  ERA_DELEGATOR_APIES_AVERAGE_CREATE_AT_DESC = 'ERA_DELEGATOR_APIES_AVERAGE_CREATE_AT_DESC',
  ERA_DELEGATOR_APIES_AVERAGE_DELEGATOR_ID_ASC = 'ERA_DELEGATOR_APIES_AVERAGE_DELEGATOR_ID_ASC',
  ERA_DELEGATOR_APIES_AVERAGE_DELEGATOR_ID_DESC = 'ERA_DELEGATOR_APIES_AVERAGE_DELEGATOR_ID_DESC',
  ERA_DELEGATOR_APIES_AVERAGE_ERA_IDX_ASC = 'ERA_DELEGATOR_APIES_AVERAGE_ERA_IDX_ASC',
  ERA_DELEGATOR_APIES_AVERAGE_ERA_IDX_DESC = 'ERA_DELEGATOR_APIES_AVERAGE_ERA_IDX_DESC',
  ERA_DELEGATOR_APIES_AVERAGE_ID_ASC = 'ERA_DELEGATOR_APIES_AVERAGE_ID_ASC',
  ERA_DELEGATOR_APIES_AVERAGE_ID_DESC = 'ERA_DELEGATOR_APIES_AVERAGE_ID_DESC',
  ERA_DELEGATOR_APIES_AVERAGE_REWARD_ASC = 'ERA_DELEGATOR_APIES_AVERAGE_REWARD_ASC',
  ERA_DELEGATOR_APIES_AVERAGE_REWARD_DESC = 'ERA_DELEGATOR_APIES_AVERAGE_REWARD_DESC',
  ERA_DELEGATOR_APIES_AVERAGE_UPDATE_AT_ASC = 'ERA_DELEGATOR_APIES_AVERAGE_UPDATE_AT_ASC',
  ERA_DELEGATOR_APIES_AVERAGE_UPDATE_AT_DESC = 'ERA_DELEGATOR_APIES_AVERAGE_UPDATE_AT_DESC',
  ERA_DELEGATOR_APIES_BY_DELEGATOR_ID__COUNT_ASC = 'ERA_DELEGATOR_APIES_BY_DELEGATOR_ID__COUNT_ASC',
  ERA_DELEGATOR_APIES_BY_DELEGATOR_ID__COUNT_DESC = 'ERA_DELEGATOR_APIES_BY_DELEGATOR_ID__COUNT_DESC',
  ERA_DELEGATOR_APIES_COUNT_ASC = 'ERA_DELEGATOR_APIES_COUNT_ASC',
  ERA_DELEGATOR_APIES_COUNT_DESC = 'ERA_DELEGATOR_APIES_COUNT_DESC',
  ERA_DELEGATOR_APIES_DISTINCT_COUNT_APY_ASC = 'ERA_DELEGATOR_APIES_DISTINCT_COUNT_APY_ASC',
  ERA_DELEGATOR_APIES_DISTINCT_COUNT_APY_DESC = 'ERA_DELEGATOR_APIES_DISTINCT_COUNT_APY_DESC',
  ERA_DELEGATOR_APIES_DISTINCT_COUNT_BLOCK_RANGE_ASC = 'ERA_DELEGATOR_APIES_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  ERA_DELEGATOR_APIES_DISTINCT_COUNT_BLOCK_RANGE_DESC = 'ERA_DELEGATOR_APIES_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  ERA_DELEGATOR_APIES_DISTINCT_COUNT_CREATE_AT_ASC = 'ERA_DELEGATOR_APIES_DISTINCT_COUNT_CREATE_AT_ASC',
  ERA_DELEGATOR_APIES_DISTINCT_COUNT_CREATE_AT_DESC = 'ERA_DELEGATOR_APIES_DISTINCT_COUNT_CREATE_AT_DESC',
  ERA_DELEGATOR_APIES_DISTINCT_COUNT_DELEGATOR_ID_ASC = 'ERA_DELEGATOR_APIES_DISTINCT_COUNT_DELEGATOR_ID_ASC',
  ERA_DELEGATOR_APIES_DISTINCT_COUNT_DELEGATOR_ID_DESC = 'ERA_DELEGATOR_APIES_DISTINCT_COUNT_DELEGATOR_ID_DESC',
  ERA_DELEGATOR_APIES_DISTINCT_COUNT_ERA_IDX_ASC = 'ERA_DELEGATOR_APIES_DISTINCT_COUNT_ERA_IDX_ASC',
  ERA_DELEGATOR_APIES_DISTINCT_COUNT_ERA_IDX_DESC = 'ERA_DELEGATOR_APIES_DISTINCT_COUNT_ERA_IDX_DESC',
  ERA_DELEGATOR_APIES_DISTINCT_COUNT_ID_ASC = 'ERA_DELEGATOR_APIES_DISTINCT_COUNT_ID_ASC',
  ERA_DELEGATOR_APIES_DISTINCT_COUNT_ID_DESC = 'ERA_DELEGATOR_APIES_DISTINCT_COUNT_ID_DESC',
  ERA_DELEGATOR_APIES_DISTINCT_COUNT_REWARD_ASC = 'ERA_DELEGATOR_APIES_DISTINCT_COUNT_REWARD_ASC',
  ERA_DELEGATOR_APIES_DISTINCT_COUNT_REWARD_DESC = 'ERA_DELEGATOR_APIES_DISTINCT_COUNT_REWARD_DESC',
  ERA_DELEGATOR_APIES_DISTINCT_COUNT_UPDATE_AT_ASC = 'ERA_DELEGATOR_APIES_DISTINCT_COUNT_UPDATE_AT_ASC',
  ERA_DELEGATOR_APIES_DISTINCT_COUNT_UPDATE_AT_DESC = 'ERA_DELEGATOR_APIES_DISTINCT_COUNT_UPDATE_AT_DESC',
  ERA_DELEGATOR_APIES_MAX_APY_ASC = 'ERA_DELEGATOR_APIES_MAX_APY_ASC',
  ERA_DELEGATOR_APIES_MAX_APY_DESC = 'ERA_DELEGATOR_APIES_MAX_APY_DESC',
  ERA_DELEGATOR_APIES_MAX_BLOCK_RANGE_ASC = 'ERA_DELEGATOR_APIES_MAX_BLOCK_RANGE_ASC',
  ERA_DELEGATOR_APIES_MAX_BLOCK_RANGE_DESC = 'ERA_DELEGATOR_APIES_MAX_BLOCK_RANGE_DESC',
  ERA_DELEGATOR_APIES_MAX_CREATE_AT_ASC = 'ERA_DELEGATOR_APIES_MAX_CREATE_AT_ASC',
  ERA_DELEGATOR_APIES_MAX_CREATE_AT_DESC = 'ERA_DELEGATOR_APIES_MAX_CREATE_AT_DESC',
  ERA_DELEGATOR_APIES_MAX_DELEGATOR_ID_ASC = 'ERA_DELEGATOR_APIES_MAX_DELEGATOR_ID_ASC',
  ERA_DELEGATOR_APIES_MAX_DELEGATOR_ID_DESC = 'ERA_DELEGATOR_APIES_MAX_DELEGATOR_ID_DESC',
  ERA_DELEGATOR_APIES_MAX_ERA_IDX_ASC = 'ERA_DELEGATOR_APIES_MAX_ERA_IDX_ASC',
  ERA_DELEGATOR_APIES_MAX_ERA_IDX_DESC = 'ERA_DELEGATOR_APIES_MAX_ERA_IDX_DESC',
  ERA_DELEGATOR_APIES_MAX_ID_ASC = 'ERA_DELEGATOR_APIES_MAX_ID_ASC',
  ERA_DELEGATOR_APIES_MAX_ID_DESC = 'ERA_DELEGATOR_APIES_MAX_ID_DESC',
  ERA_DELEGATOR_APIES_MAX_REWARD_ASC = 'ERA_DELEGATOR_APIES_MAX_REWARD_ASC',
  ERA_DELEGATOR_APIES_MAX_REWARD_DESC = 'ERA_DELEGATOR_APIES_MAX_REWARD_DESC',
  ERA_DELEGATOR_APIES_MAX_UPDATE_AT_ASC = 'ERA_DELEGATOR_APIES_MAX_UPDATE_AT_ASC',
  ERA_DELEGATOR_APIES_MAX_UPDATE_AT_DESC = 'ERA_DELEGATOR_APIES_MAX_UPDATE_AT_DESC',
  ERA_DELEGATOR_APIES_MIN_APY_ASC = 'ERA_DELEGATOR_APIES_MIN_APY_ASC',
  ERA_DELEGATOR_APIES_MIN_APY_DESC = 'ERA_DELEGATOR_APIES_MIN_APY_DESC',
  ERA_DELEGATOR_APIES_MIN_BLOCK_RANGE_ASC = 'ERA_DELEGATOR_APIES_MIN_BLOCK_RANGE_ASC',
  ERA_DELEGATOR_APIES_MIN_BLOCK_RANGE_DESC = 'ERA_DELEGATOR_APIES_MIN_BLOCK_RANGE_DESC',
  ERA_DELEGATOR_APIES_MIN_CREATE_AT_ASC = 'ERA_DELEGATOR_APIES_MIN_CREATE_AT_ASC',
  ERA_DELEGATOR_APIES_MIN_CREATE_AT_DESC = 'ERA_DELEGATOR_APIES_MIN_CREATE_AT_DESC',
  ERA_DELEGATOR_APIES_MIN_DELEGATOR_ID_ASC = 'ERA_DELEGATOR_APIES_MIN_DELEGATOR_ID_ASC',
  ERA_DELEGATOR_APIES_MIN_DELEGATOR_ID_DESC = 'ERA_DELEGATOR_APIES_MIN_DELEGATOR_ID_DESC',
  ERA_DELEGATOR_APIES_MIN_ERA_IDX_ASC = 'ERA_DELEGATOR_APIES_MIN_ERA_IDX_ASC',
  ERA_DELEGATOR_APIES_MIN_ERA_IDX_DESC = 'ERA_DELEGATOR_APIES_MIN_ERA_IDX_DESC',
  ERA_DELEGATOR_APIES_MIN_ID_ASC = 'ERA_DELEGATOR_APIES_MIN_ID_ASC',
  ERA_DELEGATOR_APIES_MIN_ID_DESC = 'ERA_DELEGATOR_APIES_MIN_ID_DESC',
  ERA_DELEGATOR_APIES_MIN_REWARD_ASC = 'ERA_DELEGATOR_APIES_MIN_REWARD_ASC',
  ERA_DELEGATOR_APIES_MIN_REWARD_DESC = 'ERA_DELEGATOR_APIES_MIN_REWARD_DESC',
  ERA_DELEGATOR_APIES_MIN_UPDATE_AT_ASC = 'ERA_DELEGATOR_APIES_MIN_UPDATE_AT_ASC',
  ERA_DELEGATOR_APIES_MIN_UPDATE_AT_DESC = 'ERA_DELEGATOR_APIES_MIN_UPDATE_AT_DESC',
  ERA_DELEGATOR_APIES_STDDEV_POPULATION_APY_ASC = 'ERA_DELEGATOR_APIES_STDDEV_POPULATION_APY_ASC',
  ERA_DELEGATOR_APIES_STDDEV_POPULATION_APY_DESC = 'ERA_DELEGATOR_APIES_STDDEV_POPULATION_APY_DESC',
  ERA_DELEGATOR_APIES_STDDEV_POPULATION_BLOCK_RANGE_ASC = 'ERA_DELEGATOR_APIES_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  ERA_DELEGATOR_APIES_STDDEV_POPULATION_BLOCK_RANGE_DESC = 'ERA_DELEGATOR_APIES_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  ERA_DELEGATOR_APIES_STDDEV_POPULATION_CREATE_AT_ASC = 'ERA_DELEGATOR_APIES_STDDEV_POPULATION_CREATE_AT_ASC',
  ERA_DELEGATOR_APIES_STDDEV_POPULATION_CREATE_AT_DESC = 'ERA_DELEGATOR_APIES_STDDEV_POPULATION_CREATE_AT_DESC',
  ERA_DELEGATOR_APIES_STDDEV_POPULATION_DELEGATOR_ID_ASC = 'ERA_DELEGATOR_APIES_STDDEV_POPULATION_DELEGATOR_ID_ASC',
  ERA_DELEGATOR_APIES_STDDEV_POPULATION_DELEGATOR_ID_DESC = 'ERA_DELEGATOR_APIES_STDDEV_POPULATION_DELEGATOR_ID_DESC',
  ERA_DELEGATOR_APIES_STDDEV_POPULATION_ERA_IDX_ASC = 'ERA_DELEGATOR_APIES_STDDEV_POPULATION_ERA_IDX_ASC',
  ERA_DELEGATOR_APIES_STDDEV_POPULATION_ERA_IDX_DESC = 'ERA_DELEGATOR_APIES_STDDEV_POPULATION_ERA_IDX_DESC',
  ERA_DELEGATOR_APIES_STDDEV_POPULATION_ID_ASC = 'ERA_DELEGATOR_APIES_STDDEV_POPULATION_ID_ASC',
  ERA_DELEGATOR_APIES_STDDEV_POPULATION_ID_DESC = 'ERA_DELEGATOR_APIES_STDDEV_POPULATION_ID_DESC',
  ERA_DELEGATOR_APIES_STDDEV_POPULATION_REWARD_ASC = 'ERA_DELEGATOR_APIES_STDDEV_POPULATION_REWARD_ASC',
  ERA_DELEGATOR_APIES_STDDEV_POPULATION_REWARD_DESC = 'ERA_DELEGATOR_APIES_STDDEV_POPULATION_REWARD_DESC',
  ERA_DELEGATOR_APIES_STDDEV_POPULATION_UPDATE_AT_ASC = 'ERA_DELEGATOR_APIES_STDDEV_POPULATION_UPDATE_AT_ASC',
  ERA_DELEGATOR_APIES_STDDEV_POPULATION_UPDATE_AT_DESC = 'ERA_DELEGATOR_APIES_STDDEV_POPULATION_UPDATE_AT_DESC',
  ERA_DELEGATOR_APIES_STDDEV_SAMPLE_APY_ASC = 'ERA_DELEGATOR_APIES_STDDEV_SAMPLE_APY_ASC',
  ERA_DELEGATOR_APIES_STDDEV_SAMPLE_APY_DESC = 'ERA_DELEGATOR_APIES_STDDEV_SAMPLE_APY_DESC',
  ERA_DELEGATOR_APIES_STDDEV_SAMPLE_BLOCK_RANGE_ASC = 'ERA_DELEGATOR_APIES_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  ERA_DELEGATOR_APIES_STDDEV_SAMPLE_BLOCK_RANGE_DESC = 'ERA_DELEGATOR_APIES_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  ERA_DELEGATOR_APIES_STDDEV_SAMPLE_CREATE_AT_ASC = 'ERA_DELEGATOR_APIES_STDDEV_SAMPLE_CREATE_AT_ASC',
  ERA_DELEGATOR_APIES_STDDEV_SAMPLE_CREATE_AT_DESC = 'ERA_DELEGATOR_APIES_STDDEV_SAMPLE_CREATE_AT_DESC',
  ERA_DELEGATOR_APIES_STDDEV_SAMPLE_DELEGATOR_ID_ASC = 'ERA_DELEGATOR_APIES_STDDEV_SAMPLE_DELEGATOR_ID_ASC',
  ERA_DELEGATOR_APIES_STDDEV_SAMPLE_DELEGATOR_ID_DESC = 'ERA_DELEGATOR_APIES_STDDEV_SAMPLE_DELEGATOR_ID_DESC',
  ERA_DELEGATOR_APIES_STDDEV_SAMPLE_ERA_IDX_ASC = 'ERA_DELEGATOR_APIES_STDDEV_SAMPLE_ERA_IDX_ASC',
  ERA_DELEGATOR_APIES_STDDEV_SAMPLE_ERA_IDX_DESC = 'ERA_DELEGATOR_APIES_STDDEV_SAMPLE_ERA_IDX_DESC',
  ERA_DELEGATOR_APIES_STDDEV_SAMPLE_ID_ASC = 'ERA_DELEGATOR_APIES_STDDEV_SAMPLE_ID_ASC',
  ERA_DELEGATOR_APIES_STDDEV_SAMPLE_ID_DESC = 'ERA_DELEGATOR_APIES_STDDEV_SAMPLE_ID_DESC',
  ERA_DELEGATOR_APIES_STDDEV_SAMPLE_REWARD_ASC = 'ERA_DELEGATOR_APIES_STDDEV_SAMPLE_REWARD_ASC',
  ERA_DELEGATOR_APIES_STDDEV_SAMPLE_REWARD_DESC = 'ERA_DELEGATOR_APIES_STDDEV_SAMPLE_REWARD_DESC',
  ERA_DELEGATOR_APIES_STDDEV_SAMPLE_UPDATE_AT_ASC = 'ERA_DELEGATOR_APIES_STDDEV_SAMPLE_UPDATE_AT_ASC',
  ERA_DELEGATOR_APIES_STDDEV_SAMPLE_UPDATE_AT_DESC = 'ERA_DELEGATOR_APIES_STDDEV_SAMPLE_UPDATE_AT_DESC',
  ERA_DELEGATOR_APIES_SUM_APY_ASC = 'ERA_DELEGATOR_APIES_SUM_APY_ASC',
  ERA_DELEGATOR_APIES_SUM_APY_DESC = 'ERA_DELEGATOR_APIES_SUM_APY_DESC',
  ERA_DELEGATOR_APIES_SUM_BLOCK_RANGE_ASC = 'ERA_DELEGATOR_APIES_SUM_BLOCK_RANGE_ASC',
  ERA_DELEGATOR_APIES_SUM_BLOCK_RANGE_DESC = 'ERA_DELEGATOR_APIES_SUM_BLOCK_RANGE_DESC',
  ERA_DELEGATOR_APIES_SUM_CREATE_AT_ASC = 'ERA_DELEGATOR_APIES_SUM_CREATE_AT_ASC',
  ERA_DELEGATOR_APIES_SUM_CREATE_AT_DESC = 'ERA_DELEGATOR_APIES_SUM_CREATE_AT_DESC',
  ERA_DELEGATOR_APIES_SUM_DELEGATOR_ID_ASC = 'ERA_DELEGATOR_APIES_SUM_DELEGATOR_ID_ASC',
  ERA_DELEGATOR_APIES_SUM_DELEGATOR_ID_DESC = 'ERA_DELEGATOR_APIES_SUM_DELEGATOR_ID_DESC',
  ERA_DELEGATOR_APIES_SUM_ERA_IDX_ASC = 'ERA_DELEGATOR_APIES_SUM_ERA_IDX_ASC',
  ERA_DELEGATOR_APIES_SUM_ERA_IDX_DESC = 'ERA_DELEGATOR_APIES_SUM_ERA_IDX_DESC',
  ERA_DELEGATOR_APIES_SUM_ID_ASC = 'ERA_DELEGATOR_APIES_SUM_ID_ASC',
  ERA_DELEGATOR_APIES_SUM_ID_DESC = 'ERA_DELEGATOR_APIES_SUM_ID_DESC',
  ERA_DELEGATOR_APIES_SUM_REWARD_ASC = 'ERA_DELEGATOR_APIES_SUM_REWARD_ASC',
  ERA_DELEGATOR_APIES_SUM_REWARD_DESC = 'ERA_DELEGATOR_APIES_SUM_REWARD_DESC',
  ERA_DELEGATOR_APIES_SUM_UPDATE_AT_ASC = 'ERA_DELEGATOR_APIES_SUM_UPDATE_AT_ASC',
  ERA_DELEGATOR_APIES_SUM_UPDATE_AT_DESC = 'ERA_DELEGATOR_APIES_SUM_UPDATE_AT_DESC',
  ERA_DELEGATOR_APIES_VARIANCE_POPULATION_APY_ASC = 'ERA_DELEGATOR_APIES_VARIANCE_POPULATION_APY_ASC',
  ERA_DELEGATOR_APIES_VARIANCE_POPULATION_APY_DESC = 'ERA_DELEGATOR_APIES_VARIANCE_POPULATION_APY_DESC',
  ERA_DELEGATOR_APIES_VARIANCE_POPULATION_BLOCK_RANGE_ASC = 'ERA_DELEGATOR_APIES_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  ERA_DELEGATOR_APIES_VARIANCE_POPULATION_BLOCK_RANGE_DESC = 'ERA_DELEGATOR_APIES_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  ERA_DELEGATOR_APIES_VARIANCE_POPULATION_CREATE_AT_ASC = 'ERA_DELEGATOR_APIES_VARIANCE_POPULATION_CREATE_AT_ASC',
  ERA_DELEGATOR_APIES_VARIANCE_POPULATION_CREATE_AT_DESC = 'ERA_DELEGATOR_APIES_VARIANCE_POPULATION_CREATE_AT_DESC',
  ERA_DELEGATOR_APIES_VARIANCE_POPULATION_DELEGATOR_ID_ASC = 'ERA_DELEGATOR_APIES_VARIANCE_POPULATION_DELEGATOR_ID_ASC',
  ERA_DELEGATOR_APIES_VARIANCE_POPULATION_DELEGATOR_ID_DESC = 'ERA_DELEGATOR_APIES_VARIANCE_POPULATION_DELEGATOR_ID_DESC',
  ERA_DELEGATOR_APIES_VARIANCE_POPULATION_ERA_IDX_ASC = 'ERA_DELEGATOR_APIES_VARIANCE_POPULATION_ERA_IDX_ASC',
  ERA_DELEGATOR_APIES_VARIANCE_POPULATION_ERA_IDX_DESC = 'ERA_DELEGATOR_APIES_VARIANCE_POPULATION_ERA_IDX_DESC',
  ERA_DELEGATOR_APIES_VARIANCE_POPULATION_ID_ASC = 'ERA_DELEGATOR_APIES_VARIANCE_POPULATION_ID_ASC',
  ERA_DELEGATOR_APIES_VARIANCE_POPULATION_ID_DESC = 'ERA_DELEGATOR_APIES_VARIANCE_POPULATION_ID_DESC',
  ERA_DELEGATOR_APIES_VARIANCE_POPULATION_REWARD_ASC = 'ERA_DELEGATOR_APIES_VARIANCE_POPULATION_REWARD_ASC',
  ERA_DELEGATOR_APIES_VARIANCE_POPULATION_REWARD_DESC = 'ERA_DELEGATOR_APIES_VARIANCE_POPULATION_REWARD_DESC',
  ERA_DELEGATOR_APIES_VARIANCE_POPULATION_UPDATE_AT_ASC = 'ERA_DELEGATOR_APIES_VARIANCE_POPULATION_UPDATE_AT_ASC',
  ERA_DELEGATOR_APIES_VARIANCE_POPULATION_UPDATE_AT_DESC = 'ERA_DELEGATOR_APIES_VARIANCE_POPULATION_UPDATE_AT_DESC',
  ERA_DELEGATOR_APIES_VARIANCE_SAMPLE_APY_ASC = 'ERA_DELEGATOR_APIES_VARIANCE_SAMPLE_APY_ASC',
  ERA_DELEGATOR_APIES_VARIANCE_SAMPLE_APY_DESC = 'ERA_DELEGATOR_APIES_VARIANCE_SAMPLE_APY_DESC',
  ERA_DELEGATOR_APIES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC = 'ERA_DELEGATOR_APIES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  ERA_DELEGATOR_APIES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC = 'ERA_DELEGATOR_APIES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  ERA_DELEGATOR_APIES_VARIANCE_SAMPLE_CREATE_AT_ASC = 'ERA_DELEGATOR_APIES_VARIANCE_SAMPLE_CREATE_AT_ASC',
  ERA_DELEGATOR_APIES_VARIANCE_SAMPLE_CREATE_AT_DESC = 'ERA_DELEGATOR_APIES_VARIANCE_SAMPLE_CREATE_AT_DESC',
  ERA_DELEGATOR_APIES_VARIANCE_SAMPLE_DELEGATOR_ID_ASC = 'ERA_DELEGATOR_APIES_VARIANCE_SAMPLE_DELEGATOR_ID_ASC',
  ERA_DELEGATOR_APIES_VARIANCE_SAMPLE_DELEGATOR_ID_DESC = 'ERA_DELEGATOR_APIES_VARIANCE_SAMPLE_DELEGATOR_ID_DESC',
  ERA_DELEGATOR_APIES_VARIANCE_SAMPLE_ERA_IDX_ASC = 'ERA_DELEGATOR_APIES_VARIANCE_SAMPLE_ERA_IDX_ASC',
  ERA_DELEGATOR_APIES_VARIANCE_SAMPLE_ERA_IDX_DESC = 'ERA_DELEGATOR_APIES_VARIANCE_SAMPLE_ERA_IDX_DESC',
  ERA_DELEGATOR_APIES_VARIANCE_SAMPLE_ID_ASC = 'ERA_DELEGATOR_APIES_VARIANCE_SAMPLE_ID_ASC',
  ERA_DELEGATOR_APIES_VARIANCE_SAMPLE_ID_DESC = 'ERA_DELEGATOR_APIES_VARIANCE_SAMPLE_ID_DESC',
  ERA_DELEGATOR_APIES_VARIANCE_SAMPLE_REWARD_ASC = 'ERA_DELEGATOR_APIES_VARIANCE_SAMPLE_REWARD_ASC',
  ERA_DELEGATOR_APIES_VARIANCE_SAMPLE_REWARD_DESC = 'ERA_DELEGATOR_APIES_VARIANCE_SAMPLE_REWARD_DESC',
  ERA_DELEGATOR_APIES_VARIANCE_SAMPLE_UPDATE_AT_ASC = 'ERA_DELEGATOR_APIES_VARIANCE_SAMPLE_UPDATE_AT_ASC',
  ERA_DELEGATOR_APIES_VARIANCE_SAMPLE_UPDATE_AT_DESC = 'ERA_DELEGATOR_APIES_VARIANCE_SAMPLE_UPDATE_AT_DESC',
  ERA_DELEGATOR_INDEXER_APIES_AVERAGE_APY_ASC = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_APY_ASC',
  ERA_DELEGATOR_INDEXER_APIES_AVERAGE_APY_DESC = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_APY_DESC',
  ERA_DELEGATOR_INDEXER_APIES_AVERAGE_BLOCK_RANGE_ASC = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_BLOCK_RANGE_ASC',
  ERA_DELEGATOR_INDEXER_APIES_AVERAGE_BLOCK_RANGE_DESC = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_BLOCK_RANGE_DESC',
  ERA_DELEGATOR_INDEXER_APIES_AVERAGE_CREATE_AT_ASC = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_CREATE_AT_ASC',
  ERA_DELEGATOR_INDEXER_APIES_AVERAGE_CREATE_AT_DESC = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_CREATE_AT_DESC',
  ERA_DELEGATOR_INDEXER_APIES_AVERAGE_DELEGATOR_ID_ASC = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_DELEGATOR_ID_ASC',
  ERA_DELEGATOR_INDEXER_APIES_AVERAGE_DELEGATOR_ID_DESC = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_DELEGATOR_ID_DESC',
  ERA_DELEGATOR_INDEXER_APIES_AVERAGE_ERA_IDX_ASC = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_ERA_IDX_ASC',
  ERA_DELEGATOR_INDEXER_APIES_AVERAGE_ERA_IDX_DESC = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_ERA_IDX_DESC',
  ERA_DELEGATOR_INDEXER_APIES_AVERAGE_ID_ASC = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_ID_ASC',
  ERA_DELEGATOR_INDEXER_APIES_AVERAGE_ID_DESC = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_ID_DESC',
  ERA_DELEGATOR_INDEXER_APIES_AVERAGE_INDEXER_ID_ASC = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_INDEXER_ID_ASC',
  ERA_DELEGATOR_INDEXER_APIES_AVERAGE_INDEXER_ID_DESC = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_INDEXER_ID_DESC',
  ERA_DELEGATOR_INDEXER_APIES_AVERAGE_REWARD_ASC = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_REWARD_ASC',
  ERA_DELEGATOR_INDEXER_APIES_AVERAGE_REWARD_DESC = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_REWARD_DESC',
  ERA_DELEGATOR_INDEXER_APIES_AVERAGE_STAKE_ASC = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_STAKE_ASC',
  ERA_DELEGATOR_INDEXER_APIES_AVERAGE_STAKE_DESC = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_STAKE_DESC',
  ERA_DELEGATOR_INDEXER_APIES_AVERAGE_UPDATE_AT_ASC = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_UPDATE_AT_ASC',
  ERA_DELEGATOR_INDEXER_APIES_AVERAGE_UPDATE_AT_DESC = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_UPDATE_AT_DESC',
  ERA_DELEGATOR_INDEXER_APIES_BY_DELEGATOR_ID__COUNT_ASC = 'ERA_DELEGATOR_INDEXER_APIES_BY_DELEGATOR_ID__COUNT_ASC',
  ERA_DELEGATOR_INDEXER_APIES_BY_DELEGATOR_ID__COUNT_DESC = 'ERA_DELEGATOR_INDEXER_APIES_BY_DELEGATOR_ID__COUNT_DESC',
  ERA_DELEGATOR_INDEXER_APIES_COUNT_ASC = 'ERA_DELEGATOR_INDEXER_APIES_COUNT_ASC',
  ERA_DELEGATOR_INDEXER_APIES_COUNT_DESC = 'ERA_DELEGATOR_INDEXER_APIES_COUNT_DESC',
  ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_APY_ASC = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_APY_ASC',
  ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_APY_DESC = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_APY_DESC',
  ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_BLOCK_RANGE_ASC = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_BLOCK_RANGE_DESC = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_CREATE_AT_ASC = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_CREATE_AT_ASC',
  ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_CREATE_AT_DESC = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_CREATE_AT_DESC',
  ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_DELEGATOR_ID_ASC = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_DELEGATOR_ID_ASC',
  ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_DELEGATOR_ID_DESC = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_DELEGATOR_ID_DESC',
  ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_ERA_IDX_ASC = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_ERA_IDX_ASC',
  ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_ERA_IDX_DESC = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_ERA_IDX_DESC',
  ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_ID_ASC = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_ID_ASC',
  ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_ID_DESC = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_ID_DESC',
  ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_INDEXER_ID_ASC = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_INDEXER_ID_ASC',
  ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_INDEXER_ID_DESC = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_INDEXER_ID_DESC',
  ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_REWARD_ASC = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_REWARD_ASC',
  ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_REWARD_DESC = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_REWARD_DESC',
  ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_STAKE_ASC = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_STAKE_ASC',
  ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_STAKE_DESC = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_STAKE_DESC',
  ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_UPDATE_AT_ASC = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_UPDATE_AT_ASC',
  ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_UPDATE_AT_DESC = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_UPDATE_AT_DESC',
  ERA_DELEGATOR_INDEXER_APIES_MAX_APY_ASC = 'ERA_DELEGATOR_INDEXER_APIES_MAX_APY_ASC',
  ERA_DELEGATOR_INDEXER_APIES_MAX_APY_DESC = 'ERA_DELEGATOR_INDEXER_APIES_MAX_APY_DESC',
  ERA_DELEGATOR_INDEXER_APIES_MAX_BLOCK_RANGE_ASC = 'ERA_DELEGATOR_INDEXER_APIES_MAX_BLOCK_RANGE_ASC',
  ERA_DELEGATOR_INDEXER_APIES_MAX_BLOCK_RANGE_DESC = 'ERA_DELEGATOR_INDEXER_APIES_MAX_BLOCK_RANGE_DESC',
  ERA_DELEGATOR_INDEXER_APIES_MAX_CREATE_AT_ASC = 'ERA_DELEGATOR_INDEXER_APIES_MAX_CREATE_AT_ASC',
  ERA_DELEGATOR_INDEXER_APIES_MAX_CREATE_AT_DESC = 'ERA_DELEGATOR_INDEXER_APIES_MAX_CREATE_AT_DESC',
  ERA_DELEGATOR_INDEXER_APIES_MAX_DELEGATOR_ID_ASC = 'ERA_DELEGATOR_INDEXER_APIES_MAX_DELEGATOR_ID_ASC',
  ERA_DELEGATOR_INDEXER_APIES_MAX_DELEGATOR_ID_DESC = 'ERA_DELEGATOR_INDEXER_APIES_MAX_DELEGATOR_ID_DESC',
  ERA_DELEGATOR_INDEXER_APIES_MAX_ERA_IDX_ASC = 'ERA_DELEGATOR_INDEXER_APIES_MAX_ERA_IDX_ASC',
  ERA_DELEGATOR_INDEXER_APIES_MAX_ERA_IDX_DESC = 'ERA_DELEGATOR_INDEXER_APIES_MAX_ERA_IDX_DESC',
  ERA_DELEGATOR_INDEXER_APIES_MAX_ID_ASC = 'ERA_DELEGATOR_INDEXER_APIES_MAX_ID_ASC',
  ERA_DELEGATOR_INDEXER_APIES_MAX_ID_DESC = 'ERA_DELEGATOR_INDEXER_APIES_MAX_ID_DESC',
  ERA_DELEGATOR_INDEXER_APIES_MAX_INDEXER_ID_ASC = 'ERA_DELEGATOR_INDEXER_APIES_MAX_INDEXER_ID_ASC',
  ERA_DELEGATOR_INDEXER_APIES_MAX_INDEXER_ID_DESC = 'ERA_DELEGATOR_INDEXER_APIES_MAX_INDEXER_ID_DESC',
  ERA_DELEGATOR_INDEXER_APIES_MAX_REWARD_ASC = 'ERA_DELEGATOR_INDEXER_APIES_MAX_REWARD_ASC',
  ERA_DELEGATOR_INDEXER_APIES_MAX_REWARD_DESC = 'ERA_DELEGATOR_INDEXER_APIES_MAX_REWARD_DESC',
  ERA_DELEGATOR_INDEXER_APIES_MAX_STAKE_ASC = 'ERA_DELEGATOR_INDEXER_APIES_MAX_STAKE_ASC',
  ERA_DELEGATOR_INDEXER_APIES_MAX_STAKE_DESC = 'ERA_DELEGATOR_INDEXER_APIES_MAX_STAKE_DESC',
  ERA_DELEGATOR_INDEXER_APIES_MAX_UPDATE_AT_ASC = 'ERA_DELEGATOR_INDEXER_APIES_MAX_UPDATE_AT_ASC',
  ERA_DELEGATOR_INDEXER_APIES_MAX_UPDATE_AT_DESC = 'ERA_DELEGATOR_INDEXER_APIES_MAX_UPDATE_AT_DESC',
  ERA_DELEGATOR_INDEXER_APIES_MIN_APY_ASC = 'ERA_DELEGATOR_INDEXER_APIES_MIN_APY_ASC',
  ERA_DELEGATOR_INDEXER_APIES_MIN_APY_DESC = 'ERA_DELEGATOR_INDEXER_APIES_MIN_APY_DESC',
  ERA_DELEGATOR_INDEXER_APIES_MIN_BLOCK_RANGE_ASC = 'ERA_DELEGATOR_INDEXER_APIES_MIN_BLOCK_RANGE_ASC',
  ERA_DELEGATOR_INDEXER_APIES_MIN_BLOCK_RANGE_DESC = 'ERA_DELEGATOR_INDEXER_APIES_MIN_BLOCK_RANGE_DESC',
  ERA_DELEGATOR_INDEXER_APIES_MIN_CREATE_AT_ASC = 'ERA_DELEGATOR_INDEXER_APIES_MIN_CREATE_AT_ASC',
  ERA_DELEGATOR_INDEXER_APIES_MIN_CREATE_AT_DESC = 'ERA_DELEGATOR_INDEXER_APIES_MIN_CREATE_AT_DESC',
  ERA_DELEGATOR_INDEXER_APIES_MIN_DELEGATOR_ID_ASC = 'ERA_DELEGATOR_INDEXER_APIES_MIN_DELEGATOR_ID_ASC',
  ERA_DELEGATOR_INDEXER_APIES_MIN_DELEGATOR_ID_DESC = 'ERA_DELEGATOR_INDEXER_APIES_MIN_DELEGATOR_ID_DESC',
  ERA_DELEGATOR_INDEXER_APIES_MIN_ERA_IDX_ASC = 'ERA_DELEGATOR_INDEXER_APIES_MIN_ERA_IDX_ASC',
  ERA_DELEGATOR_INDEXER_APIES_MIN_ERA_IDX_DESC = 'ERA_DELEGATOR_INDEXER_APIES_MIN_ERA_IDX_DESC',
  ERA_DELEGATOR_INDEXER_APIES_MIN_ID_ASC = 'ERA_DELEGATOR_INDEXER_APIES_MIN_ID_ASC',
  ERA_DELEGATOR_INDEXER_APIES_MIN_ID_DESC = 'ERA_DELEGATOR_INDEXER_APIES_MIN_ID_DESC',
  ERA_DELEGATOR_INDEXER_APIES_MIN_INDEXER_ID_ASC = 'ERA_DELEGATOR_INDEXER_APIES_MIN_INDEXER_ID_ASC',
  ERA_DELEGATOR_INDEXER_APIES_MIN_INDEXER_ID_DESC = 'ERA_DELEGATOR_INDEXER_APIES_MIN_INDEXER_ID_DESC',
  ERA_DELEGATOR_INDEXER_APIES_MIN_REWARD_ASC = 'ERA_DELEGATOR_INDEXER_APIES_MIN_REWARD_ASC',
  ERA_DELEGATOR_INDEXER_APIES_MIN_REWARD_DESC = 'ERA_DELEGATOR_INDEXER_APIES_MIN_REWARD_DESC',
  ERA_DELEGATOR_INDEXER_APIES_MIN_STAKE_ASC = 'ERA_DELEGATOR_INDEXER_APIES_MIN_STAKE_ASC',
  ERA_DELEGATOR_INDEXER_APIES_MIN_STAKE_DESC = 'ERA_DELEGATOR_INDEXER_APIES_MIN_STAKE_DESC',
  ERA_DELEGATOR_INDEXER_APIES_MIN_UPDATE_AT_ASC = 'ERA_DELEGATOR_INDEXER_APIES_MIN_UPDATE_AT_ASC',
  ERA_DELEGATOR_INDEXER_APIES_MIN_UPDATE_AT_DESC = 'ERA_DELEGATOR_INDEXER_APIES_MIN_UPDATE_AT_DESC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_APY_ASC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_APY_ASC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_APY_DESC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_APY_DESC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_BLOCK_RANGE_ASC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_BLOCK_RANGE_DESC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_CREATE_AT_ASC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_CREATE_AT_ASC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_CREATE_AT_DESC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_CREATE_AT_DESC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_DELEGATOR_ID_ASC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_DELEGATOR_ID_ASC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_DELEGATOR_ID_DESC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_DELEGATOR_ID_DESC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_ERA_IDX_ASC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_ERA_IDX_ASC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_ERA_IDX_DESC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_ERA_IDX_DESC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_ID_ASC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_ID_ASC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_ID_DESC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_ID_DESC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_INDEXER_ID_ASC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_INDEXER_ID_ASC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_INDEXER_ID_DESC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_INDEXER_ID_DESC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_REWARD_ASC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_REWARD_ASC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_REWARD_DESC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_REWARD_DESC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_STAKE_ASC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_STAKE_ASC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_STAKE_DESC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_STAKE_DESC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_UPDATE_AT_ASC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_UPDATE_AT_ASC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_UPDATE_AT_DESC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_UPDATE_AT_DESC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_APY_ASC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_APY_ASC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_APY_DESC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_APY_DESC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_BLOCK_RANGE_ASC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_BLOCK_RANGE_DESC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_CREATE_AT_ASC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_CREATE_AT_ASC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_CREATE_AT_DESC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_CREATE_AT_DESC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_DELEGATOR_ID_ASC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_DELEGATOR_ID_ASC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_DELEGATOR_ID_DESC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_DELEGATOR_ID_DESC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_ERA_IDX_ASC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_ERA_IDX_ASC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_ERA_IDX_DESC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_ERA_IDX_DESC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_ID_ASC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_ID_ASC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_ID_DESC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_ID_DESC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_INDEXER_ID_ASC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_INDEXER_ID_ASC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_INDEXER_ID_DESC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_INDEXER_ID_DESC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_REWARD_ASC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_REWARD_ASC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_REWARD_DESC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_REWARD_DESC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_STAKE_ASC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_STAKE_ASC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_STAKE_DESC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_STAKE_DESC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_UPDATE_AT_ASC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_UPDATE_AT_ASC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_UPDATE_AT_DESC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_UPDATE_AT_DESC',
  ERA_DELEGATOR_INDEXER_APIES_SUM_APY_ASC = 'ERA_DELEGATOR_INDEXER_APIES_SUM_APY_ASC',
  ERA_DELEGATOR_INDEXER_APIES_SUM_APY_DESC = 'ERA_DELEGATOR_INDEXER_APIES_SUM_APY_DESC',
  ERA_DELEGATOR_INDEXER_APIES_SUM_BLOCK_RANGE_ASC = 'ERA_DELEGATOR_INDEXER_APIES_SUM_BLOCK_RANGE_ASC',
  ERA_DELEGATOR_INDEXER_APIES_SUM_BLOCK_RANGE_DESC = 'ERA_DELEGATOR_INDEXER_APIES_SUM_BLOCK_RANGE_DESC',
  ERA_DELEGATOR_INDEXER_APIES_SUM_CREATE_AT_ASC = 'ERA_DELEGATOR_INDEXER_APIES_SUM_CREATE_AT_ASC',
  ERA_DELEGATOR_INDEXER_APIES_SUM_CREATE_AT_DESC = 'ERA_DELEGATOR_INDEXER_APIES_SUM_CREATE_AT_DESC',
  ERA_DELEGATOR_INDEXER_APIES_SUM_DELEGATOR_ID_ASC = 'ERA_DELEGATOR_INDEXER_APIES_SUM_DELEGATOR_ID_ASC',
  ERA_DELEGATOR_INDEXER_APIES_SUM_DELEGATOR_ID_DESC = 'ERA_DELEGATOR_INDEXER_APIES_SUM_DELEGATOR_ID_DESC',
  ERA_DELEGATOR_INDEXER_APIES_SUM_ERA_IDX_ASC = 'ERA_DELEGATOR_INDEXER_APIES_SUM_ERA_IDX_ASC',
  ERA_DELEGATOR_INDEXER_APIES_SUM_ERA_IDX_DESC = 'ERA_DELEGATOR_INDEXER_APIES_SUM_ERA_IDX_DESC',
  ERA_DELEGATOR_INDEXER_APIES_SUM_ID_ASC = 'ERA_DELEGATOR_INDEXER_APIES_SUM_ID_ASC',
  ERA_DELEGATOR_INDEXER_APIES_SUM_ID_DESC = 'ERA_DELEGATOR_INDEXER_APIES_SUM_ID_DESC',
  ERA_DELEGATOR_INDEXER_APIES_SUM_INDEXER_ID_ASC = 'ERA_DELEGATOR_INDEXER_APIES_SUM_INDEXER_ID_ASC',
  ERA_DELEGATOR_INDEXER_APIES_SUM_INDEXER_ID_DESC = 'ERA_DELEGATOR_INDEXER_APIES_SUM_INDEXER_ID_DESC',
  ERA_DELEGATOR_INDEXER_APIES_SUM_REWARD_ASC = 'ERA_DELEGATOR_INDEXER_APIES_SUM_REWARD_ASC',
  ERA_DELEGATOR_INDEXER_APIES_SUM_REWARD_DESC = 'ERA_DELEGATOR_INDEXER_APIES_SUM_REWARD_DESC',
  ERA_DELEGATOR_INDEXER_APIES_SUM_STAKE_ASC = 'ERA_DELEGATOR_INDEXER_APIES_SUM_STAKE_ASC',
  ERA_DELEGATOR_INDEXER_APIES_SUM_STAKE_DESC = 'ERA_DELEGATOR_INDEXER_APIES_SUM_STAKE_DESC',
  ERA_DELEGATOR_INDEXER_APIES_SUM_UPDATE_AT_ASC = 'ERA_DELEGATOR_INDEXER_APIES_SUM_UPDATE_AT_ASC',
  ERA_DELEGATOR_INDEXER_APIES_SUM_UPDATE_AT_DESC = 'ERA_DELEGATOR_INDEXER_APIES_SUM_UPDATE_AT_DESC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_APY_ASC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_APY_ASC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_APY_DESC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_APY_DESC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_BLOCK_RANGE_ASC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_BLOCK_RANGE_DESC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_CREATE_AT_ASC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_CREATE_AT_ASC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_CREATE_AT_DESC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_CREATE_AT_DESC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_DELEGATOR_ID_ASC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_DELEGATOR_ID_ASC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_DELEGATOR_ID_DESC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_DELEGATOR_ID_DESC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_ERA_IDX_ASC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_ERA_IDX_ASC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_ERA_IDX_DESC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_ERA_IDX_DESC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_ID_ASC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_ID_ASC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_ID_DESC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_ID_DESC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_INDEXER_ID_ASC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_INDEXER_ID_ASC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_INDEXER_ID_DESC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_INDEXER_ID_DESC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_REWARD_ASC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_REWARD_ASC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_REWARD_DESC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_REWARD_DESC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_STAKE_ASC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_STAKE_ASC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_STAKE_DESC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_STAKE_DESC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_UPDATE_AT_ASC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_UPDATE_AT_ASC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_UPDATE_AT_DESC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_UPDATE_AT_DESC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_APY_ASC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_APY_ASC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_APY_DESC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_APY_DESC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_CREATE_AT_ASC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_CREATE_AT_ASC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_CREATE_AT_DESC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_CREATE_AT_DESC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_DELEGATOR_ID_ASC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_DELEGATOR_ID_ASC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_DELEGATOR_ID_DESC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_DELEGATOR_ID_DESC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_ERA_IDX_ASC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_ERA_IDX_ASC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_ERA_IDX_DESC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_ERA_IDX_DESC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_ID_ASC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_ID_ASC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_ID_DESC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_ID_DESC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_INDEXER_ID_ASC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_INDEXER_ID_DESC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_REWARD_ASC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_REWARD_ASC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_REWARD_DESC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_REWARD_DESC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_STAKE_ASC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_STAKE_ASC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_STAKE_DESC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_STAKE_DESC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_UPDATE_AT_ASC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_UPDATE_AT_ASC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_UPDATE_AT_DESC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_UPDATE_AT_DESC',
  ERA_REWARDS_AVERAGE_AMOUNT_ASC = 'ERA_REWARDS_AVERAGE_AMOUNT_ASC',
  ERA_REWARDS_AVERAGE_AMOUNT_DESC = 'ERA_REWARDS_AVERAGE_AMOUNT_DESC',
  ERA_REWARDS_AVERAGE_BLOCK_RANGE_ASC = 'ERA_REWARDS_AVERAGE_BLOCK_RANGE_ASC',
  ERA_REWARDS_AVERAGE_BLOCK_RANGE_DESC = 'ERA_REWARDS_AVERAGE_BLOCK_RANGE_DESC',
  ERA_REWARDS_AVERAGE_CLAIMED_ASC = 'ERA_REWARDS_AVERAGE_CLAIMED_ASC',
  ERA_REWARDS_AVERAGE_CLAIMED_DESC = 'ERA_REWARDS_AVERAGE_CLAIMED_DESC',
  ERA_REWARDS_AVERAGE_CREATED_BLOCK_ASC = 'ERA_REWARDS_AVERAGE_CREATED_BLOCK_ASC',
  ERA_REWARDS_AVERAGE_CREATED_BLOCK_DESC = 'ERA_REWARDS_AVERAGE_CREATED_BLOCK_DESC',
  ERA_REWARDS_AVERAGE_CREATED_TIMESTAMP_ASC = 'ERA_REWARDS_AVERAGE_CREATED_TIMESTAMP_ASC',
  ERA_REWARDS_AVERAGE_CREATED_TIMESTAMP_DESC = 'ERA_REWARDS_AVERAGE_CREATED_TIMESTAMP_DESC',
  ERA_REWARDS_AVERAGE_DELEGATOR_ID_ASC = 'ERA_REWARDS_AVERAGE_DELEGATOR_ID_ASC',
  ERA_REWARDS_AVERAGE_DELEGATOR_ID_DESC = 'ERA_REWARDS_AVERAGE_DELEGATOR_ID_DESC',
  ERA_REWARDS_AVERAGE_ERA_IDX_ASC = 'ERA_REWARDS_AVERAGE_ERA_IDX_ASC',
  ERA_REWARDS_AVERAGE_ERA_IDX_DESC = 'ERA_REWARDS_AVERAGE_ERA_IDX_DESC',
  ERA_REWARDS_AVERAGE_ERA_ID_ASC = 'ERA_REWARDS_AVERAGE_ERA_ID_ASC',
  ERA_REWARDS_AVERAGE_ERA_ID_DESC = 'ERA_REWARDS_AVERAGE_ERA_ID_DESC',
  ERA_REWARDS_AVERAGE_ID_ASC = 'ERA_REWARDS_AVERAGE_ID_ASC',
  ERA_REWARDS_AVERAGE_ID_DESC = 'ERA_REWARDS_AVERAGE_ID_DESC',
  ERA_REWARDS_AVERAGE_INDEXER_ID_ASC = 'ERA_REWARDS_AVERAGE_INDEXER_ID_ASC',
  ERA_REWARDS_AVERAGE_INDEXER_ID_DESC = 'ERA_REWARDS_AVERAGE_INDEXER_ID_DESC',
  ERA_REWARDS_AVERAGE_IS_COMMISSION_ASC = 'ERA_REWARDS_AVERAGE_IS_COMMISSION_ASC',
  ERA_REWARDS_AVERAGE_IS_COMMISSION_DESC = 'ERA_REWARDS_AVERAGE_IS_COMMISSION_DESC',
  ERA_REWARDS_AVERAGE_IS_INDEXER_ASC = 'ERA_REWARDS_AVERAGE_IS_INDEXER_ASC',
  ERA_REWARDS_AVERAGE_IS_INDEXER_DESC = 'ERA_REWARDS_AVERAGE_IS_INDEXER_DESC',
  ERA_REWARDS_BY_DELEGATOR_ID__COUNT_ASC = 'ERA_REWARDS_BY_DELEGATOR_ID__COUNT_ASC',
  ERA_REWARDS_BY_DELEGATOR_ID__COUNT_DESC = 'ERA_REWARDS_BY_DELEGATOR_ID__COUNT_DESC',
  ERA_REWARDS_COUNT_ASC = 'ERA_REWARDS_COUNT_ASC',
  ERA_REWARDS_COUNT_DESC = 'ERA_REWARDS_COUNT_DESC',
  ERA_REWARDS_DISTINCT_COUNT_AMOUNT_ASC = 'ERA_REWARDS_DISTINCT_COUNT_AMOUNT_ASC',
  ERA_REWARDS_DISTINCT_COUNT_AMOUNT_DESC = 'ERA_REWARDS_DISTINCT_COUNT_AMOUNT_DESC',
  ERA_REWARDS_DISTINCT_COUNT_BLOCK_RANGE_ASC = 'ERA_REWARDS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  ERA_REWARDS_DISTINCT_COUNT_BLOCK_RANGE_DESC = 'ERA_REWARDS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  ERA_REWARDS_DISTINCT_COUNT_CLAIMED_ASC = 'ERA_REWARDS_DISTINCT_COUNT_CLAIMED_ASC',
  ERA_REWARDS_DISTINCT_COUNT_CLAIMED_DESC = 'ERA_REWARDS_DISTINCT_COUNT_CLAIMED_DESC',
  ERA_REWARDS_DISTINCT_COUNT_CREATED_BLOCK_ASC = 'ERA_REWARDS_DISTINCT_COUNT_CREATED_BLOCK_ASC',
  ERA_REWARDS_DISTINCT_COUNT_CREATED_BLOCK_DESC = 'ERA_REWARDS_DISTINCT_COUNT_CREATED_BLOCK_DESC',
  ERA_REWARDS_DISTINCT_COUNT_CREATED_TIMESTAMP_ASC = 'ERA_REWARDS_DISTINCT_COUNT_CREATED_TIMESTAMP_ASC',
  ERA_REWARDS_DISTINCT_COUNT_CREATED_TIMESTAMP_DESC = 'ERA_REWARDS_DISTINCT_COUNT_CREATED_TIMESTAMP_DESC',
  ERA_REWARDS_DISTINCT_COUNT_DELEGATOR_ID_ASC = 'ERA_REWARDS_DISTINCT_COUNT_DELEGATOR_ID_ASC',
  ERA_REWARDS_DISTINCT_COUNT_DELEGATOR_ID_DESC = 'ERA_REWARDS_DISTINCT_COUNT_DELEGATOR_ID_DESC',
  ERA_REWARDS_DISTINCT_COUNT_ERA_IDX_ASC = 'ERA_REWARDS_DISTINCT_COUNT_ERA_IDX_ASC',
  ERA_REWARDS_DISTINCT_COUNT_ERA_IDX_DESC = 'ERA_REWARDS_DISTINCT_COUNT_ERA_IDX_DESC',
  ERA_REWARDS_DISTINCT_COUNT_ERA_ID_ASC = 'ERA_REWARDS_DISTINCT_COUNT_ERA_ID_ASC',
  ERA_REWARDS_DISTINCT_COUNT_ERA_ID_DESC = 'ERA_REWARDS_DISTINCT_COUNT_ERA_ID_DESC',
  ERA_REWARDS_DISTINCT_COUNT_ID_ASC = 'ERA_REWARDS_DISTINCT_COUNT_ID_ASC',
  ERA_REWARDS_DISTINCT_COUNT_ID_DESC = 'ERA_REWARDS_DISTINCT_COUNT_ID_DESC',
  ERA_REWARDS_DISTINCT_COUNT_INDEXER_ID_ASC = 'ERA_REWARDS_DISTINCT_COUNT_INDEXER_ID_ASC',
  ERA_REWARDS_DISTINCT_COUNT_INDEXER_ID_DESC = 'ERA_REWARDS_DISTINCT_COUNT_INDEXER_ID_DESC',
  ERA_REWARDS_DISTINCT_COUNT_IS_COMMISSION_ASC = 'ERA_REWARDS_DISTINCT_COUNT_IS_COMMISSION_ASC',
  ERA_REWARDS_DISTINCT_COUNT_IS_COMMISSION_DESC = 'ERA_REWARDS_DISTINCT_COUNT_IS_COMMISSION_DESC',
  ERA_REWARDS_DISTINCT_COUNT_IS_INDEXER_ASC = 'ERA_REWARDS_DISTINCT_COUNT_IS_INDEXER_ASC',
  ERA_REWARDS_DISTINCT_COUNT_IS_INDEXER_DESC = 'ERA_REWARDS_DISTINCT_COUNT_IS_INDEXER_DESC',
  ERA_REWARDS_MAX_AMOUNT_ASC = 'ERA_REWARDS_MAX_AMOUNT_ASC',
  ERA_REWARDS_MAX_AMOUNT_DESC = 'ERA_REWARDS_MAX_AMOUNT_DESC',
  ERA_REWARDS_MAX_BLOCK_RANGE_ASC = 'ERA_REWARDS_MAX_BLOCK_RANGE_ASC',
  ERA_REWARDS_MAX_BLOCK_RANGE_DESC = 'ERA_REWARDS_MAX_BLOCK_RANGE_DESC',
  ERA_REWARDS_MAX_CLAIMED_ASC = 'ERA_REWARDS_MAX_CLAIMED_ASC',
  ERA_REWARDS_MAX_CLAIMED_DESC = 'ERA_REWARDS_MAX_CLAIMED_DESC',
  ERA_REWARDS_MAX_CREATED_BLOCK_ASC = 'ERA_REWARDS_MAX_CREATED_BLOCK_ASC',
  ERA_REWARDS_MAX_CREATED_BLOCK_DESC = 'ERA_REWARDS_MAX_CREATED_BLOCK_DESC',
  ERA_REWARDS_MAX_CREATED_TIMESTAMP_ASC = 'ERA_REWARDS_MAX_CREATED_TIMESTAMP_ASC',
  ERA_REWARDS_MAX_CREATED_TIMESTAMP_DESC = 'ERA_REWARDS_MAX_CREATED_TIMESTAMP_DESC',
  ERA_REWARDS_MAX_DELEGATOR_ID_ASC = 'ERA_REWARDS_MAX_DELEGATOR_ID_ASC',
  ERA_REWARDS_MAX_DELEGATOR_ID_DESC = 'ERA_REWARDS_MAX_DELEGATOR_ID_DESC',
  ERA_REWARDS_MAX_ERA_IDX_ASC = 'ERA_REWARDS_MAX_ERA_IDX_ASC',
  ERA_REWARDS_MAX_ERA_IDX_DESC = 'ERA_REWARDS_MAX_ERA_IDX_DESC',
  ERA_REWARDS_MAX_ERA_ID_ASC = 'ERA_REWARDS_MAX_ERA_ID_ASC',
  ERA_REWARDS_MAX_ERA_ID_DESC = 'ERA_REWARDS_MAX_ERA_ID_DESC',
  ERA_REWARDS_MAX_ID_ASC = 'ERA_REWARDS_MAX_ID_ASC',
  ERA_REWARDS_MAX_ID_DESC = 'ERA_REWARDS_MAX_ID_DESC',
  ERA_REWARDS_MAX_INDEXER_ID_ASC = 'ERA_REWARDS_MAX_INDEXER_ID_ASC',
  ERA_REWARDS_MAX_INDEXER_ID_DESC = 'ERA_REWARDS_MAX_INDEXER_ID_DESC',
  ERA_REWARDS_MAX_IS_COMMISSION_ASC = 'ERA_REWARDS_MAX_IS_COMMISSION_ASC',
  ERA_REWARDS_MAX_IS_COMMISSION_DESC = 'ERA_REWARDS_MAX_IS_COMMISSION_DESC',
  ERA_REWARDS_MAX_IS_INDEXER_ASC = 'ERA_REWARDS_MAX_IS_INDEXER_ASC',
  ERA_REWARDS_MAX_IS_INDEXER_DESC = 'ERA_REWARDS_MAX_IS_INDEXER_DESC',
  ERA_REWARDS_MIN_AMOUNT_ASC = 'ERA_REWARDS_MIN_AMOUNT_ASC',
  ERA_REWARDS_MIN_AMOUNT_DESC = 'ERA_REWARDS_MIN_AMOUNT_DESC',
  ERA_REWARDS_MIN_BLOCK_RANGE_ASC = 'ERA_REWARDS_MIN_BLOCK_RANGE_ASC',
  ERA_REWARDS_MIN_BLOCK_RANGE_DESC = 'ERA_REWARDS_MIN_BLOCK_RANGE_DESC',
  ERA_REWARDS_MIN_CLAIMED_ASC = 'ERA_REWARDS_MIN_CLAIMED_ASC',
  ERA_REWARDS_MIN_CLAIMED_DESC = 'ERA_REWARDS_MIN_CLAIMED_DESC',
  ERA_REWARDS_MIN_CREATED_BLOCK_ASC = 'ERA_REWARDS_MIN_CREATED_BLOCK_ASC',
  ERA_REWARDS_MIN_CREATED_BLOCK_DESC = 'ERA_REWARDS_MIN_CREATED_BLOCK_DESC',
  ERA_REWARDS_MIN_CREATED_TIMESTAMP_ASC = 'ERA_REWARDS_MIN_CREATED_TIMESTAMP_ASC',
  ERA_REWARDS_MIN_CREATED_TIMESTAMP_DESC = 'ERA_REWARDS_MIN_CREATED_TIMESTAMP_DESC',
  ERA_REWARDS_MIN_DELEGATOR_ID_ASC = 'ERA_REWARDS_MIN_DELEGATOR_ID_ASC',
  ERA_REWARDS_MIN_DELEGATOR_ID_DESC = 'ERA_REWARDS_MIN_DELEGATOR_ID_DESC',
  ERA_REWARDS_MIN_ERA_IDX_ASC = 'ERA_REWARDS_MIN_ERA_IDX_ASC',
  ERA_REWARDS_MIN_ERA_IDX_DESC = 'ERA_REWARDS_MIN_ERA_IDX_DESC',
  ERA_REWARDS_MIN_ERA_ID_ASC = 'ERA_REWARDS_MIN_ERA_ID_ASC',
  ERA_REWARDS_MIN_ERA_ID_DESC = 'ERA_REWARDS_MIN_ERA_ID_DESC',
  ERA_REWARDS_MIN_ID_ASC = 'ERA_REWARDS_MIN_ID_ASC',
  ERA_REWARDS_MIN_ID_DESC = 'ERA_REWARDS_MIN_ID_DESC',
  ERA_REWARDS_MIN_INDEXER_ID_ASC = 'ERA_REWARDS_MIN_INDEXER_ID_ASC',
  ERA_REWARDS_MIN_INDEXER_ID_DESC = 'ERA_REWARDS_MIN_INDEXER_ID_DESC',
  ERA_REWARDS_MIN_IS_COMMISSION_ASC = 'ERA_REWARDS_MIN_IS_COMMISSION_ASC',
  ERA_REWARDS_MIN_IS_COMMISSION_DESC = 'ERA_REWARDS_MIN_IS_COMMISSION_DESC',
  ERA_REWARDS_MIN_IS_INDEXER_ASC = 'ERA_REWARDS_MIN_IS_INDEXER_ASC',
  ERA_REWARDS_MIN_IS_INDEXER_DESC = 'ERA_REWARDS_MIN_IS_INDEXER_DESC',
  ERA_REWARDS_STDDEV_POPULATION_AMOUNT_ASC = 'ERA_REWARDS_STDDEV_POPULATION_AMOUNT_ASC',
  ERA_REWARDS_STDDEV_POPULATION_AMOUNT_DESC = 'ERA_REWARDS_STDDEV_POPULATION_AMOUNT_DESC',
  ERA_REWARDS_STDDEV_POPULATION_BLOCK_RANGE_ASC = 'ERA_REWARDS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  ERA_REWARDS_STDDEV_POPULATION_BLOCK_RANGE_DESC = 'ERA_REWARDS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  ERA_REWARDS_STDDEV_POPULATION_CLAIMED_ASC = 'ERA_REWARDS_STDDEV_POPULATION_CLAIMED_ASC',
  ERA_REWARDS_STDDEV_POPULATION_CLAIMED_DESC = 'ERA_REWARDS_STDDEV_POPULATION_CLAIMED_DESC',
  ERA_REWARDS_STDDEV_POPULATION_CREATED_BLOCK_ASC = 'ERA_REWARDS_STDDEV_POPULATION_CREATED_BLOCK_ASC',
  ERA_REWARDS_STDDEV_POPULATION_CREATED_BLOCK_DESC = 'ERA_REWARDS_STDDEV_POPULATION_CREATED_BLOCK_DESC',
  ERA_REWARDS_STDDEV_POPULATION_CREATED_TIMESTAMP_ASC = 'ERA_REWARDS_STDDEV_POPULATION_CREATED_TIMESTAMP_ASC',
  ERA_REWARDS_STDDEV_POPULATION_CREATED_TIMESTAMP_DESC = 'ERA_REWARDS_STDDEV_POPULATION_CREATED_TIMESTAMP_DESC',
  ERA_REWARDS_STDDEV_POPULATION_DELEGATOR_ID_ASC = 'ERA_REWARDS_STDDEV_POPULATION_DELEGATOR_ID_ASC',
  ERA_REWARDS_STDDEV_POPULATION_DELEGATOR_ID_DESC = 'ERA_REWARDS_STDDEV_POPULATION_DELEGATOR_ID_DESC',
  ERA_REWARDS_STDDEV_POPULATION_ERA_IDX_ASC = 'ERA_REWARDS_STDDEV_POPULATION_ERA_IDX_ASC',
  ERA_REWARDS_STDDEV_POPULATION_ERA_IDX_DESC = 'ERA_REWARDS_STDDEV_POPULATION_ERA_IDX_DESC',
  ERA_REWARDS_STDDEV_POPULATION_ERA_ID_ASC = 'ERA_REWARDS_STDDEV_POPULATION_ERA_ID_ASC',
  ERA_REWARDS_STDDEV_POPULATION_ERA_ID_DESC = 'ERA_REWARDS_STDDEV_POPULATION_ERA_ID_DESC',
  ERA_REWARDS_STDDEV_POPULATION_ID_ASC = 'ERA_REWARDS_STDDEV_POPULATION_ID_ASC',
  ERA_REWARDS_STDDEV_POPULATION_ID_DESC = 'ERA_REWARDS_STDDEV_POPULATION_ID_DESC',
  ERA_REWARDS_STDDEV_POPULATION_INDEXER_ID_ASC = 'ERA_REWARDS_STDDEV_POPULATION_INDEXER_ID_ASC',
  ERA_REWARDS_STDDEV_POPULATION_INDEXER_ID_DESC = 'ERA_REWARDS_STDDEV_POPULATION_INDEXER_ID_DESC',
  ERA_REWARDS_STDDEV_POPULATION_IS_COMMISSION_ASC = 'ERA_REWARDS_STDDEV_POPULATION_IS_COMMISSION_ASC',
  ERA_REWARDS_STDDEV_POPULATION_IS_COMMISSION_DESC = 'ERA_REWARDS_STDDEV_POPULATION_IS_COMMISSION_DESC',
  ERA_REWARDS_STDDEV_POPULATION_IS_INDEXER_ASC = 'ERA_REWARDS_STDDEV_POPULATION_IS_INDEXER_ASC',
  ERA_REWARDS_STDDEV_POPULATION_IS_INDEXER_DESC = 'ERA_REWARDS_STDDEV_POPULATION_IS_INDEXER_DESC',
  ERA_REWARDS_STDDEV_SAMPLE_AMOUNT_ASC = 'ERA_REWARDS_STDDEV_SAMPLE_AMOUNT_ASC',
  ERA_REWARDS_STDDEV_SAMPLE_AMOUNT_DESC = 'ERA_REWARDS_STDDEV_SAMPLE_AMOUNT_DESC',
  ERA_REWARDS_STDDEV_SAMPLE_BLOCK_RANGE_ASC = 'ERA_REWARDS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  ERA_REWARDS_STDDEV_SAMPLE_BLOCK_RANGE_DESC = 'ERA_REWARDS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  ERA_REWARDS_STDDEV_SAMPLE_CLAIMED_ASC = 'ERA_REWARDS_STDDEV_SAMPLE_CLAIMED_ASC',
  ERA_REWARDS_STDDEV_SAMPLE_CLAIMED_DESC = 'ERA_REWARDS_STDDEV_SAMPLE_CLAIMED_DESC',
  ERA_REWARDS_STDDEV_SAMPLE_CREATED_BLOCK_ASC = 'ERA_REWARDS_STDDEV_SAMPLE_CREATED_BLOCK_ASC',
  ERA_REWARDS_STDDEV_SAMPLE_CREATED_BLOCK_DESC = 'ERA_REWARDS_STDDEV_SAMPLE_CREATED_BLOCK_DESC',
  ERA_REWARDS_STDDEV_SAMPLE_CREATED_TIMESTAMP_ASC = 'ERA_REWARDS_STDDEV_SAMPLE_CREATED_TIMESTAMP_ASC',
  ERA_REWARDS_STDDEV_SAMPLE_CREATED_TIMESTAMP_DESC = 'ERA_REWARDS_STDDEV_SAMPLE_CREATED_TIMESTAMP_DESC',
  ERA_REWARDS_STDDEV_SAMPLE_DELEGATOR_ID_ASC = 'ERA_REWARDS_STDDEV_SAMPLE_DELEGATOR_ID_ASC',
  ERA_REWARDS_STDDEV_SAMPLE_DELEGATOR_ID_DESC = 'ERA_REWARDS_STDDEV_SAMPLE_DELEGATOR_ID_DESC',
  ERA_REWARDS_STDDEV_SAMPLE_ERA_IDX_ASC = 'ERA_REWARDS_STDDEV_SAMPLE_ERA_IDX_ASC',
  ERA_REWARDS_STDDEV_SAMPLE_ERA_IDX_DESC = 'ERA_REWARDS_STDDEV_SAMPLE_ERA_IDX_DESC',
  ERA_REWARDS_STDDEV_SAMPLE_ERA_ID_ASC = 'ERA_REWARDS_STDDEV_SAMPLE_ERA_ID_ASC',
  ERA_REWARDS_STDDEV_SAMPLE_ERA_ID_DESC = 'ERA_REWARDS_STDDEV_SAMPLE_ERA_ID_DESC',
  ERA_REWARDS_STDDEV_SAMPLE_ID_ASC = 'ERA_REWARDS_STDDEV_SAMPLE_ID_ASC',
  ERA_REWARDS_STDDEV_SAMPLE_ID_DESC = 'ERA_REWARDS_STDDEV_SAMPLE_ID_DESC',
  ERA_REWARDS_STDDEV_SAMPLE_INDEXER_ID_ASC = 'ERA_REWARDS_STDDEV_SAMPLE_INDEXER_ID_ASC',
  ERA_REWARDS_STDDEV_SAMPLE_INDEXER_ID_DESC = 'ERA_REWARDS_STDDEV_SAMPLE_INDEXER_ID_DESC',
  ERA_REWARDS_STDDEV_SAMPLE_IS_COMMISSION_ASC = 'ERA_REWARDS_STDDEV_SAMPLE_IS_COMMISSION_ASC',
  ERA_REWARDS_STDDEV_SAMPLE_IS_COMMISSION_DESC = 'ERA_REWARDS_STDDEV_SAMPLE_IS_COMMISSION_DESC',
  ERA_REWARDS_STDDEV_SAMPLE_IS_INDEXER_ASC = 'ERA_REWARDS_STDDEV_SAMPLE_IS_INDEXER_ASC',
  ERA_REWARDS_STDDEV_SAMPLE_IS_INDEXER_DESC = 'ERA_REWARDS_STDDEV_SAMPLE_IS_INDEXER_DESC',
  ERA_REWARDS_SUM_AMOUNT_ASC = 'ERA_REWARDS_SUM_AMOUNT_ASC',
  ERA_REWARDS_SUM_AMOUNT_DESC = 'ERA_REWARDS_SUM_AMOUNT_DESC',
  ERA_REWARDS_SUM_BLOCK_RANGE_ASC = 'ERA_REWARDS_SUM_BLOCK_RANGE_ASC',
  ERA_REWARDS_SUM_BLOCK_RANGE_DESC = 'ERA_REWARDS_SUM_BLOCK_RANGE_DESC',
  ERA_REWARDS_SUM_CLAIMED_ASC = 'ERA_REWARDS_SUM_CLAIMED_ASC',
  ERA_REWARDS_SUM_CLAIMED_DESC = 'ERA_REWARDS_SUM_CLAIMED_DESC',
  ERA_REWARDS_SUM_CREATED_BLOCK_ASC = 'ERA_REWARDS_SUM_CREATED_BLOCK_ASC',
  ERA_REWARDS_SUM_CREATED_BLOCK_DESC = 'ERA_REWARDS_SUM_CREATED_BLOCK_DESC',
  ERA_REWARDS_SUM_CREATED_TIMESTAMP_ASC = 'ERA_REWARDS_SUM_CREATED_TIMESTAMP_ASC',
  ERA_REWARDS_SUM_CREATED_TIMESTAMP_DESC = 'ERA_REWARDS_SUM_CREATED_TIMESTAMP_DESC',
  ERA_REWARDS_SUM_DELEGATOR_ID_ASC = 'ERA_REWARDS_SUM_DELEGATOR_ID_ASC',
  ERA_REWARDS_SUM_DELEGATOR_ID_DESC = 'ERA_REWARDS_SUM_DELEGATOR_ID_DESC',
  ERA_REWARDS_SUM_ERA_IDX_ASC = 'ERA_REWARDS_SUM_ERA_IDX_ASC',
  ERA_REWARDS_SUM_ERA_IDX_DESC = 'ERA_REWARDS_SUM_ERA_IDX_DESC',
  ERA_REWARDS_SUM_ERA_ID_ASC = 'ERA_REWARDS_SUM_ERA_ID_ASC',
  ERA_REWARDS_SUM_ERA_ID_DESC = 'ERA_REWARDS_SUM_ERA_ID_DESC',
  ERA_REWARDS_SUM_ID_ASC = 'ERA_REWARDS_SUM_ID_ASC',
  ERA_REWARDS_SUM_ID_DESC = 'ERA_REWARDS_SUM_ID_DESC',
  ERA_REWARDS_SUM_INDEXER_ID_ASC = 'ERA_REWARDS_SUM_INDEXER_ID_ASC',
  ERA_REWARDS_SUM_INDEXER_ID_DESC = 'ERA_REWARDS_SUM_INDEXER_ID_DESC',
  ERA_REWARDS_SUM_IS_COMMISSION_ASC = 'ERA_REWARDS_SUM_IS_COMMISSION_ASC',
  ERA_REWARDS_SUM_IS_COMMISSION_DESC = 'ERA_REWARDS_SUM_IS_COMMISSION_DESC',
  ERA_REWARDS_SUM_IS_INDEXER_ASC = 'ERA_REWARDS_SUM_IS_INDEXER_ASC',
  ERA_REWARDS_SUM_IS_INDEXER_DESC = 'ERA_REWARDS_SUM_IS_INDEXER_DESC',
  ERA_REWARDS_VARIANCE_POPULATION_AMOUNT_ASC = 'ERA_REWARDS_VARIANCE_POPULATION_AMOUNT_ASC',
  ERA_REWARDS_VARIANCE_POPULATION_AMOUNT_DESC = 'ERA_REWARDS_VARIANCE_POPULATION_AMOUNT_DESC',
  ERA_REWARDS_VARIANCE_POPULATION_BLOCK_RANGE_ASC = 'ERA_REWARDS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  ERA_REWARDS_VARIANCE_POPULATION_BLOCK_RANGE_DESC = 'ERA_REWARDS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  ERA_REWARDS_VARIANCE_POPULATION_CLAIMED_ASC = 'ERA_REWARDS_VARIANCE_POPULATION_CLAIMED_ASC',
  ERA_REWARDS_VARIANCE_POPULATION_CLAIMED_DESC = 'ERA_REWARDS_VARIANCE_POPULATION_CLAIMED_DESC',
  ERA_REWARDS_VARIANCE_POPULATION_CREATED_BLOCK_ASC = 'ERA_REWARDS_VARIANCE_POPULATION_CREATED_BLOCK_ASC',
  ERA_REWARDS_VARIANCE_POPULATION_CREATED_BLOCK_DESC = 'ERA_REWARDS_VARIANCE_POPULATION_CREATED_BLOCK_DESC',
  ERA_REWARDS_VARIANCE_POPULATION_CREATED_TIMESTAMP_ASC = 'ERA_REWARDS_VARIANCE_POPULATION_CREATED_TIMESTAMP_ASC',
  ERA_REWARDS_VARIANCE_POPULATION_CREATED_TIMESTAMP_DESC = 'ERA_REWARDS_VARIANCE_POPULATION_CREATED_TIMESTAMP_DESC',
  ERA_REWARDS_VARIANCE_POPULATION_DELEGATOR_ID_ASC = 'ERA_REWARDS_VARIANCE_POPULATION_DELEGATOR_ID_ASC',
  ERA_REWARDS_VARIANCE_POPULATION_DELEGATOR_ID_DESC = 'ERA_REWARDS_VARIANCE_POPULATION_DELEGATOR_ID_DESC',
  ERA_REWARDS_VARIANCE_POPULATION_ERA_IDX_ASC = 'ERA_REWARDS_VARIANCE_POPULATION_ERA_IDX_ASC',
  ERA_REWARDS_VARIANCE_POPULATION_ERA_IDX_DESC = 'ERA_REWARDS_VARIANCE_POPULATION_ERA_IDX_DESC',
  ERA_REWARDS_VARIANCE_POPULATION_ERA_ID_ASC = 'ERA_REWARDS_VARIANCE_POPULATION_ERA_ID_ASC',
  ERA_REWARDS_VARIANCE_POPULATION_ERA_ID_DESC = 'ERA_REWARDS_VARIANCE_POPULATION_ERA_ID_DESC',
  ERA_REWARDS_VARIANCE_POPULATION_ID_ASC = 'ERA_REWARDS_VARIANCE_POPULATION_ID_ASC',
  ERA_REWARDS_VARIANCE_POPULATION_ID_DESC = 'ERA_REWARDS_VARIANCE_POPULATION_ID_DESC',
  ERA_REWARDS_VARIANCE_POPULATION_INDEXER_ID_ASC = 'ERA_REWARDS_VARIANCE_POPULATION_INDEXER_ID_ASC',
  ERA_REWARDS_VARIANCE_POPULATION_INDEXER_ID_DESC = 'ERA_REWARDS_VARIANCE_POPULATION_INDEXER_ID_DESC',
  ERA_REWARDS_VARIANCE_POPULATION_IS_COMMISSION_ASC = 'ERA_REWARDS_VARIANCE_POPULATION_IS_COMMISSION_ASC',
  ERA_REWARDS_VARIANCE_POPULATION_IS_COMMISSION_DESC = 'ERA_REWARDS_VARIANCE_POPULATION_IS_COMMISSION_DESC',
  ERA_REWARDS_VARIANCE_POPULATION_IS_INDEXER_ASC = 'ERA_REWARDS_VARIANCE_POPULATION_IS_INDEXER_ASC',
  ERA_REWARDS_VARIANCE_POPULATION_IS_INDEXER_DESC = 'ERA_REWARDS_VARIANCE_POPULATION_IS_INDEXER_DESC',
  ERA_REWARDS_VARIANCE_SAMPLE_AMOUNT_ASC = 'ERA_REWARDS_VARIANCE_SAMPLE_AMOUNT_ASC',
  ERA_REWARDS_VARIANCE_SAMPLE_AMOUNT_DESC = 'ERA_REWARDS_VARIANCE_SAMPLE_AMOUNT_DESC',
  ERA_REWARDS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC = 'ERA_REWARDS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  ERA_REWARDS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC = 'ERA_REWARDS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  ERA_REWARDS_VARIANCE_SAMPLE_CLAIMED_ASC = 'ERA_REWARDS_VARIANCE_SAMPLE_CLAIMED_ASC',
  ERA_REWARDS_VARIANCE_SAMPLE_CLAIMED_DESC = 'ERA_REWARDS_VARIANCE_SAMPLE_CLAIMED_DESC',
  ERA_REWARDS_VARIANCE_SAMPLE_CREATED_BLOCK_ASC = 'ERA_REWARDS_VARIANCE_SAMPLE_CREATED_BLOCK_ASC',
  ERA_REWARDS_VARIANCE_SAMPLE_CREATED_BLOCK_DESC = 'ERA_REWARDS_VARIANCE_SAMPLE_CREATED_BLOCK_DESC',
  ERA_REWARDS_VARIANCE_SAMPLE_CREATED_TIMESTAMP_ASC = 'ERA_REWARDS_VARIANCE_SAMPLE_CREATED_TIMESTAMP_ASC',
  ERA_REWARDS_VARIANCE_SAMPLE_CREATED_TIMESTAMP_DESC = 'ERA_REWARDS_VARIANCE_SAMPLE_CREATED_TIMESTAMP_DESC',
  ERA_REWARDS_VARIANCE_SAMPLE_DELEGATOR_ID_ASC = 'ERA_REWARDS_VARIANCE_SAMPLE_DELEGATOR_ID_ASC',
  ERA_REWARDS_VARIANCE_SAMPLE_DELEGATOR_ID_DESC = 'ERA_REWARDS_VARIANCE_SAMPLE_DELEGATOR_ID_DESC',
  ERA_REWARDS_VARIANCE_SAMPLE_ERA_IDX_ASC = 'ERA_REWARDS_VARIANCE_SAMPLE_ERA_IDX_ASC',
  ERA_REWARDS_VARIANCE_SAMPLE_ERA_IDX_DESC = 'ERA_REWARDS_VARIANCE_SAMPLE_ERA_IDX_DESC',
  ERA_REWARDS_VARIANCE_SAMPLE_ERA_ID_ASC = 'ERA_REWARDS_VARIANCE_SAMPLE_ERA_ID_ASC',
  ERA_REWARDS_VARIANCE_SAMPLE_ERA_ID_DESC = 'ERA_REWARDS_VARIANCE_SAMPLE_ERA_ID_DESC',
  ERA_REWARDS_VARIANCE_SAMPLE_ID_ASC = 'ERA_REWARDS_VARIANCE_SAMPLE_ID_ASC',
  ERA_REWARDS_VARIANCE_SAMPLE_ID_DESC = 'ERA_REWARDS_VARIANCE_SAMPLE_ID_DESC',
  ERA_REWARDS_VARIANCE_SAMPLE_INDEXER_ID_ASC = 'ERA_REWARDS_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  ERA_REWARDS_VARIANCE_SAMPLE_INDEXER_ID_DESC = 'ERA_REWARDS_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  ERA_REWARDS_VARIANCE_SAMPLE_IS_COMMISSION_ASC = 'ERA_REWARDS_VARIANCE_SAMPLE_IS_COMMISSION_ASC',
  ERA_REWARDS_VARIANCE_SAMPLE_IS_COMMISSION_DESC = 'ERA_REWARDS_VARIANCE_SAMPLE_IS_COMMISSION_DESC',
  ERA_REWARDS_VARIANCE_SAMPLE_IS_INDEXER_ASC = 'ERA_REWARDS_VARIANCE_SAMPLE_IS_INDEXER_ASC',
  ERA_REWARDS_VARIANCE_SAMPLE_IS_INDEXER_DESC = 'ERA_REWARDS_VARIANCE_SAMPLE_IS_INDEXER_DESC',
  ERA_STAKES_AVERAGE_BLOCK_RANGE_ASC = 'ERA_STAKES_AVERAGE_BLOCK_RANGE_ASC',
  ERA_STAKES_AVERAGE_BLOCK_RANGE_DESC = 'ERA_STAKES_AVERAGE_BLOCK_RANGE_DESC',
  ERA_STAKES_AVERAGE_DELEGATOR_ID_ASC = 'ERA_STAKES_AVERAGE_DELEGATOR_ID_ASC',
  ERA_STAKES_AVERAGE_DELEGATOR_ID_DESC = 'ERA_STAKES_AVERAGE_DELEGATOR_ID_DESC',
  ERA_STAKES_AVERAGE_ERA_IDX_ASC = 'ERA_STAKES_AVERAGE_ERA_IDX_ASC',
  ERA_STAKES_AVERAGE_ERA_IDX_DESC = 'ERA_STAKES_AVERAGE_ERA_IDX_DESC',
  ERA_STAKES_AVERAGE_ERA_ID_ASC = 'ERA_STAKES_AVERAGE_ERA_ID_ASC',
  ERA_STAKES_AVERAGE_ERA_ID_DESC = 'ERA_STAKES_AVERAGE_ERA_ID_DESC',
  ERA_STAKES_AVERAGE_ID_ASC = 'ERA_STAKES_AVERAGE_ID_ASC',
  ERA_STAKES_AVERAGE_ID_DESC = 'ERA_STAKES_AVERAGE_ID_DESC',
  ERA_STAKES_AVERAGE_INDEXER_ID_ASC = 'ERA_STAKES_AVERAGE_INDEXER_ID_ASC',
  ERA_STAKES_AVERAGE_INDEXER_ID_DESC = 'ERA_STAKES_AVERAGE_INDEXER_ID_DESC',
  ERA_STAKES_AVERAGE_STAKE_ASC = 'ERA_STAKES_AVERAGE_STAKE_ASC',
  ERA_STAKES_AVERAGE_STAKE_DESC = 'ERA_STAKES_AVERAGE_STAKE_DESC',
  ERA_STAKES_BY_DELEGATOR_ID__COUNT_ASC = 'ERA_STAKES_BY_DELEGATOR_ID__COUNT_ASC',
  ERA_STAKES_BY_DELEGATOR_ID__COUNT_DESC = 'ERA_STAKES_BY_DELEGATOR_ID__COUNT_DESC',
  ERA_STAKES_COUNT_ASC = 'ERA_STAKES_COUNT_ASC',
  ERA_STAKES_COUNT_DESC = 'ERA_STAKES_COUNT_DESC',
  ERA_STAKES_DISTINCT_COUNT_BLOCK_RANGE_ASC = 'ERA_STAKES_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  ERA_STAKES_DISTINCT_COUNT_BLOCK_RANGE_DESC = 'ERA_STAKES_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  ERA_STAKES_DISTINCT_COUNT_DELEGATOR_ID_ASC = 'ERA_STAKES_DISTINCT_COUNT_DELEGATOR_ID_ASC',
  ERA_STAKES_DISTINCT_COUNT_DELEGATOR_ID_DESC = 'ERA_STAKES_DISTINCT_COUNT_DELEGATOR_ID_DESC',
  ERA_STAKES_DISTINCT_COUNT_ERA_IDX_ASC = 'ERA_STAKES_DISTINCT_COUNT_ERA_IDX_ASC',
  ERA_STAKES_DISTINCT_COUNT_ERA_IDX_DESC = 'ERA_STAKES_DISTINCT_COUNT_ERA_IDX_DESC',
  ERA_STAKES_DISTINCT_COUNT_ERA_ID_ASC = 'ERA_STAKES_DISTINCT_COUNT_ERA_ID_ASC',
  ERA_STAKES_DISTINCT_COUNT_ERA_ID_DESC = 'ERA_STAKES_DISTINCT_COUNT_ERA_ID_DESC',
  ERA_STAKES_DISTINCT_COUNT_ID_ASC = 'ERA_STAKES_DISTINCT_COUNT_ID_ASC',
  ERA_STAKES_DISTINCT_COUNT_ID_DESC = 'ERA_STAKES_DISTINCT_COUNT_ID_DESC',
  ERA_STAKES_DISTINCT_COUNT_INDEXER_ID_ASC = 'ERA_STAKES_DISTINCT_COUNT_INDEXER_ID_ASC',
  ERA_STAKES_DISTINCT_COUNT_INDEXER_ID_DESC = 'ERA_STAKES_DISTINCT_COUNT_INDEXER_ID_DESC',
  ERA_STAKES_DISTINCT_COUNT_STAKE_ASC = 'ERA_STAKES_DISTINCT_COUNT_STAKE_ASC',
  ERA_STAKES_DISTINCT_COUNT_STAKE_DESC = 'ERA_STAKES_DISTINCT_COUNT_STAKE_DESC',
  ERA_STAKES_MAX_BLOCK_RANGE_ASC = 'ERA_STAKES_MAX_BLOCK_RANGE_ASC',
  ERA_STAKES_MAX_BLOCK_RANGE_DESC = 'ERA_STAKES_MAX_BLOCK_RANGE_DESC',
  ERA_STAKES_MAX_DELEGATOR_ID_ASC = 'ERA_STAKES_MAX_DELEGATOR_ID_ASC',
  ERA_STAKES_MAX_DELEGATOR_ID_DESC = 'ERA_STAKES_MAX_DELEGATOR_ID_DESC',
  ERA_STAKES_MAX_ERA_IDX_ASC = 'ERA_STAKES_MAX_ERA_IDX_ASC',
  ERA_STAKES_MAX_ERA_IDX_DESC = 'ERA_STAKES_MAX_ERA_IDX_DESC',
  ERA_STAKES_MAX_ERA_ID_ASC = 'ERA_STAKES_MAX_ERA_ID_ASC',
  ERA_STAKES_MAX_ERA_ID_DESC = 'ERA_STAKES_MAX_ERA_ID_DESC',
  ERA_STAKES_MAX_ID_ASC = 'ERA_STAKES_MAX_ID_ASC',
  ERA_STAKES_MAX_ID_DESC = 'ERA_STAKES_MAX_ID_DESC',
  ERA_STAKES_MAX_INDEXER_ID_ASC = 'ERA_STAKES_MAX_INDEXER_ID_ASC',
  ERA_STAKES_MAX_INDEXER_ID_DESC = 'ERA_STAKES_MAX_INDEXER_ID_DESC',
  ERA_STAKES_MAX_STAKE_ASC = 'ERA_STAKES_MAX_STAKE_ASC',
  ERA_STAKES_MAX_STAKE_DESC = 'ERA_STAKES_MAX_STAKE_DESC',
  ERA_STAKES_MIN_BLOCK_RANGE_ASC = 'ERA_STAKES_MIN_BLOCK_RANGE_ASC',
  ERA_STAKES_MIN_BLOCK_RANGE_DESC = 'ERA_STAKES_MIN_BLOCK_RANGE_DESC',
  ERA_STAKES_MIN_DELEGATOR_ID_ASC = 'ERA_STAKES_MIN_DELEGATOR_ID_ASC',
  ERA_STAKES_MIN_DELEGATOR_ID_DESC = 'ERA_STAKES_MIN_DELEGATOR_ID_DESC',
  ERA_STAKES_MIN_ERA_IDX_ASC = 'ERA_STAKES_MIN_ERA_IDX_ASC',
  ERA_STAKES_MIN_ERA_IDX_DESC = 'ERA_STAKES_MIN_ERA_IDX_DESC',
  ERA_STAKES_MIN_ERA_ID_ASC = 'ERA_STAKES_MIN_ERA_ID_ASC',
  ERA_STAKES_MIN_ERA_ID_DESC = 'ERA_STAKES_MIN_ERA_ID_DESC',
  ERA_STAKES_MIN_ID_ASC = 'ERA_STAKES_MIN_ID_ASC',
  ERA_STAKES_MIN_ID_DESC = 'ERA_STAKES_MIN_ID_DESC',
  ERA_STAKES_MIN_INDEXER_ID_ASC = 'ERA_STAKES_MIN_INDEXER_ID_ASC',
  ERA_STAKES_MIN_INDEXER_ID_DESC = 'ERA_STAKES_MIN_INDEXER_ID_DESC',
  ERA_STAKES_MIN_STAKE_ASC = 'ERA_STAKES_MIN_STAKE_ASC',
  ERA_STAKES_MIN_STAKE_DESC = 'ERA_STAKES_MIN_STAKE_DESC',
  ERA_STAKES_STDDEV_POPULATION_BLOCK_RANGE_ASC = 'ERA_STAKES_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  ERA_STAKES_STDDEV_POPULATION_BLOCK_RANGE_DESC = 'ERA_STAKES_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  ERA_STAKES_STDDEV_POPULATION_DELEGATOR_ID_ASC = 'ERA_STAKES_STDDEV_POPULATION_DELEGATOR_ID_ASC',
  ERA_STAKES_STDDEV_POPULATION_DELEGATOR_ID_DESC = 'ERA_STAKES_STDDEV_POPULATION_DELEGATOR_ID_DESC',
  ERA_STAKES_STDDEV_POPULATION_ERA_IDX_ASC = 'ERA_STAKES_STDDEV_POPULATION_ERA_IDX_ASC',
  ERA_STAKES_STDDEV_POPULATION_ERA_IDX_DESC = 'ERA_STAKES_STDDEV_POPULATION_ERA_IDX_DESC',
  ERA_STAKES_STDDEV_POPULATION_ERA_ID_ASC = 'ERA_STAKES_STDDEV_POPULATION_ERA_ID_ASC',
  ERA_STAKES_STDDEV_POPULATION_ERA_ID_DESC = 'ERA_STAKES_STDDEV_POPULATION_ERA_ID_DESC',
  ERA_STAKES_STDDEV_POPULATION_ID_ASC = 'ERA_STAKES_STDDEV_POPULATION_ID_ASC',
  ERA_STAKES_STDDEV_POPULATION_ID_DESC = 'ERA_STAKES_STDDEV_POPULATION_ID_DESC',
  ERA_STAKES_STDDEV_POPULATION_INDEXER_ID_ASC = 'ERA_STAKES_STDDEV_POPULATION_INDEXER_ID_ASC',
  ERA_STAKES_STDDEV_POPULATION_INDEXER_ID_DESC = 'ERA_STAKES_STDDEV_POPULATION_INDEXER_ID_DESC',
  ERA_STAKES_STDDEV_POPULATION_STAKE_ASC = 'ERA_STAKES_STDDEV_POPULATION_STAKE_ASC',
  ERA_STAKES_STDDEV_POPULATION_STAKE_DESC = 'ERA_STAKES_STDDEV_POPULATION_STAKE_DESC',
  ERA_STAKES_STDDEV_SAMPLE_BLOCK_RANGE_ASC = 'ERA_STAKES_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  ERA_STAKES_STDDEV_SAMPLE_BLOCK_RANGE_DESC = 'ERA_STAKES_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  ERA_STAKES_STDDEV_SAMPLE_DELEGATOR_ID_ASC = 'ERA_STAKES_STDDEV_SAMPLE_DELEGATOR_ID_ASC',
  ERA_STAKES_STDDEV_SAMPLE_DELEGATOR_ID_DESC = 'ERA_STAKES_STDDEV_SAMPLE_DELEGATOR_ID_DESC',
  ERA_STAKES_STDDEV_SAMPLE_ERA_IDX_ASC = 'ERA_STAKES_STDDEV_SAMPLE_ERA_IDX_ASC',
  ERA_STAKES_STDDEV_SAMPLE_ERA_IDX_DESC = 'ERA_STAKES_STDDEV_SAMPLE_ERA_IDX_DESC',
  ERA_STAKES_STDDEV_SAMPLE_ERA_ID_ASC = 'ERA_STAKES_STDDEV_SAMPLE_ERA_ID_ASC',
  ERA_STAKES_STDDEV_SAMPLE_ERA_ID_DESC = 'ERA_STAKES_STDDEV_SAMPLE_ERA_ID_DESC',
  ERA_STAKES_STDDEV_SAMPLE_ID_ASC = 'ERA_STAKES_STDDEV_SAMPLE_ID_ASC',
  ERA_STAKES_STDDEV_SAMPLE_ID_DESC = 'ERA_STAKES_STDDEV_SAMPLE_ID_DESC',
  ERA_STAKES_STDDEV_SAMPLE_INDEXER_ID_ASC = 'ERA_STAKES_STDDEV_SAMPLE_INDEXER_ID_ASC',
  ERA_STAKES_STDDEV_SAMPLE_INDEXER_ID_DESC = 'ERA_STAKES_STDDEV_SAMPLE_INDEXER_ID_DESC',
  ERA_STAKES_STDDEV_SAMPLE_STAKE_ASC = 'ERA_STAKES_STDDEV_SAMPLE_STAKE_ASC',
  ERA_STAKES_STDDEV_SAMPLE_STAKE_DESC = 'ERA_STAKES_STDDEV_SAMPLE_STAKE_DESC',
  ERA_STAKES_SUM_BLOCK_RANGE_ASC = 'ERA_STAKES_SUM_BLOCK_RANGE_ASC',
  ERA_STAKES_SUM_BLOCK_RANGE_DESC = 'ERA_STAKES_SUM_BLOCK_RANGE_DESC',
  ERA_STAKES_SUM_DELEGATOR_ID_ASC = 'ERA_STAKES_SUM_DELEGATOR_ID_ASC',
  ERA_STAKES_SUM_DELEGATOR_ID_DESC = 'ERA_STAKES_SUM_DELEGATOR_ID_DESC',
  ERA_STAKES_SUM_ERA_IDX_ASC = 'ERA_STAKES_SUM_ERA_IDX_ASC',
  ERA_STAKES_SUM_ERA_IDX_DESC = 'ERA_STAKES_SUM_ERA_IDX_DESC',
  ERA_STAKES_SUM_ERA_ID_ASC = 'ERA_STAKES_SUM_ERA_ID_ASC',
  ERA_STAKES_SUM_ERA_ID_DESC = 'ERA_STAKES_SUM_ERA_ID_DESC',
  ERA_STAKES_SUM_ID_ASC = 'ERA_STAKES_SUM_ID_ASC',
  ERA_STAKES_SUM_ID_DESC = 'ERA_STAKES_SUM_ID_DESC',
  ERA_STAKES_SUM_INDEXER_ID_ASC = 'ERA_STAKES_SUM_INDEXER_ID_ASC',
  ERA_STAKES_SUM_INDEXER_ID_DESC = 'ERA_STAKES_SUM_INDEXER_ID_DESC',
  ERA_STAKES_SUM_STAKE_ASC = 'ERA_STAKES_SUM_STAKE_ASC',
  ERA_STAKES_SUM_STAKE_DESC = 'ERA_STAKES_SUM_STAKE_DESC',
  ERA_STAKES_VARIANCE_POPULATION_BLOCK_RANGE_ASC = 'ERA_STAKES_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  ERA_STAKES_VARIANCE_POPULATION_BLOCK_RANGE_DESC = 'ERA_STAKES_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  ERA_STAKES_VARIANCE_POPULATION_DELEGATOR_ID_ASC = 'ERA_STAKES_VARIANCE_POPULATION_DELEGATOR_ID_ASC',
  ERA_STAKES_VARIANCE_POPULATION_DELEGATOR_ID_DESC = 'ERA_STAKES_VARIANCE_POPULATION_DELEGATOR_ID_DESC',
  ERA_STAKES_VARIANCE_POPULATION_ERA_IDX_ASC = 'ERA_STAKES_VARIANCE_POPULATION_ERA_IDX_ASC',
  ERA_STAKES_VARIANCE_POPULATION_ERA_IDX_DESC = 'ERA_STAKES_VARIANCE_POPULATION_ERA_IDX_DESC',
  ERA_STAKES_VARIANCE_POPULATION_ERA_ID_ASC = 'ERA_STAKES_VARIANCE_POPULATION_ERA_ID_ASC',
  ERA_STAKES_VARIANCE_POPULATION_ERA_ID_DESC = 'ERA_STAKES_VARIANCE_POPULATION_ERA_ID_DESC',
  ERA_STAKES_VARIANCE_POPULATION_ID_ASC = 'ERA_STAKES_VARIANCE_POPULATION_ID_ASC',
  ERA_STAKES_VARIANCE_POPULATION_ID_DESC = 'ERA_STAKES_VARIANCE_POPULATION_ID_DESC',
  ERA_STAKES_VARIANCE_POPULATION_INDEXER_ID_ASC = 'ERA_STAKES_VARIANCE_POPULATION_INDEXER_ID_ASC',
  ERA_STAKES_VARIANCE_POPULATION_INDEXER_ID_DESC = 'ERA_STAKES_VARIANCE_POPULATION_INDEXER_ID_DESC',
  ERA_STAKES_VARIANCE_POPULATION_STAKE_ASC = 'ERA_STAKES_VARIANCE_POPULATION_STAKE_ASC',
  ERA_STAKES_VARIANCE_POPULATION_STAKE_DESC = 'ERA_STAKES_VARIANCE_POPULATION_STAKE_DESC',
  ERA_STAKES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC = 'ERA_STAKES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  ERA_STAKES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC = 'ERA_STAKES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  ERA_STAKES_VARIANCE_SAMPLE_DELEGATOR_ID_ASC = 'ERA_STAKES_VARIANCE_SAMPLE_DELEGATOR_ID_ASC',
  ERA_STAKES_VARIANCE_SAMPLE_DELEGATOR_ID_DESC = 'ERA_STAKES_VARIANCE_SAMPLE_DELEGATOR_ID_DESC',
  ERA_STAKES_VARIANCE_SAMPLE_ERA_IDX_ASC = 'ERA_STAKES_VARIANCE_SAMPLE_ERA_IDX_ASC',
  ERA_STAKES_VARIANCE_SAMPLE_ERA_IDX_DESC = 'ERA_STAKES_VARIANCE_SAMPLE_ERA_IDX_DESC',
  ERA_STAKES_VARIANCE_SAMPLE_ERA_ID_ASC = 'ERA_STAKES_VARIANCE_SAMPLE_ERA_ID_ASC',
  ERA_STAKES_VARIANCE_SAMPLE_ERA_ID_DESC = 'ERA_STAKES_VARIANCE_SAMPLE_ERA_ID_DESC',
  ERA_STAKES_VARIANCE_SAMPLE_ID_ASC = 'ERA_STAKES_VARIANCE_SAMPLE_ID_ASC',
  ERA_STAKES_VARIANCE_SAMPLE_ID_DESC = 'ERA_STAKES_VARIANCE_SAMPLE_ID_DESC',
  ERA_STAKES_VARIANCE_SAMPLE_INDEXER_ID_ASC = 'ERA_STAKES_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  ERA_STAKES_VARIANCE_SAMPLE_INDEXER_ID_DESC = 'ERA_STAKES_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  ERA_STAKES_VARIANCE_SAMPLE_STAKE_ASC = 'ERA_STAKES_VARIANCE_SAMPLE_STAKE_ASC',
  ERA_STAKES_VARIANCE_SAMPLE_STAKE_DESC = 'ERA_STAKES_VARIANCE_SAMPLE_STAKE_DESC',
  EXIT_ERA_ASC = 'EXIT_ERA_ASC',
  EXIT_ERA_DESC = 'EXIT_ERA_DESC',
  ID_ASC = 'ID_ASC',
  ID_DESC = 'ID_DESC',
  LAST_EVENT_ASC = 'LAST_EVENT_ASC',
  LAST_EVENT_DESC = 'LAST_EVENT_DESC',
  NATURAL = 'NATURAL',
  PRIMARY_KEY_ASC = 'PRIMARY_KEY_ASC',
  PRIMARY_KEY_DESC = 'PRIMARY_KEY_DESC',
  REWARDS_BY_DELEGATOR_ID__COUNT_ASC = 'REWARDS_BY_DELEGATOR_ID__COUNT_ASC',
  REWARDS_BY_DELEGATOR_ID__COUNT_DESC = 'REWARDS_BY_DELEGATOR_ID__COUNT_DESC',
  START_ERA_ASC = 'START_ERA_ASC',
  START_ERA_DESC = 'START_ERA_DESC',
  TOTAL_DELEGATIONS_ASC = 'TOTAL_DELEGATIONS_ASC',
  TOTAL_DELEGATIONS_DESC = 'TOTAL_DELEGATIONS_DESC',
  UNCLAIMED_REWARDS_AVERAGE_AMOUNT_ASC = 'UNCLAIMED_REWARDS_AVERAGE_AMOUNT_ASC',
  UNCLAIMED_REWARDS_AVERAGE_AMOUNT_DESC = 'UNCLAIMED_REWARDS_AVERAGE_AMOUNT_DESC',
  UNCLAIMED_REWARDS_AVERAGE_BLOCK_RANGE_ASC = 'UNCLAIMED_REWARDS_AVERAGE_BLOCK_RANGE_ASC',
  UNCLAIMED_REWARDS_AVERAGE_BLOCK_RANGE_DESC = 'UNCLAIMED_REWARDS_AVERAGE_BLOCK_RANGE_DESC',
  UNCLAIMED_REWARDS_AVERAGE_CREATED_BLOCK_ASC = 'UNCLAIMED_REWARDS_AVERAGE_CREATED_BLOCK_ASC',
  UNCLAIMED_REWARDS_AVERAGE_CREATED_BLOCK_DESC = 'UNCLAIMED_REWARDS_AVERAGE_CREATED_BLOCK_DESC',
  UNCLAIMED_REWARDS_AVERAGE_DELEGATOR_ADDRESS_ASC = 'UNCLAIMED_REWARDS_AVERAGE_DELEGATOR_ADDRESS_ASC',
  UNCLAIMED_REWARDS_AVERAGE_DELEGATOR_ADDRESS_DESC = 'UNCLAIMED_REWARDS_AVERAGE_DELEGATOR_ADDRESS_DESC',
  UNCLAIMED_REWARDS_AVERAGE_DELEGATOR_ID_ASC = 'UNCLAIMED_REWARDS_AVERAGE_DELEGATOR_ID_ASC',
  UNCLAIMED_REWARDS_AVERAGE_DELEGATOR_ID_DESC = 'UNCLAIMED_REWARDS_AVERAGE_DELEGATOR_ID_DESC',
  UNCLAIMED_REWARDS_AVERAGE_ID_ASC = 'UNCLAIMED_REWARDS_AVERAGE_ID_ASC',
  UNCLAIMED_REWARDS_AVERAGE_ID_DESC = 'UNCLAIMED_REWARDS_AVERAGE_ID_DESC',
  UNCLAIMED_REWARDS_AVERAGE_INDEXER_ADDRESS_ASC = 'UNCLAIMED_REWARDS_AVERAGE_INDEXER_ADDRESS_ASC',
  UNCLAIMED_REWARDS_AVERAGE_INDEXER_ADDRESS_DESC = 'UNCLAIMED_REWARDS_AVERAGE_INDEXER_ADDRESS_DESC',
  UNCLAIMED_REWARDS_AVERAGE_LAST_EVENT_ASC = 'UNCLAIMED_REWARDS_AVERAGE_LAST_EVENT_ASC',
  UNCLAIMED_REWARDS_AVERAGE_LAST_EVENT_DESC = 'UNCLAIMED_REWARDS_AVERAGE_LAST_EVENT_DESC',
  UNCLAIMED_REWARDS_BY_DELEGATOR_ID__COUNT_ASC = 'UNCLAIMED_REWARDS_BY_DELEGATOR_ID__COUNT_ASC',
  UNCLAIMED_REWARDS_BY_DELEGATOR_ID__COUNT_DESC = 'UNCLAIMED_REWARDS_BY_DELEGATOR_ID__COUNT_DESC',
  UNCLAIMED_REWARDS_COUNT_ASC = 'UNCLAIMED_REWARDS_COUNT_ASC',
  UNCLAIMED_REWARDS_COUNT_DESC = 'UNCLAIMED_REWARDS_COUNT_DESC',
  UNCLAIMED_REWARDS_DISTINCT_COUNT_AMOUNT_ASC = 'UNCLAIMED_REWARDS_DISTINCT_COUNT_AMOUNT_ASC',
  UNCLAIMED_REWARDS_DISTINCT_COUNT_AMOUNT_DESC = 'UNCLAIMED_REWARDS_DISTINCT_COUNT_AMOUNT_DESC',
  UNCLAIMED_REWARDS_DISTINCT_COUNT_BLOCK_RANGE_ASC = 'UNCLAIMED_REWARDS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  UNCLAIMED_REWARDS_DISTINCT_COUNT_BLOCK_RANGE_DESC = 'UNCLAIMED_REWARDS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  UNCLAIMED_REWARDS_DISTINCT_COUNT_CREATED_BLOCK_ASC = 'UNCLAIMED_REWARDS_DISTINCT_COUNT_CREATED_BLOCK_ASC',
  UNCLAIMED_REWARDS_DISTINCT_COUNT_CREATED_BLOCK_DESC = 'UNCLAIMED_REWARDS_DISTINCT_COUNT_CREATED_BLOCK_DESC',
  UNCLAIMED_REWARDS_DISTINCT_COUNT_DELEGATOR_ADDRESS_ASC = 'UNCLAIMED_REWARDS_DISTINCT_COUNT_DELEGATOR_ADDRESS_ASC',
  UNCLAIMED_REWARDS_DISTINCT_COUNT_DELEGATOR_ADDRESS_DESC = 'UNCLAIMED_REWARDS_DISTINCT_COUNT_DELEGATOR_ADDRESS_DESC',
  UNCLAIMED_REWARDS_DISTINCT_COUNT_DELEGATOR_ID_ASC = 'UNCLAIMED_REWARDS_DISTINCT_COUNT_DELEGATOR_ID_ASC',
  UNCLAIMED_REWARDS_DISTINCT_COUNT_DELEGATOR_ID_DESC = 'UNCLAIMED_REWARDS_DISTINCT_COUNT_DELEGATOR_ID_DESC',
  UNCLAIMED_REWARDS_DISTINCT_COUNT_ID_ASC = 'UNCLAIMED_REWARDS_DISTINCT_COUNT_ID_ASC',
  UNCLAIMED_REWARDS_DISTINCT_COUNT_ID_DESC = 'UNCLAIMED_REWARDS_DISTINCT_COUNT_ID_DESC',
  UNCLAIMED_REWARDS_DISTINCT_COUNT_INDEXER_ADDRESS_ASC = 'UNCLAIMED_REWARDS_DISTINCT_COUNT_INDEXER_ADDRESS_ASC',
  UNCLAIMED_REWARDS_DISTINCT_COUNT_INDEXER_ADDRESS_DESC = 'UNCLAIMED_REWARDS_DISTINCT_COUNT_INDEXER_ADDRESS_DESC',
  UNCLAIMED_REWARDS_DISTINCT_COUNT_LAST_EVENT_ASC = 'UNCLAIMED_REWARDS_DISTINCT_COUNT_LAST_EVENT_ASC',
  UNCLAIMED_REWARDS_DISTINCT_COUNT_LAST_EVENT_DESC = 'UNCLAIMED_REWARDS_DISTINCT_COUNT_LAST_EVENT_DESC',
  UNCLAIMED_REWARDS_MAX_AMOUNT_ASC = 'UNCLAIMED_REWARDS_MAX_AMOUNT_ASC',
  UNCLAIMED_REWARDS_MAX_AMOUNT_DESC = 'UNCLAIMED_REWARDS_MAX_AMOUNT_DESC',
  UNCLAIMED_REWARDS_MAX_BLOCK_RANGE_ASC = 'UNCLAIMED_REWARDS_MAX_BLOCK_RANGE_ASC',
  UNCLAIMED_REWARDS_MAX_BLOCK_RANGE_DESC = 'UNCLAIMED_REWARDS_MAX_BLOCK_RANGE_DESC',
  UNCLAIMED_REWARDS_MAX_CREATED_BLOCK_ASC = 'UNCLAIMED_REWARDS_MAX_CREATED_BLOCK_ASC',
  UNCLAIMED_REWARDS_MAX_CREATED_BLOCK_DESC = 'UNCLAIMED_REWARDS_MAX_CREATED_BLOCK_DESC',
  UNCLAIMED_REWARDS_MAX_DELEGATOR_ADDRESS_ASC = 'UNCLAIMED_REWARDS_MAX_DELEGATOR_ADDRESS_ASC',
  UNCLAIMED_REWARDS_MAX_DELEGATOR_ADDRESS_DESC = 'UNCLAIMED_REWARDS_MAX_DELEGATOR_ADDRESS_DESC',
  UNCLAIMED_REWARDS_MAX_DELEGATOR_ID_ASC = 'UNCLAIMED_REWARDS_MAX_DELEGATOR_ID_ASC',
  UNCLAIMED_REWARDS_MAX_DELEGATOR_ID_DESC = 'UNCLAIMED_REWARDS_MAX_DELEGATOR_ID_DESC',
  UNCLAIMED_REWARDS_MAX_ID_ASC = 'UNCLAIMED_REWARDS_MAX_ID_ASC',
  UNCLAIMED_REWARDS_MAX_ID_DESC = 'UNCLAIMED_REWARDS_MAX_ID_DESC',
  UNCLAIMED_REWARDS_MAX_INDEXER_ADDRESS_ASC = 'UNCLAIMED_REWARDS_MAX_INDEXER_ADDRESS_ASC',
  UNCLAIMED_REWARDS_MAX_INDEXER_ADDRESS_DESC = 'UNCLAIMED_REWARDS_MAX_INDEXER_ADDRESS_DESC',
  UNCLAIMED_REWARDS_MAX_LAST_EVENT_ASC = 'UNCLAIMED_REWARDS_MAX_LAST_EVENT_ASC',
  UNCLAIMED_REWARDS_MAX_LAST_EVENT_DESC = 'UNCLAIMED_REWARDS_MAX_LAST_EVENT_DESC',
  UNCLAIMED_REWARDS_MIN_AMOUNT_ASC = 'UNCLAIMED_REWARDS_MIN_AMOUNT_ASC',
  UNCLAIMED_REWARDS_MIN_AMOUNT_DESC = 'UNCLAIMED_REWARDS_MIN_AMOUNT_DESC',
  UNCLAIMED_REWARDS_MIN_BLOCK_RANGE_ASC = 'UNCLAIMED_REWARDS_MIN_BLOCK_RANGE_ASC',
  UNCLAIMED_REWARDS_MIN_BLOCK_RANGE_DESC = 'UNCLAIMED_REWARDS_MIN_BLOCK_RANGE_DESC',
  UNCLAIMED_REWARDS_MIN_CREATED_BLOCK_ASC = 'UNCLAIMED_REWARDS_MIN_CREATED_BLOCK_ASC',
  UNCLAIMED_REWARDS_MIN_CREATED_BLOCK_DESC = 'UNCLAIMED_REWARDS_MIN_CREATED_BLOCK_DESC',
  UNCLAIMED_REWARDS_MIN_DELEGATOR_ADDRESS_ASC = 'UNCLAIMED_REWARDS_MIN_DELEGATOR_ADDRESS_ASC',
  UNCLAIMED_REWARDS_MIN_DELEGATOR_ADDRESS_DESC = 'UNCLAIMED_REWARDS_MIN_DELEGATOR_ADDRESS_DESC',
  UNCLAIMED_REWARDS_MIN_DELEGATOR_ID_ASC = 'UNCLAIMED_REWARDS_MIN_DELEGATOR_ID_ASC',
  UNCLAIMED_REWARDS_MIN_DELEGATOR_ID_DESC = 'UNCLAIMED_REWARDS_MIN_DELEGATOR_ID_DESC',
  UNCLAIMED_REWARDS_MIN_ID_ASC = 'UNCLAIMED_REWARDS_MIN_ID_ASC',
  UNCLAIMED_REWARDS_MIN_ID_DESC = 'UNCLAIMED_REWARDS_MIN_ID_DESC',
  UNCLAIMED_REWARDS_MIN_INDEXER_ADDRESS_ASC = 'UNCLAIMED_REWARDS_MIN_INDEXER_ADDRESS_ASC',
  UNCLAIMED_REWARDS_MIN_INDEXER_ADDRESS_DESC = 'UNCLAIMED_REWARDS_MIN_INDEXER_ADDRESS_DESC',
  UNCLAIMED_REWARDS_MIN_LAST_EVENT_ASC = 'UNCLAIMED_REWARDS_MIN_LAST_EVENT_ASC',
  UNCLAIMED_REWARDS_MIN_LAST_EVENT_DESC = 'UNCLAIMED_REWARDS_MIN_LAST_EVENT_DESC',
  UNCLAIMED_REWARDS_STDDEV_POPULATION_AMOUNT_ASC = 'UNCLAIMED_REWARDS_STDDEV_POPULATION_AMOUNT_ASC',
  UNCLAIMED_REWARDS_STDDEV_POPULATION_AMOUNT_DESC = 'UNCLAIMED_REWARDS_STDDEV_POPULATION_AMOUNT_DESC',
  UNCLAIMED_REWARDS_STDDEV_POPULATION_BLOCK_RANGE_ASC = 'UNCLAIMED_REWARDS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  UNCLAIMED_REWARDS_STDDEV_POPULATION_BLOCK_RANGE_DESC = 'UNCLAIMED_REWARDS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  UNCLAIMED_REWARDS_STDDEV_POPULATION_CREATED_BLOCK_ASC = 'UNCLAIMED_REWARDS_STDDEV_POPULATION_CREATED_BLOCK_ASC',
  UNCLAIMED_REWARDS_STDDEV_POPULATION_CREATED_BLOCK_DESC = 'UNCLAIMED_REWARDS_STDDEV_POPULATION_CREATED_BLOCK_DESC',
  UNCLAIMED_REWARDS_STDDEV_POPULATION_DELEGATOR_ADDRESS_ASC = 'UNCLAIMED_REWARDS_STDDEV_POPULATION_DELEGATOR_ADDRESS_ASC',
  UNCLAIMED_REWARDS_STDDEV_POPULATION_DELEGATOR_ADDRESS_DESC = 'UNCLAIMED_REWARDS_STDDEV_POPULATION_DELEGATOR_ADDRESS_DESC',
  UNCLAIMED_REWARDS_STDDEV_POPULATION_DELEGATOR_ID_ASC = 'UNCLAIMED_REWARDS_STDDEV_POPULATION_DELEGATOR_ID_ASC',
  UNCLAIMED_REWARDS_STDDEV_POPULATION_DELEGATOR_ID_DESC = 'UNCLAIMED_REWARDS_STDDEV_POPULATION_DELEGATOR_ID_DESC',
  UNCLAIMED_REWARDS_STDDEV_POPULATION_ID_ASC = 'UNCLAIMED_REWARDS_STDDEV_POPULATION_ID_ASC',
  UNCLAIMED_REWARDS_STDDEV_POPULATION_ID_DESC = 'UNCLAIMED_REWARDS_STDDEV_POPULATION_ID_DESC',
  UNCLAIMED_REWARDS_STDDEV_POPULATION_INDEXER_ADDRESS_ASC = 'UNCLAIMED_REWARDS_STDDEV_POPULATION_INDEXER_ADDRESS_ASC',
  UNCLAIMED_REWARDS_STDDEV_POPULATION_INDEXER_ADDRESS_DESC = 'UNCLAIMED_REWARDS_STDDEV_POPULATION_INDEXER_ADDRESS_DESC',
  UNCLAIMED_REWARDS_STDDEV_POPULATION_LAST_EVENT_ASC = 'UNCLAIMED_REWARDS_STDDEV_POPULATION_LAST_EVENT_ASC',
  UNCLAIMED_REWARDS_STDDEV_POPULATION_LAST_EVENT_DESC = 'UNCLAIMED_REWARDS_STDDEV_POPULATION_LAST_EVENT_DESC',
  UNCLAIMED_REWARDS_STDDEV_SAMPLE_AMOUNT_ASC = 'UNCLAIMED_REWARDS_STDDEV_SAMPLE_AMOUNT_ASC',
  UNCLAIMED_REWARDS_STDDEV_SAMPLE_AMOUNT_DESC = 'UNCLAIMED_REWARDS_STDDEV_SAMPLE_AMOUNT_DESC',
  UNCLAIMED_REWARDS_STDDEV_SAMPLE_BLOCK_RANGE_ASC = 'UNCLAIMED_REWARDS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  UNCLAIMED_REWARDS_STDDEV_SAMPLE_BLOCK_RANGE_DESC = 'UNCLAIMED_REWARDS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  UNCLAIMED_REWARDS_STDDEV_SAMPLE_CREATED_BLOCK_ASC = 'UNCLAIMED_REWARDS_STDDEV_SAMPLE_CREATED_BLOCK_ASC',
  UNCLAIMED_REWARDS_STDDEV_SAMPLE_CREATED_BLOCK_DESC = 'UNCLAIMED_REWARDS_STDDEV_SAMPLE_CREATED_BLOCK_DESC',
  UNCLAIMED_REWARDS_STDDEV_SAMPLE_DELEGATOR_ADDRESS_ASC = 'UNCLAIMED_REWARDS_STDDEV_SAMPLE_DELEGATOR_ADDRESS_ASC',
  UNCLAIMED_REWARDS_STDDEV_SAMPLE_DELEGATOR_ADDRESS_DESC = 'UNCLAIMED_REWARDS_STDDEV_SAMPLE_DELEGATOR_ADDRESS_DESC',
  UNCLAIMED_REWARDS_STDDEV_SAMPLE_DELEGATOR_ID_ASC = 'UNCLAIMED_REWARDS_STDDEV_SAMPLE_DELEGATOR_ID_ASC',
  UNCLAIMED_REWARDS_STDDEV_SAMPLE_DELEGATOR_ID_DESC = 'UNCLAIMED_REWARDS_STDDEV_SAMPLE_DELEGATOR_ID_DESC',
  UNCLAIMED_REWARDS_STDDEV_SAMPLE_ID_ASC = 'UNCLAIMED_REWARDS_STDDEV_SAMPLE_ID_ASC',
  UNCLAIMED_REWARDS_STDDEV_SAMPLE_ID_DESC = 'UNCLAIMED_REWARDS_STDDEV_SAMPLE_ID_DESC',
  UNCLAIMED_REWARDS_STDDEV_SAMPLE_INDEXER_ADDRESS_ASC = 'UNCLAIMED_REWARDS_STDDEV_SAMPLE_INDEXER_ADDRESS_ASC',
  UNCLAIMED_REWARDS_STDDEV_SAMPLE_INDEXER_ADDRESS_DESC = 'UNCLAIMED_REWARDS_STDDEV_SAMPLE_INDEXER_ADDRESS_DESC',
  UNCLAIMED_REWARDS_STDDEV_SAMPLE_LAST_EVENT_ASC = 'UNCLAIMED_REWARDS_STDDEV_SAMPLE_LAST_EVENT_ASC',
  UNCLAIMED_REWARDS_STDDEV_SAMPLE_LAST_EVENT_DESC = 'UNCLAIMED_REWARDS_STDDEV_SAMPLE_LAST_EVENT_DESC',
  UNCLAIMED_REWARDS_SUM_AMOUNT_ASC = 'UNCLAIMED_REWARDS_SUM_AMOUNT_ASC',
  UNCLAIMED_REWARDS_SUM_AMOUNT_DESC = 'UNCLAIMED_REWARDS_SUM_AMOUNT_DESC',
  UNCLAIMED_REWARDS_SUM_BLOCK_RANGE_ASC = 'UNCLAIMED_REWARDS_SUM_BLOCK_RANGE_ASC',
  UNCLAIMED_REWARDS_SUM_BLOCK_RANGE_DESC = 'UNCLAIMED_REWARDS_SUM_BLOCK_RANGE_DESC',
  UNCLAIMED_REWARDS_SUM_CREATED_BLOCK_ASC = 'UNCLAIMED_REWARDS_SUM_CREATED_BLOCK_ASC',
  UNCLAIMED_REWARDS_SUM_CREATED_BLOCK_DESC = 'UNCLAIMED_REWARDS_SUM_CREATED_BLOCK_DESC',
  UNCLAIMED_REWARDS_SUM_DELEGATOR_ADDRESS_ASC = 'UNCLAIMED_REWARDS_SUM_DELEGATOR_ADDRESS_ASC',
  UNCLAIMED_REWARDS_SUM_DELEGATOR_ADDRESS_DESC = 'UNCLAIMED_REWARDS_SUM_DELEGATOR_ADDRESS_DESC',
  UNCLAIMED_REWARDS_SUM_DELEGATOR_ID_ASC = 'UNCLAIMED_REWARDS_SUM_DELEGATOR_ID_ASC',
  UNCLAIMED_REWARDS_SUM_DELEGATOR_ID_DESC = 'UNCLAIMED_REWARDS_SUM_DELEGATOR_ID_DESC',
  UNCLAIMED_REWARDS_SUM_ID_ASC = 'UNCLAIMED_REWARDS_SUM_ID_ASC',
  UNCLAIMED_REWARDS_SUM_ID_DESC = 'UNCLAIMED_REWARDS_SUM_ID_DESC',
  UNCLAIMED_REWARDS_SUM_INDEXER_ADDRESS_ASC = 'UNCLAIMED_REWARDS_SUM_INDEXER_ADDRESS_ASC',
  UNCLAIMED_REWARDS_SUM_INDEXER_ADDRESS_DESC = 'UNCLAIMED_REWARDS_SUM_INDEXER_ADDRESS_DESC',
  UNCLAIMED_REWARDS_SUM_LAST_EVENT_ASC = 'UNCLAIMED_REWARDS_SUM_LAST_EVENT_ASC',
  UNCLAIMED_REWARDS_SUM_LAST_EVENT_DESC = 'UNCLAIMED_REWARDS_SUM_LAST_EVENT_DESC',
  UNCLAIMED_REWARDS_VARIANCE_POPULATION_AMOUNT_ASC = 'UNCLAIMED_REWARDS_VARIANCE_POPULATION_AMOUNT_ASC',
  UNCLAIMED_REWARDS_VARIANCE_POPULATION_AMOUNT_DESC = 'UNCLAIMED_REWARDS_VARIANCE_POPULATION_AMOUNT_DESC',
  UNCLAIMED_REWARDS_VARIANCE_POPULATION_BLOCK_RANGE_ASC = 'UNCLAIMED_REWARDS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  UNCLAIMED_REWARDS_VARIANCE_POPULATION_BLOCK_RANGE_DESC = 'UNCLAIMED_REWARDS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  UNCLAIMED_REWARDS_VARIANCE_POPULATION_CREATED_BLOCK_ASC = 'UNCLAIMED_REWARDS_VARIANCE_POPULATION_CREATED_BLOCK_ASC',
  UNCLAIMED_REWARDS_VARIANCE_POPULATION_CREATED_BLOCK_DESC = 'UNCLAIMED_REWARDS_VARIANCE_POPULATION_CREATED_BLOCK_DESC',
  UNCLAIMED_REWARDS_VARIANCE_POPULATION_DELEGATOR_ADDRESS_ASC = 'UNCLAIMED_REWARDS_VARIANCE_POPULATION_DELEGATOR_ADDRESS_ASC',
  UNCLAIMED_REWARDS_VARIANCE_POPULATION_DELEGATOR_ADDRESS_DESC = 'UNCLAIMED_REWARDS_VARIANCE_POPULATION_DELEGATOR_ADDRESS_DESC',
  UNCLAIMED_REWARDS_VARIANCE_POPULATION_DELEGATOR_ID_ASC = 'UNCLAIMED_REWARDS_VARIANCE_POPULATION_DELEGATOR_ID_ASC',
  UNCLAIMED_REWARDS_VARIANCE_POPULATION_DELEGATOR_ID_DESC = 'UNCLAIMED_REWARDS_VARIANCE_POPULATION_DELEGATOR_ID_DESC',
  UNCLAIMED_REWARDS_VARIANCE_POPULATION_ID_ASC = 'UNCLAIMED_REWARDS_VARIANCE_POPULATION_ID_ASC',
  UNCLAIMED_REWARDS_VARIANCE_POPULATION_ID_DESC = 'UNCLAIMED_REWARDS_VARIANCE_POPULATION_ID_DESC',
  UNCLAIMED_REWARDS_VARIANCE_POPULATION_INDEXER_ADDRESS_ASC = 'UNCLAIMED_REWARDS_VARIANCE_POPULATION_INDEXER_ADDRESS_ASC',
  UNCLAIMED_REWARDS_VARIANCE_POPULATION_INDEXER_ADDRESS_DESC = 'UNCLAIMED_REWARDS_VARIANCE_POPULATION_INDEXER_ADDRESS_DESC',
  UNCLAIMED_REWARDS_VARIANCE_POPULATION_LAST_EVENT_ASC = 'UNCLAIMED_REWARDS_VARIANCE_POPULATION_LAST_EVENT_ASC',
  UNCLAIMED_REWARDS_VARIANCE_POPULATION_LAST_EVENT_DESC = 'UNCLAIMED_REWARDS_VARIANCE_POPULATION_LAST_EVENT_DESC',
  UNCLAIMED_REWARDS_VARIANCE_SAMPLE_AMOUNT_ASC = 'UNCLAIMED_REWARDS_VARIANCE_SAMPLE_AMOUNT_ASC',
  UNCLAIMED_REWARDS_VARIANCE_SAMPLE_AMOUNT_DESC = 'UNCLAIMED_REWARDS_VARIANCE_SAMPLE_AMOUNT_DESC',
  UNCLAIMED_REWARDS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC = 'UNCLAIMED_REWARDS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  UNCLAIMED_REWARDS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC = 'UNCLAIMED_REWARDS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  UNCLAIMED_REWARDS_VARIANCE_SAMPLE_CREATED_BLOCK_ASC = 'UNCLAIMED_REWARDS_VARIANCE_SAMPLE_CREATED_BLOCK_ASC',
  UNCLAIMED_REWARDS_VARIANCE_SAMPLE_CREATED_BLOCK_DESC = 'UNCLAIMED_REWARDS_VARIANCE_SAMPLE_CREATED_BLOCK_DESC',
  UNCLAIMED_REWARDS_VARIANCE_SAMPLE_DELEGATOR_ADDRESS_ASC = 'UNCLAIMED_REWARDS_VARIANCE_SAMPLE_DELEGATOR_ADDRESS_ASC',
  UNCLAIMED_REWARDS_VARIANCE_SAMPLE_DELEGATOR_ADDRESS_DESC = 'UNCLAIMED_REWARDS_VARIANCE_SAMPLE_DELEGATOR_ADDRESS_DESC',
  UNCLAIMED_REWARDS_VARIANCE_SAMPLE_DELEGATOR_ID_ASC = 'UNCLAIMED_REWARDS_VARIANCE_SAMPLE_DELEGATOR_ID_ASC',
  UNCLAIMED_REWARDS_VARIANCE_SAMPLE_DELEGATOR_ID_DESC = 'UNCLAIMED_REWARDS_VARIANCE_SAMPLE_DELEGATOR_ID_DESC',
  UNCLAIMED_REWARDS_VARIANCE_SAMPLE_ID_ASC = 'UNCLAIMED_REWARDS_VARIANCE_SAMPLE_ID_ASC',
  UNCLAIMED_REWARDS_VARIANCE_SAMPLE_ID_DESC = 'UNCLAIMED_REWARDS_VARIANCE_SAMPLE_ID_DESC',
  UNCLAIMED_REWARDS_VARIANCE_SAMPLE_INDEXER_ADDRESS_ASC = 'UNCLAIMED_REWARDS_VARIANCE_SAMPLE_INDEXER_ADDRESS_ASC',
  UNCLAIMED_REWARDS_VARIANCE_SAMPLE_INDEXER_ADDRESS_DESC = 'UNCLAIMED_REWARDS_VARIANCE_SAMPLE_INDEXER_ADDRESS_DESC',
  UNCLAIMED_REWARDS_VARIANCE_SAMPLE_LAST_EVENT_ASC = 'UNCLAIMED_REWARDS_VARIANCE_SAMPLE_LAST_EVENT_ASC',
  UNCLAIMED_REWARDS_VARIANCE_SAMPLE_LAST_EVENT_DESC = 'UNCLAIMED_REWARDS_VARIANCE_SAMPLE_LAST_EVENT_DESC',
}

export type Deployment = Node & {
  readonly __typename: 'Deployment';
  /** Reads and enables pagination through a set of `ConsumerQueryRewardSummary`. */
  readonly consumerQueryRewardSummaries: ConsumerQueryRewardSummariesConnection;
  /** Reads and enables pagination through a set of `ConsumerQueryReward`. */
  readonly consumerQueryRewards: ConsumerQueryRewardsConnection;
  readonly createdBlock: Maybe<Scalars['Int']['output']>;
  readonly createdTimestamp: Scalars['Datetime']['output'];
  /** Reads and enables pagination through a set of `DeploymentBoosterSummary`. */
  readonly deploymentBoosterSummaries: DeploymentBoosterSummariesConnection;
  /** Reads and enables pagination through a set of `DeploymentBooster`. */
  readonly deploymentBoosters: DeploymentBoostersConnection;
  /** Reads and enables pagination through a set of `EraIndexerDeploymentApy`. */
  readonly eraIndexerDeploymentApies: EraIndexerDeploymentApiesConnection;
  readonly id: Scalars['String']['output'];
  /** Reads and enables pagination through a set of `IndexerAllocationRewardSummary`. */
  readonly indexerAllocationRewardSummaries: IndexerAllocationRewardSummariesConnection;
  /** Reads and enables pagination through a set of `IndexerAllocationReward`. */
  readonly indexerAllocationRewards: IndexerAllocationRewardsConnection;
  /** Reads and enables pagination through a set of `IndexerAllocationSummary`. */
  readonly indexerAllocationSummaries: IndexerAllocationSummariesConnection;
  /** Reads and enables pagination through a set of `IndexerAllocation`. */
  readonly indexerAllocations: IndexerAllocationsConnection;
  /** Reads and enables pagination through a set of `IndexerMissedLabor`. */
  readonly indexerMissedLabors: IndexerMissedLaborsConnection;
  /** Reads and enables pagination through a set of `IndexerDeployment`. */
  readonly indexers: IndexerDeploymentsConnection;
  /** Reads and enables pagination through a set of `Indexer`. */
  readonly indexersByEraIndexerDeploymentApyDeploymentIdAndIndexerId: DeploymentIndexersByEraIndexerDeploymentApyDeploymentIdAndIndexerIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Indexer`. */
  readonly indexersByIndexerAllocationDeploymentIdAndIndexerId: DeploymentIndexersByIndexerAllocationDeploymentIdAndIndexerIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Indexer`. */
  readonly indexersByIndexerAllocationRewardDeploymentIdAndIndexerId: DeploymentIndexersByIndexerAllocationRewardDeploymentIdAndIndexerIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Indexer`. */
  readonly indexersByIndexerAllocationRewardSummaryDeploymentIdAndIndexerId: DeploymentIndexersByIndexerAllocationRewardSummaryDeploymentIdAndIndexerIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Indexer`. */
  readonly indexersByIndexerAllocationSummaryDeploymentIdAndIndexerId: DeploymentIndexersByIndexerAllocationSummaryDeploymentIdAndIndexerIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Indexer`. */
  readonly indexersByIndexerDeploymentDeploymentIdAndIndexerId: DeploymentIndexersByIndexerDeploymentDeploymentIdAndIndexerIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Indexer`. */
  readonly indexersByIndexerMissedLaborDeploymentIdAndIndexerId: DeploymentIndexersByIndexerMissedLaborDeploymentIdAndIndexerIdManyToManyConnection;
  readonly lastEvent: Maybe<Scalars['String']['output']>;
  readonly metadata: Scalars['String']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  readonly nodeId: Scalars['ID']['output'];
  /** Reads and enables pagination through a set of `Offer`. */
  readonly offers: OffersConnection;
  /** Reads and enables pagination through a set of `PlanTemplate`. */
  readonly planTemplatesByOfferDeploymentIdAndPlanTemplateId: DeploymentPlanTemplatesByOfferDeploymentIdAndPlanTemplateIdManyToManyConnection;
  /** Reads and enables pagination through a set of `PlanTemplate`. */
  readonly planTemplatesByPlanDeploymentIdAndPlanTemplateId: DeploymentPlanTemplatesByPlanDeploymentIdAndPlanTemplateIdManyToManyConnection;
  /** Reads and enables pagination through a set of `PlanTemplate`. */
  readonly planTemplatesByServiceAgreementDeploymentIdAndPlanTemplateId: DeploymentPlanTemplatesByServiceAgreementDeploymentIdAndPlanTemplateIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Plan`. */
  readonly plans: PlansConnection;
  /** Reads a single `Project` that is related to this `Deployment`. */
  readonly project: Maybe<Project>;
  readonly projectId: Scalars['String']['output'];
  /** Reads and enables pagination through a set of `Project`. */
  readonly projectsByConsumerQueryRewardDeploymentIdAndProjectId: DeploymentProjectsByConsumerQueryRewardDeploymentIdAndProjectIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Project`. */
  readonly projectsByConsumerQueryRewardSummaryDeploymentIdAndProjectId: DeploymentProjectsByConsumerQueryRewardSummaryDeploymentIdAndProjectIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Project`. */
  readonly projectsByDeploymentBoosterDeploymentIdAndProjectId: DeploymentProjectsByDeploymentBoosterDeploymentIdAndProjectIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Project`. */
  readonly projectsByDeploymentBoosterSummaryDeploymentIdAndProjectId: DeploymentProjectsByDeploymentBoosterSummaryDeploymentIdAndProjectIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Project`. */
  readonly projectsByIndexerAllocationDeploymentIdAndProjectId: DeploymentProjectsByIndexerAllocationDeploymentIdAndProjectIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Project`. */
  readonly projectsByIndexerAllocationRewardDeploymentIdAndProjectId: DeploymentProjectsByIndexerAllocationRewardDeploymentIdAndProjectIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Project`. */
  readonly projectsByIndexerAllocationRewardSummaryDeploymentIdAndProjectId: DeploymentProjectsByIndexerAllocationRewardSummaryDeploymentIdAndProjectIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Project`. */
  readonly projectsByIndexerAllocationSummaryDeploymentIdAndProjectId: DeploymentProjectsByIndexerAllocationSummaryDeploymentIdAndProjectIdManyToManyConnection;
  /** Reads and enables pagination through a set of `ServiceAgreement`. */
  readonly serviceAgreements: ServiceAgreementsConnection;
  /** Reads and enables pagination through a set of `StateChannel`. */
  readonly stateChannels: StateChannelsConnection;
};

export type DeploymentConsumerQueryRewardSummariesArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Consumer_Query_Reward_Summaries_Distinct_Enum>>>;
  filter: InputMaybe<ConsumerQueryRewardSummaryFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<ConsumerQueryRewardSummariesOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type DeploymentConsumerQueryRewardsArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Consumer_Query_Rewards_Distinct_Enum>>>;
  filter: InputMaybe<ConsumerQueryRewardFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<ConsumerQueryRewardsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type DeploymentDeploymentBoosterSummariesArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Deployment_Booster_Summaries_Distinct_Enum>>>;
  filter: InputMaybe<DeploymentBoosterSummaryFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<DeploymentBoosterSummariesOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type DeploymentDeploymentBoostersArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Deployment_Boosters_Distinct_Enum>>>;
  filter: InputMaybe<DeploymentBoosterFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<DeploymentBoostersOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type DeploymentEraIndexerDeploymentApiesArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Era_Indexer_Deployment_Apies_Distinct_Enum>>>;
  filter: InputMaybe<EraIndexerDeploymentApyFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<EraIndexerDeploymentApiesOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type DeploymentIndexerAllocationRewardSummariesArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Allocation_Reward_Summaries_Distinct_Enum>>>;
  filter: InputMaybe<IndexerAllocationRewardSummaryFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexerAllocationRewardSummariesOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type DeploymentIndexerAllocationRewardsArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Allocation_Rewards_Distinct_Enum>>>;
  filter: InputMaybe<IndexerAllocationRewardFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexerAllocationRewardsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type DeploymentIndexerAllocationSummariesArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Allocation_Summaries_Distinct_Enum>>>;
  filter: InputMaybe<IndexerAllocationSummaryFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexerAllocationSummariesOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type DeploymentIndexerAllocationsArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Allocations_Distinct_Enum>>>;
  filter: InputMaybe<IndexerAllocationFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexerAllocationsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type DeploymentIndexerMissedLaborsArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Missed_Labors_Distinct_Enum>>>;
  filter: InputMaybe<IndexerMissedLaborFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexerMissedLaborsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type DeploymentIndexersArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Deployments_Distinct_Enum>>>;
  filter: InputMaybe<IndexerDeploymentFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexerDeploymentsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type DeploymentIndexersByEraIndexerDeploymentApyDeploymentIdAndIndexerIdArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexers_Distinct_Enum>>>;
  filter: InputMaybe<IndexerFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexersOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type DeploymentIndexersByIndexerAllocationDeploymentIdAndIndexerIdArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexers_Distinct_Enum>>>;
  filter: InputMaybe<IndexerFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexersOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type DeploymentIndexersByIndexerAllocationRewardDeploymentIdAndIndexerIdArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexers_Distinct_Enum>>>;
  filter: InputMaybe<IndexerFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexersOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type DeploymentIndexersByIndexerAllocationRewardSummaryDeploymentIdAndIndexerIdArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexers_Distinct_Enum>>>;
  filter: InputMaybe<IndexerFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexersOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type DeploymentIndexersByIndexerAllocationSummaryDeploymentIdAndIndexerIdArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexers_Distinct_Enum>>>;
  filter: InputMaybe<IndexerFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexersOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type DeploymentIndexersByIndexerDeploymentDeploymentIdAndIndexerIdArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexers_Distinct_Enum>>>;
  filter: InputMaybe<IndexerFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexersOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type DeploymentIndexersByIndexerMissedLaborDeploymentIdAndIndexerIdArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexers_Distinct_Enum>>>;
  filter: InputMaybe<IndexerFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexersOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type DeploymentOffersArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Offers_Distinct_Enum>>>;
  filter: InputMaybe<OfferFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<OffersOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type DeploymentPlanTemplatesByOfferDeploymentIdAndPlanTemplateIdArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Plan_Templates_Distinct_Enum>>>;
  filter: InputMaybe<PlanTemplateFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<PlanTemplatesOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type DeploymentPlanTemplatesByPlanDeploymentIdAndPlanTemplateIdArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Plan_Templates_Distinct_Enum>>>;
  filter: InputMaybe<PlanTemplateFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<PlanTemplatesOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type DeploymentPlanTemplatesByServiceAgreementDeploymentIdAndPlanTemplateIdArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Plan_Templates_Distinct_Enum>>>;
  filter: InputMaybe<PlanTemplateFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<PlanTemplatesOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type DeploymentPlansArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Plans_Distinct_Enum>>>;
  filter: InputMaybe<PlanFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<PlansOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type DeploymentProjectsByConsumerQueryRewardDeploymentIdAndProjectIdArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Projects_Distinct_Enum>>>;
  filter: InputMaybe<ProjectFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<ProjectsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type DeploymentProjectsByConsumerQueryRewardSummaryDeploymentIdAndProjectIdArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Projects_Distinct_Enum>>>;
  filter: InputMaybe<ProjectFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<ProjectsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type DeploymentProjectsByDeploymentBoosterDeploymentIdAndProjectIdArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Projects_Distinct_Enum>>>;
  filter: InputMaybe<ProjectFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<ProjectsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type DeploymentProjectsByDeploymentBoosterSummaryDeploymentIdAndProjectIdArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Projects_Distinct_Enum>>>;
  filter: InputMaybe<ProjectFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<ProjectsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type DeploymentProjectsByIndexerAllocationDeploymentIdAndProjectIdArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Projects_Distinct_Enum>>>;
  filter: InputMaybe<ProjectFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<ProjectsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type DeploymentProjectsByIndexerAllocationRewardDeploymentIdAndProjectIdArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Projects_Distinct_Enum>>>;
  filter: InputMaybe<ProjectFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<ProjectsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type DeploymentProjectsByIndexerAllocationRewardSummaryDeploymentIdAndProjectIdArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Projects_Distinct_Enum>>>;
  filter: InputMaybe<ProjectFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<ProjectsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type DeploymentProjectsByIndexerAllocationSummaryDeploymentIdAndProjectIdArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Projects_Distinct_Enum>>>;
  filter: InputMaybe<ProjectFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<ProjectsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type DeploymentServiceAgreementsArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Service_Agreements_Distinct_Enum>>>;
  filter: InputMaybe<ServiceAgreementFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<ServiceAgreementsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type DeploymentStateChannelsArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<State_Channels_Distinct_Enum>>>;
  filter: InputMaybe<StateChannelFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<StateChannelsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type DeploymentAggregates = {
  readonly __typename: 'DeploymentAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly average: Maybe<DeploymentAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly distinctCount: Maybe<DeploymentDistinctCountAggregates>;
  readonly keys: Maybe<ReadonlyArray<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly max: Maybe<DeploymentMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly min: Maybe<DeploymentMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevPopulation: Maybe<DeploymentStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevSample: Maybe<DeploymentStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly sum: Maybe<DeploymentSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly variancePopulation: Maybe<DeploymentVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly varianceSample: Maybe<DeploymentVarianceSampleAggregates>;
};

/** A filter to be used against aggregates of `Deployment` object types. */
export type DeploymentAggregatesFilter = {
  /** Mean average aggregate over matching `Deployment` objects. */
  readonly average: InputMaybe<DeploymentAverageAggregateFilter>;
  /** Distinct count aggregate over matching `Deployment` objects. */
  readonly distinctCount: InputMaybe<DeploymentDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `Deployment` object to be included within the aggregate. */
  readonly filter: InputMaybe<DeploymentFilter>;
  /** Maximum aggregate over matching `Deployment` objects. */
  readonly max: InputMaybe<DeploymentMaxAggregateFilter>;
  /** Minimum aggregate over matching `Deployment` objects. */
  readonly min: InputMaybe<DeploymentMinAggregateFilter>;
  /** Population standard deviation aggregate over matching `Deployment` objects. */
  readonly stddevPopulation: InputMaybe<DeploymentStddevPopulationAggregateFilter>;
  /** Sample standard deviation aggregate over matching `Deployment` objects. */
  readonly stddevSample: InputMaybe<DeploymentStddevSampleAggregateFilter>;
  /** Sum aggregate over matching `Deployment` objects. */
  readonly sum: InputMaybe<DeploymentSumAggregateFilter>;
  /** Population variance aggregate over matching `Deployment` objects. */
  readonly variancePopulation: InputMaybe<DeploymentVariancePopulationAggregateFilter>;
  /** Sample variance aggregate over matching `Deployment` objects. */
  readonly varianceSample: InputMaybe<DeploymentVarianceSampleAggregateFilter>;
};

export type DeploymentAverageAggregateFilter = {
  readonly createdBlock: InputMaybe<BigFloatFilter>;
};

export type DeploymentAverageAggregates = {
  readonly __typename: 'DeploymentAverageAggregates';
  /** Mean average of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
};

export type DeploymentBooster = Node & {
  readonly __typename: 'DeploymentBooster';
  readonly amountAdded: Scalars['BigFloat']['output'];
  readonly amountRemoved: Scalars['BigFloat']['output'];
  readonly consumer: Scalars['String']['output'];
  readonly createAt: Scalars['Datetime']['output'];
  /** Reads a single `Deployment` that is related to this `DeploymentBooster`. */
  readonly deployment: Maybe<Deployment>;
  readonly deploymentId: Scalars['String']['output'];
  readonly eraIdx: Scalars['Int']['output'];
  readonly id: Scalars['String']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  readonly nodeId: Scalars['ID']['output'];
  /** Reads a single `Project` that is related to this `DeploymentBooster`. */
  readonly project: Maybe<Project>;
  readonly projectId: Scalars['String']['output'];
};

export type DeploymentBoosterAggregates = {
  readonly __typename: 'DeploymentBoosterAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly average: Maybe<DeploymentBoosterAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly distinctCount: Maybe<DeploymentBoosterDistinctCountAggregates>;
  readonly keys: Maybe<ReadonlyArray<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly max: Maybe<DeploymentBoosterMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly min: Maybe<DeploymentBoosterMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevPopulation: Maybe<DeploymentBoosterStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevSample: Maybe<DeploymentBoosterStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly sum: Maybe<DeploymentBoosterSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly variancePopulation: Maybe<DeploymentBoosterVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly varianceSample: Maybe<DeploymentBoosterVarianceSampleAggregates>;
};

/** A filter to be used against aggregates of `DeploymentBooster` object types. */
export type DeploymentBoosterAggregatesFilter = {
  /** Mean average aggregate over matching `DeploymentBooster` objects. */
  readonly average: InputMaybe<DeploymentBoosterAverageAggregateFilter>;
  /** Distinct count aggregate over matching `DeploymentBooster` objects. */
  readonly distinctCount: InputMaybe<DeploymentBoosterDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `DeploymentBooster` object to be included within the aggregate. */
  readonly filter: InputMaybe<DeploymentBoosterFilter>;
  /** Maximum aggregate over matching `DeploymentBooster` objects. */
  readonly max: InputMaybe<DeploymentBoosterMaxAggregateFilter>;
  /** Minimum aggregate over matching `DeploymentBooster` objects. */
  readonly min: InputMaybe<DeploymentBoosterMinAggregateFilter>;
  /** Population standard deviation aggregate over matching `DeploymentBooster` objects. */
  readonly stddevPopulation: InputMaybe<DeploymentBoosterStddevPopulationAggregateFilter>;
  /** Sample standard deviation aggregate over matching `DeploymentBooster` objects. */
  readonly stddevSample: InputMaybe<DeploymentBoosterStddevSampleAggregateFilter>;
  /** Sum aggregate over matching `DeploymentBooster` objects. */
  readonly sum: InputMaybe<DeploymentBoosterSumAggregateFilter>;
  /** Population variance aggregate over matching `DeploymentBooster` objects. */
  readonly variancePopulation: InputMaybe<DeploymentBoosterVariancePopulationAggregateFilter>;
  /** Sample variance aggregate over matching `DeploymentBooster` objects. */
  readonly varianceSample: InputMaybe<DeploymentBoosterVarianceSampleAggregateFilter>;
};

export type DeploymentBoosterAverageAggregateFilter = {
  readonly amountAdded: InputMaybe<BigFloatFilter>;
  readonly amountRemoved: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigFloatFilter>;
};

export type DeploymentBoosterAverageAggregates = {
  readonly __typename: 'DeploymentBoosterAverageAggregates';
  /** Mean average of amountAdded across the matching connection */
  readonly amountAdded: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of amountRemoved across the matching connection */
  readonly amountRemoved: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
};

export type DeploymentBoosterDistinctCountAggregateFilter = {
  readonly _blockRange: InputMaybe<BigIntFilter>;
  readonly _id: InputMaybe<BigIntFilter>;
  readonly amountAdded: InputMaybe<BigIntFilter>;
  readonly amountRemoved: InputMaybe<BigIntFilter>;
  readonly consumer: InputMaybe<BigIntFilter>;
  readonly createAt: InputMaybe<BigIntFilter>;
  readonly deploymentId: InputMaybe<BigIntFilter>;
  readonly eraIdx: InputMaybe<BigIntFilter>;
  readonly id: InputMaybe<BigIntFilter>;
  readonly projectId: InputMaybe<BigIntFilter>;
};

export type DeploymentBoosterDistinctCountAggregates = {
  readonly __typename: 'DeploymentBoosterDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  readonly _blockRange: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  readonly _id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of amountAdded across the matching connection */
  readonly amountAdded: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of amountRemoved across the matching connection */
  readonly amountRemoved: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of consumer across the matching connection */
  readonly consumer: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createAt across the matching connection */
  readonly createAt: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of deploymentId across the matching connection */
  readonly deploymentId: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  readonly id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of projectId across the matching connection */
  readonly projectId: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `DeploymentBooster` object types. All fields are combined with a logical ‘and.’ */
export type DeploymentBoosterFilter = {
  /** Filter by the object’s `amountAdded` field. */
  readonly amountAdded: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `amountRemoved` field. */
  readonly amountRemoved: InputMaybe<BigFloatFilter>;
  /** Checks for all expressions in this list. */
  readonly and: InputMaybe<ReadonlyArray<DeploymentBoosterFilter>>;
  /** Filter by the object’s `consumer` field. */
  readonly consumer: InputMaybe<StringFilter>;
  /** Filter by the object’s `createAt` field. */
  readonly createAt: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `deployment` relation. */
  readonly deployment: InputMaybe<DeploymentFilter>;
  /** Filter by the object’s `deploymentId` field. */
  readonly deploymentId: InputMaybe<StringFilter>;
  /** Filter by the object’s `eraIdx` field. */
  readonly eraIdx: InputMaybe<IntFilter>;
  /** Filter by the object’s `id` field. */
  readonly id: InputMaybe<StringFilter>;
  /** Negates the expression. */
  readonly not: InputMaybe<DeploymentBoosterFilter>;
  /** Checks for any expressions in this list. */
  readonly or: InputMaybe<ReadonlyArray<DeploymentBoosterFilter>>;
  /** Filter by the object’s `project` relation. */
  readonly project: InputMaybe<ProjectFilter>;
  /** Filter by the object’s `projectId` field. */
  readonly projectId: InputMaybe<StringFilter>;
};

export type DeploymentBoosterMaxAggregateFilter = {
  readonly amountAdded: InputMaybe<BigFloatFilter>;
  readonly amountRemoved: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<IntFilter>;
};

export type DeploymentBoosterMaxAggregates = {
  readonly __typename: 'DeploymentBoosterMaxAggregates';
  /** Maximum of amountAdded across the matching connection */
  readonly amountAdded: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of amountRemoved across the matching connection */
  readonly amountRemoved: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['Int']['output']>;
};

export type DeploymentBoosterMinAggregateFilter = {
  readonly amountAdded: InputMaybe<BigFloatFilter>;
  readonly amountRemoved: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<IntFilter>;
};

export type DeploymentBoosterMinAggregates = {
  readonly __typename: 'DeploymentBoosterMinAggregates';
  /** Minimum of amountAdded across the matching connection */
  readonly amountAdded: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of amountRemoved across the matching connection */
  readonly amountRemoved: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['Int']['output']>;
};

export type DeploymentBoosterStddevPopulationAggregateFilter = {
  readonly amountAdded: InputMaybe<BigFloatFilter>;
  readonly amountRemoved: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigFloatFilter>;
};

export type DeploymentBoosterStddevPopulationAggregates = {
  readonly __typename: 'DeploymentBoosterStddevPopulationAggregates';
  /** Population standard deviation of amountAdded across the matching connection */
  readonly amountAdded: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of amountRemoved across the matching connection */
  readonly amountRemoved: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
};

export type DeploymentBoosterStddevSampleAggregateFilter = {
  readonly amountAdded: InputMaybe<BigFloatFilter>;
  readonly amountRemoved: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigFloatFilter>;
};

export type DeploymentBoosterStddevSampleAggregates = {
  readonly __typename: 'DeploymentBoosterStddevSampleAggregates';
  /** Sample standard deviation of amountAdded across the matching connection */
  readonly amountAdded: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of amountRemoved across the matching connection */
  readonly amountRemoved: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
};

export type DeploymentBoosterSumAggregateFilter = {
  readonly amountAdded: InputMaybe<BigFloatFilter>;
  readonly amountRemoved: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigIntFilter>;
};

export type DeploymentBoosterSumAggregates = {
  readonly __typename: 'DeploymentBoosterSumAggregates';
  /** Sum of amountAdded across the matching connection */
  readonly amountAdded: Scalars['BigFloat']['output'];
  /** Sum of amountRemoved across the matching connection */
  readonly amountRemoved: Scalars['BigFloat']['output'];
  /** Sum of eraIdx across the matching connection */
  readonly eraIdx: Scalars['BigInt']['output'];
};

/** A connection to a list of `DeploymentBoosterSummary` values. */
export type DeploymentBoosterSummariesConnection = {
  readonly __typename: 'DeploymentBoosterSummariesConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<DeploymentBoosterSummaryAggregates>;
  /** A list of edges which contains the `DeploymentBoosterSummary` and cursor to aid in pagination. */
  readonly edges: ReadonlyArray<DeploymentBoosterSummariesEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<DeploymentBoosterSummaryAggregates>>;
  /** A list of `DeploymentBoosterSummary` objects. */
  readonly nodes: ReadonlyArray<Maybe<DeploymentBoosterSummary>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `DeploymentBoosterSummary` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `DeploymentBoosterSummary` values. */
export type DeploymentBoosterSummariesConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<DeploymentBoosterSummariesGroupBy>;
  having: InputMaybe<DeploymentBoosterSummariesHavingInput>;
};

/** A `DeploymentBoosterSummary` edge in the connection. */
export type DeploymentBoosterSummariesEdge = {
  readonly __typename: 'DeploymentBoosterSummariesEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `DeploymentBoosterSummary` at the end of the edge. */
  readonly node: Maybe<DeploymentBoosterSummary>;
};

/** Grouping methods for `DeploymentBoosterSummary` for usage during aggregation. */
export enum DeploymentBoosterSummariesGroupBy {
  CONSUMER = 'CONSUMER',
  CREATE_AT = 'CREATE_AT',
  CREATE_AT_TRUNCATED_TO_DAY = 'CREATE_AT_TRUNCATED_TO_DAY',
  CREATE_AT_TRUNCATED_TO_HOUR = 'CREATE_AT_TRUNCATED_TO_HOUR',
  DEPLOYMENT_ID = 'DEPLOYMENT_ID',
  ID = 'ID',
  PROJECT_ID = 'PROJECT_ID',
  TOTAL_ADDED = 'TOTAL_ADDED',
  TOTAL_AMOUNT = 'TOTAL_AMOUNT',
  TOTAL_REMOVED = 'TOTAL_REMOVED',
  UPDATE_AT = 'UPDATE_AT',
  UPDATE_AT_TRUNCATED_TO_DAY = 'UPDATE_AT_TRUNCATED_TO_DAY',
  UPDATE_AT_TRUNCATED_TO_HOUR = 'UPDATE_AT_TRUNCATED_TO_HOUR',
}

export type DeploymentBoosterSummariesHavingAverageInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly totalAdded: InputMaybe<HavingBigfloatFilter>;
  readonly totalAmount: InputMaybe<HavingBigfloatFilter>;
  readonly totalRemoved: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type DeploymentBoosterSummariesHavingDistinctCountInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly totalAdded: InputMaybe<HavingBigfloatFilter>;
  readonly totalAmount: InputMaybe<HavingBigfloatFilter>;
  readonly totalRemoved: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

/** Conditions for `DeploymentBoosterSummary` aggregates. */
export type DeploymentBoosterSummariesHavingInput = {
  readonly AND: InputMaybe<ReadonlyArray<DeploymentBoosterSummariesHavingInput>>;
  readonly OR: InputMaybe<ReadonlyArray<DeploymentBoosterSummariesHavingInput>>;
  readonly average: InputMaybe<DeploymentBoosterSummariesHavingAverageInput>;
  readonly distinctCount: InputMaybe<DeploymentBoosterSummariesHavingDistinctCountInput>;
  readonly max: InputMaybe<DeploymentBoosterSummariesHavingMaxInput>;
  readonly min: InputMaybe<DeploymentBoosterSummariesHavingMinInput>;
  readonly stddevPopulation: InputMaybe<DeploymentBoosterSummariesHavingStddevPopulationInput>;
  readonly stddevSample: InputMaybe<DeploymentBoosterSummariesHavingStddevSampleInput>;
  readonly sum: InputMaybe<DeploymentBoosterSummariesHavingSumInput>;
  readonly variancePopulation: InputMaybe<DeploymentBoosterSummariesHavingVariancePopulationInput>;
  readonly varianceSample: InputMaybe<DeploymentBoosterSummariesHavingVarianceSampleInput>;
};

export type DeploymentBoosterSummariesHavingMaxInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly totalAdded: InputMaybe<HavingBigfloatFilter>;
  readonly totalAmount: InputMaybe<HavingBigfloatFilter>;
  readonly totalRemoved: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type DeploymentBoosterSummariesHavingMinInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly totalAdded: InputMaybe<HavingBigfloatFilter>;
  readonly totalAmount: InputMaybe<HavingBigfloatFilter>;
  readonly totalRemoved: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type DeploymentBoosterSummariesHavingStddevPopulationInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly totalAdded: InputMaybe<HavingBigfloatFilter>;
  readonly totalAmount: InputMaybe<HavingBigfloatFilter>;
  readonly totalRemoved: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type DeploymentBoosterSummariesHavingStddevSampleInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly totalAdded: InputMaybe<HavingBigfloatFilter>;
  readonly totalAmount: InputMaybe<HavingBigfloatFilter>;
  readonly totalRemoved: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type DeploymentBoosterSummariesHavingSumInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly totalAdded: InputMaybe<HavingBigfloatFilter>;
  readonly totalAmount: InputMaybe<HavingBigfloatFilter>;
  readonly totalRemoved: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type DeploymentBoosterSummariesHavingVariancePopulationInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly totalAdded: InputMaybe<HavingBigfloatFilter>;
  readonly totalAmount: InputMaybe<HavingBigfloatFilter>;
  readonly totalRemoved: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type DeploymentBoosterSummariesHavingVarianceSampleInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly totalAdded: InputMaybe<HavingBigfloatFilter>;
  readonly totalAmount: InputMaybe<HavingBigfloatFilter>;
  readonly totalRemoved: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

/** Methods to use when ordering `DeploymentBoosterSummary`. */
export enum DeploymentBoosterSummariesOrderBy {
  CONSUMER_ASC = 'CONSUMER_ASC',
  CONSUMER_DESC = 'CONSUMER_DESC',
  CREATE_AT_ASC = 'CREATE_AT_ASC',
  CREATE_AT_DESC = 'CREATE_AT_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__ID_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__ID_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__ID_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__ID_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_DESC',
  DEPLOYMENT_ID_ASC = 'DEPLOYMENT_ID_ASC',
  DEPLOYMENT_ID_DESC = 'DEPLOYMENT_ID_DESC',
  ID_ASC = 'ID_ASC',
  ID_DESC = 'ID_DESC',
  NATURAL = 'NATURAL',
  PRIMARY_KEY_ASC = 'PRIMARY_KEY_ASC',
  PRIMARY_KEY_DESC = 'PRIMARY_KEY_DESC',
  PROJECT_BY_PROJECT_ID__BOOST_ALLOCATION_RATIO_ASC = 'PROJECT_BY_PROJECT_ID__BOOST_ALLOCATION_RATIO_ASC',
  PROJECT_BY_PROJECT_ID__BOOST_ALLOCATION_RATIO_DESC = 'PROJECT_BY_PROJECT_ID__BOOST_ALLOCATION_RATIO_DESC',
  PROJECT_BY_PROJECT_ID__CREATED_BLOCK_ASC = 'PROJECT_BY_PROJECT_ID__CREATED_BLOCK_ASC',
  PROJECT_BY_PROJECT_ID__CREATED_BLOCK_DESC = 'PROJECT_BY_PROJECT_ID__CREATED_BLOCK_DESC',
  PROJECT_BY_PROJECT_ID__CREATED_TIMESTAMP_ASC = 'PROJECT_BY_PROJECT_ID__CREATED_TIMESTAMP_ASC',
  PROJECT_BY_PROJECT_ID__CREATED_TIMESTAMP_DESC = 'PROJECT_BY_PROJECT_ID__CREATED_TIMESTAMP_DESC',
  PROJECT_BY_PROJECT_ID__DEPLOYMENT_ID_ASC = 'PROJECT_BY_PROJECT_ID__DEPLOYMENT_ID_ASC',
  PROJECT_BY_PROJECT_ID__DEPLOYMENT_ID_DESC = 'PROJECT_BY_PROJECT_ID__DEPLOYMENT_ID_DESC',
  PROJECT_BY_PROJECT_ID__DEPLOYMENT_METADATA_ASC = 'PROJECT_BY_PROJECT_ID__DEPLOYMENT_METADATA_ASC',
  PROJECT_BY_PROJECT_ID__DEPLOYMENT_METADATA_DESC = 'PROJECT_BY_PROJECT_ID__DEPLOYMENT_METADATA_DESC',
  PROJECT_BY_PROJECT_ID__ID_ASC = 'PROJECT_BY_PROJECT_ID__ID_ASC',
  PROJECT_BY_PROJECT_ID__ID_DESC = 'PROJECT_BY_PROJECT_ID__ID_DESC',
  PROJECT_BY_PROJECT_ID__LAST_EVENT_ASC = 'PROJECT_BY_PROJECT_ID__LAST_EVENT_ASC',
  PROJECT_BY_PROJECT_ID__LAST_EVENT_DESC = 'PROJECT_BY_PROJECT_ID__LAST_EVENT_DESC',
  PROJECT_BY_PROJECT_ID__METADATA_ASC = 'PROJECT_BY_PROJECT_ID__METADATA_ASC',
  PROJECT_BY_PROJECT_ID__METADATA_DESC = 'PROJECT_BY_PROJECT_ID__METADATA_DESC',
  PROJECT_BY_PROJECT_ID__OWNER_ASC = 'PROJECT_BY_PROJECT_ID__OWNER_ASC',
  PROJECT_BY_PROJECT_ID__OWNER_DESC = 'PROJECT_BY_PROJECT_ID__OWNER_DESC',
  PROJECT_BY_PROJECT_ID__TOTAL_ALLOCATION_ASC = 'PROJECT_BY_PROJECT_ID__TOTAL_ALLOCATION_ASC',
  PROJECT_BY_PROJECT_ID__TOTAL_ALLOCATION_DESC = 'PROJECT_BY_PROJECT_ID__TOTAL_ALLOCATION_DESC',
  PROJECT_BY_PROJECT_ID__TOTAL_BOOST_ASC = 'PROJECT_BY_PROJECT_ID__TOTAL_BOOST_ASC',
  PROJECT_BY_PROJECT_ID__TOTAL_BOOST_DESC = 'PROJECT_BY_PROJECT_ID__TOTAL_BOOST_DESC',
  PROJECT_BY_PROJECT_ID__TOTAL_REWARD_ASC = 'PROJECT_BY_PROJECT_ID__TOTAL_REWARD_ASC',
  PROJECT_BY_PROJECT_ID__TOTAL_REWARD_DESC = 'PROJECT_BY_PROJECT_ID__TOTAL_REWARD_DESC',
  PROJECT_BY_PROJECT_ID__TYPE_ASC = 'PROJECT_BY_PROJECT_ID__TYPE_ASC',
  PROJECT_BY_PROJECT_ID__TYPE_DESC = 'PROJECT_BY_PROJECT_ID__TYPE_DESC',
  PROJECT_BY_PROJECT_ID__UPDATED_TIMESTAMP_ASC = 'PROJECT_BY_PROJECT_ID__UPDATED_TIMESTAMP_ASC',
  PROJECT_BY_PROJECT_ID__UPDATED_TIMESTAMP_DESC = 'PROJECT_BY_PROJECT_ID__UPDATED_TIMESTAMP_DESC',
  PROJECT_ID_ASC = 'PROJECT_ID_ASC',
  PROJECT_ID_DESC = 'PROJECT_ID_DESC',
  TOTAL_ADDED_ASC = 'TOTAL_ADDED_ASC',
  TOTAL_ADDED_DESC = 'TOTAL_ADDED_DESC',
  TOTAL_AMOUNT_ASC = 'TOTAL_AMOUNT_ASC',
  TOTAL_AMOUNT_DESC = 'TOTAL_AMOUNT_DESC',
  TOTAL_REMOVED_ASC = 'TOTAL_REMOVED_ASC',
  TOTAL_REMOVED_DESC = 'TOTAL_REMOVED_DESC',
  UPDATE_AT_ASC = 'UPDATE_AT_ASC',
  UPDATE_AT_DESC = 'UPDATE_AT_DESC',
}

export type DeploymentBoosterSummary = Node & {
  readonly __typename: 'DeploymentBoosterSummary';
  readonly consumer: Scalars['String']['output'];
  readonly createAt: Scalars['Datetime']['output'];
  /** Reads a single `Deployment` that is related to this `DeploymentBoosterSummary`. */
  readonly deployment: Maybe<Deployment>;
  readonly deploymentId: Scalars['String']['output'];
  readonly id: Scalars['String']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  readonly nodeId: Scalars['ID']['output'];
  /** Reads a single `Project` that is related to this `DeploymentBoosterSummary`. */
  readonly project: Maybe<Project>;
  readonly projectId: Scalars['String']['output'];
  readonly totalAdded: Scalars['BigFloat']['output'];
  readonly totalAmount: Scalars['BigFloat']['output'];
  readonly totalRemoved: Scalars['BigFloat']['output'];
  readonly updateAt: Scalars['Datetime']['output'];
};

export type DeploymentBoosterSummaryAggregates = {
  readonly __typename: 'DeploymentBoosterSummaryAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly average: Maybe<DeploymentBoosterSummaryAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly distinctCount: Maybe<DeploymentBoosterSummaryDistinctCountAggregates>;
  readonly keys: Maybe<ReadonlyArray<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly max: Maybe<DeploymentBoosterSummaryMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly min: Maybe<DeploymentBoosterSummaryMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevPopulation: Maybe<DeploymentBoosterSummaryStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevSample: Maybe<DeploymentBoosterSummaryStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly sum: Maybe<DeploymentBoosterSummarySumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly variancePopulation: Maybe<DeploymentBoosterSummaryVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly varianceSample: Maybe<DeploymentBoosterSummaryVarianceSampleAggregates>;
};

/** A filter to be used against aggregates of `DeploymentBoosterSummary` object types. */
export type DeploymentBoosterSummaryAggregatesFilter = {
  /** Mean average aggregate over matching `DeploymentBoosterSummary` objects. */
  readonly average: InputMaybe<DeploymentBoosterSummaryAverageAggregateFilter>;
  /** Distinct count aggregate over matching `DeploymentBoosterSummary` objects. */
  readonly distinctCount: InputMaybe<DeploymentBoosterSummaryDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `DeploymentBoosterSummary` object to be included within the aggregate. */
  readonly filter: InputMaybe<DeploymentBoosterSummaryFilter>;
  /** Maximum aggregate over matching `DeploymentBoosterSummary` objects. */
  readonly max: InputMaybe<DeploymentBoosterSummaryMaxAggregateFilter>;
  /** Minimum aggregate over matching `DeploymentBoosterSummary` objects. */
  readonly min: InputMaybe<DeploymentBoosterSummaryMinAggregateFilter>;
  /** Population standard deviation aggregate over matching `DeploymentBoosterSummary` objects. */
  readonly stddevPopulation: InputMaybe<DeploymentBoosterSummaryStddevPopulationAggregateFilter>;
  /** Sample standard deviation aggregate over matching `DeploymentBoosterSummary` objects. */
  readonly stddevSample: InputMaybe<DeploymentBoosterSummaryStddevSampleAggregateFilter>;
  /** Sum aggregate over matching `DeploymentBoosterSummary` objects. */
  readonly sum: InputMaybe<DeploymentBoosterSummarySumAggregateFilter>;
  /** Population variance aggregate over matching `DeploymentBoosterSummary` objects. */
  readonly variancePopulation: InputMaybe<DeploymentBoosterSummaryVariancePopulationAggregateFilter>;
  /** Sample variance aggregate over matching `DeploymentBoosterSummary` objects. */
  readonly varianceSample: InputMaybe<DeploymentBoosterSummaryVarianceSampleAggregateFilter>;
};

export type DeploymentBoosterSummaryAverageAggregateFilter = {
  readonly totalAdded: InputMaybe<BigFloatFilter>;
  readonly totalAmount: InputMaybe<BigFloatFilter>;
  readonly totalRemoved: InputMaybe<BigFloatFilter>;
};

export type DeploymentBoosterSummaryAverageAggregates = {
  readonly __typename: 'DeploymentBoosterSummaryAverageAggregates';
  /** Mean average of totalAdded across the matching connection */
  readonly totalAdded: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of totalAmount across the matching connection */
  readonly totalAmount: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of totalRemoved across the matching connection */
  readonly totalRemoved: Maybe<Scalars['BigFloat']['output']>;
};

export type DeploymentBoosterSummaryDistinctCountAggregateFilter = {
  readonly _blockRange: InputMaybe<BigIntFilter>;
  readonly _id: InputMaybe<BigIntFilter>;
  readonly consumer: InputMaybe<BigIntFilter>;
  readonly createAt: InputMaybe<BigIntFilter>;
  readonly deploymentId: InputMaybe<BigIntFilter>;
  readonly id: InputMaybe<BigIntFilter>;
  readonly projectId: InputMaybe<BigIntFilter>;
  readonly totalAdded: InputMaybe<BigIntFilter>;
  readonly totalAmount: InputMaybe<BigIntFilter>;
  readonly totalRemoved: InputMaybe<BigIntFilter>;
  readonly updateAt: InputMaybe<BigIntFilter>;
};

export type DeploymentBoosterSummaryDistinctCountAggregates = {
  readonly __typename: 'DeploymentBoosterSummaryDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  readonly _blockRange: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  readonly _id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of consumer across the matching connection */
  readonly consumer: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createAt across the matching connection */
  readonly createAt: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of deploymentId across the matching connection */
  readonly deploymentId: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  readonly id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of projectId across the matching connection */
  readonly projectId: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of totalAdded across the matching connection */
  readonly totalAdded: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of totalAmount across the matching connection */
  readonly totalAmount: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of totalRemoved across the matching connection */
  readonly totalRemoved: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of updateAt across the matching connection */
  readonly updateAt: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `DeploymentBoosterSummary` object types. All fields are combined with a logical ‘and.’ */
export type DeploymentBoosterSummaryFilter = {
  /** Checks for all expressions in this list. */
  readonly and: InputMaybe<ReadonlyArray<DeploymentBoosterSummaryFilter>>;
  /** Filter by the object’s `consumer` field. */
  readonly consumer: InputMaybe<StringFilter>;
  /** Filter by the object’s `createAt` field. */
  readonly createAt: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `deployment` relation. */
  readonly deployment: InputMaybe<DeploymentFilter>;
  /** Filter by the object’s `deploymentId` field. */
  readonly deploymentId: InputMaybe<StringFilter>;
  /** Filter by the object’s `id` field. */
  readonly id: InputMaybe<StringFilter>;
  /** Negates the expression. */
  readonly not: InputMaybe<DeploymentBoosterSummaryFilter>;
  /** Checks for any expressions in this list. */
  readonly or: InputMaybe<ReadonlyArray<DeploymentBoosterSummaryFilter>>;
  /** Filter by the object’s `project` relation. */
  readonly project: InputMaybe<ProjectFilter>;
  /** Filter by the object’s `projectId` field. */
  readonly projectId: InputMaybe<StringFilter>;
  /** Filter by the object’s `totalAdded` field. */
  readonly totalAdded: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `totalAmount` field. */
  readonly totalAmount: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `totalRemoved` field. */
  readonly totalRemoved: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `updateAt` field. */
  readonly updateAt: InputMaybe<DatetimeFilter>;
};

export type DeploymentBoosterSummaryMaxAggregateFilter = {
  readonly totalAdded: InputMaybe<BigFloatFilter>;
  readonly totalAmount: InputMaybe<BigFloatFilter>;
  readonly totalRemoved: InputMaybe<BigFloatFilter>;
};

export type DeploymentBoosterSummaryMaxAggregates = {
  readonly __typename: 'DeploymentBoosterSummaryMaxAggregates';
  /** Maximum of totalAdded across the matching connection */
  readonly totalAdded: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of totalAmount across the matching connection */
  readonly totalAmount: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of totalRemoved across the matching connection */
  readonly totalRemoved: Maybe<Scalars['BigFloat']['output']>;
};

export type DeploymentBoosterSummaryMinAggregateFilter = {
  readonly totalAdded: InputMaybe<BigFloatFilter>;
  readonly totalAmount: InputMaybe<BigFloatFilter>;
  readonly totalRemoved: InputMaybe<BigFloatFilter>;
};

export type DeploymentBoosterSummaryMinAggregates = {
  readonly __typename: 'DeploymentBoosterSummaryMinAggregates';
  /** Minimum of totalAdded across the matching connection */
  readonly totalAdded: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of totalAmount across the matching connection */
  readonly totalAmount: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of totalRemoved across the matching connection */
  readonly totalRemoved: Maybe<Scalars['BigFloat']['output']>;
};

export type DeploymentBoosterSummaryStddevPopulationAggregateFilter = {
  readonly totalAdded: InputMaybe<BigFloatFilter>;
  readonly totalAmount: InputMaybe<BigFloatFilter>;
  readonly totalRemoved: InputMaybe<BigFloatFilter>;
};

export type DeploymentBoosterSummaryStddevPopulationAggregates = {
  readonly __typename: 'DeploymentBoosterSummaryStddevPopulationAggregates';
  /** Population standard deviation of totalAdded across the matching connection */
  readonly totalAdded: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of totalAmount across the matching connection */
  readonly totalAmount: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of totalRemoved across the matching connection */
  readonly totalRemoved: Maybe<Scalars['BigFloat']['output']>;
};

export type DeploymentBoosterSummaryStddevSampleAggregateFilter = {
  readonly totalAdded: InputMaybe<BigFloatFilter>;
  readonly totalAmount: InputMaybe<BigFloatFilter>;
  readonly totalRemoved: InputMaybe<BigFloatFilter>;
};

export type DeploymentBoosterSummaryStddevSampleAggregates = {
  readonly __typename: 'DeploymentBoosterSummaryStddevSampleAggregates';
  /** Sample standard deviation of totalAdded across the matching connection */
  readonly totalAdded: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of totalAmount across the matching connection */
  readonly totalAmount: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of totalRemoved across the matching connection */
  readonly totalRemoved: Maybe<Scalars['BigFloat']['output']>;
};

export type DeploymentBoosterSummarySumAggregateFilter = {
  readonly totalAdded: InputMaybe<BigFloatFilter>;
  readonly totalAmount: InputMaybe<BigFloatFilter>;
  readonly totalRemoved: InputMaybe<BigFloatFilter>;
};

export type DeploymentBoosterSummarySumAggregates = {
  readonly __typename: 'DeploymentBoosterSummarySumAggregates';
  /** Sum of totalAdded across the matching connection */
  readonly totalAdded: Scalars['BigFloat']['output'];
  /** Sum of totalAmount across the matching connection */
  readonly totalAmount: Scalars['BigFloat']['output'];
  /** Sum of totalRemoved across the matching connection */
  readonly totalRemoved: Scalars['BigFloat']['output'];
};

export type DeploymentBoosterSummaryVariancePopulationAggregateFilter = {
  readonly totalAdded: InputMaybe<BigFloatFilter>;
  readonly totalAmount: InputMaybe<BigFloatFilter>;
  readonly totalRemoved: InputMaybe<BigFloatFilter>;
};

export type DeploymentBoosterSummaryVariancePopulationAggregates = {
  readonly __typename: 'DeploymentBoosterSummaryVariancePopulationAggregates';
  /** Population variance of totalAdded across the matching connection */
  readonly totalAdded: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of totalAmount across the matching connection */
  readonly totalAmount: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of totalRemoved across the matching connection */
  readonly totalRemoved: Maybe<Scalars['BigFloat']['output']>;
};

export type DeploymentBoosterSummaryVarianceSampleAggregateFilter = {
  readonly totalAdded: InputMaybe<BigFloatFilter>;
  readonly totalAmount: InputMaybe<BigFloatFilter>;
  readonly totalRemoved: InputMaybe<BigFloatFilter>;
};

export type DeploymentBoosterSummaryVarianceSampleAggregates = {
  readonly __typename: 'DeploymentBoosterSummaryVarianceSampleAggregates';
  /** Sample variance of totalAdded across the matching connection */
  readonly totalAdded: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of totalAmount across the matching connection */
  readonly totalAmount: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of totalRemoved across the matching connection */
  readonly totalRemoved: Maybe<Scalars['BigFloat']['output']>;
};

export type DeploymentBoosterVariancePopulationAggregateFilter = {
  readonly amountAdded: InputMaybe<BigFloatFilter>;
  readonly amountRemoved: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigFloatFilter>;
};

export type DeploymentBoosterVariancePopulationAggregates = {
  readonly __typename: 'DeploymentBoosterVariancePopulationAggregates';
  /** Population variance of amountAdded across the matching connection */
  readonly amountAdded: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of amountRemoved across the matching connection */
  readonly amountRemoved: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
};

export type DeploymentBoosterVarianceSampleAggregateFilter = {
  readonly amountAdded: InputMaybe<BigFloatFilter>;
  readonly amountRemoved: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigFloatFilter>;
};

export type DeploymentBoosterVarianceSampleAggregates = {
  readonly __typename: 'DeploymentBoosterVarianceSampleAggregates';
  /** Sample variance of amountAdded across the matching connection */
  readonly amountAdded: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of amountRemoved across the matching connection */
  readonly amountRemoved: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `DeploymentBooster` values. */
export type DeploymentBoostersConnection = {
  readonly __typename: 'DeploymentBoostersConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<DeploymentBoosterAggregates>;
  /** A list of edges which contains the `DeploymentBooster` and cursor to aid in pagination. */
  readonly edges: ReadonlyArray<DeploymentBoostersEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<DeploymentBoosterAggregates>>;
  /** A list of `DeploymentBooster` objects. */
  readonly nodes: ReadonlyArray<Maybe<DeploymentBooster>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `DeploymentBooster` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `DeploymentBooster` values. */
export type DeploymentBoostersConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<DeploymentBoostersGroupBy>;
  having: InputMaybe<DeploymentBoostersHavingInput>;
};

/** A `DeploymentBooster` edge in the connection. */
export type DeploymentBoostersEdge = {
  readonly __typename: 'DeploymentBoostersEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `DeploymentBooster` at the end of the edge. */
  readonly node: Maybe<DeploymentBooster>;
};

/** Grouping methods for `DeploymentBooster` for usage during aggregation. */
export enum DeploymentBoostersGroupBy {
  AMOUNT_ADDED = 'AMOUNT_ADDED',
  AMOUNT_REMOVED = 'AMOUNT_REMOVED',
  CONSUMER = 'CONSUMER',
  CREATE_AT = 'CREATE_AT',
  CREATE_AT_TRUNCATED_TO_DAY = 'CREATE_AT_TRUNCATED_TO_DAY',
  CREATE_AT_TRUNCATED_TO_HOUR = 'CREATE_AT_TRUNCATED_TO_HOUR',
  DEPLOYMENT_ID = 'DEPLOYMENT_ID',
  ERA_IDX = 'ERA_IDX',
  ID = 'ID',
  PROJECT_ID = 'PROJECT_ID',
}

export type DeploymentBoostersHavingAverageInput = {
  readonly amountAdded: InputMaybe<HavingBigfloatFilter>;
  readonly amountRemoved: InputMaybe<HavingBigfloatFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
};

export type DeploymentBoostersHavingDistinctCountInput = {
  readonly amountAdded: InputMaybe<HavingBigfloatFilter>;
  readonly amountRemoved: InputMaybe<HavingBigfloatFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
};

/** Conditions for `DeploymentBooster` aggregates. */
export type DeploymentBoostersHavingInput = {
  readonly AND: InputMaybe<ReadonlyArray<DeploymentBoostersHavingInput>>;
  readonly OR: InputMaybe<ReadonlyArray<DeploymentBoostersHavingInput>>;
  readonly average: InputMaybe<DeploymentBoostersHavingAverageInput>;
  readonly distinctCount: InputMaybe<DeploymentBoostersHavingDistinctCountInput>;
  readonly max: InputMaybe<DeploymentBoostersHavingMaxInput>;
  readonly min: InputMaybe<DeploymentBoostersHavingMinInput>;
  readonly stddevPopulation: InputMaybe<DeploymentBoostersHavingStddevPopulationInput>;
  readonly stddevSample: InputMaybe<DeploymentBoostersHavingStddevSampleInput>;
  readonly sum: InputMaybe<DeploymentBoostersHavingSumInput>;
  readonly variancePopulation: InputMaybe<DeploymentBoostersHavingVariancePopulationInput>;
  readonly varianceSample: InputMaybe<DeploymentBoostersHavingVarianceSampleInput>;
};

export type DeploymentBoostersHavingMaxInput = {
  readonly amountAdded: InputMaybe<HavingBigfloatFilter>;
  readonly amountRemoved: InputMaybe<HavingBigfloatFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
};

export type DeploymentBoostersHavingMinInput = {
  readonly amountAdded: InputMaybe<HavingBigfloatFilter>;
  readonly amountRemoved: InputMaybe<HavingBigfloatFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
};

export type DeploymentBoostersHavingStddevPopulationInput = {
  readonly amountAdded: InputMaybe<HavingBigfloatFilter>;
  readonly amountRemoved: InputMaybe<HavingBigfloatFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
};

export type DeploymentBoostersHavingStddevSampleInput = {
  readonly amountAdded: InputMaybe<HavingBigfloatFilter>;
  readonly amountRemoved: InputMaybe<HavingBigfloatFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
};

export type DeploymentBoostersHavingSumInput = {
  readonly amountAdded: InputMaybe<HavingBigfloatFilter>;
  readonly amountRemoved: InputMaybe<HavingBigfloatFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
};

export type DeploymentBoostersHavingVariancePopulationInput = {
  readonly amountAdded: InputMaybe<HavingBigfloatFilter>;
  readonly amountRemoved: InputMaybe<HavingBigfloatFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
};

export type DeploymentBoostersHavingVarianceSampleInput = {
  readonly amountAdded: InputMaybe<HavingBigfloatFilter>;
  readonly amountRemoved: InputMaybe<HavingBigfloatFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
};

/** Methods to use when ordering `DeploymentBooster`. */
export enum DeploymentBoostersOrderBy {
  AMOUNT_ADDED_ASC = 'AMOUNT_ADDED_ASC',
  AMOUNT_ADDED_DESC = 'AMOUNT_ADDED_DESC',
  AMOUNT_REMOVED_ASC = 'AMOUNT_REMOVED_ASC',
  AMOUNT_REMOVED_DESC = 'AMOUNT_REMOVED_DESC',
  CONSUMER_ASC = 'CONSUMER_ASC',
  CONSUMER_DESC = 'CONSUMER_DESC',
  CREATE_AT_ASC = 'CREATE_AT_ASC',
  CREATE_AT_DESC = 'CREATE_AT_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__ID_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__ID_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__ID_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__ID_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_DESC',
  DEPLOYMENT_ID_ASC = 'DEPLOYMENT_ID_ASC',
  DEPLOYMENT_ID_DESC = 'DEPLOYMENT_ID_DESC',
  ERA_IDX_ASC = 'ERA_IDX_ASC',
  ERA_IDX_DESC = 'ERA_IDX_DESC',
  ID_ASC = 'ID_ASC',
  ID_DESC = 'ID_DESC',
  NATURAL = 'NATURAL',
  PRIMARY_KEY_ASC = 'PRIMARY_KEY_ASC',
  PRIMARY_KEY_DESC = 'PRIMARY_KEY_DESC',
  PROJECT_BY_PROJECT_ID__BOOST_ALLOCATION_RATIO_ASC = 'PROJECT_BY_PROJECT_ID__BOOST_ALLOCATION_RATIO_ASC',
  PROJECT_BY_PROJECT_ID__BOOST_ALLOCATION_RATIO_DESC = 'PROJECT_BY_PROJECT_ID__BOOST_ALLOCATION_RATIO_DESC',
  PROJECT_BY_PROJECT_ID__CREATED_BLOCK_ASC = 'PROJECT_BY_PROJECT_ID__CREATED_BLOCK_ASC',
  PROJECT_BY_PROJECT_ID__CREATED_BLOCK_DESC = 'PROJECT_BY_PROJECT_ID__CREATED_BLOCK_DESC',
  PROJECT_BY_PROJECT_ID__CREATED_TIMESTAMP_ASC = 'PROJECT_BY_PROJECT_ID__CREATED_TIMESTAMP_ASC',
  PROJECT_BY_PROJECT_ID__CREATED_TIMESTAMP_DESC = 'PROJECT_BY_PROJECT_ID__CREATED_TIMESTAMP_DESC',
  PROJECT_BY_PROJECT_ID__DEPLOYMENT_ID_ASC = 'PROJECT_BY_PROJECT_ID__DEPLOYMENT_ID_ASC',
  PROJECT_BY_PROJECT_ID__DEPLOYMENT_ID_DESC = 'PROJECT_BY_PROJECT_ID__DEPLOYMENT_ID_DESC',
  PROJECT_BY_PROJECT_ID__DEPLOYMENT_METADATA_ASC = 'PROJECT_BY_PROJECT_ID__DEPLOYMENT_METADATA_ASC',
  PROJECT_BY_PROJECT_ID__DEPLOYMENT_METADATA_DESC = 'PROJECT_BY_PROJECT_ID__DEPLOYMENT_METADATA_DESC',
  PROJECT_BY_PROJECT_ID__ID_ASC = 'PROJECT_BY_PROJECT_ID__ID_ASC',
  PROJECT_BY_PROJECT_ID__ID_DESC = 'PROJECT_BY_PROJECT_ID__ID_DESC',
  PROJECT_BY_PROJECT_ID__LAST_EVENT_ASC = 'PROJECT_BY_PROJECT_ID__LAST_EVENT_ASC',
  PROJECT_BY_PROJECT_ID__LAST_EVENT_DESC = 'PROJECT_BY_PROJECT_ID__LAST_EVENT_DESC',
  PROJECT_BY_PROJECT_ID__METADATA_ASC = 'PROJECT_BY_PROJECT_ID__METADATA_ASC',
  PROJECT_BY_PROJECT_ID__METADATA_DESC = 'PROJECT_BY_PROJECT_ID__METADATA_DESC',
  PROJECT_BY_PROJECT_ID__OWNER_ASC = 'PROJECT_BY_PROJECT_ID__OWNER_ASC',
  PROJECT_BY_PROJECT_ID__OWNER_DESC = 'PROJECT_BY_PROJECT_ID__OWNER_DESC',
  PROJECT_BY_PROJECT_ID__TOTAL_ALLOCATION_ASC = 'PROJECT_BY_PROJECT_ID__TOTAL_ALLOCATION_ASC',
  PROJECT_BY_PROJECT_ID__TOTAL_ALLOCATION_DESC = 'PROJECT_BY_PROJECT_ID__TOTAL_ALLOCATION_DESC',
  PROJECT_BY_PROJECT_ID__TOTAL_BOOST_ASC = 'PROJECT_BY_PROJECT_ID__TOTAL_BOOST_ASC',
  PROJECT_BY_PROJECT_ID__TOTAL_BOOST_DESC = 'PROJECT_BY_PROJECT_ID__TOTAL_BOOST_DESC',
  PROJECT_BY_PROJECT_ID__TOTAL_REWARD_ASC = 'PROJECT_BY_PROJECT_ID__TOTAL_REWARD_ASC',
  PROJECT_BY_PROJECT_ID__TOTAL_REWARD_DESC = 'PROJECT_BY_PROJECT_ID__TOTAL_REWARD_DESC',
  PROJECT_BY_PROJECT_ID__TYPE_ASC = 'PROJECT_BY_PROJECT_ID__TYPE_ASC',
  PROJECT_BY_PROJECT_ID__TYPE_DESC = 'PROJECT_BY_PROJECT_ID__TYPE_DESC',
  PROJECT_BY_PROJECT_ID__UPDATED_TIMESTAMP_ASC = 'PROJECT_BY_PROJECT_ID__UPDATED_TIMESTAMP_ASC',
  PROJECT_BY_PROJECT_ID__UPDATED_TIMESTAMP_DESC = 'PROJECT_BY_PROJECT_ID__UPDATED_TIMESTAMP_DESC',
  PROJECT_ID_ASC = 'PROJECT_ID_ASC',
  PROJECT_ID_DESC = 'PROJECT_ID_DESC',
}

export type DeploymentDistinctCountAggregateFilter = {
  readonly _blockRange: InputMaybe<BigIntFilter>;
  readonly _id: InputMaybe<BigIntFilter>;
  readonly createdBlock: InputMaybe<BigIntFilter>;
  readonly createdTimestamp: InputMaybe<BigIntFilter>;
  readonly id: InputMaybe<BigIntFilter>;
  readonly lastEvent: InputMaybe<BigIntFilter>;
  readonly metadata: InputMaybe<BigIntFilter>;
  readonly projectId: InputMaybe<BigIntFilter>;
};

export type DeploymentDistinctCountAggregates = {
  readonly __typename: 'DeploymentDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  readonly _blockRange: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  readonly _id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createdTimestamp across the matching connection */
  readonly createdTimestamp: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  readonly id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of lastEvent across the matching connection */
  readonly lastEvent: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of metadata across the matching connection */
  readonly metadata: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of projectId across the matching connection */
  readonly projectId: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `Deployment` object types. All fields are combined with a logical ‘and.’ */
export type DeploymentFilter = {
  /** Checks for all expressions in this list. */
  readonly and: InputMaybe<ReadonlyArray<DeploymentFilter>>;
  /** Filter by the object’s `consumerQueryRewardSummaries` relation. */
  readonly consumerQueryRewardSummaries: InputMaybe<DeploymentToManyConsumerQueryRewardSummaryFilter>;
  /** Some related `consumerQueryRewardSummaries` exist. */
  readonly consumerQueryRewardSummariesExist: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `consumerQueryRewards` relation. */
  readonly consumerQueryRewards: InputMaybe<DeploymentToManyConsumerQueryRewardFilter>;
  /** Some related `consumerQueryRewards` exist. */
  readonly consumerQueryRewardsExist: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `createdBlock` field. */
  readonly createdBlock: InputMaybe<IntFilter>;
  /** Filter by the object’s `createdTimestamp` field. */
  readonly createdTimestamp: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `deploymentBoosterSummaries` relation. */
  readonly deploymentBoosterSummaries: InputMaybe<DeploymentToManyDeploymentBoosterSummaryFilter>;
  /** Some related `deploymentBoosterSummaries` exist. */
  readonly deploymentBoosterSummariesExist: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `deploymentBoosters` relation. */
  readonly deploymentBoosters: InputMaybe<DeploymentToManyDeploymentBoosterFilter>;
  /** Some related `deploymentBoosters` exist. */
  readonly deploymentBoostersExist: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `eraIndexerDeploymentApies` relation. */
  readonly eraIndexerDeploymentApies: InputMaybe<DeploymentToManyEraIndexerDeploymentApyFilter>;
  /** Some related `eraIndexerDeploymentApies` exist. */
  readonly eraIndexerDeploymentApiesExist: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `id` field. */
  readonly id: InputMaybe<StringFilter>;
  /** Filter by the object’s `indexerAllocationRewardSummaries` relation. */
  readonly indexerAllocationRewardSummaries: InputMaybe<DeploymentToManyIndexerAllocationRewardSummaryFilter>;
  /** Some related `indexerAllocationRewardSummaries` exist. */
  readonly indexerAllocationRewardSummariesExist: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `indexerAllocationRewards` relation. */
  readonly indexerAllocationRewards: InputMaybe<DeploymentToManyIndexerAllocationRewardFilter>;
  /** Some related `indexerAllocationRewards` exist. */
  readonly indexerAllocationRewardsExist: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `indexerAllocationSummaries` relation. */
  readonly indexerAllocationSummaries: InputMaybe<DeploymentToManyIndexerAllocationSummaryFilter>;
  /** Some related `indexerAllocationSummaries` exist. */
  readonly indexerAllocationSummariesExist: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `indexerAllocations` relation. */
  readonly indexerAllocations: InputMaybe<DeploymentToManyIndexerAllocationFilter>;
  /** Some related `indexerAllocations` exist. */
  readonly indexerAllocationsExist: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `indexerMissedLabors` relation. */
  readonly indexerMissedLabors: InputMaybe<DeploymentToManyIndexerMissedLaborFilter>;
  /** Some related `indexerMissedLabors` exist. */
  readonly indexerMissedLaborsExist: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `indexers` relation. */
  readonly indexers: InputMaybe<DeploymentToManyIndexerDeploymentFilter>;
  /** Some related `indexers` exist. */
  readonly indexersExist: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `lastEvent` field. */
  readonly lastEvent: InputMaybe<StringFilter>;
  /** Filter by the object’s `metadata` field. */
  readonly metadata: InputMaybe<StringFilter>;
  /** Negates the expression. */
  readonly not: InputMaybe<DeploymentFilter>;
  /** Filter by the object’s `offers` relation. */
  readonly offers: InputMaybe<DeploymentToManyOfferFilter>;
  /** Some related `offers` exist. */
  readonly offersExist: InputMaybe<Scalars['Boolean']['input']>;
  /** Checks for any expressions in this list. */
  readonly or: InputMaybe<ReadonlyArray<DeploymentFilter>>;
  /** Filter by the object’s `plans` relation. */
  readonly plans: InputMaybe<DeploymentToManyPlanFilter>;
  /** Some related `plans` exist. */
  readonly plansExist: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `project` relation. */
  readonly project: InputMaybe<ProjectFilter>;
  /** Filter by the object’s `projectId` field. */
  readonly projectId: InputMaybe<StringFilter>;
  /** Filter by the object’s `serviceAgreements` relation. */
  readonly serviceAgreements: InputMaybe<DeploymentToManyServiceAgreementFilter>;
  /** Some related `serviceAgreements` exist. */
  readonly serviceAgreementsExist: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `stateChannels` relation. */
  readonly stateChannels: InputMaybe<DeploymentToManyStateChannelFilter>;
  /** Some related `stateChannels` exist. */
  readonly stateChannelsExist: InputMaybe<Scalars['Boolean']['input']>;
};

/** A connection to a list of `Indexer` values, with data from `EraIndexerDeploymentApy`. */
export type DeploymentIndexersByEraIndexerDeploymentApyDeploymentIdAndIndexerIdManyToManyConnection = {
  readonly __typename: 'DeploymentIndexersByEraIndexerDeploymentApyDeploymentIdAndIndexerIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<IndexerAggregates>;
  /** A list of edges which contains the `Indexer`, info from the `EraIndexerDeploymentApy`, and the cursor to aid in pagination. */
  readonly edges: ReadonlyArray<DeploymentIndexersByEraIndexerDeploymentApyDeploymentIdAndIndexerIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<IndexerAggregates>>;
  /** A list of `Indexer` objects. */
  readonly nodes: ReadonlyArray<Maybe<Indexer>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Indexer` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Indexer` values, with data from `EraIndexerDeploymentApy`. */
export type DeploymentIndexersByEraIndexerDeploymentApyDeploymentIdAndIndexerIdManyToManyConnectionGroupedAggregatesArgs =
  {
    groupBy: ReadonlyArray<IndexersGroupBy>;
    having: InputMaybe<IndexersHavingInput>;
  };

/** A `Indexer` edge in the connection, with data from `EraIndexerDeploymentApy`. */
export type DeploymentIndexersByEraIndexerDeploymentApyDeploymentIdAndIndexerIdManyToManyEdge = {
  readonly __typename: 'DeploymentIndexersByEraIndexerDeploymentApyDeploymentIdAndIndexerIdManyToManyEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `EraIndexerDeploymentApy`. */
  readonly eraIndexerDeploymentApies: EraIndexerDeploymentApiesConnection;
  /** The `Indexer` at the end of the edge. */
  readonly node: Maybe<Indexer>;
};

/** A `Indexer` edge in the connection, with data from `EraIndexerDeploymentApy`. */
export type DeploymentIndexersByEraIndexerDeploymentApyDeploymentIdAndIndexerIdManyToManyEdgeEraIndexerDeploymentApiesArgs =
  {
    after: InputMaybe<Scalars['Cursor']['input']>;
    before: InputMaybe<Scalars['Cursor']['input']>;
    blockHeight?: InputMaybe<Scalars['String']['input']>;
    distinct?: InputMaybe<ReadonlyArray<InputMaybe<Era_Indexer_Deployment_Apies_Distinct_Enum>>>;
    filter: InputMaybe<EraIndexerDeploymentApyFilter>;
    first: InputMaybe<Scalars['Int']['input']>;
    last: InputMaybe<Scalars['Int']['input']>;
    offset: InputMaybe<Scalars['Int']['input']>;
    orderBy: InputMaybe<ReadonlyArray<EraIndexerDeploymentApiesOrderBy>>;
    orderByNull: InputMaybe<NullOrder>;
  };

/** A connection to a list of `Indexer` values, with data from `IndexerAllocation`. */
export type DeploymentIndexersByIndexerAllocationDeploymentIdAndIndexerIdManyToManyConnection = {
  readonly __typename: 'DeploymentIndexersByIndexerAllocationDeploymentIdAndIndexerIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<IndexerAggregates>;
  /** A list of edges which contains the `Indexer`, info from the `IndexerAllocation`, and the cursor to aid in pagination. */
  readonly edges: ReadonlyArray<DeploymentIndexersByIndexerAllocationDeploymentIdAndIndexerIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<IndexerAggregates>>;
  /** A list of `Indexer` objects. */
  readonly nodes: ReadonlyArray<Maybe<Indexer>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Indexer` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Indexer` values, with data from `IndexerAllocation`. */
export type DeploymentIndexersByIndexerAllocationDeploymentIdAndIndexerIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<IndexersGroupBy>;
  having: InputMaybe<IndexersHavingInput>;
};

/** A `Indexer` edge in the connection, with data from `IndexerAllocation`. */
export type DeploymentIndexersByIndexerAllocationDeploymentIdAndIndexerIdManyToManyEdge = {
  readonly __typename: 'DeploymentIndexersByIndexerAllocationDeploymentIdAndIndexerIdManyToManyEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `IndexerAllocation`. */
  readonly indexerAllocations: IndexerAllocationsConnection;
  /** The `Indexer` at the end of the edge. */
  readonly node: Maybe<Indexer>;
};

/** A `Indexer` edge in the connection, with data from `IndexerAllocation`. */
export type DeploymentIndexersByIndexerAllocationDeploymentIdAndIndexerIdManyToManyEdgeIndexerAllocationsArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Allocations_Distinct_Enum>>>;
  filter: InputMaybe<IndexerAllocationFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexerAllocationsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** A connection to a list of `Indexer` values, with data from `IndexerAllocationReward`. */
export type DeploymentIndexersByIndexerAllocationRewardDeploymentIdAndIndexerIdManyToManyConnection = {
  readonly __typename: 'DeploymentIndexersByIndexerAllocationRewardDeploymentIdAndIndexerIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<IndexerAggregates>;
  /** A list of edges which contains the `Indexer`, info from the `IndexerAllocationReward`, and the cursor to aid in pagination. */
  readonly edges: ReadonlyArray<DeploymentIndexersByIndexerAllocationRewardDeploymentIdAndIndexerIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<IndexerAggregates>>;
  /** A list of `Indexer` objects. */
  readonly nodes: ReadonlyArray<Maybe<Indexer>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Indexer` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Indexer` values, with data from `IndexerAllocationReward`. */
export type DeploymentIndexersByIndexerAllocationRewardDeploymentIdAndIndexerIdManyToManyConnectionGroupedAggregatesArgs =
  {
    groupBy: ReadonlyArray<IndexersGroupBy>;
    having: InputMaybe<IndexersHavingInput>;
  };

/** A `Indexer` edge in the connection, with data from `IndexerAllocationReward`. */
export type DeploymentIndexersByIndexerAllocationRewardDeploymentIdAndIndexerIdManyToManyEdge = {
  readonly __typename: 'DeploymentIndexersByIndexerAllocationRewardDeploymentIdAndIndexerIdManyToManyEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `IndexerAllocationReward`. */
  readonly indexerAllocationRewards: IndexerAllocationRewardsConnection;
  /** The `Indexer` at the end of the edge. */
  readonly node: Maybe<Indexer>;
};

/** A `Indexer` edge in the connection, with data from `IndexerAllocationReward`. */
export type DeploymentIndexersByIndexerAllocationRewardDeploymentIdAndIndexerIdManyToManyEdgeIndexerAllocationRewardsArgs =
  {
    after: InputMaybe<Scalars['Cursor']['input']>;
    before: InputMaybe<Scalars['Cursor']['input']>;
    blockHeight?: InputMaybe<Scalars['String']['input']>;
    distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Allocation_Rewards_Distinct_Enum>>>;
    filter: InputMaybe<IndexerAllocationRewardFilter>;
    first: InputMaybe<Scalars['Int']['input']>;
    last: InputMaybe<Scalars['Int']['input']>;
    offset: InputMaybe<Scalars['Int']['input']>;
    orderBy: InputMaybe<ReadonlyArray<IndexerAllocationRewardsOrderBy>>;
    orderByNull: InputMaybe<NullOrder>;
  };

/** A connection to a list of `Indexer` values, with data from `IndexerAllocationRewardSummary`. */
export type DeploymentIndexersByIndexerAllocationRewardSummaryDeploymentIdAndIndexerIdManyToManyConnection = {
  readonly __typename: 'DeploymentIndexersByIndexerAllocationRewardSummaryDeploymentIdAndIndexerIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<IndexerAggregates>;
  /** A list of edges which contains the `Indexer`, info from the `IndexerAllocationRewardSummary`, and the cursor to aid in pagination. */
  readonly edges: ReadonlyArray<DeploymentIndexersByIndexerAllocationRewardSummaryDeploymentIdAndIndexerIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<IndexerAggregates>>;
  /** A list of `Indexer` objects. */
  readonly nodes: ReadonlyArray<Maybe<Indexer>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Indexer` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Indexer` values, with data from `IndexerAllocationRewardSummary`. */
export type DeploymentIndexersByIndexerAllocationRewardSummaryDeploymentIdAndIndexerIdManyToManyConnectionGroupedAggregatesArgs =
  {
    groupBy: ReadonlyArray<IndexersGroupBy>;
    having: InputMaybe<IndexersHavingInput>;
  };

/** A `Indexer` edge in the connection, with data from `IndexerAllocationRewardSummary`. */
export type DeploymentIndexersByIndexerAllocationRewardSummaryDeploymentIdAndIndexerIdManyToManyEdge = {
  readonly __typename: 'DeploymentIndexersByIndexerAllocationRewardSummaryDeploymentIdAndIndexerIdManyToManyEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `IndexerAllocationRewardSummary`. */
  readonly indexerAllocationRewardSummaries: IndexerAllocationRewardSummariesConnection;
  /** The `Indexer` at the end of the edge. */
  readonly node: Maybe<Indexer>;
};

/** A `Indexer` edge in the connection, with data from `IndexerAllocationRewardSummary`. */
export type DeploymentIndexersByIndexerAllocationRewardSummaryDeploymentIdAndIndexerIdManyToManyEdgeIndexerAllocationRewardSummariesArgs =
  {
    after: InputMaybe<Scalars['Cursor']['input']>;
    before: InputMaybe<Scalars['Cursor']['input']>;
    blockHeight?: InputMaybe<Scalars['String']['input']>;
    distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Allocation_Reward_Summaries_Distinct_Enum>>>;
    filter: InputMaybe<IndexerAllocationRewardSummaryFilter>;
    first: InputMaybe<Scalars['Int']['input']>;
    last: InputMaybe<Scalars['Int']['input']>;
    offset: InputMaybe<Scalars['Int']['input']>;
    orderBy: InputMaybe<ReadonlyArray<IndexerAllocationRewardSummariesOrderBy>>;
    orderByNull: InputMaybe<NullOrder>;
  };

/** A connection to a list of `Indexer` values, with data from `IndexerAllocationSummary`. */
export type DeploymentIndexersByIndexerAllocationSummaryDeploymentIdAndIndexerIdManyToManyConnection = {
  readonly __typename: 'DeploymentIndexersByIndexerAllocationSummaryDeploymentIdAndIndexerIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<IndexerAggregates>;
  /** A list of edges which contains the `Indexer`, info from the `IndexerAllocationSummary`, and the cursor to aid in pagination. */
  readonly edges: ReadonlyArray<DeploymentIndexersByIndexerAllocationSummaryDeploymentIdAndIndexerIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<IndexerAggregates>>;
  /** A list of `Indexer` objects. */
  readonly nodes: ReadonlyArray<Maybe<Indexer>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Indexer` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Indexer` values, with data from `IndexerAllocationSummary`. */
export type DeploymentIndexersByIndexerAllocationSummaryDeploymentIdAndIndexerIdManyToManyConnectionGroupedAggregatesArgs =
  {
    groupBy: ReadonlyArray<IndexersGroupBy>;
    having: InputMaybe<IndexersHavingInput>;
  };

/** A `Indexer` edge in the connection, with data from `IndexerAllocationSummary`. */
export type DeploymentIndexersByIndexerAllocationSummaryDeploymentIdAndIndexerIdManyToManyEdge = {
  readonly __typename: 'DeploymentIndexersByIndexerAllocationSummaryDeploymentIdAndIndexerIdManyToManyEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `IndexerAllocationSummary`. */
  readonly indexerAllocationSummaries: IndexerAllocationSummariesConnection;
  /** The `Indexer` at the end of the edge. */
  readonly node: Maybe<Indexer>;
};

/** A `Indexer` edge in the connection, with data from `IndexerAllocationSummary`. */
export type DeploymentIndexersByIndexerAllocationSummaryDeploymentIdAndIndexerIdManyToManyEdgeIndexerAllocationSummariesArgs =
  {
    after: InputMaybe<Scalars['Cursor']['input']>;
    before: InputMaybe<Scalars['Cursor']['input']>;
    blockHeight?: InputMaybe<Scalars['String']['input']>;
    distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Allocation_Summaries_Distinct_Enum>>>;
    filter: InputMaybe<IndexerAllocationSummaryFilter>;
    first: InputMaybe<Scalars['Int']['input']>;
    last: InputMaybe<Scalars['Int']['input']>;
    offset: InputMaybe<Scalars['Int']['input']>;
    orderBy: InputMaybe<ReadonlyArray<IndexerAllocationSummariesOrderBy>>;
    orderByNull: InputMaybe<NullOrder>;
  };

/** A connection to a list of `Indexer` values, with data from `IndexerDeployment`. */
export type DeploymentIndexersByIndexerDeploymentDeploymentIdAndIndexerIdManyToManyConnection = {
  readonly __typename: 'DeploymentIndexersByIndexerDeploymentDeploymentIdAndIndexerIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<IndexerAggregates>;
  /** A list of edges which contains the `Indexer`, info from the `IndexerDeployment`, and the cursor to aid in pagination. */
  readonly edges: ReadonlyArray<DeploymentIndexersByIndexerDeploymentDeploymentIdAndIndexerIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<IndexerAggregates>>;
  /** A list of `Indexer` objects. */
  readonly nodes: ReadonlyArray<Maybe<Indexer>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Indexer` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Indexer` values, with data from `IndexerDeployment`. */
export type DeploymentIndexersByIndexerDeploymentDeploymentIdAndIndexerIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<IndexersGroupBy>;
  having: InputMaybe<IndexersHavingInput>;
};

/** A `Indexer` edge in the connection, with data from `IndexerDeployment`. */
export type DeploymentIndexersByIndexerDeploymentDeploymentIdAndIndexerIdManyToManyEdge = {
  readonly __typename: 'DeploymentIndexersByIndexerDeploymentDeploymentIdAndIndexerIdManyToManyEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `Indexer` at the end of the edge. */
  readonly node: Maybe<Indexer>;
  /** Reads and enables pagination through a set of `IndexerDeployment`. */
  readonly projects: IndexerDeploymentsConnection;
};

/** A `Indexer` edge in the connection, with data from `IndexerDeployment`. */
export type DeploymentIndexersByIndexerDeploymentDeploymentIdAndIndexerIdManyToManyEdgeProjectsArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Deployments_Distinct_Enum>>>;
  filter: InputMaybe<IndexerDeploymentFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexerDeploymentsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** A connection to a list of `Indexer` values, with data from `IndexerMissedLabor`. */
export type DeploymentIndexersByIndexerMissedLaborDeploymentIdAndIndexerIdManyToManyConnection = {
  readonly __typename: 'DeploymentIndexersByIndexerMissedLaborDeploymentIdAndIndexerIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<IndexerAggregates>;
  /** A list of edges which contains the `Indexer`, info from the `IndexerMissedLabor`, and the cursor to aid in pagination. */
  readonly edges: ReadonlyArray<DeploymentIndexersByIndexerMissedLaborDeploymentIdAndIndexerIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<IndexerAggregates>>;
  /** A list of `Indexer` objects. */
  readonly nodes: ReadonlyArray<Maybe<Indexer>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Indexer` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Indexer` values, with data from `IndexerMissedLabor`. */
export type DeploymentIndexersByIndexerMissedLaborDeploymentIdAndIndexerIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<IndexersGroupBy>;
  having: InputMaybe<IndexersHavingInput>;
};

/** A `Indexer` edge in the connection, with data from `IndexerMissedLabor`. */
export type DeploymentIndexersByIndexerMissedLaborDeploymentIdAndIndexerIdManyToManyEdge = {
  readonly __typename: 'DeploymentIndexersByIndexerMissedLaborDeploymentIdAndIndexerIdManyToManyEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `IndexerMissedLabor`. */
  readonly indexerMissedLabors: IndexerMissedLaborsConnection;
  /** The `Indexer` at the end of the edge. */
  readonly node: Maybe<Indexer>;
};

/** A `Indexer` edge in the connection, with data from `IndexerMissedLabor`. */
export type DeploymentIndexersByIndexerMissedLaborDeploymentIdAndIndexerIdManyToManyEdgeIndexerMissedLaborsArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Missed_Labors_Distinct_Enum>>>;
  filter: InputMaybe<IndexerMissedLaborFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexerMissedLaborsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type DeploymentMaxAggregateFilter = {
  readonly createdBlock: InputMaybe<IntFilter>;
};

export type DeploymentMaxAggregates = {
  readonly __typename: 'DeploymentMaxAggregates';
  /** Maximum of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['Int']['output']>;
};

export type DeploymentMinAggregateFilter = {
  readonly createdBlock: InputMaybe<IntFilter>;
};

export type DeploymentMinAggregates = {
  readonly __typename: 'DeploymentMinAggregates';
  /** Minimum of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['Int']['output']>;
};

/** A connection to a list of `PlanTemplate` values, with data from `Offer`. */
export type DeploymentPlanTemplatesByOfferDeploymentIdAndPlanTemplateIdManyToManyConnection = {
  readonly __typename: 'DeploymentPlanTemplatesByOfferDeploymentIdAndPlanTemplateIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<PlanTemplateAggregates>;
  /** A list of edges which contains the `PlanTemplate`, info from the `Offer`, and the cursor to aid in pagination. */
  readonly edges: ReadonlyArray<DeploymentPlanTemplatesByOfferDeploymentIdAndPlanTemplateIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<PlanTemplateAggregates>>;
  /** A list of `PlanTemplate` objects. */
  readonly nodes: ReadonlyArray<Maybe<PlanTemplate>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `PlanTemplate` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `PlanTemplate` values, with data from `Offer`. */
export type DeploymentPlanTemplatesByOfferDeploymentIdAndPlanTemplateIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<PlanTemplatesGroupBy>;
  having: InputMaybe<PlanTemplatesHavingInput>;
};

/** A `PlanTemplate` edge in the connection, with data from `Offer`. */
export type DeploymentPlanTemplatesByOfferDeploymentIdAndPlanTemplateIdManyToManyEdge = {
  readonly __typename: 'DeploymentPlanTemplatesByOfferDeploymentIdAndPlanTemplateIdManyToManyEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `PlanTemplate` at the end of the edge. */
  readonly node: Maybe<PlanTemplate>;
  /** Reads and enables pagination through a set of `Offer`. */
  readonly offers: OffersConnection;
};

/** A `PlanTemplate` edge in the connection, with data from `Offer`. */
export type DeploymentPlanTemplatesByOfferDeploymentIdAndPlanTemplateIdManyToManyEdgeOffersArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Offers_Distinct_Enum>>>;
  filter: InputMaybe<OfferFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<OffersOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** A connection to a list of `PlanTemplate` values, with data from `Plan`. */
export type DeploymentPlanTemplatesByPlanDeploymentIdAndPlanTemplateIdManyToManyConnection = {
  readonly __typename: 'DeploymentPlanTemplatesByPlanDeploymentIdAndPlanTemplateIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<PlanTemplateAggregates>;
  /** A list of edges which contains the `PlanTemplate`, info from the `Plan`, and the cursor to aid in pagination. */
  readonly edges: ReadonlyArray<DeploymentPlanTemplatesByPlanDeploymentIdAndPlanTemplateIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<PlanTemplateAggregates>>;
  /** A list of `PlanTemplate` objects. */
  readonly nodes: ReadonlyArray<Maybe<PlanTemplate>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `PlanTemplate` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `PlanTemplate` values, with data from `Plan`. */
export type DeploymentPlanTemplatesByPlanDeploymentIdAndPlanTemplateIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<PlanTemplatesGroupBy>;
  having: InputMaybe<PlanTemplatesHavingInput>;
};

/** A `PlanTemplate` edge in the connection, with data from `Plan`. */
export type DeploymentPlanTemplatesByPlanDeploymentIdAndPlanTemplateIdManyToManyEdge = {
  readonly __typename: 'DeploymentPlanTemplatesByPlanDeploymentIdAndPlanTemplateIdManyToManyEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `PlanTemplate` at the end of the edge. */
  readonly node: Maybe<PlanTemplate>;
  /** Reads and enables pagination through a set of `Plan`. */
  readonly plans: PlansConnection;
};

/** A `PlanTemplate` edge in the connection, with data from `Plan`. */
export type DeploymentPlanTemplatesByPlanDeploymentIdAndPlanTemplateIdManyToManyEdgePlansArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Plans_Distinct_Enum>>>;
  filter: InputMaybe<PlanFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<PlansOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** A connection to a list of `PlanTemplate` values, with data from `ServiceAgreement`. */
export type DeploymentPlanTemplatesByServiceAgreementDeploymentIdAndPlanTemplateIdManyToManyConnection = {
  readonly __typename: 'DeploymentPlanTemplatesByServiceAgreementDeploymentIdAndPlanTemplateIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<PlanTemplateAggregates>;
  /** A list of edges which contains the `PlanTemplate`, info from the `ServiceAgreement`, and the cursor to aid in pagination. */
  readonly edges: ReadonlyArray<DeploymentPlanTemplatesByServiceAgreementDeploymentIdAndPlanTemplateIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<PlanTemplateAggregates>>;
  /** A list of `PlanTemplate` objects. */
  readonly nodes: ReadonlyArray<Maybe<PlanTemplate>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `PlanTemplate` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `PlanTemplate` values, with data from `ServiceAgreement`. */
export type DeploymentPlanTemplatesByServiceAgreementDeploymentIdAndPlanTemplateIdManyToManyConnectionGroupedAggregatesArgs =
  {
    groupBy: ReadonlyArray<PlanTemplatesGroupBy>;
    having: InputMaybe<PlanTemplatesHavingInput>;
  };

/** A `PlanTemplate` edge in the connection, with data from `ServiceAgreement`. */
export type DeploymentPlanTemplatesByServiceAgreementDeploymentIdAndPlanTemplateIdManyToManyEdge = {
  readonly __typename: 'DeploymentPlanTemplatesByServiceAgreementDeploymentIdAndPlanTemplateIdManyToManyEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `PlanTemplate` at the end of the edge. */
  readonly node: Maybe<PlanTemplate>;
  /** Reads and enables pagination through a set of `ServiceAgreement`. */
  readonly serviceAgreements: ServiceAgreementsConnection;
};

/** A `PlanTemplate` edge in the connection, with data from `ServiceAgreement`. */
export type DeploymentPlanTemplatesByServiceAgreementDeploymentIdAndPlanTemplateIdManyToManyEdgeServiceAgreementsArgs =
  {
    after: InputMaybe<Scalars['Cursor']['input']>;
    before: InputMaybe<Scalars['Cursor']['input']>;
    blockHeight?: InputMaybe<Scalars['String']['input']>;
    distinct?: InputMaybe<ReadonlyArray<InputMaybe<Service_Agreements_Distinct_Enum>>>;
    filter: InputMaybe<ServiceAgreementFilter>;
    first: InputMaybe<Scalars['Int']['input']>;
    last: InputMaybe<Scalars['Int']['input']>;
    offset: InputMaybe<Scalars['Int']['input']>;
    orderBy: InputMaybe<ReadonlyArray<ServiceAgreementsOrderBy>>;
    orderByNull: InputMaybe<NullOrder>;
  };

/** A connection to a list of `Project` values, with data from `ConsumerQueryReward`. */
export type DeploymentProjectsByConsumerQueryRewardDeploymentIdAndProjectIdManyToManyConnection = {
  readonly __typename: 'DeploymentProjectsByConsumerQueryRewardDeploymentIdAndProjectIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<ProjectAggregates>;
  /** A list of edges which contains the `Project`, info from the `ConsumerQueryReward`, and the cursor to aid in pagination. */
  readonly edges: ReadonlyArray<DeploymentProjectsByConsumerQueryRewardDeploymentIdAndProjectIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<ProjectAggregates>>;
  /** A list of `Project` objects. */
  readonly nodes: ReadonlyArray<Maybe<Project>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Project` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Project` values, with data from `ConsumerQueryReward`. */
export type DeploymentProjectsByConsumerQueryRewardDeploymentIdAndProjectIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<ProjectsGroupBy>;
  having: InputMaybe<ProjectsHavingInput>;
};

/** A `Project` edge in the connection, with data from `ConsumerQueryReward`. */
export type DeploymentProjectsByConsumerQueryRewardDeploymentIdAndProjectIdManyToManyEdge = {
  readonly __typename: 'DeploymentProjectsByConsumerQueryRewardDeploymentIdAndProjectIdManyToManyEdge';
  /** Reads and enables pagination through a set of `ConsumerQueryReward`. */
  readonly consumerQueryRewards: ConsumerQueryRewardsConnection;
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `Project` at the end of the edge. */
  readonly node: Maybe<Project>;
};

/** A `Project` edge in the connection, with data from `ConsumerQueryReward`. */
export type DeploymentProjectsByConsumerQueryRewardDeploymentIdAndProjectIdManyToManyEdgeConsumerQueryRewardsArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Consumer_Query_Rewards_Distinct_Enum>>>;
  filter: InputMaybe<ConsumerQueryRewardFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<ConsumerQueryRewardsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** A connection to a list of `Project` values, with data from `ConsumerQueryRewardSummary`. */
export type DeploymentProjectsByConsumerQueryRewardSummaryDeploymentIdAndProjectIdManyToManyConnection = {
  readonly __typename: 'DeploymentProjectsByConsumerQueryRewardSummaryDeploymentIdAndProjectIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<ProjectAggregates>;
  /** A list of edges which contains the `Project`, info from the `ConsumerQueryRewardSummary`, and the cursor to aid in pagination. */
  readonly edges: ReadonlyArray<DeploymentProjectsByConsumerQueryRewardSummaryDeploymentIdAndProjectIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<ProjectAggregates>>;
  /** A list of `Project` objects. */
  readonly nodes: ReadonlyArray<Maybe<Project>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Project` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Project` values, with data from `ConsumerQueryRewardSummary`. */
export type DeploymentProjectsByConsumerQueryRewardSummaryDeploymentIdAndProjectIdManyToManyConnectionGroupedAggregatesArgs =
  {
    groupBy: ReadonlyArray<ProjectsGroupBy>;
    having: InputMaybe<ProjectsHavingInput>;
  };

/** A `Project` edge in the connection, with data from `ConsumerQueryRewardSummary`. */
export type DeploymentProjectsByConsumerQueryRewardSummaryDeploymentIdAndProjectIdManyToManyEdge = {
  readonly __typename: 'DeploymentProjectsByConsumerQueryRewardSummaryDeploymentIdAndProjectIdManyToManyEdge';
  /** Reads and enables pagination through a set of `ConsumerQueryRewardSummary`. */
  readonly consumerQueryRewardSummaries: ConsumerQueryRewardSummariesConnection;
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `Project` at the end of the edge. */
  readonly node: Maybe<Project>;
};

/** A `Project` edge in the connection, with data from `ConsumerQueryRewardSummary`. */
export type DeploymentProjectsByConsumerQueryRewardSummaryDeploymentIdAndProjectIdManyToManyEdgeConsumerQueryRewardSummariesArgs =
  {
    after: InputMaybe<Scalars['Cursor']['input']>;
    before: InputMaybe<Scalars['Cursor']['input']>;
    blockHeight?: InputMaybe<Scalars['String']['input']>;
    distinct?: InputMaybe<ReadonlyArray<InputMaybe<Consumer_Query_Reward_Summaries_Distinct_Enum>>>;
    filter: InputMaybe<ConsumerQueryRewardSummaryFilter>;
    first: InputMaybe<Scalars['Int']['input']>;
    last: InputMaybe<Scalars['Int']['input']>;
    offset: InputMaybe<Scalars['Int']['input']>;
    orderBy: InputMaybe<ReadonlyArray<ConsumerQueryRewardSummariesOrderBy>>;
    orderByNull: InputMaybe<NullOrder>;
  };

/** A connection to a list of `Project` values, with data from `DeploymentBooster`. */
export type DeploymentProjectsByDeploymentBoosterDeploymentIdAndProjectIdManyToManyConnection = {
  readonly __typename: 'DeploymentProjectsByDeploymentBoosterDeploymentIdAndProjectIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<ProjectAggregates>;
  /** A list of edges which contains the `Project`, info from the `DeploymentBooster`, and the cursor to aid in pagination. */
  readonly edges: ReadonlyArray<DeploymentProjectsByDeploymentBoosterDeploymentIdAndProjectIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<ProjectAggregates>>;
  /** A list of `Project` objects. */
  readonly nodes: ReadonlyArray<Maybe<Project>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Project` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Project` values, with data from `DeploymentBooster`. */
export type DeploymentProjectsByDeploymentBoosterDeploymentIdAndProjectIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<ProjectsGroupBy>;
  having: InputMaybe<ProjectsHavingInput>;
};

/** A `Project` edge in the connection, with data from `DeploymentBooster`. */
export type DeploymentProjectsByDeploymentBoosterDeploymentIdAndProjectIdManyToManyEdge = {
  readonly __typename: 'DeploymentProjectsByDeploymentBoosterDeploymentIdAndProjectIdManyToManyEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `DeploymentBooster`. */
  readonly deploymentBoosters: DeploymentBoostersConnection;
  /** The `Project` at the end of the edge. */
  readonly node: Maybe<Project>;
};

/** A `Project` edge in the connection, with data from `DeploymentBooster`. */
export type DeploymentProjectsByDeploymentBoosterDeploymentIdAndProjectIdManyToManyEdgeDeploymentBoostersArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Deployment_Boosters_Distinct_Enum>>>;
  filter: InputMaybe<DeploymentBoosterFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<DeploymentBoostersOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** A connection to a list of `Project` values, with data from `DeploymentBoosterSummary`. */
export type DeploymentProjectsByDeploymentBoosterSummaryDeploymentIdAndProjectIdManyToManyConnection = {
  readonly __typename: 'DeploymentProjectsByDeploymentBoosterSummaryDeploymentIdAndProjectIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<ProjectAggregates>;
  /** A list of edges which contains the `Project`, info from the `DeploymentBoosterSummary`, and the cursor to aid in pagination. */
  readonly edges: ReadonlyArray<DeploymentProjectsByDeploymentBoosterSummaryDeploymentIdAndProjectIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<ProjectAggregates>>;
  /** A list of `Project` objects. */
  readonly nodes: ReadonlyArray<Maybe<Project>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Project` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Project` values, with data from `DeploymentBoosterSummary`. */
export type DeploymentProjectsByDeploymentBoosterSummaryDeploymentIdAndProjectIdManyToManyConnectionGroupedAggregatesArgs =
  {
    groupBy: ReadonlyArray<ProjectsGroupBy>;
    having: InputMaybe<ProjectsHavingInput>;
  };

/** A `Project` edge in the connection, with data from `DeploymentBoosterSummary`. */
export type DeploymentProjectsByDeploymentBoosterSummaryDeploymentIdAndProjectIdManyToManyEdge = {
  readonly __typename: 'DeploymentProjectsByDeploymentBoosterSummaryDeploymentIdAndProjectIdManyToManyEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `DeploymentBoosterSummary`. */
  readonly deploymentBoosterSummaries: DeploymentBoosterSummariesConnection;
  /** The `Project` at the end of the edge. */
  readonly node: Maybe<Project>;
};

/** A `Project` edge in the connection, with data from `DeploymentBoosterSummary`. */
export type DeploymentProjectsByDeploymentBoosterSummaryDeploymentIdAndProjectIdManyToManyEdgeDeploymentBoosterSummariesArgs =
  {
    after: InputMaybe<Scalars['Cursor']['input']>;
    before: InputMaybe<Scalars['Cursor']['input']>;
    blockHeight?: InputMaybe<Scalars['String']['input']>;
    distinct?: InputMaybe<ReadonlyArray<InputMaybe<Deployment_Booster_Summaries_Distinct_Enum>>>;
    filter: InputMaybe<DeploymentBoosterSummaryFilter>;
    first: InputMaybe<Scalars['Int']['input']>;
    last: InputMaybe<Scalars['Int']['input']>;
    offset: InputMaybe<Scalars['Int']['input']>;
    orderBy: InputMaybe<ReadonlyArray<DeploymentBoosterSummariesOrderBy>>;
    orderByNull: InputMaybe<NullOrder>;
  };

/** A connection to a list of `Project` values, with data from `IndexerAllocation`. */
export type DeploymentProjectsByIndexerAllocationDeploymentIdAndProjectIdManyToManyConnection = {
  readonly __typename: 'DeploymentProjectsByIndexerAllocationDeploymentIdAndProjectIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<ProjectAggregates>;
  /** A list of edges which contains the `Project`, info from the `IndexerAllocation`, and the cursor to aid in pagination. */
  readonly edges: ReadonlyArray<DeploymentProjectsByIndexerAllocationDeploymentIdAndProjectIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<ProjectAggregates>>;
  /** A list of `Project` objects. */
  readonly nodes: ReadonlyArray<Maybe<Project>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Project` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Project` values, with data from `IndexerAllocation`. */
export type DeploymentProjectsByIndexerAllocationDeploymentIdAndProjectIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<ProjectsGroupBy>;
  having: InputMaybe<ProjectsHavingInput>;
};

/** A `Project` edge in the connection, with data from `IndexerAllocation`. */
export type DeploymentProjectsByIndexerAllocationDeploymentIdAndProjectIdManyToManyEdge = {
  readonly __typename: 'DeploymentProjectsByIndexerAllocationDeploymentIdAndProjectIdManyToManyEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `IndexerAllocation`. */
  readonly indexerAllocations: IndexerAllocationsConnection;
  /** The `Project` at the end of the edge. */
  readonly node: Maybe<Project>;
};

/** A `Project` edge in the connection, with data from `IndexerAllocation`. */
export type DeploymentProjectsByIndexerAllocationDeploymentIdAndProjectIdManyToManyEdgeIndexerAllocationsArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Allocations_Distinct_Enum>>>;
  filter: InputMaybe<IndexerAllocationFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexerAllocationsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** A connection to a list of `Project` values, with data from `IndexerAllocationReward`. */
export type DeploymentProjectsByIndexerAllocationRewardDeploymentIdAndProjectIdManyToManyConnection = {
  readonly __typename: 'DeploymentProjectsByIndexerAllocationRewardDeploymentIdAndProjectIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<ProjectAggregates>;
  /** A list of edges which contains the `Project`, info from the `IndexerAllocationReward`, and the cursor to aid in pagination. */
  readonly edges: ReadonlyArray<DeploymentProjectsByIndexerAllocationRewardDeploymentIdAndProjectIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<ProjectAggregates>>;
  /** A list of `Project` objects. */
  readonly nodes: ReadonlyArray<Maybe<Project>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Project` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Project` values, with data from `IndexerAllocationReward`. */
export type DeploymentProjectsByIndexerAllocationRewardDeploymentIdAndProjectIdManyToManyConnectionGroupedAggregatesArgs =
  {
    groupBy: ReadonlyArray<ProjectsGroupBy>;
    having: InputMaybe<ProjectsHavingInput>;
  };

/** A `Project` edge in the connection, with data from `IndexerAllocationReward`. */
export type DeploymentProjectsByIndexerAllocationRewardDeploymentIdAndProjectIdManyToManyEdge = {
  readonly __typename: 'DeploymentProjectsByIndexerAllocationRewardDeploymentIdAndProjectIdManyToManyEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `IndexerAllocationReward`. */
  readonly indexerAllocationRewards: IndexerAllocationRewardsConnection;
  /** The `Project` at the end of the edge. */
  readonly node: Maybe<Project>;
};

/** A `Project` edge in the connection, with data from `IndexerAllocationReward`. */
export type DeploymentProjectsByIndexerAllocationRewardDeploymentIdAndProjectIdManyToManyEdgeIndexerAllocationRewardsArgs =
  {
    after: InputMaybe<Scalars['Cursor']['input']>;
    before: InputMaybe<Scalars['Cursor']['input']>;
    blockHeight?: InputMaybe<Scalars['String']['input']>;
    distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Allocation_Rewards_Distinct_Enum>>>;
    filter: InputMaybe<IndexerAllocationRewardFilter>;
    first: InputMaybe<Scalars['Int']['input']>;
    last: InputMaybe<Scalars['Int']['input']>;
    offset: InputMaybe<Scalars['Int']['input']>;
    orderBy: InputMaybe<ReadonlyArray<IndexerAllocationRewardsOrderBy>>;
    orderByNull: InputMaybe<NullOrder>;
  };

/** A connection to a list of `Project` values, with data from `IndexerAllocationRewardSummary`. */
export type DeploymentProjectsByIndexerAllocationRewardSummaryDeploymentIdAndProjectIdManyToManyConnection = {
  readonly __typename: 'DeploymentProjectsByIndexerAllocationRewardSummaryDeploymentIdAndProjectIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<ProjectAggregates>;
  /** A list of edges which contains the `Project`, info from the `IndexerAllocationRewardSummary`, and the cursor to aid in pagination. */
  readonly edges: ReadonlyArray<DeploymentProjectsByIndexerAllocationRewardSummaryDeploymentIdAndProjectIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<ProjectAggregates>>;
  /** A list of `Project` objects. */
  readonly nodes: ReadonlyArray<Maybe<Project>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Project` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Project` values, with data from `IndexerAllocationRewardSummary`. */
export type DeploymentProjectsByIndexerAllocationRewardSummaryDeploymentIdAndProjectIdManyToManyConnectionGroupedAggregatesArgs =
  {
    groupBy: ReadonlyArray<ProjectsGroupBy>;
    having: InputMaybe<ProjectsHavingInput>;
  };

/** A `Project` edge in the connection, with data from `IndexerAllocationRewardSummary`. */
export type DeploymentProjectsByIndexerAllocationRewardSummaryDeploymentIdAndProjectIdManyToManyEdge = {
  readonly __typename: 'DeploymentProjectsByIndexerAllocationRewardSummaryDeploymentIdAndProjectIdManyToManyEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `IndexerAllocationRewardSummary`. */
  readonly indexerAllocationRewardSummaries: IndexerAllocationRewardSummariesConnection;
  /** The `Project` at the end of the edge. */
  readonly node: Maybe<Project>;
};

/** A `Project` edge in the connection, with data from `IndexerAllocationRewardSummary`. */
export type DeploymentProjectsByIndexerAllocationRewardSummaryDeploymentIdAndProjectIdManyToManyEdgeIndexerAllocationRewardSummariesArgs =
  {
    after: InputMaybe<Scalars['Cursor']['input']>;
    before: InputMaybe<Scalars['Cursor']['input']>;
    blockHeight?: InputMaybe<Scalars['String']['input']>;
    distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Allocation_Reward_Summaries_Distinct_Enum>>>;
    filter: InputMaybe<IndexerAllocationRewardSummaryFilter>;
    first: InputMaybe<Scalars['Int']['input']>;
    last: InputMaybe<Scalars['Int']['input']>;
    offset: InputMaybe<Scalars['Int']['input']>;
    orderBy: InputMaybe<ReadonlyArray<IndexerAllocationRewardSummariesOrderBy>>;
    orderByNull: InputMaybe<NullOrder>;
  };

/** A connection to a list of `Project` values, with data from `IndexerAllocationSummary`. */
export type DeploymentProjectsByIndexerAllocationSummaryDeploymentIdAndProjectIdManyToManyConnection = {
  readonly __typename: 'DeploymentProjectsByIndexerAllocationSummaryDeploymentIdAndProjectIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<ProjectAggregates>;
  /** A list of edges which contains the `Project`, info from the `IndexerAllocationSummary`, and the cursor to aid in pagination. */
  readonly edges: ReadonlyArray<DeploymentProjectsByIndexerAllocationSummaryDeploymentIdAndProjectIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<ProjectAggregates>>;
  /** A list of `Project` objects. */
  readonly nodes: ReadonlyArray<Maybe<Project>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Project` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Project` values, with data from `IndexerAllocationSummary`. */
export type DeploymentProjectsByIndexerAllocationSummaryDeploymentIdAndProjectIdManyToManyConnectionGroupedAggregatesArgs =
  {
    groupBy: ReadonlyArray<ProjectsGroupBy>;
    having: InputMaybe<ProjectsHavingInput>;
  };

/** A `Project` edge in the connection, with data from `IndexerAllocationSummary`. */
export type DeploymentProjectsByIndexerAllocationSummaryDeploymentIdAndProjectIdManyToManyEdge = {
  readonly __typename: 'DeploymentProjectsByIndexerAllocationSummaryDeploymentIdAndProjectIdManyToManyEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `IndexerAllocationSummary`. */
  readonly indexerAllocationSummaries: IndexerAllocationSummariesConnection;
  /** The `Project` at the end of the edge. */
  readonly node: Maybe<Project>;
};

/** A `Project` edge in the connection, with data from `IndexerAllocationSummary`. */
export type DeploymentProjectsByIndexerAllocationSummaryDeploymentIdAndProjectIdManyToManyEdgeIndexerAllocationSummariesArgs =
  {
    after: InputMaybe<Scalars['Cursor']['input']>;
    before: InputMaybe<Scalars['Cursor']['input']>;
    blockHeight?: InputMaybe<Scalars['String']['input']>;
    distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Allocation_Summaries_Distinct_Enum>>>;
    filter: InputMaybe<IndexerAllocationSummaryFilter>;
    first: InputMaybe<Scalars['Int']['input']>;
    last: InputMaybe<Scalars['Int']['input']>;
    offset: InputMaybe<Scalars['Int']['input']>;
    orderBy: InputMaybe<ReadonlyArray<IndexerAllocationSummariesOrderBy>>;
    orderByNull: InputMaybe<NullOrder>;
  };

export type DeploymentStddevPopulationAggregateFilter = {
  readonly createdBlock: InputMaybe<BigFloatFilter>;
};

export type DeploymentStddevPopulationAggregates = {
  readonly __typename: 'DeploymentStddevPopulationAggregates';
  /** Population standard deviation of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
};

export type DeploymentStddevSampleAggregateFilter = {
  readonly createdBlock: InputMaybe<BigFloatFilter>;
};

export type DeploymentStddevSampleAggregates = {
  readonly __typename: 'DeploymentStddevSampleAggregates';
  /** Sample standard deviation of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
};

export type DeploymentSumAggregateFilter = {
  readonly createdBlock: InputMaybe<BigIntFilter>;
};

export type DeploymentSumAggregates = {
  readonly __typename: 'DeploymentSumAggregates';
  /** Sum of createdBlock across the matching connection */
  readonly createdBlock: Scalars['BigInt']['output'];
};

/** A filter to be used against many `ConsumerQueryReward` object types. All fields are combined with a logical ‘and.’ */
export type DeploymentToManyConsumerQueryRewardFilter = {
  /** Aggregates across related `ConsumerQueryReward` match the filter criteria. */
  readonly aggregates: InputMaybe<ConsumerQueryRewardAggregatesFilter>;
  /** Every related `ConsumerQueryReward` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly every: InputMaybe<ConsumerQueryRewardFilter>;
  /** No related `ConsumerQueryReward` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly none: InputMaybe<ConsumerQueryRewardFilter>;
  /** Some related `ConsumerQueryReward` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly some: InputMaybe<ConsumerQueryRewardFilter>;
};

/** A filter to be used against many `ConsumerQueryRewardSummary` object types. All fields are combined with a logical ‘and.’ */
export type DeploymentToManyConsumerQueryRewardSummaryFilter = {
  /** Aggregates across related `ConsumerQueryRewardSummary` match the filter criteria. */
  readonly aggregates: InputMaybe<ConsumerQueryRewardSummaryAggregatesFilter>;
  /** Every related `ConsumerQueryRewardSummary` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly every: InputMaybe<ConsumerQueryRewardSummaryFilter>;
  /** No related `ConsumerQueryRewardSummary` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly none: InputMaybe<ConsumerQueryRewardSummaryFilter>;
  /** Some related `ConsumerQueryRewardSummary` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly some: InputMaybe<ConsumerQueryRewardSummaryFilter>;
};

/** A filter to be used against many `DeploymentBooster` object types. All fields are combined with a logical ‘and.’ */
export type DeploymentToManyDeploymentBoosterFilter = {
  /** Aggregates across related `DeploymentBooster` match the filter criteria. */
  readonly aggregates: InputMaybe<DeploymentBoosterAggregatesFilter>;
  /** Every related `DeploymentBooster` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly every: InputMaybe<DeploymentBoosterFilter>;
  /** No related `DeploymentBooster` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly none: InputMaybe<DeploymentBoosterFilter>;
  /** Some related `DeploymentBooster` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly some: InputMaybe<DeploymentBoosterFilter>;
};

/** A filter to be used against many `DeploymentBoosterSummary` object types. All fields are combined with a logical ‘and.’ */
export type DeploymentToManyDeploymentBoosterSummaryFilter = {
  /** Aggregates across related `DeploymentBoosterSummary` match the filter criteria. */
  readonly aggregates: InputMaybe<DeploymentBoosterSummaryAggregatesFilter>;
  /** Every related `DeploymentBoosterSummary` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly every: InputMaybe<DeploymentBoosterSummaryFilter>;
  /** No related `DeploymentBoosterSummary` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly none: InputMaybe<DeploymentBoosterSummaryFilter>;
  /** Some related `DeploymentBoosterSummary` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly some: InputMaybe<DeploymentBoosterSummaryFilter>;
};

/** A filter to be used against many `EraIndexerDeploymentApy` object types. All fields are combined with a logical ‘and.’ */
export type DeploymentToManyEraIndexerDeploymentApyFilter = {
  /** Aggregates across related `EraIndexerDeploymentApy` match the filter criteria. */
  readonly aggregates: InputMaybe<EraIndexerDeploymentApyAggregatesFilter>;
  /** Every related `EraIndexerDeploymentApy` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly every: InputMaybe<EraIndexerDeploymentApyFilter>;
  /** No related `EraIndexerDeploymentApy` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly none: InputMaybe<EraIndexerDeploymentApyFilter>;
  /** Some related `EraIndexerDeploymentApy` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly some: InputMaybe<EraIndexerDeploymentApyFilter>;
};

/** A filter to be used against many `IndexerAllocation` object types. All fields are combined with a logical ‘and.’ */
export type DeploymentToManyIndexerAllocationFilter = {
  /** Aggregates across related `IndexerAllocation` match the filter criteria. */
  readonly aggregates: InputMaybe<IndexerAllocationAggregatesFilter>;
  /** Every related `IndexerAllocation` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly every: InputMaybe<IndexerAllocationFilter>;
  /** No related `IndexerAllocation` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly none: InputMaybe<IndexerAllocationFilter>;
  /** Some related `IndexerAllocation` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly some: InputMaybe<IndexerAllocationFilter>;
};

/** A filter to be used against many `IndexerAllocationReward` object types. All fields are combined with a logical ‘and.’ */
export type DeploymentToManyIndexerAllocationRewardFilter = {
  /** Aggregates across related `IndexerAllocationReward` match the filter criteria. */
  readonly aggregates: InputMaybe<IndexerAllocationRewardAggregatesFilter>;
  /** Every related `IndexerAllocationReward` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly every: InputMaybe<IndexerAllocationRewardFilter>;
  /** No related `IndexerAllocationReward` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly none: InputMaybe<IndexerAllocationRewardFilter>;
  /** Some related `IndexerAllocationReward` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly some: InputMaybe<IndexerAllocationRewardFilter>;
};

/** A filter to be used against many `IndexerAllocationRewardSummary` object types. All fields are combined with a logical ‘and.’ */
export type DeploymentToManyIndexerAllocationRewardSummaryFilter = {
  /** Aggregates across related `IndexerAllocationRewardSummary` match the filter criteria. */
  readonly aggregates: InputMaybe<IndexerAllocationRewardSummaryAggregatesFilter>;
  /** Every related `IndexerAllocationRewardSummary` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly every: InputMaybe<IndexerAllocationRewardSummaryFilter>;
  /** No related `IndexerAllocationRewardSummary` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly none: InputMaybe<IndexerAllocationRewardSummaryFilter>;
  /** Some related `IndexerAllocationRewardSummary` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly some: InputMaybe<IndexerAllocationRewardSummaryFilter>;
};

/** A filter to be used against many `IndexerAllocationSummary` object types. All fields are combined with a logical ‘and.’ */
export type DeploymentToManyIndexerAllocationSummaryFilter = {
  /** Aggregates across related `IndexerAllocationSummary` match the filter criteria. */
  readonly aggregates: InputMaybe<IndexerAllocationSummaryAggregatesFilter>;
  /** Every related `IndexerAllocationSummary` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly every: InputMaybe<IndexerAllocationSummaryFilter>;
  /** No related `IndexerAllocationSummary` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly none: InputMaybe<IndexerAllocationSummaryFilter>;
  /** Some related `IndexerAllocationSummary` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly some: InputMaybe<IndexerAllocationSummaryFilter>;
};

/** A filter to be used against many `IndexerDeployment` object types. All fields are combined with a logical ‘and.’ */
export type DeploymentToManyIndexerDeploymentFilter = {
  /** Aggregates across related `IndexerDeployment` match the filter criteria. */
  readonly aggregates: InputMaybe<IndexerDeploymentAggregatesFilter>;
  /** Every related `IndexerDeployment` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly every: InputMaybe<IndexerDeploymentFilter>;
  /** No related `IndexerDeployment` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly none: InputMaybe<IndexerDeploymentFilter>;
  /** Some related `IndexerDeployment` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly some: InputMaybe<IndexerDeploymentFilter>;
};

/** A filter to be used against many `IndexerMissedLabor` object types. All fields are combined with a logical ‘and.’ */
export type DeploymentToManyIndexerMissedLaborFilter = {
  /** Aggregates across related `IndexerMissedLabor` match the filter criteria. */
  readonly aggregates: InputMaybe<IndexerMissedLaborAggregatesFilter>;
  /** Every related `IndexerMissedLabor` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly every: InputMaybe<IndexerMissedLaborFilter>;
  /** No related `IndexerMissedLabor` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly none: InputMaybe<IndexerMissedLaborFilter>;
  /** Some related `IndexerMissedLabor` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly some: InputMaybe<IndexerMissedLaborFilter>;
};

/** A filter to be used against many `Offer` object types. All fields are combined with a logical ‘and.’ */
export type DeploymentToManyOfferFilter = {
  /** Aggregates across related `Offer` match the filter criteria. */
  readonly aggregates: InputMaybe<OfferAggregatesFilter>;
  /** Every related `Offer` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly every: InputMaybe<OfferFilter>;
  /** No related `Offer` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly none: InputMaybe<OfferFilter>;
  /** Some related `Offer` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly some: InputMaybe<OfferFilter>;
};

/** A filter to be used against many `Plan` object types. All fields are combined with a logical ‘and.’ */
export type DeploymentToManyPlanFilter = {
  /** Aggregates across related `Plan` match the filter criteria. */
  readonly aggregates: InputMaybe<PlanAggregatesFilter>;
  /** Every related `Plan` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly every: InputMaybe<PlanFilter>;
  /** No related `Plan` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly none: InputMaybe<PlanFilter>;
  /** Some related `Plan` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly some: InputMaybe<PlanFilter>;
};

/** A filter to be used against many `ServiceAgreement` object types. All fields are combined with a logical ‘and.’ */
export type DeploymentToManyServiceAgreementFilter = {
  /** Aggregates across related `ServiceAgreement` match the filter criteria. */
  readonly aggregates: InputMaybe<ServiceAgreementAggregatesFilter>;
  /** Every related `ServiceAgreement` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly every: InputMaybe<ServiceAgreementFilter>;
  /** No related `ServiceAgreement` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly none: InputMaybe<ServiceAgreementFilter>;
  /** Some related `ServiceAgreement` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly some: InputMaybe<ServiceAgreementFilter>;
};

/** A filter to be used against many `StateChannel` object types. All fields are combined with a logical ‘and.’ */
export type DeploymentToManyStateChannelFilter = {
  /** Aggregates across related `StateChannel` match the filter criteria. */
  readonly aggregates: InputMaybe<StateChannelAggregatesFilter>;
  /** Every related `StateChannel` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly every: InputMaybe<StateChannelFilter>;
  /** No related `StateChannel` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly none: InputMaybe<StateChannelFilter>;
  /** Some related `StateChannel` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly some: InputMaybe<StateChannelFilter>;
};

export type DeploymentVariancePopulationAggregateFilter = {
  readonly createdBlock: InputMaybe<BigFloatFilter>;
};

export type DeploymentVariancePopulationAggregates = {
  readonly __typename: 'DeploymentVariancePopulationAggregates';
  /** Population variance of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
};

export type DeploymentVarianceSampleAggregateFilter = {
  readonly createdBlock: InputMaybe<BigFloatFilter>;
};

export type DeploymentVarianceSampleAggregates = {
  readonly __typename: 'DeploymentVarianceSampleAggregates';
  /** Sample variance of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `Deployment` values. */
export type DeploymentsConnection = {
  readonly __typename: 'DeploymentsConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<DeploymentAggregates>;
  /** A list of edges which contains the `Deployment` and cursor to aid in pagination. */
  readonly edges: ReadonlyArray<DeploymentsEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<DeploymentAggregates>>;
  /** A list of `Deployment` objects. */
  readonly nodes: ReadonlyArray<Maybe<Deployment>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Deployment` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Deployment` values. */
export type DeploymentsConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<DeploymentsGroupBy>;
  having: InputMaybe<DeploymentsHavingInput>;
};

/** A `Deployment` edge in the connection. */
export type DeploymentsEdge = {
  readonly __typename: 'DeploymentsEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `Deployment` at the end of the edge. */
  readonly node: Maybe<Deployment>;
};

/** Grouping methods for `Deployment` for usage during aggregation. */
export enum DeploymentsGroupBy {
  CREATED_BLOCK = 'CREATED_BLOCK',
  CREATED_TIMESTAMP = 'CREATED_TIMESTAMP',
  CREATED_TIMESTAMP_TRUNCATED_TO_DAY = 'CREATED_TIMESTAMP_TRUNCATED_TO_DAY',
  CREATED_TIMESTAMP_TRUNCATED_TO_HOUR = 'CREATED_TIMESTAMP_TRUNCATED_TO_HOUR',
  ID = 'ID',
  LAST_EVENT = 'LAST_EVENT',
  METADATA = 'METADATA',
  PROJECT_ID = 'PROJECT_ID',
}

export type DeploymentsHavingAverageInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly createdTimestamp: InputMaybe<HavingDatetimeFilter>;
};

export type DeploymentsHavingDistinctCountInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly createdTimestamp: InputMaybe<HavingDatetimeFilter>;
};

/** Conditions for `Deployment` aggregates. */
export type DeploymentsHavingInput = {
  readonly AND: InputMaybe<ReadonlyArray<DeploymentsHavingInput>>;
  readonly OR: InputMaybe<ReadonlyArray<DeploymentsHavingInput>>;
  readonly average: InputMaybe<DeploymentsHavingAverageInput>;
  readonly distinctCount: InputMaybe<DeploymentsHavingDistinctCountInput>;
  readonly max: InputMaybe<DeploymentsHavingMaxInput>;
  readonly min: InputMaybe<DeploymentsHavingMinInput>;
  readonly stddevPopulation: InputMaybe<DeploymentsHavingStddevPopulationInput>;
  readonly stddevSample: InputMaybe<DeploymentsHavingStddevSampleInput>;
  readonly sum: InputMaybe<DeploymentsHavingSumInput>;
  readonly variancePopulation: InputMaybe<DeploymentsHavingVariancePopulationInput>;
  readonly varianceSample: InputMaybe<DeploymentsHavingVarianceSampleInput>;
};

export type DeploymentsHavingMaxInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly createdTimestamp: InputMaybe<HavingDatetimeFilter>;
};

export type DeploymentsHavingMinInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly createdTimestamp: InputMaybe<HavingDatetimeFilter>;
};

export type DeploymentsHavingStddevPopulationInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly createdTimestamp: InputMaybe<HavingDatetimeFilter>;
};

export type DeploymentsHavingStddevSampleInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly createdTimestamp: InputMaybe<HavingDatetimeFilter>;
};

export type DeploymentsHavingSumInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly createdTimestamp: InputMaybe<HavingDatetimeFilter>;
};

export type DeploymentsHavingVariancePopulationInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly createdTimestamp: InputMaybe<HavingDatetimeFilter>;
};

export type DeploymentsHavingVarianceSampleInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly createdTimestamp: InputMaybe<HavingDatetimeFilter>;
};

/** Methods to use when ordering `Deployment`. */
export enum DeploymentsOrderBy {
  CONSUMER_QUERY_REWARDS_AVERAGE_BLOCK_RANGE_ASC = 'CONSUMER_QUERY_REWARDS_AVERAGE_BLOCK_RANGE_ASC',
  CONSUMER_QUERY_REWARDS_AVERAGE_BLOCK_RANGE_DESC = 'CONSUMER_QUERY_REWARDS_AVERAGE_BLOCK_RANGE_DESC',
  CONSUMER_QUERY_REWARDS_AVERAGE_CONSUMER_ASC = 'CONSUMER_QUERY_REWARDS_AVERAGE_CONSUMER_ASC',
  CONSUMER_QUERY_REWARDS_AVERAGE_CONSUMER_DESC = 'CONSUMER_QUERY_REWARDS_AVERAGE_CONSUMER_DESC',
  CONSUMER_QUERY_REWARDS_AVERAGE_CREATE_AT_ASC = 'CONSUMER_QUERY_REWARDS_AVERAGE_CREATE_AT_ASC',
  CONSUMER_QUERY_REWARDS_AVERAGE_CREATE_AT_DESC = 'CONSUMER_QUERY_REWARDS_AVERAGE_CREATE_AT_DESC',
  CONSUMER_QUERY_REWARDS_AVERAGE_DEPLOYMENT_ID_ASC = 'CONSUMER_QUERY_REWARDS_AVERAGE_DEPLOYMENT_ID_ASC',
  CONSUMER_QUERY_REWARDS_AVERAGE_DEPLOYMENT_ID_DESC = 'CONSUMER_QUERY_REWARDS_AVERAGE_DEPLOYMENT_ID_DESC',
  CONSUMER_QUERY_REWARDS_AVERAGE_ID_ASC = 'CONSUMER_QUERY_REWARDS_AVERAGE_ID_ASC',
  CONSUMER_QUERY_REWARDS_AVERAGE_ID_DESC = 'CONSUMER_QUERY_REWARDS_AVERAGE_ID_DESC',
  CONSUMER_QUERY_REWARDS_AVERAGE_ORDER_ID_ASC = 'CONSUMER_QUERY_REWARDS_AVERAGE_ORDER_ID_ASC',
  CONSUMER_QUERY_REWARDS_AVERAGE_ORDER_ID_DESC = 'CONSUMER_QUERY_REWARDS_AVERAGE_ORDER_ID_DESC',
  CONSUMER_QUERY_REWARDS_AVERAGE_ORDER_TYPE_ASC = 'CONSUMER_QUERY_REWARDS_AVERAGE_ORDER_TYPE_ASC',
  CONSUMER_QUERY_REWARDS_AVERAGE_ORDER_TYPE_DESC = 'CONSUMER_QUERY_REWARDS_AVERAGE_ORDER_TYPE_DESC',
  CONSUMER_QUERY_REWARDS_AVERAGE_PROJECT_ID_ASC = 'CONSUMER_QUERY_REWARDS_AVERAGE_PROJECT_ID_ASC',
  CONSUMER_QUERY_REWARDS_AVERAGE_PROJECT_ID_DESC = 'CONSUMER_QUERY_REWARDS_AVERAGE_PROJECT_ID_DESC',
  CONSUMER_QUERY_REWARDS_AVERAGE_REFUNDED_ASC = 'CONSUMER_QUERY_REWARDS_AVERAGE_REFUNDED_ASC',
  CONSUMER_QUERY_REWARDS_AVERAGE_REFUNDED_DESC = 'CONSUMER_QUERY_REWARDS_AVERAGE_REFUNDED_DESC',
  CONSUMER_QUERY_REWARDS_AVERAGE_SPENT_ASC = 'CONSUMER_QUERY_REWARDS_AVERAGE_SPENT_ASC',
  CONSUMER_QUERY_REWARDS_AVERAGE_SPENT_DESC = 'CONSUMER_QUERY_REWARDS_AVERAGE_SPENT_DESC',
  CONSUMER_QUERY_REWARDS_AVERAGE_UPDATE_AT_ASC = 'CONSUMER_QUERY_REWARDS_AVERAGE_UPDATE_AT_ASC',
  CONSUMER_QUERY_REWARDS_AVERAGE_UPDATE_AT_DESC = 'CONSUMER_QUERY_REWARDS_AVERAGE_UPDATE_AT_DESC',
  CONSUMER_QUERY_REWARDS_BY_DEPLOYMENT_ID__COUNT_ASC = 'CONSUMER_QUERY_REWARDS_BY_DEPLOYMENT_ID__COUNT_ASC',
  CONSUMER_QUERY_REWARDS_BY_DEPLOYMENT_ID__COUNT_DESC = 'CONSUMER_QUERY_REWARDS_BY_DEPLOYMENT_ID__COUNT_DESC',
  CONSUMER_QUERY_REWARDS_COUNT_ASC = 'CONSUMER_QUERY_REWARDS_COUNT_ASC',
  CONSUMER_QUERY_REWARDS_COUNT_DESC = 'CONSUMER_QUERY_REWARDS_COUNT_DESC',
  CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_BLOCK_RANGE_ASC = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_BLOCK_RANGE_DESC = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_CONSUMER_ASC = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_CONSUMER_ASC',
  CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_CONSUMER_DESC = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_CONSUMER_DESC',
  CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_CREATE_AT_ASC = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_CREATE_AT_ASC',
  CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_CREATE_AT_DESC = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_CREATE_AT_DESC',
  CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_DEPLOYMENT_ID_ASC = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_DEPLOYMENT_ID_ASC',
  CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_DEPLOYMENT_ID_DESC = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_DEPLOYMENT_ID_DESC',
  CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_ID_ASC = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_ID_ASC',
  CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_ID_DESC = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_ID_DESC',
  CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_ORDER_ID_ASC = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_ORDER_ID_ASC',
  CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_ORDER_ID_DESC = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_ORDER_ID_DESC',
  CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_ORDER_TYPE_ASC = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_ORDER_TYPE_ASC',
  CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_ORDER_TYPE_DESC = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_ORDER_TYPE_DESC',
  CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_PROJECT_ID_ASC = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_PROJECT_ID_ASC',
  CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_PROJECT_ID_DESC = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_PROJECT_ID_DESC',
  CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_REFUNDED_ASC = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_REFUNDED_ASC',
  CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_REFUNDED_DESC = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_REFUNDED_DESC',
  CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_SPENT_ASC = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_SPENT_ASC',
  CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_SPENT_DESC = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_SPENT_DESC',
  CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_UPDATE_AT_ASC = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_UPDATE_AT_ASC',
  CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_UPDATE_AT_DESC = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_UPDATE_AT_DESC',
  CONSUMER_QUERY_REWARDS_MAX_BLOCK_RANGE_ASC = 'CONSUMER_QUERY_REWARDS_MAX_BLOCK_RANGE_ASC',
  CONSUMER_QUERY_REWARDS_MAX_BLOCK_RANGE_DESC = 'CONSUMER_QUERY_REWARDS_MAX_BLOCK_RANGE_DESC',
  CONSUMER_QUERY_REWARDS_MAX_CONSUMER_ASC = 'CONSUMER_QUERY_REWARDS_MAX_CONSUMER_ASC',
  CONSUMER_QUERY_REWARDS_MAX_CONSUMER_DESC = 'CONSUMER_QUERY_REWARDS_MAX_CONSUMER_DESC',
  CONSUMER_QUERY_REWARDS_MAX_CREATE_AT_ASC = 'CONSUMER_QUERY_REWARDS_MAX_CREATE_AT_ASC',
  CONSUMER_QUERY_REWARDS_MAX_CREATE_AT_DESC = 'CONSUMER_QUERY_REWARDS_MAX_CREATE_AT_DESC',
  CONSUMER_QUERY_REWARDS_MAX_DEPLOYMENT_ID_ASC = 'CONSUMER_QUERY_REWARDS_MAX_DEPLOYMENT_ID_ASC',
  CONSUMER_QUERY_REWARDS_MAX_DEPLOYMENT_ID_DESC = 'CONSUMER_QUERY_REWARDS_MAX_DEPLOYMENT_ID_DESC',
  CONSUMER_QUERY_REWARDS_MAX_ID_ASC = 'CONSUMER_QUERY_REWARDS_MAX_ID_ASC',
  CONSUMER_QUERY_REWARDS_MAX_ID_DESC = 'CONSUMER_QUERY_REWARDS_MAX_ID_DESC',
  CONSUMER_QUERY_REWARDS_MAX_ORDER_ID_ASC = 'CONSUMER_QUERY_REWARDS_MAX_ORDER_ID_ASC',
  CONSUMER_QUERY_REWARDS_MAX_ORDER_ID_DESC = 'CONSUMER_QUERY_REWARDS_MAX_ORDER_ID_DESC',
  CONSUMER_QUERY_REWARDS_MAX_ORDER_TYPE_ASC = 'CONSUMER_QUERY_REWARDS_MAX_ORDER_TYPE_ASC',
  CONSUMER_QUERY_REWARDS_MAX_ORDER_TYPE_DESC = 'CONSUMER_QUERY_REWARDS_MAX_ORDER_TYPE_DESC',
  CONSUMER_QUERY_REWARDS_MAX_PROJECT_ID_ASC = 'CONSUMER_QUERY_REWARDS_MAX_PROJECT_ID_ASC',
  CONSUMER_QUERY_REWARDS_MAX_PROJECT_ID_DESC = 'CONSUMER_QUERY_REWARDS_MAX_PROJECT_ID_DESC',
  CONSUMER_QUERY_REWARDS_MAX_REFUNDED_ASC = 'CONSUMER_QUERY_REWARDS_MAX_REFUNDED_ASC',
  CONSUMER_QUERY_REWARDS_MAX_REFUNDED_DESC = 'CONSUMER_QUERY_REWARDS_MAX_REFUNDED_DESC',
  CONSUMER_QUERY_REWARDS_MAX_SPENT_ASC = 'CONSUMER_QUERY_REWARDS_MAX_SPENT_ASC',
  CONSUMER_QUERY_REWARDS_MAX_SPENT_DESC = 'CONSUMER_QUERY_REWARDS_MAX_SPENT_DESC',
  CONSUMER_QUERY_REWARDS_MAX_UPDATE_AT_ASC = 'CONSUMER_QUERY_REWARDS_MAX_UPDATE_AT_ASC',
  CONSUMER_QUERY_REWARDS_MAX_UPDATE_AT_DESC = 'CONSUMER_QUERY_REWARDS_MAX_UPDATE_AT_DESC',
  CONSUMER_QUERY_REWARDS_MIN_BLOCK_RANGE_ASC = 'CONSUMER_QUERY_REWARDS_MIN_BLOCK_RANGE_ASC',
  CONSUMER_QUERY_REWARDS_MIN_BLOCK_RANGE_DESC = 'CONSUMER_QUERY_REWARDS_MIN_BLOCK_RANGE_DESC',
  CONSUMER_QUERY_REWARDS_MIN_CONSUMER_ASC = 'CONSUMER_QUERY_REWARDS_MIN_CONSUMER_ASC',
  CONSUMER_QUERY_REWARDS_MIN_CONSUMER_DESC = 'CONSUMER_QUERY_REWARDS_MIN_CONSUMER_DESC',
  CONSUMER_QUERY_REWARDS_MIN_CREATE_AT_ASC = 'CONSUMER_QUERY_REWARDS_MIN_CREATE_AT_ASC',
  CONSUMER_QUERY_REWARDS_MIN_CREATE_AT_DESC = 'CONSUMER_QUERY_REWARDS_MIN_CREATE_AT_DESC',
  CONSUMER_QUERY_REWARDS_MIN_DEPLOYMENT_ID_ASC = 'CONSUMER_QUERY_REWARDS_MIN_DEPLOYMENT_ID_ASC',
  CONSUMER_QUERY_REWARDS_MIN_DEPLOYMENT_ID_DESC = 'CONSUMER_QUERY_REWARDS_MIN_DEPLOYMENT_ID_DESC',
  CONSUMER_QUERY_REWARDS_MIN_ID_ASC = 'CONSUMER_QUERY_REWARDS_MIN_ID_ASC',
  CONSUMER_QUERY_REWARDS_MIN_ID_DESC = 'CONSUMER_QUERY_REWARDS_MIN_ID_DESC',
  CONSUMER_QUERY_REWARDS_MIN_ORDER_ID_ASC = 'CONSUMER_QUERY_REWARDS_MIN_ORDER_ID_ASC',
  CONSUMER_QUERY_REWARDS_MIN_ORDER_ID_DESC = 'CONSUMER_QUERY_REWARDS_MIN_ORDER_ID_DESC',
  CONSUMER_QUERY_REWARDS_MIN_ORDER_TYPE_ASC = 'CONSUMER_QUERY_REWARDS_MIN_ORDER_TYPE_ASC',
  CONSUMER_QUERY_REWARDS_MIN_ORDER_TYPE_DESC = 'CONSUMER_QUERY_REWARDS_MIN_ORDER_TYPE_DESC',
  CONSUMER_QUERY_REWARDS_MIN_PROJECT_ID_ASC = 'CONSUMER_QUERY_REWARDS_MIN_PROJECT_ID_ASC',
  CONSUMER_QUERY_REWARDS_MIN_PROJECT_ID_DESC = 'CONSUMER_QUERY_REWARDS_MIN_PROJECT_ID_DESC',
  CONSUMER_QUERY_REWARDS_MIN_REFUNDED_ASC = 'CONSUMER_QUERY_REWARDS_MIN_REFUNDED_ASC',
  CONSUMER_QUERY_REWARDS_MIN_REFUNDED_DESC = 'CONSUMER_QUERY_REWARDS_MIN_REFUNDED_DESC',
  CONSUMER_QUERY_REWARDS_MIN_SPENT_ASC = 'CONSUMER_QUERY_REWARDS_MIN_SPENT_ASC',
  CONSUMER_QUERY_REWARDS_MIN_SPENT_DESC = 'CONSUMER_QUERY_REWARDS_MIN_SPENT_DESC',
  CONSUMER_QUERY_REWARDS_MIN_UPDATE_AT_ASC = 'CONSUMER_QUERY_REWARDS_MIN_UPDATE_AT_ASC',
  CONSUMER_QUERY_REWARDS_MIN_UPDATE_AT_DESC = 'CONSUMER_QUERY_REWARDS_MIN_UPDATE_AT_DESC',
  CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_BLOCK_RANGE_ASC = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_BLOCK_RANGE_DESC = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_CONSUMER_ASC = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_CONSUMER_ASC',
  CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_CONSUMER_DESC = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_CONSUMER_DESC',
  CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_CREATE_AT_ASC = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_CREATE_AT_ASC',
  CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_CREATE_AT_DESC = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_CREATE_AT_DESC',
  CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_DEPLOYMENT_ID_ASC = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_DEPLOYMENT_ID_ASC',
  CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_DEPLOYMENT_ID_DESC = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_DEPLOYMENT_ID_DESC',
  CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_ID_ASC = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_ID_ASC',
  CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_ID_DESC = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_ID_DESC',
  CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_ORDER_ID_ASC = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_ORDER_ID_ASC',
  CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_ORDER_ID_DESC = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_ORDER_ID_DESC',
  CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_ORDER_TYPE_ASC = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_ORDER_TYPE_ASC',
  CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_ORDER_TYPE_DESC = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_ORDER_TYPE_DESC',
  CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_PROJECT_ID_ASC = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_PROJECT_ID_ASC',
  CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_PROJECT_ID_DESC = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_PROJECT_ID_DESC',
  CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_REFUNDED_ASC = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_REFUNDED_ASC',
  CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_REFUNDED_DESC = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_REFUNDED_DESC',
  CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_SPENT_ASC = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_SPENT_ASC',
  CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_SPENT_DESC = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_SPENT_DESC',
  CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_UPDATE_AT_ASC = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_UPDATE_AT_ASC',
  CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_UPDATE_AT_DESC = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_UPDATE_AT_DESC',
  CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_BLOCK_RANGE_ASC = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_BLOCK_RANGE_DESC = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_CONSUMER_ASC = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_CONSUMER_ASC',
  CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_CONSUMER_DESC = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_CONSUMER_DESC',
  CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_CREATE_AT_ASC = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_CREATE_AT_ASC',
  CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_CREATE_AT_DESC = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_CREATE_AT_DESC',
  CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC',
  CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC',
  CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_ID_ASC = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_ID_ASC',
  CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_ID_DESC = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_ID_DESC',
  CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_ORDER_ID_ASC = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_ORDER_ID_ASC',
  CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_ORDER_ID_DESC = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_ORDER_ID_DESC',
  CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_ORDER_TYPE_ASC = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_ORDER_TYPE_ASC',
  CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_ORDER_TYPE_DESC = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_ORDER_TYPE_DESC',
  CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_PROJECT_ID_ASC = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_PROJECT_ID_ASC',
  CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_PROJECT_ID_DESC = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_PROJECT_ID_DESC',
  CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_REFUNDED_ASC = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_REFUNDED_ASC',
  CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_REFUNDED_DESC = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_REFUNDED_DESC',
  CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_SPENT_ASC = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_SPENT_ASC',
  CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_SPENT_DESC = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_SPENT_DESC',
  CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_UPDATE_AT_ASC = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_UPDATE_AT_ASC',
  CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_UPDATE_AT_DESC = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_UPDATE_AT_DESC',
  CONSUMER_QUERY_REWARDS_SUM_BLOCK_RANGE_ASC = 'CONSUMER_QUERY_REWARDS_SUM_BLOCK_RANGE_ASC',
  CONSUMER_QUERY_REWARDS_SUM_BLOCK_RANGE_DESC = 'CONSUMER_QUERY_REWARDS_SUM_BLOCK_RANGE_DESC',
  CONSUMER_QUERY_REWARDS_SUM_CONSUMER_ASC = 'CONSUMER_QUERY_REWARDS_SUM_CONSUMER_ASC',
  CONSUMER_QUERY_REWARDS_SUM_CONSUMER_DESC = 'CONSUMER_QUERY_REWARDS_SUM_CONSUMER_DESC',
  CONSUMER_QUERY_REWARDS_SUM_CREATE_AT_ASC = 'CONSUMER_QUERY_REWARDS_SUM_CREATE_AT_ASC',
  CONSUMER_QUERY_REWARDS_SUM_CREATE_AT_DESC = 'CONSUMER_QUERY_REWARDS_SUM_CREATE_AT_DESC',
  CONSUMER_QUERY_REWARDS_SUM_DEPLOYMENT_ID_ASC = 'CONSUMER_QUERY_REWARDS_SUM_DEPLOYMENT_ID_ASC',
  CONSUMER_QUERY_REWARDS_SUM_DEPLOYMENT_ID_DESC = 'CONSUMER_QUERY_REWARDS_SUM_DEPLOYMENT_ID_DESC',
  CONSUMER_QUERY_REWARDS_SUM_ID_ASC = 'CONSUMER_QUERY_REWARDS_SUM_ID_ASC',
  CONSUMER_QUERY_REWARDS_SUM_ID_DESC = 'CONSUMER_QUERY_REWARDS_SUM_ID_DESC',
  CONSUMER_QUERY_REWARDS_SUM_ORDER_ID_ASC = 'CONSUMER_QUERY_REWARDS_SUM_ORDER_ID_ASC',
  CONSUMER_QUERY_REWARDS_SUM_ORDER_ID_DESC = 'CONSUMER_QUERY_REWARDS_SUM_ORDER_ID_DESC',
  CONSUMER_QUERY_REWARDS_SUM_ORDER_TYPE_ASC = 'CONSUMER_QUERY_REWARDS_SUM_ORDER_TYPE_ASC',
  CONSUMER_QUERY_REWARDS_SUM_ORDER_TYPE_DESC = 'CONSUMER_QUERY_REWARDS_SUM_ORDER_TYPE_DESC',
  CONSUMER_QUERY_REWARDS_SUM_PROJECT_ID_ASC = 'CONSUMER_QUERY_REWARDS_SUM_PROJECT_ID_ASC',
  CONSUMER_QUERY_REWARDS_SUM_PROJECT_ID_DESC = 'CONSUMER_QUERY_REWARDS_SUM_PROJECT_ID_DESC',
  CONSUMER_QUERY_REWARDS_SUM_REFUNDED_ASC = 'CONSUMER_QUERY_REWARDS_SUM_REFUNDED_ASC',
  CONSUMER_QUERY_REWARDS_SUM_REFUNDED_DESC = 'CONSUMER_QUERY_REWARDS_SUM_REFUNDED_DESC',
  CONSUMER_QUERY_REWARDS_SUM_SPENT_ASC = 'CONSUMER_QUERY_REWARDS_SUM_SPENT_ASC',
  CONSUMER_QUERY_REWARDS_SUM_SPENT_DESC = 'CONSUMER_QUERY_REWARDS_SUM_SPENT_DESC',
  CONSUMER_QUERY_REWARDS_SUM_UPDATE_AT_ASC = 'CONSUMER_QUERY_REWARDS_SUM_UPDATE_AT_ASC',
  CONSUMER_QUERY_REWARDS_SUM_UPDATE_AT_DESC = 'CONSUMER_QUERY_REWARDS_SUM_UPDATE_AT_DESC',
  CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_BLOCK_RANGE_ASC = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_BLOCK_RANGE_DESC = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_CONSUMER_ASC = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_CONSUMER_ASC',
  CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_CONSUMER_DESC = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_CONSUMER_DESC',
  CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_CREATE_AT_ASC = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_CREATE_AT_ASC',
  CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_CREATE_AT_DESC = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_CREATE_AT_DESC',
  CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC',
  CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC',
  CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_ID_ASC = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_ID_ASC',
  CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_ID_DESC = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_ID_DESC',
  CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_ORDER_ID_ASC = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_ORDER_ID_ASC',
  CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_ORDER_ID_DESC = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_ORDER_ID_DESC',
  CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_ORDER_TYPE_ASC = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_ORDER_TYPE_ASC',
  CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_ORDER_TYPE_DESC = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_ORDER_TYPE_DESC',
  CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_PROJECT_ID_ASC = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_PROJECT_ID_ASC',
  CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_PROJECT_ID_DESC = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_PROJECT_ID_DESC',
  CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_REFUNDED_ASC = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_REFUNDED_ASC',
  CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_REFUNDED_DESC = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_REFUNDED_DESC',
  CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_SPENT_ASC = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_SPENT_ASC',
  CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_SPENT_DESC = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_SPENT_DESC',
  CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_UPDATE_AT_ASC = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_UPDATE_AT_ASC',
  CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_UPDATE_AT_DESC = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_UPDATE_AT_DESC',
  CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_CONSUMER_ASC = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_CONSUMER_ASC',
  CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_CONSUMER_DESC = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_CONSUMER_DESC',
  CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_CREATE_AT_ASC = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_CREATE_AT_ASC',
  CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_CREATE_AT_DESC = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_CREATE_AT_DESC',
  CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC',
  CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC',
  CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_ID_ASC = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_ID_ASC',
  CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_ID_DESC = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_ID_DESC',
  CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_ORDER_ID_ASC = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_ORDER_ID_ASC',
  CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_ORDER_ID_DESC = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_ORDER_ID_DESC',
  CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_ORDER_TYPE_ASC = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_ORDER_TYPE_ASC',
  CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_ORDER_TYPE_DESC = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_ORDER_TYPE_DESC',
  CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_PROJECT_ID_ASC = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_PROJECT_ID_ASC',
  CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_PROJECT_ID_DESC = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_PROJECT_ID_DESC',
  CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_REFUNDED_ASC = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_REFUNDED_ASC',
  CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_REFUNDED_DESC = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_REFUNDED_DESC',
  CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_SPENT_ASC = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_SPENT_ASC',
  CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_SPENT_DESC = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_SPENT_DESC',
  CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_UPDATE_AT_ASC = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_UPDATE_AT_ASC',
  CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_UPDATE_AT_DESC = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_UPDATE_AT_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_BLOCK_RANGE_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_BLOCK_RANGE_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_BLOCK_RANGE_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_BLOCK_RANGE_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_CONSUMER_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_CONSUMER_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_CONSUMER_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_CONSUMER_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_CREATE_AT_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_CREATE_AT_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_CREATE_AT_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_CREATE_AT_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_DEPLOYMENT_ID_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_DEPLOYMENT_ID_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_DEPLOYMENT_ID_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_DEPLOYMENT_ID_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_ID_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_ID_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_ID_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_ID_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_ORDER_TYPE_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_ORDER_TYPE_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_ORDER_TYPE_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_ORDER_TYPE_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_PROJECT_ID_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_PROJECT_ID_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_PROJECT_ID_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_PROJECT_ID_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_TOTAL_REFUNDED_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_TOTAL_REFUNDED_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_TOTAL_REFUNDED_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_TOTAL_REFUNDED_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_TOTAL_SPENT_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_TOTAL_SPENT_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_TOTAL_SPENT_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_TOTAL_SPENT_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_UPDATE_AT_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_UPDATE_AT_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_UPDATE_AT_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_UPDATE_AT_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_BY_DEPLOYMENT_ID__COUNT_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_BY_DEPLOYMENT_ID__COUNT_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_BY_DEPLOYMENT_ID__COUNT_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_BY_DEPLOYMENT_ID__COUNT_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_COUNT_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_COUNT_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_COUNT_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_COUNT_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_BLOCK_RANGE_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_BLOCK_RANGE_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_CONSUMER_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_CONSUMER_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_CONSUMER_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_CONSUMER_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_CREATE_AT_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_CREATE_AT_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_CREATE_AT_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_CREATE_AT_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_DEPLOYMENT_ID_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_DEPLOYMENT_ID_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_DEPLOYMENT_ID_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_DEPLOYMENT_ID_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_ID_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_ID_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_ID_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_ID_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_ORDER_TYPE_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_ORDER_TYPE_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_ORDER_TYPE_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_ORDER_TYPE_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_PROJECT_ID_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_PROJECT_ID_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_PROJECT_ID_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_PROJECT_ID_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_TOTAL_REFUNDED_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_TOTAL_REFUNDED_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_TOTAL_REFUNDED_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_TOTAL_REFUNDED_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_TOTAL_SPENT_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_TOTAL_SPENT_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_TOTAL_SPENT_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_TOTAL_SPENT_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_UPDATE_AT_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_UPDATE_AT_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_UPDATE_AT_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_UPDATE_AT_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MAX_BLOCK_RANGE_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_BLOCK_RANGE_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MAX_BLOCK_RANGE_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_BLOCK_RANGE_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MAX_CONSUMER_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_CONSUMER_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MAX_CONSUMER_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_CONSUMER_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MAX_CREATE_AT_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_CREATE_AT_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MAX_CREATE_AT_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_CREATE_AT_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MAX_DEPLOYMENT_ID_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_DEPLOYMENT_ID_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MAX_DEPLOYMENT_ID_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_DEPLOYMENT_ID_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MAX_ID_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_ID_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MAX_ID_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_ID_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MAX_ORDER_TYPE_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_ORDER_TYPE_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MAX_ORDER_TYPE_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_ORDER_TYPE_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MAX_PROJECT_ID_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_PROJECT_ID_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MAX_PROJECT_ID_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_PROJECT_ID_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MAX_TOTAL_REFUNDED_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_TOTAL_REFUNDED_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MAX_TOTAL_REFUNDED_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_TOTAL_REFUNDED_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MAX_TOTAL_SPENT_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_TOTAL_SPENT_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MAX_TOTAL_SPENT_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_TOTAL_SPENT_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MAX_UPDATE_AT_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_UPDATE_AT_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MAX_UPDATE_AT_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_UPDATE_AT_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MIN_BLOCK_RANGE_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_BLOCK_RANGE_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MIN_BLOCK_RANGE_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_BLOCK_RANGE_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MIN_CONSUMER_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_CONSUMER_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MIN_CONSUMER_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_CONSUMER_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MIN_CREATE_AT_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_CREATE_AT_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MIN_CREATE_AT_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_CREATE_AT_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MIN_DEPLOYMENT_ID_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_DEPLOYMENT_ID_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MIN_DEPLOYMENT_ID_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_DEPLOYMENT_ID_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MIN_ID_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_ID_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MIN_ID_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_ID_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MIN_ORDER_TYPE_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_ORDER_TYPE_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MIN_ORDER_TYPE_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_ORDER_TYPE_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MIN_PROJECT_ID_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_PROJECT_ID_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MIN_PROJECT_ID_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_PROJECT_ID_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MIN_TOTAL_REFUNDED_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_TOTAL_REFUNDED_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MIN_TOTAL_REFUNDED_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_TOTAL_REFUNDED_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MIN_TOTAL_SPENT_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_TOTAL_SPENT_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MIN_TOTAL_SPENT_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_TOTAL_SPENT_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MIN_UPDATE_AT_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_UPDATE_AT_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MIN_UPDATE_AT_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_UPDATE_AT_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_BLOCK_RANGE_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_BLOCK_RANGE_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_CONSUMER_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_CONSUMER_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_CONSUMER_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_CONSUMER_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_CREATE_AT_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_CREATE_AT_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_CREATE_AT_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_CREATE_AT_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_DEPLOYMENT_ID_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_DEPLOYMENT_ID_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_DEPLOYMENT_ID_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_DEPLOYMENT_ID_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_ID_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_ID_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_ID_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_ID_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_ORDER_TYPE_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_ORDER_TYPE_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_ORDER_TYPE_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_ORDER_TYPE_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_PROJECT_ID_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_PROJECT_ID_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_PROJECT_ID_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_PROJECT_ID_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_TOTAL_REFUNDED_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_TOTAL_REFUNDED_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_TOTAL_REFUNDED_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_TOTAL_REFUNDED_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_TOTAL_SPENT_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_TOTAL_SPENT_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_TOTAL_SPENT_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_TOTAL_SPENT_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_UPDATE_AT_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_UPDATE_AT_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_UPDATE_AT_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_UPDATE_AT_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_BLOCK_RANGE_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_BLOCK_RANGE_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_CONSUMER_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_CONSUMER_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_CONSUMER_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_CONSUMER_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_CREATE_AT_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_CREATE_AT_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_CREATE_AT_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_CREATE_AT_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_ID_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_ID_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_ID_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_ID_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_ORDER_TYPE_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_ORDER_TYPE_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_ORDER_TYPE_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_ORDER_TYPE_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_PROJECT_ID_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_PROJECT_ID_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_PROJECT_ID_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_PROJECT_ID_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_TOTAL_REFUNDED_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_TOTAL_REFUNDED_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_TOTAL_REFUNDED_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_TOTAL_REFUNDED_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_TOTAL_SPENT_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_TOTAL_SPENT_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_TOTAL_SPENT_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_TOTAL_SPENT_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_UPDATE_AT_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_UPDATE_AT_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_UPDATE_AT_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_UPDATE_AT_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_SUM_BLOCK_RANGE_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_BLOCK_RANGE_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_SUM_BLOCK_RANGE_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_BLOCK_RANGE_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_SUM_CONSUMER_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_CONSUMER_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_SUM_CONSUMER_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_CONSUMER_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_SUM_CREATE_AT_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_CREATE_AT_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_SUM_CREATE_AT_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_CREATE_AT_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_SUM_DEPLOYMENT_ID_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_DEPLOYMENT_ID_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_SUM_DEPLOYMENT_ID_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_DEPLOYMENT_ID_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_SUM_ID_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_ID_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_SUM_ID_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_ID_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_SUM_ORDER_TYPE_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_ORDER_TYPE_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_SUM_ORDER_TYPE_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_ORDER_TYPE_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_SUM_PROJECT_ID_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_PROJECT_ID_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_SUM_PROJECT_ID_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_PROJECT_ID_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_SUM_TOTAL_REFUNDED_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_TOTAL_REFUNDED_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_SUM_TOTAL_REFUNDED_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_TOTAL_REFUNDED_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_SUM_TOTAL_SPENT_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_TOTAL_SPENT_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_SUM_TOTAL_SPENT_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_TOTAL_SPENT_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_SUM_UPDATE_AT_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_UPDATE_AT_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_SUM_UPDATE_AT_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_UPDATE_AT_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_BLOCK_RANGE_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_BLOCK_RANGE_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_CONSUMER_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_CONSUMER_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_CONSUMER_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_CONSUMER_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_CREATE_AT_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_CREATE_AT_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_CREATE_AT_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_CREATE_AT_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_ID_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_ID_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_ID_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_ID_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_ORDER_TYPE_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_ORDER_TYPE_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_ORDER_TYPE_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_ORDER_TYPE_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_PROJECT_ID_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_PROJECT_ID_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_PROJECT_ID_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_PROJECT_ID_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_TOTAL_REFUNDED_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_TOTAL_REFUNDED_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_TOTAL_REFUNDED_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_TOTAL_REFUNDED_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_TOTAL_SPENT_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_TOTAL_SPENT_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_TOTAL_SPENT_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_TOTAL_SPENT_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_UPDATE_AT_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_UPDATE_AT_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_UPDATE_AT_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_UPDATE_AT_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_CONSUMER_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_CONSUMER_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_CONSUMER_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_CONSUMER_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_CREATE_AT_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_CREATE_AT_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_CREATE_AT_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_CREATE_AT_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_ID_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_ID_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_ID_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_ID_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_ORDER_TYPE_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_ORDER_TYPE_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_ORDER_TYPE_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_ORDER_TYPE_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_PROJECT_ID_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_PROJECT_ID_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_PROJECT_ID_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_PROJECT_ID_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_TOTAL_REFUNDED_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_TOTAL_REFUNDED_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_TOTAL_REFUNDED_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_TOTAL_REFUNDED_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_TOTAL_SPENT_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_TOTAL_SPENT_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_TOTAL_SPENT_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_TOTAL_SPENT_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_UPDATE_AT_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_UPDATE_AT_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_UPDATE_AT_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_UPDATE_AT_DESC',
  CREATED_BLOCK_ASC = 'CREATED_BLOCK_ASC',
  CREATED_BLOCK_DESC = 'CREATED_BLOCK_DESC',
  CREATED_TIMESTAMP_ASC = 'CREATED_TIMESTAMP_ASC',
  CREATED_TIMESTAMP_DESC = 'CREATED_TIMESTAMP_DESC',
  DEPLOYMENT_BOOSTERS_AVERAGE_AMOUNT_ADDED_ASC = 'DEPLOYMENT_BOOSTERS_AVERAGE_AMOUNT_ADDED_ASC',
  DEPLOYMENT_BOOSTERS_AVERAGE_AMOUNT_ADDED_DESC = 'DEPLOYMENT_BOOSTERS_AVERAGE_AMOUNT_ADDED_DESC',
  DEPLOYMENT_BOOSTERS_AVERAGE_AMOUNT_REMOVED_ASC = 'DEPLOYMENT_BOOSTERS_AVERAGE_AMOUNT_REMOVED_ASC',
  DEPLOYMENT_BOOSTERS_AVERAGE_AMOUNT_REMOVED_DESC = 'DEPLOYMENT_BOOSTERS_AVERAGE_AMOUNT_REMOVED_DESC',
  DEPLOYMENT_BOOSTERS_AVERAGE_BLOCK_RANGE_ASC = 'DEPLOYMENT_BOOSTERS_AVERAGE_BLOCK_RANGE_ASC',
  DEPLOYMENT_BOOSTERS_AVERAGE_BLOCK_RANGE_DESC = 'DEPLOYMENT_BOOSTERS_AVERAGE_BLOCK_RANGE_DESC',
  DEPLOYMENT_BOOSTERS_AVERAGE_CONSUMER_ASC = 'DEPLOYMENT_BOOSTERS_AVERAGE_CONSUMER_ASC',
  DEPLOYMENT_BOOSTERS_AVERAGE_CONSUMER_DESC = 'DEPLOYMENT_BOOSTERS_AVERAGE_CONSUMER_DESC',
  DEPLOYMENT_BOOSTERS_AVERAGE_CREATE_AT_ASC = 'DEPLOYMENT_BOOSTERS_AVERAGE_CREATE_AT_ASC',
  DEPLOYMENT_BOOSTERS_AVERAGE_CREATE_AT_DESC = 'DEPLOYMENT_BOOSTERS_AVERAGE_CREATE_AT_DESC',
  DEPLOYMENT_BOOSTERS_AVERAGE_DEPLOYMENT_ID_ASC = 'DEPLOYMENT_BOOSTERS_AVERAGE_DEPLOYMENT_ID_ASC',
  DEPLOYMENT_BOOSTERS_AVERAGE_DEPLOYMENT_ID_DESC = 'DEPLOYMENT_BOOSTERS_AVERAGE_DEPLOYMENT_ID_DESC',
  DEPLOYMENT_BOOSTERS_AVERAGE_ERA_IDX_ASC = 'DEPLOYMENT_BOOSTERS_AVERAGE_ERA_IDX_ASC',
  DEPLOYMENT_BOOSTERS_AVERAGE_ERA_IDX_DESC = 'DEPLOYMENT_BOOSTERS_AVERAGE_ERA_IDX_DESC',
  DEPLOYMENT_BOOSTERS_AVERAGE_ID_ASC = 'DEPLOYMENT_BOOSTERS_AVERAGE_ID_ASC',
  DEPLOYMENT_BOOSTERS_AVERAGE_ID_DESC = 'DEPLOYMENT_BOOSTERS_AVERAGE_ID_DESC',
  DEPLOYMENT_BOOSTERS_AVERAGE_PROJECT_ID_ASC = 'DEPLOYMENT_BOOSTERS_AVERAGE_PROJECT_ID_ASC',
  DEPLOYMENT_BOOSTERS_AVERAGE_PROJECT_ID_DESC = 'DEPLOYMENT_BOOSTERS_AVERAGE_PROJECT_ID_DESC',
  DEPLOYMENT_BOOSTERS_BY_DEPLOYMENT_ID__COUNT_ASC = 'DEPLOYMENT_BOOSTERS_BY_DEPLOYMENT_ID__COUNT_ASC',
  DEPLOYMENT_BOOSTERS_BY_DEPLOYMENT_ID__COUNT_DESC = 'DEPLOYMENT_BOOSTERS_BY_DEPLOYMENT_ID__COUNT_DESC',
  DEPLOYMENT_BOOSTERS_COUNT_ASC = 'DEPLOYMENT_BOOSTERS_COUNT_ASC',
  DEPLOYMENT_BOOSTERS_COUNT_DESC = 'DEPLOYMENT_BOOSTERS_COUNT_DESC',
  DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_AMOUNT_ADDED_ASC = 'DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_AMOUNT_ADDED_ASC',
  DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_AMOUNT_ADDED_DESC = 'DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_AMOUNT_ADDED_DESC',
  DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_AMOUNT_REMOVED_ASC = 'DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_AMOUNT_REMOVED_ASC',
  DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_AMOUNT_REMOVED_DESC = 'DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_AMOUNT_REMOVED_DESC',
  DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_BLOCK_RANGE_ASC = 'DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_BLOCK_RANGE_DESC = 'DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_CONSUMER_ASC = 'DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_CONSUMER_ASC',
  DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_CONSUMER_DESC = 'DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_CONSUMER_DESC',
  DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_CREATE_AT_ASC = 'DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_CREATE_AT_ASC',
  DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_CREATE_AT_DESC = 'DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_CREATE_AT_DESC',
  DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_DEPLOYMENT_ID_ASC = 'DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_DEPLOYMENT_ID_ASC',
  DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_DEPLOYMENT_ID_DESC = 'DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_DEPLOYMENT_ID_DESC',
  DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_ERA_IDX_ASC = 'DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_ERA_IDX_ASC',
  DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_ERA_IDX_DESC = 'DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_ERA_IDX_DESC',
  DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_ID_ASC = 'DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_ID_ASC',
  DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_ID_DESC = 'DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_ID_DESC',
  DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_PROJECT_ID_ASC = 'DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_PROJECT_ID_ASC',
  DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_PROJECT_ID_DESC = 'DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_PROJECT_ID_DESC',
  DEPLOYMENT_BOOSTERS_MAX_AMOUNT_ADDED_ASC = 'DEPLOYMENT_BOOSTERS_MAX_AMOUNT_ADDED_ASC',
  DEPLOYMENT_BOOSTERS_MAX_AMOUNT_ADDED_DESC = 'DEPLOYMENT_BOOSTERS_MAX_AMOUNT_ADDED_DESC',
  DEPLOYMENT_BOOSTERS_MAX_AMOUNT_REMOVED_ASC = 'DEPLOYMENT_BOOSTERS_MAX_AMOUNT_REMOVED_ASC',
  DEPLOYMENT_BOOSTERS_MAX_AMOUNT_REMOVED_DESC = 'DEPLOYMENT_BOOSTERS_MAX_AMOUNT_REMOVED_DESC',
  DEPLOYMENT_BOOSTERS_MAX_BLOCK_RANGE_ASC = 'DEPLOYMENT_BOOSTERS_MAX_BLOCK_RANGE_ASC',
  DEPLOYMENT_BOOSTERS_MAX_BLOCK_RANGE_DESC = 'DEPLOYMENT_BOOSTERS_MAX_BLOCK_RANGE_DESC',
  DEPLOYMENT_BOOSTERS_MAX_CONSUMER_ASC = 'DEPLOYMENT_BOOSTERS_MAX_CONSUMER_ASC',
  DEPLOYMENT_BOOSTERS_MAX_CONSUMER_DESC = 'DEPLOYMENT_BOOSTERS_MAX_CONSUMER_DESC',
  DEPLOYMENT_BOOSTERS_MAX_CREATE_AT_ASC = 'DEPLOYMENT_BOOSTERS_MAX_CREATE_AT_ASC',
  DEPLOYMENT_BOOSTERS_MAX_CREATE_AT_DESC = 'DEPLOYMENT_BOOSTERS_MAX_CREATE_AT_DESC',
  DEPLOYMENT_BOOSTERS_MAX_DEPLOYMENT_ID_ASC = 'DEPLOYMENT_BOOSTERS_MAX_DEPLOYMENT_ID_ASC',
  DEPLOYMENT_BOOSTERS_MAX_DEPLOYMENT_ID_DESC = 'DEPLOYMENT_BOOSTERS_MAX_DEPLOYMENT_ID_DESC',
  DEPLOYMENT_BOOSTERS_MAX_ERA_IDX_ASC = 'DEPLOYMENT_BOOSTERS_MAX_ERA_IDX_ASC',
  DEPLOYMENT_BOOSTERS_MAX_ERA_IDX_DESC = 'DEPLOYMENT_BOOSTERS_MAX_ERA_IDX_DESC',
  DEPLOYMENT_BOOSTERS_MAX_ID_ASC = 'DEPLOYMENT_BOOSTERS_MAX_ID_ASC',
  DEPLOYMENT_BOOSTERS_MAX_ID_DESC = 'DEPLOYMENT_BOOSTERS_MAX_ID_DESC',
  DEPLOYMENT_BOOSTERS_MAX_PROJECT_ID_ASC = 'DEPLOYMENT_BOOSTERS_MAX_PROJECT_ID_ASC',
  DEPLOYMENT_BOOSTERS_MAX_PROJECT_ID_DESC = 'DEPLOYMENT_BOOSTERS_MAX_PROJECT_ID_DESC',
  DEPLOYMENT_BOOSTERS_MIN_AMOUNT_ADDED_ASC = 'DEPLOYMENT_BOOSTERS_MIN_AMOUNT_ADDED_ASC',
  DEPLOYMENT_BOOSTERS_MIN_AMOUNT_ADDED_DESC = 'DEPLOYMENT_BOOSTERS_MIN_AMOUNT_ADDED_DESC',
  DEPLOYMENT_BOOSTERS_MIN_AMOUNT_REMOVED_ASC = 'DEPLOYMENT_BOOSTERS_MIN_AMOUNT_REMOVED_ASC',
  DEPLOYMENT_BOOSTERS_MIN_AMOUNT_REMOVED_DESC = 'DEPLOYMENT_BOOSTERS_MIN_AMOUNT_REMOVED_DESC',
  DEPLOYMENT_BOOSTERS_MIN_BLOCK_RANGE_ASC = 'DEPLOYMENT_BOOSTERS_MIN_BLOCK_RANGE_ASC',
  DEPLOYMENT_BOOSTERS_MIN_BLOCK_RANGE_DESC = 'DEPLOYMENT_BOOSTERS_MIN_BLOCK_RANGE_DESC',
  DEPLOYMENT_BOOSTERS_MIN_CONSUMER_ASC = 'DEPLOYMENT_BOOSTERS_MIN_CONSUMER_ASC',
  DEPLOYMENT_BOOSTERS_MIN_CONSUMER_DESC = 'DEPLOYMENT_BOOSTERS_MIN_CONSUMER_DESC',
  DEPLOYMENT_BOOSTERS_MIN_CREATE_AT_ASC = 'DEPLOYMENT_BOOSTERS_MIN_CREATE_AT_ASC',
  DEPLOYMENT_BOOSTERS_MIN_CREATE_AT_DESC = 'DEPLOYMENT_BOOSTERS_MIN_CREATE_AT_DESC',
  DEPLOYMENT_BOOSTERS_MIN_DEPLOYMENT_ID_ASC = 'DEPLOYMENT_BOOSTERS_MIN_DEPLOYMENT_ID_ASC',
  DEPLOYMENT_BOOSTERS_MIN_DEPLOYMENT_ID_DESC = 'DEPLOYMENT_BOOSTERS_MIN_DEPLOYMENT_ID_DESC',
  DEPLOYMENT_BOOSTERS_MIN_ERA_IDX_ASC = 'DEPLOYMENT_BOOSTERS_MIN_ERA_IDX_ASC',
  DEPLOYMENT_BOOSTERS_MIN_ERA_IDX_DESC = 'DEPLOYMENT_BOOSTERS_MIN_ERA_IDX_DESC',
  DEPLOYMENT_BOOSTERS_MIN_ID_ASC = 'DEPLOYMENT_BOOSTERS_MIN_ID_ASC',
  DEPLOYMENT_BOOSTERS_MIN_ID_DESC = 'DEPLOYMENT_BOOSTERS_MIN_ID_DESC',
  DEPLOYMENT_BOOSTERS_MIN_PROJECT_ID_ASC = 'DEPLOYMENT_BOOSTERS_MIN_PROJECT_ID_ASC',
  DEPLOYMENT_BOOSTERS_MIN_PROJECT_ID_DESC = 'DEPLOYMENT_BOOSTERS_MIN_PROJECT_ID_DESC',
  DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_AMOUNT_ADDED_ASC = 'DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_AMOUNT_ADDED_ASC',
  DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_AMOUNT_ADDED_DESC = 'DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_AMOUNT_ADDED_DESC',
  DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_AMOUNT_REMOVED_ASC = 'DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_AMOUNT_REMOVED_ASC',
  DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_AMOUNT_REMOVED_DESC = 'DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_AMOUNT_REMOVED_DESC',
  DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_BLOCK_RANGE_ASC = 'DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_BLOCK_RANGE_DESC = 'DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_CONSUMER_ASC = 'DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_CONSUMER_ASC',
  DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_CONSUMER_DESC = 'DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_CONSUMER_DESC',
  DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_CREATE_AT_ASC = 'DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_CREATE_AT_ASC',
  DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_CREATE_AT_DESC = 'DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_CREATE_AT_DESC',
  DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_DEPLOYMENT_ID_ASC = 'DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_DEPLOYMENT_ID_ASC',
  DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_DEPLOYMENT_ID_DESC = 'DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_DEPLOYMENT_ID_DESC',
  DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_ERA_IDX_ASC = 'DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_ERA_IDX_ASC',
  DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_ERA_IDX_DESC = 'DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_ERA_IDX_DESC',
  DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_ID_ASC = 'DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_ID_ASC',
  DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_ID_DESC = 'DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_ID_DESC',
  DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_PROJECT_ID_ASC = 'DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_PROJECT_ID_ASC',
  DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_PROJECT_ID_DESC = 'DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_PROJECT_ID_DESC',
  DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_AMOUNT_ADDED_ASC = 'DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_AMOUNT_ADDED_ASC',
  DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_AMOUNT_ADDED_DESC = 'DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_AMOUNT_ADDED_DESC',
  DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_AMOUNT_REMOVED_ASC = 'DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_AMOUNT_REMOVED_ASC',
  DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_AMOUNT_REMOVED_DESC = 'DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_AMOUNT_REMOVED_DESC',
  DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_BLOCK_RANGE_ASC = 'DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_BLOCK_RANGE_DESC = 'DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_CONSUMER_ASC = 'DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_CONSUMER_ASC',
  DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_CONSUMER_DESC = 'DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_CONSUMER_DESC',
  DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_CREATE_AT_ASC = 'DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_CREATE_AT_ASC',
  DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_CREATE_AT_DESC = 'DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_CREATE_AT_DESC',
  DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC = 'DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC',
  DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC = 'DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC',
  DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_ERA_IDX_ASC = 'DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_ERA_IDX_ASC',
  DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_ERA_IDX_DESC = 'DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_ERA_IDX_DESC',
  DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_ID_ASC = 'DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_ID_ASC',
  DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_ID_DESC = 'DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_ID_DESC',
  DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_PROJECT_ID_ASC = 'DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_PROJECT_ID_ASC',
  DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_PROJECT_ID_DESC = 'DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_PROJECT_ID_DESC',
  DEPLOYMENT_BOOSTERS_SUM_AMOUNT_ADDED_ASC = 'DEPLOYMENT_BOOSTERS_SUM_AMOUNT_ADDED_ASC',
  DEPLOYMENT_BOOSTERS_SUM_AMOUNT_ADDED_DESC = 'DEPLOYMENT_BOOSTERS_SUM_AMOUNT_ADDED_DESC',
  DEPLOYMENT_BOOSTERS_SUM_AMOUNT_REMOVED_ASC = 'DEPLOYMENT_BOOSTERS_SUM_AMOUNT_REMOVED_ASC',
  DEPLOYMENT_BOOSTERS_SUM_AMOUNT_REMOVED_DESC = 'DEPLOYMENT_BOOSTERS_SUM_AMOUNT_REMOVED_DESC',
  DEPLOYMENT_BOOSTERS_SUM_BLOCK_RANGE_ASC = 'DEPLOYMENT_BOOSTERS_SUM_BLOCK_RANGE_ASC',
  DEPLOYMENT_BOOSTERS_SUM_BLOCK_RANGE_DESC = 'DEPLOYMENT_BOOSTERS_SUM_BLOCK_RANGE_DESC',
  DEPLOYMENT_BOOSTERS_SUM_CONSUMER_ASC = 'DEPLOYMENT_BOOSTERS_SUM_CONSUMER_ASC',
  DEPLOYMENT_BOOSTERS_SUM_CONSUMER_DESC = 'DEPLOYMENT_BOOSTERS_SUM_CONSUMER_DESC',
  DEPLOYMENT_BOOSTERS_SUM_CREATE_AT_ASC = 'DEPLOYMENT_BOOSTERS_SUM_CREATE_AT_ASC',
  DEPLOYMENT_BOOSTERS_SUM_CREATE_AT_DESC = 'DEPLOYMENT_BOOSTERS_SUM_CREATE_AT_DESC',
  DEPLOYMENT_BOOSTERS_SUM_DEPLOYMENT_ID_ASC = 'DEPLOYMENT_BOOSTERS_SUM_DEPLOYMENT_ID_ASC',
  DEPLOYMENT_BOOSTERS_SUM_DEPLOYMENT_ID_DESC = 'DEPLOYMENT_BOOSTERS_SUM_DEPLOYMENT_ID_DESC',
  DEPLOYMENT_BOOSTERS_SUM_ERA_IDX_ASC = 'DEPLOYMENT_BOOSTERS_SUM_ERA_IDX_ASC',
  DEPLOYMENT_BOOSTERS_SUM_ERA_IDX_DESC = 'DEPLOYMENT_BOOSTERS_SUM_ERA_IDX_DESC',
  DEPLOYMENT_BOOSTERS_SUM_ID_ASC = 'DEPLOYMENT_BOOSTERS_SUM_ID_ASC',
  DEPLOYMENT_BOOSTERS_SUM_ID_DESC = 'DEPLOYMENT_BOOSTERS_SUM_ID_DESC',
  DEPLOYMENT_BOOSTERS_SUM_PROJECT_ID_ASC = 'DEPLOYMENT_BOOSTERS_SUM_PROJECT_ID_ASC',
  DEPLOYMENT_BOOSTERS_SUM_PROJECT_ID_DESC = 'DEPLOYMENT_BOOSTERS_SUM_PROJECT_ID_DESC',
  DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_AMOUNT_ADDED_ASC = 'DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_AMOUNT_ADDED_ASC',
  DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_AMOUNT_ADDED_DESC = 'DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_AMOUNT_ADDED_DESC',
  DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_AMOUNT_REMOVED_ASC = 'DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_AMOUNT_REMOVED_ASC',
  DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_AMOUNT_REMOVED_DESC = 'DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_AMOUNT_REMOVED_DESC',
  DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_BLOCK_RANGE_ASC = 'DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_BLOCK_RANGE_DESC = 'DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_CONSUMER_ASC = 'DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_CONSUMER_ASC',
  DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_CONSUMER_DESC = 'DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_CONSUMER_DESC',
  DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_CREATE_AT_ASC = 'DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_CREATE_AT_ASC',
  DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_CREATE_AT_DESC = 'DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_CREATE_AT_DESC',
  DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC = 'DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC',
  DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC = 'DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC',
  DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_ERA_IDX_ASC = 'DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_ERA_IDX_ASC',
  DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_ERA_IDX_DESC = 'DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_ERA_IDX_DESC',
  DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_ID_ASC = 'DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_ID_ASC',
  DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_ID_DESC = 'DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_ID_DESC',
  DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_PROJECT_ID_ASC = 'DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_PROJECT_ID_ASC',
  DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_PROJECT_ID_DESC = 'DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_PROJECT_ID_DESC',
  DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_AMOUNT_ADDED_ASC = 'DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_AMOUNT_ADDED_ASC',
  DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_AMOUNT_ADDED_DESC = 'DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_AMOUNT_ADDED_DESC',
  DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_AMOUNT_REMOVED_ASC = 'DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_AMOUNT_REMOVED_ASC',
  DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_AMOUNT_REMOVED_DESC = 'DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_AMOUNT_REMOVED_DESC',
  DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC = 'DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC = 'DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_CONSUMER_ASC = 'DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_CONSUMER_ASC',
  DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_CONSUMER_DESC = 'DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_CONSUMER_DESC',
  DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_CREATE_AT_ASC = 'DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_CREATE_AT_ASC',
  DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_CREATE_AT_DESC = 'DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_CREATE_AT_DESC',
  DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC = 'DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC',
  DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC = 'DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC',
  DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_ERA_IDX_ASC = 'DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_ERA_IDX_ASC',
  DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_ERA_IDX_DESC = 'DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_ERA_IDX_DESC',
  DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_ID_ASC = 'DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_ID_ASC',
  DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_ID_DESC = 'DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_ID_DESC',
  DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_PROJECT_ID_ASC = 'DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_PROJECT_ID_ASC',
  DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_PROJECT_ID_DESC = 'DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_PROJECT_ID_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_BLOCK_RANGE_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_BLOCK_RANGE_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_BLOCK_RANGE_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_BLOCK_RANGE_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_CONSUMER_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_CONSUMER_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_CONSUMER_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_CONSUMER_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_CREATE_AT_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_CREATE_AT_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_CREATE_AT_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_CREATE_AT_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_DEPLOYMENT_ID_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_DEPLOYMENT_ID_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_DEPLOYMENT_ID_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_DEPLOYMENT_ID_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_ID_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_ID_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_ID_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_ID_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_PROJECT_ID_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_PROJECT_ID_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_PROJECT_ID_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_PROJECT_ID_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_TOTAL_ADDED_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_TOTAL_ADDED_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_TOTAL_ADDED_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_TOTAL_ADDED_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_TOTAL_AMOUNT_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_TOTAL_AMOUNT_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_TOTAL_AMOUNT_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_TOTAL_AMOUNT_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_TOTAL_REMOVED_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_TOTAL_REMOVED_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_TOTAL_REMOVED_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_TOTAL_REMOVED_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_UPDATE_AT_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_UPDATE_AT_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_UPDATE_AT_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_UPDATE_AT_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_BY_DEPLOYMENT_ID__COUNT_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_BY_DEPLOYMENT_ID__COUNT_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_BY_DEPLOYMENT_ID__COUNT_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_BY_DEPLOYMENT_ID__COUNT_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_COUNT_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_COUNT_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_COUNT_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_COUNT_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_BLOCK_RANGE_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_BLOCK_RANGE_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_CONSUMER_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_CONSUMER_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_CONSUMER_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_CONSUMER_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_CREATE_AT_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_CREATE_AT_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_CREATE_AT_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_CREATE_AT_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_DEPLOYMENT_ID_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_DEPLOYMENT_ID_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_DEPLOYMENT_ID_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_DEPLOYMENT_ID_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_ID_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_ID_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_ID_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_ID_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_PROJECT_ID_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_PROJECT_ID_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_PROJECT_ID_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_PROJECT_ID_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_TOTAL_ADDED_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_TOTAL_ADDED_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_TOTAL_ADDED_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_TOTAL_ADDED_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_TOTAL_AMOUNT_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_TOTAL_AMOUNT_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_TOTAL_AMOUNT_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_TOTAL_AMOUNT_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_TOTAL_REMOVED_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_TOTAL_REMOVED_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_TOTAL_REMOVED_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_TOTAL_REMOVED_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_UPDATE_AT_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_UPDATE_AT_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_UPDATE_AT_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_UPDATE_AT_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MAX_BLOCK_RANGE_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_BLOCK_RANGE_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MAX_BLOCK_RANGE_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_BLOCK_RANGE_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MAX_CONSUMER_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_CONSUMER_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MAX_CONSUMER_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_CONSUMER_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MAX_CREATE_AT_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_CREATE_AT_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MAX_CREATE_AT_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_CREATE_AT_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MAX_DEPLOYMENT_ID_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_DEPLOYMENT_ID_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MAX_DEPLOYMENT_ID_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_DEPLOYMENT_ID_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MAX_ID_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_ID_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MAX_ID_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_ID_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MAX_PROJECT_ID_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_PROJECT_ID_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MAX_PROJECT_ID_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_PROJECT_ID_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MAX_TOTAL_ADDED_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_TOTAL_ADDED_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MAX_TOTAL_ADDED_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_TOTAL_ADDED_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MAX_TOTAL_AMOUNT_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_TOTAL_AMOUNT_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MAX_TOTAL_AMOUNT_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_TOTAL_AMOUNT_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MAX_TOTAL_REMOVED_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_TOTAL_REMOVED_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MAX_TOTAL_REMOVED_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_TOTAL_REMOVED_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MAX_UPDATE_AT_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_UPDATE_AT_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MAX_UPDATE_AT_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_UPDATE_AT_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MIN_BLOCK_RANGE_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_BLOCK_RANGE_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MIN_BLOCK_RANGE_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_BLOCK_RANGE_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MIN_CONSUMER_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_CONSUMER_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MIN_CONSUMER_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_CONSUMER_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MIN_CREATE_AT_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_CREATE_AT_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MIN_CREATE_AT_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_CREATE_AT_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MIN_DEPLOYMENT_ID_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_DEPLOYMENT_ID_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MIN_DEPLOYMENT_ID_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_DEPLOYMENT_ID_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MIN_ID_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_ID_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MIN_ID_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_ID_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MIN_PROJECT_ID_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_PROJECT_ID_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MIN_PROJECT_ID_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_PROJECT_ID_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MIN_TOTAL_ADDED_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_TOTAL_ADDED_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MIN_TOTAL_ADDED_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_TOTAL_ADDED_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MIN_TOTAL_AMOUNT_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_TOTAL_AMOUNT_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MIN_TOTAL_AMOUNT_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_TOTAL_AMOUNT_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MIN_TOTAL_REMOVED_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_TOTAL_REMOVED_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MIN_TOTAL_REMOVED_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_TOTAL_REMOVED_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MIN_UPDATE_AT_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_UPDATE_AT_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MIN_UPDATE_AT_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_UPDATE_AT_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_BLOCK_RANGE_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_BLOCK_RANGE_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_CONSUMER_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_CONSUMER_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_CONSUMER_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_CONSUMER_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_CREATE_AT_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_CREATE_AT_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_CREATE_AT_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_CREATE_AT_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_DEPLOYMENT_ID_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_DEPLOYMENT_ID_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_DEPLOYMENT_ID_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_DEPLOYMENT_ID_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_ID_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_ID_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_ID_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_ID_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_PROJECT_ID_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_PROJECT_ID_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_PROJECT_ID_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_PROJECT_ID_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_TOTAL_ADDED_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_TOTAL_ADDED_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_TOTAL_ADDED_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_TOTAL_ADDED_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_TOTAL_AMOUNT_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_TOTAL_AMOUNT_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_TOTAL_AMOUNT_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_TOTAL_AMOUNT_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_TOTAL_REMOVED_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_TOTAL_REMOVED_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_TOTAL_REMOVED_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_TOTAL_REMOVED_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_UPDATE_AT_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_UPDATE_AT_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_UPDATE_AT_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_UPDATE_AT_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_BLOCK_RANGE_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_BLOCK_RANGE_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_CONSUMER_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_CONSUMER_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_CONSUMER_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_CONSUMER_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_CREATE_AT_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_CREATE_AT_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_CREATE_AT_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_CREATE_AT_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_ID_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_ID_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_ID_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_ID_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_PROJECT_ID_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_PROJECT_ID_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_PROJECT_ID_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_PROJECT_ID_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_TOTAL_ADDED_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_TOTAL_ADDED_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_TOTAL_ADDED_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_TOTAL_ADDED_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_TOTAL_AMOUNT_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_TOTAL_AMOUNT_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_TOTAL_AMOUNT_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_TOTAL_AMOUNT_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_TOTAL_REMOVED_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_TOTAL_REMOVED_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_TOTAL_REMOVED_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_TOTAL_REMOVED_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_UPDATE_AT_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_UPDATE_AT_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_UPDATE_AT_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_UPDATE_AT_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_SUM_BLOCK_RANGE_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_BLOCK_RANGE_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_SUM_BLOCK_RANGE_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_BLOCK_RANGE_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_SUM_CONSUMER_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_CONSUMER_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_SUM_CONSUMER_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_CONSUMER_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_SUM_CREATE_AT_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_CREATE_AT_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_SUM_CREATE_AT_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_CREATE_AT_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_SUM_DEPLOYMENT_ID_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_DEPLOYMENT_ID_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_SUM_DEPLOYMENT_ID_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_DEPLOYMENT_ID_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_SUM_ID_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_ID_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_SUM_ID_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_ID_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_SUM_PROJECT_ID_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_PROJECT_ID_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_SUM_PROJECT_ID_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_PROJECT_ID_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_SUM_TOTAL_ADDED_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_TOTAL_ADDED_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_SUM_TOTAL_ADDED_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_TOTAL_ADDED_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_SUM_TOTAL_AMOUNT_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_TOTAL_AMOUNT_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_SUM_TOTAL_AMOUNT_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_TOTAL_AMOUNT_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_SUM_TOTAL_REMOVED_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_TOTAL_REMOVED_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_SUM_TOTAL_REMOVED_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_TOTAL_REMOVED_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_SUM_UPDATE_AT_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_UPDATE_AT_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_SUM_UPDATE_AT_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_UPDATE_AT_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_BLOCK_RANGE_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_BLOCK_RANGE_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_CONSUMER_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_CONSUMER_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_CONSUMER_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_CONSUMER_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_CREATE_AT_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_CREATE_AT_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_CREATE_AT_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_CREATE_AT_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_ID_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_ID_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_ID_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_ID_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_PROJECT_ID_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_PROJECT_ID_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_PROJECT_ID_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_PROJECT_ID_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_TOTAL_ADDED_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_TOTAL_ADDED_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_TOTAL_ADDED_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_TOTAL_ADDED_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_TOTAL_AMOUNT_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_TOTAL_AMOUNT_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_TOTAL_AMOUNT_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_TOTAL_AMOUNT_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_TOTAL_REMOVED_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_TOTAL_REMOVED_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_TOTAL_REMOVED_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_TOTAL_REMOVED_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_UPDATE_AT_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_UPDATE_AT_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_UPDATE_AT_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_UPDATE_AT_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_CONSUMER_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_CONSUMER_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_CONSUMER_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_CONSUMER_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_CREATE_AT_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_CREATE_AT_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_CREATE_AT_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_CREATE_AT_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_ID_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_ID_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_ID_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_ID_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_PROJECT_ID_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_PROJECT_ID_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_PROJECT_ID_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_PROJECT_ID_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_TOTAL_ADDED_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_TOTAL_ADDED_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_TOTAL_ADDED_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_TOTAL_ADDED_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_TOTAL_AMOUNT_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_TOTAL_AMOUNT_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_TOTAL_AMOUNT_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_TOTAL_AMOUNT_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_TOTAL_REMOVED_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_TOTAL_REMOVED_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_TOTAL_REMOVED_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_TOTAL_REMOVED_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_UPDATE_AT_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_UPDATE_AT_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_UPDATE_AT_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_UPDATE_AT_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_AGREEMENT_REWARD_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_AGREEMENT_REWARD_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_AGREEMENT_REWARD_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_AGREEMENT_REWARD_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_ALLOCATION_REWARD_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_ALLOCATION_REWARD_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_ALLOCATION_REWARD_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_ALLOCATION_REWARD_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_APY_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_APY_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_APY_CALC_ADDED_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_APY_CALC_ADDED_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_APY_CALC_ADDED_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_APY_CALC_ADDED_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_APY_CALC_ALLOCATION_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_APY_CALC_ALLOCATION_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_APY_CALC_ALLOCATION_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_APY_CALC_ALLOCATION_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_APY_CALC_ALLOCATION_RECORD_AT_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_APY_CALC_ALLOCATION_RECORD_AT_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_APY_CALC_ALLOCATION_RECORD_AT_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_APY_CALC_ALLOCATION_RECORD_AT_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_APY_CALC_HISTORY_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_APY_CALC_HISTORY_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_APY_CALC_HISTORY_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_APY_CALC_HISTORY_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_APY_CALC_REMOVAL_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_APY_CALC_REMOVAL_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_APY_CALC_REMOVAL_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_APY_CALC_REMOVAL_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_APY_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_APY_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_BLOCK_RANGE_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_BLOCK_RANGE_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_BLOCK_RANGE_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_BLOCK_RANGE_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_CREATE_AT_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_CREATE_AT_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_CREATE_AT_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_CREATE_AT_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_DEPLOYMENT_ID_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_DEPLOYMENT_ID_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_DEPLOYMENT_ID_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_DEPLOYMENT_ID_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_ERA_IDX_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_ERA_IDX_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_ERA_IDX_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_ERA_IDX_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_FLEX_PLAN_REWARD_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_FLEX_PLAN_REWARD_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_FLEX_PLAN_REWARD_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_FLEX_PLAN_REWARD_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_ID_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_ID_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_ID_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_ID_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_INDEXER_ID_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_INDEXER_ID_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_INDEXER_ID_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_INDEXER_ID_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_UPDATE_AT_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_UPDATE_AT_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_UPDATE_AT_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_UPDATE_AT_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_BY_DEPLOYMENT_ID__COUNT_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_BY_DEPLOYMENT_ID__COUNT_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_BY_DEPLOYMENT_ID__COUNT_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_BY_DEPLOYMENT_ID__COUNT_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_COUNT_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_COUNT_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_COUNT_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_COUNT_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_AGREEMENT_REWARD_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_AGREEMENT_REWARD_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_AGREEMENT_REWARD_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_AGREEMENT_REWARD_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_ALLOCATION_REWARD_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_ALLOCATION_REWARD_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_ALLOCATION_REWARD_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_ALLOCATION_REWARD_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_APY_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_APY_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_APY_CALC_ADDED_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_APY_CALC_ADDED_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_APY_CALC_ADDED_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_APY_CALC_ADDED_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_APY_CALC_ALLOCATION_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_APY_CALC_ALLOCATION_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_APY_CALC_ALLOCATION_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_APY_CALC_ALLOCATION_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_APY_CALC_ALLOCATION_RECORD_AT_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_APY_CALC_ALLOCATION_RECORD_AT_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_APY_CALC_ALLOCATION_RECORD_AT_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_APY_CALC_ALLOCATION_RECORD_AT_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_APY_CALC_HISTORY_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_APY_CALC_HISTORY_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_APY_CALC_HISTORY_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_APY_CALC_HISTORY_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_APY_CALC_REMOVAL_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_APY_CALC_REMOVAL_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_APY_CALC_REMOVAL_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_APY_CALC_REMOVAL_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_APY_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_APY_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_BLOCK_RANGE_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_BLOCK_RANGE_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_CREATE_AT_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_CREATE_AT_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_CREATE_AT_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_CREATE_AT_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_DEPLOYMENT_ID_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_DEPLOYMENT_ID_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_DEPLOYMENT_ID_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_DEPLOYMENT_ID_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_ERA_IDX_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_ERA_IDX_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_ERA_IDX_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_ERA_IDX_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_FLEX_PLAN_REWARD_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_FLEX_PLAN_REWARD_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_FLEX_PLAN_REWARD_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_FLEX_PLAN_REWARD_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_ID_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_ID_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_ID_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_ID_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_INDEXER_ID_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_INDEXER_ID_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_INDEXER_ID_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_INDEXER_ID_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_UPDATE_AT_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_UPDATE_AT_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_UPDATE_AT_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_UPDATE_AT_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_MAX_AGREEMENT_REWARD_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_AGREEMENT_REWARD_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_MAX_AGREEMENT_REWARD_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_AGREEMENT_REWARD_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_MAX_ALLOCATION_REWARD_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_ALLOCATION_REWARD_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_MAX_ALLOCATION_REWARD_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_ALLOCATION_REWARD_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_MAX_APY_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_APY_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_MAX_APY_CALC_ADDED_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_APY_CALC_ADDED_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_MAX_APY_CALC_ADDED_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_APY_CALC_ADDED_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_MAX_APY_CALC_ALLOCATION_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_APY_CALC_ALLOCATION_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_MAX_APY_CALC_ALLOCATION_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_APY_CALC_ALLOCATION_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_MAX_APY_CALC_ALLOCATION_RECORD_AT_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_APY_CALC_ALLOCATION_RECORD_AT_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_MAX_APY_CALC_ALLOCATION_RECORD_AT_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_APY_CALC_ALLOCATION_RECORD_AT_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_MAX_APY_CALC_HISTORY_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_APY_CALC_HISTORY_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_MAX_APY_CALC_HISTORY_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_APY_CALC_HISTORY_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_MAX_APY_CALC_REMOVAL_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_APY_CALC_REMOVAL_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_MAX_APY_CALC_REMOVAL_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_APY_CALC_REMOVAL_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_MAX_APY_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_APY_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_MAX_BLOCK_RANGE_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_BLOCK_RANGE_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_MAX_BLOCK_RANGE_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_BLOCK_RANGE_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_MAX_CREATE_AT_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_CREATE_AT_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_MAX_CREATE_AT_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_CREATE_AT_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_MAX_DEPLOYMENT_ID_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_DEPLOYMENT_ID_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_MAX_DEPLOYMENT_ID_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_DEPLOYMENT_ID_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_MAX_ERA_IDX_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_ERA_IDX_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_MAX_ERA_IDX_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_ERA_IDX_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_MAX_FLEX_PLAN_REWARD_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_FLEX_PLAN_REWARD_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_MAX_FLEX_PLAN_REWARD_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_FLEX_PLAN_REWARD_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_MAX_ID_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_ID_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_MAX_ID_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_ID_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_MAX_INDEXER_ID_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_INDEXER_ID_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_MAX_INDEXER_ID_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_INDEXER_ID_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_MAX_UPDATE_AT_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_UPDATE_AT_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_MAX_UPDATE_AT_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_UPDATE_AT_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_MIN_AGREEMENT_REWARD_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_AGREEMENT_REWARD_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_MIN_AGREEMENT_REWARD_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_AGREEMENT_REWARD_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_MIN_ALLOCATION_REWARD_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_ALLOCATION_REWARD_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_MIN_ALLOCATION_REWARD_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_ALLOCATION_REWARD_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_MIN_APY_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_APY_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_MIN_APY_CALC_ADDED_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_APY_CALC_ADDED_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_MIN_APY_CALC_ADDED_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_APY_CALC_ADDED_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_MIN_APY_CALC_ALLOCATION_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_APY_CALC_ALLOCATION_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_MIN_APY_CALC_ALLOCATION_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_APY_CALC_ALLOCATION_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_MIN_APY_CALC_ALLOCATION_RECORD_AT_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_APY_CALC_ALLOCATION_RECORD_AT_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_MIN_APY_CALC_ALLOCATION_RECORD_AT_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_APY_CALC_ALLOCATION_RECORD_AT_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_MIN_APY_CALC_HISTORY_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_APY_CALC_HISTORY_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_MIN_APY_CALC_HISTORY_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_APY_CALC_HISTORY_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_MIN_APY_CALC_REMOVAL_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_APY_CALC_REMOVAL_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_MIN_APY_CALC_REMOVAL_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_APY_CALC_REMOVAL_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_MIN_APY_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_APY_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_MIN_BLOCK_RANGE_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_BLOCK_RANGE_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_MIN_BLOCK_RANGE_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_BLOCK_RANGE_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_MIN_CREATE_AT_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_CREATE_AT_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_MIN_CREATE_AT_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_CREATE_AT_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_MIN_DEPLOYMENT_ID_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_DEPLOYMENT_ID_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_MIN_DEPLOYMENT_ID_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_DEPLOYMENT_ID_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_MIN_ERA_IDX_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_ERA_IDX_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_MIN_ERA_IDX_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_ERA_IDX_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_MIN_FLEX_PLAN_REWARD_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_FLEX_PLAN_REWARD_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_MIN_FLEX_PLAN_REWARD_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_FLEX_PLAN_REWARD_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_MIN_ID_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_ID_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_MIN_ID_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_ID_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_MIN_INDEXER_ID_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_INDEXER_ID_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_MIN_INDEXER_ID_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_INDEXER_ID_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_MIN_UPDATE_AT_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_UPDATE_AT_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_MIN_UPDATE_AT_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_UPDATE_AT_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_AGREEMENT_REWARD_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_AGREEMENT_REWARD_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_AGREEMENT_REWARD_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_AGREEMENT_REWARD_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_ALLOCATION_REWARD_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_ALLOCATION_REWARD_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_ALLOCATION_REWARD_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_ALLOCATION_REWARD_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_APY_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_APY_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_APY_CALC_ADDED_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_APY_CALC_ADDED_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_APY_CALC_ADDED_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_APY_CALC_ADDED_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_APY_CALC_ALLOCATION_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_APY_CALC_ALLOCATION_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_APY_CALC_ALLOCATION_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_APY_CALC_ALLOCATION_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_APY_CALC_ALLOCATION_RECORD_AT_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_APY_CALC_ALLOCATION_RECORD_AT_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_APY_CALC_ALLOCATION_RECORD_AT_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_APY_CALC_ALLOCATION_RECORD_AT_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_APY_CALC_HISTORY_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_APY_CALC_HISTORY_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_APY_CALC_HISTORY_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_APY_CALC_HISTORY_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_APY_CALC_REMOVAL_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_APY_CALC_REMOVAL_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_APY_CALC_REMOVAL_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_APY_CALC_REMOVAL_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_APY_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_APY_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_BLOCK_RANGE_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_BLOCK_RANGE_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_CREATE_AT_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_CREATE_AT_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_CREATE_AT_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_CREATE_AT_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_DEPLOYMENT_ID_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_DEPLOYMENT_ID_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_DEPLOYMENT_ID_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_DEPLOYMENT_ID_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_ERA_IDX_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_ERA_IDX_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_ERA_IDX_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_ERA_IDX_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_FLEX_PLAN_REWARD_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_FLEX_PLAN_REWARD_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_FLEX_PLAN_REWARD_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_FLEX_PLAN_REWARD_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_ID_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_ID_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_ID_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_ID_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_INDEXER_ID_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_INDEXER_ID_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_INDEXER_ID_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_INDEXER_ID_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_UPDATE_AT_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_UPDATE_AT_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_UPDATE_AT_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_UPDATE_AT_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_AGREEMENT_REWARD_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_AGREEMENT_REWARD_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_AGREEMENT_REWARD_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_AGREEMENT_REWARD_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_ALLOCATION_REWARD_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_ALLOCATION_REWARD_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_ALLOCATION_REWARD_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_ALLOCATION_REWARD_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_APY_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_APY_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_APY_CALC_ADDED_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_APY_CALC_ADDED_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_APY_CALC_ADDED_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_APY_CALC_ADDED_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_APY_CALC_ALLOCATION_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_APY_CALC_ALLOCATION_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_APY_CALC_ALLOCATION_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_APY_CALC_ALLOCATION_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_APY_CALC_ALLOCATION_RECORD_AT_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_APY_CALC_ALLOCATION_RECORD_AT_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_APY_CALC_ALLOCATION_RECORD_AT_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_APY_CALC_ALLOCATION_RECORD_AT_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_APY_CALC_HISTORY_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_APY_CALC_HISTORY_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_APY_CALC_HISTORY_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_APY_CALC_HISTORY_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_APY_CALC_REMOVAL_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_APY_CALC_REMOVAL_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_APY_CALC_REMOVAL_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_APY_CALC_REMOVAL_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_APY_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_APY_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_BLOCK_RANGE_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_BLOCK_RANGE_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_CREATE_AT_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_CREATE_AT_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_CREATE_AT_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_CREATE_AT_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_ERA_IDX_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_ERA_IDX_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_ERA_IDX_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_ERA_IDX_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_FLEX_PLAN_REWARD_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_FLEX_PLAN_REWARD_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_FLEX_PLAN_REWARD_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_FLEX_PLAN_REWARD_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_ID_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_ID_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_ID_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_ID_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_INDEXER_ID_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_INDEXER_ID_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_INDEXER_ID_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_INDEXER_ID_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_UPDATE_AT_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_UPDATE_AT_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_UPDATE_AT_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_UPDATE_AT_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_SUM_AGREEMENT_REWARD_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_AGREEMENT_REWARD_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_SUM_AGREEMENT_REWARD_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_AGREEMENT_REWARD_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_SUM_ALLOCATION_REWARD_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_ALLOCATION_REWARD_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_SUM_ALLOCATION_REWARD_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_ALLOCATION_REWARD_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_SUM_APY_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_APY_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_SUM_APY_CALC_ADDED_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_APY_CALC_ADDED_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_SUM_APY_CALC_ADDED_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_APY_CALC_ADDED_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_SUM_APY_CALC_ALLOCATION_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_APY_CALC_ALLOCATION_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_SUM_APY_CALC_ALLOCATION_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_APY_CALC_ALLOCATION_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_SUM_APY_CALC_ALLOCATION_RECORD_AT_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_APY_CALC_ALLOCATION_RECORD_AT_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_SUM_APY_CALC_ALLOCATION_RECORD_AT_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_APY_CALC_ALLOCATION_RECORD_AT_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_SUM_APY_CALC_HISTORY_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_APY_CALC_HISTORY_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_SUM_APY_CALC_HISTORY_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_APY_CALC_HISTORY_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_SUM_APY_CALC_REMOVAL_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_APY_CALC_REMOVAL_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_SUM_APY_CALC_REMOVAL_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_APY_CALC_REMOVAL_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_SUM_APY_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_APY_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_SUM_BLOCK_RANGE_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_BLOCK_RANGE_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_SUM_BLOCK_RANGE_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_BLOCK_RANGE_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_SUM_CREATE_AT_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_CREATE_AT_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_SUM_CREATE_AT_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_CREATE_AT_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_SUM_DEPLOYMENT_ID_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_DEPLOYMENT_ID_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_SUM_DEPLOYMENT_ID_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_DEPLOYMENT_ID_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_SUM_ERA_IDX_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_ERA_IDX_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_SUM_ERA_IDX_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_ERA_IDX_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_SUM_FLEX_PLAN_REWARD_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_FLEX_PLAN_REWARD_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_SUM_FLEX_PLAN_REWARD_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_FLEX_PLAN_REWARD_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_SUM_ID_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_ID_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_SUM_ID_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_ID_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_SUM_INDEXER_ID_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_INDEXER_ID_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_SUM_INDEXER_ID_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_INDEXER_ID_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_SUM_UPDATE_AT_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_UPDATE_AT_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_SUM_UPDATE_AT_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_UPDATE_AT_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_AGREEMENT_REWARD_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_AGREEMENT_REWARD_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_AGREEMENT_REWARD_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_AGREEMENT_REWARD_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_ALLOCATION_REWARD_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_ALLOCATION_REWARD_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_ALLOCATION_REWARD_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_ALLOCATION_REWARD_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_APY_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_APY_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_APY_CALC_ADDED_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_APY_CALC_ADDED_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_APY_CALC_ADDED_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_APY_CALC_ADDED_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_APY_CALC_ALLOCATION_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_APY_CALC_ALLOCATION_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_APY_CALC_ALLOCATION_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_APY_CALC_ALLOCATION_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_APY_CALC_ALLOCATION_RECORD_AT_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_APY_CALC_ALLOCATION_RECORD_AT_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_APY_CALC_ALLOCATION_RECORD_AT_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_APY_CALC_ALLOCATION_RECORD_AT_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_APY_CALC_HISTORY_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_APY_CALC_HISTORY_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_APY_CALC_HISTORY_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_APY_CALC_HISTORY_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_APY_CALC_REMOVAL_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_APY_CALC_REMOVAL_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_APY_CALC_REMOVAL_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_APY_CALC_REMOVAL_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_APY_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_APY_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_BLOCK_RANGE_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_BLOCK_RANGE_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_CREATE_AT_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_CREATE_AT_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_CREATE_AT_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_CREATE_AT_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_ERA_IDX_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_ERA_IDX_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_ERA_IDX_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_ERA_IDX_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_FLEX_PLAN_REWARD_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_FLEX_PLAN_REWARD_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_FLEX_PLAN_REWARD_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_FLEX_PLAN_REWARD_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_ID_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_ID_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_ID_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_ID_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_INDEXER_ID_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_INDEXER_ID_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_INDEXER_ID_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_INDEXER_ID_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_UPDATE_AT_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_UPDATE_AT_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_UPDATE_AT_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_UPDATE_AT_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_AGREEMENT_REWARD_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_AGREEMENT_REWARD_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_AGREEMENT_REWARD_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_AGREEMENT_REWARD_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_ALLOCATION_REWARD_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_ALLOCATION_REWARD_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_ALLOCATION_REWARD_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_ALLOCATION_REWARD_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_APY_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_APY_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_APY_CALC_ADDED_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_APY_CALC_ADDED_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_APY_CALC_ADDED_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_APY_CALC_ADDED_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_APY_CALC_ALLOCATION_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_APY_CALC_ALLOCATION_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_APY_CALC_ALLOCATION_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_APY_CALC_ALLOCATION_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_APY_CALC_ALLOCATION_RECORD_AT_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_APY_CALC_ALLOCATION_RECORD_AT_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_APY_CALC_ALLOCATION_RECORD_AT_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_APY_CALC_ALLOCATION_RECORD_AT_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_APY_CALC_HISTORY_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_APY_CALC_HISTORY_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_APY_CALC_HISTORY_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_APY_CALC_HISTORY_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_APY_CALC_REMOVAL_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_APY_CALC_REMOVAL_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_APY_CALC_REMOVAL_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_APY_CALC_REMOVAL_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_APY_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_APY_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_CREATE_AT_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_CREATE_AT_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_CREATE_AT_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_CREATE_AT_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_ERA_IDX_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_ERA_IDX_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_ERA_IDX_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_ERA_IDX_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_FLEX_PLAN_REWARD_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_FLEX_PLAN_REWARD_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_FLEX_PLAN_REWARD_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_FLEX_PLAN_REWARD_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_ID_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_ID_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_ID_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_ID_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_INDEXER_ID_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_INDEXER_ID_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_UPDATE_AT_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_UPDATE_AT_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_UPDATE_AT_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_UPDATE_AT_DESC',
  ID_ASC = 'ID_ASC',
  ID_DESC = 'ID_DESC',
  INDEXERS_AVERAGE_BLOCK_RANGE_ASC = 'INDEXERS_AVERAGE_BLOCK_RANGE_ASC',
  INDEXERS_AVERAGE_BLOCK_RANGE_DESC = 'INDEXERS_AVERAGE_BLOCK_RANGE_DESC',
  INDEXERS_AVERAGE_CREATED_BLOCK_ASC = 'INDEXERS_AVERAGE_CREATED_BLOCK_ASC',
  INDEXERS_AVERAGE_CREATED_BLOCK_DESC = 'INDEXERS_AVERAGE_CREATED_BLOCK_DESC',
  INDEXERS_AVERAGE_DEPLOYMENT_ID_ASC = 'INDEXERS_AVERAGE_DEPLOYMENT_ID_ASC',
  INDEXERS_AVERAGE_DEPLOYMENT_ID_DESC = 'INDEXERS_AVERAGE_DEPLOYMENT_ID_DESC',
  INDEXERS_AVERAGE_ID_ASC = 'INDEXERS_AVERAGE_ID_ASC',
  INDEXERS_AVERAGE_ID_DESC = 'INDEXERS_AVERAGE_ID_DESC',
  INDEXERS_AVERAGE_INDEXER_ID_ASC = 'INDEXERS_AVERAGE_INDEXER_ID_ASC',
  INDEXERS_AVERAGE_INDEXER_ID_DESC = 'INDEXERS_AVERAGE_INDEXER_ID_DESC',
  INDEXERS_AVERAGE_LAST_EVENT_ASC = 'INDEXERS_AVERAGE_LAST_EVENT_ASC',
  INDEXERS_AVERAGE_LAST_EVENT_DESC = 'INDEXERS_AVERAGE_LAST_EVENT_DESC',
  INDEXERS_AVERAGE_STATUS_ASC = 'INDEXERS_AVERAGE_STATUS_ASC',
  INDEXERS_AVERAGE_STATUS_DESC = 'INDEXERS_AVERAGE_STATUS_DESC',
  INDEXERS_AVERAGE_TIMESTAMP_ASC = 'INDEXERS_AVERAGE_TIMESTAMP_ASC',
  INDEXERS_AVERAGE_TIMESTAMP_DESC = 'INDEXERS_AVERAGE_TIMESTAMP_DESC',
  INDEXERS_COUNT_ASC = 'INDEXERS_COUNT_ASC',
  INDEXERS_COUNT_DESC = 'INDEXERS_COUNT_DESC',
  INDEXERS_DISTINCT_COUNT_BLOCK_RANGE_ASC = 'INDEXERS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  INDEXERS_DISTINCT_COUNT_BLOCK_RANGE_DESC = 'INDEXERS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  INDEXERS_DISTINCT_COUNT_CREATED_BLOCK_ASC = 'INDEXERS_DISTINCT_COUNT_CREATED_BLOCK_ASC',
  INDEXERS_DISTINCT_COUNT_CREATED_BLOCK_DESC = 'INDEXERS_DISTINCT_COUNT_CREATED_BLOCK_DESC',
  INDEXERS_DISTINCT_COUNT_DEPLOYMENT_ID_ASC = 'INDEXERS_DISTINCT_COUNT_DEPLOYMENT_ID_ASC',
  INDEXERS_DISTINCT_COUNT_DEPLOYMENT_ID_DESC = 'INDEXERS_DISTINCT_COUNT_DEPLOYMENT_ID_DESC',
  INDEXERS_DISTINCT_COUNT_ID_ASC = 'INDEXERS_DISTINCT_COUNT_ID_ASC',
  INDEXERS_DISTINCT_COUNT_ID_DESC = 'INDEXERS_DISTINCT_COUNT_ID_DESC',
  INDEXERS_DISTINCT_COUNT_INDEXER_ID_ASC = 'INDEXERS_DISTINCT_COUNT_INDEXER_ID_ASC',
  INDEXERS_DISTINCT_COUNT_INDEXER_ID_DESC = 'INDEXERS_DISTINCT_COUNT_INDEXER_ID_DESC',
  INDEXERS_DISTINCT_COUNT_LAST_EVENT_ASC = 'INDEXERS_DISTINCT_COUNT_LAST_EVENT_ASC',
  INDEXERS_DISTINCT_COUNT_LAST_EVENT_DESC = 'INDEXERS_DISTINCT_COUNT_LAST_EVENT_DESC',
  INDEXERS_DISTINCT_COUNT_STATUS_ASC = 'INDEXERS_DISTINCT_COUNT_STATUS_ASC',
  INDEXERS_DISTINCT_COUNT_STATUS_DESC = 'INDEXERS_DISTINCT_COUNT_STATUS_DESC',
  INDEXERS_DISTINCT_COUNT_TIMESTAMP_ASC = 'INDEXERS_DISTINCT_COUNT_TIMESTAMP_ASC',
  INDEXERS_DISTINCT_COUNT_TIMESTAMP_DESC = 'INDEXERS_DISTINCT_COUNT_TIMESTAMP_DESC',
  INDEXERS_MAX_BLOCK_RANGE_ASC = 'INDEXERS_MAX_BLOCK_RANGE_ASC',
  INDEXERS_MAX_BLOCK_RANGE_DESC = 'INDEXERS_MAX_BLOCK_RANGE_DESC',
  INDEXERS_MAX_CREATED_BLOCK_ASC = 'INDEXERS_MAX_CREATED_BLOCK_ASC',
  INDEXERS_MAX_CREATED_BLOCK_DESC = 'INDEXERS_MAX_CREATED_BLOCK_DESC',
  INDEXERS_MAX_DEPLOYMENT_ID_ASC = 'INDEXERS_MAX_DEPLOYMENT_ID_ASC',
  INDEXERS_MAX_DEPLOYMENT_ID_DESC = 'INDEXERS_MAX_DEPLOYMENT_ID_DESC',
  INDEXERS_MAX_ID_ASC = 'INDEXERS_MAX_ID_ASC',
  INDEXERS_MAX_ID_DESC = 'INDEXERS_MAX_ID_DESC',
  INDEXERS_MAX_INDEXER_ID_ASC = 'INDEXERS_MAX_INDEXER_ID_ASC',
  INDEXERS_MAX_INDEXER_ID_DESC = 'INDEXERS_MAX_INDEXER_ID_DESC',
  INDEXERS_MAX_LAST_EVENT_ASC = 'INDEXERS_MAX_LAST_EVENT_ASC',
  INDEXERS_MAX_LAST_EVENT_DESC = 'INDEXERS_MAX_LAST_EVENT_DESC',
  INDEXERS_MAX_STATUS_ASC = 'INDEXERS_MAX_STATUS_ASC',
  INDEXERS_MAX_STATUS_DESC = 'INDEXERS_MAX_STATUS_DESC',
  INDEXERS_MAX_TIMESTAMP_ASC = 'INDEXERS_MAX_TIMESTAMP_ASC',
  INDEXERS_MAX_TIMESTAMP_DESC = 'INDEXERS_MAX_TIMESTAMP_DESC',
  INDEXERS_MIN_BLOCK_RANGE_ASC = 'INDEXERS_MIN_BLOCK_RANGE_ASC',
  INDEXERS_MIN_BLOCK_RANGE_DESC = 'INDEXERS_MIN_BLOCK_RANGE_DESC',
  INDEXERS_MIN_CREATED_BLOCK_ASC = 'INDEXERS_MIN_CREATED_BLOCK_ASC',
  INDEXERS_MIN_CREATED_BLOCK_DESC = 'INDEXERS_MIN_CREATED_BLOCK_DESC',
  INDEXERS_MIN_DEPLOYMENT_ID_ASC = 'INDEXERS_MIN_DEPLOYMENT_ID_ASC',
  INDEXERS_MIN_DEPLOYMENT_ID_DESC = 'INDEXERS_MIN_DEPLOYMENT_ID_DESC',
  INDEXERS_MIN_ID_ASC = 'INDEXERS_MIN_ID_ASC',
  INDEXERS_MIN_ID_DESC = 'INDEXERS_MIN_ID_DESC',
  INDEXERS_MIN_INDEXER_ID_ASC = 'INDEXERS_MIN_INDEXER_ID_ASC',
  INDEXERS_MIN_INDEXER_ID_DESC = 'INDEXERS_MIN_INDEXER_ID_DESC',
  INDEXERS_MIN_LAST_EVENT_ASC = 'INDEXERS_MIN_LAST_EVENT_ASC',
  INDEXERS_MIN_LAST_EVENT_DESC = 'INDEXERS_MIN_LAST_EVENT_DESC',
  INDEXERS_MIN_STATUS_ASC = 'INDEXERS_MIN_STATUS_ASC',
  INDEXERS_MIN_STATUS_DESC = 'INDEXERS_MIN_STATUS_DESC',
  INDEXERS_MIN_TIMESTAMP_ASC = 'INDEXERS_MIN_TIMESTAMP_ASC',
  INDEXERS_MIN_TIMESTAMP_DESC = 'INDEXERS_MIN_TIMESTAMP_DESC',
  INDEXERS_STDDEV_POPULATION_BLOCK_RANGE_ASC = 'INDEXERS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  INDEXERS_STDDEV_POPULATION_BLOCK_RANGE_DESC = 'INDEXERS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  INDEXERS_STDDEV_POPULATION_CREATED_BLOCK_ASC = 'INDEXERS_STDDEV_POPULATION_CREATED_BLOCK_ASC',
  INDEXERS_STDDEV_POPULATION_CREATED_BLOCK_DESC = 'INDEXERS_STDDEV_POPULATION_CREATED_BLOCK_DESC',
  INDEXERS_STDDEV_POPULATION_DEPLOYMENT_ID_ASC = 'INDEXERS_STDDEV_POPULATION_DEPLOYMENT_ID_ASC',
  INDEXERS_STDDEV_POPULATION_DEPLOYMENT_ID_DESC = 'INDEXERS_STDDEV_POPULATION_DEPLOYMENT_ID_DESC',
  INDEXERS_STDDEV_POPULATION_ID_ASC = 'INDEXERS_STDDEV_POPULATION_ID_ASC',
  INDEXERS_STDDEV_POPULATION_ID_DESC = 'INDEXERS_STDDEV_POPULATION_ID_DESC',
  INDEXERS_STDDEV_POPULATION_INDEXER_ID_ASC = 'INDEXERS_STDDEV_POPULATION_INDEXER_ID_ASC',
  INDEXERS_STDDEV_POPULATION_INDEXER_ID_DESC = 'INDEXERS_STDDEV_POPULATION_INDEXER_ID_DESC',
  INDEXERS_STDDEV_POPULATION_LAST_EVENT_ASC = 'INDEXERS_STDDEV_POPULATION_LAST_EVENT_ASC',
  INDEXERS_STDDEV_POPULATION_LAST_EVENT_DESC = 'INDEXERS_STDDEV_POPULATION_LAST_EVENT_DESC',
  INDEXERS_STDDEV_POPULATION_STATUS_ASC = 'INDEXERS_STDDEV_POPULATION_STATUS_ASC',
  INDEXERS_STDDEV_POPULATION_STATUS_DESC = 'INDEXERS_STDDEV_POPULATION_STATUS_DESC',
  INDEXERS_STDDEV_POPULATION_TIMESTAMP_ASC = 'INDEXERS_STDDEV_POPULATION_TIMESTAMP_ASC',
  INDEXERS_STDDEV_POPULATION_TIMESTAMP_DESC = 'INDEXERS_STDDEV_POPULATION_TIMESTAMP_DESC',
  INDEXERS_STDDEV_SAMPLE_BLOCK_RANGE_ASC = 'INDEXERS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  INDEXERS_STDDEV_SAMPLE_BLOCK_RANGE_DESC = 'INDEXERS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  INDEXERS_STDDEV_SAMPLE_CREATED_BLOCK_ASC = 'INDEXERS_STDDEV_SAMPLE_CREATED_BLOCK_ASC',
  INDEXERS_STDDEV_SAMPLE_CREATED_BLOCK_DESC = 'INDEXERS_STDDEV_SAMPLE_CREATED_BLOCK_DESC',
  INDEXERS_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC = 'INDEXERS_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC',
  INDEXERS_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC = 'INDEXERS_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC',
  INDEXERS_STDDEV_SAMPLE_ID_ASC = 'INDEXERS_STDDEV_SAMPLE_ID_ASC',
  INDEXERS_STDDEV_SAMPLE_ID_DESC = 'INDEXERS_STDDEV_SAMPLE_ID_DESC',
  INDEXERS_STDDEV_SAMPLE_INDEXER_ID_ASC = 'INDEXERS_STDDEV_SAMPLE_INDEXER_ID_ASC',
  INDEXERS_STDDEV_SAMPLE_INDEXER_ID_DESC = 'INDEXERS_STDDEV_SAMPLE_INDEXER_ID_DESC',
  INDEXERS_STDDEV_SAMPLE_LAST_EVENT_ASC = 'INDEXERS_STDDEV_SAMPLE_LAST_EVENT_ASC',
  INDEXERS_STDDEV_SAMPLE_LAST_EVENT_DESC = 'INDEXERS_STDDEV_SAMPLE_LAST_EVENT_DESC',
  INDEXERS_STDDEV_SAMPLE_STATUS_ASC = 'INDEXERS_STDDEV_SAMPLE_STATUS_ASC',
  INDEXERS_STDDEV_SAMPLE_STATUS_DESC = 'INDEXERS_STDDEV_SAMPLE_STATUS_DESC',
  INDEXERS_STDDEV_SAMPLE_TIMESTAMP_ASC = 'INDEXERS_STDDEV_SAMPLE_TIMESTAMP_ASC',
  INDEXERS_STDDEV_SAMPLE_TIMESTAMP_DESC = 'INDEXERS_STDDEV_SAMPLE_TIMESTAMP_DESC',
  INDEXERS_SUM_BLOCK_RANGE_ASC = 'INDEXERS_SUM_BLOCK_RANGE_ASC',
  INDEXERS_SUM_BLOCK_RANGE_DESC = 'INDEXERS_SUM_BLOCK_RANGE_DESC',
  INDEXERS_SUM_CREATED_BLOCK_ASC = 'INDEXERS_SUM_CREATED_BLOCK_ASC',
  INDEXERS_SUM_CREATED_BLOCK_DESC = 'INDEXERS_SUM_CREATED_BLOCK_DESC',
  INDEXERS_SUM_DEPLOYMENT_ID_ASC = 'INDEXERS_SUM_DEPLOYMENT_ID_ASC',
  INDEXERS_SUM_DEPLOYMENT_ID_DESC = 'INDEXERS_SUM_DEPLOYMENT_ID_DESC',
  INDEXERS_SUM_ID_ASC = 'INDEXERS_SUM_ID_ASC',
  INDEXERS_SUM_ID_DESC = 'INDEXERS_SUM_ID_DESC',
  INDEXERS_SUM_INDEXER_ID_ASC = 'INDEXERS_SUM_INDEXER_ID_ASC',
  INDEXERS_SUM_INDEXER_ID_DESC = 'INDEXERS_SUM_INDEXER_ID_DESC',
  INDEXERS_SUM_LAST_EVENT_ASC = 'INDEXERS_SUM_LAST_EVENT_ASC',
  INDEXERS_SUM_LAST_EVENT_DESC = 'INDEXERS_SUM_LAST_EVENT_DESC',
  INDEXERS_SUM_STATUS_ASC = 'INDEXERS_SUM_STATUS_ASC',
  INDEXERS_SUM_STATUS_DESC = 'INDEXERS_SUM_STATUS_DESC',
  INDEXERS_SUM_TIMESTAMP_ASC = 'INDEXERS_SUM_TIMESTAMP_ASC',
  INDEXERS_SUM_TIMESTAMP_DESC = 'INDEXERS_SUM_TIMESTAMP_DESC',
  INDEXERS_VARIANCE_POPULATION_BLOCK_RANGE_ASC = 'INDEXERS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  INDEXERS_VARIANCE_POPULATION_BLOCK_RANGE_DESC = 'INDEXERS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  INDEXERS_VARIANCE_POPULATION_CREATED_BLOCK_ASC = 'INDEXERS_VARIANCE_POPULATION_CREATED_BLOCK_ASC',
  INDEXERS_VARIANCE_POPULATION_CREATED_BLOCK_DESC = 'INDEXERS_VARIANCE_POPULATION_CREATED_BLOCK_DESC',
  INDEXERS_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC = 'INDEXERS_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC',
  INDEXERS_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC = 'INDEXERS_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC',
  INDEXERS_VARIANCE_POPULATION_ID_ASC = 'INDEXERS_VARIANCE_POPULATION_ID_ASC',
  INDEXERS_VARIANCE_POPULATION_ID_DESC = 'INDEXERS_VARIANCE_POPULATION_ID_DESC',
  INDEXERS_VARIANCE_POPULATION_INDEXER_ID_ASC = 'INDEXERS_VARIANCE_POPULATION_INDEXER_ID_ASC',
  INDEXERS_VARIANCE_POPULATION_INDEXER_ID_DESC = 'INDEXERS_VARIANCE_POPULATION_INDEXER_ID_DESC',
  INDEXERS_VARIANCE_POPULATION_LAST_EVENT_ASC = 'INDEXERS_VARIANCE_POPULATION_LAST_EVENT_ASC',
  INDEXERS_VARIANCE_POPULATION_LAST_EVENT_DESC = 'INDEXERS_VARIANCE_POPULATION_LAST_EVENT_DESC',
  INDEXERS_VARIANCE_POPULATION_STATUS_ASC = 'INDEXERS_VARIANCE_POPULATION_STATUS_ASC',
  INDEXERS_VARIANCE_POPULATION_STATUS_DESC = 'INDEXERS_VARIANCE_POPULATION_STATUS_DESC',
  INDEXERS_VARIANCE_POPULATION_TIMESTAMP_ASC = 'INDEXERS_VARIANCE_POPULATION_TIMESTAMP_ASC',
  INDEXERS_VARIANCE_POPULATION_TIMESTAMP_DESC = 'INDEXERS_VARIANCE_POPULATION_TIMESTAMP_DESC',
  INDEXERS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC = 'INDEXERS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  INDEXERS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC = 'INDEXERS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  INDEXERS_VARIANCE_SAMPLE_CREATED_BLOCK_ASC = 'INDEXERS_VARIANCE_SAMPLE_CREATED_BLOCK_ASC',
  INDEXERS_VARIANCE_SAMPLE_CREATED_BLOCK_DESC = 'INDEXERS_VARIANCE_SAMPLE_CREATED_BLOCK_DESC',
  INDEXERS_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC = 'INDEXERS_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC',
  INDEXERS_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC = 'INDEXERS_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC',
  INDEXERS_VARIANCE_SAMPLE_ID_ASC = 'INDEXERS_VARIANCE_SAMPLE_ID_ASC',
  INDEXERS_VARIANCE_SAMPLE_ID_DESC = 'INDEXERS_VARIANCE_SAMPLE_ID_DESC',
  INDEXERS_VARIANCE_SAMPLE_INDEXER_ID_ASC = 'INDEXERS_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  INDEXERS_VARIANCE_SAMPLE_INDEXER_ID_DESC = 'INDEXERS_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  INDEXERS_VARIANCE_SAMPLE_LAST_EVENT_ASC = 'INDEXERS_VARIANCE_SAMPLE_LAST_EVENT_ASC',
  INDEXERS_VARIANCE_SAMPLE_LAST_EVENT_DESC = 'INDEXERS_VARIANCE_SAMPLE_LAST_EVENT_DESC',
  INDEXERS_VARIANCE_SAMPLE_STATUS_ASC = 'INDEXERS_VARIANCE_SAMPLE_STATUS_ASC',
  INDEXERS_VARIANCE_SAMPLE_STATUS_DESC = 'INDEXERS_VARIANCE_SAMPLE_STATUS_DESC',
  INDEXERS_VARIANCE_SAMPLE_TIMESTAMP_ASC = 'INDEXERS_VARIANCE_SAMPLE_TIMESTAMP_ASC',
  INDEXERS_VARIANCE_SAMPLE_TIMESTAMP_DESC = 'INDEXERS_VARIANCE_SAMPLE_TIMESTAMP_DESC',
  INDEXER_ALLOCATIONS_AVERAGE_AMOUNT_ADDED_ASC = 'INDEXER_ALLOCATIONS_AVERAGE_AMOUNT_ADDED_ASC',
  INDEXER_ALLOCATIONS_AVERAGE_AMOUNT_ADDED_DESC = 'INDEXER_ALLOCATIONS_AVERAGE_AMOUNT_ADDED_DESC',
  INDEXER_ALLOCATIONS_AVERAGE_AMOUNT_REMOVED_ASC = 'INDEXER_ALLOCATIONS_AVERAGE_AMOUNT_REMOVED_ASC',
  INDEXER_ALLOCATIONS_AVERAGE_AMOUNT_REMOVED_DESC = 'INDEXER_ALLOCATIONS_AVERAGE_AMOUNT_REMOVED_DESC',
  INDEXER_ALLOCATIONS_AVERAGE_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATIONS_AVERAGE_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATIONS_AVERAGE_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATIONS_AVERAGE_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATIONS_AVERAGE_CREATE_AT_ASC = 'INDEXER_ALLOCATIONS_AVERAGE_CREATE_AT_ASC',
  INDEXER_ALLOCATIONS_AVERAGE_CREATE_AT_DESC = 'INDEXER_ALLOCATIONS_AVERAGE_CREATE_AT_DESC',
  INDEXER_ALLOCATIONS_AVERAGE_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATIONS_AVERAGE_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATIONS_AVERAGE_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATIONS_AVERAGE_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATIONS_AVERAGE_ERA_IDX_ASC = 'INDEXER_ALLOCATIONS_AVERAGE_ERA_IDX_ASC',
  INDEXER_ALLOCATIONS_AVERAGE_ERA_IDX_DESC = 'INDEXER_ALLOCATIONS_AVERAGE_ERA_IDX_DESC',
  INDEXER_ALLOCATIONS_AVERAGE_ID_ASC = 'INDEXER_ALLOCATIONS_AVERAGE_ID_ASC',
  INDEXER_ALLOCATIONS_AVERAGE_ID_DESC = 'INDEXER_ALLOCATIONS_AVERAGE_ID_DESC',
  INDEXER_ALLOCATIONS_AVERAGE_INDEXER_ID_ASC = 'INDEXER_ALLOCATIONS_AVERAGE_INDEXER_ID_ASC',
  INDEXER_ALLOCATIONS_AVERAGE_INDEXER_ID_DESC = 'INDEXER_ALLOCATIONS_AVERAGE_INDEXER_ID_DESC',
  INDEXER_ALLOCATIONS_AVERAGE_PROJECT_ID_ASC = 'INDEXER_ALLOCATIONS_AVERAGE_PROJECT_ID_ASC',
  INDEXER_ALLOCATIONS_AVERAGE_PROJECT_ID_DESC = 'INDEXER_ALLOCATIONS_AVERAGE_PROJECT_ID_DESC',
  INDEXER_ALLOCATIONS_BY_DEPLOYMENT_ID__COUNT_ASC = 'INDEXER_ALLOCATIONS_BY_DEPLOYMENT_ID__COUNT_ASC',
  INDEXER_ALLOCATIONS_BY_DEPLOYMENT_ID__COUNT_DESC = 'INDEXER_ALLOCATIONS_BY_DEPLOYMENT_ID__COUNT_DESC',
  INDEXER_ALLOCATIONS_COUNT_ASC = 'INDEXER_ALLOCATIONS_COUNT_ASC',
  INDEXER_ALLOCATIONS_COUNT_DESC = 'INDEXER_ALLOCATIONS_COUNT_DESC',
  INDEXER_ALLOCATIONS_DISTINCT_COUNT_AMOUNT_ADDED_ASC = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_AMOUNT_ADDED_ASC',
  INDEXER_ALLOCATIONS_DISTINCT_COUNT_AMOUNT_ADDED_DESC = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_AMOUNT_ADDED_DESC',
  INDEXER_ALLOCATIONS_DISTINCT_COUNT_AMOUNT_REMOVED_ASC = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_AMOUNT_REMOVED_ASC',
  INDEXER_ALLOCATIONS_DISTINCT_COUNT_AMOUNT_REMOVED_DESC = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_AMOUNT_REMOVED_DESC',
  INDEXER_ALLOCATIONS_DISTINCT_COUNT_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATIONS_DISTINCT_COUNT_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATIONS_DISTINCT_COUNT_CREATE_AT_ASC = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_CREATE_AT_ASC',
  INDEXER_ALLOCATIONS_DISTINCT_COUNT_CREATE_AT_DESC = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_CREATE_AT_DESC',
  INDEXER_ALLOCATIONS_DISTINCT_COUNT_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATIONS_DISTINCT_COUNT_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATIONS_DISTINCT_COUNT_ERA_IDX_ASC = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_ERA_IDX_ASC',
  INDEXER_ALLOCATIONS_DISTINCT_COUNT_ERA_IDX_DESC = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_ERA_IDX_DESC',
  INDEXER_ALLOCATIONS_DISTINCT_COUNT_ID_ASC = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_ID_ASC',
  INDEXER_ALLOCATIONS_DISTINCT_COUNT_ID_DESC = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_ID_DESC',
  INDEXER_ALLOCATIONS_DISTINCT_COUNT_INDEXER_ID_ASC = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_INDEXER_ID_ASC',
  INDEXER_ALLOCATIONS_DISTINCT_COUNT_INDEXER_ID_DESC = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_INDEXER_ID_DESC',
  INDEXER_ALLOCATIONS_DISTINCT_COUNT_PROJECT_ID_ASC = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_PROJECT_ID_ASC',
  INDEXER_ALLOCATIONS_DISTINCT_COUNT_PROJECT_ID_DESC = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_PROJECT_ID_DESC',
  INDEXER_ALLOCATIONS_MAX_AMOUNT_ADDED_ASC = 'INDEXER_ALLOCATIONS_MAX_AMOUNT_ADDED_ASC',
  INDEXER_ALLOCATIONS_MAX_AMOUNT_ADDED_DESC = 'INDEXER_ALLOCATIONS_MAX_AMOUNT_ADDED_DESC',
  INDEXER_ALLOCATIONS_MAX_AMOUNT_REMOVED_ASC = 'INDEXER_ALLOCATIONS_MAX_AMOUNT_REMOVED_ASC',
  INDEXER_ALLOCATIONS_MAX_AMOUNT_REMOVED_DESC = 'INDEXER_ALLOCATIONS_MAX_AMOUNT_REMOVED_DESC',
  INDEXER_ALLOCATIONS_MAX_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATIONS_MAX_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATIONS_MAX_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATIONS_MAX_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATIONS_MAX_CREATE_AT_ASC = 'INDEXER_ALLOCATIONS_MAX_CREATE_AT_ASC',
  INDEXER_ALLOCATIONS_MAX_CREATE_AT_DESC = 'INDEXER_ALLOCATIONS_MAX_CREATE_AT_DESC',
  INDEXER_ALLOCATIONS_MAX_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATIONS_MAX_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATIONS_MAX_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATIONS_MAX_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATIONS_MAX_ERA_IDX_ASC = 'INDEXER_ALLOCATIONS_MAX_ERA_IDX_ASC',
  INDEXER_ALLOCATIONS_MAX_ERA_IDX_DESC = 'INDEXER_ALLOCATIONS_MAX_ERA_IDX_DESC',
  INDEXER_ALLOCATIONS_MAX_ID_ASC = 'INDEXER_ALLOCATIONS_MAX_ID_ASC',
  INDEXER_ALLOCATIONS_MAX_ID_DESC = 'INDEXER_ALLOCATIONS_MAX_ID_DESC',
  INDEXER_ALLOCATIONS_MAX_INDEXER_ID_ASC = 'INDEXER_ALLOCATIONS_MAX_INDEXER_ID_ASC',
  INDEXER_ALLOCATIONS_MAX_INDEXER_ID_DESC = 'INDEXER_ALLOCATIONS_MAX_INDEXER_ID_DESC',
  INDEXER_ALLOCATIONS_MAX_PROJECT_ID_ASC = 'INDEXER_ALLOCATIONS_MAX_PROJECT_ID_ASC',
  INDEXER_ALLOCATIONS_MAX_PROJECT_ID_DESC = 'INDEXER_ALLOCATIONS_MAX_PROJECT_ID_DESC',
  INDEXER_ALLOCATIONS_MIN_AMOUNT_ADDED_ASC = 'INDEXER_ALLOCATIONS_MIN_AMOUNT_ADDED_ASC',
  INDEXER_ALLOCATIONS_MIN_AMOUNT_ADDED_DESC = 'INDEXER_ALLOCATIONS_MIN_AMOUNT_ADDED_DESC',
  INDEXER_ALLOCATIONS_MIN_AMOUNT_REMOVED_ASC = 'INDEXER_ALLOCATIONS_MIN_AMOUNT_REMOVED_ASC',
  INDEXER_ALLOCATIONS_MIN_AMOUNT_REMOVED_DESC = 'INDEXER_ALLOCATIONS_MIN_AMOUNT_REMOVED_DESC',
  INDEXER_ALLOCATIONS_MIN_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATIONS_MIN_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATIONS_MIN_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATIONS_MIN_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATIONS_MIN_CREATE_AT_ASC = 'INDEXER_ALLOCATIONS_MIN_CREATE_AT_ASC',
  INDEXER_ALLOCATIONS_MIN_CREATE_AT_DESC = 'INDEXER_ALLOCATIONS_MIN_CREATE_AT_DESC',
  INDEXER_ALLOCATIONS_MIN_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATIONS_MIN_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATIONS_MIN_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATIONS_MIN_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATIONS_MIN_ERA_IDX_ASC = 'INDEXER_ALLOCATIONS_MIN_ERA_IDX_ASC',
  INDEXER_ALLOCATIONS_MIN_ERA_IDX_DESC = 'INDEXER_ALLOCATIONS_MIN_ERA_IDX_DESC',
  INDEXER_ALLOCATIONS_MIN_ID_ASC = 'INDEXER_ALLOCATIONS_MIN_ID_ASC',
  INDEXER_ALLOCATIONS_MIN_ID_DESC = 'INDEXER_ALLOCATIONS_MIN_ID_DESC',
  INDEXER_ALLOCATIONS_MIN_INDEXER_ID_ASC = 'INDEXER_ALLOCATIONS_MIN_INDEXER_ID_ASC',
  INDEXER_ALLOCATIONS_MIN_INDEXER_ID_DESC = 'INDEXER_ALLOCATIONS_MIN_INDEXER_ID_DESC',
  INDEXER_ALLOCATIONS_MIN_PROJECT_ID_ASC = 'INDEXER_ALLOCATIONS_MIN_PROJECT_ID_ASC',
  INDEXER_ALLOCATIONS_MIN_PROJECT_ID_DESC = 'INDEXER_ALLOCATIONS_MIN_PROJECT_ID_DESC',
  INDEXER_ALLOCATIONS_STDDEV_POPULATION_AMOUNT_ADDED_ASC = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_AMOUNT_ADDED_ASC',
  INDEXER_ALLOCATIONS_STDDEV_POPULATION_AMOUNT_ADDED_DESC = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_AMOUNT_ADDED_DESC',
  INDEXER_ALLOCATIONS_STDDEV_POPULATION_AMOUNT_REMOVED_ASC = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_AMOUNT_REMOVED_ASC',
  INDEXER_ALLOCATIONS_STDDEV_POPULATION_AMOUNT_REMOVED_DESC = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_AMOUNT_REMOVED_DESC',
  INDEXER_ALLOCATIONS_STDDEV_POPULATION_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATIONS_STDDEV_POPULATION_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATIONS_STDDEV_POPULATION_CREATE_AT_ASC = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_CREATE_AT_ASC',
  INDEXER_ALLOCATIONS_STDDEV_POPULATION_CREATE_AT_DESC = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_CREATE_AT_DESC',
  INDEXER_ALLOCATIONS_STDDEV_POPULATION_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATIONS_STDDEV_POPULATION_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATIONS_STDDEV_POPULATION_ERA_IDX_ASC = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_ERA_IDX_ASC',
  INDEXER_ALLOCATIONS_STDDEV_POPULATION_ERA_IDX_DESC = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_ERA_IDX_DESC',
  INDEXER_ALLOCATIONS_STDDEV_POPULATION_ID_ASC = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_ID_ASC',
  INDEXER_ALLOCATIONS_STDDEV_POPULATION_ID_DESC = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_ID_DESC',
  INDEXER_ALLOCATIONS_STDDEV_POPULATION_INDEXER_ID_ASC = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_INDEXER_ID_ASC',
  INDEXER_ALLOCATIONS_STDDEV_POPULATION_INDEXER_ID_DESC = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_INDEXER_ID_DESC',
  INDEXER_ALLOCATIONS_STDDEV_POPULATION_PROJECT_ID_ASC = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_PROJECT_ID_ASC',
  INDEXER_ALLOCATIONS_STDDEV_POPULATION_PROJECT_ID_DESC = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_PROJECT_ID_DESC',
  INDEXER_ALLOCATIONS_STDDEV_SAMPLE_AMOUNT_ADDED_ASC = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_AMOUNT_ADDED_ASC',
  INDEXER_ALLOCATIONS_STDDEV_SAMPLE_AMOUNT_ADDED_DESC = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_AMOUNT_ADDED_DESC',
  INDEXER_ALLOCATIONS_STDDEV_SAMPLE_AMOUNT_REMOVED_ASC = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_AMOUNT_REMOVED_ASC',
  INDEXER_ALLOCATIONS_STDDEV_SAMPLE_AMOUNT_REMOVED_DESC = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_AMOUNT_REMOVED_DESC',
  INDEXER_ALLOCATIONS_STDDEV_SAMPLE_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATIONS_STDDEV_SAMPLE_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATIONS_STDDEV_SAMPLE_CREATE_AT_ASC = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_CREATE_AT_ASC',
  INDEXER_ALLOCATIONS_STDDEV_SAMPLE_CREATE_AT_DESC = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_CREATE_AT_DESC',
  INDEXER_ALLOCATIONS_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATIONS_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATIONS_STDDEV_SAMPLE_ERA_IDX_ASC = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_ERA_IDX_ASC',
  INDEXER_ALLOCATIONS_STDDEV_SAMPLE_ERA_IDX_DESC = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_ERA_IDX_DESC',
  INDEXER_ALLOCATIONS_STDDEV_SAMPLE_ID_ASC = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_ID_ASC',
  INDEXER_ALLOCATIONS_STDDEV_SAMPLE_ID_DESC = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_ID_DESC',
  INDEXER_ALLOCATIONS_STDDEV_SAMPLE_INDEXER_ID_ASC = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_INDEXER_ID_ASC',
  INDEXER_ALLOCATIONS_STDDEV_SAMPLE_INDEXER_ID_DESC = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_INDEXER_ID_DESC',
  INDEXER_ALLOCATIONS_STDDEV_SAMPLE_PROJECT_ID_ASC = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_PROJECT_ID_ASC',
  INDEXER_ALLOCATIONS_STDDEV_SAMPLE_PROJECT_ID_DESC = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_PROJECT_ID_DESC',
  INDEXER_ALLOCATIONS_SUM_AMOUNT_ADDED_ASC = 'INDEXER_ALLOCATIONS_SUM_AMOUNT_ADDED_ASC',
  INDEXER_ALLOCATIONS_SUM_AMOUNT_ADDED_DESC = 'INDEXER_ALLOCATIONS_SUM_AMOUNT_ADDED_DESC',
  INDEXER_ALLOCATIONS_SUM_AMOUNT_REMOVED_ASC = 'INDEXER_ALLOCATIONS_SUM_AMOUNT_REMOVED_ASC',
  INDEXER_ALLOCATIONS_SUM_AMOUNT_REMOVED_DESC = 'INDEXER_ALLOCATIONS_SUM_AMOUNT_REMOVED_DESC',
  INDEXER_ALLOCATIONS_SUM_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATIONS_SUM_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATIONS_SUM_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATIONS_SUM_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATIONS_SUM_CREATE_AT_ASC = 'INDEXER_ALLOCATIONS_SUM_CREATE_AT_ASC',
  INDEXER_ALLOCATIONS_SUM_CREATE_AT_DESC = 'INDEXER_ALLOCATIONS_SUM_CREATE_AT_DESC',
  INDEXER_ALLOCATIONS_SUM_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATIONS_SUM_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATIONS_SUM_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATIONS_SUM_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATIONS_SUM_ERA_IDX_ASC = 'INDEXER_ALLOCATIONS_SUM_ERA_IDX_ASC',
  INDEXER_ALLOCATIONS_SUM_ERA_IDX_DESC = 'INDEXER_ALLOCATIONS_SUM_ERA_IDX_DESC',
  INDEXER_ALLOCATIONS_SUM_ID_ASC = 'INDEXER_ALLOCATIONS_SUM_ID_ASC',
  INDEXER_ALLOCATIONS_SUM_ID_DESC = 'INDEXER_ALLOCATIONS_SUM_ID_DESC',
  INDEXER_ALLOCATIONS_SUM_INDEXER_ID_ASC = 'INDEXER_ALLOCATIONS_SUM_INDEXER_ID_ASC',
  INDEXER_ALLOCATIONS_SUM_INDEXER_ID_DESC = 'INDEXER_ALLOCATIONS_SUM_INDEXER_ID_DESC',
  INDEXER_ALLOCATIONS_SUM_PROJECT_ID_ASC = 'INDEXER_ALLOCATIONS_SUM_PROJECT_ID_ASC',
  INDEXER_ALLOCATIONS_SUM_PROJECT_ID_DESC = 'INDEXER_ALLOCATIONS_SUM_PROJECT_ID_DESC',
  INDEXER_ALLOCATIONS_VARIANCE_POPULATION_AMOUNT_ADDED_ASC = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_AMOUNT_ADDED_ASC',
  INDEXER_ALLOCATIONS_VARIANCE_POPULATION_AMOUNT_ADDED_DESC = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_AMOUNT_ADDED_DESC',
  INDEXER_ALLOCATIONS_VARIANCE_POPULATION_AMOUNT_REMOVED_ASC = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_AMOUNT_REMOVED_ASC',
  INDEXER_ALLOCATIONS_VARIANCE_POPULATION_AMOUNT_REMOVED_DESC = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_AMOUNT_REMOVED_DESC',
  INDEXER_ALLOCATIONS_VARIANCE_POPULATION_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATIONS_VARIANCE_POPULATION_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATIONS_VARIANCE_POPULATION_CREATE_AT_ASC = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_CREATE_AT_ASC',
  INDEXER_ALLOCATIONS_VARIANCE_POPULATION_CREATE_AT_DESC = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_CREATE_AT_DESC',
  INDEXER_ALLOCATIONS_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATIONS_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATIONS_VARIANCE_POPULATION_ERA_IDX_ASC = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_ERA_IDX_ASC',
  INDEXER_ALLOCATIONS_VARIANCE_POPULATION_ERA_IDX_DESC = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_ERA_IDX_DESC',
  INDEXER_ALLOCATIONS_VARIANCE_POPULATION_ID_ASC = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_ID_ASC',
  INDEXER_ALLOCATIONS_VARIANCE_POPULATION_ID_DESC = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_ID_DESC',
  INDEXER_ALLOCATIONS_VARIANCE_POPULATION_INDEXER_ID_ASC = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_INDEXER_ID_ASC',
  INDEXER_ALLOCATIONS_VARIANCE_POPULATION_INDEXER_ID_DESC = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_INDEXER_ID_DESC',
  INDEXER_ALLOCATIONS_VARIANCE_POPULATION_PROJECT_ID_ASC = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_PROJECT_ID_ASC',
  INDEXER_ALLOCATIONS_VARIANCE_POPULATION_PROJECT_ID_DESC = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_PROJECT_ID_DESC',
  INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_AMOUNT_ADDED_ASC = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_AMOUNT_ADDED_ASC',
  INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_AMOUNT_ADDED_DESC = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_AMOUNT_ADDED_DESC',
  INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_AMOUNT_REMOVED_ASC = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_AMOUNT_REMOVED_ASC',
  INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_AMOUNT_REMOVED_DESC = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_AMOUNT_REMOVED_DESC',
  INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_CREATE_AT_ASC = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_CREATE_AT_ASC',
  INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_CREATE_AT_DESC = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_CREATE_AT_DESC',
  INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_ERA_IDX_ASC = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_ERA_IDX_ASC',
  INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_ERA_IDX_DESC = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_ERA_IDX_DESC',
  INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_ID_ASC = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_ID_ASC',
  INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_ID_DESC = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_ID_DESC',
  INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_INDEXER_ID_ASC = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_INDEXER_ID_DESC = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_PROJECT_ID_ASC = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_PROJECT_ID_ASC',
  INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_PROJECT_ID_DESC = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_AVERAGE_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_REWARDS_AVERAGE_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_REWARDS_AVERAGE_BURNT_ASC = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_BURNT_ASC',
  INDEXER_ALLOCATION_REWARDS_AVERAGE_BURNT_DESC = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_BURNT_DESC',
  INDEXER_ALLOCATION_REWARDS_AVERAGE_CREATE_AT_ASC = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_CREATE_AT_ASC',
  INDEXER_ALLOCATION_REWARDS_AVERAGE_CREATE_AT_DESC = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_CREATE_AT_DESC',
  INDEXER_ALLOCATION_REWARDS_AVERAGE_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_AVERAGE_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_AVERAGE_ERA_IDX_ASC = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_ERA_IDX_ASC',
  INDEXER_ALLOCATION_REWARDS_AVERAGE_ERA_IDX_DESC = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_ERA_IDX_DESC',
  INDEXER_ALLOCATION_REWARDS_AVERAGE_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_AVERAGE_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_AVERAGE_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_AVERAGE_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_AVERAGE_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_AVERAGE_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_AVERAGE_REWARD_ASC = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_REWARD_ASC',
  INDEXER_ALLOCATION_REWARDS_AVERAGE_REWARD_DESC = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_REWARD_DESC',
  INDEXER_ALLOCATION_REWARDS_BY_DEPLOYMENT_ID__COUNT_ASC = 'INDEXER_ALLOCATION_REWARDS_BY_DEPLOYMENT_ID__COUNT_ASC',
  INDEXER_ALLOCATION_REWARDS_BY_DEPLOYMENT_ID__COUNT_DESC = 'INDEXER_ALLOCATION_REWARDS_BY_DEPLOYMENT_ID__COUNT_DESC',
  INDEXER_ALLOCATION_REWARDS_COUNT_ASC = 'INDEXER_ALLOCATION_REWARDS_COUNT_ASC',
  INDEXER_ALLOCATION_REWARDS_COUNT_DESC = 'INDEXER_ALLOCATION_REWARDS_COUNT_DESC',
  INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_BURNT_ASC = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_BURNT_ASC',
  INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_BURNT_DESC = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_BURNT_DESC',
  INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_CREATE_AT_ASC = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_CREATE_AT_ASC',
  INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_CREATE_AT_DESC = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_CREATE_AT_DESC',
  INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_ERA_IDX_ASC = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_ERA_IDX_ASC',
  INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_ERA_IDX_DESC = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_ERA_IDX_DESC',
  INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_REWARD_ASC = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_REWARD_ASC',
  INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_REWARD_DESC = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_REWARD_DESC',
  INDEXER_ALLOCATION_REWARDS_MAX_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_REWARDS_MAX_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_REWARDS_MAX_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_REWARDS_MAX_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_REWARDS_MAX_BURNT_ASC = 'INDEXER_ALLOCATION_REWARDS_MAX_BURNT_ASC',
  INDEXER_ALLOCATION_REWARDS_MAX_BURNT_DESC = 'INDEXER_ALLOCATION_REWARDS_MAX_BURNT_DESC',
  INDEXER_ALLOCATION_REWARDS_MAX_CREATE_AT_ASC = 'INDEXER_ALLOCATION_REWARDS_MAX_CREATE_AT_ASC',
  INDEXER_ALLOCATION_REWARDS_MAX_CREATE_AT_DESC = 'INDEXER_ALLOCATION_REWARDS_MAX_CREATE_AT_DESC',
  INDEXER_ALLOCATION_REWARDS_MAX_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_MAX_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_MAX_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_MAX_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_MAX_ERA_IDX_ASC = 'INDEXER_ALLOCATION_REWARDS_MAX_ERA_IDX_ASC',
  INDEXER_ALLOCATION_REWARDS_MAX_ERA_IDX_DESC = 'INDEXER_ALLOCATION_REWARDS_MAX_ERA_IDX_DESC',
  INDEXER_ALLOCATION_REWARDS_MAX_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_MAX_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_MAX_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_MAX_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_MAX_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_MAX_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_MAX_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_MAX_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_MAX_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_MAX_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_MAX_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_MAX_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_MAX_REWARD_ASC = 'INDEXER_ALLOCATION_REWARDS_MAX_REWARD_ASC',
  INDEXER_ALLOCATION_REWARDS_MAX_REWARD_DESC = 'INDEXER_ALLOCATION_REWARDS_MAX_REWARD_DESC',
  INDEXER_ALLOCATION_REWARDS_MIN_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_REWARDS_MIN_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_REWARDS_MIN_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_REWARDS_MIN_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_REWARDS_MIN_BURNT_ASC = 'INDEXER_ALLOCATION_REWARDS_MIN_BURNT_ASC',
  INDEXER_ALLOCATION_REWARDS_MIN_BURNT_DESC = 'INDEXER_ALLOCATION_REWARDS_MIN_BURNT_DESC',
  INDEXER_ALLOCATION_REWARDS_MIN_CREATE_AT_ASC = 'INDEXER_ALLOCATION_REWARDS_MIN_CREATE_AT_ASC',
  INDEXER_ALLOCATION_REWARDS_MIN_CREATE_AT_DESC = 'INDEXER_ALLOCATION_REWARDS_MIN_CREATE_AT_DESC',
  INDEXER_ALLOCATION_REWARDS_MIN_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_MIN_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_MIN_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_MIN_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_MIN_ERA_IDX_ASC = 'INDEXER_ALLOCATION_REWARDS_MIN_ERA_IDX_ASC',
  INDEXER_ALLOCATION_REWARDS_MIN_ERA_IDX_DESC = 'INDEXER_ALLOCATION_REWARDS_MIN_ERA_IDX_DESC',
  INDEXER_ALLOCATION_REWARDS_MIN_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_MIN_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_MIN_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_MIN_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_MIN_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_MIN_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_MIN_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_MIN_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_MIN_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_MIN_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_MIN_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_MIN_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_MIN_REWARD_ASC = 'INDEXER_ALLOCATION_REWARDS_MIN_REWARD_ASC',
  INDEXER_ALLOCATION_REWARDS_MIN_REWARD_DESC = 'INDEXER_ALLOCATION_REWARDS_MIN_REWARD_DESC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_BURNT_ASC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_BURNT_ASC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_BURNT_DESC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_BURNT_DESC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_CREATE_AT_ASC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_CREATE_AT_ASC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_CREATE_AT_DESC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_CREATE_AT_DESC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_ERA_IDX_ASC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_ERA_IDX_ASC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_ERA_IDX_DESC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_ERA_IDX_DESC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_REWARD_ASC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_REWARD_ASC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_REWARD_DESC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_REWARD_DESC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_BURNT_ASC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_BURNT_ASC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_BURNT_DESC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_BURNT_DESC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_CREATE_AT_ASC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_CREATE_AT_ASC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_CREATE_AT_DESC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_CREATE_AT_DESC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_ERA_IDX_ASC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_ERA_IDX_ASC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_ERA_IDX_DESC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_ERA_IDX_DESC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_REWARD_ASC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_REWARD_ASC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_REWARD_DESC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_REWARD_DESC',
  INDEXER_ALLOCATION_REWARDS_SUM_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_REWARDS_SUM_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_REWARDS_SUM_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_REWARDS_SUM_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_REWARDS_SUM_BURNT_ASC = 'INDEXER_ALLOCATION_REWARDS_SUM_BURNT_ASC',
  INDEXER_ALLOCATION_REWARDS_SUM_BURNT_DESC = 'INDEXER_ALLOCATION_REWARDS_SUM_BURNT_DESC',
  INDEXER_ALLOCATION_REWARDS_SUM_CREATE_AT_ASC = 'INDEXER_ALLOCATION_REWARDS_SUM_CREATE_AT_ASC',
  INDEXER_ALLOCATION_REWARDS_SUM_CREATE_AT_DESC = 'INDEXER_ALLOCATION_REWARDS_SUM_CREATE_AT_DESC',
  INDEXER_ALLOCATION_REWARDS_SUM_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_SUM_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_SUM_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_SUM_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_SUM_ERA_IDX_ASC = 'INDEXER_ALLOCATION_REWARDS_SUM_ERA_IDX_ASC',
  INDEXER_ALLOCATION_REWARDS_SUM_ERA_IDX_DESC = 'INDEXER_ALLOCATION_REWARDS_SUM_ERA_IDX_DESC',
  INDEXER_ALLOCATION_REWARDS_SUM_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_SUM_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_SUM_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_SUM_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_SUM_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_SUM_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_SUM_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_SUM_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_SUM_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_SUM_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_SUM_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_SUM_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_SUM_REWARD_ASC = 'INDEXER_ALLOCATION_REWARDS_SUM_REWARD_ASC',
  INDEXER_ALLOCATION_REWARDS_SUM_REWARD_DESC = 'INDEXER_ALLOCATION_REWARDS_SUM_REWARD_DESC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_BURNT_ASC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_BURNT_ASC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_BURNT_DESC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_BURNT_DESC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_CREATE_AT_ASC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_CREATE_AT_ASC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_CREATE_AT_DESC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_CREATE_AT_DESC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_ERA_IDX_ASC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_ERA_IDX_ASC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_ERA_IDX_DESC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_ERA_IDX_DESC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_REWARD_ASC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_REWARD_ASC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_REWARD_DESC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_REWARD_DESC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_BURNT_ASC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_BURNT_ASC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_BURNT_DESC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_BURNT_DESC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_CREATE_AT_ASC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_CREATE_AT_ASC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_CREATE_AT_DESC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_CREATE_AT_DESC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_ERA_IDX_ASC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_ERA_IDX_ASC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_ERA_IDX_DESC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_ERA_IDX_DESC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_REWARD_ASC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_REWARD_ASC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_REWARD_DESC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_REWARD_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_CREATE_AT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_CREATE_AT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_CREATE_AT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_CREATE_AT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_TOTAL_BURNT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_TOTAL_BURNT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_TOTAL_BURNT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_TOTAL_BURNT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_TOTAL_REWARD_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_TOTAL_REWARD_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_TOTAL_REWARD_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_TOTAL_REWARD_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_UPDATE_AT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_UPDATE_AT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_UPDATE_AT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_UPDATE_AT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_BY_DEPLOYMENT_ID__COUNT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_BY_DEPLOYMENT_ID__COUNT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_BY_DEPLOYMENT_ID__COUNT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_BY_DEPLOYMENT_ID__COUNT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_COUNT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_COUNT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_COUNT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_COUNT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_CREATE_AT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_CREATE_AT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_CREATE_AT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_CREATE_AT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_TOTAL_BURNT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_TOTAL_BURNT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_TOTAL_BURNT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_TOTAL_BURNT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_TOTAL_REWARD_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_TOTAL_REWARD_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_TOTAL_REWARD_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_TOTAL_REWARD_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_UPDATE_AT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_UPDATE_AT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_UPDATE_AT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_UPDATE_AT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_CREATE_AT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_CREATE_AT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_CREATE_AT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_CREATE_AT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_TOTAL_BURNT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_TOTAL_BURNT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_TOTAL_BURNT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_TOTAL_BURNT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_TOTAL_REWARD_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_TOTAL_REWARD_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_TOTAL_REWARD_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_TOTAL_REWARD_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_UPDATE_AT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_UPDATE_AT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_UPDATE_AT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_UPDATE_AT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_CREATE_AT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_CREATE_AT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_CREATE_AT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_CREATE_AT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_TOTAL_BURNT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_TOTAL_BURNT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_TOTAL_BURNT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_TOTAL_BURNT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_TOTAL_REWARD_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_TOTAL_REWARD_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_TOTAL_REWARD_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_TOTAL_REWARD_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_UPDATE_AT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_UPDATE_AT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_UPDATE_AT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_UPDATE_AT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_CREATE_AT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_CREATE_AT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_CREATE_AT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_CREATE_AT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_TOTAL_BURNT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_TOTAL_BURNT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_TOTAL_BURNT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_TOTAL_BURNT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_TOTAL_REWARD_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_TOTAL_REWARD_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_TOTAL_REWARD_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_TOTAL_REWARD_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_UPDATE_AT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_UPDATE_AT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_UPDATE_AT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_UPDATE_AT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_CREATE_AT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_CREATE_AT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_CREATE_AT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_CREATE_AT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_TOTAL_BURNT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_TOTAL_BURNT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_TOTAL_BURNT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_TOTAL_BURNT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_TOTAL_REWARD_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_TOTAL_REWARD_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_TOTAL_REWARD_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_TOTAL_REWARD_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_UPDATE_AT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_UPDATE_AT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_UPDATE_AT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_UPDATE_AT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_CREATE_AT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_CREATE_AT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_CREATE_AT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_CREATE_AT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_TOTAL_BURNT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_TOTAL_BURNT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_TOTAL_BURNT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_TOTAL_BURNT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_TOTAL_REWARD_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_TOTAL_REWARD_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_TOTAL_REWARD_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_TOTAL_REWARD_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_UPDATE_AT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_UPDATE_AT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_UPDATE_AT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_UPDATE_AT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_CREATE_AT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_CREATE_AT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_CREATE_AT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_CREATE_AT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_TOTAL_BURNT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_TOTAL_BURNT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_TOTAL_BURNT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_TOTAL_BURNT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_TOTAL_REWARD_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_TOTAL_REWARD_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_TOTAL_REWARD_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_TOTAL_REWARD_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_UPDATE_AT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_UPDATE_AT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_UPDATE_AT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_UPDATE_AT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_CREATE_AT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_CREATE_AT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_CREATE_AT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_CREATE_AT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_TOTAL_BURNT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_TOTAL_BURNT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_TOTAL_BURNT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_TOTAL_BURNT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_TOTAL_REWARD_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_TOTAL_REWARD_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_TOTAL_REWARD_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_TOTAL_REWARD_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_UPDATE_AT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_UPDATE_AT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_UPDATE_AT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_UPDATE_AT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_AVERAGE_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_SUMMARIES_AVERAGE_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_SUMMARIES_AVERAGE_CREATE_AT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_CREATE_AT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_AVERAGE_CREATE_AT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_CREATE_AT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_AVERAGE_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_AVERAGE_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_AVERAGE_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_AVERAGE_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_AVERAGE_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_AVERAGE_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_AVERAGE_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_AVERAGE_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_AVERAGE_TOTAL_ADDED_ASC = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_TOTAL_ADDED_ASC',
  INDEXER_ALLOCATION_SUMMARIES_AVERAGE_TOTAL_ADDED_DESC = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_TOTAL_ADDED_DESC',
  INDEXER_ALLOCATION_SUMMARIES_AVERAGE_TOTAL_AMOUNT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_TOTAL_AMOUNT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_AVERAGE_TOTAL_AMOUNT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_TOTAL_AMOUNT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_AVERAGE_TOTAL_REMOVED_ASC = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_TOTAL_REMOVED_ASC',
  INDEXER_ALLOCATION_SUMMARIES_AVERAGE_TOTAL_REMOVED_DESC = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_TOTAL_REMOVED_DESC',
  INDEXER_ALLOCATION_SUMMARIES_AVERAGE_UPDATE_AT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_UPDATE_AT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_AVERAGE_UPDATE_AT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_UPDATE_AT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_BY_DEPLOYMENT_ID__COUNT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_BY_DEPLOYMENT_ID__COUNT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_BY_DEPLOYMENT_ID__COUNT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_BY_DEPLOYMENT_ID__COUNT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_COUNT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_COUNT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_COUNT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_COUNT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_CREATE_AT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_CREATE_AT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_CREATE_AT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_CREATE_AT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_TOTAL_ADDED_ASC = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_TOTAL_ADDED_ASC',
  INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_TOTAL_ADDED_DESC = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_TOTAL_ADDED_DESC',
  INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_TOTAL_AMOUNT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_TOTAL_AMOUNT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_TOTAL_AMOUNT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_TOTAL_AMOUNT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_TOTAL_REMOVED_ASC = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_TOTAL_REMOVED_ASC',
  INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_TOTAL_REMOVED_DESC = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_TOTAL_REMOVED_DESC',
  INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_UPDATE_AT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_UPDATE_AT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_UPDATE_AT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_UPDATE_AT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_MAX_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_SUMMARIES_MAX_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_SUMMARIES_MAX_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_SUMMARIES_MAX_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_SUMMARIES_MAX_CREATE_AT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_MAX_CREATE_AT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_MAX_CREATE_AT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_MAX_CREATE_AT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_MAX_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_MAX_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_MAX_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_MAX_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_MAX_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_MAX_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_MAX_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_MAX_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_MAX_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_MAX_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_MAX_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_MAX_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_MAX_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_MAX_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_MAX_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_MAX_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_MAX_TOTAL_ADDED_ASC = 'INDEXER_ALLOCATION_SUMMARIES_MAX_TOTAL_ADDED_ASC',
  INDEXER_ALLOCATION_SUMMARIES_MAX_TOTAL_ADDED_DESC = 'INDEXER_ALLOCATION_SUMMARIES_MAX_TOTAL_ADDED_DESC',
  INDEXER_ALLOCATION_SUMMARIES_MAX_TOTAL_AMOUNT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_MAX_TOTAL_AMOUNT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_MAX_TOTAL_AMOUNT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_MAX_TOTAL_AMOUNT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_MAX_TOTAL_REMOVED_ASC = 'INDEXER_ALLOCATION_SUMMARIES_MAX_TOTAL_REMOVED_ASC',
  INDEXER_ALLOCATION_SUMMARIES_MAX_TOTAL_REMOVED_DESC = 'INDEXER_ALLOCATION_SUMMARIES_MAX_TOTAL_REMOVED_DESC',
  INDEXER_ALLOCATION_SUMMARIES_MAX_UPDATE_AT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_MAX_UPDATE_AT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_MAX_UPDATE_AT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_MAX_UPDATE_AT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_MIN_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_SUMMARIES_MIN_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_SUMMARIES_MIN_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_SUMMARIES_MIN_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_SUMMARIES_MIN_CREATE_AT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_MIN_CREATE_AT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_MIN_CREATE_AT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_MIN_CREATE_AT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_MIN_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_MIN_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_MIN_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_MIN_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_MIN_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_MIN_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_MIN_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_MIN_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_MIN_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_MIN_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_MIN_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_MIN_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_MIN_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_MIN_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_MIN_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_MIN_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_MIN_TOTAL_ADDED_ASC = 'INDEXER_ALLOCATION_SUMMARIES_MIN_TOTAL_ADDED_ASC',
  INDEXER_ALLOCATION_SUMMARIES_MIN_TOTAL_ADDED_DESC = 'INDEXER_ALLOCATION_SUMMARIES_MIN_TOTAL_ADDED_DESC',
  INDEXER_ALLOCATION_SUMMARIES_MIN_TOTAL_AMOUNT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_MIN_TOTAL_AMOUNT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_MIN_TOTAL_AMOUNT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_MIN_TOTAL_AMOUNT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_MIN_TOTAL_REMOVED_ASC = 'INDEXER_ALLOCATION_SUMMARIES_MIN_TOTAL_REMOVED_ASC',
  INDEXER_ALLOCATION_SUMMARIES_MIN_TOTAL_REMOVED_DESC = 'INDEXER_ALLOCATION_SUMMARIES_MIN_TOTAL_REMOVED_DESC',
  INDEXER_ALLOCATION_SUMMARIES_MIN_UPDATE_AT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_MIN_UPDATE_AT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_MIN_UPDATE_AT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_MIN_UPDATE_AT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_CREATE_AT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_CREATE_AT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_CREATE_AT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_CREATE_AT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_TOTAL_ADDED_ASC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_TOTAL_ADDED_ASC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_TOTAL_ADDED_DESC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_TOTAL_ADDED_DESC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_TOTAL_AMOUNT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_TOTAL_AMOUNT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_TOTAL_AMOUNT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_TOTAL_AMOUNT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_TOTAL_REMOVED_ASC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_TOTAL_REMOVED_ASC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_TOTAL_REMOVED_DESC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_TOTAL_REMOVED_DESC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_UPDATE_AT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_UPDATE_AT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_UPDATE_AT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_UPDATE_AT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_CREATE_AT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_CREATE_AT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_CREATE_AT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_CREATE_AT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_TOTAL_ADDED_ASC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_TOTAL_ADDED_ASC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_TOTAL_ADDED_DESC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_TOTAL_ADDED_DESC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_TOTAL_AMOUNT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_TOTAL_AMOUNT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_TOTAL_AMOUNT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_TOTAL_AMOUNT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_TOTAL_REMOVED_ASC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_TOTAL_REMOVED_ASC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_TOTAL_REMOVED_DESC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_TOTAL_REMOVED_DESC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_UPDATE_AT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_UPDATE_AT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_UPDATE_AT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_UPDATE_AT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_SUM_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_SUMMARIES_SUM_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_SUMMARIES_SUM_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_SUMMARIES_SUM_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_SUMMARIES_SUM_CREATE_AT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_SUM_CREATE_AT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_SUM_CREATE_AT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_SUM_CREATE_AT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_SUM_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_SUM_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_SUM_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_SUM_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_SUM_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_SUM_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_SUM_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_SUM_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_SUM_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_SUM_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_SUM_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_SUM_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_SUM_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_SUM_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_SUM_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_SUM_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_SUM_TOTAL_ADDED_ASC = 'INDEXER_ALLOCATION_SUMMARIES_SUM_TOTAL_ADDED_ASC',
  INDEXER_ALLOCATION_SUMMARIES_SUM_TOTAL_ADDED_DESC = 'INDEXER_ALLOCATION_SUMMARIES_SUM_TOTAL_ADDED_DESC',
  INDEXER_ALLOCATION_SUMMARIES_SUM_TOTAL_AMOUNT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_SUM_TOTAL_AMOUNT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_SUM_TOTAL_AMOUNT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_SUM_TOTAL_AMOUNT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_SUM_TOTAL_REMOVED_ASC = 'INDEXER_ALLOCATION_SUMMARIES_SUM_TOTAL_REMOVED_ASC',
  INDEXER_ALLOCATION_SUMMARIES_SUM_TOTAL_REMOVED_DESC = 'INDEXER_ALLOCATION_SUMMARIES_SUM_TOTAL_REMOVED_DESC',
  INDEXER_ALLOCATION_SUMMARIES_SUM_UPDATE_AT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_SUM_UPDATE_AT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_SUM_UPDATE_AT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_SUM_UPDATE_AT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_CREATE_AT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_CREATE_AT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_CREATE_AT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_CREATE_AT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_TOTAL_ADDED_ASC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_TOTAL_ADDED_ASC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_TOTAL_ADDED_DESC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_TOTAL_ADDED_DESC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_TOTAL_AMOUNT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_TOTAL_AMOUNT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_TOTAL_AMOUNT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_TOTAL_AMOUNT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_TOTAL_REMOVED_ASC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_TOTAL_REMOVED_ASC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_TOTAL_REMOVED_DESC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_TOTAL_REMOVED_DESC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_UPDATE_AT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_UPDATE_AT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_UPDATE_AT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_UPDATE_AT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_CREATE_AT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_CREATE_AT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_CREATE_AT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_CREATE_AT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_TOTAL_ADDED_ASC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_TOTAL_ADDED_ASC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_TOTAL_ADDED_DESC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_TOTAL_ADDED_DESC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_TOTAL_AMOUNT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_TOTAL_AMOUNT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_TOTAL_AMOUNT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_TOTAL_AMOUNT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_TOTAL_REMOVED_ASC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_TOTAL_REMOVED_ASC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_TOTAL_REMOVED_DESC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_TOTAL_REMOVED_DESC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_UPDATE_AT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_UPDATE_AT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_UPDATE_AT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_UPDATE_AT_DESC',
  INDEXER_DEPLOYMENTS_BY_DEPLOYMENT_ID__COUNT_ASC = 'INDEXER_DEPLOYMENTS_BY_DEPLOYMENT_ID__COUNT_ASC',
  INDEXER_DEPLOYMENTS_BY_DEPLOYMENT_ID__COUNT_DESC = 'INDEXER_DEPLOYMENTS_BY_DEPLOYMENT_ID__COUNT_DESC',
  INDEXER_MISSED_LABORS_AVERAGE_BLOCK_RANGE_ASC = 'INDEXER_MISSED_LABORS_AVERAGE_BLOCK_RANGE_ASC',
  INDEXER_MISSED_LABORS_AVERAGE_BLOCK_RANGE_DESC = 'INDEXER_MISSED_LABORS_AVERAGE_BLOCK_RANGE_DESC',
  INDEXER_MISSED_LABORS_AVERAGE_CREATE_AT_ASC = 'INDEXER_MISSED_LABORS_AVERAGE_CREATE_AT_ASC',
  INDEXER_MISSED_LABORS_AVERAGE_CREATE_AT_DESC = 'INDEXER_MISSED_LABORS_AVERAGE_CREATE_AT_DESC',
  INDEXER_MISSED_LABORS_AVERAGE_DEPLOYMENT_ID_ASC = 'INDEXER_MISSED_LABORS_AVERAGE_DEPLOYMENT_ID_ASC',
  INDEXER_MISSED_LABORS_AVERAGE_DEPLOYMENT_ID_DESC = 'INDEXER_MISSED_LABORS_AVERAGE_DEPLOYMENT_ID_DESC',
  INDEXER_MISSED_LABORS_AVERAGE_ERA_IDX_ASC = 'INDEXER_MISSED_LABORS_AVERAGE_ERA_IDX_ASC',
  INDEXER_MISSED_LABORS_AVERAGE_ERA_IDX_DESC = 'INDEXER_MISSED_LABORS_AVERAGE_ERA_IDX_DESC',
  INDEXER_MISSED_LABORS_AVERAGE_ID_ASC = 'INDEXER_MISSED_LABORS_AVERAGE_ID_ASC',
  INDEXER_MISSED_LABORS_AVERAGE_ID_DESC = 'INDEXER_MISSED_LABORS_AVERAGE_ID_DESC',
  INDEXER_MISSED_LABORS_AVERAGE_INDEXER_ID_ASC = 'INDEXER_MISSED_LABORS_AVERAGE_INDEXER_ID_ASC',
  INDEXER_MISSED_LABORS_AVERAGE_INDEXER_ID_DESC = 'INDEXER_MISSED_LABORS_AVERAGE_INDEXER_ID_DESC',
  INDEXER_MISSED_LABORS_AVERAGE_MISSED_LABOR_ASC = 'INDEXER_MISSED_LABORS_AVERAGE_MISSED_LABOR_ASC',
  INDEXER_MISSED_LABORS_AVERAGE_MISSED_LABOR_DESC = 'INDEXER_MISSED_LABORS_AVERAGE_MISSED_LABOR_DESC',
  INDEXER_MISSED_LABORS_BY_DEPLOYMENT_ID__COUNT_ASC = 'INDEXER_MISSED_LABORS_BY_DEPLOYMENT_ID__COUNT_ASC',
  INDEXER_MISSED_LABORS_BY_DEPLOYMENT_ID__COUNT_DESC = 'INDEXER_MISSED_LABORS_BY_DEPLOYMENT_ID__COUNT_DESC',
  INDEXER_MISSED_LABORS_COUNT_ASC = 'INDEXER_MISSED_LABORS_COUNT_ASC',
  INDEXER_MISSED_LABORS_COUNT_DESC = 'INDEXER_MISSED_LABORS_COUNT_DESC',
  INDEXER_MISSED_LABORS_DISTINCT_COUNT_BLOCK_RANGE_ASC = 'INDEXER_MISSED_LABORS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  INDEXER_MISSED_LABORS_DISTINCT_COUNT_BLOCK_RANGE_DESC = 'INDEXER_MISSED_LABORS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  INDEXER_MISSED_LABORS_DISTINCT_COUNT_CREATE_AT_ASC = 'INDEXER_MISSED_LABORS_DISTINCT_COUNT_CREATE_AT_ASC',
  INDEXER_MISSED_LABORS_DISTINCT_COUNT_CREATE_AT_DESC = 'INDEXER_MISSED_LABORS_DISTINCT_COUNT_CREATE_AT_DESC',
  INDEXER_MISSED_LABORS_DISTINCT_COUNT_DEPLOYMENT_ID_ASC = 'INDEXER_MISSED_LABORS_DISTINCT_COUNT_DEPLOYMENT_ID_ASC',
  INDEXER_MISSED_LABORS_DISTINCT_COUNT_DEPLOYMENT_ID_DESC = 'INDEXER_MISSED_LABORS_DISTINCT_COUNT_DEPLOYMENT_ID_DESC',
  INDEXER_MISSED_LABORS_DISTINCT_COUNT_ERA_IDX_ASC = 'INDEXER_MISSED_LABORS_DISTINCT_COUNT_ERA_IDX_ASC',
  INDEXER_MISSED_LABORS_DISTINCT_COUNT_ERA_IDX_DESC = 'INDEXER_MISSED_LABORS_DISTINCT_COUNT_ERA_IDX_DESC',
  INDEXER_MISSED_LABORS_DISTINCT_COUNT_ID_ASC = 'INDEXER_MISSED_LABORS_DISTINCT_COUNT_ID_ASC',
  INDEXER_MISSED_LABORS_DISTINCT_COUNT_ID_DESC = 'INDEXER_MISSED_LABORS_DISTINCT_COUNT_ID_DESC',
  INDEXER_MISSED_LABORS_DISTINCT_COUNT_INDEXER_ID_ASC = 'INDEXER_MISSED_LABORS_DISTINCT_COUNT_INDEXER_ID_ASC',
  INDEXER_MISSED_LABORS_DISTINCT_COUNT_INDEXER_ID_DESC = 'INDEXER_MISSED_LABORS_DISTINCT_COUNT_INDEXER_ID_DESC',
  INDEXER_MISSED_LABORS_DISTINCT_COUNT_MISSED_LABOR_ASC = 'INDEXER_MISSED_LABORS_DISTINCT_COUNT_MISSED_LABOR_ASC',
  INDEXER_MISSED_LABORS_DISTINCT_COUNT_MISSED_LABOR_DESC = 'INDEXER_MISSED_LABORS_DISTINCT_COUNT_MISSED_LABOR_DESC',
  INDEXER_MISSED_LABORS_MAX_BLOCK_RANGE_ASC = 'INDEXER_MISSED_LABORS_MAX_BLOCK_RANGE_ASC',
  INDEXER_MISSED_LABORS_MAX_BLOCK_RANGE_DESC = 'INDEXER_MISSED_LABORS_MAX_BLOCK_RANGE_DESC',
  INDEXER_MISSED_LABORS_MAX_CREATE_AT_ASC = 'INDEXER_MISSED_LABORS_MAX_CREATE_AT_ASC',
  INDEXER_MISSED_LABORS_MAX_CREATE_AT_DESC = 'INDEXER_MISSED_LABORS_MAX_CREATE_AT_DESC',
  INDEXER_MISSED_LABORS_MAX_DEPLOYMENT_ID_ASC = 'INDEXER_MISSED_LABORS_MAX_DEPLOYMENT_ID_ASC',
  INDEXER_MISSED_LABORS_MAX_DEPLOYMENT_ID_DESC = 'INDEXER_MISSED_LABORS_MAX_DEPLOYMENT_ID_DESC',
  INDEXER_MISSED_LABORS_MAX_ERA_IDX_ASC = 'INDEXER_MISSED_LABORS_MAX_ERA_IDX_ASC',
  INDEXER_MISSED_LABORS_MAX_ERA_IDX_DESC = 'INDEXER_MISSED_LABORS_MAX_ERA_IDX_DESC',
  INDEXER_MISSED_LABORS_MAX_ID_ASC = 'INDEXER_MISSED_LABORS_MAX_ID_ASC',
  INDEXER_MISSED_LABORS_MAX_ID_DESC = 'INDEXER_MISSED_LABORS_MAX_ID_DESC',
  INDEXER_MISSED_LABORS_MAX_INDEXER_ID_ASC = 'INDEXER_MISSED_LABORS_MAX_INDEXER_ID_ASC',
  INDEXER_MISSED_LABORS_MAX_INDEXER_ID_DESC = 'INDEXER_MISSED_LABORS_MAX_INDEXER_ID_DESC',
  INDEXER_MISSED_LABORS_MAX_MISSED_LABOR_ASC = 'INDEXER_MISSED_LABORS_MAX_MISSED_LABOR_ASC',
  INDEXER_MISSED_LABORS_MAX_MISSED_LABOR_DESC = 'INDEXER_MISSED_LABORS_MAX_MISSED_LABOR_DESC',
  INDEXER_MISSED_LABORS_MIN_BLOCK_RANGE_ASC = 'INDEXER_MISSED_LABORS_MIN_BLOCK_RANGE_ASC',
  INDEXER_MISSED_LABORS_MIN_BLOCK_RANGE_DESC = 'INDEXER_MISSED_LABORS_MIN_BLOCK_RANGE_DESC',
  INDEXER_MISSED_LABORS_MIN_CREATE_AT_ASC = 'INDEXER_MISSED_LABORS_MIN_CREATE_AT_ASC',
  INDEXER_MISSED_LABORS_MIN_CREATE_AT_DESC = 'INDEXER_MISSED_LABORS_MIN_CREATE_AT_DESC',
  INDEXER_MISSED_LABORS_MIN_DEPLOYMENT_ID_ASC = 'INDEXER_MISSED_LABORS_MIN_DEPLOYMENT_ID_ASC',
  INDEXER_MISSED_LABORS_MIN_DEPLOYMENT_ID_DESC = 'INDEXER_MISSED_LABORS_MIN_DEPLOYMENT_ID_DESC',
  INDEXER_MISSED_LABORS_MIN_ERA_IDX_ASC = 'INDEXER_MISSED_LABORS_MIN_ERA_IDX_ASC',
  INDEXER_MISSED_LABORS_MIN_ERA_IDX_DESC = 'INDEXER_MISSED_LABORS_MIN_ERA_IDX_DESC',
  INDEXER_MISSED_LABORS_MIN_ID_ASC = 'INDEXER_MISSED_LABORS_MIN_ID_ASC',
  INDEXER_MISSED_LABORS_MIN_ID_DESC = 'INDEXER_MISSED_LABORS_MIN_ID_DESC',
  INDEXER_MISSED_LABORS_MIN_INDEXER_ID_ASC = 'INDEXER_MISSED_LABORS_MIN_INDEXER_ID_ASC',
  INDEXER_MISSED_LABORS_MIN_INDEXER_ID_DESC = 'INDEXER_MISSED_LABORS_MIN_INDEXER_ID_DESC',
  INDEXER_MISSED_LABORS_MIN_MISSED_LABOR_ASC = 'INDEXER_MISSED_LABORS_MIN_MISSED_LABOR_ASC',
  INDEXER_MISSED_LABORS_MIN_MISSED_LABOR_DESC = 'INDEXER_MISSED_LABORS_MIN_MISSED_LABOR_DESC',
  INDEXER_MISSED_LABORS_STDDEV_POPULATION_BLOCK_RANGE_ASC = 'INDEXER_MISSED_LABORS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  INDEXER_MISSED_LABORS_STDDEV_POPULATION_BLOCK_RANGE_DESC = 'INDEXER_MISSED_LABORS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  INDEXER_MISSED_LABORS_STDDEV_POPULATION_CREATE_AT_ASC = 'INDEXER_MISSED_LABORS_STDDEV_POPULATION_CREATE_AT_ASC',
  INDEXER_MISSED_LABORS_STDDEV_POPULATION_CREATE_AT_DESC = 'INDEXER_MISSED_LABORS_STDDEV_POPULATION_CREATE_AT_DESC',
  INDEXER_MISSED_LABORS_STDDEV_POPULATION_DEPLOYMENT_ID_ASC = 'INDEXER_MISSED_LABORS_STDDEV_POPULATION_DEPLOYMENT_ID_ASC',
  INDEXER_MISSED_LABORS_STDDEV_POPULATION_DEPLOYMENT_ID_DESC = 'INDEXER_MISSED_LABORS_STDDEV_POPULATION_DEPLOYMENT_ID_DESC',
  INDEXER_MISSED_LABORS_STDDEV_POPULATION_ERA_IDX_ASC = 'INDEXER_MISSED_LABORS_STDDEV_POPULATION_ERA_IDX_ASC',
  INDEXER_MISSED_LABORS_STDDEV_POPULATION_ERA_IDX_DESC = 'INDEXER_MISSED_LABORS_STDDEV_POPULATION_ERA_IDX_DESC',
  INDEXER_MISSED_LABORS_STDDEV_POPULATION_ID_ASC = 'INDEXER_MISSED_LABORS_STDDEV_POPULATION_ID_ASC',
  INDEXER_MISSED_LABORS_STDDEV_POPULATION_ID_DESC = 'INDEXER_MISSED_LABORS_STDDEV_POPULATION_ID_DESC',
  INDEXER_MISSED_LABORS_STDDEV_POPULATION_INDEXER_ID_ASC = 'INDEXER_MISSED_LABORS_STDDEV_POPULATION_INDEXER_ID_ASC',
  INDEXER_MISSED_LABORS_STDDEV_POPULATION_INDEXER_ID_DESC = 'INDEXER_MISSED_LABORS_STDDEV_POPULATION_INDEXER_ID_DESC',
  INDEXER_MISSED_LABORS_STDDEV_POPULATION_MISSED_LABOR_ASC = 'INDEXER_MISSED_LABORS_STDDEV_POPULATION_MISSED_LABOR_ASC',
  INDEXER_MISSED_LABORS_STDDEV_POPULATION_MISSED_LABOR_DESC = 'INDEXER_MISSED_LABORS_STDDEV_POPULATION_MISSED_LABOR_DESC',
  INDEXER_MISSED_LABORS_STDDEV_SAMPLE_BLOCK_RANGE_ASC = 'INDEXER_MISSED_LABORS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  INDEXER_MISSED_LABORS_STDDEV_SAMPLE_BLOCK_RANGE_DESC = 'INDEXER_MISSED_LABORS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  INDEXER_MISSED_LABORS_STDDEV_SAMPLE_CREATE_AT_ASC = 'INDEXER_MISSED_LABORS_STDDEV_SAMPLE_CREATE_AT_ASC',
  INDEXER_MISSED_LABORS_STDDEV_SAMPLE_CREATE_AT_DESC = 'INDEXER_MISSED_LABORS_STDDEV_SAMPLE_CREATE_AT_DESC',
  INDEXER_MISSED_LABORS_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC = 'INDEXER_MISSED_LABORS_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC',
  INDEXER_MISSED_LABORS_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC = 'INDEXER_MISSED_LABORS_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC',
  INDEXER_MISSED_LABORS_STDDEV_SAMPLE_ERA_IDX_ASC = 'INDEXER_MISSED_LABORS_STDDEV_SAMPLE_ERA_IDX_ASC',
  INDEXER_MISSED_LABORS_STDDEV_SAMPLE_ERA_IDX_DESC = 'INDEXER_MISSED_LABORS_STDDEV_SAMPLE_ERA_IDX_DESC',
  INDEXER_MISSED_LABORS_STDDEV_SAMPLE_ID_ASC = 'INDEXER_MISSED_LABORS_STDDEV_SAMPLE_ID_ASC',
  INDEXER_MISSED_LABORS_STDDEV_SAMPLE_ID_DESC = 'INDEXER_MISSED_LABORS_STDDEV_SAMPLE_ID_DESC',
  INDEXER_MISSED_LABORS_STDDEV_SAMPLE_INDEXER_ID_ASC = 'INDEXER_MISSED_LABORS_STDDEV_SAMPLE_INDEXER_ID_ASC',
  INDEXER_MISSED_LABORS_STDDEV_SAMPLE_INDEXER_ID_DESC = 'INDEXER_MISSED_LABORS_STDDEV_SAMPLE_INDEXER_ID_DESC',
  INDEXER_MISSED_LABORS_STDDEV_SAMPLE_MISSED_LABOR_ASC = 'INDEXER_MISSED_LABORS_STDDEV_SAMPLE_MISSED_LABOR_ASC',
  INDEXER_MISSED_LABORS_STDDEV_SAMPLE_MISSED_LABOR_DESC = 'INDEXER_MISSED_LABORS_STDDEV_SAMPLE_MISSED_LABOR_DESC',
  INDEXER_MISSED_LABORS_SUM_BLOCK_RANGE_ASC = 'INDEXER_MISSED_LABORS_SUM_BLOCK_RANGE_ASC',
  INDEXER_MISSED_LABORS_SUM_BLOCK_RANGE_DESC = 'INDEXER_MISSED_LABORS_SUM_BLOCK_RANGE_DESC',
  INDEXER_MISSED_LABORS_SUM_CREATE_AT_ASC = 'INDEXER_MISSED_LABORS_SUM_CREATE_AT_ASC',
  INDEXER_MISSED_LABORS_SUM_CREATE_AT_DESC = 'INDEXER_MISSED_LABORS_SUM_CREATE_AT_DESC',
  INDEXER_MISSED_LABORS_SUM_DEPLOYMENT_ID_ASC = 'INDEXER_MISSED_LABORS_SUM_DEPLOYMENT_ID_ASC',
  INDEXER_MISSED_LABORS_SUM_DEPLOYMENT_ID_DESC = 'INDEXER_MISSED_LABORS_SUM_DEPLOYMENT_ID_DESC',
  INDEXER_MISSED_LABORS_SUM_ERA_IDX_ASC = 'INDEXER_MISSED_LABORS_SUM_ERA_IDX_ASC',
  INDEXER_MISSED_LABORS_SUM_ERA_IDX_DESC = 'INDEXER_MISSED_LABORS_SUM_ERA_IDX_DESC',
  INDEXER_MISSED_LABORS_SUM_ID_ASC = 'INDEXER_MISSED_LABORS_SUM_ID_ASC',
  INDEXER_MISSED_LABORS_SUM_ID_DESC = 'INDEXER_MISSED_LABORS_SUM_ID_DESC',
  INDEXER_MISSED_LABORS_SUM_INDEXER_ID_ASC = 'INDEXER_MISSED_LABORS_SUM_INDEXER_ID_ASC',
  INDEXER_MISSED_LABORS_SUM_INDEXER_ID_DESC = 'INDEXER_MISSED_LABORS_SUM_INDEXER_ID_DESC',
  INDEXER_MISSED_LABORS_SUM_MISSED_LABOR_ASC = 'INDEXER_MISSED_LABORS_SUM_MISSED_LABOR_ASC',
  INDEXER_MISSED_LABORS_SUM_MISSED_LABOR_DESC = 'INDEXER_MISSED_LABORS_SUM_MISSED_LABOR_DESC',
  INDEXER_MISSED_LABORS_VARIANCE_POPULATION_BLOCK_RANGE_ASC = 'INDEXER_MISSED_LABORS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  INDEXER_MISSED_LABORS_VARIANCE_POPULATION_BLOCK_RANGE_DESC = 'INDEXER_MISSED_LABORS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  INDEXER_MISSED_LABORS_VARIANCE_POPULATION_CREATE_AT_ASC = 'INDEXER_MISSED_LABORS_VARIANCE_POPULATION_CREATE_AT_ASC',
  INDEXER_MISSED_LABORS_VARIANCE_POPULATION_CREATE_AT_DESC = 'INDEXER_MISSED_LABORS_VARIANCE_POPULATION_CREATE_AT_DESC',
  INDEXER_MISSED_LABORS_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC = 'INDEXER_MISSED_LABORS_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC',
  INDEXER_MISSED_LABORS_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC = 'INDEXER_MISSED_LABORS_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC',
  INDEXER_MISSED_LABORS_VARIANCE_POPULATION_ERA_IDX_ASC = 'INDEXER_MISSED_LABORS_VARIANCE_POPULATION_ERA_IDX_ASC',
  INDEXER_MISSED_LABORS_VARIANCE_POPULATION_ERA_IDX_DESC = 'INDEXER_MISSED_LABORS_VARIANCE_POPULATION_ERA_IDX_DESC',
  INDEXER_MISSED_LABORS_VARIANCE_POPULATION_ID_ASC = 'INDEXER_MISSED_LABORS_VARIANCE_POPULATION_ID_ASC',
  INDEXER_MISSED_LABORS_VARIANCE_POPULATION_ID_DESC = 'INDEXER_MISSED_LABORS_VARIANCE_POPULATION_ID_DESC',
  INDEXER_MISSED_LABORS_VARIANCE_POPULATION_INDEXER_ID_ASC = 'INDEXER_MISSED_LABORS_VARIANCE_POPULATION_INDEXER_ID_ASC',
  INDEXER_MISSED_LABORS_VARIANCE_POPULATION_INDEXER_ID_DESC = 'INDEXER_MISSED_LABORS_VARIANCE_POPULATION_INDEXER_ID_DESC',
  INDEXER_MISSED_LABORS_VARIANCE_POPULATION_MISSED_LABOR_ASC = 'INDEXER_MISSED_LABORS_VARIANCE_POPULATION_MISSED_LABOR_ASC',
  INDEXER_MISSED_LABORS_VARIANCE_POPULATION_MISSED_LABOR_DESC = 'INDEXER_MISSED_LABORS_VARIANCE_POPULATION_MISSED_LABOR_DESC',
  INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC = 'INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC = 'INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_CREATE_AT_ASC = 'INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_CREATE_AT_ASC',
  INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_CREATE_AT_DESC = 'INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_CREATE_AT_DESC',
  INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC = 'INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC',
  INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC = 'INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC',
  INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_ERA_IDX_ASC = 'INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_ERA_IDX_ASC',
  INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_ERA_IDX_DESC = 'INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_ERA_IDX_DESC',
  INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_ID_ASC = 'INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_ID_ASC',
  INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_ID_DESC = 'INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_ID_DESC',
  INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_INDEXER_ID_ASC = 'INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_INDEXER_ID_DESC = 'INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_MISSED_LABOR_ASC = 'INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_MISSED_LABOR_ASC',
  INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_MISSED_LABOR_DESC = 'INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_MISSED_LABOR_DESC',
  LAST_EVENT_ASC = 'LAST_EVENT_ASC',
  LAST_EVENT_DESC = 'LAST_EVENT_DESC',
  METADATA_ASC = 'METADATA_ASC',
  METADATA_DESC = 'METADATA_DESC',
  NATURAL = 'NATURAL',
  OFFERS_AVERAGE_ACCEPTED_ASC = 'OFFERS_AVERAGE_ACCEPTED_ASC',
  OFFERS_AVERAGE_ACCEPTED_DESC = 'OFFERS_AVERAGE_ACCEPTED_DESC',
  OFFERS_AVERAGE_BLOCK_RANGE_ASC = 'OFFERS_AVERAGE_BLOCK_RANGE_ASC',
  OFFERS_AVERAGE_BLOCK_RANGE_DESC = 'OFFERS_AVERAGE_BLOCK_RANGE_DESC',
  OFFERS_AVERAGE_CONSUMER_ASC = 'OFFERS_AVERAGE_CONSUMER_ASC',
  OFFERS_AVERAGE_CONSUMER_DESC = 'OFFERS_AVERAGE_CONSUMER_DESC',
  OFFERS_AVERAGE_CREATED_BLOCK_ASC = 'OFFERS_AVERAGE_CREATED_BLOCK_ASC',
  OFFERS_AVERAGE_CREATED_BLOCK_DESC = 'OFFERS_AVERAGE_CREATED_BLOCK_DESC',
  OFFERS_AVERAGE_DEPLOYMENT_ID_ASC = 'OFFERS_AVERAGE_DEPLOYMENT_ID_ASC',
  OFFERS_AVERAGE_DEPLOYMENT_ID_DESC = 'OFFERS_AVERAGE_DEPLOYMENT_ID_DESC',
  OFFERS_AVERAGE_DEPOSIT_ASC = 'OFFERS_AVERAGE_DEPOSIT_ASC',
  OFFERS_AVERAGE_DEPOSIT_DESC = 'OFFERS_AVERAGE_DEPOSIT_DESC',
  OFFERS_AVERAGE_EXPIRE_DATE_ASC = 'OFFERS_AVERAGE_EXPIRE_DATE_ASC',
  OFFERS_AVERAGE_EXPIRE_DATE_DESC = 'OFFERS_AVERAGE_EXPIRE_DATE_DESC',
  OFFERS_AVERAGE_ID_ASC = 'OFFERS_AVERAGE_ID_ASC',
  OFFERS_AVERAGE_ID_DESC = 'OFFERS_AVERAGE_ID_DESC',
  OFFERS_AVERAGE_LAST_EVENT_ASC = 'OFFERS_AVERAGE_LAST_EVENT_ASC',
  OFFERS_AVERAGE_LAST_EVENT_DESC = 'OFFERS_AVERAGE_LAST_EVENT_DESC',
  OFFERS_AVERAGE_LIMIT_ASC = 'OFFERS_AVERAGE_LIMIT_ASC',
  OFFERS_AVERAGE_LIMIT_DESC = 'OFFERS_AVERAGE_LIMIT_DESC',
  OFFERS_AVERAGE_MINIMUM_ACCEPT_HEIGHT_ASC = 'OFFERS_AVERAGE_MINIMUM_ACCEPT_HEIGHT_ASC',
  OFFERS_AVERAGE_MINIMUM_ACCEPT_HEIGHT_DESC = 'OFFERS_AVERAGE_MINIMUM_ACCEPT_HEIGHT_DESC',
  OFFERS_AVERAGE_MINIMUM_STAKING_AMOUNT_ASC = 'OFFERS_AVERAGE_MINIMUM_STAKING_AMOUNT_ASC',
  OFFERS_AVERAGE_MINIMUM_STAKING_AMOUNT_DESC = 'OFFERS_AVERAGE_MINIMUM_STAKING_AMOUNT_DESC',
  OFFERS_AVERAGE_PLAN_TEMPLATE_ID_ASC = 'OFFERS_AVERAGE_PLAN_TEMPLATE_ID_ASC',
  OFFERS_AVERAGE_PLAN_TEMPLATE_ID_DESC = 'OFFERS_AVERAGE_PLAN_TEMPLATE_ID_DESC',
  OFFERS_AVERAGE_REACH_LIMIT_ASC = 'OFFERS_AVERAGE_REACH_LIMIT_ASC',
  OFFERS_AVERAGE_REACH_LIMIT_DESC = 'OFFERS_AVERAGE_REACH_LIMIT_DESC',
  OFFERS_AVERAGE_WITHDRAWN_ASC = 'OFFERS_AVERAGE_WITHDRAWN_ASC',
  OFFERS_AVERAGE_WITHDRAWN_DESC = 'OFFERS_AVERAGE_WITHDRAWN_DESC',
  OFFERS_AVERAGE_WITHDRAW_PENALTY_ASC = 'OFFERS_AVERAGE_WITHDRAW_PENALTY_ASC',
  OFFERS_AVERAGE_WITHDRAW_PENALTY_DESC = 'OFFERS_AVERAGE_WITHDRAW_PENALTY_DESC',
  OFFERS_BY_DEPLOYMENT_ID__COUNT_ASC = 'OFFERS_BY_DEPLOYMENT_ID__COUNT_ASC',
  OFFERS_BY_DEPLOYMENT_ID__COUNT_DESC = 'OFFERS_BY_DEPLOYMENT_ID__COUNT_DESC',
  OFFERS_COUNT_ASC = 'OFFERS_COUNT_ASC',
  OFFERS_COUNT_DESC = 'OFFERS_COUNT_DESC',
  OFFERS_DISTINCT_COUNT_ACCEPTED_ASC = 'OFFERS_DISTINCT_COUNT_ACCEPTED_ASC',
  OFFERS_DISTINCT_COUNT_ACCEPTED_DESC = 'OFFERS_DISTINCT_COUNT_ACCEPTED_DESC',
  OFFERS_DISTINCT_COUNT_BLOCK_RANGE_ASC = 'OFFERS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  OFFERS_DISTINCT_COUNT_BLOCK_RANGE_DESC = 'OFFERS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  OFFERS_DISTINCT_COUNT_CONSUMER_ASC = 'OFFERS_DISTINCT_COUNT_CONSUMER_ASC',
  OFFERS_DISTINCT_COUNT_CONSUMER_DESC = 'OFFERS_DISTINCT_COUNT_CONSUMER_DESC',
  OFFERS_DISTINCT_COUNT_CREATED_BLOCK_ASC = 'OFFERS_DISTINCT_COUNT_CREATED_BLOCK_ASC',
  OFFERS_DISTINCT_COUNT_CREATED_BLOCK_DESC = 'OFFERS_DISTINCT_COUNT_CREATED_BLOCK_DESC',
  OFFERS_DISTINCT_COUNT_DEPLOYMENT_ID_ASC = 'OFFERS_DISTINCT_COUNT_DEPLOYMENT_ID_ASC',
  OFFERS_DISTINCT_COUNT_DEPLOYMENT_ID_DESC = 'OFFERS_DISTINCT_COUNT_DEPLOYMENT_ID_DESC',
  OFFERS_DISTINCT_COUNT_DEPOSIT_ASC = 'OFFERS_DISTINCT_COUNT_DEPOSIT_ASC',
  OFFERS_DISTINCT_COUNT_DEPOSIT_DESC = 'OFFERS_DISTINCT_COUNT_DEPOSIT_DESC',
  OFFERS_DISTINCT_COUNT_EXPIRE_DATE_ASC = 'OFFERS_DISTINCT_COUNT_EXPIRE_DATE_ASC',
  OFFERS_DISTINCT_COUNT_EXPIRE_DATE_DESC = 'OFFERS_DISTINCT_COUNT_EXPIRE_DATE_DESC',
  OFFERS_DISTINCT_COUNT_ID_ASC = 'OFFERS_DISTINCT_COUNT_ID_ASC',
  OFFERS_DISTINCT_COUNT_ID_DESC = 'OFFERS_DISTINCT_COUNT_ID_DESC',
  OFFERS_DISTINCT_COUNT_LAST_EVENT_ASC = 'OFFERS_DISTINCT_COUNT_LAST_EVENT_ASC',
  OFFERS_DISTINCT_COUNT_LAST_EVENT_DESC = 'OFFERS_DISTINCT_COUNT_LAST_EVENT_DESC',
  OFFERS_DISTINCT_COUNT_LIMIT_ASC = 'OFFERS_DISTINCT_COUNT_LIMIT_ASC',
  OFFERS_DISTINCT_COUNT_LIMIT_DESC = 'OFFERS_DISTINCT_COUNT_LIMIT_DESC',
  OFFERS_DISTINCT_COUNT_MINIMUM_ACCEPT_HEIGHT_ASC = 'OFFERS_DISTINCT_COUNT_MINIMUM_ACCEPT_HEIGHT_ASC',
  OFFERS_DISTINCT_COUNT_MINIMUM_ACCEPT_HEIGHT_DESC = 'OFFERS_DISTINCT_COUNT_MINIMUM_ACCEPT_HEIGHT_DESC',
  OFFERS_DISTINCT_COUNT_MINIMUM_STAKING_AMOUNT_ASC = 'OFFERS_DISTINCT_COUNT_MINIMUM_STAKING_AMOUNT_ASC',
  OFFERS_DISTINCT_COUNT_MINIMUM_STAKING_AMOUNT_DESC = 'OFFERS_DISTINCT_COUNT_MINIMUM_STAKING_AMOUNT_DESC',
  OFFERS_DISTINCT_COUNT_PLAN_TEMPLATE_ID_ASC = 'OFFERS_DISTINCT_COUNT_PLAN_TEMPLATE_ID_ASC',
  OFFERS_DISTINCT_COUNT_PLAN_TEMPLATE_ID_DESC = 'OFFERS_DISTINCT_COUNT_PLAN_TEMPLATE_ID_DESC',
  OFFERS_DISTINCT_COUNT_REACH_LIMIT_ASC = 'OFFERS_DISTINCT_COUNT_REACH_LIMIT_ASC',
  OFFERS_DISTINCT_COUNT_REACH_LIMIT_DESC = 'OFFERS_DISTINCT_COUNT_REACH_LIMIT_DESC',
  OFFERS_DISTINCT_COUNT_WITHDRAWN_ASC = 'OFFERS_DISTINCT_COUNT_WITHDRAWN_ASC',
  OFFERS_DISTINCT_COUNT_WITHDRAWN_DESC = 'OFFERS_DISTINCT_COUNT_WITHDRAWN_DESC',
  OFFERS_DISTINCT_COUNT_WITHDRAW_PENALTY_ASC = 'OFFERS_DISTINCT_COUNT_WITHDRAW_PENALTY_ASC',
  OFFERS_DISTINCT_COUNT_WITHDRAW_PENALTY_DESC = 'OFFERS_DISTINCT_COUNT_WITHDRAW_PENALTY_DESC',
  OFFERS_MAX_ACCEPTED_ASC = 'OFFERS_MAX_ACCEPTED_ASC',
  OFFERS_MAX_ACCEPTED_DESC = 'OFFERS_MAX_ACCEPTED_DESC',
  OFFERS_MAX_BLOCK_RANGE_ASC = 'OFFERS_MAX_BLOCK_RANGE_ASC',
  OFFERS_MAX_BLOCK_RANGE_DESC = 'OFFERS_MAX_BLOCK_RANGE_DESC',
  OFFERS_MAX_CONSUMER_ASC = 'OFFERS_MAX_CONSUMER_ASC',
  OFFERS_MAX_CONSUMER_DESC = 'OFFERS_MAX_CONSUMER_DESC',
  OFFERS_MAX_CREATED_BLOCK_ASC = 'OFFERS_MAX_CREATED_BLOCK_ASC',
  OFFERS_MAX_CREATED_BLOCK_DESC = 'OFFERS_MAX_CREATED_BLOCK_DESC',
  OFFERS_MAX_DEPLOYMENT_ID_ASC = 'OFFERS_MAX_DEPLOYMENT_ID_ASC',
  OFFERS_MAX_DEPLOYMENT_ID_DESC = 'OFFERS_MAX_DEPLOYMENT_ID_DESC',
  OFFERS_MAX_DEPOSIT_ASC = 'OFFERS_MAX_DEPOSIT_ASC',
  OFFERS_MAX_DEPOSIT_DESC = 'OFFERS_MAX_DEPOSIT_DESC',
  OFFERS_MAX_EXPIRE_DATE_ASC = 'OFFERS_MAX_EXPIRE_DATE_ASC',
  OFFERS_MAX_EXPIRE_DATE_DESC = 'OFFERS_MAX_EXPIRE_DATE_DESC',
  OFFERS_MAX_ID_ASC = 'OFFERS_MAX_ID_ASC',
  OFFERS_MAX_ID_DESC = 'OFFERS_MAX_ID_DESC',
  OFFERS_MAX_LAST_EVENT_ASC = 'OFFERS_MAX_LAST_EVENT_ASC',
  OFFERS_MAX_LAST_EVENT_DESC = 'OFFERS_MAX_LAST_EVENT_DESC',
  OFFERS_MAX_LIMIT_ASC = 'OFFERS_MAX_LIMIT_ASC',
  OFFERS_MAX_LIMIT_DESC = 'OFFERS_MAX_LIMIT_DESC',
  OFFERS_MAX_MINIMUM_ACCEPT_HEIGHT_ASC = 'OFFERS_MAX_MINIMUM_ACCEPT_HEIGHT_ASC',
  OFFERS_MAX_MINIMUM_ACCEPT_HEIGHT_DESC = 'OFFERS_MAX_MINIMUM_ACCEPT_HEIGHT_DESC',
  OFFERS_MAX_MINIMUM_STAKING_AMOUNT_ASC = 'OFFERS_MAX_MINIMUM_STAKING_AMOUNT_ASC',
  OFFERS_MAX_MINIMUM_STAKING_AMOUNT_DESC = 'OFFERS_MAX_MINIMUM_STAKING_AMOUNT_DESC',
  OFFERS_MAX_PLAN_TEMPLATE_ID_ASC = 'OFFERS_MAX_PLAN_TEMPLATE_ID_ASC',
  OFFERS_MAX_PLAN_TEMPLATE_ID_DESC = 'OFFERS_MAX_PLAN_TEMPLATE_ID_DESC',
  OFFERS_MAX_REACH_LIMIT_ASC = 'OFFERS_MAX_REACH_LIMIT_ASC',
  OFFERS_MAX_REACH_LIMIT_DESC = 'OFFERS_MAX_REACH_LIMIT_DESC',
  OFFERS_MAX_WITHDRAWN_ASC = 'OFFERS_MAX_WITHDRAWN_ASC',
  OFFERS_MAX_WITHDRAWN_DESC = 'OFFERS_MAX_WITHDRAWN_DESC',
  OFFERS_MAX_WITHDRAW_PENALTY_ASC = 'OFFERS_MAX_WITHDRAW_PENALTY_ASC',
  OFFERS_MAX_WITHDRAW_PENALTY_DESC = 'OFFERS_MAX_WITHDRAW_PENALTY_DESC',
  OFFERS_MIN_ACCEPTED_ASC = 'OFFERS_MIN_ACCEPTED_ASC',
  OFFERS_MIN_ACCEPTED_DESC = 'OFFERS_MIN_ACCEPTED_DESC',
  OFFERS_MIN_BLOCK_RANGE_ASC = 'OFFERS_MIN_BLOCK_RANGE_ASC',
  OFFERS_MIN_BLOCK_RANGE_DESC = 'OFFERS_MIN_BLOCK_RANGE_DESC',
  OFFERS_MIN_CONSUMER_ASC = 'OFFERS_MIN_CONSUMER_ASC',
  OFFERS_MIN_CONSUMER_DESC = 'OFFERS_MIN_CONSUMER_DESC',
  OFFERS_MIN_CREATED_BLOCK_ASC = 'OFFERS_MIN_CREATED_BLOCK_ASC',
  OFFERS_MIN_CREATED_BLOCK_DESC = 'OFFERS_MIN_CREATED_BLOCK_DESC',
  OFFERS_MIN_DEPLOYMENT_ID_ASC = 'OFFERS_MIN_DEPLOYMENT_ID_ASC',
  OFFERS_MIN_DEPLOYMENT_ID_DESC = 'OFFERS_MIN_DEPLOYMENT_ID_DESC',
  OFFERS_MIN_DEPOSIT_ASC = 'OFFERS_MIN_DEPOSIT_ASC',
  OFFERS_MIN_DEPOSIT_DESC = 'OFFERS_MIN_DEPOSIT_DESC',
  OFFERS_MIN_EXPIRE_DATE_ASC = 'OFFERS_MIN_EXPIRE_DATE_ASC',
  OFFERS_MIN_EXPIRE_DATE_DESC = 'OFFERS_MIN_EXPIRE_DATE_DESC',
  OFFERS_MIN_ID_ASC = 'OFFERS_MIN_ID_ASC',
  OFFERS_MIN_ID_DESC = 'OFFERS_MIN_ID_DESC',
  OFFERS_MIN_LAST_EVENT_ASC = 'OFFERS_MIN_LAST_EVENT_ASC',
  OFFERS_MIN_LAST_EVENT_DESC = 'OFFERS_MIN_LAST_EVENT_DESC',
  OFFERS_MIN_LIMIT_ASC = 'OFFERS_MIN_LIMIT_ASC',
  OFFERS_MIN_LIMIT_DESC = 'OFFERS_MIN_LIMIT_DESC',
  OFFERS_MIN_MINIMUM_ACCEPT_HEIGHT_ASC = 'OFFERS_MIN_MINIMUM_ACCEPT_HEIGHT_ASC',
  OFFERS_MIN_MINIMUM_ACCEPT_HEIGHT_DESC = 'OFFERS_MIN_MINIMUM_ACCEPT_HEIGHT_DESC',
  OFFERS_MIN_MINIMUM_STAKING_AMOUNT_ASC = 'OFFERS_MIN_MINIMUM_STAKING_AMOUNT_ASC',
  OFFERS_MIN_MINIMUM_STAKING_AMOUNT_DESC = 'OFFERS_MIN_MINIMUM_STAKING_AMOUNT_DESC',
  OFFERS_MIN_PLAN_TEMPLATE_ID_ASC = 'OFFERS_MIN_PLAN_TEMPLATE_ID_ASC',
  OFFERS_MIN_PLAN_TEMPLATE_ID_DESC = 'OFFERS_MIN_PLAN_TEMPLATE_ID_DESC',
  OFFERS_MIN_REACH_LIMIT_ASC = 'OFFERS_MIN_REACH_LIMIT_ASC',
  OFFERS_MIN_REACH_LIMIT_DESC = 'OFFERS_MIN_REACH_LIMIT_DESC',
  OFFERS_MIN_WITHDRAWN_ASC = 'OFFERS_MIN_WITHDRAWN_ASC',
  OFFERS_MIN_WITHDRAWN_DESC = 'OFFERS_MIN_WITHDRAWN_DESC',
  OFFERS_MIN_WITHDRAW_PENALTY_ASC = 'OFFERS_MIN_WITHDRAW_PENALTY_ASC',
  OFFERS_MIN_WITHDRAW_PENALTY_DESC = 'OFFERS_MIN_WITHDRAW_PENALTY_DESC',
  OFFERS_STDDEV_POPULATION_ACCEPTED_ASC = 'OFFERS_STDDEV_POPULATION_ACCEPTED_ASC',
  OFFERS_STDDEV_POPULATION_ACCEPTED_DESC = 'OFFERS_STDDEV_POPULATION_ACCEPTED_DESC',
  OFFERS_STDDEV_POPULATION_BLOCK_RANGE_ASC = 'OFFERS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  OFFERS_STDDEV_POPULATION_BLOCK_RANGE_DESC = 'OFFERS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  OFFERS_STDDEV_POPULATION_CONSUMER_ASC = 'OFFERS_STDDEV_POPULATION_CONSUMER_ASC',
  OFFERS_STDDEV_POPULATION_CONSUMER_DESC = 'OFFERS_STDDEV_POPULATION_CONSUMER_DESC',
  OFFERS_STDDEV_POPULATION_CREATED_BLOCK_ASC = 'OFFERS_STDDEV_POPULATION_CREATED_BLOCK_ASC',
  OFFERS_STDDEV_POPULATION_CREATED_BLOCK_DESC = 'OFFERS_STDDEV_POPULATION_CREATED_BLOCK_DESC',
  OFFERS_STDDEV_POPULATION_DEPLOYMENT_ID_ASC = 'OFFERS_STDDEV_POPULATION_DEPLOYMENT_ID_ASC',
  OFFERS_STDDEV_POPULATION_DEPLOYMENT_ID_DESC = 'OFFERS_STDDEV_POPULATION_DEPLOYMENT_ID_DESC',
  OFFERS_STDDEV_POPULATION_DEPOSIT_ASC = 'OFFERS_STDDEV_POPULATION_DEPOSIT_ASC',
  OFFERS_STDDEV_POPULATION_DEPOSIT_DESC = 'OFFERS_STDDEV_POPULATION_DEPOSIT_DESC',
  OFFERS_STDDEV_POPULATION_EXPIRE_DATE_ASC = 'OFFERS_STDDEV_POPULATION_EXPIRE_DATE_ASC',
  OFFERS_STDDEV_POPULATION_EXPIRE_DATE_DESC = 'OFFERS_STDDEV_POPULATION_EXPIRE_DATE_DESC',
  OFFERS_STDDEV_POPULATION_ID_ASC = 'OFFERS_STDDEV_POPULATION_ID_ASC',
  OFFERS_STDDEV_POPULATION_ID_DESC = 'OFFERS_STDDEV_POPULATION_ID_DESC',
  OFFERS_STDDEV_POPULATION_LAST_EVENT_ASC = 'OFFERS_STDDEV_POPULATION_LAST_EVENT_ASC',
  OFFERS_STDDEV_POPULATION_LAST_EVENT_DESC = 'OFFERS_STDDEV_POPULATION_LAST_EVENT_DESC',
  OFFERS_STDDEV_POPULATION_LIMIT_ASC = 'OFFERS_STDDEV_POPULATION_LIMIT_ASC',
  OFFERS_STDDEV_POPULATION_LIMIT_DESC = 'OFFERS_STDDEV_POPULATION_LIMIT_DESC',
  OFFERS_STDDEV_POPULATION_MINIMUM_ACCEPT_HEIGHT_ASC = 'OFFERS_STDDEV_POPULATION_MINIMUM_ACCEPT_HEIGHT_ASC',
  OFFERS_STDDEV_POPULATION_MINIMUM_ACCEPT_HEIGHT_DESC = 'OFFERS_STDDEV_POPULATION_MINIMUM_ACCEPT_HEIGHT_DESC',
  OFFERS_STDDEV_POPULATION_MINIMUM_STAKING_AMOUNT_ASC = 'OFFERS_STDDEV_POPULATION_MINIMUM_STAKING_AMOUNT_ASC',
  OFFERS_STDDEV_POPULATION_MINIMUM_STAKING_AMOUNT_DESC = 'OFFERS_STDDEV_POPULATION_MINIMUM_STAKING_AMOUNT_DESC',
  OFFERS_STDDEV_POPULATION_PLAN_TEMPLATE_ID_ASC = 'OFFERS_STDDEV_POPULATION_PLAN_TEMPLATE_ID_ASC',
  OFFERS_STDDEV_POPULATION_PLAN_TEMPLATE_ID_DESC = 'OFFERS_STDDEV_POPULATION_PLAN_TEMPLATE_ID_DESC',
  OFFERS_STDDEV_POPULATION_REACH_LIMIT_ASC = 'OFFERS_STDDEV_POPULATION_REACH_LIMIT_ASC',
  OFFERS_STDDEV_POPULATION_REACH_LIMIT_DESC = 'OFFERS_STDDEV_POPULATION_REACH_LIMIT_DESC',
  OFFERS_STDDEV_POPULATION_WITHDRAWN_ASC = 'OFFERS_STDDEV_POPULATION_WITHDRAWN_ASC',
  OFFERS_STDDEV_POPULATION_WITHDRAWN_DESC = 'OFFERS_STDDEV_POPULATION_WITHDRAWN_DESC',
  OFFERS_STDDEV_POPULATION_WITHDRAW_PENALTY_ASC = 'OFFERS_STDDEV_POPULATION_WITHDRAW_PENALTY_ASC',
  OFFERS_STDDEV_POPULATION_WITHDRAW_PENALTY_DESC = 'OFFERS_STDDEV_POPULATION_WITHDRAW_PENALTY_DESC',
  OFFERS_STDDEV_SAMPLE_ACCEPTED_ASC = 'OFFERS_STDDEV_SAMPLE_ACCEPTED_ASC',
  OFFERS_STDDEV_SAMPLE_ACCEPTED_DESC = 'OFFERS_STDDEV_SAMPLE_ACCEPTED_DESC',
  OFFERS_STDDEV_SAMPLE_BLOCK_RANGE_ASC = 'OFFERS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  OFFERS_STDDEV_SAMPLE_BLOCK_RANGE_DESC = 'OFFERS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  OFFERS_STDDEV_SAMPLE_CONSUMER_ASC = 'OFFERS_STDDEV_SAMPLE_CONSUMER_ASC',
  OFFERS_STDDEV_SAMPLE_CONSUMER_DESC = 'OFFERS_STDDEV_SAMPLE_CONSUMER_DESC',
  OFFERS_STDDEV_SAMPLE_CREATED_BLOCK_ASC = 'OFFERS_STDDEV_SAMPLE_CREATED_BLOCK_ASC',
  OFFERS_STDDEV_SAMPLE_CREATED_BLOCK_DESC = 'OFFERS_STDDEV_SAMPLE_CREATED_BLOCK_DESC',
  OFFERS_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC = 'OFFERS_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC',
  OFFERS_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC = 'OFFERS_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC',
  OFFERS_STDDEV_SAMPLE_DEPOSIT_ASC = 'OFFERS_STDDEV_SAMPLE_DEPOSIT_ASC',
  OFFERS_STDDEV_SAMPLE_DEPOSIT_DESC = 'OFFERS_STDDEV_SAMPLE_DEPOSIT_DESC',
  OFFERS_STDDEV_SAMPLE_EXPIRE_DATE_ASC = 'OFFERS_STDDEV_SAMPLE_EXPIRE_DATE_ASC',
  OFFERS_STDDEV_SAMPLE_EXPIRE_DATE_DESC = 'OFFERS_STDDEV_SAMPLE_EXPIRE_DATE_DESC',
  OFFERS_STDDEV_SAMPLE_ID_ASC = 'OFFERS_STDDEV_SAMPLE_ID_ASC',
  OFFERS_STDDEV_SAMPLE_ID_DESC = 'OFFERS_STDDEV_SAMPLE_ID_DESC',
  OFFERS_STDDEV_SAMPLE_LAST_EVENT_ASC = 'OFFERS_STDDEV_SAMPLE_LAST_EVENT_ASC',
  OFFERS_STDDEV_SAMPLE_LAST_EVENT_DESC = 'OFFERS_STDDEV_SAMPLE_LAST_EVENT_DESC',
  OFFERS_STDDEV_SAMPLE_LIMIT_ASC = 'OFFERS_STDDEV_SAMPLE_LIMIT_ASC',
  OFFERS_STDDEV_SAMPLE_LIMIT_DESC = 'OFFERS_STDDEV_SAMPLE_LIMIT_DESC',
  OFFERS_STDDEV_SAMPLE_MINIMUM_ACCEPT_HEIGHT_ASC = 'OFFERS_STDDEV_SAMPLE_MINIMUM_ACCEPT_HEIGHT_ASC',
  OFFERS_STDDEV_SAMPLE_MINIMUM_ACCEPT_HEIGHT_DESC = 'OFFERS_STDDEV_SAMPLE_MINIMUM_ACCEPT_HEIGHT_DESC',
  OFFERS_STDDEV_SAMPLE_MINIMUM_STAKING_AMOUNT_ASC = 'OFFERS_STDDEV_SAMPLE_MINIMUM_STAKING_AMOUNT_ASC',
  OFFERS_STDDEV_SAMPLE_MINIMUM_STAKING_AMOUNT_DESC = 'OFFERS_STDDEV_SAMPLE_MINIMUM_STAKING_AMOUNT_DESC',
  OFFERS_STDDEV_SAMPLE_PLAN_TEMPLATE_ID_ASC = 'OFFERS_STDDEV_SAMPLE_PLAN_TEMPLATE_ID_ASC',
  OFFERS_STDDEV_SAMPLE_PLAN_TEMPLATE_ID_DESC = 'OFFERS_STDDEV_SAMPLE_PLAN_TEMPLATE_ID_DESC',
  OFFERS_STDDEV_SAMPLE_REACH_LIMIT_ASC = 'OFFERS_STDDEV_SAMPLE_REACH_LIMIT_ASC',
  OFFERS_STDDEV_SAMPLE_REACH_LIMIT_DESC = 'OFFERS_STDDEV_SAMPLE_REACH_LIMIT_DESC',
  OFFERS_STDDEV_SAMPLE_WITHDRAWN_ASC = 'OFFERS_STDDEV_SAMPLE_WITHDRAWN_ASC',
  OFFERS_STDDEV_SAMPLE_WITHDRAWN_DESC = 'OFFERS_STDDEV_SAMPLE_WITHDRAWN_DESC',
  OFFERS_STDDEV_SAMPLE_WITHDRAW_PENALTY_ASC = 'OFFERS_STDDEV_SAMPLE_WITHDRAW_PENALTY_ASC',
  OFFERS_STDDEV_SAMPLE_WITHDRAW_PENALTY_DESC = 'OFFERS_STDDEV_SAMPLE_WITHDRAW_PENALTY_DESC',
  OFFERS_SUM_ACCEPTED_ASC = 'OFFERS_SUM_ACCEPTED_ASC',
  OFFERS_SUM_ACCEPTED_DESC = 'OFFERS_SUM_ACCEPTED_DESC',
  OFFERS_SUM_BLOCK_RANGE_ASC = 'OFFERS_SUM_BLOCK_RANGE_ASC',
  OFFERS_SUM_BLOCK_RANGE_DESC = 'OFFERS_SUM_BLOCK_RANGE_DESC',
  OFFERS_SUM_CONSUMER_ASC = 'OFFERS_SUM_CONSUMER_ASC',
  OFFERS_SUM_CONSUMER_DESC = 'OFFERS_SUM_CONSUMER_DESC',
  OFFERS_SUM_CREATED_BLOCK_ASC = 'OFFERS_SUM_CREATED_BLOCK_ASC',
  OFFERS_SUM_CREATED_BLOCK_DESC = 'OFFERS_SUM_CREATED_BLOCK_DESC',
  OFFERS_SUM_DEPLOYMENT_ID_ASC = 'OFFERS_SUM_DEPLOYMENT_ID_ASC',
  OFFERS_SUM_DEPLOYMENT_ID_DESC = 'OFFERS_SUM_DEPLOYMENT_ID_DESC',
  OFFERS_SUM_DEPOSIT_ASC = 'OFFERS_SUM_DEPOSIT_ASC',
  OFFERS_SUM_DEPOSIT_DESC = 'OFFERS_SUM_DEPOSIT_DESC',
  OFFERS_SUM_EXPIRE_DATE_ASC = 'OFFERS_SUM_EXPIRE_DATE_ASC',
  OFFERS_SUM_EXPIRE_DATE_DESC = 'OFFERS_SUM_EXPIRE_DATE_DESC',
  OFFERS_SUM_ID_ASC = 'OFFERS_SUM_ID_ASC',
  OFFERS_SUM_ID_DESC = 'OFFERS_SUM_ID_DESC',
  OFFERS_SUM_LAST_EVENT_ASC = 'OFFERS_SUM_LAST_EVENT_ASC',
  OFFERS_SUM_LAST_EVENT_DESC = 'OFFERS_SUM_LAST_EVENT_DESC',
  OFFERS_SUM_LIMIT_ASC = 'OFFERS_SUM_LIMIT_ASC',
  OFFERS_SUM_LIMIT_DESC = 'OFFERS_SUM_LIMIT_DESC',
  OFFERS_SUM_MINIMUM_ACCEPT_HEIGHT_ASC = 'OFFERS_SUM_MINIMUM_ACCEPT_HEIGHT_ASC',
  OFFERS_SUM_MINIMUM_ACCEPT_HEIGHT_DESC = 'OFFERS_SUM_MINIMUM_ACCEPT_HEIGHT_DESC',
  OFFERS_SUM_MINIMUM_STAKING_AMOUNT_ASC = 'OFFERS_SUM_MINIMUM_STAKING_AMOUNT_ASC',
  OFFERS_SUM_MINIMUM_STAKING_AMOUNT_DESC = 'OFFERS_SUM_MINIMUM_STAKING_AMOUNT_DESC',
  OFFERS_SUM_PLAN_TEMPLATE_ID_ASC = 'OFFERS_SUM_PLAN_TEMPLATE_ID_ASC',
  OFFERS_SUM_PLAN_TEMPLATE_ID_DESC = 'OFFERS_SUM_PLAN_TEMPLATE_ID_DESC',
  OFFERS_SUM_REACH_LIMIT_ASC = 'OFFERS_SUM_REACH_LIMIT_ASC',
  OFFERS_SUM_REACH_LIMIT_DESC = 'OFFERS_SUM_REACH_LIMIT_DESC',
  OFFERS_SUM_WITHDRAWN_ASC = 'OFFERS_SUM_WITHDRAWN_ASC',
  OFFERS_SUM_WITHDRAWN_DESC = 'OFFERS_SUM_WITHDRAWN_DESC',
  OFFERS_SUM_WITHDRAW_PENALTY_ASC = 'OFFERS_SUM_WITHDRAW_PENALTY_ASC',
  OFFERS_SUM_WITHDRAW_PENALTY_DESC = 'OFFERS_SUM_WITHDRAW_PENALTY_DESC',
  OFFERS_VARIANCE_POPULATION_ACCEPTED_ASC = 'OFFERS_VARIANCE_POPULATION_ACCEPTED_ASC',
  OFFERS_VARIANCE_POPULATION_ACCEPTED_DESC = 'OFFERS_VARIANCE_POPULATION_ACCEPTED_DESC',
  OFFERS_VARIANCE_POPULATION_BLOCK_RANGE_ASC = 'OFFERS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  OFFERS_VARIANCE_POPULATION_BLOCK_RANGE_DESC = 'OFFERS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  OFFERS_VARIANCE_POPULATION_CONSUMER_ASC = 'OFFERS_VARIANCE_POPULATION_CONSUMER_ASC',
  OFFERS_VARIANCE_POPULATION_CONSUMER_DESC = 'OFFERS_VARIANCE_POPULATION_CONSUMER_DESC',
  OFFERS_VARIANCE_POPULATION_CREATED_BLOCK_ASC = 'OFFERS_VARIANCE_POPULATION_CREATED_BLOCK_ASC',
  OFFERS_VARIANCE_POPULATION_CREATED_BLOCK_DESC = 'OFFERS_VARIANCE_POPULATION_CREATED_BLOCK_DESC',
  OFFERS_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC = 'OFFERS_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC',
  OFFERS_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC = 'OFFERS_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC',
  OFFERS_VARIANCE_POPULATION_DEPOSIT_ASC = 'OFFERS_VARIANCE_POPULATION_DEPOSIT_ASC',
  OFFERS_VARIANCE_POPULATION_DEPOSIT_DESC = 'OFFERS_VARIANCE_POPULATION_DEPOSIT_DESC',
  OFFERS_VARIANCE_POPULATION_EXPIRE_DATE_ASC = 'OFFERS_VARIANCE_POPULATION_EXPIRE_DATE_ASC',
  OFFERS_VARIANCE_POPULATION_EXPIRE_DATE_DESC = 'OFFERS_VARIANCE_POPULATION_EXPIRE_DATE_DESC',
  OFFERS_VARIANCE_POPULATION_ID_ASC = 'OFFERS_VARIANCE_POPULATION_ID_ASC',
  OFFERS_VARIANCE_POPULATION_ID_DESC = 'OFFERS_VARIANCE_POPULATION_ID_DESC',
  OFFERS_VARIANCE_POPULATION_LAST_EVENT_ASC = 'OFFERS_VARIANCE_POPULATION_LAST_EVENT_ASC',
  OFFERS_VARIANCE_POPULATION_LAST_EVENT_DESC = 'OFFERS_VARIANCE_POPULATION_LAST_EVENT_DESC',
  OFFERS_VARIANCE_POPULATION_LIMIT_ASC = 'OFFERS_VARIANCE_POPULATION_LIMIT_ASC',
  OFFERS_VARIANCE_POPULATION_LIMIT_DESC = 'OFFERS_VARIANCE_POPULATION_LIMIT_DESC',
  OFFERS_VARIANCE_POPULATION_MINIMUM_ACCEPT_HEIGHT_ASC = 'OFFERS_VARIANCE_POPULATION_MINIMUM_ACCEPT_HEIGHT_ASC',
  OFFERS_VARIANCE_POPULATION_MINIMUM_ACCEPT_HEIGHT_DESC = 'OFFERS_VARIANCE_POPULATION_MINIMUM_ACCEPT_HEIGHT_DESC',
  OFFERS_VARIANCE_POPULATION_MINIMUM_STAKING_AMOUNT_ASC = 'OFFERS_VARIANCE_POPULATION_MINIMUM_STAKING_AMOUNT_ASC',
  OFFERS_VARIANCE_POPULATION_MINIMUM_STAKING_AMOUNT_DESC = 'OFFERS_VARIANCE_POPULATION_MINIMUM_STAKING_AMOUNT_DESC',
  OFFERS_VARIANCE_POPULATION_PLAN_TEMPLATE_ID_ASC = 'OFFERS_VARIANCE_POPULATION_PLAN_TEMPLATE_ID_ASC',
  OFFERS_VARIANCE_POPULATION_PLAN_TEMPLATE_ID_DESC = 'OFFERS_VARIANCE_POPULATION_PLAN_TEMPLATE_ID_DESC',
  OFFERS_VARIANCE_POPULATION_REACH_LIMIT_ASC = 'OFFERS_VARIANCE_POPULATION_REACH_LIMIT_ASC',
  OFFERS_VARIANCE_POPULATION_REACH_LIMIT_DESC = 'OFFERS_VARIANCE_POPULATION_REACH_LIMIT_DESC',
  OFFERS_VARIANCE_POPULATION_WITHDRAWN_ASC = 'OFFERS_VARIANCE_POPULATION_WITHDRAWN_ASC',
  OFFERS_VARIANCE_POPULATION_WITHDRAWN_DESC = 'OFFERS_VARIANCE_POPULATION_WITHDRAWN_DESC',
  OFFERS_VARIANCE_POPULATION_WITHDRAW_PENALTY_ASC = 'OFFERS_VARIANCE_POPULATION_WITHDRAW_PENALTY_ASC',
  OFFERS_VARIANCE_POPULATION_WITHDRAW_PENALTY_DESC = 'OFFERS_VARIANCE_POPULATION_WITHDRAW_PENALTY_DESC',
  OFFERS_VARIANCE_SAMPLE_ACCEPTED_ASC = 'OFFERS_VARIANCE_SAMPLE_ACCEPTED_ASC',
  OFFERS_VARIANCE_SAMPLE_ACCEPTED_DESC = 'OFFERS_VARIANCE_SAMPLE_ACCEPTED_DESC',
  OFFERS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC = 'OFFERS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  OFFERS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC = 'OFFERS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  OFFERS_VARIANCE_SAMPLE_CONSUMER_ASC = 'OFFERS_VARIANCE_SAMPLE_CONSUMER_ASC',
  OFFERS_VARIANCE_SAMPLE_CONSUMER_DESC = 'OFFERS_VARIANCE_SAMPLE_CONSUMER_DESC',
  OFFERS_VARIANCE_SAMPLE_CREATED_BLOCK_ASC = 'OFFERS_VARIANCE_SAMPLE_CREATED_BLOCK_ASC',
  OFFERS_VARIANCE_SAMPLE_CREATED_BLOCK_DESC = 'OFFERS_VARIANCE_SAMPLE_CREATED_BLOCK_DESC',
  OFFERS_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC = 'OFFERS_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC',
  OFFERS_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC = 'OFFERS_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC',
  OFFERS_VARIANCE_SAMPLE_DEPOSIT_ASC = 'OFFERS_VARIANCE_SAMPLE_DEPOSIT_ASC',
  OFFERS_VARIANCE_SAMPLE_DEPOSIT_DESC = 'OFFERS_VARIANCE_SAMPLE_DEPOSIT_DESC',
  OFFERS_VARIANCE_SAMPLE_EXPIRE_DATE_ASC = 'OFFERS_VARIANCE_SAMPLE_EXPIRE_DATE_ASC',
  OFFERS_VARIANCE_SAMPLE_EXPIRE_DATE_DESC = 'OFFERS_VARIANCE_SAMPLE_EXPIRE_DATE_DESC',
  OFFERS_VARIANCE_SAMPLE_ID_ASC = 'OFFERS_VARIANCE_SAMPLE_ID_ASC',
  OFFERS_VARIANCE_SAMPLE_ID_DESC = 'OFFERS_VARIANCE_SAMPLE_ID_DESC',
  OFFERS_VARIANCE_SAMPLE_LAST_EVENT_ASC = 'OFFERS_VARIANCE_SAMPLE_LAST_EVENT_ASC',
  OFFERS_VARIANCE_SAMPLE_LAST_EVENT_DESC = 'OFFERS_VARIANCE_SAMPLE_LAST_EVENT_DESC',
  OFFERS_VARIANCE_SAMPLE_LIMIT_ASC = 'OFFERS_VARIANCE_SAMPLE_LIMIT_ASC',
  OFFERS_VARIANCE_SAMPLE_LIMIT_DESC = 'OFFERS_VARIANCE_SAMPLE_LIMIT_DESC',
  OFFERS_VARIANCE_SAMPLE_MINIMUM_ACCEPT_HEIGHT_ASC = 'OFFERS_VARIANCE_SAMPLE_MINIMUM_ACCEPT_HEIGHT_ASC',
  OFFERS_VARIANCE_SAMPLE_MINIMUM_ACCEPT_HEIGHT_DESC = 'OFFERS_VARIANCE_SAMPLE_MINIMUM_ACCEPT_HEIGHT_DESC',
  OFFERS_VARIANCE_SAMPLE_MINIMUM_STAKING_AMOUNT_ASC = 'OFFERS_VARIANCE_SAMPLE_MINIMUM_STAKING_AMOUNT_ASC',
  OFFERS_VARIANCE_SAMPLE_MINIMUM_STAKING_AMOUNT_DESC = 'OFFERS_VARIANCE_SAMPLE_MINIMUM_STAKING_AMOUNT_DESC',
  OFFERS_VARIANCE_SAMPLE_PLAN_TEMPLATE_ID_ASC = 'OFFERS_VARIANCE_SAMPLE_PLAN_TEMPLATE_ID_ASC',
  OFFERS_VARIANCE_SAMPLE_PLAN_TEMPLATE_ID_DESC = 'OFFERS_VARIANCE_SAMPLE_PLAN_TEMPLATE_ID_DESC',
  OFFERS_VARIANCE_SAMPLE_REACH_LIMIT_ASC = 'OFFERS_VARIANCE_SAMPLE_REACH_LIMIT_ASC',
  OFFERS_VARIANCE_SAMPLE_REACH_LIMIT_DESC = 'OFFERS_VARIANCE_SAMPLE_REACH_LIMIT_DESC',
  OFFERS_VARIANCE_SAMPLE_WITHDRAWN_ASC = 'OFFERS_VARIANCE_SAMPLE_WITHDRAWN_ASC',
  OFFERS_VARIANCE_SAMPLE_WITHDRAWN_DESC = 'OFFERS_VARIANCE_SAMPLE_WITHDRAWN_DESC',
  OFFERS_VARIANCE_SAMPLE_WITHDRAW_PENALTY_ASC = 'OFFERS_VARIANCE_SAMPLE_WITHDRAW_PENALTY_ASC',
  OFFERS_VARIANCE_SAMPLE_WITHDRAW_PENALTY_DESC = 'OFFERS_VARIANCE_SAMPLE_WITHDRAW_PENALTY_DESC',
  PLANS_AVERAGE_ACTIVE_ASC = 'PLANS_AVERAGE_ACTIVE_ASC',
  PLANS_AVERAGE_ACTIVE_DESC = 'PLANS_AVERAGE_ACTIVE_DESC',
  PLANS_AVERAGE_BLOCK_RANGE_ASC = 'PLANS_AVERAGE_BLOCK_RANGE_ASC',
  PLANS_AVERAGE_BLOCK_RANGE_DESC = 'PLANS_AVERAGE_BLOCK_RANGE_DESC',
  PLANS_AVERAGE_CREATED_BLOCK_ASC = 'PLANS_AVERAGE_CREATED_BLOCK_ASC',
  PLANS_AVERAGE_CREATED_BLOCK_DESC = 'PLANS_AVERAGE_CREATED_BLOCK_DESC',
  PLANS_AVERAGE_CREATOR_ASC = 'PLANS_AVERAGE_CREATOR_ASC',
  PLANS_AVERAGE_CREATOR_DESC = 'PLANS_AVERAGE_CREATOR_DESC',
  PLANS_AVERAGE_DEPLOYMENT_ID_ASC = 'PLANS_AVERAGE_DEPLOYMENT_ID_ASC',
  PLANS_AVERAGE_DEPLOYMENT_ID_DESC = 'PLANS_AVERAGE_DEPLOYMENT_ID_DESC',
  PLANS_AVERAGE_ID_ASC = 'PLANS_AVERAGE_ID_ASC',
  PLANS_AVERAGE_ID_DESC = 'PLANS_AVERAGE_ID_DESC',
  PLANS_AVERAGE_LAST_EVENT_ASC = 'PLANS_AVERAGE_LAST_EVENT_ASC',
  PLANS_AVERAGE_LAST_EVENT_DESC = 'PLANS_AVERAGE_LAST_EVENT_DESC',
  PLANS_AVERAGE_PLAN_TEMPLATE_ID_ASC = 'PLANS_AVERAGE_PLAN_TEMPLATE_ID_ASC',
  PLANS_AVERAGE_PLAN_TEMPLATE_ID_DESC = 'PLANS_AVERAGE_PLAN_TEMPLATE_ID_DESC',
  PLANS_AVERAGE_PRICE_ASC = 'PLANS_AVERAGE_PRICE_ASC',
  PLANS_AVERAGE_PRICE_DESC = 'PLANS_AVERAGE_PRICE_DESC',
  PLANS_BY_DEPLOYMENT_ID__COUNT_ASC = 'PLANS_BY_DEPLOYMENT_ID__COUNT_ASC',
  PLANS_BY_DEPLOYMENT_ID__COUNT_DESC = 'PLANS_BY_DEPLOYMENT_ID__COUNT_DESC',
  PLANS_COUNT_ASC = 'PLANS_COUNT_ASC',
  PLANS_COUNT_DESC = 'PLANS_COUNT_DESC',
  PLANS_DISTINCT_COUNT_ACTIVE_ASC = 'PLANS_DISTINCT_COUNT_ACTIVE_ASC',
  PLANS_DISTINCT_COUNT_ACTIVE_DESC = 'PLANS_DISTINCT_COUNT_ACTIVE_DESC',
  PLANS_DISTINCT_COUNT_BLOCK_RANGE_ASC = 'PLANS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  PLANS_DISTINCT_COUNT_BLOCK_RANGE_DESC = 'PLANS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  PLANS_DISTINCT_COUNT_CREATED_BLOCK_ASC = 'PLANS_DISTINCT_COUNT_CREATED_BLOCK_ASC',
  PLANS_DISTINCT_COUNT_CREATED_BLOCK_DESC = 'PLANS_DISTINCT_COUNT_CREATED_BLOCK_DESC',
  PLANS_DISTINCT_COUNT_CREATOR_ASC = 'PLANS_DISTINCT_COUNT_CREATOR_ASC',
  PLANS_DISTINCT_COUNT_CREATOR_DESC = 'PLANS_DISTINCT_COUNT_CREATOR_DESC',
  PLANS_DISTINCT_COUNT_DEPLOYMENT_ID_ASC = 'PLANS_DISTINCT_COUNT_DEPLOYMENT_ID_ASC',
  PLANS_DISTINCT_COUNT_DEPLOYMENT_ID_DESC = 'PLANS_DISTINCT_COUNT_DEPLOYMENT_ID_DESC',
  PLANS_DISTINCT_COUNT_ID_ASC = 'PLANS_DISTINCT_COUNT_ID_ASC',
  PLANS_DISTINCT_COUNT_ID_DESC = 'PLANS_DISTINCT_COUNT_ID_DESC',
  PLANS_DISTINCT_COUNT_LAST_EVENT_ASC = 'PLANS_DISTINCT_COUNT_LAST_EVENT_ASC',
  PLANS_DISTINCT_COUNT_LAST_EVENT_DESC = 'PLANS_DISTINCT_COUNT_LAST_EVENT_DESC',
  PLANS_DISTINCT_COUNT_PLAN_TEMPLATE_ID_ASC = 'PLANS_DISTINCT_COUNT_PLAN_TEMPLATE_ID_ASC',
  PLANS_DISTINCT_COUNT_PLAN_TEMPLATE_ID_DESC = 'PLANS_DISTINCT_COUNT_PLAN_TEMPLATE_ID_DESC',
  PLANS_DISTINCT_COUNT_PRICE_ASC = 'PLANS_DISTINCT_COUNT_PRICE_ASC',
  PLANS_DISTINCT_COUNT_PRICE_DESC = 'PLANS_DISTINCT_COUNT_PRICE_DESC',
  PLANS_MAX_ACTIVE_ASC = 'PLANS_MAX_ACTIVE_ASC',
  PLANS_MAX_ACTIVE_DESC = 'PLANS_MAX_ACTIVE_DESC',
  PLANS_MAX_BLOCK_RANGE_ASC = 'PLANS_MAX_BLOCK_RANGE_ASC',
  PLANS_MAX_BLOCK_RANGE_DESC = 'PLANS_MAX_BLOCK_RANGE_DESC',
  PLANS_MAX_CREATED_BLOCK_ASC = 'PLANS_MAX_CREATED_BLOCK_ASC',
  PLANS_MAX_CREATED_BLOCK_DESC = 'PLANS_MAX_CREATED_BLOCK_DESC',
  PLANS_MAX_CREATOR_ASC = 'PLANS_MAX_CREATOR_ASC',
  PLANS_MAX_CREATOR_DESC = 'PLANS_MAX_CREATOR_DESC',
  PLANS_MAX_DEPLOYMENT_ID_ASC = 'PLANS_MAX_DEPLOYMENT_ID_ASC',
  PLANS_MAX_DEPLOYMENT_ID_DESC = 'PLANS_MAX_DEPLOYMENT_ID_DESC',
  PLANS_MAX_ID_ASC = 'PLANS_MAX_ID_ASC',
  PLANS_MAX_ID_DESC = 'PLANS_MAX_ID_DESC',
  PLANS_MAX_LAST_EVENT_ASC = 'PLANS_MAX_LAST_EVENT_ASC',
  PLANS_MAX_LAST_EVENT_DESC = 'PLANS_MAX_LAST_EVENT_DESC',
  PLANS_MAX_PLAN_TEMPLATE_ID_ASC = 'PLANS_MAX_PLAN_TEMPLATE_ID_ASC',
  PLANS_MAX_PLAN_TEMPLATE_ID_DESC = 'PLANS_MAX_PLAN_TEMPLATE_ID_DESC',
  PLANS_MAX_PRICE_ASC = 'PLANS_MAX_PRICE_ASC',
  PLANS_MAX_PRICE_DESC = 'PLANS_MAX_PRICE_DESC',
  PLANS_MIN_ACTIVE_ASC = 'PLANS_MIN_ACTIVE_ASC',
  PLANS_MIN_ACTIVE_DESC = 'PLANS_MIN_ACTIVE_DESC',
  PLANS_MIN_BLOCK_RANGE_ASC = 'PLANS_MIN_BLOCK_RANGE_ASC',
  PLANS_MIN_BLOCK_RANGE_DESC = 'PLANS_MIN_BLOCK_RANGE_DESC',
  PLANS_MIN_CREATED_BLOCK_ASC = 'PLANS_MIN_CREATED_BLOCK_ASC',
  PLANS_MIN_CREATED_BLOCK_DESC = 'PLANS_MIN_CREATED_BLOCK_DESC',
  PLANS_MIN_CREATOR_ASC = 'PLANS_MIN_CREATOR_ASC',
  PLANS_MIN_CREATOR_DESC = 'PLANS_MIN_CREATOR_DESC',
  PLANS_MIN_DEPLOYMENT_ID_ASC = 'PLANS_MIN_DEPLOYMENT_ID_ASC',
  PLANS_MIN_DEPLOYMENT_ID_DESC = 'PLANS_MIN_DEPLOYMENT_ID_DESC',
  PLANS_MIN_ID_ASC = 'PLANS_MIN_ID_ASC',
  PLANS_MIN_ID_DESC = 'PLANS_MIN_ID_DESC',
  PLANS_MIN_LAST_EVENT_ASC = 'PLANS_MIN_LAST_EVENT_ASC',
  PLANS_MIN_LAST_EVENT_DESC = 'PLANS_MIN_LAST_EVENT_DESC',
  PLANS_MIN_PLAN_TEMPLATE_ID_ASC = 'PLANS_MIN_PLAN_TEMPLATE_ID_ASC',
  PLANS_MIN_PLAN_TEMPLATE_ID_DESC = 'PLANS_MIN_PLAN_TEMPLATE_ID_DESC',
  PLANS_MIN_PRICE_ASC = 'PLANS_MIN_PRICE_ASC',
  PLANS_MIN_PRICE_DESC = 'PLANS_MIN_PRICE_DESC',
  PLANS_STDDEV_POPULATION_ACTIVE_ASC = 'PLANS_STDDEV_POPULATION_ACTIVE_ASC',
  PLANS_STDDEV_POPULATION_ACTIVE_DESC = 'PLANS_STDDEV_POPULATION_ACTIVE_DESC',
  PLANS_STDDEV_POPULATION_BLOCK_RANGE_ASC = 'PLANS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  PLANS_STDDEV_POPULATION_BLOCK_RANGE_DESC = 'PLANS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  PLANS_STDDEV_POPULATION_CREATED_BLOCK_ASC = 'PLANS_STDDEV_POPULATION_CREATED_BLOCK_ASC',
  PLANS_STDDEV_POPULATION_CREATED_BLOCK_DESC = 'PLANS_STDDEV_POPULATION_CREATED_BLOCK_DESC',
  PLANS_STDDEV_POPULATION_CREATOR_ASC = 'PLANS_STDDEV_POPULATION_CREATOR_ASC',
  PLANS_STDDEV_POPULATION_CREATOR_DESC = 'PLANS_STDDEV_POPULATION_CREATOR_DESC',
  PLANS_STDDEV_POPULATION_DEPLOYMENT_ID_ASC = 'PLANS_STDDEV_POPULATION_DEPLOYMENT_ID_ASC',
  PLANS_STDDEV_POPULATION_DEPLOYMENT_ID_DESC = 'PLANS_STDDEV_POPULATION_DEPLOYMENT_ID_DESC',
  PLANS_STDDEV_POPULATION_ID_ASC = 'PLANS_STDDEV_POPULATION_ID_ASC',
  PLANS_STDDEV_POPULATION_ID_DESC = 'PLANS_STDDEV_POPULATION_ID_DESC',
  PLANS_STDDEV_POPULATION_LAST_EVENT_ASC = 'PLANS_STDDEV_POPULATION_LAST_EVENT_ASC',
  PLANS_STDDEV_POPULATION_LAST_EVENT_DESC = 'PLANS_STDDEV_POPULATION_LAST_EVENT_DESC',
  PLANS_STDDEV_POPULATION_PLAN_TEMPLATE_ID_ASC = 'PLANS_STDDEV_POPULATION_PLAN_TEMPLATE_ID_ASC',
  PLANS_STDDEV_POPULATION_PLAN_TEMPLATE_ID_DESC = 'PLANS_STDDEV_POPULATION_PLAN_TEMPLATE_ID_DESC',
  PLANS_STDDEV_POPULATION_PRICE_ASC = 'PLANS_STDDEV_POPULATION_PRICE_ASC',
  PLANS_STDDEV_POPULATION_PRICE_DESC = 'PLANS_STDDEV_POPULATION_PRICE_DESC',
  PLANS_STDDEV_SAMPLE_ACTIVE_ASC = 'PLANS_STDDEV_SAMPLE_ACTIVE_ASC',
  PLANS_STDDEV_SAMPLE_ACTIVE_DESC = 'PLANS_STDDEV_SAMPLE_ACTIVE_DESC',
  PLANS_STDDEV_SAMPLE_BLOCK_RANGE_ASC = 'PLANS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  PLANS_STDDEV_SAMPLE_BLOCK_RANGE_DESC = 'PLANS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  PLANS_STDDEV_SAMPLE_CREATED_BLOCK_ASC = 'PLANS_STDDEV_SAMPLE_CREATED_BLOCK_ASC',
  PLANS_STDDEV_SAMPLE_CREATED_BLOCK_DESC = 'PLANS_STDDEV_SAMPLE_CREATED_BLOCK_DESC',
  PLANS_STDDEV_SAMPLE_CREATOR_ASC = 'PLANS_STDDEV_SAMPLE_CREATOR_ASC',
  PLANS_STDDEV_SAMPLE_CREATOR_DESC = 'PLANS_STDDEV_SAMPLE_CREATOR_DESC',
  PLANS_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC = 'PLANS_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC',
  PLANS_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC = 'PLANS_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC',
  PLANS_STDDEV_SAMPLE_ID_ASC = 'PLANS_STDDEV_SAMPLE_ID_ASC',
  PLANS_STDDEV_SAMPLE_ID_DESC = 'PLANS_STDDEV_SAMPLE_ID_DESC',
  PLANS_STDDEV_SAMPLE_LAST_EVENT_ASC = 'PLANS_STDDEV_SAMPLE_LAST_EVENT_ASC',
  PLANS_STDDEV_SAMPLE_LAST_EVENT_DESC = 'PLANS_STDDEV_SAMPLE_LAST_EVENT_DESC',
  PLANS_STDDEV_SAMPLE_PLAN_TEMPLATE_ID_ASC = 'PLANS_STDDEV_SAMPLE_PLAN_TEMPLATE_ID_ASC',
  PLANS_STDDEV_SAMPLE_PLAN_TEMPLATE_ID_DESC = 'PLANS_STDDEV_SAMPLE_PLAN_TEMPLATE_ID_DESC',
  PLANS_STDDEV_SAMPLE_PRICE_ASC = 'PLANS_STDDEV_SAMPLE_PRICE_ASC',
  PLANS_STDDEV_SAMPLE_PRICE_DESC = 'PLANS_STDDEV_SAMPLE_PRICE_DESC',
  PLANS_SUM_ACTIVE_ASC = 'PLANS_SUM_ACTIVE_ASC',
  PLANS_SUM_ACTIVE_DESC = 'PLANS_SUM_ACTIVE_DESC',
  PLANS_SUM_BLOCK_RANGE_ASC = 'PLANS_SUM_BLOCK_RANGE_ASC',
  PLANS_SUM_BLOCK_RANGE_DESC = 'PLANS_SUM_BLOCK_RANGE_DESC',
  PLANS_SUM_CREATED_BLOCK_ASC = 'PLANS_SUM_CREATED_BLOCK_ASC',
  PLANS_SUM_CREATED_BLOCK_DESC = 'PLANS_SUM_CREATED_BLOCK_DESC',
  PLANS_SUM_CREATOR_ASC = 'PLANS_SUM_CREATOR_ASC',
  PLANS_SUM_CREATOR_DESC = 'PLANS_SUM_CREATOR_DESC',
  PLANS_SUM_DEPLOYMENT_ID_ASC = 'PLANS_SUM_DEPLOYMENT_ID_ASC',
  PLANS_SUM_DEPLOYMENT_ID_DESC = 'PLANS_SUM_DEPLOYMENT_ID_DESC',
  PLANS_SUM_ID_ASC = 'PLANS_SUM_ID_ASC',
  PLANS_SUM_ID_DESC = 'PLANS_SUM_ID_DESC',
  PLANS_SUM_LAST_EVENT_ASC = 'PLANS_SUM_LAST_EVENT_ASC',
  PLANS_SUM_LAST_EVENT_DESC = 'PLANS_SUM_LAST_EVENT_DESC',
  PLANS_SUM_PLAN_TEMPLATE_ID_ASC = 'PLANS_SUM_PLAN_TEMPLATE_ID_ASC',
  PLANS_SUM_PLAN_TEMPLATE_ID_DESC = 'PLANS_SUM_PLAN_TEMPLATE_ID_DESC',
  PLANS_SUM_PRICE_ASC = 'PLANS_SUM_PRICE_ASC',
  PLANS_SUM_PRICE_DESC = 'PLANS_SUM_PRICE_DESC',
  PLANS_VARIANCE_POPULATION_ACTIVE_ASC = 'PLANS_VARIANCE_POPULATION_ACTIVE_ASC',
  PLANS_VARIANCE_POPULATION_ACTIVE_DESC = 'PLANS_VARIANCE_POPULATION_ACTIVE_DESC',
  PLANS_VARIANCE_POPULATION_BLOCK_RANGE_ASC = 'PLANS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  PLANS_VARIANCE_POPULATION_BLOCK_RANGE_DESC = 'PLANS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  PLANS_VARIANCE_POPULATION_CREATED_BLOCK_ASC = 'PLANS_VARIANCE_POPULATION_CREATED_BLOCK_ASC',
  PLANS_VARIANCE_POPULATION_CREATED_BLOCK_DESC = 'PLANS_VARIANCE_POPULATION_CREATED_BLOCK_DESC',
  PLANS_VARIANCE_POPULATION_CREATOR_ASC = 'PLANS_VARIANCE_POPULATION_CREATOR_ASC',
  PLANS_VARIANCE_POPULATION_CREATOR_DESC = 'PLANS_VARIANCE_POPULATION_CREATOR_DESC',
  PLANS_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC = 'PLANS_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC',
  PLANS_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC = 'PLANS_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC',
  PLANS_VARIANCE_POPULATION_ID_ASC = 'PLANS_VARIANCE_POPULATION_ID_ASC',
  PLANS_VARIANCE_POPULATION_ID_DESC = 'PLANS_VARIANCE_POPULATION_ID_DESC',
  PLANS_VARIANCE_POPULATION_LAST_EVENT_ASC = 'PLANS_VARIANCE_POPULATION_LAST_EVENT_ASC',
  PLANS_VARIANCE_POPULATION_LAST_EVENT_DESC = 'PLANS_VARIANCE_POPULATION_LAST_EVENT_DESC',
  PLANS_VARIANCE_POPULATION_PLAN_TEMPLATE_ID_ASC = 'PLANS_VARIANCE_POPULATION_PLAN_TEMPLATE_ID_ASC',
  PLANS_VARIANCE_POPULATION_PLAN_TEMPLATE_ID_DESC = 'PLANS_VARIANCE_POPULATION_PLAN_TEMPLATE_ID_DESC',
  PLANS_VARIANCE_POPULATION_PRICE_ASC = 'PLANS_VARIANCE_POPULATION_PRICE_ASC',
  PLANS_VARIANCE_POPULATION_PRICE_DESC = 'PLANS_VARIANCE_POPULATION_PRICE_DESC',
  PLANS_VARIANCE_SAMPLE_ACTIVE_ASC = 'PLANS_VARIANCE_SAMPLE_ACTIVE_ASC',
  PLANS_VARIANCE_SAMPLE_ACTIVE_DESC = 'PLANS_VARIANCE_SAMPLE_ACTIVE_DESC',
  PLANS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC = 'PLANS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  PLANS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC = 'PLANS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  PLANS_VARIANCE_SAMPLE_CREATED_BLOCK_ASC = 'PLANS_VARIANCE_SAMPLE_CREATED_BLOCK_ASC',
  PLANS_VARIANCE_SAMPLE_CREATED_BLOCK_DESC = 'PLANS_VARIANCE_SAMPLE_CREATED_BLOCK_DESC',
  PLANS_VARIANCE_SAMPLE_CREATOR_ASC = 'PLANS_VARIANCE_SAMPLE_CREATOR_ASC',
  PLANS_VARIANCE_SAMPLE_CREATOR_DESC = 'PLANS_VARIANCE_SAMPLE_CREATOR_DESC',
  PLANS_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC = 'PLANS_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC',
  PLANS_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC = 'PLANS_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC',
  PLANS_VARIANCE_SAMPLE_ID_ASC = 'PLANS_VARIANCE_SAMPLE_ID_ASC',
  PLANS_VARIANCE_SAMPLE_ID_DESC = 'PLANS_VARIANCE_SAMPLE_ID_DESC',
  PLANS_VARIANCE_SAMPLE_LAST_EVENT_ASC = 'PLANS_VARIANCE_SAMPLE_LAST_EVENT_ASC',
  PLANS_VARIANCE_SAMPLE_LAST_EVENT_DESC = 'PLANS_VARIANCE_SAMPLE_LAST_EVENT_DESC',
  PLANS_VARIANCE_SAMPLE_PLAN_TEMPLATE_ID_ASC = 'PLANS_VARIANCE_SAMPLE_PLAN_TEMPLATE_ID_ASC',
  PLANS_VARIANCE_SAMPLE_PLAN_TEMPLATE_ID_DESC = 'PLANS_VARIANCE_SAMPLE_PLAN_TEMPLATE_ID_DESC',
  PLANS_VARIANCE_SAMPLE_PRICE_ASC = 'PLANS_VARIANCE_SAMPLE_PRICE_ASC',
  PLANS_VARIANCE_SAMPLE_PRICE_DESC = 'PLANS_VARIANCE_SAMPLE_PRICE_DESC',
  PRIMARY_KEY_ASC = 'PRIMARY_KEY_ASC',
  PRIMARY_KEY_DESC = 'PRIMARY_KEY_DESC',
  PROJECT_BY_PROJECT_ID__BOOST_ALLOCATION_RATIO_ASC = 'PROJECT_BY_PROJECT_ID__BOOST_ALLOCATION_RATIO_ASC',
  PROJECT_BY_PROJECT_ID__BOOST_ALLOCATION_RATIO_DESC = 'PROJECT_BY_PROJECT_ID__BOOST_ALLOCATION_RATIO_DESC',
  PROJECT_BY_PROJECT_ID__CREATED_BLOCK_ASC = 'PROJECT_BY_PROJECT_ID__CREATED_BLOCK_ASC',
  PROJECT_BY_PROJECT_ID__CREATED_BLOCK_DESC = 'PROJECT_BY_PROJECT_ID__CREATED_BLOCK_DESC',
  PROJECT_BY_PROJECT_ID__CREATED_TIMESTAMP_ASC = 'PROJECT_BY_PROJECT_ID__CREATED_TIMESTAMP_ASC',
  PROJECT_BY_PROJECT_ID__CREATED_TIMESTAMP_DESC = 'PROJECT_BY_PROJECT_ID__CREATED_TIMESTAMP_DESC',
  PROJECT_BY_PROJECT_ID__DEPLOYMENT_ID_ASC = 'PROJECT_BY_PROJECT_ID__DEPLOYMENT_ID_ASC',
  PROJECT_BY_PROJECT_ID__DEPLOYMENT_ID_DESC = 'PROJECT_BY_PROJECT_ID__DEPLOYMENT_ID_DESC',
  PROJECT_BY_PROJECT_ID__DEPLOYMENT_METADATA_ASC = 'PROJECT_BY_PROJECT_ID__DEPLOYMENT_METADATA_ASC',
  PROJECT_BY_PROJECT_ID__DEPLOYMENT_METADATA_DESC = 'PROJECT_BY_PROJECT_ID__DEPLOYMENT_METADATA_DESC',
  PROJECT_BY_PROJECT_ID__ID_ASC = 'PROJECT_BY_PROJECT_ID__ID_ASC',
  PROJECT_BY_PROJECT_ID__ID_DESC = 'PROJECT_BY_PROJECT_ID__ID_DESC',
  PROJECT_BY_PROJECT_ID__LAST_EVENT_ASC = 'PROJECT_BY_PROJECT_ID__LAST_EVENT_ASC',
  PROJECT_BY_PROJECT_ID__LAST_EVENT_DESC = 'PROJECT_BY_PROJECT_ID__LAST_EVENT_DESC',
  PROJECT_BY_PROJECT_ID__METADATA_ASC = 'PROJECT_BY_PROJECT_ID__METADATA_ASC',
  PROJECT_BY_PROJECT_ID__METADATA_DESC = 'PROJECT_BY_PROJECT_ID__METADATA_DESC',
  PROJECT_BY_PROJECT_ID__OWNER_ASC = 'PROJECT_BY_PROJECT_ID__OWNER_ASC',
  PROJECT_BY_PROJECT_ID__OWNER_DESC = 'PROJECT_BY_PROJECT_ID__OWNER_DESC',
  PROJECT_BY_PROJECT_ID__TOTAL_ALLOCATION_ASC = 'PROJECT_BY_PROJECT_ID__TOTAL_ALLOCATION_ASC',
  PROJECT_BY_PROJECT_ID__TOTAL_ALLOCATION_DESC = 'PROJECT_BY_PROJECT_ID__TOTAL_ALLOCATION_DESC',
  PROJECT_BY_PROJECT_ID__TOTAL_BOOST_ASC = 'PROJECT_BY_PROJECT_ID__TOTAL_BOOST_ASC',
  PROJECT_BY_PROJECT_ID__TOTAL_BOOST_DESC = 'PROJECT_BY_PROJECT_ID__TOTAL_BOOST_DESC',
  PROJECT_BY_PROJECT_ID__TOTAL_REWARD_ASC = 'PROJECT_BY_PROJECT_ID__TOTAL_REWARD_ASC',
  PROJECT_BY_PROJECT_ID__TOTAL_REWARD_DESC = 'PROJECT_BY_PROJECT_ID__TOTAL_REWARD_DESC',
  PROJECT_BY_PROJECT_ID__TYPE_ASC = 'PROJECT_BY_PROJECT_ID__TYPE_ASC',
  PROJECT_BY_PROJECT_ID__TYPE_DESC = 'PROJECT_BY_PROJECT_ID__TYPE_DESC',
  PROJECT_BY_PROJECT_ID__UPDATED_TIMESTAMP_ASC = 'PROJECT_BY_PROJECT_ID__UPDATED_TIMESTAMP_ASC',
  PROJECT_BY_PROJECT_ID__UPDATED_TIMESTAMP_DESC = 'PROJECT_BY_PROJECT_ID__UPDATED_TIMESTAMP_DESC',
  PROJECT_ID_ASC = 'PROJECT_ID_ASC',
  PROJECT_ID_DESC = 'PROJECT_ID_DESC',
  SERVICE_AGREEMENTS_AVERAGE_BLOCK_RANGE_ASC = 'SERVICE_AGREEMENTS_AVERAGE_BLOCK_RANGE_ASC',
  SERVICE_AGREEMENTS_AVERAGE_BLOCK_RANGE_DESC = 'SERVICE_AGREEMENTS_AVERAGE_BLOCK_RANGE_DESC',
  SERVICE_AGREEMENTS_AVERAGE_CONSUMER_ADDRESS_ASC = 'SERVICE_AGREEMENTS_AVERAGE_CONSUMER_ADDRESS_ASC',
  SERVICE_AGREEMENTS_AVERAGE_CONSUMER_ADDRESS_DESC = 'SERVICE_AGREEMENTS_AVERAGE_CONSUMER_ADDRESS_DESC',
  SERVICE_AGREEMENTS_AVERAGE_CREATED_BLOCK_ASC = 'SERVICE_AGREEMENTS_AVERAGE_CREATED_BLOCK_ASC',
  SERVICE_AGREEMENTS_AVERAGE_CREATED_BLOCK_DESC = 'SERVICE_AGREEMENTS_AVERAGE_CREATED_BLOCK_DESC',
  SERVICE_AGREEMENTS_AVERAGE_DEPLOYMENT_ID_ASC = 'SERVICE_AGREEMENTS_AVERAGE_DEPLOYMENT_ID_ASC',
  SERVICE_AGREEMENTS_AVERAGE_DEPLOYMENT_ID_DESC = 'SERVICE_AGREEMENTS_AVERAGE_DEPLOYMENT_ID_DESC',
  SERVICE_AGREEMENTS_AVERAGE_END_TIME_ASC = 'SERVICE_AGREEMENTS_AVERAGE_END_TIME_ASC',
  SERVICE_AGREEMENTS_AVERAGE_END_TIME_DESC = 'SERVICE_AGREEMENTS_AVERAGE_END_TIME_DESC',
  SERVICE_AGREEMENTS_AVERAGE_ID_ASC = 'SERVICE_AGREEMENTS_AVERAGE_ID_ASC',
  SERVICE_AGREEMENTS_AVERAGE_ID_DESC = 'SERVICE_AGREEMENTS_AVERAGE_ID_DESC',
  SERVICE_AGREEMENTS_AVERAGE_INDEXER_ADDRESS_ASC = 'SERVICE_AGREEMENTS_AVERAGE_INDEXER_ADDRESS_ASC',
  SERVICE_AGREEMENTS_AVERAGE_INDEXER_ADDRESS_DESC = 'SERVICE_AGREEMENTS_AVERAGE_INDEXER_ADDRESS_DESC',
  SERVICE_AGREEMENTS_AVERAGE_LAST_EVENT_ASC = 'SERVICE_AGREEMENTS_AVERAGE_LAST_EVENT_ASC',
  SERVICE_AGREEMENTS_AVERAGE_LAST_EVENT_DESC = 'SERVICE_AGREEMENTS_AVERAGE_LAST_EVENT_DESC',
  SERVICE_AGREEMENTS_AVERAGE_LOCKED_AMOUNT_ASC = 'SERVICE_AGREEMENTS_AVERAGE_LOCKED_AMOUNT_ASC',
  SERVICE_AGREEMENTS_AVERAGE_LOCKED_AMOUNT_DESC = 'SERVICE_AGREEMENTS_AVERAGE_LOCKED_AMOUNT_DESC',
  SERVICE_AGREEMENTS_AVERAGE_PERIOD_ASC = 'SERVICE_AGREEMENTS_AVERAGE_PERIOD_ASC',
  SERVICE_AGREEMENTS_AVERAGE_PERIOD_DESC = 'SERVICE_AGREEMENTS_AVERAGE_PERIOD_DESC',
  SERVICE_AGREEMENTS_AVERAGE_PLAN_TEMPLATE_ID_ASC = 'SERVICE_AGREEMENTS_AVERAGE_PLAN_TEMPLATE_ID_ASC',
  SERVICE_AGREEMENTS_AVERAGE_PLAN_TEMPLATE_ID_DESC = 'SERVICE_AGREEMENTS_AVERAGE_PLAN_TEMPLATE_ID_DESC',
  SERVICE_AGREEMENTS_AVERAGE_START_TIME_ASC = 'SERVICE_AGREEMENTS_AVERAGE_START_TIME_ASC',
  SERVICE_AGREEMENTS_AVERAGE_START_TIME_DESC = 'SERVICE_AGREEMENTS_AVERAGE_START_TIME_DESC',
  SERVICE_AGREEMENTS_BY_DEPLOYMENT_ID__COUNT_ASC = 'SERVICE_AGREEMENTS_BY_DEPLOYMENT_ID__COUNT_ASC',
  SERVICE_AGREEMENTS_BY_DEPLOYMENT_ID__COUNT_DESC = 'SERVICE_AGREEMENTS_BY_DEPLOYMENT_ID__COUNT_DESC',
  SERVICE_AGREEMENTS_COUNT_ASC = 'SERVICE_AGREEMENTS_COUNT_ASC',
  SERVICE_AGREEMENTS_COUNT_DESC = 'SERVICE_AGREEMENTS_COUNT_DESC',
  SERVICE_AGREEMENTS_DISTINCT_COUNT_BLOCK_RANGE_ASC = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  SERVICE_AGREEMENTS_DISTINCT_COUNT_BLOCK_RANGE_DESC = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  SERVICE_AGREEMENTS_DISTINCT_COUNT_CONSUMER_ADDRESS_ASC = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_CONSUMER_ADDRESS_ASC',
  SERVICE_AGREEMENTS_DISTINCT_COUNT_CONSUMER_ADDRESS_DESC = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_CONSUMER_ADDRESS_DESC',
  SERVICE_AGREEMENTS_DISTINCT_COUNT_CREATED_BLOCK_ASC = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_CREATED_BLOCK_ASC',
  SERVICE_AGREEMENTS_DISTINCT_COUNT_CREATED_BLOCK_DESC = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_CREATED_BLOCK_DESC',
  SERVICE_AGREEMENTS_DISTINCT_COUNT_DEPLOYMENT_ID_ASC = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_DEPLOYMENT_ID_ASC',
  SERVICE_AGREEMENTS_DISTINCT_COUNT_DEPLOYMENT_ID_DESC = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_DEPLOYMENT_ID_DESC',
  SERVICE_AGREEMENTS_DISTINCT_COUNT_END_TIME_ASC = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_END_TIME_ASC',
  SERVICE_AGREEMENTS_DISTINCT_COUNT_END_TIME_DESC = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_END_TIME_DESC',
  SERVICE_AGREEMENTS_DISTINCT_COUNT_ID_ASC = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_ID_ASC',
  SERVICE_AGREEMENTS_DISTINCT_COUNT_ID_DESC = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_ID_DESC',
  SERVICE_AGREEMENTS_DISTINCT_COUNT_INDEXER_ADDRESS_ASC = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_INDEXER_ADDRESS_ASC',
  SERVICE_AGREEMENTS_DISTINCT_COUNT_INDEXER_ADDRESS_DESC = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_INDEXER_ADDRESS_DESC',
  SERVICE_AGREEMENTS_DISTINCT_COUNT_LAST_EVENT_ASC = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_LAST_EVENT_ASC',
  SERVICE_AGREEMENTS_DISTINCT_COUNT_LAST_EVENT_DESC = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_LAST_EVENT_DESC',
  SERVICE_AGREEMENTS_DISTINCT_COUNT_LOCKED_AMOUNT_ASC = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_LOCKED_AMOUNT_ASC',
  SERVICE_AGREEMENTS_DISTINCT_COUNT_LOCKED_AMOUNT_DESC = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_LOCKED_AMOUNT_DESC',
  SERVICE_AGREEMENTS_DISTINCT_COUNT_PERIOD_ASC = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_PERIOD_ASC',
  SERVICE_AGREEMENTS_DISTINCT_COUNT_PERIOD_DESC = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_PERIOD_DESC',
  SERVICE_AGREEMENTS_DISTINCT_COUNT_PLAN_TEMPLATE_ID_ASC = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_PLAN_TEMPLATE_ID_ASC',
  SERVICE_AGREEMENTS_DISTINCT_COUNT_PLAN_TEMPLATE_ID_DESC = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_PLAN_TEMPLATE_ID_DESC',
  SERVICE_AGREEMENTS_DISTINCT_COUNT_START_TIME_ASC = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_START_TIME_ASC',
  SERVICE_AGREEMENTS_DISTINCT_COUNT_START_TIME_DESC = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_START_TIME_DESC',
  SERVICE_AGREEMENTS_MAX_BLOCK_RANGE_ASC = 'SERVICE_AGREEMENTS_MAX_BLOCK_RANGE_ASC',
  SERVICE_AGREEMENTS_MAX_BLOCK_RANGE_DESC = 'SERVICE_AGREEMENTS_MAX_BLOCK_RANGE_DESC',
  SERVICE_AGREEMENTS_MAX_CONSUMER_ADDRESS_ASC = 'SERVICE_AGREEMENTS_MAX_CONSUMER_ADDRESS_ASC',
  SERVICE_AGREEMENTS_MAX_CONSUMER_ADDRESS_DESC = 'SERVICE_AGREEMENTS_MAX_CONSUMER_ADDRESS_DESC',
  SERVICE_AGREEMENTS_MAX_CREATED_BLOCK_ASC = 'SERVICE_AGREEMENTS_MAX_CREATED_BLOCK_ASC',
  SERVICE_AGREEMENTS_MAX_CREATED_BLOCK_DESC = 'SERVICE_AGREEMENTS_MAX_CREATED_BLOCK_DESC',
  SERVICE_AGREEMENTS_MAX_DEPLOYMENT_ID_ASC = 'SERVICE_AGREEMENTS_MAX_DEPLOYMENT_ID_ASC',
  SERVICE_AGREEMENTS_MAX_DEPLOYMENT_ID_DESC = 'SERVICE_AGREEMENTS_MAX_DEPLOYMENT_ID_DESC',
  SERVICE_AGREEMENTS_MAX_END_TIME_ASC = 'SERVICE_AGREEMENTS_MAX_END_TIME_ASC',
  SERVICE_AGREEMENTS_MAX_END_TIME_DESC = 'SERVICE_AGREEMENTS_MAX_END_TIME_DESC',
  SERVICE_AGREEMENTS_MAX_ID_ASC = 'SERVICE_AGREEMENTS_MAX_ID_ASC',
  SERVICE_AGREEMENTS_MAX_ID_DESC = 'SERVICE_AGREEMENTS_MAX_ID_DESC',
  SERVICE_AGREEMENTS_MAX_INDEXER_ADDRESS_ASC = 'SERVICE_AGREEMENTS_MAX_INDEXER_ADDRESS_ASC',
  SERVICE_AGREEMENTS_MAX_INDEXER_ADDRESS_DESC = 'SERVICE_AGREEMENTS_MAX_INDEXER_ADDRESS_DESC',
  SERVICE_AGREEMENTS_MAX_LAST_EVENT_ASC = 'SERVICE_AGREEMENTS_MAX_LAST_EVENT_ASC',
  SERVICE_AGREEMENTS_MAX_LAST_EVENT_DESC = 'SERVICE_AGREEMENTS_MAX_LAST_EVENT_DESC',
  SERVICE_AGREEMENTS_MAX_LOCKED_AMOUNT_ASC = 'SERVICE_AGREEMENTS_MAX_LOCKED_AMOUNT_ASC',
  SERVICE_AGREEMENTS_MAX_LOCKED_AMOUNT_DESC = 'SERVICE_AGREEMENTS_MAX_LOCKED_AMOUNT_DESC',
  SERVICE_AGREEMENTS_MAX_PERIOD_ASC = 'SERVICE_AGREEMENTS_MAX_PERIOD_ASC',
  SERVICE_AGREEMENTS_MAX_PERIOD_DESC = 'SERVICE_AGREEMENTS_MAX_PERIOD_DESC',
  SERVICE_AGREEMENTS_MAX_PLAN_TEMPLATE_ID_ASC = 'SERVICE_AGREEMENTS_MAX_PLAN_TEMPLATE_ID_ASC',
  SERVICE_AGREEMENTS_MAX_PLAN_TEMPLATE_ID_DESC = 'SERVICE_AGREEMENTS_MAX_PLAN_TEMPLATE_ID_DESC',
  SERVICE_AGREEMENTS_MAX_START_TIME_ASC = 'SERVICE_AGREEMENTS_MAX_START_TIME_ASC',
  SERVICE_AGREEMENTS_MAX_START_TIME_DESC = 'SERVICE_AGREEMENTS_MAX_START_TIME_DESC',
  SERVICE_AGREEMENTS_MIN_BLOCK_RANGE_ASC = 'SERVICE_AGREEMENTS_MIN_BLOCK_RANGE_ASC',
  SERVICE_AGREEMENTS_MIN_BLOCK_RANGE_DESC = 'SERVICE_AGREEMENTS_MIN_BLOCK_RANGE_DESC',
  SERVICE_AGREEMENTS_MIN_CONSUMER_ADDRESS_ASC = 'SERVICE_AGREEMENTS_MIN_CONSUMER_ADDRESS_ASC',
  SERVICE_AGREEMENTS_MIN_CONSUMER_ADDRESS_DESC = 'SERVICE_AGREEMENTS_MIN_CONSUMER_ADDRESS_DESC',
  SERVICE_AGREEMENTS_MIN_CREATED_BLOCK_ASC = 'SERVICE_AGREEMENTS_MIN_CREATED_BLOCK_ASC',
  SERVICE_AGREEMENTS_MIN_CREATED_BLOCK_DESC = 'SERVICE_AGREEMENTS_MIN_CREATED_BLOCK_DESC',
  SERVICE_AGREEMENTS_MIN_DEPLOYMENT_ID_ASC = 'SERVICE_AGREEMENTS_MIN_DEPLOYMENT_ID_ASC',
  SERVICE_AGREEMENTS_MIN_DEPLOYMENT_ID_DESC = 'SERVICE_AGREEMENTS_MIN_DEPLOYMENT_ID_DESC',
  SERVICE_AGREEMENTS_MIN_END_TIME_ASC = 'SERVICE_AGREEMENTS_MIN_END_TIME_ASC',
  SERVICE_AGREEMENTS_MIN_END_TIME_DESC = 'SERVICE_AGREEMENTS_MIN_END_TIME_DESC',
  SERVICE_AGREEMENTS_MIN_ID_ASC = 'SERVICE_AGREEMENTS_MIN_ID_ASC',
  SERVICE_AGREEMENTS_MIN_ID_DESC = 'SERVICE_AGREEMENTS_MIN_ID_DESC',
  SERVICE_AGREEMENTS_MIN_INDEXER_ADDRESS_ASC = 'SERVICE_AGREEMENTS_MIN_INDEXER_ADDRESS_ASC',
  SERVICE_AGREEMENTS_MIN_INDEXER_ADDRESS_DESC = 'SERVICE_AGREEMENTS_MIN_INDEXER_ADDRESS_DESC',
  SERVICE_AGREEMENTS_MIN_LAST_EVENT_ASC = 'SERVICE_AGREEMENTS_MIN_LAST_EVENT_ASC',
  SERVICE_AGREEMENTS_MIN_LAST_EVENT_DESC = 'SERVICE_AGREEMENTS_MIN_LAST_EVENT_DESC',
  SERVICE_AGREEMENTS_MIN_LOCKED_AMOUNT_ASC = 'SERVICE_AGREEMENTS_MIN_LOCKED_AMOUNT_ASC',
  SERVICE_AGREEMENTS_MIN_LOCKED_AMOUNT_DESC = 'SERVICE_AGREEMENTS_MIN_LOCKED_AMOUNT_DESC',
  SERVICE_AGREEMENTS_MIN_PERIOD_ASC = 'SERVICE_AGREEMENTS_MIN_PERIOD_ASC',
  SERVICE_AGREEMENTS_MIN_PERIOD_DESC = 'SERVICE_AGREEMENTS_MIN_PERIOD_DESC',
  SERVICE_AGREEMENTS_MIN_PLAN_TEMPLATE_ID_ASC = 'SERVICE_AGREEMENTS_MIN_PLAN_TEMPLATE_ID_ASC',
  SERVICE_AGREEMENTS_MIN_PLAN_TEMPLATE_ID_DESC = 'SERVICE_AGREEMENTS_MIN_PLAN_TEMPLATE_ID_DESC',
  SERVICE_AGREEMENTS_MIN_START_TIME_ASC = 'SERVICE_AGREEMENTS_MIN_START_TIME_ASC',
  SERVICE_AGREEMENTS_MIN_START_TIME_DESC = 'SERVICE_AGREEMENTS_MIN_START_TIME_DESC',
  SERVICE_AGREEMENTS_STDDEV_POPULATION_BLOCK_RANGE_ASC = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  SERVICE_AGREEMENTS_STDDEV_POPULATION_BLOCK_RANGE_DESC = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  SERVICE_AGREEMENTS_STDDEV_POPULATION_CONSUMER_ADDRESS_ASC = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_CONSUMER_ADDRESS_ASC',
  SERVICE_AGREEMENTS_STDDEV_POPULATION_CONSUMER_ADDRESS_DESC = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_CONSUMER_ADDRESS_DESC',
  SERVICE_AGREEMENTS_STDDEV_POPULATION_CREATED_BLOCK_ASC = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_CREATED_BLOCK_ASC',
  SERVICE_AGREEMENTS_STDDEV_POPULATION_CREATED_BLOCK_DESC = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_CREATED_BLOCK_DESC',
  SERVICE_AGREEMENTS_STDDEV_POPULATION_DEPLOYMENT_ID_ASC = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_DEPLOYMENT_ID_ASC',
  SERVICE_AGREEMENTS_STDDEV_POPULATION_DEPLOYMENT_ID_DESC = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_DEPLOYMENT_ID_DESC',
  SERVICE_AGREEMENTS_STDDEV_POPULATION_END_TIME_ASC = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_END_TIME_ASC',
  SERVICE_AGREEMENTS_STDDEV_POPULATION_END_TIME_DESC = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_END_TIME_DESC',
  SERVICE_AGREEMENTS_STDDEV_POPULATION_ID_ASC = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_ID_ASC',
  SERVICE_AGREEMENTS_STDDEV_POPULATION_ID_DESC = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_ID_DESC',
  SERVICE_AGREEMENTS_STDDEV_POPULATION_INDEXER_ADDRESS_ASC = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_INDEXER_ADDRESS_ASC',
  SERVICE_AGREEMENTS_STDDEV_POPULATION_INDEXER_ADDRESS_DESC = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_INDEXER_ADDRESS_DESC',
  SERVICE_AGREEMENTS_STDDEV_POPULATION_LAST_EVENT_ASC = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_LAST_EVENT_ASC',
  SERVICE_AGREEMENTS_STDDEV_POPULATION_LAST_EVENT_DESC = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_LAST_EVENT_DESC',
  SERVICE_AGREEMENTS_STDDEV_POPULATION_LOCKED_AMOUNT_ASC = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_LOCKED_AMOUNT_ASC',
  SERVICE_AGREEMENTS_STDDEV_POPULATION_LOCKED_AMOUNT_DESC = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_LOCKED_AMOUNT_DESC',
  SERVICE_AGREEMENTS_STDDEV_POPULATION_PERIOD_ASC = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_PERIOD_ASC',
  SERVICE_AGREEMENTS_STDDEV_POPULATION_PERIOD_DESC = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_PERIOD_DESC',
  SERVICE_AGREEMENTS_STDDEV_POPULATION_PLAN_TEMPLATE_ID_ASC = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_PLAN_TEMPLATE_ID_ASC',
  SERVICE_AGREEMENTS_STDDEV_POPULATION_PLAN_TEMPLATE_ID_DESC = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_PLAN_TEMPLATE_ID_DESC',
  SERVICE_AGREEMENTS_STDDEV_POPULATION_START_TIME_ASC = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_START_TIME_ASC',
  SERVICE_AGREEMENTS_STDDEV_POPULATION_START_TIME_DESC = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_START_TIME_DESC',
  SERVICE_AGREEMENTS_STDDEV_SAMPLE_BLOCK_RANGE_ASC = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  SERVICE_AGREEMENTS_STDDEV_SAMPLE_BLOCK_RANGE_DESC = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  SERVICE_AGREEMENTS_STDDEV_SAMPLE_CONSUMER_ADDRESS_ASC = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_CONSUMER_ADDRESS_ASC',
  SERVICE_AGREEMENTS_STDDEV_SAMPLE_CONSUMER_ADDRESS_DESC = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_CONSUMER_ADDRESS_DESC',
  SERVICE_AGREEMENTS_STDDEV_SAMPLE_CREATED_BLOCK_ASC = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_CREATED_BLOCK_ASC',
  SERVICE_AGREEMENTS_STDDEV_SAMPLE_CREATED_BLOCK_DESC = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_CREATED_BLOCK_DESC',
  SERVICE_AGREEMENTS_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC',
  SERVICE_AGREEMENTS_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC',
  SERVICE_AGREEMENTS_STDDEV_SAMPLE_END_TIME_ASC = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_END_TIME_ASC',
  SERVICE_AGREEMENTS_STDDEV_SAMPLE_END_TIME_DESC = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_END_TIME_DESC',
  SERVICE_AGREEMENTS_STDDEV_SAMPLE_ID_ASC = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_ID_ASC',
  SERVICE_AGREEMENTS_STDDEV_SAMPLE_ID_DESC = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_ID_DESC',
  SERVICE_AGREEMENTS_STDDEV_SAMPLE_INDEXER_ADDRESS_ASC = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_INDEXER_ADDRESS_ASC',
  SERVICE_AGREEMENTS_STDDEV_SAMPLE_INDEXER_ADDRESS_DESC = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_INDEXER_ADDRESS_DESC',
  SERVICE_AGREEMENTS_STDDEV_SAMPLE_LAST_EVENT_ASC = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_LAST_EVENT_ASC',
  SERVICE_AGREEMENTS_STDDEV_SAMPLE_LAST_EVENT_DESC = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_LAST_EVENT_DESC',
  SERVICE_AGREEMENTS_STDDEV_SAMPLE_LOCKED_AMOUNT_ASC = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_LOCKED_AMOUNT_ASC',
  SERVICE_AGREEMENTS_STDDEV_SAMPLE_LOCKED_AMOUNT_DESC = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_LOCKED_AMOUNT_DESC',
  SERVICE_AGREEMENTS_STDDEV_SAMPLE_PERIOD_ASC = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_PERIOD_ASC',
  SERVICE_AGREEMENTS_STDDEV_SAMPLE_PERIOD_DESC = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_PERIOD_DESC',
  SERVICE_AGREEMENTS_STDDEV_SAMPLE_PLAN_TEMPLATE_ID_ASC = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_PLAN_TEMPLATE_ID_ASC',
  SERVICE_AGREEMENTS_STDDEV_SAMPLE_PLAN_TEMPLATE_ID_DESC = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_PLAN_TEMPLATE_ID_DESC',
  SERVICE_AGREEMENTS_STDDEV_SAMPLE_START_TIME_ASC = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_START_TIME_ASC',
  SERVICE_AGREEMENTS_STDDEV_SAMPLE_START_TIME_DESC = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_START_TIME_DESC',
  SERVICE_AGREEMENTS_SUM_BLOCK_RANGE_ASC = 'SERVICE_AGREEMENTS_SUM_BLOCK_RANGE_ASC',
  SERVICE_AGREEMENTS_SUM_BLOCK_RANGE_DESC = 'SERVICE_AGREEMENTS_SUM_BLOCK_RANGE_DESC',
  SERVICE_AGREEMENTS_SUM_CONSUMER_ADDRESS_ASC = 'SERVICE_AGREEMENTS_SUM_CONSUMER_ADDRESS_ASC',
  SERVICE_AGREEMENTS_SUM_CONSUMER_ADDRESS_DESC = 'SERVICE_AGREEMENTS_SUM_CONSUMER_ADDRESS_DESC',
  SERVICE_AGREEMENTS_SUM_CREATED_BLOCK_ASC = 'SERVICE_AGREEMENTS_SUM_CREATED_BLOCK_ASC',
  SERVICE_AGREEMENTS_SUM_CREATED_BLOCK_DESC = 'SERVICE_AGREEMENTS_SUM_CREATED_BLOCK_DESC',
  SERVICE_AGREEMENTS_SUM_DEPLOYMENT_ID_ASC = 'SERVICE_AGREEMENTS_SUM_DEPLOYMENT_ID_ASC',
  SERVICE_AGREEMENTS_SUM_DEPLOYMENT_ID_DESC = 'SERVICE_AGREEMENTS_SUM_DEPLOYMENT_ID_DESC',
  SERVICE_AGREEMENTS_SUM_END_TIME_ASC = 'SERVICE_AGREEMENTS_SUM_END_TIME_ASC',
  SERVICE_AGREEMENTS_SUM_END_TIME_DESC = 'SERVICE_AGREEMENTS_SUM_END_TIME_DESC',
  SERVICE_AGREEMENTS_SUM_ID_ASC = 'SERVICE_AGREEMENTS_SUM_ID_ASC',
  SERVICE_AGREEMENTS_SUM_ID_DESC = 'SERVICE_AGREEMENTS_SUM_ID_DESC',
  SERVICE_AGREEMENTS_SUM_INDEXER_ADDRESS_ASC = 'SERVICE_AGREEMENTS_SUM_INDEXER_ADDRESS_ASC',
  SERVICE_AGREEMENTS_SUM_INDEXER_ADDRESS_DESC = 'SERVICE_AGREEMENTS_SUM_INDEXER_ADDRESS_DESC',
  SERVICE_AGREEMENTS_SUM_LAST_EVENT_ASC = 'SERVICE_AGREEMENTS_SUM_LAST_EVENT_ASC',
  SERVICE_AGREEMENTS_SUM_LAST_EVENT_DESC = 'SERVICE_AGREEMENTS_SUM_LAST_EVENT_DESC',
  SERVICE_AGREEMENTS_SUM_LOCKED_AMOUNT_ASC = 'SERVICE_AGREEMENTS_SUM_LOCKED_AMOUNT_ASC',
  SERVICE_AGREEMENTS_SUM_LOCKED_AMOUNT_DESC = 'SERVICE_AGREEMENTS_SUM_LOCKED_AMOUNT_DESC',
  SERVICE_AGREEMENTS_SUM_PERIOD_ASC = 'SERVICE_AGREEMENTS_SUM_PERIOD_ASC',
  SERVICE_AGREEMENTS_SUM_PERIOD_DESC = 'SERVICE_AGREEMENTS_SUM_PERIOD_DESC',
  SERVICE_AGREEMENTS_SUM_PLAN_TEMPLATE_ID_ASC = 'SERVICE_AGREEMENTS_SUM_PLAN_TEMPLATE_ID_ASC',
  SERVICE_AGREEMENTS_SUM_PLAN_TEMPLATE_ID_DESC = 'SERVICE_AGREEMENTS_SUM_PLAN_TEMPLATE_ID_DESC',
  SERVICE_AGREEMENTS_SUM_START_TIME_ASC = 'SERVICE_AGREEMENTS_SUM_START_TIME_ASC',
  SERVICE_AGREEMENTS_SUM_START_TIME_DESC = 'SERVICE_AGREEMENTS_SUM_START_TIME_DESC',
  SERVICE_AGREEMENTS_VARIANCE_POPULATION_BLOCK_RANGE_ASC = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  SERVICE_AGREEMENTS_VARIANCE_POPULATION_BLOCK_RANGE_DESC = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  SERVICE_AGREEMENTS_VARIANCE_POPULATION_CONSUMER_ADDRESS_ASC = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_CONSUMER_ADDRESS_ASC',
  SERVICE_AGREEMENTS_VARIANCE_POPULATION_CONSUMER_ADDRESS_DESC = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_CONSUMER_ADDRESS_DESC',
  SERVICE_AGREEMENTS_VARIANCE_POPULATION_CREATED_BLOCK_ASC = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_CREATED_BLOCK_ASC',
  SERVICE_AGREEMENTS_VARIANCE_POPULATION_CREATED_BLOCK_DESC = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_CREATED_BLOCK_DESC',
  SERVICE_AGREEMENTS_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC',
  SERVICE_AGREEMENTS_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC',
  SERVICE_AGREEMENTS_VARIANCE_POPULATION_END_TIME_ASC = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_END_TIME_ASC',
  SERVICE_AGREEMENTS_VARIANCE_POPULATION_END_TIME_DESC = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_END_TIME_DESC',
  SERVICE_AGREEMENTS_VARIANCE_POPULATION_ID_ASC = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_ID_ASC',
  SERVICE_AGREEMENTS_VARIANCE_POPULATION_ID_DESC = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_ID_DESC',
  SERVICE_AGREEMENTS_VARIANCE_POPULATION_INDEXER_ADDRESS_ASC = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_INDEXER_ADDRESS_ASC',
  SERVICE_AGREEMENTS_VARIANCE_POPULATION_INDEXER_ADDRESS_DESC = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_INDEXER_ADDRESS_DESC',
  SERVICE_AGREEMENTS_VARIANCE_POPULATION_LAST_EVENT_ASC = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_LAST_EVENT_ASC',
  SERVICE_AGREEMENTS_VARIANCE_POPULATION_LAST_EVENT_DESC = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_LAST_EVENT_DESC',
  SERVICE_AGREEMENTS_VARIANCE_POPULATION_LOCKED_AMOUNT_ASC = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_LOCKED_AMOUNT_ASC',
  SERVICE_AGREEMENTS_VARIANCE_POPULATION_LOCKED_AMOUNT_DESC = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_LOCKED_AMOUNT_DESC',
  SERVICE_AGREEMENTS_VARIANCE_POPULATION_PERIOD_ASC = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_PERIOD_ASC',
  SERVICE_AGREEMENTS_VARIANCE_POPULATION_PERIOD_DESC = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_PERIOD_DESC',
  SERVICE_AGREEMENTS_VARIANCE_POPULATION_PLAN_TEMPLATE_ID_ASC = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_PLAN_TEMPLATE_ID_ASC',
  SERVICE_AGREEMENTS_VARIANCE_POPULATION_PLAN_TEMPLATE_ID_DESC = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_PLAN_TEMPLATE_ID_DESC',
  SERVICE_AGREEMENTS_VARIANCE_POPULATION_START_TIME_ASC = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_START_TIME_ASC',
  SERVICE_AGREEMENTS_VARIANCE_POPULATION_START_TIME_DESC = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_START_TIME_DESC',
  SERVICE_AGREEMENTS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  SERVICE_AGREEMENTS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  SERVICE_AGREEMENTS_VARIANCE_SAMPLE_CONSUMER_ADDRESS_ASC = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_CONSUMER_ADDRESS_ASC',
  SERVICE_AGREEMENTS_VARIANCE_SAMPLE_CONSUMER_ADDRESS_DESC = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_CONSUMER_ADDRESS_DESC',
  SERVICE_AGREEMENTS_VARIANCE_SAMPLE_CREATED_BLOCK_ASC = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_CREATED_BLOCK_ASC',
  SERVICE_AGREEMENTS_VARIANCE_SAMPLE_CREATED_BLOCK_DESC = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_CREATED_BLOCK_DESC',
  SERVICE_AGREEMENTS_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC',
  SERVICE_AGREEMENTS_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC',
  SERVICE_AGREEMENTS_VARIANCE_SAMPLE_END_TIME_ASC = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_END_TIME_ASC',
  SERVICE_AGREEMENTS_VARIANCE_SAMPLE_END_TIME_DESC = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_END_TIME_DESC',
  SERVICE_AGREEMENTS_VARIANCE_SAMPLE_ID_ASC = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_ID_ASC',
  SERVICE_AGREEMENTS_VARIANCE_SAMPLE_ID_DESC = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_ID_DESC',
  SERVICE_AGREEMENTS_VARIANCE_SAMPLE_INDEXER_ADDRESS_ASC = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_INDEXER_ADDRESS_ASC',
  SERVICE_AGREEMENTS_VARIANCE_SAMPLE_INDEXER_ADDRESS_DESC = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_INDEXER_ADDRESS_DESC',
  SERVICE_AGREEMENTS_VARIANCE_SAMPLE_LAST_EVENT_ASC = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_LAST_EVENT_ASC',
  SERVICE_AGREEMENTS_VARIANCE_SAMPLE_LAST_EVENT_DESC = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_LAST_EVENT_DESC',
  SERVICE_AGREEMENTS_VARIANCE_SAMPLE_LOCKED_AMOUNT_ASC = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_LOCKED_AMOUNT_ASC',
  SERVICE_AGREEMENTS_VARIANCE_SAMPLE_LOCKED_AMOUNT_DESC = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_LOCKED_AMOUNT_DESC',
  SERVICE_AGREEMENTS_VARIANCE_SAMPLE_PERIOD_ASC = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_PERIOD_ASC',
  SERVICE_AGREEMENTS_VARIANCE_SAMPLE_PERIOD_DESC = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_PERIOD_DESC',
  SERVICE_AGREEMENTS_VARIANCE_SAMPLE_PLAN_TEMPLATE_ID_ASC = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_PLAN_TEMPLATE_ID_ASC',
  SERVICE_AGREEMENTS_VARIANCE_SAMPLE_PLAN_TEMPLATE_ID_DESC = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_PLAN_TEMPLATE_ID_DESC',
  SERVICE_AGREEMENTS_VARIANCE_SAMPLE_START_TIME_ASC = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_START_TIME_ASC',
  SERVICE_AGREEMENTS_VARIANCE_SAMPLE_START_TIME_DESC = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_START_TIME_DESC',
  STATE_CHANNELS_AVERAGE_AGENT_ASC = 'STATE_CHANNELS_AVERAGE_AGENT_ASC',
  STATE_CHANNELS_AVERAGE_AGENT_DESC = 'STATE_CHANNELS_AVERAGE_AGENT_DESC',
  STATE_CHANNELS_AVERAGE_BLOCK_RANGE_ASC = 'STATE_CHANNELS_AVERAGE_BLOCK_RANGE_ASC',
  STATE_CHANNELS_AVERAGE_BLOCK_RANGE_DESC = 'STATE_CHANNELS_AVERAGE_BLOCK_RANGE_DESC',
  STATE_CHANNELS_AVERAGE_CONSUMER_ASC = 'STATE_CHANNELS_AVERAGE_CONSUMER_ASC',
  STATE_CHANNELS_AVERAGE_CONSUMER_DESC = 'STATE_CHANNELS_AVERAGE_CONSUMER_DESC',
  STATE_CHANNELS_AVERAGE_DEPLOYMENT_ID_ASC = 'STATE_CHANNELS_AVERAGE_DEPLOYMENT_ID_ASC',
  STATE_CHANNELS_AVERAGE_DEPLOYMENT_ID_DESC = 'STATE_CHANNELS_AVERAGE_DEPLOYMENT_ID_DESC',
  STATE_CHANNELS_AVERAGE_EXPIRED_AT_ASC = 'STATE_CHANNELS_AVERAGE_EXPIRED_AT_ASC',
  STATE_CHANNELS_AVERAGE_EXPIRED_AT_DESC = 'STATE_CHANNELS_AVERAGE_EXPIRED_AT_DESC',
  STATE_CHANNELS_AVERAGE_ID_ASC = 'STATE_CHANNELS_AVERAGE_ID_ASC',
  STATE_CHANNELS_AVERAGE_ID_DESC = 'STATE_CHANNELS_AVERAGE_ID_DESC',
  STATE_CHANNELS_AVERAGE_INDEXER_ASC = 'STATE_CHANNELS_AVERAGE_INDEXER_ASC',
  STATE_CHANNELS_AVERAGE_INDEXER_DESC = 'STATE_CHANNELS_AVERAGE_INDEXER_DESC',
  STATE_CHANNELS_AVERAGE_IS_FINAL_ASC = 'STATE_CHANNELS_AVERAGE_IS_FINAL_ASC',
  STATE_CHANNELS_AVERAGE_IS_FINAL_DESC = 'STATE_CHANNELS_AVERAGE_IS_FINAL_DESC',
  STATE_CHANNELS_AVERAGE_LAST_EVENT_ASC = 'STATE_CHANNELS_AVERAGE_LAST_EVENT_ASC',
  STATE_CHANNELS_AVERAGE_LAST_EVENT_DESC = 'STATE_CHANNELS_AVERAGE_LAST_EVENT_DESC',
  STATE_CHANNELS_AVERAGE_PRICE_ASC = 'STATE_CHANNELS_AVERAGE_PRICE_ASC',
  STATE_CHANNELS_AVERAGE_PRICE_DESC = 'STATE_CHANNELS_AVERAGE_PRICE_DESC',
  STATE_CHANNELS_AVERAGE_REAL_TOTAL_ASC = 'STATE_CHANNELS_AVERAGE_REAL_TOTAL_ASC',
  STATE_CHANNELS_AVERAGE_REAL_TOTAL_DESC = 'STATE_CHANNELS_AVERAGE_REAL_TOTAL_DESC',
  STATE_CHANNELS_AVERAGE_SPENT_ASC = 'STATE_CHANNELS_AVERAGE_SPENT_ASC',
  STATE_CHANNELS_AVERAGE_SPENT_DESC = 'STATE_CHANNELS_AVERAGE_SPENT_DESC',
  STATE_CHANNELS_AVERAGE_START_TIME_ASC = 'STATE_CHANNELS_AVERAGE_START_TIME_ASC',
  STATE_CHANNELS_AVERAGE_START_TIME_DESC = 'STATE_CHANNELS_AVERAGE_START_TIME_DESC',
  STATE_CHANNELS_AVERAGE_STATUS_ASC = 'STATE_CHANNELS_AVERAGE_STATUS_ASC',
  STATE_CHANNELS_AVERAGE_STATUS_DESC = 'STATE_CHANNELS_AVERAGE_STATUS_DESC',
  STATE_CHANNELS_AVERAGE_TERMINATED_AT_ASC = 'STATE_CHANNELS_AVERAGE_TERMINATED_AT_ASC',
  STATE_CHANNELS_AVERAGE_TERMINATED_AT_DESC = 'STATE_CHANNELS_AVERAGE_TERMINATED_AT_DESC',
  STATE_CHANNELS_AVERAGE_TERMINATE_BY_INDEXER_ASC = 'STATE_CHANNELS_AVERAGE_TERMINATE_BY_INDEXER_ASC',
  STATE_CHANNELS_AVERAGE_TERMINATE_BY_INDEXER_DESC = 'STATE_CHANNELS_AVERAGE_TERMINATE_BY_INDEXER_DESC',
  STATE_CHANNELS_AVERAGE_TOTAL_ASC = 'STATE_CHANNELS_AVERAGE_TOTAL_ASC',
  STATE_CHANNELS_AVERAGE_TOTAL_DESC = 'STATE_CHANNELS_AVERAGE_TOTAL_DESC',
  STATE_CHANNELS_BY_DEPLOYMENT_ID__COUNT_ASC = 'STATE_CHANNELS_BY_DEPLOYMENT_ID__COUNT_ASC',
  STATE_CHANNELS_BY_DEPLOYMENT_ID__COUNT_DESC = 'STATE_CHANNELS_BY_DEPLOYMENT_ID__COUNT_DESC',
  STATE_CHANNELS_COUNT_ASC = 'STATE_CHANNELS_COUNT_ASC',
  STATE_CHANNELS_COUNT_DESC = 'STATE_CHANNELS_COUNT_DESC',
  STATE_CHANNELS_DISTINCT_COUNT_AGENT_ASC = 'STATE_CHANNELS_DISTINCT_COUNT_AGENT_ASC',
  STATE_CHANNELS_DISTINCT_COUNT_AGENT_DESC = 'STATE_CHANNELS_DISTINCT_COUNT_AGENT_DESC',
  STATE_CHANNELS_DISTINCT_COUNT_BLOCK_RANGE_ASC = 'STATE_CHANNELS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  STATE_CHANNELS_DISTINCT_COUNT_BLOCK_RANGE_DESC = 'STATE_CHANNELS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  STATE_CHANNELS_DISTINCT_COUNT_CONSUMER_ASC = 'STATE_CHANNELS_DISTINCT_COUNT_CONSUMER_ASC',
  STATE_CHANNELS_DISTINCT_COUNT_CONSUMER_DESC = 'STATE_CHANNELS_DISTINCT_COUNT_CONSUMER_DESC',
  STATE_CHANNELS_DISTINCT_COUNT_DEPLOYMENT_ID_ASC = 'STATE_CHANNELS_DISTINCT_COUNT_DEPLOYMENT_ID_ASC',
  STATE_CHANNELS_DISTINCT_COUNT_DEPLOYMENT_ID_DESC = 'STATE_CHANNELS_DISTINCT_COUNT_DEPLOYMENT_ID_DESC',
  STATE_CHANNELS_DISTINCT_COUNT_EXPIRED_AT_ASC = 'STATE_CHANNELS_DISTINCT_COUNT_EXPIRED_AT_ASC',
  STATE_CHANNELS_DISTINCT_COUNT_EXPIRED_AT_DESC = 'STATE_CHANNELS_DISTINCT_COUNT_EXPIRED_AT_DESC',
  STATE_CHANNELS_DISTINCT_COUNT_ID_ASC = 'STATE_CHANNELS_DISTINCT_COUNT_ID_ASC',
  STATE_CHANNELS_DISTINCT_COUNT_ID_DESC = 'STATE_CHANNELS_DISTINCT_COUNT_ID_DESC',
  STATE_CHANNELS_DISTINCT_COUNT_INDEXER_ASC = 'STATE_CHANNELS_DISTINCT_COUNT_INDEXER_ASC',
  STATE_CHANNELS_DISTINCT_COUNT_INDEXER_DESC = 'STATE_CHANNELS_DISTINCT_COUNT_INDEXER_DESC',
  STATE_CHANNELS_DISTINCT_COUNT_IS_FINAL_ASC = 'STATE_CHANNELS_DISTINCT_COUNT_IS_FINAL_ASC',
  STATE_CHANNELS_DISTINCT_COUNT_IS_FINAL_DESC = 'STATE_CHANNELS_DISTINCT_COUNT_IS_FINAL_DESC',
  STATE_CHANNELS_DISTINCT_COUNT_LAST_EVENT_ASC = 'STATE_CHANNELS_DISTINCT_COUNT_LAST_EVENT_ASC',
  STATE_CHANNELS_DISTINCT_COUNT_LAST_EVENT_DESC = 'STATE_CHANNELS_DISTINCT_COUNT_LAST_EVENT_DESC',
  STATE_CHANNELS_DISTINCT_COUNT_PRICE_ASC = 'STATE_CHANNELS_DISTINCT_COUNT_PRICE_ASC',
  STATE_CHANNELS_DISTINCT_COUNT_PRICE_DESC = 'STATE_CHANNELS_DISTINCT_COUNT_PRICE_DESC',
  STATE_CHANNELS_DISTINCT_COUNT_REAL_TOTAL_ASC = 'STATE_CHANNELS_DISTINCT_COUNT_REAL_TOTAL_ASC',
  STATE_CHANNELS_DISTINCT_COUNT_REAL_TOTAL_DESC = 'STATE_CHANNELS_DISTINCT_COUNT_REAL_TOTAL_DESC',
  STATE_CHANNELS_DISTINCT_COUNT_SPENT_ASC = 'STATE_CHANNELS_DISTINCT_COUNT_SPENT_ASC',
  STATE_CHANNELS_DISTINCT_COUNT_SPENT_DESC = 'STATE_CHANNELS_DISTINCT_COUNT_SPENT_DESC',
  STATE_CHANNELS_DISTINCT_COUNT_START_TIME_ASC = 'STATE_CHANNELS_DISTINCT_COUNT_START_TIME_ASC',
  STATE_CHANNELS_DISTINCT_COUNT_START_TIME_DESC = 'STATE_CHANNELS_DISTINCT_COUNT_START_TIME_DESC',
  STATE_CHANNELS_DISTINCT_COUNT_STATUS_ASC = 'STATE_CHANNELS_DISTINCT_COUNT_STATUS_ASC',
  STATE_CHANNELS_DISTINCT_COUNT_STATUS_DESC = 'STATE_CHANNELS_DISTINCT_COUNT_STATUS_DESC',
  STATE_CHANNELS_DISTINCT_COUNT_TERMINATED_AT_ASC = 'STATE_CHANNELS_DISTINCT_COUNT_TERMINATED_AT_ASC',
  STATE_CHANNELS_DISTINCT_COUNT_TERMINATED_AT_DESC = 'STATE_CHANNELS_DISTINCT_COUNT_TERMINATED_AT_DESC',
  STATE_CHANNELS_DISTINCT_COUNT_TERMINATE_BY_INDEXER_ASC = 'STATE_CHANNELS_DISTINCT_COUNT_TERMINATE_BY_INDEXER_ASC',
  STATE_CHANNELS_DISTINCT_COUNT_TERMINATE_BY_INDEXER_DESC = 'STATE_CHANNELS_DISTINCT_COUNT_TERMINATE_BY_INDEXER_DESC',
  STATE_CHANNELS_DISTINCT_COUNT_TOTAL_ASC = 'STATE_CHANNELS_DISTINCT_COUNT_TOTAL_ASC',
  STATE_CHANNELS_DISTINCT_COUNT_TOTAL_DESC = 'STATE_CHANNELS_DISTINCT_COUNT_TOTAL_DESC',
  STATE_CHANNELS_MAX_AGENT_ASC = 'STATE_CHANNELS_MAX_AGENT_ASC',
  STATE_CHANNELS_MAX_AGENT_DESC = 'STATE_CHANNELS_MAX_AGENT_DESC',
  STATE_CHANNELS_MAX_BLOCK_RANGE_ASC = 'STATE_CHANNELS_MAX_BLOCK_RANGE_ASC',
  STATE_CHANNELS_MAX_BLOCK_RANGE_DESC = 'STATE_CHANNELS_MAX_BLOCK_RANGE_DESC',
  STATE_CHANNELS_MAX_CONSUMER_ASC = 'STATE_CHANNELS_MAX_CONSUMER_ASC',
  STATE_CHANNELS_MAX_CONSUMER_DESC = 'STATE_CHANNELS_MAX_CONSUMER_DESC',
  STATE_CHANNELS_MAX_DEPLOYMENT_ID_ASC = 'STATE_CHANNELS_MAX_DEPLOYMENT_ID_ASC',
  STATE_CHANNELS_MAX_DEPLOYMENT_ID_DESC = 'STATE_CHANNELS_MAX_DEPLOYMENT_ID_DESC',
  STATE_CHANNELS_MAX_EXPIRED_AT_ASC = 'STATE_CHANNELS_MAX_EXPIRED_AT_ASC',
  STATE_CHANNELS_MAX_EXPIRED_AT_DESC = 'STATE_CHANNELS_MAX_EXPIRED_AT_DESC',
  STATE_CHANNELS_MAX_ID_ASC = 'STATE_CHANNELS_MAX_ID_ASC',
  STATE_CHANNELS_MAX_ID_DESC = 'STATE_CHANNELS_MAX_ID_DESC',
  STATE_CHANNELS_MAX_INDEXER_ASC = 'STATE_CHANNELS_MAX_INDEXER_ASC',
  STATE_CHANNELS_MAX_INDEXER_DESC = 'STATE_CHANNELS_MAX_INDEXER_DESC',
  STATE_CHANNELS_MAX_IS_FINAL_ASC = 'STATE_CHANNELS_MAX_IS_FINAL_ASC',
  STATE_CHANNELS_MAX_IS_FINAL_DESC = 'STATE_CHANNELS_MAX_IS_FINAL_DESC',
  STATE_CHANNELS_MAX_LAST_EVENT_ASC = 'STATE_CHANNELS_MAX_LAST_EVENT_ASC',
  STATE_CHANNELS_MAX_LAST_EVENT_DESC = 'STATE_CHANNELS_MAX_LAST_EVENT_DESC',
  STATE_CHANNELS_MAX_PRICE_ASC = 'STATE_CHANNELS_MAX_PRICE_ASC',
  STATE_CHANNELS_MAX_PRICE_DESC = 'STATE_CHANNELS_MAX_PRICE_DESC',
  STATE_CHANNELS_MAX_REAL_TOTAL_ASC = 'STATE_CHANNELS_MAX_REAL_TOTAL_ASC',
  STATE_CHANNELS_MAX_REAL_TOTAL_DESC = 'STATE_CHANNELS_MAX_REAL_TOTAL_DESC',
  STATE_CHANNELS_MAX_SPENT_ASC = 'STATE_CHANNELS_MAX_SPENT_ASC',
  STATE_CHANNELS_MAX_SPENT_DESC = 'STATE_CHANNELS_MAX_SPENT_DESC',
  STATE_CHANNELS_MAX_START_TIME_ASC = 'STATE_CHANNELS_MAX_START_TIME_ASC',
  STATE_CHANNELS_MAX_START_TIME_DESC = 'STATE_CHANNELS_MAX_START_TIME_DESC',
  STATE_CHANNELS_MAX_STATUS_ASC = 'STATE_CHANNELS_MAX_STATUS_ASC',
  STATE_CHANNELS_MAX_STATUS_DESC = 'STATE_CHANNELS_MAX_STATUS_DESC',
  STATE_CHANNELS_MAX_TERMINATED_AT_ASC = 'STATE_CHANNELS_MAX_TERMINATED_AT_ASC',
  STATE_CHANNELS_MAX_TERMINATED_AT_DESC = 'STATE_CHANNELS_MAX_TERMINATED_AT_DESC',
  STATE_CHANNELS_MAX_TERMINATE_BY_INDEXER_ASC = 'STATE_CHANNELS_MAX_TERMINATE_BY_INDEXER_ASC',
  STATE_CHANNELS_MAX_TERMINATE_BY_INDEXER_DESC = 'STATE_CHANNELS_MAX_TERMINATE_BY_INDEXER_DESC',
  STATE_CHANNELS_MAX_TOTAL_ASC = 'STATE_CHANNELS_MAX_TOTAL_ASC',
  STATE_CHANNELS_MAX_TOTAL_DESC = 'STATE_CHANNELS_MAX_TOTAL_DESC',
  STATE_CHANNELS_MIN_AGENT_ASC = 'STATE_CHANNELS_MIN_AGENT_ASC',
  STATE_CHANNELS_MIN_AGENT_DESC = 'STATE_CHANNELS_MIN_AGENT_DESC',
  STATE_CHANNELS_MIN_BLOCK_RANGE_ASC = 'STATE_CHANNELS_MIN_BLOCK_RANGE_ASC',
  STATE_CHANNELS_MIN_BLOCK_RANGE_DESC = 'STATE_CHANNELS_MIN_BLOCK_RANGE_DESC',
  STATE_CHANNELS_MIN_CONSUMER_ASC = 'STATE_CHANNELS_MIN_CONSUMER_ASC',
  STATE_CHANNELS_MIN_CONSUMER_DESC = 'STATE_CHANNELS_MIN_CONSUMER_DESC',
  STATE_CHANNELS_MIN_DEPLOYMENT_ID_ASC = 'STATE_CHANNELS_MIN_DEPLOYMENT_ID_ASC',
  STATE_CHANNELS_MIN_DEPLOYMENT_ID_DESC = 'STATE_CHANNELS_MIN_DEPLOYMENT_ID_DESC',
  STATE_CHANNELS_MIN_EXPIRED_AT_ASC = 'STATE_CHANNELS_MIN_EXPIRED_AT_ASC',
  STATE_CHANNELS_MIN_EXPIRED_AT_DESC = 'STATE_CHANNELS_MIN_EXPIRED_AT_DESC',
  STATE_CHANNELS_MIN_ID_ASC = 'STATE_CHANNELS_MIN_ID_ASC',
  STATE_CHANNELS_MIN_ID_DESC = 'STATE_CHANNELS_MIN_ID_DESC',
  STATE_CHANNELS_MIN_INDEXER_ASC = 'STATE_CHANNELS_MIN_INDEXER_ASC',
  STATE_CHANNELS_MIN_INDEXER_DESC = 'STATE_CHANNELS_MIN_INDEXER_DESC',
  STATE_CHANNELS_MIN_IS_FINAL_ASC = 'STATE_CHANNELS_MIN_IS_FINAL_ASC',
  STATE_CHANNELS_MIN_IS_FINAL_DESC = 'STATE_CHANNELS_MIN_IS_FINAL_DESC',
  STATE_CHANNELS_MIN_LAST_EVENT_ASC = 'STATE_CHANNELS_MIN_LAST_EVENT_ASC',
  STATE_CHANNELS_MIN_LAST_EVENT_DESC = 'STATE_CHANNELS_MIN_LAST_EVENT_DESC',
  STATE_CHANNELS_MIN_PRICE_ASC = 'STATE_CHANNELS_MIN_PRICE_ASC',
  STATE_CHANNELS_MIN_PRICE_DESC = 'STATE_CHANNELS_MIN_PRICE_DESC',
  STATE_CHANNELS_MIN_REAL_TOTAL_ASC = 'STATE_CHANNELS_MIN_REAL_TOTAL_ASC',
  STATE_CHANNELS_MIN_REAL_TOTAL_DESC = 'STATE_CHANNELS_MIN_REAL_TOTAL_DESC',
  STATE_CHANNELS_MIN_SPENT_ASC = 'STATE_CHANNELS_MIN_SPENT_ASC',
  STATE_CHANNELS_MIN_SPENT_DESC = 'STATE_CHANNELS_MIN_SPENT_DESC',
  STATE_CHANNELS_MIN_START_TIME_ASC = 'STATE_CHANNELS_MIN_START_TIME_ASC',
  STATE_CHANNELS_MIN_START_TIME_DESC = 'STATE_CHANNELS_MIN_START_TIME_DESC',
  STATE_CHANNELS_MIN_STATUS_ASC = 'STATE_CHANNELS_MIN_STATUS_ASC',
  STATE_CHANNELS_MIN_STATUS_DESC = 'STATE_CHANNELS_MIN_STATUS_DESC',
  STATE_CHANNELS_MIN_TERMINATED_AT_ASC = 'STATE_CHANNELS_MIN_TERMINATED_AT_ASC',
  STATE_CHANNELS_MIN_TERMINATED_AT_DESC = 'STATE_CHANNELS_MIN_TERMINATED_AT_DESC',
  STATE_CHANNELS_MIN_TERMINATE_BY_INDEXER_ASC = 'STATE_CHANNELS_MIN_TERMINATE_BY_INDEXER_ASC',
  STATE_CHANNELS_MIN_TERMINATE_BY_INDEXER_DESC = 'STATE_CHANNELS_MIN_TERMINATE_BY_INDEXER_DESC',
  STATE_CHANNELS_MIN_TOTAL_ASC = 'STATE_CHANNELS_MIN_TOTAL_ASC',
  STATE_CHANNELS_MIN_TOTAL_DESC = 'STATE_CHANNELS_MIN_TOTAL_DESC',
  STATE_CHANNELS_STDDEV_POPULATION_AGENT_ASC = 'STATE_CHANNELS_STDDEV_POPULATION_AGENT_ASC',
  STATE_CHANNELS_STDDEV_POPULATION_AGENT_DESC = 'STATE_CHANNELS_STDDEV_POPULATION_AGENT_DESC',
  STATE_CHANNELS_STDDEV_POPULATION_BLOCK_RANGE_ASC = 'STATE_CHANNELS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  STATE_CHANNELS_STDDEV_POPULATION_BLOCK_RANGE_DESC = 'STATE_CHANNELS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  STATE_CHANNELS_STDDEV_POPULATION_CONSUMER_ASC = 'STATE_CHANNELS_STDDEV_POPULATION_CONSUMER_ASC',
  STATE_CHANNELS_STDDEV_POPULATION_CONSUMER_DESC = 'STATE_CHANNELS_STDDEV_POPULATION_CONSUMER_DESC',
  STATE_CHANNELS_STDDEV_POPULATION_DEPLOYMENT_ID_ASC = 'STATE_CHANNELS_STDDEV_POPULATION_DEPLOYMENT_ID_ASC',
  STATE_CHANNELS_STDDEV_POPULATION_DEPLOYMENT_ID_DESC = 'STATE_CHANNELS_STDDEV_POPULATION_DEPLOYMENT_ID_DESC',
  STATE_CHANNELS_STDDEV_POPULATION_EXPIRED_AT_ASC = 'STATE_CHANNELS_STDDEV_POPULATION_EXPIRED_AT_ASC',
  STATE_CHANNELS_STDDEV_POPULATION_EXPIRED_AT_DESC = 'STATE_CHANNELS_STDDEV_POPULATION_EXPIRED_AT_DESC',
  STATE_CHANNELS_STDDEV_POPULATION_ID_ASC = 'STATE_CHANNELS_STDDEV_POPULATION_ID_ASC',
  STATE_CHANNELS_STDDEV_POPULATION_ID_DESC = 'STATE_CHANNELS_STDDEV_POPULATION_ID_DESC',
  STATE_CHANNELS_STDDEV_POPULATION_INDEXER_ASC = 'STATE_CHANNELS_STDDEV_POPULATION_INDEXER_ASC',
  STATE_CHANNELS_STDDEV_POPULATION_INDEXER_DESC = 'STATE_CHANNELS_STDDEV_POPULATION_INDEXER_DESC',
  STATE_CHANNELS_STDDEV_POPULATION_IS_FINAL_ASC = 'STATE_CHANNELS_STDDEV_POPULATION_IS_FINAL_ASC',
  STATE_CHANNELS_STDDEV_POPULATION_IS_FINAL_DESC = 'STATE_CHANNELS_STDDEV_POPULATION_IS_FINAL_DESC',
  STATE_CHANNELS_STDDEV_POPULATION_LAST_EVENT_ASC = 'STATE_CHANNELS_STDDEV_POPULATION_LAST_EVENT_ASC',
  STATE_CHANNELS_STDDEV_POPULATION_LAST_EVENT_DESC = 'STATE_CHANNELS_STDDEV_POPULATION_LAST_EVENT_DESC',
  STATE_CHANNELS_STDDEV_POPULATION_PRICE_ASC = 'STATE_CHANNELS_STDDEV_POPULATION_PRICE_ASC',
  STATE_CHANNELS_STDDEV_POPULATION_PRICE_DESC = 'STATE_CHANNELS_STDDEV_POPULATION_PRICE_DESC',
  STATE_CHANNELS_STDDEV_POPULATION_REAL_TOTAL_ASC = 'STATE_CHANNELS_STDDEV_POPULATION_REAL_TOTAL_ASC',
  STATE_CHANNELS_STDDEV_POPULATION_REAL_TOTAL_DESC = 'STATE_CHANNELS_STDDEV_POPULATION_REAL_TOTAL_DESC',
  STATE_CHANNELS_STDDEV_POPULATION_SPENT_ASC = 'STATE_CHANNELS_STDDEV_POPULATION_SPENT_ASC',
  STATE_CHANNELS_STDDEV_POPULATION_SPENT_DESC = 'STATE_CHANNELS_STDDEV_POPULATION_SPENT_DESC',
  STATE_CHANNELS_STDDEV_POPULATION_START_TIME_ASC = 'STATE_CHANNELS_STDDEV_POPULATION_START_TIME_ASC',
  STATE_CHANNELS_STDDEV_POPULATION_START_TIME_DESC = 'STATE_CHANNELS_STDDEV_POPULATION_START_TIME_DESC',
  STATE_CHANNELS_STDDEV_POPULATION_STATUS_ASC = 'STATE_CHANNELS_STDDEV_POPULATION_STATUS_ASC',
  STATE_CHANNELS_STDDEV_POPULATION_STATUS_DESC = 'STATE_CHANNELS_STDDEV_POPULATION_STATUS_DESC',
  STATE_CHANNELS_STDDEV_POPULATION_TERMINATED_AT_ASC = 'STATE_CHANNELS_STDDEV_POPULATION_TERMINATED_AT_ASC',
  STATE_CHANNELS_STDDEV_POPULATION_TERMINATED_AT_DESC = 'STATE_CHANNELS_STDDEV_POPULATION_TERMINATED_AT_DESC',
  STATE_CHANNELS_STDDEV_POPULATION_TERMINATE_BY_INDEXER_ASC = 'STATE_CHANNELS_STDDEV_POPULATION_TERMINATE_BY_INDEXER_ASC',
  STATE_CHANNELS_STDDEV_POPULATION_TERMINATE_BY_INDEXER_DESC = 'STATE_CHANNELS_STDDEV_POPULATION_TERMINATE_BY_INDEXER_DESC',
  STATE_CHANNELS_STDDEV_POPULATION_TOTAL_ASC = 'STATE_CHANNELS_STDDEV_POPULATION_TOTAL_ASC',
  STATE_CHANNELS_STDDEV_POPULATION_TOTAL_DESC = 'STATE_CHANNELS_STDDEV_POPULATION_TOTAL_DESC',
  STATE_CHANNELS_STDDEV_SAMPLE_AGENT_ASC = 'STATE_CHANNELS_STDDEV_SAMPLE_AGENT_ASC',
  STATE_CHANNELS_STDDEV_SAMPLE_AGENT_DESC = 'STATE_CHANNELS_STDDEV_SAMPLE_AGENT_DESC',
  STATE_CHANNELS_STDDEV_SAMPLE_BLOCK_RANGE_ASC = 'STATE_CHANNELS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  STATE_CHANNELS_STDDEV_SAMPLE_BLOCK_RANGE_DESC = 'STATE_CHANNELS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  STATE_CHANNELS_STDDEV_SAMPLE_CONSUMER_ASC = 'STATE_CHANNELS_STDDEV_SAMPLE_CONSUMER_ASC',
  STATE_CHANNELS_STDDEV_SAMPLE_CONSUMER_DESC = 'STATE_CHANNELS_STDDEV_SAMPLE_CONSUMER_DESC',
  STATE_CHANNELS_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC = 'STATE_CHANNELS_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC',
  STATE_CHANNELS_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC = 'STATE_CHANNELS_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC',
  STATE_CHANNELS_STDDEV_SAMPLE_EXPIRED_AT_ASC = 'STATE_CHANNELS_STDDEV_SAMPLE_EXPIRED_AT_ASC',
  STATE_CHANNELS_STDDEV_SAMPLE_EXPIRED_AT_DESC = 'STATE_CHANNELS_STDDEV_SAMPLE_EXPIRED_AT_DESC',
  STATE_CHANNELS_STDDEV_SAMPLE_ID_ASC = 'STATE_CHANNELS_STDDEV_SAMPLE_ID_ASC',
  STATE_CHANNELS_STDDEV_SAMPLE_ID_DESC = 'STATE_CHANNELS_STDDEV_SAMPLE_ID_DESC',
  STATE_CHANNELS_STDDEV_SAMPLE_INDEXER_ASC = 'STATE_CHANNELS_STDDEV_SAMPLE_INDEXER_ASC',
  STATE_CHANNELS_STDDEV_SAMPLE_INDEXER_DESC = 'STATE_CHANNELS_STDDEV_SAMPLE_INDEXER_DESC',
  STATE_CHANNELS_STDDEV_SAMPLE_IS_FINAL_ASC = 'STATE_CHANNELS_STDDEV_SAMPLE_IS_FINAL_ASC',
  STATE_CHANNELS_STDDEV_SAMPLE_IS_FINAL_DESC = 'STATE_CHANNELS_STDDEV_SAMPLE_IS_FINAL_DESC',
  STATE_CHANNELS_STDDEV_SAMPLE_LAST_EVENT_ASC = 'STATE_CHANNELS_STDDEV_SAMPLE_LAST_EVENT_ASC',
  STATE_CHANNELS_STDDEV_SAMPLE_LAST_EVENT_DESC = 'STATE_CHANNELS_STDDEV_SAMPLE_LAST_EVENT_DESC',
  STATE_CHANNELS_STDDEV_SAMPLE_PRICE_ASC = 'STATE_CHANNELS_STDDEV_SAMPLE_PRICE_ASC',
  STATE_CHANNELS_STDDEV_SAMPLE_PRICE_DESC = 'STATE_CHANNELS_STDDEV_SAMPLE_PRICE_DESC',
  STATE_CHANNELS_STDDEV_SAMPLE_REAL_TOTAL_ASC = 'STATE_CHANNELS_STDDEV_SAMPLE_REAL_TOTAL_ASC',
  STATE_CHANNELS_STDDEV_SAMPLE_REAL_TOTAL_DESC = 'STATE_CHANNELS_STDDEV_SAMPLE_REAL_TOTAL_DESC',
  STATE_CHANNELS_STDDEV_SAMPLE_SPENT_ASC = 'STATE_CHANNELS_STDDEV_SAMPLE_SPENT_ASC',
  STATE_CHANNELS_STDDEV_SAMPLE_SPENT_DESC = 'STATE_CHANNELS_STDDEV_SAMPLE_SPENT_DESC',
  STATE_CHANNELS_STDDEV_SAMPLE_START_TIME_ASC = 'STATE_CHANNELS_STDDEV_SAMPLE_START_TIME_ASC',
  STATE_CHANNELS_STDDEV_SAMPLE_START_TIME_DESC = 'STATE_CHANNELS_STDDEV_SAMPLE_START_TIME_DESC',
  STATE_CHANNELS_STDDEV_SAMPLE_STATUS_ASC = 'STATE_CHANNELS_STDDEV_SAMPLE_STATUS_ASC',
  STATE_CHANNELS_STDDEV_SAMPLE_STATUS_DESC = 'STATE_CHANNELS_STDDEV_SAMPLE_STATUS_DESC',
  STATE_CHANNELS_STDDEV_SAMPLE_TERMINATED_AT_ASC = 'STATE_CHANNELS_STDDEV_SAMPLE_TERMINATED_AT_ASC',
  STATE_CHANNELS_STDDEV_SAMPLE_TERMINATED_AT_DESC = 'STATE_CHANNELS_STDDEV_SAMPLE_TERMINATED_AT_DESC',
  STATE_CHANNELS_STDDEV_SAMPLE_TERMINATE_BY_INDEXER_ASC = 'STATE_CHANNELS_STDDEV_SAMPLE_TERMINATE_BY_INDEXER_ASC',
  STATE_CHANNELS_STDDEV_SAMPLE_TERMINATE_BY_INDEXER_DESC = 'STATE_CHANNELS_STDDEV_SAMPLE_TERMINATE_BY_INDEXER_DESC',
  STATE_CHANNELS_STDDEV_SAMPLE_TOTAL_ASC = 'STATE_CHANNELS_STDDEV_SAMPLE_TOTAL_ASC',
  STATE_CHANNELS_STDDEV_SAMPLE_TOTAL_DESC = 'STATE_CHANNELS_STDDEV_SAMPLE_TOTAL_DESC',
  STATE_CHANNELS_SUM_AGENT_ASC = 'STATE_CHANNELS_SUM_AGENT_ASC',
  STATE_CHANNELS_SUM_AGENT_DESC = 'STATE_CHANNELS_SUM_AGENT_DESC',
  STATE_CHANNELS_SUM_BLOCK_RANGE_ASC = 'STATE_CHANNELS_SUM_BLOCK_RANGE_ASC',
  STATE_CHANNELS_SUM_BLOCK_RANGE_DESC = 'STATE_CHANNELS_SUM_BLOCK_RANGE_DESC',
  STATE_CHANNELS_SUM_CONSUMER_ASC = 'STATE_CHANNELS_SUM_CONSUMER_ASC',
  STATE_CHANNELS_SUM_CONSUMER_DESC = 'STATE_CHANNELS_SUM_CONSUMER_DESC',
  STATE_CHANNELS_SUM_DEPLOYMENT_ID_ASC = 'STATE_CHANNELS_SUM_DEPLOYMENT_ID_ASC',
  STATE_CHANNELS_SUM_DEPLOYMENT_ID_DESC = 'STATE_CHANNELS_SUM_DEPLOYMENT_ID_DESC',
  STATE_CHANNELS_SUM_EXPIRED_AT_ASC = 'STATE_CHANNELS_SUM_EXPIRED_AT_ASC',
  STATE_CHANNELS_SUM_EXPIRED_AT_DESC = 'STATE_CHANNELS_SUM_EXPIRED_AT_DESC',
  STATE_CHANNELS_SUM_ID_ASC = 'STATE_CHANNELS_SUM_ID_ASC',
  STATE_CHANNELS_SUM_ID_DESC = 'STATE_CHANNELS_SUM_ID_DESC',
  STATE_CHANNELS_SUM_INDEXER_ASC = 'STATE_CHANNELS_SUM_INDEXER_ASC',
  STATE_CHANNELS_SUM_INDEXER_DESC = 'STATE_CHANNELS_SUM_INDEXER_DESC',
  STATE_CHANNELS_SUM_IS_FINAL_ASC = 'STATE_CHANNELS_SUM_IS_FINAL_ASC',
  STATE_CHANNELS_SUM_IS_FINAL_DESC = 'STATE_CHANNELS_SUM_IS_FINAL_DESC',
  STATE_CHANNELS_SUM_LAST_EVENT_ASC = 'STATE_CHANNELS_SUM_LAST_EVENT_ASC',
  STATE_CHANNELS_SUM_LAST_EVENT_DESC = 'STATE_CHANNELS_SUM_LAST_EVENT_DESC',
  STATE_CHANNELS_SUM_PRICE_ASC = 'STATE_CHANNELS_SUM_PRICE_ASC',
  STATE_CHANNELS_SUM_PRICE_DESC = 'STATE_CHANNELS_SUM_PRICE_DESC',
  STATE_CHANNELS_SUM_REAL_TOTAL_ASC = 'STATE_CHANNELS_SUM_REAL_TOTAL_ASC',
  STATE_CHANNELS_SUM_REAL_TOTAL_DESC = 'STATE_CHANNELS_SUM_REAL_TOTAL_DESC',
  STATE_CHANNELS_SUM_SPENT_ASC = 'STATE_CHANNELS_SUM_SPENT_ASC',
  STATE_CHANNELS_SUM_SPENT_DESC = 'STATE_CHANNELS_SUM_SPENT_DESC',
  STATE_CHANNELS_SUM_START_TIME_ASC = 'STATE_CHANNELS_SUM_START_TIME_ASC',
  STATE_CHANNELS_SUM_START_TIME_DESC = 'STATE_CHANNELS_SUM_START_TIME_DESC',
  STATE_CHANNELS_SUM_STATUS_ASC = 'STATE_CHANNELS_SUM_STATUS_ASC',
  STATE_CHANNELS_SUM_STATUS_DESC = 'STATE_CHANNELS_SUM_STATUS_DESC',
  STATE_CHANNELS_SUM_TERMINATED_AT_ASC = 'STATE_CHANNELS_SUM_TERMINATED_AT_ASC',
  STATE_CHANNELS_SUM_TERMINATED_AT_DESC = 'STATE_CHANNELS_SUM_TERMINATED_AT_DESC',
  STATE_CHANNELS_SUM_TERMINATE_BY_INDEXER_ASC = 'STATE_CHANNELS_SUM_TERMINATE_BY_INDEXER_ASC',
  STATE_CHANNELS_SUM_TERMINATE_BY_INDEXER_DESC = 'STATE_CHANNELS_SUM_TERMINATE_BY_INDEXER_DESC',
  STATE_CHANNELS_SUM_TOTAL_ASC = 'STATE_CHANNELS_SUM_TOTAL_ASC',
  STATE_CHANNELS_SUM_TOTAL_DESC = 'STATE_CHANNELS_SUM_TOTAL_DESC',
  STATE_CHANNELS_VARIANCE_POPULATION_AGENT_ASC = 'STATE_CHANNELS_VARIANCE_POPULATION_AGENT_ASC',
  STATE_CHANNELS_VARIANCE_POPULATION_AGENT_DESC = 'STATE_CHANNELS_VARIANCE_POPULATION_AGENT_DESC',
  STATE_CHANNELS_VARIANCE_POPULATION_BLOCK_RANGE_ASC = 'STATE_CHANNELS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  STATE_CHANNELS_VARIANCE_POPULATION_BLOCK_RANGE_DESC = 'STATE_CHANNELS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  STATE_CHANNELS_VARIANCE_POPULATION_CONSUMER_ASC = 'STATE_CHANNELS_VARIANCE_POPULATION_CONSUMER_ASC',
  STATE_CHANNELS_VARIANCE_POPULATION_CONSUMER_DESC = 'STATE_CHANNELS_VARIANCE_POPULATION_CONSUMER_DESC',
  STATE_CHANNELS_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC = 'STATE_CHANNELS_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC',
  STATE_CHANNELS_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC = 'STATE_CHANNELS_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC',
  STATE_CHANNELS_VARIANCE_POPULATION_EXPIRED_AT_ASC = 'STATE_CHANNELS_VARIANCE_POPULATION_EXPIRED_AT_ASC',
  STATE_CHANNELS_VARIANCE_POPULATION_EXPIRED_AT_DESC = 'STATE_CHANNELS_VARIANCE_POPULATION_EXPIRED_AT_DESC',
  STATE_CHANNELS_VARIANCE_POPULATION_ID_ASC = 'STATE_CHANNELS_VARIANCE_POPULATION_ID_ASC',
  STATE_CHANNELS_VARIANCE_POPULATION_ID_DESC = 'STATE_CHANNELS_VARIANCE_POPULATION_ID_DESC',
  STATE_CHANNELS_VARIANCE_POPULATION_INDEXER_ASC = 'STATE_CHANNELS_VARIANCE_POPULATION_INDEXER_ASC',
  STATE_CHANNELS_VARIANCE_POPULATION_INDEXER_DESC = 'STATE_CHANNELS_VARIANCE_POPULATION_INDEXER_DESC',
  STATE_CHANNELS_VARIANCE_POPULATION_IS_FINAL_ASC = 'STATE_CHANNELS_VARIANCE_POPULATION_IS_FINAL_ASC',
  STATE_CHANNELS_VARIANCE_POPULATION_IS_FINAL_DESC = 'STATE_CHANNELS_VARIANCE_POPULATION_IS_FINAL_DESC',
  STATE_CHANNELS_VARIANCE_POPULATION_LAST_EVENT_ASC = 'STATE_CHANNELS_VARIANCE_POPULATION_LAST_EVENT_ASC',
  STATE_CHANNELS_VARIANCE_POPULATION_LAST_EVENT_DESC = 'STATE_CHANNELS_VARIANCE_POPULATION_LAST_EVENT_DESC',
  STATE_CHANNELS_VARIANCE_POPULATION_PRICE_ASC = 'STATE_CHANNELS_VARIANCE_POPULATION_PRICE_ASC',
  STATE_CHANNELS_VARIANCE_POPULATION_PRICE_DESC = 'STATE_CHANNELS_VARIANCE_POPULATION_PRICE_DESC',
  STATE_CHANNELS_VARIANCE_POPULATION_REAL_TOTAL_ASC = 'STATE_CHANNELS_VARIANCE_POPULATION_REAL_TOTAL_ASC',
  STATE_CHANNELS_VARIANCE_POPULATION_REAL_TOTAL_DESC = 'STATE_CHANNELS_VARIANCE_POPULATION_REAL_TOTAL_DESC',
  STATE_CHANNELS_VARIANCE_POPULATION_SPENT_ASC = 'STATE_CHANNELS_VARIANCE_POPULATION_SPENT_ASC',
  STATE_CHANNELS_VARIANCE_POPULATION_SPENT_DESC = 'STATE_CHANNELS_VARIANCE_POPULATION_SPENT_DESC',
  STATE_CHANNELS_VARIANCE_POPULATION_START_TIME_ASC = 'STATE_CHANNELS_VARIANCE_POPULATION_START_TIME_ASC',
  STATE_CHANNELS_VARIANCE_POPULATION_START_TIME_DESC = 'STATE_CHANNELS_VARIANCE_POPULATION_START_TIME_DESC',
  STATE_CHANNELS_VARIANCE_POPULATION_STATUS_ASC = 'STATE_CHANNELS_VARIANCE_POPULATION_STATUS_ASC',
  STATE_CHANNELS_VARIANCE_POPULATION_STATUS_DESC = 'STATE_CHANNELS_VARIANCE_POPULATION_STATUS_DESC',
  STATE_CHANNELS_VARIANCE_POPULATION_TERMINATED_AT_ASC = 'STATE_CHANNELS_VARIANCE_POPULATION_TERMINATED_AT_ASC',
  STATE_CHANNELS_VARIANCE_POPULATION_TERMINATED_AT_DESC = 'STATE_CHANNELS_VARIANCE_POPULATION_TERMINATED_AT_DESC',
  STATE_CHANNELS_VARIANCE_POPULATION_TERMINATE_BY_INDEXER_ASC = 'STATE_CHANNELS_VARIANCE_POPULATION_TERMINATE_BY_INDEXER_ASC',
  STATE_CHANNELS_VARIANCE_POPULATION_TERMINATE_BY_INDEXER_DESC = 'STATE_CHANNELS_VARIANCE_POPULATION_TERMINATE_BY_INDEXER_DESC',
  STATE_CHANNELS_VARIANCE_POPULATION_TOTAL_ASC = 'STATE_CHANNELS_VARIANCE_POPULATION_TOTAL_ASC',
  STATE_CHANNELS_VARIANCE_POPULATION_TOTAL_DESC = 'STATE_CHANNELS_VARIANCE_POPULATION_TOTAL_DESC',
  STATE_CHANNELS_VARIANCE_SAMPLE_AGENT_ASC = 'STATE_CHANNELS_VARIANCE_SAMPLE_AGENT_ASC',
  STATE_CHANNELS_VARIANCE_SAMPLE_AGENT_DESC = 'STATE_CHANNELS_VARIANCE_SAMPLE_AGENT_DESC',
  STATE_CHANNELS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC = 'STATE_CHANNELS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  STATE_CHANNELS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC = 'STATE_CHANNELS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  STATE_CHANNELS_VARIANCE_SAMPLE_CONSUMER_ASC = 'STATE_CHANNELS_VARIANCE_SAMPLE_CONSUMER_ASC',
  STATE_CHANNELS_VARIANCE_SAMPLE_CONSUMER_DESC = 'STATE_CHANNELS_VARIANCE_SAMPLE_CONSUMER_DESC',
  STATE_CHANNELS_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC = 'STATE_CHANNELS_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC',
  STATE_CHANNELS_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC = 'STATE_CHANNELS_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC',
  STATE_CHANNELS_VARIANCE_SAMPLE_EXPIRED_AT_ASC = 'STATE_CHANNELS_VARIANCE_SAMPLE_EXPIRED_AT_ASC',
  STATE_CHANNELS_VARIANCE_SAMPLE_EXPIRED_AT_DESC = 'STATE_CHANNELS_VARIANCE_SAMPLE_EXPIRED_AT_DESC',
  STATE_CHANNELS_VARIANCE_SAMPLE_ID_ASC = 'STATE_CHANNELS_VARIANCE_SAMPLE_ID_ASC',
  STATE_CHANNELS_VARIANCE_SAMPLE_ID_DESC = 'STATE_CHANNELS_VARIANCE_SAMPLE_ID_DESC',
  STATE_CHANNELS_VARIANCE_SAMPLE_INDEXER_ASC = 'STATE_CHANNELS_VARIANCE_SAMPLE_INDEXER_ASC',
  STATE_CHANNELS_VARIANCE_SAMPLE_INDEXER_DESC = 'STATE_CHANNELS_VARIANCE_SAMPLE_INDEXER_DESC',
  STATE_CHANNELS_VARIANCE_SAMPLE_IS_FINAL_ASC = 'STATE_CHANNELS_VARIANCE_SAMPLE_IS_FINAL_ASC',
  STATE_CHANNELS_VARIANCE_SAMPLE_IS_FINAL_DESC = 'STATE_CHANNELS_VARIANCE_SAMPLE_IS_FINAL_DESC',
  STATE_CHANNELS_VARIANCE_SAMPLE_LAST_EVENT_ASC = 'STATE_CHANNELS_VARIANCE_SAMPLE_LAST_EVENT_ASC',
  STATE_CHANNELS_VARIANCE_SAMPLE_LAST_EVENT_DESC = 'STATE_CHANNELS_VARIANCE_SAMPLE_LAST_EVENT_DESC',
  STATE_CHANNELS_VARIANCE_SAMPLE_PRICE_ASC = 'STATE_CHANNELS_VARIANCE_SAMPLE_PRICE_ASC',
  STATE_CHANNELS_VARIANCE_SAMPLE_PRICE_DESC = 'STATE_CHANNELS_VARIANCE_SAMPLE_PRICE_DESC',
  STATE_CHANNELS_VARIANCE_SAMPLE_REAL_TOTAL_ASC = 'STATE_CHANNELS_VARIANCE_SAMPLE_REAL_TOTAL_ASC',
  STATE_CHANNELS_VARIANCE_SAMPLE_REAL_TOTAL_DESC = 'STATE_CHANNELS_VARIANCE_SAMPLE_REAL_TOTAL_DESC',
  STATE_CHANNELS_VARIANCE_SAMPLE_SPENT_ASC = 'STATE_CHANNELS_VARIANCE_SAMPLE_SPENT_ASC',
  STATE_CHANNELS_VARIANCE_SAMPLE_SPENT_DESC = 'STATE_CHANNELS_VARIANCE_SAMPLE_SPENT_DESC',
  STATE_CHANNELS_VARIANCE_SAMPLE_START_TIME_ASC = 'STATE_CHANNELS_VARIANCE_SAMPLE_START_TIME_ASC',
  STATE_CHANNELS_VARIANCE_SAMPLE_START_TIME_DESC = 'STATE_CHANNELS_VARIANCE_SAMPLE_START_TIME_DESC',
  STATE_CHANNELS_VARIANCE_SAMPLE_STATUS_ASC = 'STATE_CHANNELS_VARIANCE_SAMPLE_STATUS_ASC',
  STATE_CHANNELS_VARIANCE_SAMPLE_STATUS_DESC = 'STATE_CHANNELS_VARIANCE_SAMPLE_STATUS_DESC',
  STATE_CHANNELS_VARIANCE_SAMPLE_TERMINATED_AT_ASC = 'STATE_CHANNELS_VARIANCE_SAMPLE_TERMINATED_AT_ASC',
  STATE_CHANNELS_VARIANCE_SAMPLE_TERMINATED_AT_DESC = 'STATE_CHANNELS_VARIANCE_SAMPLE_TERMINATED_AT_DESC',
  STATE_CHANNELS_VARIANCE_SAMPLE_TERMINATE_BY_INDEXER_ASC = 'STATE_CHANNELS_VARIANCE_SAMPLE_TERMINATE_BY_INDEXER_ASC',
  STATE_CHANNELS_VARIANCE_SAMPLE_TERMINATE_BY_INDEXER_DESC = 'STATE_CHANNELS_VARIANCE_SAMPLE_TERMINATE_BY_INDEXER_DESC',
  STATE_CHANNELS_VARIANCE_SAMPLE_TOTAL_ASC = 'STATE_CHANNELS_VARIANCE_SAMPLE_TOTAL_ASC',
  STATE_CHANNELS_VARIANCE_SAMPLE_TOTAL_DESC = 'STATE_CHANNELS_VARIANCE_SAMPLE_TOTAL_DESC',
}

export type Dispute = Node & {
  readonly __typename: 'Dispute';
  readonly disputeType: DisputeType;
  readonly fisherman: Scalars['String']['output'];
  readonly id: Scalars['String']['output'];
  readonly isFinalized: Scalars['Boolean']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  readonly nodeId: Scalars['ID']['output'];
  readonly returnAmount: Maybe<Scalars['BigFloat']['output']>;
  readonly runner: Scalars['String']['output'];
  readonly slashAmount: Maybe<Scalars['BigFloat']['output']>;
  readonly state: DisputeState;
};

export type DisputeAggregates = {
  readonly __typename: 'DisputeAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly average: Maybe<DisputeAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly distinctCount: Maybe<DisputeDistinctCountAggregates>;
  readonly keys: Maybe<ReadonlyArray<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly max: Maybe<DisputeMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly min: Maybe<DisputeMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevPopulation: Maybe<DisputeStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevSample: Maybe<DisputeStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly sum: Maybe<DisputeSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly variancePopulation: Maybe<DisputeVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly varianceSample: Maybe<DisputeVarianceSampleAggregates>;
};

export type DisputeAverageAggregates = {
  readonly __typename: 'DisputeAverageAggregates';
  /** Mean average of returnAmount across the matching connection */
  readonly returnAmount: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of slashAmount across the matching connection */
  readonly slashAmount: Maybe<Scalars['BigFloat']['output']>;
};

export type DisputeDistinctCountAggregates = {
  readonly __typename: 'DisputeDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  readonly _blockRange: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  readonly _id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of disputeType across the matching connection */
  readonly disputeType: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of fisherman across the matching connection */
  readonly fisherman: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  readonly id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of isFinalized across the matching connection */
  readonly isFinalized: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of returnAmount across the matching connection */
  readonly returnAmount: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of runner across the matching connection */
  readonly runner: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of slashAmount across the matching connection */
  readonly slashAmount: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of state across the matching connection */
  readonly state: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `Dispute` object types. All fields are combined with a logical ‘and.’ */
export type DisputeFilter = {
  /** Checks for all expressions in this list. */
  readonly and: InputMaybe<ReadonlyArray<DisputeFilter>>;
  /** Filter by the object’s `disputeType` field. */
  readonly disputeType: InputMaybe<DisputeTypeFilter>;
  /** Filter by the object’s `fisherman` field. */
  readonly fisherman: InputMaybe<StringFilter>;
  /** Filter by the object’s `id` field. */
  readonly id: InputMaybe<StringFilter>;
  /** Filter by the object’s `isFinalized` field. */
  readonly isFinalized: InputMaybe<BooleanFilter>;
  /** Negates the expression. */
  readonly not: InputMaybe<DisputeFilter>;
  /** Checks for any expressions in this list. */
  readonly or: InputMaybe<ReadonlyArray<DisputeFilter>>;
  /** Filter by the object’s `returnAmount` field. */
  readonly returnAmount: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `runner` field. */
  readonly runner: InputMaybe<StringFilter>;
  /** Filter by the object’s `slashAmount` field. */
  readonly slashAmount: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `state` field. */
  readonly state: InputMaybe<DisputeStateFilter>;
};

export type DisputeMaxAggregates = {
  readonly __typename: 'DisputeMaxAggregates';
  /** Maximum of returnAmount across the matching connection */
  readonly returnAmount: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of slashAmount across the matching connection */
  readonly slashAmount: Maybe<Scalars['BigFloat']['output']>;
};

export type DisputeMinAggregates = {
  readonly __typename: 'DisputeMinAggregates';
  /** Minimum of returnAmount across the matching connection */
  readonly returnAmount: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of slashAmount across the matching connection */
  readonly slashAmount: Maybe<Scalars['BigFloat']['output']>;
};

export enum DisputeState {
  ACCEPTED = 'ACCEPTED',
  CANCELLED = 'CANCELLED',
  ONGOING = 'ONGOING',
  REJECTED = 'REJECTED',
}

/** A filter to be used against DisputeState fields. All fields are combined with a logical ‘and.’ */
export type DisputeStateFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  readonly distinctFrom: InputMaybe<DisputeState>;
  /** Equal to the specified value. */
  readonly equalTo: InputMaybe<DisputeState>;
  /** Greater than the specified value. */
  readonly greaterThan: InputMaybe<DisputeState>;
  /** Greater than or equal to the specified value. */
  readonly greaterThanOrEqualTo: InputMaybe<DisputeState>;
  /** Included in the specified list. */
  readonly in: InputMaybe<ReadonlyArray<DisputeState>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  readonly isNull: InputMaybe<Scalars['Boolean']['input']>;
  /** Less than the specified value. */
  readonly lessThan: InputMaybe<DisputeState>;
  /** Less than or equal to the specified value. */
  readonly lessThanOrEqualTo: InputMaybe<DisputeState>;
  /** Equal to the specified value, treating null like an ordinary value. */
  readonly notDistinctFrom: InputMaybe<DisputeState>;
  /** Not equal to the specified value. */
  readonly notEqualTo: InputMaybe<DisputeState>;
  /** Not included in the specified list. */
  readonly notIn: InputMaybe<ReadonlyArray<DisputeState>>;
};

export type DisputeStddevPopulationAggregates = {
  readonly __typename: 'DisputeStddevPopulationAggregates';
  /** Population standard deviation of returnAmount across the matching connection */
  readonly returnAmount: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of slashAmount across the matching connection */
  readonly slashAmount: Maybe<Scalars['BigFloat']['output']>;
};

export type DisputeStddevSampleAggregates = {
  readonly __typename: 'DisputeStddevSampleAggregates';
  /** Sample standard deviation of returnAmount across the matching connection */
  readonly returnAmount: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of slashAmount across the matching connection */
  readonly slashAmount: Maybe<Scalars['BigFloat']['output']>;
};

export type DisputeSumAggregates = {
  readonly __typename: 'DisputeSumAggregates';
  /** Sum of returnAmount across the matching connection */
  readonly returnAmount: Scalars['BigFloat']['output'];
  /** Sum of slashAmount across the matching connection */
  readonly slashAmount: Scalars['BigFloat']['output'];
};

export enum DisputeType {
  POI = 'POI',
  QUERY = 'QUERY',
}

/** A filter to be used against DisputeType fields. All fields are combined with a logical ‘and.’ */
export type DisputeTypeFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  readonly distinctFrom: InputMaybe<DisputeType>;
  /** Equal to the specified value. */
  readonly equalTo: InputMaybe<DisputeType>;
  /** Greater than the specified value. */
  readonly greaterThan: InputMaybe<DisputeType>;
  /** Greater than or equal to the specified value. */
  readonly greaterThanOrEqualTo: InputMaybe<DisputeType>;
  /** Included in the specified list. */
  readonly in: InputMaybe<ReadonlyArray<DisputeType>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  readonly isNull: InputMaybe<Scalars['Boolean']['input']>;
  /** Less than the specified value. */
  readonly lessThan: InputMaybe<DisputeType>;
  /** Less than or equal to the specified value. */
  readonly lessThanOrEqualTo: InputMaybe<DisputeType>;
  /** Equal to the specified value, treating null like an ordinary value. */
  readonly notDistinctFrom: InputMaybe<DisputeType>;
  /** Not equal to the specified value. */
  readonly notEqualTo: InputMaybe<DisputeType>;
  /** Not included in the specified list. */
  readonly notIn: InputMaybe<ReadonlyArray<DisputeType>>;
};

export type DisputeVariancePopulationAggregates = {
  readonly __typename: 'DisputeVariancePopulationAggregates';
  /** Population variance of returnAmount across the matching connection */
  readonly returnAmount: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of slashAmount across the matching connection */
  readonly slashAmount: Maybe<Scalars['BigFloat']['output']>;
};

export type DisputeVarianceSampleAggregates = {
  readonly __typename: 'DisputeVarianceSampleAggregates';
  /** Sample variance of returnAmount across the matching connection */
  readonly returnAmount: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of slashAmount across the matching connection */
  readonly slashAmount: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `Dispute` values. */
export type DisputesConnection = {
  readonly __typename: 'DisputesConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<DisputeAggregates>;
  /** A list of edges which contains the `Dispute` and cursor to aid in pagination. */
  readonly edges: ReadonlyArray<DisputesEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<DisputeAggregates>>;
  /** A list of `Dispute` objects. */
  readonly nodes: ReadonlyArray<Maybe<Dispute>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Dispute` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Dispute` values. */
export type DisputesConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<DisputesGroupBy>;
  having: InputMaybe<DisputesHavingInput>;
};

/** A `Dispute` edge in the connection. */
export type DisputesEdge = {
  readonly __typename: 'DisputesEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `Dispute` at the end of the edge. */
  readonly node: Maybe<Dispute>;
};

/** Grouping methods for `Dispute` for usage during aggregation. */
export enum DisputesGroupBy {
  DISPUTE_TYPE = 'DISPUTE_TYPE',
  FISHERMAN = 'FISHERMAN',
  ID = 'ID',
  IS_FINALIZED = 'IS_FINALIZED',
  RETURN_AMOUNT = 'RETURN_AMOUNT',
  RUNNER = 'RUNNER',
  SLASH_AMOUNT = 'SLASH_AMOUNT',
  STATE = 'STATE',
}

export type DisputesHavingAverageInput = {
  readonly returnAmount: InputMaybe<HavingBigfloatFilter>;
  readonly slashAmount: InputMaybe<HavingBigfloatFilter>;
};

export type DisputesHavingDistinctCountInput = {
  readonly returnAmount: InputMaybe<HavingBigfloatFilter>;
  readonly slashAmount: InputMaybe<HavingBigfloatFilter>;
};

/** Conditions for `Dispute` aggregates. */
export type DisputesHavingInput = {
  readonly AND: InputMaybe<ReadonlyArray<DisputesHavingInput>>;
  readonly OR: InputMaybe<ReadonlyArray<DisputesHavingInput>>;
  readonly average: InputMaybe<DisputesHavingAverageInput>;
  readonly distinctCount: InputMaybe<DisputesHavingDistinctCountInput>;
  readonly max: InputMaybe<DisputesHavingMaxInput>;
  readonly min: InputMaybe<DisputesHavingMinInput>;
  readonly stddevPopulation: InputMaybe<DisputesHavingStddevPopulationInput>;
  readonly stddevSample: InputMaybe<DisputesHavingStddevSampleInput>;
  readonly sum: InputMaybe<DisputesHavingSumInput>;
  readonly variancePopulation: InputMaybe<DisputesHavingVariancePopulationInput>;
  readonly varianceSample: InputMaybe<DisputesHavingVarianceSampleInput>;
};

export type DisputesHavingMaxInput = {
  readonly returnAmount: InputMaybe<HavingBigfloatFilter>;
  readonly slashAmount: InputMaybe<HavingBigfloatFilter>;
};

export type DisputesHavingMinInput = {
  readonly returnAmount: InputMaybe<HavingBigfloatFilter>;
  readonly slashAmount: InputMaybe<HavingBigfloatFilter>;
};

export type DisputesHavingStddevPopulationInput = {
  readonly returnAmount: InputMaybe<HavingBigfloatFilter>;
  readonly slashAmount: InputMaybe<HavingBigfloatFilter>;
};

export type DisputesHavingStddevSampleInput = {
  readonly returnAmount: InputMaybe<HavingBigfloatFilter>;
  readonly slashAmount: InputMaybe<HavingBigfloatFilter>;
};

export type DisputesHavingSumInput = {
  readonly returnAmount: InputMaybe<HavingBigfloatFilter>;
  readonly slashAmount: InputMaybe<HavingBigfloatFilter>;
};

export type DisputesHavingVariancePopulationInput = {
  readonly returnAmount: InputMaybe<HavingBigfloatFilter>;
  readonly slashAmount: InputMaybe<HavingBigfloatFilter>;
};

export type DisputesHavingVarianceSampleInput = {
  readonly returnAmount: InputMaybe<HavingBigfloatFilter>;
  readonly slashAmount: InputMaybe<HavingBigfloatFilter>;
};

/** Methods to use when ordering `Dispute`. */
export enum DisputesOrderBy {
  DISPUTE_TYPE_ASC = 'DISPUTE_TYPE_ASC',
  DISPUTE_TYPE_DESC = 'DISPUTE_TYPE_DESC',
  FISHERMAN_ASC = 'FISHERMAN_ASC',
  FISHERMAN_DESC = 'FISHERMAN_DESC',
  ID_ASC = 'ID_ASC',
  ID_DESC = 'ID_DESC',
  IS_FINALIZED_ASC = 'IS_FINALIZED_ASC',
  IS_FINALIZED_DESC = 'IS_FINALIZED_DESC',
  NATURAL = 'NATURAL',
  PRIMARY_KEY_ASC = 'PRIMARY_KEY_ASC',
  PRIMARY_KEY_DESC = 'PRIMARY_KEY_DESC',
  RETURN_AMOUNT_ASC = 'RETURN_AMOUNT_ASC',
  RETURN_AMOUNT_DESC = 'RETURN_AMOUNT_DESC',
  RUNNER_ASC = 'RUNNER_ASC',
  RUNNER_DESC = 'RUNNER_DESC',
  SLASH_AMOUNT_ASC = 'SLASH_AMOUNT_ASC',
  SLASH_AMOUNT_DESC = 'SLASH_AMOUNT_DESC',
  STATE_ASC = 'STATE_ASC',
  STATE_DESC = 'STATE_DESC',
}

export type Era = Node & {
  readonly __typename: 'Era';
  readonly createdBlock: Maybe<Scalars['Int']['output']>;
  /** Reads and enables pagination through a set of `Delegator`. */
  readonly delegatorsByEraRewardEraIdAndDelegatorId: EraDelegatorsByEraRewardEraIdAndDelegatorIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Delegator`. */
  readonly delegatorsByEraStakeEraIdAndDelegatorId: EraDelegatorsByEraStakeEraIdAndDelegatorIdManyToManyConnection;
  readonly endTime: Maybe<Scalars['Datetime']['output']>;
  readonly eraPeriod: Maybe<Scalars['String']['output']>;
  /** Reads and enables pagination through a set of `EraReward`. */
  readonly eraRewards: EraRewardsConnection;
  /** Reads and enables pagination through a set of `EraStakeUpdate`. */
  readonly eraStakeUpdatesByLastUpdateEraId: EraStakeUpdatesConnection;
  /** Reads and enables pagination through a set of `EraStake`. */
  readonly eraStakes: EraStakesConnection;
  readonly forceNext: Maybe<Scalars['Boolean']['output']>;
  readonly id: Scalars['String']['output'];
  /** Reads and enables pagination through a set of `IndexerCommissionRate`. */
  readonly indexerCommissionRates: IndexerCommissionRatesConnection;
  /** Reads and enables pagination through a set of `IndexerStakeSummary`. */
  readonly indexerStakeSummaries: IndexerStakeSummariesConnection;
  /** Reads and enables pagination through a set of `IndexerStake`. */
  readonly indexerStakes: IndexerStakesConnection;
  /** Reads and enables pagination through a set of `Indexer`. */
  readonly indexersByEraRewardEraIdAndIndexerId: EraIndexersByEraRewardEraIdAndIndexerIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Indexer`. */
  readonly indexersByEraStakeEraIdAndIndexerId: EraIndexersByEraStakeEraIdAndIndexerIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Indexer`. */
  readonly indexersByIndexerCommissionRateEraIdAndIndexerId: EraIndexersByIndexerCommissionRateEraIdAndIndexerIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Indexer`. */
  readonly indexersByIndexerStakeEraIdAndIndexerId: EraIndexersByIndexerStakeEraIdAndIndexerIdManyToManyConnection;
  readonly lastEvent: Maybe<Scalars['String']['output']>;
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  readonly nodeId: Scalars['ID']['output'];
  readonly startTime: Scalars['Datetime']['output'];
};

export type EraDelegatorsByEraRewardEraIdAndDelegatorIdArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Delegators_Distinct_Enum>>>;
  filter: InputMaybe<DelegatorFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<DelegatorsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type EraDelegatorsByEraStakeEraIdAndDelegatorIdArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Delegators_Distinct_Enum>>>;
  filter: InputMaybe<DelegatorFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<DelegatorsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type EraEraRewardsArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Era_Rewards_Distinct_Enum>>>;
  filter: InputMaybe<EraRewardFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<EraRewardsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type EraEraStakeUpdatesByLastUpdateEraIdArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Era_Stake_Updates_Distinct_Enum>>>;
  filter: InputMaybe<EraStakeUpdateFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<EraStakeUpdatesOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type EraEraStakesArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Era_Stakes_Distinct_Enum>>>;
  filter: InputMaybe<EraStakeFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<EraStakesOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type EraIndexerCommissionRatesArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Commission_Rates_Distinct_Enum>>>;
  filter: InputMaybe<IndexerCommissionRateFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexerCommissionRatesOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type EraIndexerStakeSummariesArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Stake_Summaries_Distinct_Enum>>>;
  filter: InputMaybe<IndexerStakeSummaryFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexerStakeSummariesOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type EraIndexerStakesArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Stakes_Distinct_Enum>>>;
  filter: InputMaybe<IndexerStakeFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexerStakesOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type EraIndexersByEraRewardEraIdAndIndexerIdArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexers_Distinct_Enum>>>;
  filter: InputMaybe<IndexerFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexersOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type EraIndexersByEraStakeEraIdAndIndexerIdArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexers_Distinct_Enum>>>;
  filter: InputMaybe<IndexerFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexersOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type EraIndexersByIndexerCommissionRateEraIdAndIndexerIdArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexers_Distinct_Enum>>>;
  filter: InputMaybe<IndexerFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexersOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type EraIndexersByIndexerStakeEraIdAndIndexerIdArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexers_Distinct_Enum>>>;
  filter: InputMaybe<IndexerFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexersOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type EraAggregates = {
  readonly __typename: 'EraAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly average: Maybe<EraAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly distinctCount: Maybe<EraDistinctCountAggregates>;
  readonly keys: Maybe<ReadonlyArray<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly max: Maybe<EraMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly min: Maybe<EraMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevPopulation: Maybe<EraStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevSample: Maybe<EraStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly sum: Maybe<EraSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly variancePopulation: Maybe<EraVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly varianceSample: Maybe<EraVarianceSampleAggregates>;
};

export type EraAverageAggregates = {
  readonly __typename: 'EraAverageAggregates';
  /** Mean average of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `EraDelegatorApy` values. */
export type EraDelegatorApiesConnection = {
  readonly __typename: 'EraDelegatorApiesConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<EraDelegatorApyAggregates>;
  /** A list of edges which contains the `EraDelegatorApy` and cursor to aid in pagination. */
  readonly edges: ReadonlyArray<EraDelegatorApiesEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<EraDelegatorApyAggregates>>;
  /** A list of `EraDelegatorApy` objects. */
  readonly nodes: ReadonlyArray<Maybe<EraDelegatorApy>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `EraDelegatorApy` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `EraDelegatorApy` values. */
export type EraDelegatorApiesConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<EraDelegatorApiesGroupBy>;
  having: InputMaybe<EraDelegatorApiesHavingInput>;
};

/** A `EraDelegatorApy` edge in the connection. */
export type EraDelegatorApiesEdge = {
  readonly __typename: 'EraDelegatorApiesEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `EraDelegatorApy` at the end of the edge. */
  readonly node: Maybe<EraDelegatorApy>;
};

/** Grouping methods for `EraDelegatorApy` for usage during aggregation. */
export enum EraDelegatorApiesGroupBy {
  APY = 'APY',
  CREATE_AT = 'CREATE_AT',
  CREATE_AT_TRUNCATED_TO_DAY = 'CREATE_AT_TRUNCATED_TO_DAY',
  CREATE_AT_TRUNCATED_TO_HOUR = 'CREATE_AT_TRUNCATED_TO_HOUR',
  DELEGATOR_ID = 'DELEGATOR_ID',
  ERA_IDX = 'ERA_IDX',
  ID = 'ID',
  REWARD = 'REWARD',
  UPDATE_AT = 'UPDATE_AT',
  UPDATE_AT_TRUNCATED_TO_DAY = 'UPDATE_AT_TRUNCATED_TO_DAY',
  UPDATE_AT_TRUNCATED_TO_HOUR = 'UPDATE_AT_TRUNCATED_TO_HOUR',
}

export type EraDelegatorApiesHavingAverageInput = {
  readonly apy: InputMaybe<HavingBigfloatFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly reward: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type EraDelegatorApiesHavingDistinctCountInput = {
  readonly apy: InputMaybe<HavingBigfloatFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly reward: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

/** Conditions for `EraDelegatorApy` aggregates. */
export type EraDelegatorApiesHavingInput = {
  readonly AND: InputMaybe<ReadonlyArray<EraDelegatorApiesHavingInput>>;
  readonly OR: InputMaybe<ReadonlyArray<EraDelegatorApiesHavingInput>>;
  readonly average: InputMaybe<EraDelegatorApiesHavingAverageInput>;
  readonly distinctCount: InputMaybe<EraDelegatorApiesHavingDistinctCountInput>;
  readonly max: InputMaybe<EraDelegatorApiesHavingMaxInput>;
  readonly min: InputMaybe<EraDelegatorApiesHavingMinInput>;
  readonly stddevPopulation: InputMaybe<EraDelegatorApiesHavingStddevPopulationInput>;
  readonly stddevSample: InputMaybe<EraDelegatorApiesHavingStddevSampleInput>;
  readonly sum: InputMaybe<EraDelegatorApiesHavingSumInput>;
  readonly variancePopulation: InputMaybe<EraDelegatorApiesHavingVariancePopulationInput>;
  readonly varianceSample: InputMaybe<EraDelegatorApiesHavingVarianceSampleInput>;
};

export type EraDelegatorApiesHavingMaxInput = {
  readonly apy: InputMaybe<HavingBigfloatFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly reward: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type EraDelegatorApiesHavingMinInput = {
  readonly apy: InputMaybe<HavingBigfloatFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly reward: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type EraDelegatorApiesHavingStddevPopulationInput = {
  readonly apy: InputMaybe<HavingBigfloatFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly reward: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type EraDelegatorApiesHavingStddevSampleInput = {
  readonly apy: InputMaybe<HavingBigfloatFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly reward: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type EraDelegatorApiesHavingSumInput = {
  readonly apy: InputMaybe<HavingBigfloatFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly reward: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type EraDelegatorApiesHavingVariancePopulationInput = {
  readonly apy: InputMaybe<HavingBigfloatFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly reward: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type EraDelegatorApiesHavingVarianceSampleInput = {
  readonly apy: InputMaybe<HavingBigfloatFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly reward: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

/** Methods to use when ordering `EraDelegatorApy`. */
export enum EraDelegatorApiesOrderBy {
  APY_ASC = 'APY_ASC',
  APY_DESC = 'APY_DESC',
  CREATE_AT_ASC = 'CREATE_AT_ASC',
  CREATE_AT_DESC = 'CREATE_AT_DESC',
  DELEGATOR_BY_DELEGATOR_ID__CREATED_BLOCK_ASC = 'DELEGATOR_BY_DELEGATOR_ID__CREATED_BLOCK_ASC',
  DELEGATOR_BY_DELEGATOR_ID__CREATED_BLOCK_DESC = 'DELEGATOR_BY_DELEGATOR_ID__CREATED_BLOCK_DESC',
  DELEGATOR_BY_DELEGATOR_ID__EXIT_ERA_ASC = 'DELEGATOR_BY_DELEGATOR_ID__EXIT_ERA_ASC',
  DELEGATOR_BY_DELEGATOR_ID__EXIT_ERA_DESC = 'DELEGATOR_BY_DELEGATOR_ID__EXIT_ERA_DESC',
  DELEGATOR_BY_DELEGATOR_ID__ID_ASC = 'DELEGATOR_BY_DELEGATOR_ID__ID_ASC',
  DELEGATOR_BY_DELEGATOR_ID__ID_DESC = 'DELEGATOR_BY_DELEGATOR_ID__ID_DESC',
  DELEGATOR_BY_DELEGATOR_ID__LAST_EVENT_ASC = 'DELEGATOR_BY_DELEGATOR_ID__LAST_EVENT_ASC',
  DELEGATOR_BY_DELEGATOR_ID__LAST_EVENT_DESC = 'DELEGATOR_BY_DELEGATOR_ID__LAST_EVENT_DESC',
  DELEGATOR_BY_DELEGATOR_ID__START_ERA_ASC = 'DELEGATOR_BY_DELEGATOR_ID__START_ERA_ASC',
  DELEGATOR_BY_DELEGATOR_ID__START_ERA_DESC = 'DELEGATOR_BY_DELEGATOR_ID__START_ERA_DESC',
  DELEGATOR_BY_DELEGATOR_ID__TOTAL_DELEGATIONS_ASC = 'DELEGATOR_BY_DELEGATOR_ID__TOTAL_DELEGATIONS_ASC',
  DELEGATOR_BY_DELEGATOR_ID__TOTAL_DELEGATIONS_DESC = 'DELEGATOR_BY_DELEGATOR_ID__TOTAL_DELEGATIONS_DESC',
  DELEGATOR_ID_ASC = 'DELEGATOR_ID_ASC',
  DELEGATOR_ID_DESC = 'DELEGATOR_ID_DESC',
  ERA_IDX_ASC = 'ERA_IDX_ASC',
  ERA_IDX_DESC = 'ERA_IDX_DESC',
  ID_ASC = 'ID_ASC',
  ID_DESC = 'ID_DESC',
  NATURAL = 'NATURAL',
  PRIMARY_KEY_ASC = 'PRIMARY_KEY_ASC',
  PRIMARY_KEY_DESC = 'PRIMARY_KEY_DESC',
  REWARD_ASC = 'REWARD_ASC',
  REWARD_DESC = 'REWARD_DESC',
  UPDATE_AT_ASC = 'UPDATE_AT_ASC',
  UPDATE_AT_DESC = 'UPDATE_AT_DESC',
}

export type EraDelegatorApy = Node & {
  readonly __typename: 'EraDelegatorApy';
  readonly apy: Scalars['BigFloat']['output'];
  readonly createAt: Scalars['Datetime']['output'];
  /** Reads a single `Delegator` that is related to this `EraDelegatorApy`. */
  readonly delegator: Maybe<Delegator>;
  readonly delegatorId: Scalars['String']['output'];
  readonly eraIdx: Scalars['Int']['output'];
  readonly id: Scalars['String']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  readonly nodeId: Scalars['ID']['output'];
  readonly reward: Scalars['BigFloat']['output'];
  readonly updateAt: Scalars['Datetime']['output'];
};

export type EraDelegatorApyAggregates = {
  readonly __typename: 'EraDelegatorApyAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly average: Maybe<EraDelegatorApyAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly distinctCount: Maybe<EraDelegatorApyDistinctCountAggregates>;
  readonly keys: Maybe<ReadonlyArray<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly max: Maybe<EraDelegatorApyMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly min: Maybe<EraDelegatorApyMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevPopulation: Maybe<EraDelegatorApyStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevSample: Maybe<EraDelegatorApyStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly sum: Maybe<EraDelegatorApySumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly variancePopulation: Maybe<EraDelegatorApyVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly varianceSample: Maybe<EraDelegatorApyVarianceSampleAggregates>;
};

/** A filter to be used against aggregates of `EraDelegatorApy` object types. */
export type EraDelegatorApyAggregatesFilter = {
  /** Mean average aggregate over matching `EraDelegatorApy` objects. */
  readonly average: InputMaybe<EraDelegatorApyAverageAggregateFilter>;
  /** Distinct count aggregate over matching `EraDelegatorApy` objects. */
  readonly distinctCount: InputMaybe<EraDelegatorApyDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `EraDelegatorApy` object to be included within the aggregate. */
  readonly filter: InputMaybe<EraDelegatorApyFilter>;
  /** Maximum aggregate over matching `EraDelegatorApy` objects. */
  readonly max: InputMaybe<EraDelegatorApyMaxAggregateFilter>;
  /** Minimum aggregate over matching `EraDelegatorApy` objects. */
  readonly min: InputMaybe<EraDelegatorApyMinAggregateFilter>;
  /** Population standard deviation aggregate over matching `EraDelegatorApy` objects. */
  readonly stddevPopulation: InputMaybe<EraDelegatorApyStddevPopulationAggregateFilter>;
  /** Sample standard deviation aggregate over matching `EraDelegatorApy` objects. */
  readonly stddevSample: InputMaybe<EraDelegatorApyStddevSampleAggregateFilter>;
  /** Sum aggregate over matching `EraDelegatorApy` objects. */
  readonly sum: InputMaybe<EraDelegatorApySumAggregateFilter>;
  /** Population variance aggregate over matching `EraDelegatorApy` objects. */
  readonly variancePopulation: InputMaybe<EraDelegatorApyVariancePopulationAggregateFilter>;
  /** Sample variance aggregate over matching `EraDelegatorApy` objects. */
  readonly varianceSample: InputMaybe<EraDelegatorApyVarianceSampleAggregateFilter>;
};

export type EraDelegatorApyAverageAggregateFilter = {
  readonly apy: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigFloatFilter>;
  readonly reward: InputMaybe<BigFloatFilter>;
};

export type EraDelegatorApyAverageAggregates = {
  readonly __typename: 'EraDelegatorApyAverageAggregates';
  /** Mean average of apy across the matching connection */
  readonly apy: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of reward across the matching connection */
  readonly reward: Maybe<Scalars['BigFloat']['output']>;
};

export type EraDelegatorApyDistinctCountAggregateFilter = {
  readonly _blockRange: InputMaybe<BigIntFilter>;
  readonly _id: InputMaybe<BigIntFilter>;
  readonly apy: InputMaybe<BigIntFilter>;
  readonly createAt: InputMaybe<BigIntFilter>;
  readonly delegatorId: InputMaybe<BigIntFilter>;
  readonly eraIdx: InputMaybe<BigIntFilter>;
  readonly id: InputMaybe<BigIntFilter>;
  readonly reward: InputMaybe<BigIntFilter>;
  readonly updateAt: InputMaybe<BigIntFilter>;
};

export type EraDelegatorApyDistinctCountAggregates = {
  readonly __typename: 'EraDelegatorApyDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  readonly _blockRange: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  readonly _id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of apy across the matching connection */
  readonly apy: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createAt across the matching connection */
  readonly createAt: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of delegatorId across the matching connection */
  readonly delegatorId: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  readonly id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of reward across the matching connection */
  readonly reward: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of updateAt across the matching connection */
  readonly updateAt: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `EraDelegatorApy` object types. All fields are combined with a logical ‘and.’ */
export type EraDelegatorApyFilter = {
  /** Checks for all expressions in this list. */
  readonly and: InputMaybe<ReadonlyArray<EraDelegatorApyFilter>>;
  /** Filter by the object’s `apy` field. */
  readonly apy: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `createAt` field. */
  readonly createAt: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `delegator` relation. */
  readonly delegator: InputMaybe<DelegatorFilter>;
  /** Filter by the object’s `delegatorId` field. */
  readonly delegatorId: InputMaybe<StringFilter>;
  /** Filter by the object’s `eraIdx` field. */
  readonly eraIdx: InputMaybe<IntFilter>;
  /** Filter by the object’s `id` field. */
  readonly id: InputMaybe<StringFilter>;
  /** Negates the expression. */
  readonly not: InputMaybe<EraDelegatorApyFilter>;
  /** Checks for any expressions in this list. */
  readonly or: InputMaybe<ReadonlyArray<EraDelegatorApyFilter>>;
  /** Filter by the object’s `reward` field. */
  readonly reward: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `updateAt` field. */
  readonly updateAt: InputMaybe<DatetimeFilter>;
};

export type EraDelegatorApyMaxAggregateFilter = {
  readonly apy: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<IntFilter>;
  readonly reward: InputMaybe<BigFloatFilter>;
};

export type EraDelegatorApyMaxAggregates = {
  readonly __typename: 'EraDelegatorApyMaxAggregates';
  /** Maximum of apy across the matching connection */
  readonly apy: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['Int']['output']>;
  /** Maximum of reward across the matching connection */
  readonly reward: Maybe<Scalars['BigFloat']['output']>;
};

export type EraDelegatorApyMinAggregateFilter = {
  readonly apy: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<IntFilter>;
  readonly reward: InputMaybe<BigFloatFilter>;
};

export type EraDelegatorApyMinAggregates = {
  readonly __typename: 'EraDelegatorApyMinAggregates';
  /** Minimum of apy across the matching connection */
  readonly apy: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['Int']['output']>;
  /** Minimum of reward across the matching connection */
  readonly reward: Maybe<Scalars['BigFloat']['output']>;
};

export type EraDelegatorApyStddevPopulationAggregateFilter = {
  readonly apy: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigFloatFilter>;
  readonly reward: InputMaybe<BigFloatFilter>;
};

export type EraDelegatorApyStddevPopulationAggregates = {
  readonly __typename: 'EraDelegatorApyStddevPopulationAggregates';
  /** Population standard deviation of apy across the matching connection */
  readonly apy: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of reward across the matching connection */
  readonly reward: Maybe<Scalars['BigFloat']['output']>;
};

export type EraDelegatorApyStddevSampleAggregateFilter = {
  readonly apy: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigFloatFilter>;
  readonly reward: InputMaybe<BigFloatFilter>;
};

export type EraDelegatorApyStddevSampleAggregates = {
  readonly __typename: 'EraDelegatorApyStddevSampleAggregates';
  /** Sample standard deviation of apy across the matching connection */
  readonly apy: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of reward across the matching connection */
  readonly reward: Maybe<Scalars['BigFloat']['output']>;
};

export type EraDelegatorApySumAggregateFilter = {
  readonly apy: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigIntFilter>;
  readonly reward: InputMaybe<BigFloatFilter>;
};

export type EraDelegatorApySumAggregates = {
  readonly __typename: 'EraDelegatorApySumAggregates';
  /** Sum of apy across the matching connection */
  readonly apy: Scalars['BigFloat']['output'];
  /** Sum of eraIdx across the matching connection */
  readonly eraIdx: Scalars['BigInt']['output'];
  /** Sum of reward across the matching connection */
  readonly reward: Scalars['BigFloat']['output'];
};

export type EraDelegatorApyVariancePopulationAggregateFilter = {
  readonly apy: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigFloatFilter>;
  readonly reward: InputMaybe<BigFloatFilter>;
};

export type EraDelegatorApyVariancePopulationAggregates = {
  readonly __typename: 'EraDelegatorApyVariancePopulationAggregates';
  /** Population variance of apy across the matching connection */
  readonly apy: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of reward across the matching connection */
  readonly reward: Maybe<Scalars['BigFloat']['output']>;
};

export type EraDelegatorApyVarianceSampleAggregateFilter = {
  readonly apy: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigFloatFilter>;
  readonly reward: InputMaybe<BigFloatFilter>;
};

export type EraDelegatorApyVarianceSampleAggregates = {
  readonly __typename: 'EraDelegatorApyVarianceSampleAggregates';
  /** Sample variance of apy across the matching connection */
  readonly apy: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of reward across the matching connection */
  readonly reward: Maybe<Scalars['BigFloat']['output']>;
};

export type EraDelegatorIndexer = Node & {
  readonly __typename: 'EraDelegatorIndexer';
  readonly delegator: Scalars['String']['output'];
  readonly era: Scalars['Int']['output'];
  readonly id: Scalars['String']['output'];
  readonly indexers: Scalars['JSON']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  readonly nodeId: Scalars['ID']['output'];
  readonly selfStake: Scalars['BigFloat']['output'];
  readonly totalStake: Scalars['BigFloat']['output'];
};

export type EraDelegatorIndexerIndexersArgs = {
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexers_Distinct_Enum>>>;
};

export type EraDelegatorIndexerAggregates = {
  readonly __typename: 'EraDelegatorIndexerAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly average: Maybe<EraDelegatorIndexerAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly distinctCount: Maybe<EraDelegatorIndexerDistinctCountAggregates>;
  readonly keys: Maybe<ReadonlyArray<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly max: Maybe<EraDelegatorIndexerMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly min: Maybe<EraDelegatorIndexerMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevPopulation: Maybe<EraDelegatorIndexerStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevSample: Maybe<EraDelegatorIndexerStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly sum: Maybe<EraDelegatorIndexerSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly variancePopulation: Maybe<EraDelegatorIndexerVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly varianceSample: Maybe<EraDelegatorIndexerVarianceSampleAggregates>;
};

/** A connection to a list of `EraDelegatorIndexerApy` values. */
export type EraDelegatorIndexerApiesConnection = {
  readonly __typename: 'EraDelegatorIndexerApiesConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<EraDelegatorIndexerApyAggregates>;
  /** A list of edges which contains the `EraDelegatorIndexerApy` and cursor to aid in pagination. */
  readonly edges: ReadonlyArray<EraDelegatorIndexerApiesEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<EraDelegatorIndexerApyAggregates>>;
  /** A list of `EraDelegatorIndexerApy` objects. */
  readonly nodes: ReadonlyArray<Maybe<EraDelegatorIndexerApy>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `EraDelegatorIndexerApy` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `EraDelegatorIndexerApy` values. */
export type EraDelegatorIndexerApiesConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<EraDelegatorIndexerApiesGroupBy>;
  having: InputMaybe<EraDelegatorIndexerApiesHavingInput>;
};

/** A `EraDelegatorIndexerApy` edge in the connection. */
export type EraDelegatorIndexerApiesEdge = {
  readonly __typename: 'EraDelegatorIndexerApiesEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `EraDelegatorIndexerApy` at the end of the edge. */
  readonly node: Maybe<EraDelegatorIndexerApy>;
};

/** Grouping methods for `EraDelegatorIndexerApy` for usage during aggregation. */
export enum EraDelegatorIndexerApiesGroupBy {
  APY = 'APY',
  CREATE_AT = 'CREATE_AT',
  CREATE_AT_TRUNCATED_TO_DAY = 'CREATE_AT_TRUNCATED_TO_DAY',
  CREATE_AT_TRUNCATED_TO_HOUR = 'CREATE_AT_TRUNCATED_TO_HOUR',
  DELEGATOR_ID = 'DELEGATOR_ID',
  ERA_IDX = 'ERA_IDX',
  ID = 'ID',
  INDEXER_ID = 'INDEXER_ID',
  REWARD = 'REWARD',
  STAKE = 'STAKE',
  UPDATE_AT = 'UPDATE_AT',
  UPDATE_AT_TRUNCATED_TO_DAY = 'UPDATE_AT_TRUNCATED_TO_DAY',
  UPDATE_AT_TRUNCATED_TO_HOUR = 'UPDATE_AT_TRUNCATED_TO_HOUR',
}

export type EraDelegatorIndexerApiesHavingAverageInput = {
  readonly apy: InputMaybe<HavingBigfloatFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly reward: InputMaybe<HavingBigfloatFilter>;
  readonly stake: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type EraDelegatorIndexerApiesHavingDistinctCountInput = {
  readonly apy: InputMaybe<HavingBigfloatFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly reward: InputMaybe<HavingBigfloatFilter>;
  readonly stake: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

/** Conditions for `EraDelegatorIndexerApy` aggregates. */
export type EraDelegatorIndexerApiesHavingInput = {
  readonly AND: InputMaybe<ReadonlyArray<EraDelegatorIndexerApiesHavingInput>>;
  readonly OR: InputMaybe<ReadonlyArray<EraDelegatorIndexerApiesHavingInput>>;
  readonly average: InputMaybe<EraDelegatorIndexerApiesHavingAverageInput>;
  readonly distinctCount: InputMaybe<EraDelegatorIndexerApiesHavingDistinctCountInput>;
  readonly max: InputMaybe<EraDelegatorIndexerApiesHavingMaxInput>;
  readonly min: InputMaybe<EraDelegatorIndexerApiesHavingMinInput>;
  readonly stddevPopulation: InputMaybe<EraDelegatorIndexerApiesHavingStddevPopulationInput>;
  readonly stddevSample: InputMaybe<EraDelegatorIndexerApiesHavingStddevSampleInput>;
  readonly sum: InputMaybe<EraDelegatorIndexerApiesHavingSumInput>;
  readonly variancePopulation: InputMaybe<EraDelegatorIndexerApiesHavingVariancePopulationInput>;
  readonly varianceSample: InputMaybe<EraDelegatorIndexerApiesHavingVarianceSampleInput>;
};

export type EraDelegatorIndexerApiesHavingMaxInput = {
  readonly apy: InputMaybe<HavingBigfloatFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly reward: InputMaybe<HavingBigfloatFilter>;
  readonly stake: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type EraDelegatorIndexerApiesHavingMinInput = {
  readonly apy: InputMaybe<HavingBigfloatFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly reward: InputMaybe<HavingBigfloatFilter>;
  readonly stake: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type EraDelegatorIndexerApiesHavingStddevPopulationInput = {
  readonly apy: InputMaybe<HavingBigfloatFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly reward: InputMaybe<HavingBigfloatFilter>;
  readonly stake: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type EraDelegatorIndexerApiesHavingStddevSampleInput = {
  readonly apy: InputMaybe<HavingBigfloatFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly reward: InputMaybe<HavingBigfloatFilter>;
  readonly stake: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type EraDelegatorIndexerApiesHavingSumInput = {
  readonly apy: InputMaybe<HavingBigfloatFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly reward: InputMaybe<HavingBigfloatFilter>;
  readonly stake: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type EraDelegatorIndexerApiesHavingVariancePopulationInput = {
  readonly apy: InputMaybe<HavingBigfloatFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly reward: InputMaybe<HavingBigfloatFilter>;
  readonly stake: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type EraDelegatorIndexerApiesHavingVarianceSampleInput = {
  readonly apy: InputMaybe<HavingBigfloatFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly reward: InputMaybe<HavingBigfloatFilter>;
  readonly stake: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

/** Methods to use when ordering `EraDelegatorIndexerApy`. */
export enum EraDelegatorIndexerApiesOrderBy {
  APY_ASC = 'APY_ASC',
  APY_DESC = 'APY_DESC',
  CREATE_AT_ASC = 'CREATE_AT_ASC',
  CREATE_AT_DESC = 'CREATE_AT_DESC',
  DELEGATOR_BY_DELEGATOR_ID__CREATED_BLOCK_ASC = 'DELEGATOR_BY_DELEGATOR_ID__CREATED_BLOCK_ASC',
  DELEGATOR_BY_DELEGATOR_ID__CREATED_BLOCK_DESC = 'DELEGATOR_BY_DELEGATOR_ID__CREATED_BLOCK_DESC',
  DELEGATOR_BY_DELEGATOR_ID__EXIT_ERA_ASC = 'DELEGATOR_BY_DELEGATOR_ID__EXIT_ERA_ASC',
  DELEGATOR_BY_DELEGATOR_ID__EXIT_ERA_DESC = 'DELEGATOR_BY_DELEGATOR_ID__EXIT_ERA_DESC',
  DELEGATOR_BY_DELEGATOR_ID__ID_ASC = 'DELEGATOR_BY_DELEGATOR_ID__ID_ASC',
  DELEGATOR_BY_DELEGATOR_ID__ID_DESC = 'DELEGATOR_BY_DELEGATOR_ID__ID_DESC',
  DELEGATOR_BY_DELEGATOR_ID__LAST_EVENT_ASC = 'DELEGATOR_BY_DELEGATOR_ID__LAST_EVENT_ASC',
  DELEGATOR_BY_DELEGATOR_ID__LAST_EVENT_DESC = 'DELEGATOR_BY_DELEGATOR_ID__LAST_EVENT_DESC',
  DELEGATOR_BY_DELEGATOR_ID__START_ERA_ASC = 'DELEGATOR_BY_DELEGATOR_ID__START_ERA_ASC',
  DELEGATOR_BY_DELEGATOR_ID__START_ERA_DESC = 'DELEGATOR_BY_DELEGATOR_ID__START_ERA_DESC',
  DELEGATOR_BY_DELEGATOR_ID__TOTAL_DELEGATIONS_ASC = 'DELEGATOR_BY_DELEGATOR_ID__TOTAL_DELEGATIONS_ASC',
  DELEGATOR_BY_DELEGATOR_ID__TOTAL_DELEGATIONS_DESC = 'DELEGATOR_BY_DELEGATOR_ID__TOTAL_DELEGATIONS_DESC',
  DELEGATOR_ID_ASC = 'DELEGATOR_ID_ASC',
  DELEGATOR_ID_DESC = 'DELEGATOR_ID_DESC',
  ERA_IDX_ASC = 'ERA_IDX_ASC',
  ERA_IDX_DESC = 'ERA_IDX_DESC',
  ID_ASC = 'ID_ASC',
  ID_DESC = 'ID_DESC',
  INDEXER_BY_INDEXER_ID__ACTIVE_ASC = 'INDEXER_BY_INDEXER_ID__ACTIVE_ASC',
  INDEXER_BY_INDEXER_ID__ACTIVE_DESC = 'INDEXER_BY_INDEXER_ID__ACTIVE_DESC',
  INDEXER_BY_INDEXER_ID__CAPACITY_ASC = 'INDEXER_BY_INDEXER_ID__CAPACITY_ASC',
  INDEXER_BY_INDEXER_ID__CAPACITY_DESC = 'INDEXER_BY_INDEXER_ID__CAPACITY_DESC',
  INDEXER_BY_INDEXER_ID__COMMISSION_ASC = 'INDEXER_BY_INDEXER_ID__COMMISSION_ASC',
  INDEXER_BY_INDEXER_ID__COMMISSION_DESC = 'INDEXER_BY_INDEXER_ID__COMMISSION_DESC',
  INDEXER_BY_INDEXER_ID__CONTROLLER_ASC = 'INDEXER_BY_INDEXER_ID__CONTROLLER_ASC',
  INDEXER_BY_INDEXER_ID__CONTROLLER_DESC = 'INDEXER_BY_INDEXER_ID__CONTROLLER_DESC',
  INDEXER_BY_INDEXER_ID__CREATED_BLOCK_ASC = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_ASC',
  INDEXER_BY_INDEXER_ID__CREATED_BLOCK_DESC = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_DESC',
  INDEXER_BY_INDEXER_ID__ID_ASC = 'INDEXER_BY_INDEXER_ID__ID_ASC',
  INDEXER_BY_INDEXER_ID__ID_DESC = 'INDEXER_BY_INDEXER_ID__ID_DESC',
  INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_ASC = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_ASC',
  INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_DESC = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_DESC',
  INDEXER_BY_INDEXER_ID__LAST_EVENT_ASC = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_ASC',
  INDEXER_BY_INDEXER_ID__LAST_EVENT_DESC = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_DESC',
  INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_ASC = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_ASC',
  INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_DESC = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_DESC',
  INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_ASC = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_ASC',
  INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_DESC = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_DESC',
  INDEXER_BY_INDEXER_ID__METADATA_ASC = 'INDEXER_BY_INDEXER_ID__METADATA_ASC',
  INDEXER_BY_INDEXER_ID__METADATA_DESC = 'INDEXER_BY_INDEXER_ID__METADATA_DESC',
  INDEXER_BY_INDEXER_ID__SELF_STAKE_ASC = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_ASC',
  INDEXER_BY_INDEXER_ID__SELF_STAKE_DESC = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_DESC',
  INDEXER_BY_INDEXER_ID__TOTAL_STAKE_ASC = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_ASC',
  INDEXER_BY_INDEXER_ID__TOTAL_STAKE_DESC = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_DESC',
  INDEXER_ID_ASC = 'INDEXER_ID_ASC',
  INDEXER_ID_DESC = 'INDEXER_ID_DESC',
  NATURAL = 'NATURAL',
  PRIMARY_KEY_ASC = 'PRIMARY_KEY_ASC',
  PRIMARY_KEY_DESC = 'PRIMARY_KEY_DESC',
  REWARD_ASC = 'REWARD_ASC',
  REWARD_DESC = 'REWARD_DESC',
  STAKE_ASC = 'STAKE_ASC',
  STAKE_DESC = 'STAKE_DESC',
  UPDATE_AT_ASC = 'UPDATE_AT_ASC',
  UPDATE_AT_DESC = 'UPDATE_AT_DESC',
}

export type EraDelegatorIndexerApy = Node & {
  readonly __typename: 'EraDelegatorIndexerApy';
  readonly apy: Scalars['BigFloat']['output'];
  readonly createAt: Scalars['Datetime']['output'];
  /** Reads a single `Delegator` that is related to this `EraDelegatorIndexerApy`. */
  readonly delegator: Maybe<Delegator>;
  readonly delegatorId: Scalars['String']['output'];
  readonly eraIdx: Scalars['Int']['output'];
  readonly id: Scalars['String']['output'];
  /** Reads a single `Indexer` that is related to this `EraDelegatorIndexerApy`. */
  readonly indexer: Maybe<Indexer>;
  readonly indexerId: Scalars['String']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  readonly nodeId: Scalars['ID']['output'];
  readonly reward: Scalars['BigFloat']['output'];
  readonly stake: Scalars['BigFloat']['output'];
  readonly updateAt: Scalars['Datetime']['output'];
};

export type EraDelegatorIndexerApyAggregates = {
  readonly __typename: 'EraDelegatorIndexerApyAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly average: Maybe<EraDelegatorIndexerApyAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly distinctCount: Maybe<EraDelegatorIndexerApyDistinctCountAggregates>;
  readonly keys: Maybe<ReadonlyArray<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly max: Maybe<EraDelegatorIndexerApyMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly min: Maybe<EraDelegatorIndexerApyMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevPopulation: Maybe<EraDelegatorIndexerApyStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevSample: Maybe<EraDelegatorIndexerApyStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly sum: Maybe<EraDelegatorIndexerApySumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly variancePopulation: Maybe<EraDelegatorIndexerApyVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly varianceSample: Maybe<EraDelegatorIndexerApyVarianceSampleAggregates>;
};

/** A filter to be used against aggregates of `EraDelegatorIndexerApy` object types. */
export type EraDelegatorIndexerApyAggregatesFilter = {
  /** Mean average aggregate over matching `EraDelegatorIndexerApy` objects. */
  readonly average: InputMaybe<EraDelegatorIndexerApyAverageAggregateFilter>;
  /** Distinct count aggregate over matching `EraDelegatorIndexerApy` objects. */
  readonly distinctCount: InputMaybe<EraDelegatorIndexerApyDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `EraDelegatorIndexerApy` object to be included within the aggregate. */
  readonly filter: InputMaybe<EraDelegatorIndexerApyFilter>;
  /** Maximum aggregate over matching `EraDelegatorIndexerApy` objects. */
  readonly max: InputMaybe<EraDelegatorIndexerApyMaxAggregateFilter>;
  /** Minimum aggregate over matching `EraDelegatorIndexerApy` objects. */
  readonly min: InputMaybe<EraDelegatorIndexerApyMinAggregateFilter>;
  /** Population standard deviation aggregate over matching `EraDelegatorIndexerApy` objects. */
  readonly stddevPopulation: InputMaybe<EraDelegatorIndexerApyStddevPopulationAggregateFilter>;
  /** Sample standard deviation aggregate over matching `EraDelegatorIndexerApy` objects. */
  readonly stddevSample: InputMaybe<EraDelegatorIndexerApyStddevSampleAggregateFilter>;
  /** Sum aggregate over matching `EraDelegatorIndexerApy` objects. */
  readonly sum: InputMaybe<EraDelegatorIndexerApySumAggregateFilter>;
  /** Population variance aggregate over matching `EraDelegatorIndexerApy` objects. */
  readonly variancePopulation: InputMaybe<EraDelegatorIndexerApyVariancePopulationAggregateFilter>;
  /** Sample variance aggregate over matching `EraDelegatorIndexerApy` objects. */
  readonly varianceSample: InputMaybe<EraDelegatorIndexerApyVarianceSampleAggregateFilter>;
};

export type EraDelegatorIndexerApyAverageAggregateFilter = {
  readonly apy: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigFloatFilter>;
  readonly reward: InputMaybe<BigFloatFilter>;
  readonly stake: InputMaybe<BigFloatFilter>;
};

export type EraDelegatorIndexerApyAverageAggregates = {
  readonly __typename: 'EraDelegatorIndexerApyAverageAggregates';
  /** Mean average of apy across the matching connection */
  readonly apy: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of reward across the matching connection */
  readonly reward: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of stake across the matching connection */
  readonly stake: Maybe<Scalars['BigFloat']['output']>;
};

export type EraDelegatorIndexerApyDistinctCountAggregateFilter = {
  readonly _blockRange: InputMaybe<BigIntFilter>;
  readonly _id: InputMaybe<BigIntFilter>;
  readonly apy: InputMaybe<BigIntFilter>;
  readonly createAt: InputMaybe<BigIntFilter>;
  readonly delegatorId: InputMaybe<BigIntFilter>;
  readonly eraIdx: InputMaybe<BigIntFilter>;
  readonly id: InputMaybe<BigIntFilter>;
  readonly indexerId: InputMaybe<BigIntFilter>;
  readonly reward: InputMaybe<BigIntFilter>;
  readonly stake: InputMaybe<BigIntFilter>;
  readonly updateAt: InputMaybe<BigIntFilter>;
};

export type EraDelegatorIndexerApyDistinctCountAggregates = {
  readonly __typename: 'EraDelegatorIndexerApyDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  readonly _blockRange: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  readonly _id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of apy across the matching connection */
  readonly apy: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createAt across the matching connection */
  readonly createAt: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of delegatorId across the matching connection */
  readonly delegatorId: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  readonly id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of indexerId across the matching connection */
  readonly indexerId: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of reward across the matching connection */
  readonly reward: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of stake across the matching connection */
  readonly stake: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of updateAt across the matching connection */
  readonly updateAt: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `EraDelegatorIndexerApy` object types. All fields are combined with a logical ‘and.’ */
export type EraDelegatorIndexerApyFilter = {
  /** Checks for all expressions in this list. */
  readonly and: InputMaybe<ReadonlyArray<EraDelegatorIndexerApyFilter>>;
  /** Filter by the object’s `apy` field. */
  readonly apy: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `createAt` field. */
  readonly createAt: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `delegator` relation. */
  readonly delegator: InputMaybe<DelegatorFilter>;
  /** Filter by the object’s `delegatorId` field. */
  readonly delegatorId: InputMaybe<StringFilter>;
  /** Filter by the object’s `eraIdx` field. */
  readonly eraIdx: InputMaybe<IntFilter>;
  /** Filter by the object’s `id` field. */
  readonly id: InputMaybe<StringFilter>;
  /** Filter by the object’s `indexer` relation. */
  readonly indexer: InputMaybe<IndexerFilter>;
  /** Filter by the object’s `indexerId` field. */
  readonly indexerId: InputMaybe<StringFilter>;
  /** Negates the expression. */
  readonly not: InputMaybe<EraDelegatorIndexerApyFilter>;
  /** Checks for any expressions in this list. */
  readonly or: InputMaybe<ReadonlyArray<EraDelegatorIndexerApyFilter>>;
  /** Filter by the object’s `reward` field. */
  readonly reward: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `stake` field. */
  readonly stake: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `updateAt` field. */
  readonly updateAt: InputMaybe<DatetimeFilter>;
};

export type EraDelegatorIndexerApyMaxAggregateFilter = {
  readonly apy: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<IntFilter>;
  readonly reward: InputMaybe<BigFloatFilter>;
  readonly stake: InputMaybe<BigFloatFilter>;
};

export type EraDelegatorIndexerApyMaxAggregates = {
  readonly __typename: 'EraDelegatorIndexerApyMaxAggregates';
  /** Maximum of apy across the matching connection */
  readonly apy: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['Int']['output']>;
  /** Maximum of reward across the matching connection */
  readonly reward: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of stake across the matching connection */
  readonly stake: Maybe<Scalars['BigFloat']['output']>;
};

export type EraDelegatorIndexerApyMinAggregateFilter = {
  readonly apy: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<IntFilter>;
  readonly reward: InputMaybe<BigFloatFilter>;
  readonly stake: InputMaybe<BigFloatFilter>;
};

export type EraDelegatorIndexerApyMinAggregates = {
  readonly __typename: 'EraDelegatorIndexerApyMinAggregates';
  /** Minimum of apy across the matching connection */
  readonly apy: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['Int']['output']>;
  /** Minimum of reward across the matching connection */
  readonly reward: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of stake across the matching connection */
  readonly stake: Maybe<Scalars['BigFloat']['output']>;
};

export type EraDelegatorIndexerApyStddevPopulationAggregateFilter = {
  readonly apy: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigFloatFilter>;
  readonly reward: InputMaybe<BigFloatFilter>;
  readonly stake: InputMaybe<BigFloatFilter>;
};

export type EraDelegatorIndexerApyStddevPopulationAggregates = {
  readonly __typename: 'EraDelegatorIndexerApyStddevPopulationAggregates';
  /** Population standard deviation of apy across the matching connection */
  readonly apy: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of reward across the matching connection */
  readonly reward: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of stake across the matching connection */
  readonly stake: Maybe<Scalars['BigFloat']['output']>;
};

export type EraDelegatorIndexerApyStddevSampleAggregateFilter = {
  readonly apy: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigFloatFilter>;
  readonly reward: InputMaybe<BigFloatFilter>;
  readonly stake: InputMaybe<BigFloatFilter>;
};

export type EraDelegatorIndexerApyStddevSampleAggregates = {
  readonly __typename: 'EraDelegatorIndexerApyStddevSampleAggregates';
  /** Sample standard deviation of apy across the matching connection */
  readonly apy: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of reward across the matching connection */
  readonly reward: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of stake across the matching connection */
  readonly stake: Maybe<Scalars['BigFloat']['output']>;
};

export type EraDelegatorIndexerApySumAggregateFilter = {
  readonly apy: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigIntFilter>;
  readonly reward: InputMaybe<BigFloatFilter>;
  readonly stake: InputMaybe<BigFloatFilter>;
};

export type EraDelegatorIndexerApySumAggregates = {
  readonly __typename: 'EraDelegatorIndexerApySumAggregates';
  /** Sum of apy across the matching connection */
  readonly apy: Scalars['BigFloat']['output'];
  /** Sum of eraIdx across the matching connection */
  readonly eraIdx: Scalars['BigInt']['output'];
  /** Sum of reward across the matching connection */
  readonly reward: Scalars['BigFloat']['output'];
  /** Sum of stake across the matching connection */
  readonly stake: Scalars['BigFloat']['output'];
};

export type EraDelegatorIndexerApyVariancePopulationAggregateFilter = {
  readonly apy: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigFloatFilter>;
  readonly reward: InputMaybe<BigFloatFilter>;
  readonly stake: InputMaybe<BigFloatFilter>;
};

export type EraDelegatorIndexerApyVariancePopulationAggregates = {
  readonly __typename: 'EraDelegatorIndexerApyVariancePopulationAggregates';
  /** Population variance of apy across the matching connection */
  readonly apy: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of reward across the matching connection */
  readonly reward: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of stake across the matching connection */
  readonly stake: Maybe<Scalars['BigFloat']['output']>;
};

export type EraDelegatorIndexerApyVarianceSampleAggregateFilter = {
  readonly apy: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigFloatFilter>;
  readonly reward: InputMaybe<BigFloatFilter>;
  readonly stake: InputMaybe<BigFloatFilter>;
};

export type EraDelegatorIndexerApyVarianceSampleAggregates = {
  readonly __typename: 'EraDelegatorIndexerApyVarianceSampleAggregates';
  /** Sample variance of apy across the matching connection */
  readonly apy: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of reward across the matching connection */
  readonly reward: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of stake across the matching connection */
  readonly stake: Maybe<Scalars['BigFloat']['output']>;
};

export type EraDelegatorIndexerAverageAggregates = {
  readonly __typename: 'EraDelegatorIndexerAverageAggregates';
  /** Mean average of era across the matching connection */
  readonly era: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of selfStake across the matching connection */
  readonly selfStake: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of totalStake across the matching connection */
  readonly totalStake: Maybe<Scalars['BigFloat']['output']>;
};

export type EraDelegatorIndexerDistinctCountAggregates = {
  readonly __typename: 'EraDelegatorIndexerDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  readonly _blockRange: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  readonly _id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of delegator across the matching connection */
  readonly delegator: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of era across the matching connection */
  readonly era: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  readonly id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of indexers across the matching connection */
  readonly indexers: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of selfStake across the matching connection */
  readonly selfStake: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of totalStake across the matching connection */
  readonly totalStake: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `EraDelegatorIndexer` object types. All fields are combined with a logical ‘and.’ */
export type EraDelegatorIndexerFilter = {
  /** Checks for all expressions in this list. */
  readonly and: InputMaybe<ReadonlyArray<EraDelegatorIndexerFilter>>;
  /** Filter by the object’s `delegator` field. */
  readonly delegator: InputMaybe<StringFilter>;
  /** Filter by the object’s `era` field. */
  readonly era: InputMaybe<IntFilter>;
  /** Filter by the object’s `id` field. */
  readonly id: InputMaybe<StringFilter>;
  /** Filter by the object’s `indexers` field. */
  readonly indexers: InputMaybe<JsonFilter>;
  /** Negates the expression. */
  readonly not: InputMaybe<EraDelegatorIndexerFilter>;
  /** Checks for any expressions in this list. */
  readonly or: InputMaybe<ReadonlyArray<EraDelegatorIndexerFilter>>;
  /** Filter by the object’s `selfStake` field. */
  readonly selfStake: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `totalStake` field. */
  readonly totalStake: InputMaybe<BigFloatFilter>;
};

export type EraDelegatorIndexerMaxAggregates = {
  readonly __typename: 'EraDelegatorIndexerMaxAggregates';
  /** Maximum of era across the matching connection */
  readonly era: Maybe<Scalars['Int']['output']>;
  /** Maximum of selfStake across the matching connection */
  readonly selfStake: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of totalStake across the matching connection */
  readonly totalStake: Maybe<Scalars['BigFloat']['output']>;
};

export type EraDelegatorIndexerMinAggregates = {
  readonly __typename: 'EraDelegatorIndexerMinAggregates';
  /** Minimum of era across the matching connection */
  readonly era: Maybe<Scalars['Int']['output']>;
  /** Minimum of selfStake across the matching connection */
  readonly selfStake: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of totalStake across the matching connection */
  readonly totalStake: Maybe<Scalars['BigFloat']['output']>;
};

export type EraDelegatorIndexerStddevPopulationAggregates = {
  readonly __typename: 'EraDelegatorIndexerStddevPopulationAggregates';
  /** Population standard deviation of era across the matching connection */
  readonly era: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of selfStake across the matching connection */
  readonly selfStake: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of totalStake across the matching connection */
  readonly totalStake: Maybe<Scalars['BigFloat']['output']>;
};

export type EraDelegatorIndexerStddevSampleAggregates = {
  readonly __typename: 'EraDelegatorIndexerStddevSampleAggregates';
  /** Sample standard deviation of era across the matching connection */
  readonly era: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of selfStake across the matching connection */
  readonly selfStake: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of totalStake across the matching connection */
  readonly totalStake: Maybe<Scalars['BigFloat']['output']>;
};

export type EraDelegatorIndexerSumAggregates = {
  readonly __typename: 'EraDelegatorIndexerSumAggregates';
  /** Sum of era across the matching connection */
  readonly era: Scalars['BigInt']['output'];
  /** Sum of selfStake across the matching connection */
  readonly selfStake: Scalars['BigFloat']['output'];
  /** Sum of totalStake across the matching connection */
  readonly totalStake: Scalars['BigFloat']['output'];
};

export type EraDelegatorIndexerVariancePopulationAggregates = {
  readonly __typename: 'EraDelegatorIndexerVariancePopulationAggregates';
  /** Population variance of era across the matching connection */
  readonly era: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of selfStake across the matching connection */
  readonly selfStake: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of totalStake across the matching connection */
  readonly totalStake: Maybe<Scalars['BigFloat']['output']>;
};

export type EraDelegatorIndexerVarianceSampleAggregates = {
  readonly __typename: 'EraDelegatorIndexerVarianceSampleAggregates';
  /** Sample variance of era across the matching connection */
  readonly era: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of selfStake across the matching connection */
  readonly selfStake: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of totalStake across the matching connection */
  readonly totalStake: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `EraDelegatorIndexer` values. */
export type EraDelegatorIndexersConnection = {
  readonly __typename: 'EraDelegatorIndexersConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<EraDelegatorIndexerAggregates>;
  /** A list of edges which contains the `EraDelegatorIndexer` and cursor to aid in pagination. */
  readonly edges: ReadonlyArray<EraDelegatorIndexersEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<EraDelegatorIndexerAggregates>>;
  /** A list of `EraDelegatorIndexer` objects. */
  readonly nodes: ReadonlyArray<Maybe<EraDelegatorIndexer>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `EraDelegatorIndexer` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `EraDelegatorIndexer` values. */
export type EraDelegatorIndexersConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<EraDelegatorIndexersGroupBy>;
  having: InputMaybe<EraDelegatorIndexersHavingInput>;
};

/** A `EraDelegatorIndexer` edge in the connection. */
export type EraDelegatorIndexersEdge = {
  readonly __typename: 'EraDelegatorIndexersEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `EraDelegatorIndexer` at the end of the edge. */
  readonly node: Maybe<EraDelegatorIndexer>;
};

/** Grouping methods for `EraDelegatorIndexer` for usage during aggregation. */
export enum EraDelegatorIndexersGroupBy {
  DELEGATOR = 'DELEGATOR',
  ERA = 'ERA',
  ID = 'ID',
  INDEXERS = 'INDEXERS',
  SELF_STAKE = 'SELF_STAKE',
  TOTAL_STAKE = 'TOTAL_STAKE',
}

export type EraDelegatorIndexersHavingAverageInput = {
  readonly era: InputMaybe<HavingIntFilter>;
  readonly selfStake: InputMaybe<HavingBigfloatFilter>;
  readonly totalStake: InputMaybe<HavingBigfloatFilter>;
};

export type EraDelegatorIndexersHavingDistinctCountInput = {
  readonly era: InputMaybe<HavingIntFilter>;
  readonly selfStake: InputMaybe<HavingBigfloatFilter>;
  readonly totalStake: InputMaybe<HavingBigfloatFilter>;
};

/** Conditions for `EraDelegatorIndexer` aggregates. */
export type EraDelegatorIndexersHavingInput = {
  readonly AND: InputMaybe<ReadonlyArray<EraDelegatorIndexersHavingInput>>;
  readonly OR: InputMaybe<ReadonlyArray<EraDelegatorIndexersHavingInput>>;
  readonly average: InputMaybe<EraDelegatorIndexersHavingAverageInput>;
  readonly distinctCount: InputMaybe<EraDelegatorIndexersHavingDistinctCountInput>;
  readonly max: InputMaybe<EraDelegatorIndexersHavingMaxInput>;
  readonly min: InputMaybe<EraDelegatorIndexersHavingMinInput>;
  readonly stddevPopulation: InputMaybe<EraDelegatorIndexersHavingStddevPopulationInput>;
  readonly stddevSample: InputMaybe<EraDelegatorIndexersHavingStddevSampleInput>;
  readonly sum: InputMaybe<EraDelegatorIndexersHavingSumInput>;
  readonly variancePopulation: InputMaybe<EraDelegatorIndexersHavingVariancePopulationInput>;
  readonly varianceSample: InputMaybe<EraDelegatorIndexersHavingVarianceSampleInput>;
};

export type EraDelegatorIndexersHavingMaxInput = {
  readonly era: InputMaybe<HavingIntFilter>;
  readonly selfStake: InputMaybe<HavingBigfloatFilter>;
  readonly totalStake: InputMaybe<HavingBigfloatFilter>;
};

export type EraDelegatorIndexersHavingMinInput = {
  readonly era: InputMaybe<HavingIntFilter>;
  readonly selfStake: InputMaybe<HavingBigfloatFilter>;
  readonly totalStake: InputMaybe<HavingBigfloatFilter>;
};

export type EraDelegatorIndexersHavingStddevPopulationInput = {
  readonly era: InputMaybe<HavingIntFilter>;
  readonly selfStake: InputMaybe<HavingBigfloatFilter>;
  readonly totalStake: InputMaybe<HavingBigfloatFilter>;
};

export type EraDelegatorIndexersHavingStddevSampleInput = {
  readonly era: InputMaybe<HavingIntFilter>;
  readonly selfStake: InputMaybe<HavingBigfloatFilter>;
  readonly totalStake: InputMaybe<HavingBigfloatFilter>;
};

export type EraDelegatorIndexersHavingSumInput = {
  readonly era: InputMaybe<HavingIntFilter>;
  readonly selfStake: InputMaybe<HavingBigfloatFilter>;
  readonly totalStake: InputMaybe<HavingBigfloatFilter>;
};

export type EraDelegatorIndexersHavingVariancePopulationInput = {
  readonly era: InputMaybe<HavingIntFilter>;
  readonly selfStake: InputMaybe<HavingBigfloatFilter>;
  readonly totalStake: InputMaybe<HavingBigfloatFilter>;
};

export type EraDelegatorIndexersHavingVarianceSampleInput = {
  readonly era: InputMaybe<HavingIntFilter>;
  readonly selfStake: InputMaybe<HavingBigfloatFilter>;
  readonly totalStake: InputMaybe<HavingBigfloatFilter>;
};

/** Methods to use when ordering `EraDelegatorIndexer`. */
export enum EraDelegatorIndexersOrderBy {
  DELEGATOR_ASC = 'DELEGATOR_ASC',
  DELEGATOR_DESC = 'DELEGATOR_DESC',
  ERA_ASC = 'ERA_ASC',
  ERA_DESC = 'ERA_DESC',
  ID_ASC = 'ID_ASC',
  ID_DESC = 'ID_DESC',
  INDEXERS_ASC = 'INDEXERS_ASC',
  INDEXERS_DESC = 'INDEXERS_DESC',
  NATURAL = 'NATURAL',
  PRIMARY_KEY_ASC = 'PRIMARY_KEY_ASC',
  PRIMARY_KEY_DESC = 'PRIMARY_KEY_DESC',
  SELF_STAKE_ASC = 'SELF_STAKE_ASC',
  SELF_STAKE_DESC = 'SELF_STAKE_DESC',
  TOTAL_STAKE_ASC = 'TOTAL_STAKE_ASC',
  TOTAL_STAKE_DESC = 'TOTAL_STAKE_DESC',
}

/** A connection to a list of `Delegator` values, with data from `EraReward`. */
export type EraDelegatorsByEraRewardEraIdAndDelegatorIdManyToManyConnection = {
  readonly __typename: 'EraDelegatorsByEraRewardEraIdAndDelegatorIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<DelegatorAggregates>;
  /** A list of edges which contains the `Delegator`, info from the `EraReward`, and the cursor to aid in pagination. */
  readonly edges: ReadonlyArray<EraDelegatorsByEraRewardEraIdAndDelegatorIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<DelegatorAggregates>>;
  /** A list of `Delegator` objects. */
  readonly nodes: ReadonlyArray<Maybe<Delegator>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Delegator` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Delegator` values, with data from `EraReward`. */
export type EraDelegatorsByEraRewardEraIdAndDelegatorIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<DelegatorsGroupBy>;
  having: InputMaybe<DelegatorsHavingInput>;
};

/** A `Delegator` edge in the connection, with data from `EraReward`. */
export type EraDelegatorsByEraRewardEraIdAndDelegatorIdManyToManyEdge = {
  readonly __typename: 'EraDelegatorsByEraRewardEraIdAndDelegatorIdManyToManyEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `EraReward`. */
  readonly eraRewards: EraRewardsConnection;
  /** The `Delegator` at the end of the edge. */
  readonly node: Maybe<Delegator>;
};

/** A `Delegator` edge in the connection, with data from `EraReward`. */
export type EraDelegatorsByEraRewardEraIdAndDelegatorIdManyToManyEdgeEraRewardsArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Era_Rewards_Distinct_Enum>>>;
  filter: InputMaybe<EraRewardFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<EraRewardsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** A connection to a list of `Delegator` values, with data from `EraStake`. */
export type EraDelegatorsByEraStakeEraIdAndDelegatorIdManyToManyConnection = {
  readonly __typename: 'EraDelegatorsByEraStakeEraIdAndDelegatorIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<DelegatorAggregates>;
  /** A list of edges which contains the `Delegator`, info from the `EraStake`, and the cursor to aid in pagination. */
  readonly edges: ReadonlyArray<EraDelegatorsByEraStakeEraIdAndDelegatorIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<DelegatorAggregates>>;
  /** A list of `Delegator` objects. */
  readonly nodes: ReadonlyArray<Maybe<Delegator>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Delegator` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Delegator` values, with data from `EraStake`. */
export type EraDelegatorsByEraStakeEraIdAndDelegatorIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<DelegatorsGroupBy>;
  having: InputMaybe<DelegatorsHavingInput>;
};

/** A `Delegator` edge in the connection, with data from `EraStake`. */
export type EraDelegatorsByEraStakeEraIdAndDelegatorIdManyToManyEdge = {
  readonly __typename: 'EraDelegatorsByEraStakeEraIdAndDelegatorIdManyToManyEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `EraStake`. */
  readonly eraStakes: EraStakesConnection;
  /** The `Delegator` at the end of the edge. */
  readonly node: Maybe<Delegator>;
};

/** A `Delegator` edge in the connection, with data from `EraStake`. */
export type EraDelegatorsByEraStakeEraIdAndDelegatorIdManyToManyEdgeEraStakesArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Era_Stakes_Distinct_Enum>>>;
  filter: InputMaybe<EraStakeFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<EraStakesOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type EraDeploymentReward = Node & {
  readonly __typename: 'EraDeploymentReward';
  readonly agreementRewards: Scalars['BigFloat']['output'];
  readonly allocationRewards: Scalars['BigFloat']['output'];
  readonly changesHeight: Maybe<Scalars['String']['output']>;
  readonly deploymentId: Scalars['String']['output'];
  readonly eraIdx: Scalars['Int']['output'];
  readonly id: Scalars['String']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  readonly nodeId: Scalars['ID']['output'];
  readonly queryRewards: Scalars['BigFloat']['output'];
  readonly stateChannelRewards: Scalars['BigFloat']['output'];
  readonly totalRewards: Scalars['BigFloat']['output'];
};

export type EraDeploymentRewardAggregates = {
  readonly __typename: 'EraDeploymentRewardAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly average: Maybe<EraDeploymentRewardAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly distinctCount: Maybe<EraDeploymentRewardDistinctCountAggregates>;
  readonly keys: Maybe<ReadonlyArray<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly max: Maybe<EraDeploymentRewardMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly min: Maybe<EraDeploymentRewardMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevPopulation: Maybe<EraDeploymentRewardStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevSample: Maybe<EraDeploymentRewardStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly sum: Maybe<EraDeploymentRewardSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly variancePopulation: Maybe<EraDeploymentRewardVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly varianceSample: Maybe<EraDeploymentRewardVarianceSampleAggregates>;
};

export type EraDeploymentRewardAverageAggregates = {
  readonly __typename: 'EraDeploymentRewardAverageAggregates';
  /** Mean average of agreementRewards across the matching connection */
  readonly agreementRewards: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of allocationRewards across the matching connection */
  readonly allocationRewards: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of queryRewards across the matching connection */
  readonly queryRewards: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of stateChannelRewards across the matching connection */
  readonly stateChannelRewards: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of totalRewards across the matching connection */
  readonly totalRewards: Maybe<Scalars['BigFloat']['output']>;
};

export type EraDeploymentRewardDistinctCountAggregates = {
  readonly __typename: 'EraDeploymentRewardDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  readonly _blockRange: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  readonly _id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of agreementRewards across the matching connection */
  readonly agreementRewards: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of allocationRewards across the matching connection */
  readonly allocationRewards: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of changesHeight across the matching connection */
  readonly changesHeight: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of deploymentId across the matching connection */
  readonly deploymentId: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  readonly id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of queryRewards across the matching connection */
  readonly queryRewards: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of stateChannelRewards across the matching connection */
  readonly stateChannelRewards: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of totalRewards across the matching connection */
  readonly totalRewards: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `EraDeploymentReward` object types. All fields are combined with a logical ‘and.’ */
export type EraDeploymentRewardFilter = {
  /** Filter by the object’s `agreementRewards` field. */
  readonly agreementRewards: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `allocationRewards` field. */
  readonly allocationRewards: InputMaybe<BigFloatFilter>;
  /** Checks for all expressions in this list. */
  readonly and: InputMaybe<ReadonlyArray<EraDeploymentRewardFilter>>;
  /** Filter by the object’s `changesHeight` field. */
  readonly changesHeight: InputMaybe<StringFilter>;
  /** Filter by the object’s `deploymentId` field. */
  readonly deploymentId: InputMaybe<StringFilter>;
  /** Filter by the object’s `eraIdx` field. */
  readonly eraIdx: InputMaybe<IntFilter>;
  /** Filter by the object’s `id` field. */
  readonly id: InputMaybe<StringFilter>;
  /** Negates the expression. */
  readonly not: InputMaybe<EraDeploymentRewardFilter>;
  /** Checks for any expressions in this list. */
  readonly or: InputMaybe<ReadonlyArray<EraDeploymentRewardFilter>>;
  /** Filter by the object’s `queryRewards` field. */
  readonly queryRewards: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `stateChannelRewards` field. */
  readonly stateChannelRewards: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `totalRewards` field. */
  readonly totalRewards: InputMaybe<BigFloatFilter>;
};

export type EraDeploymentRewardMaxAggregates = {
  readonly __typename: 'EraDeploymentRewardMaxAggregates';
  /** Maximum of agreementRewards across the matching connection */
  readonly agreementRewards: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of allocationRewards across the matching connection */
  readonly allocationRewards: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['Int']['output']>;
  /** Maximum of queryRewards across the matching connection */
  readonly queryRewards: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of stateChannelRewards across the matching connection */
  readonly stateChannelRewards: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of totalRewards across the matching connection */
  readonly totalRewards: Maybe<Scalars['BigFloat']['output']>;
};

export type EraDeploymentRewardMinAggregates = {
  readonly __typename: 'EraDeploymentRewardMinAggregates';
  /** Minimum of agreementRewards across the matching connection */
  readonly agreementRewards: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of allocationRewards across the matching connection */
  readonly allocationRewards: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['Int']['output']>;
  /** Minimum of queryRewards across the matching connection */
  readonly queryRewards: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of stateChannelRewards across the matching connection */
  readonly stateChannelRewards: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of totalRewards across the matching connection */
  readonly totalRewards: Maybe<Scalars['BigFloat']['output']>;
};

export type EraDeploymentRewardStddevPopulationAggregates = {
  readonly __typename: 'EraDeploymentRewardStddevPopulationAggregates';
  /** Population standard deviation of agreementRewards across the matching connection */
  readonly agreementRewards: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of allocationRewards across the matching connection */
  readonly allocationRewards: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of queryRewards across the matching connection */
  readonly queryRewards: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of stateChannelRewards across the matching connection */
  readonly stateChannelRewards: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of totalRewards across the matching connection */
  readonly totalRewards: Maybe<Scalars['BigFloat']['output']>;
};

export type EraDeploymentRewardStddevSampleAggregates = {
  readonly __typename: 'EraDeploymentRewardStddevSampleAggregates';
  /** Sample standard deviation of agreementRewards across the matching connection */
  readonly agreementRewards: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of allocationRewards across the matching connection */
  readonly allocationRewards: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of queryRewards across the matching connection */
  readonly queryRewards: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of stateChannelRewards across the matching connection */
  readonly stateChannelRewards: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of totalRewards across the matching connection */
  readonly totalRewards: Maybe<Scalars['BigFloat']['output']>;
};

export type EraDeploymentRewardSumAggregates = {
  readonly __typename: 'EraDeploymentRewardSumAggregates';
  /** Sum of agreementRewards across the matching connection */
  readonly agreementRewards: Scalars['BigFloat']['output'];
  /** Sum of allocationRewards across the matching connection */
  readonly allocationRewards: Scalars['BigFloat']['output'];
  /** Sum of eraIdx across the matching connection */
  readonly eraIdx: Scalars['BigInt']['output'];
  /** Sum of queryRewards across the matching connection */
  readonly queryRewards: Scalars['BigFloat']['output'];
  /** Sum of stateChannelRewards across the matching connection */
  readonly stateChannelRewards: Scalars['BigFloat']['output'];
  /** Sum of totalRewards across the matching connection */
  readonly totalRewards: Scalars['BigFloat']['output'];
};

export type EraDeploymentRewardVariancePopulationAggregates = {
  readonly __typename: 'EraDeploymentRewardVariancePopulationAggregates';
  /** Population variance of agreementRewards across the matching connection */
  readonly agreementRewards: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of allocationRewards across the matching connection */
  readonly allocationRewards: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of queryRewards across the matching connection */
  readonly queryRewards: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of stateChannelRewards across the matching connection */
  readonly stateChannelRewards: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of totalRewards across the matching connection */
  readonly totalRewards: Maybe<Scalars['BigFloat']['output']>;
};

export type EraDeploymentRewardVarianceSampleAggregates = {
  readonly __typename: 'EraDeploymentRewardVarianceSampleAggregates';
  /** Sample variance of agreementRewards across the matching connection */
  readonly agreementRewards: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of allocationRewards across the matching connection */
  readonly allocationRewards: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of queryRewards across the matching connection */
  readonly queryRewards: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of stateChannelRewards across the matching connection */
  readonly stateChannelRewards: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of totalRewards across the matching connection */
  readonly totalRewards: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `EraDeploymentReward` values. */
export type EraDeploymentRewardsConnection = {
  readonly __typename: 'EraDeploymentRewardsConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<EraDeploymentRewardAggregates>;
  /** A list of edges which contains the `EraDeploymentReward` and cursor to aid in pagination. */
  readonly edges: ReadonlyArray<EraDeploymentRewardsEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<EraDeploymentRewardAggregates>>;
  /** A list of `EraDeploymentReward` objects. */
  readonly nodes: ReadonlyArray<Maybe<EraDeploymentReward>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `EraDeploymentReward` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `EraDeploymentReward` values. */
export type EraDeploymentRewardsConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<EraDeploymentRewardsGroupBy>;
  having: InputMaybe<EraDeploymentRewardsHavingInput>;
};

/** A `EraDeploymentReward` edge in the connection. */
export type EraDeploymentRewardsEdge = {
  readonly __typename: 'EraDeploymentRewardsEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `EraDeploymentReward` at the end of the edge. */
  readonly node: Maybe<EraDeploymentReward>;
};

/** Grouping methods for `EraDeploymentReward` for usage during aggregation. */
export enum EraDeploymentRewardsGroupBy {
  AGREEMENT_REWARDS = 'AGREEMENT_REWARDS',
  ALLOCATION_REWARDS = 'ALLOCATION_REWARDS',
  CHANGES_HEIGHT = 'CHANGES_HEIGHT',
  DEPLOYMENT_ID = 'DEPLOYMENT_ID',
  ERA_IDX = 'ERA_IDX',
  ID = 'ID',
  QUERY_REWARDS = 'QUERY_REWARDS',
  STATE_CHANNEL_REWARDS = 'STATE_CHANNEL_REWARDS',
  TOTAL_REWARDS = 'TOTAL_REWARDS',
}

export type EraDeploymentRewardsHavingAverageInput = {
  readonly agreementRewards: InputMaybe<HavingBigfloatFilter>;
  readonly allocationRewards: InputMaybe<HavingBigfloatFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly queryRewards: InputMaybe<HavingBigfloatFilter>;
  readonly stateChannelRewards: InputMaybe<HavingBigfloatFilter>;
  readonly totalRewards: InputMaybe<HavingBigfloatFilter>;
};

export type EraDeploymentRewardsHavingDistinctCountInput = {
  readonly agreementRewards: InputMaybe<HavingBigfloatFilter>;
  readonly allocationRewards: InputMaybe<HavingBigfloatFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly queryRewards: InputMaybe<HavingBigfloatFilter>;
  readonly stateChannelRewards: InputMaybe<HavingBigfloatFilter>;
  readonly totalRewards: InputMaybe<HavingBigfloatFilter>;
};

/** Conditions for `EraDeploymentReward` aggregates. */
export type EraDeploymentRewardsHavingInput = {
  readonly AND: InputMaybe<ReadonlyArray<EraDeploymentRewardsHavingInput>>;
  readonly OR: InputMaybe<ReadonlyArray<EraDeploymentRewardsHavingInput>>;
  readonly average: InputMaybe<EraDeploymentRewardsHavingAverageInput>;
  readonly distinctCount: InputMaybe<EraDeploymentRewardsHavingDistinctCountInput>;
  readonly max: InputMaybe<EraDeploymentRewardsHavingMaxInput>;
  readonly min: InputMaybe<EraDeploymentRewardsHavingMinInput>;
  readonly stddevPopulation: InputMaybe<EraDeploymentRewardsHavingStddevPopulationInput>;
  readonly stddevSample: InputMaybe<EraDeploymentRewardsHavingStddevSampleInput>;
  readonly sum: InputMaybe<EraDeploymentRewardsHavingSumInput>;
  readonly variancePopulation: InputMaybe<EraDeploymentRewardsHavingVariancePopulationInput>;
  readonly varianceSample: InputMaybe<EraDeploymentRewardsHavingVarianceSampleInput>;
};

export type EraDeploymentRewardsHavingMaxInput = {
  readonly agreementRewards: InputMaybe<HavingBigfloatFilter>;
  readonly allocationRewards: InputMaybe<HavingBigfloatFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly queryRewards: InputMaybe<HavingBigfloatFilter>;
  readonly stateChannelRewards: InputMaybe<HavingBigfloatFilter>;
  readonly totalRewards: InputMaybe<HavingBigfloatFilter>;
};

export type EraDeploymentRewardsHavingMinInput = {
  readonly agreementRewards: InputMaybe<HavingBigfloatFilter>;
  readonly allocationRewards: InputMaybe<HavingBigfloatFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly queryRewards: InputMaybe<HavingBigfloatFilter>;
  readonly stateChannelRewards: InputMaybe<HavingBigfloatFilter>;
  readonly totalRewards: InputMaybe<HavingBigfloatFilter>;
};

export type EraDeploymentRewardsHavingStddevPopulationInput = {
  readonly agreementRewards: InputMaybe<HavingBigfloatFilter>;
  readonly allocationRewards: InputMaybe<HavingBigfloatFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly queryRewards: InputMaybe<HavingBigfloatFilter>;
  readonly stateChannelRewards: InputMaybe<HavingBigfloatFilter>;
  readonly totalRewards: InputMaybe<HavingBigfloatFilter>;
};

export type EraDeploymentRewardsHavingStddevSampleInput = {
  readonly agreementRewards: InputMaybe<HavingBigfloatFilter>;
  readonly allocationRewards: InputMaybe<HavingBigfloatFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly queryRewards: InputMaybe<HavingBigfloatFilter>;
  readonly stateChannelRewards: InputMaybe<HavingBigfloatFilter>;
  readonly totalRewards: InputMaybe<HavingBigfloatFilter>;
};

export type EraDeploymentRewardsHavingSumInput = {
  readonly agreementRewards: InputMaybe<HavingBigfloatFilter>;
  readonly allocationRewards: InputMaybe<HavingBigfloatFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly queryRewards: InputMaybe<HavingBigfloatFilter>;
  readonly stateChannelRewards: InputMaybe<HavingBigfloatFilter>;
  readonly totalRewards: InputMaybe<HavingBigfloatFilter>;
};

export type EraDeploymentRewardsHavingVariancePopulationInput = {
  readonly agreementRewards: InputMaybe<HavingBigfloatFilter>;
  readonly allocationRewards: InputMaybe<HavingBigfloatFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly queryRewards: InputMaybe<HavingBigfloatFilter>;
  readonly stateChannelRewards: InputMaybe<HavingBigfloatFilter>;
  readonly totalRewards: InputMaybe<HavingBigfloatFilter>;
};

export type EraDeploymentRewardsHavingVarianceSampleInput = {
  readonly agreementRewards: InputMaybe<HavingBigfloatFilter>;
  readonly allocationRewards: InputMaybe<HavingBigfloatFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly queryRewards: InputMaybe<HavingBigfloatFilter>;
  readonly stateChannelRewards: InputMaybe<HavingBigfloatFilter>;
  readonly totalRewards: InputMaybe<HavingBigfloatFilter>;
};

/** Methods to use when ordering `EraDeploymentReward`. */
export enum EraDeploymentRewardsOrderBy {
  AGREEMENT_REWARDS_ASC = 'AGREEMENT_REWARDS_ASC',
  AGREEMENT_REWARDS_DESC = 'AGREEMENT_REWARDS_DESC',
  ALLOCATION_REWARDS_ASC = 'ALLOCATION_REWARDS_ASC',
  ALLOCATION_REWARDS_DESC = 'ALLOCATION_REWARDS_DESC',
  CHANGES_HEIGHT_ASC = 'CHANGES_HEIGHT_ASC',
  CHANGES_HEIGHT_DESC = 'CHANGES_HEIGHT_DESC',
  DEPLOYMENT_ID_ASC = 'DEPLOYMENT_ID_ASC',
  DEPLOYMENT_ID_DESC = 'DEPLOYMENT_ID_DESC',
  ERA_IDX_ASC = 'ERA_IDX_ASC',
  ERA_IDX_DESC = 'ERA_IDX_DESC',
  ID_ASC = 'ID_ASC',
  ID_DESC = 'ID_DESC',
  NATURAL = 'NATURAL',
  PRIMARY_KEY_ASC = 'PRIMARY_KEY_ASC',
  PRIMARY_KEY_DESC = 'PRIMARY_KEY_DESC',
  QUERY_REWARDS_ASC = 'QUERY_REWARDS_ASC',
  QUERY_REWARDS_DESC = 'QUERY_REWARDS_DESC',
  STATE_CHANNEL_REWARDS_ASC = 'STATE_CHANNEL_REWARDS_ASC',
  STATE_CHANNEL_REWARDS_DESC = 'STATE_CHANNEL_REWARDS_DESC',
  TOTAL_REWARDS_ASC = 'TOTAL_REWARDS_ASC',
  TOTAL_REWARDS_DESC = 'TOTAL_REWARDS_DESC',
}

export type EraDistinctCountAggregates = {
  readonly __typename: 'EraDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  readonly _blockRange: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  readonly _id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of endTime across the matching connection */
  readonly endTime: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of eraPeriod across the matching connection */
  readonly eraPeriod: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of forceNext across the matching connection */
  readonly forceNext: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  readonly id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of lastEvent across the matching connection */
  readonly lastEvent: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of startTime across the matching connection */
  readonly startTime: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `Era` object types. All fields are combined with a logical ‘and.’ */
export type EraFilter = {
  /** Checks for all expressions in this list. */
  readonly and: InputMaybe<ReadonlyArray<EraFilter>>;
  /** Filter by the object’s `createdBlock` field. */
  readonly createdBlock: InputMaybe<IntFilter>;
  /** Filter by the object’s `endTime` field. */
  readonly endTime: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `eraPeriod` field. */
  readonly eraPeriod: InputMaybe<StringFilter>;
  /** Filter by the object’s `eraRewards` relation. */
  readonly eraRewards: InputMaybe<EraToManyEraRewardFilter>;
  /** Some related `eraRewards` exist. */
  readonly eraRewardsExist: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `eraStakeUpdatesByLastUpdateEraId` relation. */
  readonly eraStakeUpdatesByLastUpdateEraId: InputMaybe<EraToManyEraStakeUpdateFilter>;
  /** Some related `eraStakeUpdatesByLastUpdateEraId` exist. */
  readonly eraStakeUpdatesByLastUpdateEraIdExist: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `eraStakes` relation. */
  readonly eraStakes: InputMaybe<EraToManyEraStakeFilter>;
  /** Some related `eraStakes` exist. */
  readonly eraStakesExist: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `forceNext` field. */
  readonly forceNext: InputMaybe<BooleanFilter>;
  /** Filter by the object’s `id` field. */
  readonly id: InputMaybe<StringFilter>;
  /** Filter by the object’s `indexerCommissionRates` relation. */
  readonly indexerCommissionRates: InputMaybe<EraToManyIndexerCommissionRateFilter>;
  /** Some related `indexerCommissionRates` exist. */
  readonly indexerCommissionRatesExist: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `indexerStakeSummaries` relation. */
  readonly indexerStakeSummaries: InputMaybe<EraToManyIndexerStakeSummaryFilter>;
  /** Some related `indexerStakeSummaries` exist. */
  readonly indexerStakeSummariesExist: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `indexerStakes` relation. */
  readonly indexerStakes: InputMaybe<EraToManyIndexerStakeFilter>;
  /** Some related `indexerStakes` exist. */
  readonly indexerStakesExist: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `lastEvent` field. */
  readonly lastEvent: InputMaybe<StringFilter>;
  /** Negates the expression. */
  readonly not: InputMaybe<EraFilter>;
  /** Checks for any expressions in this list. */
  readonly or: InputMaybe<ReadonlyArray<EraFilter>>;
  /** Filter by the object’s `startTime` field. */
  readonly startTime: InputMaybe<DatetimeFilter>;
};

/** A connection to a list of `EraIndexerApy` values. */
export type EraIndexerApiesConnection = {
  readonly __typename: 'EraIndexerApiesConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<EraIndexerApyAggregates>;
  /** A list of edges which contains the `EraIndexerApy` and cursor to aid in pagination. */
  readonly edges: ReadonlyArray<EraIndexerApiesEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<EraIndexerApyAggregates>>;
  /** A list of `EraIndexerApy` objects. */
  readonly nodes: ReadonlyArray<Maybe<EraIndexerApy>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `EraIndexerApy` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `EraIndexerApy` values. */
export type EraIndexerApiesConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<EraIndexerApiesGroupBy>;
  having: InputMaybe<EraIndexerApiesHavingInput>;
};

/** A `EraIndexerApy` edge in the connection. */
export type EraIndexerApiesEdge = {
  readonly __typename: 'EraIndexerApiesEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `EraIndexerApy` at the end of the edge. */
  readonly node: Maybe<EraIndexerApy>;
};

/** Grouping methods for `EraIndexerApy` for usage during aggregation. */
export enum EraIndexerApiesGroupBy {
  CREATE_AT = 'CREATE_AT',
  CREATE_AT_TRUNCATED_TO_DAY = 'CREATE_AT_TRUNCATED_TO_DAY',
  CREATE_AT_TRUNCATED_TO_HOUR = 'CREATE_AT_TRUNCATED_TO_HOUR',
  DELEGATOR_APY = 'DELEGATOR_APY',
  DELEGATOR_REWARD = 'DELEGATOR_REWARD',
  ERA_IDX = 'ERA_IDX',
  ID = 'ID',
  INDEXER_APY = 'INDEXER_APY',
  INDEXER_ID = 'INDEXER_ID',
  INDEXER_REWARD = 'INDEXER_REWARD',
  UPDATE_AT = 'UPDATE_AT',
  UPDATE_AT_TRUNCATED_TO_DAY = 'UPDATE_AT_TRUNCATED_TO_DAY',
  UPDATE_AT_TRUNCATED_TO_HOUR = 'UPDATE_AT_TRUNCATED_TO_HOUR',
}

export type EraIndexerApiesHavingAverageInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly delegatorApy: InputMaybe<HavingBigfloatFilter>;
  readonly delegatorReward: InputMaybe<HavingBigfloatFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly indexerApy: InputMaybe<HavingBigfloatFilter>;
  readonly indexerReward: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type EraIndexerApiesHavingDistinctCountInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly delegatorApy: InputMaybe<HavingBigfloatFilter>;
  readonly delegatorReward: InputMaybe<HavingBigfloatFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly indexerApy: InputMaybe<HavingBigfloatFilter>;
  readonly indexerReward: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

/** Conditions for `EraIndexerApy` aggregates. */
export type EraIndexerApiesHavingInput = {
  readonly AND: InputMaybe<ReadonlyArray<EraIndexerApiesHavingInput>>;
  readonly OR: InputMaybe<ReadonlyArray<EraIndexerApiesHavingInput>>;
  readonly average: InputMaybe<EraIndexerApiesHavingAverageInput>;
  readonly distinctCount: InputMaybe<EraIndexerApiesHavingDistinctCountInput>;
  readonly max: InputMaybe<EraIndexerApiesHavingMaxInput>;
  readonly min: InputMaybe<EraIndexerApiesHavingMinInput>;
  readonly stddevPopulation: InputMaybe<EraIndexerApiesHavingStddevPopulationInput>;
  readonly stddevSample: InputMaybe<EraIndexerApiesHavingStddevSampleInput>;
  readonly sum: InputMaybe<EraIndexerApiesHavingSumInput>;
  readonly variancePopulation: InputMaybe<EraIndexerApiesHavingVariancePopulationInput>;
  readonly varianceSample: InputMaybe<EraIndexerApiesHavingVarianceSampleInput>;
};

export type EraIndexerApiesHavingMaxInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly delegatorApy: InputMaybe<HavingBigfloatFilter>;
  readonly delegatorReward: InputMaybe<HavingBigfloatFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly indexerApy: InputMaybe<HavingBigfloatFilter>;
  readonly indexerReward: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type EraIndexerApiesHavingMinInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly delegatorApy: InputMaybe<HavingBigfloatFilter>;
  readonly delegatorReward: InputMaybe<HavingBigfloatFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly indexerApy: InputMaybe<HavingBigfloatFilter>;
  readonly indexerReward: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type EraIndexerApiesHavingStddevPopulationInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly delegatorApy: InputMaybe<HavingBigfloatFilter>;
  readonly delegatorReward: InputMaybe<HavingBigfloatFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly indexerApy: InputMaybe<HavingBigfloatFilter>;
  readonly indexerReward: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type EraIndexerApiesHavingStddevSampleInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly delegatorApy: InputMaybe<HavingBigfloatFilter>;
  readonly delegatorReward: InputMaybe<HavingBigfloatFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly indexerApy: InputMaybe<HavingBigfloatFilter>;
  readonly indexerReward: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type EraIndexerApiesHavingSumInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly delegatorApy: InputMaybe<HavingBigfloatFilter>;
  readonly delegatorReward: InputMaybe<HavingBigfloatFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly indexerApy: InputMaybe<HavingBigfloatFilter>;
  readonly indexerReward: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type EraIndexerApiesHavingVariancePopulationInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly delegatorApy: InputMaybe<HavingBigfloatFilter>;
  readonly delegatorReward: InputMaybe<HavingBigfloatFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly indexerApy: InputMaybe<HavingBigfloatFilter>;
  readonly indexerReward: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type EraIndexerApiesHavingVarianceSampleInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly delegatorApy: InputMaybe<HavingBigfloatFilter>;
  readonly delegatorReward: InputMaybe<HavingBigfloatFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly indexerApy: InputMaybe<HavingBigfloatFilter>;
  readonly indexerReward: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

/** Methods to use when ordering `EraIndexerApy`. */
export enum EraIndexerApiesOrderBy {
  CREATE_AT_ASC = 'CREATE_AT_ASC',
  CREATE_AT_DESC = 'CREATE_AT_DESC',
  DELEGATOR_APY_ASC = 'DELEGATOR_APY_ASC',
  DELEGATOR_APY_DESC = 'DELEGATOR_APY_DESC',
  DELEGATOR_REWARD_ASC = 'DELEGATOR_REWARD_ASC',
  DELEGATOR_REWARD_DESC = 'DELEGATOR_REWARD_DESC',
  ERA_IDX_ASC = 'ERA_IDX_ASC',
  ERA_IDX_DESC = 'ERA_IDX_DESC',
  ID_ASC = 'ID_ASC',
  ID_DESC = 'ID_DESC',
  INDEXER_APY_ASC = 'INDEXER_APY_ASC',
  INDEXER_APY_DESC = 'INDEXER_APY_DESC',
  INDEXER_BY_INDEXER_ID__ACTIVE_ASC = 'INDEXER_BY_INDEXER_ID__ACTIVE_ASC',
  INDEXER_BY_INDEXER_ID__ACTIVE_DESC = 'INDEXER_BY_INDEXER_ID__ACTIVE_DESC',
  INDEXER_BY_INDEXER_ID__CAPACITY_ASC = 'INDEXER_BY_INDEXER_ID__CAPACITY_ASC',
  INDEXER_BY_INDEXER_ID__CAPACITY_DESC = 'INDEXER_BY_INDEXER_ID__CAPACITY_DESC',
  INDEXER_BY_INDEXER_ID__COMMISSION_ASC = 'INDEXER_BY_INDEXER_ID__COMMISSION_ASC',
  INDEXER_BY_INDEXER_ID__COMMISSION_DESC = 'INDEXER_BY_INDEXER_ID__COMMISSION_DESC',
  INDEXER_BY_INDEXER_ID__CONTROLLER_ASC = 'INDEXER_BY_INDEXER_ID__CONTROLLER_ASC',
  INDEXER_BY_INDEXER_ID__CONTROLLER_DESC = 'INDEXER_BY_INDEXER_ID__CONTROLLER_DESC',
  INDEXER_BY_INDEXER_ID__CREATED_BLOCK_ASC = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_ASC',
  INDEXER_BY_INDEXER_ID__CREATED_BLOCK_DESC = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_DESC',
  INDEXER_BY_INDEXER_ID__ID_ASC = 'INDEXER_BY_INDEXER_ID__ID_ASC',
  INDEXER_BY_INDEXER_ID__ID_DESC = 'INDEXER_BY_INDEXER_ID__ID_DESC',
  INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_ASC = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_ASC',
  INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_DESC = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_DESC',
  INDEXER_BY_INDEXER_ID__LAST_EVENT_ASC = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_ASC',
  INDEXER_BY_INDEXER_ID__LAST_EVENT_DESC = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_DESC',
  INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_ASC = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_ASC',
  INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_DESC = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_DESC',
  INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_ASC = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_ASC',
  INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_DESC = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_DESC',
  INDEXER_BY_INDEXER_ID__METADATA_ASC = 'INDEXER_BY_INDEXER_ID__METADATA_ASC',
  INDEXER_BY_INDEXER_ID__METADATA_DESC = 'INDEXER_BY_INDEXER_ID__METADATA_DESC',
  INDEXER_BY_INDEXER_ID__SELF_STAKE_ASC = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_ASC',
  INDEXER_BY_INDEXER_ID__SELF_STAKE_DESC = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_DESC',
  INDEXER_BY_INDEXER_ID__TOTAL_STAKE_ASC = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_ASC',
  INDEXER_BY_INDEXER_ID__TOTAL_STAKE_DESC = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_DESC',
  INDEXER_ID_ASC = 'INDEXER_ID_ASC',
  INDEXER_ID_DESC = 'INDEXER_ID_DESC',
  INDEXER_REWARD_ASC = 'INDEXER_REWARD_ASC',
  INDEXER_REWARD_DESC = 'INDEXER_REWARD_DESC',
  NATURAL = 'NATURAL',
  PRIMARY_KEY_ASC = 'PRIMARY_KEY_ASC',
  PRIMARY_KEY_DESC = 'PRIMARY_KEY_DESC',
  UPDATE_AT_ASC = 'UPDATE_AT_ASC',
  UPDATE_AT_DESC = 'UPDATE_AT_DESC',
}

export type EraIndexerApy = Node & {
  readonly __typename: 'EraIndexerApy';
  readonly createAt: Scalars['Datetime']['output'];
  readonly delegatorApy: Scalars['BigFloat']['output'];
  readonly delegatorReward: Scalars['BigFloat']['output'];
  readonly eraIdx: Scalars['Int']['output'];
  readonly id: Scalars['String']['output'];
  /** Reads a single `Indexer` that is related to this `EraIndexerApy`. */
  readonly indexer: Maybe<Indexer>;
  readonly indexerApy: Scalars['BigFloat']['output'];
  readonly indexerId: Scalars['String']['output'];
  readonly indexerReward: Scalars['BigFloat']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  readonly nodeId: Scalars['ID']['output'];
  readonly updateAt: Scalars['Datetime']['output'];
};

export type EraIndexerApyAggregates = {
  readonly __typename: 'EraIndexerApyAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly average: Maybe<EraIndexerApyAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly distinctCount: Maybe<EraIndexerApyDistinctCountAggregates>;
  readonly keys: Maybe<ReadonlyArray<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly max: Maybe<EraIndexerApyMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly min: Maybe<EraIndexerApyMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevPopulation: Maybe<EraIndexerApyStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevSample: Maybe<EraIndexerApyStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly sum: Maybe<EraIndexerApySumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly variancePopulation: Maybe<EraIndexerApyVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly varianceSample: Maybe<EraIndexerApyVarianceSampleAggregates>;
};

/** A filter to be used against aggregates of `EraIndexerApy` object types. */
export type EraIndexerApyAggregatesFilter = {
  /** Mean average aggregate over matching `EraIndexerApy` objects. */
  readonly average: InputMaybe<EraIndexerApyAverageAggregateFilter>;
  /** Distinct count aggregate over matching `EraIndexerApy` objects. */
  readonly distinctCount: InputMaybe<EraIndexerApyDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `EraIndexerApy` object to be included within the aggregate. */
  readonly filter: InputMaybe<EraIndexerApyFilter>;
  /** Maximum aggregate over matching `EraIndexerApy` objects. */
  readonly max: InputMaybe<EraIndexerApyMaxAggregateFilter>;
  /** Minimum aggregate over matching `EraIndexerApy` objects. */
  readonly min: InputMaybe<EraIndexerApyMinAggregateFilter>;
  /** Population standard deviation aggregate over matching `EraIndexerApy` objects. */
  readonly stddevPopulation: InputMaybe<EraIndexerApyStddevPopulationAggregateFilter>;
  /** Sample standard deviation aggregate over matching `EraIndexerApy` objects. */
  readonly stddevSample: InputMaybe<EraIndexerApyStddevSampleAggregateFilter>;
  /** Sum aggregate over matching `EraIndexerApy` objects. */
  readonly sum: InputMaybe<EraIndexerApySumAggregateFilter>;
  /** Population variance aggregate over matching `EraIndexerApy` objects. */
  readonly variancePopulation: InputMaybe<EraIndexerApyVariancePopulationAggregateFilter>;
  /** Sample variance aggregate over matching `EraIndexerApy` objects. */
  readonly varianceSample: InputMaybe<EraIndexerApyVarianceSampleAggregateFilter>;
};

export type EraIndexerApyAverageAggregateFilter = {
  readonly delegatorApy: InputMaybe<BigFloatFilter>;
  readonly delegatorReward: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigFloatFilter>;
  readonly indexerApy: InputMaybe<BigFloatFilter>;
  readonly indexerReward: InputMaybe<BigFloatFilter>;
};

export type EraIndexerApyAverageAggregates = {
  readonly __typename: 'EraIndexerApyAverageAggregates';
  /** Mean average of delegatorApy across the matching connection */
  readonly delegatorApy: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of delegatorReward across the matching connection */
  readonly delegatorReward: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of indexerApy across the matching connection */
  readonly indexerApy: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of indexerReward across the matching connection */
  readonly indexerReward: Maybe<Scalars['BigFloat']['output']>;
};

export type EraIndexerApyDistinctCountAggregateFilter = {
  readonly _blockRange: InputMaybe<BigIntFilter>;
  readonly _id: InputMaybe<BigIntFilter>;
  readonly createAt: InputMaybe<BigIntFilter>;
  readonly delegatorApy: InputMaybe<BigIntFilter>;
  readonly delegatorReward: InputMaybe<BigIntFilter>;
  readonly eraIdx: InputMaybe<BigIntFilter>;
  readonly id: InputMaybe<BigIntFilter>;
  readonly indexerApy: InputMaybe<BigIntFilter>;
  readonly indexerId: InputMaybe<BigIntFilter>;
  readonly indexerReward: InputMaybe<BigIntFilter>;
  readonly updateAt: InputMaybe<BigIntFilter>;
};

export type EraIndexerApyDistinctCountAggregates = {
  readonly __typename: 'EraIndexerApyDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  readonly _blockRange: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  readonly _id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createAt across the matching connection */
  readonly createAt: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of delegatorApy across the matching connection */
  readonly delegatorApy: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of delegatorReward across the matching connection */
  readonly delegatorReward: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  readonly id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of indexerApy across the matching connection */
  readonly indexerApy: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of indexerId across the matching connection */
  readonly indexerId: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of indexerReward across the matching connection */
  readonly indexerReward: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of updateAt across the matching connection */
  readonly updateAt: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `EraIndexerApy` object types. All fields are combined with a logical ‘and.’ */
export type EraIndexerApyFilter = {
  /** Checks for all expressions in this list. */
  readonly and: InputMaybe<ReadonlyArray<EraIndexerApyFilter>>;
  /** Filter by the object’s `createAt` field. */
  readonly createAt: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `delegatorApy` field. */
  readonly delegatorApy: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `delegatorReward` field. */
  readonly delegatorReward: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `eraIdx` field. */
  readonly eraIdx: InputMaybe<IntFilter>;
  /** Filter by the object’s `id` field. */
  readonly id: InputMaybe<StringFilter>;
  /** Filter by the object’s `indexer` relation. */
  readonly indexer: InputMaybe<IndexerFilter>;
  /** Filter by the object’s `indexerApy` field. */
  readonly indexerApy: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `indexerId` field. */
  readonly indexerId: InputMaybe<StringFilter>;
  /** Filter by the object’s `indexerReward` field. */
  readonly indexerReward: InputMaybe<BigFloatFilter>;
  /** Negates the expression. */
  readonly not: InputMaybe<EraIndexerApyFilter>;
  /** Checks for any expressions in this list. */
  readonly or: InputMaybe<ReadonlyArray<EraIndexerApyFilter>>;
  /** Filter by the object’s `updateAt` field. */
  readonly updateAt: InputMaybe<DatetimeFilter>;
};

export type EraIndexerApyMaxAggregateFilter = {
  readonly delegatorApy: InputMaybe<BigFloatFilter>;
  readonly delegatorReward: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<IntFilter>;
  readonly indexerApy: InputMaybe<BigFloatFilter>;
  readonly indexerReward: InputMaybe<BigFloatFilter>;
};

export type EraIndexerApyMaxAggregates = {
  readonly __typename: 'EraIndexerApyMaxAggregates';
  /** Maximum of delegatorApy across the matching connection */
  readonly delegatorApy: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of delegatorReward across the matching connection */
  readonly delegatorReward: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['Int']['output']>;
  /** Maximum of indexerApy across the matching connection */
  readonly indexerApy: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of indexerReward across the matching connection */
  readonly indexerReward: Maybe<Scalars['BigFloat']['output']>;
};

export type EraIndexerApyMinAggregateFilter = {
  readonly delegatorApy: InputMaybe<BigFloatFilter>;
  readonly delegatorReward: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<IntFilter>;
  readonly indexerApy: InputMaybe<BigFloatFilter>;
  readonly indexerReward: InputMaybe<BigFloatFilter>;
};

export type EraIndexerApyMinAggregates = {
  readonly __typename: 'EraIndexerApyMinAggregates';
  /** Minimum of delegatorApy across the matching connection */
  readonly delegatorApy: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of delegatorReward across the matching connection */
  readonly delegatorReward: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['Int']['output']>;
  /** Minimum of indexerApy across the matching connection */
  readonly indexerApy: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of indexerReward across the matching connection */
  readonly indexerReward: Maybe<Scalars['BigFloat']['output']>;
};

export type EraIndexerApyStddevPopulationAggregateFilter = {
  readonly delegatorApy: InputMaybe<BigFloatFilter>;
  readonly delegatorReward: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigFloatFilter>;
  readonly indexerApy: InputMaybe<BigFloatFilter>;
  readonly indexerReward: InputMaybe<BigFloatFilter>;
};

export type EraIndexerApyStddevPopulationAggregates = {
  readonly __typename: 'EraIndexerApyStddevPopulationAggregates';
  /** Population standard deviation of delegatorApy across the matching connection */
  readonly delegatorApy: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of delegatorReward across the matching connection */
  readonly delegatorReward: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of indexerApy across the matching connection */
  readonly indexerApy: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of indexerReward across the matching connection */
  readonly indexerReward: Maybe<Scalars['BigFloat']['output']>;
};

export type EraIndexerApyStddevSampleAggregateFilter = {
  readonly delegatorApy: InputMaybe<BigFloatFilter>;
  readonly delegatorReward: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigFloatFilter>;
  readonly indexerApy: InputMaybe<BigFloatFilter>;
  readonly indexerReward: InputMaybe<BigFloatFilter>;
};

export type EraIndexerApyStddevSampleAggregates = {
  readonly __typename: 'EraIndexerApyStddevSampleAggregates';
  /** Sample standard deviation of delegatorApy across the matching connection */
  readonly delegatorApy: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of delegatorReward across the matching connection */
  readonly delegatorReward: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of indexerApy across the matching connection */
  readonly indexerApy: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of indexerReward across the matching connection */
  readonly indexerReward: Maybe<Scalars['BigFloat']['output']>;
};

export type EraIndexerApySumAggregateFilter = {
  readonly delegatorApy: InputMaybe<BigFloatFilter>;
  readonly delegatorReward: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigIntFilter>;
  readonly indexerApy: InputMaybe<BigFloatFilter>;
  readonly indexerReward: InputMaybe<BigFloatFilter>;
};

export type EraIndexerApySumAggregates = {
  readonly __typename: 'EraIndexerApySumAggregates';
  /** Sum of delegatorApy across the matching connection */
  readonly delegatorApy: Scalars['BigFloat']['output'];
  /** Sum of delegatorReward across the matching connection */
  readonly delegatorReward: Scalars['BigFloat']['output'];
  /** Sum of eraIdx across the matching connection */
  readonly eraIdx: Scalars['BigInt']['output'];
  /** Sum of indexerApy across the matching connection */
  readonly indexerApy: Scalars['BigFloat']['output'];
  /** Sum of indexerReward across the matching connection */
  readonly indexerReward: Scalars['BigFloat']['output'];
};

export type EraIndexerApyVariancePopulationAggregateFilter = {
  readonly delegatorApy: InputMaybe<BigFloatFilter>;
  readonly delegatorReward: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigFloatFilter>;
  readonly indexerApy: InputMaybe<BigFloatFilter>;
  readonly indexerReward: InputMaybe<BigFloatFilter>;
};

export type EraIndexerApyVariancePopulationAggregates = {
  readonly __typename: 'EraIndexerApyVariancePopulationAggregates';
  /** Population variance of delegatorApy across the matching connection */
  readonly delegatorApy: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of delegatorReward across the matching connection */
  readonly delegatorReward: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of indexerApy across the matching connection */
  readonly indexerApy: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of indexerReward across the matching connection */
  readonly indexerReward: Maybe<Scalars['BigFloat']['output']>;
};

export type EraIndexerApyVarianceSampleAggregateFilter = {
  readonly delegatorApy: InputMaybe<BigFloatFilter>;
  readonly delegatorReward: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigFloatFilter>;
  readonly indexerApy: InputMaybe<BigFloatFilter>;
  readonly indexerReward: InputMaybe<BigFloatFilter>;
};

export type EraIndexerApyVarianceSampleAggregates = {
  readonly __typename: 'EraIndexerApyVarianceSampleAggregates';
  /** Sample variance of delegatorApy across the matching connection */
  readonly delegatorApy: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of delegatorReward across the matching connection */
  readonly delegatorReward: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of indexerApy across the matching connection */
  readonly indexerApy: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of indexerReward across the matching connection */
  readonly indexerReward: Maybe<Scalars['BigFloat']['output']>;
};

export type EraIndexerDelegator = Node & {
  readonly __typename: 'EraIndexerDelegator';
  readonly delegators: Scalars['JSON']['output'];
  readonly era: Scalars['Int']['output'];
  readonly id: Scalars['String']['output'];
  readonly indexer: Scalars['String']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  readonly nodeId: Scalars['ID']['output'];
  readonly selfStake: Scalars['BigFloat']['output'];
  readonly totalStake: Scalars['BigFloat']['output'];
};

export type EraIndexerDelegatorDelegatorsArgs = {
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Delegators_Distinct_Enum>>>;
};

export type EraIndexerDelegatorAggregates = {
  readonly __typename: 'EraIndexerDelegatorAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly average: Maybe<EraIndexerDelegatorAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly distinctCount: Maybe<EraIndexerDelegatorDistinctCountAggregates>;
  readonly keys: Maybe<ReadonlyArray<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly max: Maybe<EraIndexerDelegatorMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly min: Maybe<EraIndexerDelegatorMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevPopulation: Maybe<EraIndexerDelegatorStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevSample: Maybe<EraIndexerDelegatorStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly sum: Maybe<EraIndexerDelegatorSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly variancePopulation: Maybe<EraIndexerDelegatorVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly varianceSample: Maybe<EraIndexerDelegatorVarianceSampleAggregates>;
};

export type EraIndexerDelegatorAverageAggregates = {
  readonly __typename: 'EraIndexerDelegatorAverageAggregates';
  /** Mean average of era across the matching connection */
  readonly era: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of selfStake across the matching connection */
  readonly selfStake: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of totalStake across the matching connection */
  readonly totalStake: Maybe<Scalars['BigFloat']['output']>;
};

export type EraIndexerDelegatorDistinctCountAggregates = {
  readonly __typename: 'EraIndexerDelegatorDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  readonly _blockRange: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  readonly _id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of delegators across the matching connection */
  readonly delegators: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of era across the matching connection */
  readonly era: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  readonly id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of indexer across the matching connection */
  readonly indexer: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of selfStake across the matching connection */
  readonly selfStake: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of totalStake across the matching connection */
  readonly totalStake: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `EraIndexerDelegator` object types. All fields are combined with a logical ‘and.’ */
export type EraIndexerDelegatorFilter = {
  /** Checks for all expressions in this list. */
  readonly and: InputMaybe<ReadonlyArray<EraIndexerDelegatorFilter>>;
  /** Filter by the object’s `delegators` field. */
  readonly delegators: InputMaybe<JsonFilter>;
  /** Filter by the object’s `era` field. */
  readonly era: InputMaybe<IntFilter>;
  /** Filter by the object’s `id` field. */
  readonly id: InputMaybe<StringFilter>;
  /** Filter by the object’s `indexer` field. */
  readonly indexer: InputMaybe<StringFilter>;
  /** Negates the expression. */
  readonly not: InputMaybe<EraIndexerDelegatorFilter>;
  /** Checks for any expressions in this list. */
  readonly or: InputMaybe<ReadonlyArray<EraIndexerDelegatorFilter>>;
  /** Filter by the object’s `selfStake` field. */
  readonly selfStake: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `totalStake` field. */
  readonly totalStake: InputMaybe<BigFloatFilter>;
};

export type EraIndexerDelegatorMaxAggregates = {
  readonly __typename: 'EraIndexerDelegatorMaxAggregates';
  /** Maximum of era across the matching connection */
  readonly era: Maybe<Scalars['Int']['output']>;
  /** Maximum of selfStake across the matching connection */
  readonly selfStake: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of totalStake across the matching connection */
  readonly totalStake: Maybe<Scalars['BigFloat']['output']>;
};

export type EraIndexerDelegatorMinAggregates = {
  readonly __typename: 'EraIndexerDelegatorMinAggregates';
  /** Minimum of era across the matching connection */
  readonly era: Maybe<Scalars['Int']['output']>;
  /** Minimum of selfStake across the matching connection */
  readonly selfStake: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of totalStake across the matching connection */
  readonly totalStake: Maybe<Scalars['BigFloat']['output']>;
};

export type EraIndexerDelegatorStddevPopulationAggregates = {
  readonly __typename: 'EraIndexerDelegatorStddevPopulationAggregates';
  /** Population standard deviation of era across the matching connection */
  readonly era: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of selfStake across the matching connection */
  readonly selfStake: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of totalStake across the matching connection */
  readonly totalStake: Maybe<Scalars['BigFloat']['output']>;
};

export type EraIndexerDelegatorStddevSampleAggregates = {
  readonly __typename: 'EraIndexerDelegatorStddevSampleAggregates';
  /** Sample standard deviation of era across the matching connection */
  readonly era: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of selfStake across the matching connection */
  readonly selfStake: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of totalStake across the matching connection */
  readonly totalStake: Maybe<Scalars['BigFloat']['output']>;
};

export type EraIndexerDelegatorSumAggregates = {
  readonly __typename: 'EraIndexerDelegatorSumAggregates';
  /** Sum of era across the matching connection */
  readonly era: Scalars['BigInt']['output'];
  /** Sum of selfStake across the matching connection */
  readonly selfStake: Scalars['BigFloat']['output'];
  /** Sum of totalStake across the matching connection */
  readonly totalStake: Scalars['BigFloat']['output'];
};

export type EraIndexerDelegatorVariancePopulationAggregates = {
  readonly __typename: 'EraIndexerDelegatorVariancePopulationAggregates';
  /** Population variance of era across the matching connection */
  readonly era: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of selfStake across the matching connection */
  readonly selfStake: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of totalStake across the matching connection */
  readonly totalStake: Maybe<Scalars['BigFloat']['output']>;
};

export type EraIndexerDelegatorVarianceSampleAggregates = {
  readonly __typename: 'EraIndexerDelegatorVarianceSampleAggregates';
  /** Sample variance of era across the matching connection */
  readonly era: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of selfStake across the matching connection */
  readonly selfStake: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of totalStake across the matching connection */
  readonly totalStake: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `EraIndexerDelegator` values. */
export type EraIndexerDelegatorsConnection = {
  readonly __typename: 'EraIndexerDelegatorsConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<EraIndexerDelegatorAggregates>;
  /** A list of edges which contains the `EraIndexerDelegator` and cursor to aid in pagination. */
  readonly edges: ReadonlyArray<EraIndexerDelegatorsEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<EraIndexerDelegatorAggregates>>;
  /** A list of `EraIndexerDelegator` objects. */
  readonly nodes: ReadonlyArray<Maybe<EraIndexerDelegator>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `EraIndexerDelegator` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `EraIndexerDelegator` values. */
export type EraIndexerDelegatorsConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<EraIndexerDelegatorsGroupBy>;
  having: InputMaybe<EraIndexerDelegatorsHavingInput>;
};

/** A `EraIndexerDelegator` edge in the connection. */
export type EraIndexerDelegatorsEdge = {
  readonly __typename: 'EraIndexerDelegatorsEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `EraIndexerDelegator` at the end of the edge. */
  readonly node: Maybe<EraIndexerDelegator>;
};

/** Grouping methods for `EraIndexerDelegator` for usage during aggregation. */
export enum EraIndexerDelegatorsGroupBy {
  DELEGATORS = 'DELEGATORS',
  ERA = 'ERA',
  ID = 'ID',
  INDEXER = 'INDEXER',
  SELF_STAKE = 'SELF_STAKE',
  TOTAL_STAKE = 'TOTAL_STAKE',
}

export type EraIndexerDelegatorsHavingAverageInput = {
  readonly era: InputMaybe<HavingIntFilter>;
  readonly selfStake: InputMaybe<HavingBigfloatFilter>;
  readonly totalStake: InputMaybe<HavingBigfloatFilter>;
};

export type EraIndexerDelegatorsHavingDistinctCountInput = {
  readonly era: InputMaybe<HavingIntFilter>;
  readonly selfStake: InputMaybe<HavingBigfloatFilter>;
  readonly totalStake: InputMaybe<HavingBigfloatFilter>;
};

/** Conditions for `EraIndexerDelegator` aggregates. */
export type EraIndexerDelegatorsHavingInput = {
  readonly AND: InputMaybe<ReadonlyArray<EraIndexerDelegatorsHavingInput>>;
  readonly OR: InputMaybe<ReadonlyArray<EraIndexerDelegatorsHavingInput>>;
  readonly average: InputMaybe<EraIndexerDelegatorsHavingAverageInput>;
  readonly distinctCount: InputMaybe<EraIndexerDelegatorsHavingDistinctCountInput>;
  readonly max: InputMaybe<EraIndexerDelegatorsHavingMaxInput>;
  readonly min: InputMaybe<EraIndexerDelegatorsHavingMinInput>;
  readonly stddevPopulation: InputMaybe<EraIndexerDelegatorsHavingStddevPopulationInput>;
  readonly stddevSample: InputMaybe<EraIndexerDelegatorsHavingStddevSampleInput>;
  readonly sum: InputMaybe<EraIndexerDelegatorsHavingSumInput>;
  readonly variancePopulation: InputMaybe<EraIndexerDelegatorsHavingVariancePopulationInput>;
  readonly varianceSample: InputMaybe<EraIndexerDelegatorsHavingVarianceSampleInput>;
};

export type EraIndexerDelegatorsHavingMaxInput = {
  readonly era: InputMaybe<HavingIntFilter>;
  readonly selfStake: InputMaybe<HavingBigfloatFilter>;
  readonly totalStake: InputMaybe<HavingBigfloatFilter>;
};

export type EraIndexerDelegatorsHavingMinInput = {
  readonly era: InputMaybe<HavingIntFilter>;
  readonly selfStake: InputMaybe<HavingBigfloatFilter>;
  readonly totalStake: InputMaybe<HavingBigfloatFilter>;
};

export type EraIndexerDelegatorsHavingStddevPopulationInput = {
  readonly era: InputMaybe<HavingIntFilter>;
  readonly selfStake: InputMaybe<HavingBigfloatFilter>;
  readonly totalStake: InputMaybe<HavingBigfloatFilter>;
};

export type EraIndexerDelegatorsHavingStddevSampleInput = {
  readonly era: InputMaybe<HavingIntFilter>;
  readonly selfStake: InputMaybe<HavingBigfloatFilter>;
  readonly totalStake: InputMaybe<HavingBigfloatFilter>;
};

export type EraIndexerDelegatorsHavingSumInput = {
  readonly era: InputMaybe<HavingIntFilter>;
  readonly selfStake: InputMaybe<HavingBigfloatFilter>;
  readonly totalStake: InputMaybe<HavingBigfloatFilter>;
};

export type EraIndexerDelegatorsHavingVariancePopulationInput = {
  readonly era: InputMaybe<HavingIntFilter>;
  readonly selfStake: InputMaybe<HavingBigfloatFilter>;
  readonly totalStake: InputMaybe<HavingBigfloatFilter>;
};

export type EraIndexerDelegatorsHavingVarianceSampleInput = {
  readonly era: InputMaybe<HavingIntFilter>;
  readonly selfStake: InputMaybe<HavingBigfloatFilter>;
  readonly totalStake: InputMaybe<HavingBigfloatFilter>;
};

/** Methods to use when ordering `EraIndexerDelegator`. */
export enum EraIndexerDelegatorsOrderBy {
  DELEGATORS_ASC = 'DELEGATORS_ASC',
  DELEGATORS_DESC = 'DELEGATORS_DESC',
  ERA_ASC = 'ERA_ASC',
  ERA_DESC = 'ERA_DESC',
  ID_ASC = 'ID_ASC',
  ID_DESC = 'ID_DESC',
  INDEXER_ASC = 'INDEXER_ASC',
  INDEXER_DESC = 'INDEXER_DESC',
  NATURAL = 'NATURAL',
  PRIMARY_KEY_ASC = 'PRIMARY_KEY_ASC',
  PRIMARY_KEY_DESC = 'PRIMARY_KEY_DESC',
  SELF_STAKE_ASC = 'SELF_STAKE_ASC',
  SELF_STAKE_DESC = 'SELF_STAKE_DESC',
  TOTAL_STAKE_ASC = 'TOTAL_STAKE_ASC',
  TOTAL_STAKE_DESC = 'TOTAL_STAKE_DESC',
}

/** A connection to a list of `EraIndexerDeploymentApy` values. */
export type EraIndexerDeploymentApiesConnection = {
  readonly __typename: 'EraIndexerDeploymentApiesConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<EraIndexerDeploymentApyAggregates>;
  /** A list of edges which contains the `EraIndexerDeploymentApy` and cursor to aid in pagination. */
  readonly edges: ReadonlyArray<EraIndexerDeploymentApiesEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<EraIndexerDeploymentApyAggregates>>;
  /** A list of `EraIndexerDeploymentApy` objects. */
  readonly nodes: ReadonlyArray<Maybe<EraIndexerDeploymentApy>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `EraIndexerDeploymentApy` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `EraIndexerDeploymentApy` values. */
export type EraIndexerDeploymentApiesConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<EraIndexerDeploymentApiesGroupBy>;
  having: InputMaybe<EraIndexerDeploymentApiesHavingInput>;
};

/** A `EraIndexerDeploymentApy` edge in the connection. */
export type EraIndexerDeploymentApiesEdge = {
  readonly __typename: 'EraIndexerDeploymentApiesEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `EraIndexerDeploymentApy` at the end of the edge. */
  readonly node: Maybe<EraIndexerDeploymentApy>;
};

/** Grouping methods for `EraIndexerDeploymentApy` for usage during aggregation. */
export enum EraIndexerDeploymentApiesGroupBy {
  AGREEMENT_REWARD = 'AGREEMENT_REWARD',
  ALLOCATION_REWARD = 'ALLOCATION_REWARD',
  APY = 'APY',
  APY_CALC_ADDED = 'APY_CALC_ADDED',
  APY_CALC_ALLOCATION = 'APY_CALC_ALLOCATION',
  APY_CALC_ALLOCATION_RECORD_AT = 'APY_CALC_ALLOCATION_RECORD_AT',
  APY_CALC_ALLOCATION_RECORD_AT_TRUNCATED_TO_DAY = 'APY_CALC_ALLOCATION_RECORD_AT_TRUNCATED_TO_DAY',
  APY_CALC_ALLOCATION_RECORD_AT_TRUNCATED_TO_HOUR = 'APY_CALC_ALLOCATION_RECORD_AT_TRUNCATED_TO_HOUR',
  APY_CALC_HISTORY = 'APY_CALC_HISTORY',
  APY_CALC_REMOVAL = 'APY_CALC_REMOVAL',
  CREATE_AT = 'CREATE_AT',
  CREATE_AT_TRUNCATED_TO_DAY = 'CREATE_AT_TRUNCATED_TO_DAY',
  CREATE_AT_TRUNCATED_TO_HOUR = 'CREATE_AT_TRUNCATED_TO_HOUR',
  DEPLOYMENT_ID = 'DEPLOYMENT_ID',
  ERA_IDX = 'ERA_IDX',
  FLEX_PLAN_REWARD = 'FLEX_PLAN_REWARD',
  ID = 'ID',
  INDEXER_ID = 'INDEXER_ID',
  UPDATE_AT = 'UPDATE_AT',
  UPDATE_AT_TRUNCATED_TO_DAY = 'UPDATE_AT_TRUNCATED_TO_DAY',
  UPDATE_AT_TRUNCATED_TO_HOUR = 'UPDATE_AT_TRUNCATED_TO_HOUR',
}

export type EraIndexerDeploymentApiesHavingAverageInput = {
  readonly agreementReward: InputMaybe<HavingBigfloatFilter>;
  readonly allocationReward: InputMaybe<HavingBigfloatFilter>;
  readonly apy: InputMaybe<HavingBigfloatFilter>;
  readonly apyCalcAdded: InputMaybe<HavingBigfloatFilter>;
  readonly apyCalcAllocation: InputMaybe<HavingBigfloatFilter>;
  readonly apyCalcAllocationRecordAt: InputMaybe<HavingDatetimeFilter>;
  readonly apyCalcRemoval: InputMaybe<HavingBigfloatFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly flexPlanReward: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type EraIndexerDeploymentApiesHavingDistinctCountInput = {
  readonly agreementReward: InputMaybe<HavingBigfloatFilter>;
  readonly allocationReward: InputMaybe<HavingBigfloatFilter>;
  readonly apy: InputMaybe<HavingBigfloatFilter>;
  readonly apyCalcAdded: InputMaybe<HavingBigfloatFilter>;
  readonly apyCalcAllocation: InputMaybe<HavingBigfloatFilter>;
  readonly apyCalcAllocationRecordAt: InputMaybe<HavingDatetimeFilter>;
  readonly apyCalcRemoval: InputMaybe<HavingBigfloatFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly flexPlanReward: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

/** Conditions for `EraIndexerDeploymentApy` aggregates. */
export type EraIndexerDeploymentApiesHavingInput = {
  readonly AND: InputMaybe<ReadonlyArray<EraIndexerDeploymentApiesHavingInput>>;
  readonly OR: InputMaybe<ReadonlyArray<EraIndexerDeploymentApiesHavingInput>>;
  readonly average: InputMaybe<EraIndexerDeploymentApiesHavingAverageInput>;
  readonly distinctCount: InputMaybe<EraIndexerDeploymentApiesHavingDistinctCountInput>;
  readonly max: InputMaybe<EraIndexerDeploymentApiesHavingMaxInput>;
  readonly min: InputMaybe<EraIndexerDeploymentApiesHavingMinInput>;
  readonly stddevPopulation: InputMaybe<EraIndexerDeploymentApiesHavingStddevPopulationInput>;
  readonly stddevSample: InputMaybe<EraIndexerDeploymentApiesHavingStddevSampleInput>;
  readonly sum: InputMaybe<EraIndexerDeploymentApiesHavingSumInput>;
  readonly variancePopulation: InputMaybe<EraIndexerDeploymentApiesHavingVariancePopulationInput>;
  readonly varianceSample: InputMaybe<EraIndexerDeploymentApiesHavingVarianceSampleInput>;
};

export type EraIndexerDeploymentApiesHavingMaxInput = {
  readonly agreementReward: InputMaybe<HavingBigfloatFilter>;
  readonly allocationReward: InputMaybe<HavingBigfloatFilter>;
  readonly apy: InputMaybe<HavingBigfloatFilter>;
  readonly apyCalcAdded: InputMaybe<HavingBigfloatFilter>;
  readonly apyCalcAllocation: InputMaybe<HavingBigfloatFilter>;
  readonly apyCalcAllocationRecordAt: InputMaybe<HavingDatetimeFilter>;
  readonly apyCalcRemoval: InputMaybe<HavingBigfloatFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly flexPlanReward: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type EraIndexerDeploymentApiesHavingMinInput = {
  readonly agreementReward: InputMaybe<HavingBigfloatFilter>;
  readonly allocationReward: InputMaybe<HavingBigfloatFilter>;
  readonly apy: InputMaybe<HavingBigfloatFilter>;
  readonly apyCalcAdded: InputMaybe<HavingBigfloatFilter>;
  readonly apyCalcAllocation: InputMaybe<HavingBigfloatFilter>;
  readonly apyCalcAllocationRecordAt: InputMaybe<HavingDatetimeFilter>;
  readonly apyCalcRemoval: InputMaybe<HavingBigfloatFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly flexPlanReward: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type EraIndexerDeploymentApiesHavingStddevPopulationInput = {
  readonly agreementReward: InputMaybe<HavingBigfloatFilter>;
  readonly allocationReward: InputMaybe<HavingBigfloatFilter>;
  readonly apy: InputMaybe<HavingBigfloatFilter>;
  readonly apyCalcAdded: InputMaybe<HavingBigfloatFilter>;
  readonly apyCalcAllocation: InputMaybe<HavingBigfloatFilter>;
  readonly apyCalcAllocationRecordAt: InputMaybe<HavingDatetimeFilter>;
  readonly apyCalcRemoval: InputMaybe<HavingBigfloatFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly flexPlanReward: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type EraIndexerDeploymentApiesHavingStddevSampleInput = {
  readonly agreementReward: InputMaybe<HavingBigfloatFilter>;
  readonly allocationReward: InputMaybe<HavingBigfloatFilter>;
  readonly apy: InputMaybe<HavingBigfloatFilter>;
  readonly apyCalcAdded: InputMaybe<HavingBigfloatFilter>;
  readonly apyCalcAllocation: InputMaybe<HavingBigfloatFilter>;
  readonly apyCalcAllocationRecordAt: InputMaybe<HavingDatetimeFilter>;
  readonly apyCalcRemoval: InputMaybe<HavingBigfloatFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly flexPlanReward: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type EraIndexerDeploymentApiesHavingSumInput = {
  readonly agreementReward: InputMaybe<HavingBigfloatFilter>;
  readonly allocationReward: InputMaybe<HavingBigfloatFilter>;
  readonly apy: InputMaybe<HavingBigfloatFilter>;
  readonly apyCalcAdded: InputMaybe<HavingBigfloatFilter>;
  readonly apyCalcAllocation: InputMaybe<HavingBigfloatFilter>;
  readonly apyCalcAllocationRecordAt: InputMaybe<HavingDatetimeFilter>;
  readonly apyCalcRemoval: InputMaybe<HavingBigfloatFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly flexPlanReward: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type EraIndexerDeploymentApiesHavingVariancePopulationInput = {
  readonly agreementReward: InputMaybe<HavingBigfloatFilter>;
  readonly allocationReward: InputMaybe<HavingBigfloatFilter>;
  readonly apy: InputMaybe<HavingBigfloatFilter>;
  readonly apyCalcAdded: InputMaybe<HavingBigfloatFilter>;
  readonly apyCalcAllocation: InputMaybe<HavingBigfloatFilter>;
  readonly apyCalcAllocationRecordAt: InputMaybe<HavingDatetimeFilter>;
  readonly apyCalcRemoval: InputMaybe<HavingBigfloatFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly flexPlanReward: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type EraIndexerDeploymentApiesHavingVarianceSampleInput = {
  readonly agreementReward: InputMaybe<HavingBigfloatFilter>;
  readonly allocationReward: InputMaybe<HavingBigfloatFilter>;
  readonly apy: InputMaybe<HavingBigfloatFilter>;
  readonly apyCalcAdded: InputMaybe<HavingBigfloatFilter>;
  readonly apyCalcAllocation: InputMaybe<HavingBigfloatFilter>;
  readonly apyCalcAllocationRecordAt: InputMaybe<HavingDatetimeFilter>;
  readonly apyCalcRemoval: InputMaybe<HavingBigfloatFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly flexPlanReward: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

/** Methods to use when ordering `EraIndexerDeploymentApy`. */
export enum EraIndexerDeploymentApiesOrderBy {
  AGREEMENT_REWARD_ASC = 'AGREEMENT_REWARD_ASC',
  AGREEMENT_REWARD_DESC = 'AGREEMENT_REWARD_DESC',
  ALLOCATION_REWARD_ASC = 'ALLOCATION_REWARD_ASC',
  ALLOCATION_REWARD_DESC = 'ALLOCATION_REWARD_DESC',
  APY_ASC = 'APY_ASC',
  APY_CALC_ADDED_ASC = 'APY_CALC_ADDED_ASC',
  APY_CALC_ADDED_DESC = 'APY_CALC_ADDED_DESC',
  APY_CALC_ALLOCATION_ASC = 'APY_CALC_ALLOCATION_ASC',
  APY_CALC_ALLOCATION_DESC = 'APY_CALC_ALLOCATION_DESC',
  APY_CALC_ALLOCATION_RECORD_AT_ASC = 'APY_CALC_ALLOCATION_RECORD_AT_ASC',
  APY_CALC_ALLOCATION_RECORD_AT_DESC = 'APY_CALC_ALLOCATION_RECORD_AT_DESC',
  APY_CALC_HISTORY_ASC = 'APY_CALC_HISTORY_ASC',
  APY_CALC_HISTORY_DESC = 'APY_CALC_HISTORY_DESC',
  APY_CALC_REMOVAL_ASC = 'APY_CALC_REMOVAL_ASC',
  APY_CALC_REMOVAL_DESC = 'APY_CALC_REMOVAL_DESC',
  APY_DESC = 'APY_DESC',
  CREATE_AT_ASC = 'CREATE_AT_ASC',
  CREATE_AT_DESC = 'CREATE_AT_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__ID_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__ID_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__ID_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__ID_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_DESC',
  DEPLOYMENT_ID_ASC = 'DEPLOYMENT_ID_ASC',
  DEPLOYMENT_ID_DESC = 'DEPLOYMENT_ID_DESC',
  ERA_IDX_ASC = 'ERA_IDX_ASC',
  ERA_IDX_DESC = 'ERA_IDX_DESC',
  FLEX_PLAN_REWARD_ASC = 'FLEX_PLAN_REWARD_ASC',
  FLEX_PLAN_REWARD_DESC = 'FLEX_PLAN_REWARD_DESC',
  ID_ASC = 'ID_ASC',
  ID_DESC = 'ID_DESC',
  INDEXER_BY_INDEXER_ID__ACTIVE_ASC = 'INDEXER_BY_INDEXER_ID__ACTIVE_ASC',
  INDEXER_BY_INDEXER_ID__ACTIVE_DESC = 'INDEXER_BY_INDEXER_ID__ACTIVE_DESC',
  INDEXER_BY_INDEXER_ID__CAPACITY_ASC = 'INDEXER_BY_INDEXER_ID__CAPACITY_ASC',
  INDEXER_BY_INDEXER_ID__CAPACITY_DESC = 'INDEXER_BY_INDEXER_ID__CAPACITY_DESC',
  INDEXER_BY_INDEXER_ID__COMMISSION_ASC = 'INDEXER_BY_INDEXER_ID__COMMISSION_ASC',
  INDEXER_BY_INDEXER_ID__COMMISSION_DESC = 'INDEXER_BY_INDEXER_ID__COMMISSION_DESC',
  INDEXER_BY_INDEXER_ID__CONTROLLER_ASC = 'INDEXER_BY_INDEXER_ID__CONTROLLER_ASC',
  INDEXER_BY_INDEXER_ID__CONTROLLER_DESC = 'INDEXER_BY_INDEXER_ID__CONTROLLER_DESC',
  INDEXER_BY_INDEXER_ID__CREATED_BLOCK_ASC = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_ASC',
  INDEXER_BY_INDEXER_ID__CREATED_BLOCK_DESC = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_DESC',
  INDEXER_BY_INDEXER_ID__ID_ASC = 'INDEXER_BY_INDEXER_ID__ID_ASC',
  INDEXER_BY_INDEXER_ID__ID_DESC = 'INDEXER_BY_INDEXER_ID__ID_DESC',
  INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_ASC = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_ASC',
  INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_DESC = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_DESC',
  INDEXER_BY_INDEXER_ID__LAST_EVENT_ASC = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_ASC',
  INDEXER_BY_INDEXER_ID__LAST_EVENT_DESC = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_DESC',
  INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_ASC = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_ASC',
  INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_DESC = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_DESC',
  INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_ASC = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_ASC',
  INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_DESC = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_DESC',
  INDEXER_BY_INDEXER_ID__METADATA_ASC = 'INDEXER_BY_INDEXER_ID__METADATA_ASC',
  INDEXER_BY_INDEXER_ID__METADATA_DESC = 'INDEXER_BY_INDEXER_ID__METADATA_DESC',
  INDEXER_BY_INDEXER_ID__SELF_STAKE_ASC = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_ASC',
  INDEXER_BY_INDEXER_ID__SELF_STAKE_DESC = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_DESC',
  INDEXER_BY_INDEXER_ID__TOTAL_STAKE_ASC = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_ASC',
  INDEXER_BY_INDEXER_ID__TOTAL_STAKE_DESC = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_DESC',
  INDEXER_ID_ASC = 'INDEXER_ID_ASC',
  INDEXER_ID_DESC = 'INDEXER_ID_DESC',
  NATURAL = 'NATURAL',
  PRIMARY_KEY_ASC = 'PRIMARY_KEY_ASC',
  PRIMARY_KEY_DESC = 'PRIMARY_KEY_DESC',
  UPDATE_AT_ASC = 'UPDATE_AT_ASC',
  UPDATE_AT_DESC = 'UPDATE_AT_DESC',
}

export type EraIndexerDeploymentApy = Node & {
  readonly __typename: 'EraIndexerDeploymentApy';
  readonly agreementReward: Scalars['BigFloat']['output'];
  readonly allocationReward: Scalars['BigFloat']['output'];
  readonly apy: Scalars['BigFloat']['output'];
  readonly apyCalcAdded: Scalars['BigFloat']['output'];
  readonly apyCalcAllocation: Scalars['BigFloat']['output'];
  readonly apyCalcAllocationRecordAt: Scalars['Datetime']['output'];
  readonly apyCalcHistory: Scalars['String']['output'];
  readonly apyCalcRemoval: Scalars['BigFloat']['output'];
  readonly createAt: Scalars['Datetime']['output'];
  /** Reads a single `Deployment` that is related to this `EraIndexerDeploymentApy`. */
  readonly deployment: Maybe<Deployment>;
  readonly deploymentId: Scalars['String']['output'];
  readonly eraIdx: Scalars['Int']['output'];
  readonly flexPlanReward: Scalars['BigFloat']['output'];
  readonly id: Scalars['String']['output'];
  /** Reads a single `Indexer` that is related to this `EraIndexerDeploymentApy`. */
  readonly indexer: Maybe<Indexer>;
  readonly indexerId: Scalars['String']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  readonly nodeId: Scalars['ID']['output'];
  readonly updateAt: Scalars['Datetime']['output'];
};

export type EraIndexerDeploymentApyAggregates = {
  readonly __typename: 'EraIndexerDeploymentApyAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly average: Maybe<EraIndexerDeploymentApyAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly distinctCount: Maybe<EraIndexerDeploymentApyDistinctCountAggregates>;
  readonly keys: Maybe<ReadonlyArray<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly max: Maybe<EraIndexerDeploymentApyMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly min: Maybe<EraIndexerDeploymentApyMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevPopulation: Maybe<EraIndexerDeploymentApyStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevSample: Maybe<EraIndexerDeploymentApyStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly sum: Maybe<EraIndexerDeploymentApySumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly variancePopulation: Maybe<EraIndexerDeploymentApyVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly varianceSample: Maybe<EraIndexerDeploymentApyVarianceSampleAggregates>;
};

/** A filter to be used against aggregates of `EraIndexerDeploymentApy` object types. */
export type EraIndexerDeploymentApyAggregatesFilter = {
  /** Mean average aggregate over matching `EraIndexerDeploymentApy` objects. */
  readonly average: InputMaybe<EraIndexerDeploymentApyAverageAggregateFilter>;
  /** Distinct count aggregate over matching `EraIndexerDeploymentApy` objects. */
  readonly distinctCount: InputMaybe<EraIndexerDeploymentApyDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `EraIndexerDeploymentApy` object to be included within the aggregate. */
  readonly filter: InputMaybe<EraIndexerDeploymentApyFilter>;
  /** Maximum aggregate over matching `EraIndexerDeploymentApy` objects. */
  readonly max: InputMaybe<EraIndexerDeploymentApyMaxAggregateFilter>;
  /** Minimum aggregate over matching `EraIndexerDeploymentApy` objects. */
  readonly min: InputMaybe<EraIndexerDeploymentApyMinAggregateFilter>;
  /** Population standard deviation aggregate over matching `EraIndexerDeploymentApy` objects. */
  readonly stddevPopulation: InputMaybe<EraIndexerDeploymentApyStddevPopulationAggregateFilter>;
  /** Sample standard deviation aggregate over matching `EraIndexerDeploymentApy` objects. */
  readonly stddevSample: InputMaybe<EraIndexerDeploymentApyStddevSampleAggregateFilter>;
  /** Sum aggregate over matching `EraIndexerDeploymentApy` objects. */
  readonly sum: InputMaybe<EraIndexerDeploymentApySumAggregateFilter>;
  /** Population variance aggregate over matching `EraIndexerDeploymentApy` objects. */
  readonly variancePopulation: InputMaybe<EraIndexerDeploymentApyVariancePopulationAggregateFilter>;
  /** Sample variance aggregate over matching `EraIndexerDeploymentApy` objects. */
  readonly varianceSample: InputMaybe<EraIndexerDeploymentApyVarianceSampleAggregateFilter>;
};

export type EraIndexerDeploymentApyAverageAggregateFilter = {
  readonly agreementReward: InputMaybe<BigFloatFilter>;
  readonly allocationReward: InputMaybe<BigFloatFilter>;
  readonly apy: InputMaybe<BigFloatFilter>;
  readonly apyCalcAdded: InputMaybe<BigFloatFilter>;
  readonly apyCalcAllocation: InputMaybe<BigFloatFilter>;
  readonly apyCalcRemoval: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigFloatFilter>;
  readonly flexPlanReward: InputMaybe<BigFloatFilter>;
};

export type EraIndexerDeploymentApyAverageAggregates = {
  readonly __typename: 'EraIndexerDeploymentApyAverageAggregates';
  /** Mean average of agreementReward across the matching connection */
  readonly agreementReward: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of allocationReward across the matching connection */
  readonly allocationReward: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of apy across the matching connection */
  readonly apy: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of apyCalcAdded across the matching connection */
  readonly apyCalcAdded: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of apyCalcAllocation across the matching connection */
  readonly apyCalcAllocation: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of apyCalcRemoval across the matching connection */
  readonly apyCalcRemoval: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of flexPlanReward across the matching connection */
  readonly flexPlanReward: Maybe<Scalars['BigFloat']['output']>;
};

export type EraIndexerDeploymentApyDistinctCountAggregateFilter = {
  readonly _blockRange: InputMaybe<BigIntFilter>;
  readonly _id: InputMaybe<BigIntFilter>;
  readonly agreementReward: InputMaybe<BigIntFilter>;
  readonly allocationReward: InputMaybe<BigIntFilter>;
  readonly apy: InputMaybe<BigIntFilter>;
  readonly apyCalcAdded: InputMaybe<BigIntFilter>;
  readonly apyCalcAllocation: InputMaybe<BigIntFilter>;
  readonly apyCalcAllocationRecordAt: InputMaybe<BigIntFilter>;
  readonly apyCalcHistory: InputMaybe<BigIntFilter>;
  readonly apyCalcRemoval: InputMaybe<BigIntFilter>;
  readonly createAt: InputMaybe<BigIntFilter>;
  readonly deploymentId: InputMaybe<BigIntFilter>;
  readonly eraIdx: InputMaybe<BigIntFilter>;
  readonly flexPlanReward: InputMaybe<BigIntFilter>;
  readonly id: InputMaybe<BigIntFilter>;
  readonly indexerId: InputMaybe<BigIntFilter>;
  readonly updateAt: InputMaybe<BigIntFilter>;
};

export type EraIndexerDeploymentApyDistinctCountAggregates = {
  readonly __typename: 'EraIndexerDeploymentApyDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  readonly _blockRange: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  readonly _id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of agreementReward across the matching connection */
  readonly agreementReward: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of allocationReward across the matching connection */
  readonly allocationReward: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of apy across the matching connection */
  readonly apy: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of apyCalcAdded across the matching connection */
  readonly apyCalcAdded: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of apyCalcAllocation across the matching connection */
  readonly apyCalcAllocation: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of apyCalcAllocationRecordAt across the matching connection */
  readonly apyCalcAllocationRecordAt: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of apyCalcHistory across the matching connection */
  readonly apyCalcHistory: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of apyCalcRemoval across the matching connection */
  readonly apyCalcRemoval: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createAt across the matching connection */
  readonly createAt: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of deploymentId across the matching connection */
  readonly deploymentId: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of flexPlanReward across the matching connection */
  readonly flexPlanReward: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  readonly id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of indexerId across the matching connection */
  readonly indexerId: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of updateAt across the matching connection */
  readonly updateAt: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `EraIndexerDeploymentApy` object types. All fields are combined with a logical ‘and.’ */
export type EraIndexerDeploymentApyFilter = {
  /** Filter by the object’s `agreementReward` field. */
  readonly agreementReward: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `allocationReward` field. */
  readonly allocationReward: InputMaybe<BigFloatFilter>;
  /** Checks for all expressions in this list. */
  readonly and: InputMaybe<ReadonlyArray<EraIndexerDeploymentApyFilter>>;
  /** Filter by the object’s `apy` field. */
  readonly apy: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `apyCalcAdded` field. */
  readonly apyCalcAdded: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `apyCalcAllocation` field. */
  readonly apyCalcAllocation: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `apyCalcAllocationRecordAt` field. */
  readonly apyCalcAllocationRecordAt: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `apyCalcHistory` field. */
  readonly apyCalcHistory: InputMaybe<StringFilter>;
  /** Filter by the object’s `apyCalcRemoval` field. */
  readonly apyCalcRemoval: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `createAt` field. */
  readonly createAt: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `deployment` relation. */
  readonly deployment: InputMaybe<DeploymentFilter>;
  /** Filter by the object’s `deploymentId` field. */
  readonly deploymentId: InputMaybe<StringFilter>;
  /** Filter by the object’s `eraIdx` field. */
  readonly eraIdx: InputMaybe<IntFilter>;
  /** Filter by the object’s `flexPlanReward` field. */
  readonly flexPlanReward: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `id` field. */
  readonly id: InputMaybe<StringFilter>;
  /** Filter by the object’s `indexer` relation. */
  readonly indexer: InputMaybe<IndexerFilter>;
  /** Filter by the object’s `indexerId` field. */
  readonly indexerId: InputMaybe<StringFilter>;
  /** Negates the expression. */
  readonly not: InputMaybe<EraIndexerDeploymentApyFilter>;
  /** Checks for any expressions in this list. */
  readonly or: InputMaybe<ReadonlyArray<EraIndexerDeploymentApyFilter>>;
  /** Filter by the object’s `updateAt` field. */
  readonly updateAt: InputMaybe<DatetimeFilter>;
};

export type EraIndexerDeploymentApyMaxAggregateFilter = {
  readonly agreementReward: InputMaybe<BigFloatFilter>;
  readonly allocationReward: InputMaybe<BigFloatFilter>;
  readonly apy: InputMaybe<BigFloatFilter>;
  readonly apyCalcAdded: InputMaybe<BigFloatFilter>;
  readonly apyCalcAllocation: InputMaybe<BigFloatFilter>;
  readonly apyCalcRemoval: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<IntFilter>;
  readonly flexPlanReward: InputMaybe<BigFloatFilter>;
};

export type EraIndexerDeploymentApyMaxAggregates = {
  readonly __typename: 'EraIndexerDeploymentApyMaxAggregates';
  /** Maximum of agreementReward across the matching connection */
  readonly agreementReward: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of allocationReward across the matching connection */
  readonly allocationReward: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of apy across the matching connection */
  readonly apy: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of apyCalcAdded across the matching connection */
  readonly apyCalcAdded: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of apyCalcAllocation across the matching connection */
  readonly apyCalcAllocation: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of apyCalcRemoval across the matching connection */
  readonly apyCalcRemoval: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['Int']['output']>;
  /** Maximum of flexPlanReward across the matching connection */
  readonly flexPlanReward: Maybe<Scalars['BigFloat']['output']>;
};

export type EraIndexerDeploymentApyMinAggregateFilter = {
  readonly agreementReward: InputMaybe<BigFloatFilter>;
  readonly allocationReward: InputMaybe<BigFloatFilter>;
  readonly apy: InputMaybe<BigFloatFilter>;
  readonly apyCalcAdded: InputMaybe<BigFloatFilter>;
  readonly apyCalcAllocation: InputMaybe<BigFloatFilter>;
  readonly apyCalcRemoval: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<IntFilter>;
  readonly flexPlanReward: InputMaybe<BigFloatFilter>;
};

export type EraIndexerDeploymentApyMinAggregates = {
  readonly __typename: 'EraIndexerDeploymentApyMinAggregates';
  /** Minimum of agreementReward across the matching connection */
  readonly agreementReward: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of allocationReward across the matching connection */
  readonly allocationReward: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of apy across the matching connection */
  readonly apy: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of apyCalcAdded across the matching connection */
  readonly apyCalcAdded: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of apyCalcAllocation across the matching connection */
  readonly apyCalcAllocation: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of apyCalcRemoval across the matching connection */
  readonly apyCalcRemoval: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['Int']['output']>;
  /** Minimum of flexPlanReward across the matching connection */
  readonly flexPlanReward: Maybe<Scalars['BigFloat']['output']>;
};

export type EraIndexerDeploymentApyStddevPopulationAggregateFilter = {
  readonly agreementReward: InputMaybe<BigFloatFilter>;
  readonly allocationReward: InputMaybe<BigFloatFilter>;
  readonly apy: InputMaybe<BigFloatFilter>;
  readonly apyCalcAdded: InputMaybe<BigFloatFilter>;
  readonly apyCalcAllocation: InputMaybe<BigFloatFilter>;
  readonly apyCalcRemoval: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigFloatFilter>;
  readonly flexPlanReward: InputMaybe<BigFloatFilter>;
};

export type EraIndexerDeploymentApyStddevPopulationAggregates = {
  readonly __typename: 'EraIndexerDeploymentApyStddevPopulationAggregates';
  /** Population standard deviation of agreementReward across the matching connection */
  readonly agreementReward: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of allocationReward across the matching connection */
  readonly allocationReward: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of apy across the matching connection */
  readonly apy: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of apyCalcAdded across the matching connection */
  readonly apyCalcAdded: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of apyCalcAllocation across the matching connection */
  readonly apyCalcAllocation: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of apyCalcRemoval across the matching connection */
  readonly apyCalcRemoval: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of flexPlanReward across the matching connection */
  readonly flexPlanReward: Maybe<Scalars['BigFloat']['output']>;
};

export type EraIndexerDeploymentApyStddevSampleAggregateFilter = {
  readonly agreementReward: InputMaybe<BigFloatFilter>;
  readonly allocationReward: InputMaybe<BigFloatFilter>;
  readonly apy: InputMaybe<BigFloatFilter>;
  readonly apyCalcAdded: InputMaybe<BigFloatFilter>;
  readonly apyCalcAllocation: InputMaybe<BigFloatFilter>;
  readonly apyCalcRemoval: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigFloatFilter>;
  readonly flexPlanReward: InputMaybe<BigFloatFilter>;
};

export type EraIndexerDeploymentApyStddevSampleAggregates = {
  readonly __typename: 'EraIndexerDeploymentApyStddevSampleAggregates';
  /** Sample standard deviation of agreementReward across the matching connection */
  readonly agreementReward: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of allocationReward across the matching connection */
  readonly allocationReward: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of apy across the matching connection */
  readonly apy: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of apyCalcAdded across the matching connection */
  readonly apyCalcAdded: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of apyCalcAllocation across the matching connection */
  readonly apyCalcAllocation: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of apyCalcRemoval across the matching connection */
  readonly apyCalcRemoval: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of flexPlanReward across the matching connection */
  readonly flexPlanReward: Maybe<Scalars['BigFloat']['output']>;
};

export type EraIndexerDeploymentApySumAggregateFilter = {
  readonly agreementReward: InputMaybe<BigFloatFilter>;
  readonly allocationReward: InputMaybe<BigFloatFilter>;
  readonly apy: InputMaybe<BigFloatFilter>;
  readonly apyCalcAdded: InputMaybe<BigFloatFilter>;
  readonly apyCalcAllocation: InputMaybe<BigFloatFilter>;
  readonly apyCalcRemoval: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigIntFilter>;
  readonly flexPlanReward: InputMaybe<BigFloatFilter>;
};

export type EraIndexerDeploymentApySumAggregates = {
  readonly __typename: 'EraIndexerDeploymentApySumAggregates';
  /** Sum of agreementReward across the matching connection */
  readonly agreementReward: Scalars['BigFloat']['output'];
  /** Sum of allocationReward across the matching connection */
  readonly allocationReward: Scalars['BigFloat']['output'];
  /** Sum of apy across the matching connection */
  readonly apy: Scalars['BigFloat']['output'];
  /** Sum of apyCalcAdded across the matching connection */
  readonly apyCalcAdded: Scalars['BigFloat']['output'];
  /** Sum of apyCalcAllocation across the matching connection */
  readonly apyCalcAllocation: Scalars['BigFloat']['output'];
  /** Sum of apyCalcRemoval across the matching connection */
  readonly apyCalcRemoval: Scalars['BigFloat']['output'];
  /** Sum of eraIdx across the matching connection */
  readonly eraIdx: Scalars['BigInt']['output'];
  /** Sum of flexPlanReward across the matching connection */
  readonly flexPlanReward: Scalars['BigFloat']['output'];
};

export type EraIndexerDeploymentApyVariancePopulationAggregateFilter = {
  readonly agreementReward: InputMaybe<BigFloatFilter>;
  readonly allocationReward: InputMaybe<BigFloatFilter>;
  readonly apy: InputMaybe<BigFloatFilter>;
  readonly apyCalcAdded: InputMaybe<BigFloatFilter>;
  readonly apyCalcAllocation: InputMaybe<BigFloatFilter>;
  readonly apyCalcRemoval: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigFloatFilter>;
  readonly flexPlanReward: InputMaybe<BigFloatFilter>;
};

export type EraIndexerDeploymentApyVariancePopulationAggregates = {
  readonly __typename: 'EraIndexerDeploymentApyVariancePopulationAggregates';
  /** Population variance of agreementReward across the matching connection */
  readonly agreementReward: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of allocationReward across the matching connection */
  readonly allocationReward: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of apy across the matching connection */
  readonly apy: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of apyCalcAdded across the matching connection */
  readonly apyCalcAdded: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of apyCalcAllocation across the matching connection */
  readonly apyCalcAllocation: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of apyCalcRemoval across the matching connection */
  readonly apyCalcRemoval: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of flexPlanReward across the matching connection */
  readonly flexPlanReward: Maybe<Scalars['BigFloat']['output']>;
};

export type EraIndexerDeploymentApyVarianceSampleAggregateFilter = {
  readonly agreementReward: InputMaybe<BigFloatFilter>;
  readonly allocationReward: InputMaybe<BigFloatFilter>;
  readonly apy: InputMaybe<BigFloatFilter>;
  readonly apyCalcAdded: InputMaybe<BigFloatFilter>;
  readonly apyCalcAllocation: InputMaybe<BigFloatFilter>;
  readonly apyCalcRemoval: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigFloatFilter>;
  readonly flexPlanReward: InputMaybe<BigFloatFilter>;
};

export type EraIndexerDeploymentApyVarianceSampleAggregates = {
  readonly __typename: 'EraIndexerDeploymentApyVarianceSampleAggregates';
  /** Sample variance of agreementReward across the matching connection */
  readonly agreementReward: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of allocationReward across the matching connection */
  readonly allocationReward: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of apy across the matching connection */
  readonly apy: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of apyCalcAdded across the matching connection */
  readonly apyCalcAdded: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of apyCalcAllocation across the matching connection */
  readonly apyCalcAllocation: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of apyCalcRemoval across the matching connection */
  readonly apyCalcRemoval: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of flexPlanReward across the matching connection */
  readonly flexPlanReward: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `Indexer` values, with data from `EraReward`. */
export type EraIndexersByEraRewardEraIdAndIndexerIdManyToManyConnection = {
  readonly __typename: 'EraIndexersByEraRewardEraIdAndIndexerIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<IndexerAggregates>;
  /** A list of edges which contains the `Indexer`, info from the `EraReward`, and the cursor to aid in pagination. */
  readonly edges: ReadonlyArray<EraIndexersByEraRewardEraIdAndIndexerIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<IndexerAggregates>>;
  /** A list of `Indexer` objects. */
  readonly nodes: ReadonlyArray<Maybe<Indexer>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Indexer` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Indexer` values, with data from `EraReward`. */
export type EraIndexersByEraRewardEraIdAndIndexerIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<IndexersGroupBy>;
  having: InputMaybe<IndexersHavingInput>;
};

/** A `Indexer` edge in the connection, with data from `EraReward`. */
export type EraIndexersByEraRewardEraIdAndIndexerIdManyToManyEdge = {
  readonly __typename: 'EraIndexersByEraRewardEraIdAndIndexerIdManyToManyEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `EraReward`. */
  readonly eraRewards: EraRewardsConnection;
  /** The `Indexer` at the end of the edge. */
  readonly node: Maybe<Indexer>;
};

/** A `Indexer` edge in the connection, with data from `EraReward`. */
export type EraIndexersByEraRewardEraIdAndIndexerIdManyToManyEdgeEraRewardsArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Era_Rewards_Distinct_Enum>>>;
  filter: InputMaybe<EraRewardFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<EraRewardsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** A connection to a list of `Indexer` values, with data from `EraStake`. */
export type EraIndexersByEraStakeEraIdAndIndexerIdManyToManyConnection = {
  readonly __typename: 'EraIndexersByEraStakeEraIdAndIndexerIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<IndexerAggregates>;
  /** A list of edges which contains the `Indexer`, info from the `EraStake`, and the cursor to aid in pagination. */
  readonly edges: ReadonlyArray<EraIndexersByEraStakeEraIdAndIndexerIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<IndexerAggregates>>;
  /** A list of `Indexer` objects. */
  readonly nodes: ReadonlyArray<Maybe<Indexer>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Indexer` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Indexer` values, with data from `EraStake`. */
export type EraIndexersByEraStakeEraIdAndIndexerIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<IndexersGroupBy>;
  having: InputMaybe<IndexersHavingInput>;
};

/** A `Indexer` edge in the connection, with data from `EraStake`. */
export type EraIndexersByEraStakeEraIdAndIndexerIdManyToManyEdge = {
  readonly __typename: 'EraIndexersByEraStakeEraIdAndIndexerIdManyToManyEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `EraStake`. */
  readonly eraStakes: EraStakesConnection;
  /** The `Indexer` at the end of the edge. */
  readonly node: Maybe<Indexer>;
};

/** A `Indexer` edge in the connection, with data from `EraStake`. */
export type EraIndexersByEraStakeEraIdAndIndexerIdManyToManyEdgeEraStakesArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Era_Stakes_Distinct_Enum>>>;
  filter: InputMaybe<EraStakeFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<EraStakesOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** A connection to a list of `Indexer` values, with data from `IndexerCommissionRate`. */
export type EraIndexersByIndexerCommissionRateEraIdAndIndexerIdManyToManyConnection = {
  readonly __typename: 'EraIndexersByIndexerCommissionRateEraIdAndIndexerIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<IndexerAggregates>;
  /** A list of edges which contains the `Indexer`, info from the `IndexerCommissionRate`, and the cursor to aid in pagination. */
  readonly edges: ReadonlyArray<EraIndexersByIndexerCommissionRateEraIdAndIndexerIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<IndexerAggregates>>;
  /** A list of `Indexer` objects. */
  readonly nodes: ReadonlyArray<Maybe<Indexer>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Indexer` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Indexer` values, with data from `IndexerCommissionRate`. */
export type EraIndexersByIndexerCommissionRateEraIdAndIndexerIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<IndexersGroupBy>;
  having: InputMaybe<IndexersHavingInput>;
};

/** A `Indexer` edge in the connection, with data from `IndexerCommissionRate`. */
export type EraIndexersByIndexerCommissionRateEraIdAndIndexerIdManyToManyEdge = {
  readonly __typename: 'EraIndexersByIndexerCommissionRateEraIdAndIndexerIdManyToManyEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `IndexerCommissionRate`. */
  readonly indexerCommissionRates: IndexerCommissionRatesConnection;
  /** The `Indexer` at the end of the edge. */
  readonly node: Maybe<Indexer>;
};

/** A `Indexer` edge in the connection, with data from `IndexerCommissionRate`. */
export type EraIndexersByIndexerCommissionRateEraIdAndIndexerIdManyToManyEdgeIndexerCommissionRatesArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Commission_Rates_Distinct_Enum>>>;
  filter: InputMaybe<IndexerCommissionRateFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexerCommissionRatesOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** A connection to a list of `Indexer` values, with data from `IndexerStake`. */
export type EraIndexersByIndexerStakeEraIdAndIndexerIdManyToManyConnection = {
  readonly __typename: 'EraIndexersByIndexerStakeEraIdAndIndexerIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<IndexerAggregates>;
  /** A list of edges which contains the `Indexer`, info from the `IndexerStake`, and the cursor to aid in pagination. */
  readonly edges: ReadonlyArray<EraIndexersByIndexerStakeEraIdAndIndexerIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<IndexerAggregates>>;
  /** A list of `Indexer` objects. */
  readonly nodes: ReadonlyArray<Maybe<Indexer>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Indexer` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Indexer` values, with data from `IndexerStake`. */
export type EraIndexersByIndexerStakeEraIdAndIndexerIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<IndexersGroupBy>;
  having: InputMaybe<IndexersHavingInput>;
};

/** A `Indexer` edge in the connection, with data from `IndexerStake`. */
export type EraIndexersByIndexerStakeEraIdAndIndexerIdManyToManyEdge = {
  readonly __typename: 'EraIndexersByIndexerStakeEraIdAndIndexerIdManyToManyEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `IndexerStake`. */
  readonly indexerStakes: IndexerStakesConnection;
  /** The `Indexer` at the end of the edge. */
  readonly node: Maybe<Indexer>;
};

/** A `Indexer` edge in the connection, with data from `IndexerStake`. */
export type EraIndexersByIndexerStakeEraIdAndIndexerIdManyToManyEdgeIndexerStakesArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Stakes_Distinct_Enum>>>;
  filter: InputMaybe<IndexerStakeFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexerStakesOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type EraMaxAggregates = {
  readonly __typename: 'EraMaxAggregates';
  /** Maximum of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['Int']['output']>;
};

export type EraMinAggregates = {
  readonly __typename: 'EraMinAggregates';
  /** Minimum of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['Int']['output']>;
};

export type EraReward = Node & {
  readonly __typename: 'EraReward';
  readonly amount: Scalars['BigFloat']['output'];
  readonly claimed: Scalars['Boolean']['output'];
  readonly createdBlock: Maybe<Scalars['Int']['output']>;
  readonly createdTimestamp: Scalars['Datetime']['output'];
  /** Reads a single `Delegator` that is related to this `EraReward`. */
  readonly delegator: Maybe<Delegator>;
  readonly delegatorId: Scalars['String']['output'];
  /** Reads a single `Era` that is related to this `EraReward`. */
  readonly era: Maybe<Era>;
  readonly eraId: Scalars['String']['output'];
  readonly eraIdx: Scalars['Int']['output'];
  readonly id: Scalars['String']['output'];
  /** Reads a single `Indexer` that is related to this `EraReward`. */
  readonly indexer: Maybe<Indexer>;
  readonly indexerId: Scalars['String']['output'];
  readonly isCommission: Scalars['Boolean']['output'];
  readonly isIndexer: Scalars['Boolean']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  readonly nodeId: Scalars['ID']['output'];
};

export type EraRewardAggregates = {
  readonly __typename: 'EraRewardAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly average: Maybe<EraRewardAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly distinctCount: Maybe<EraRewardDistinctCountAggregates>;
  readonly keys: Maybe<ReadonlyArray<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly max: Maybe<EraRewardMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly min: Maybe<EraRewardMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevPopulation: Maybe<EraRewardStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevSample: Maybe<EraRewardStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly sum: Maybe<EraRewardSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly variancePopulation: Maybe<EraRewardVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly varianceSample: Maybe<EraRewardVarianceSampleAggregates>;
};

/** A filter to be used against aggregates of `EraReward` object types. */
export type EraRewardAggregatesFilter = {
  /** Mean average aggregate over matching `EraReward` objects. */
  readonly average: InputMaybe<EraRewardAverageAggregateFilter>;
  /** Distinct count aggregate over matching `EraReward` objects. */
  readonly distinctCount: InputMaybe<EraRewardDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `EraReward` object to be included within the aggregate. */
  readonly filter: InputMaybe<EraRewardFilter>;
  /** Maximum aggregate over matching `EraReward` objects. */
  readonly max: InputMaybe<EraRewardMaxAggregateFilter>;
  /** Minimum aggregate over matching `EraReward` objects. */
  readonly min: InputMaybe<EraRewardMinAggregateFilter>;
  /** Population standard deviation aggregate over matching `EraReward` objects. */
  readonly stddevPopulation: InputMaybe<EraRewardStddevPopulationAggregateFilter>;
  /** Sample standard deviation aggregate over matching `EraReward` objects. */
  readonly stddevSample: InputMaybe<EraRewardStddevSampleAggregateFilter>;
  /** Sum aggregate over matching `EraReward` objects. */
  readonly sum: InputMaybe<EraRewardSumAggregateFilter>;
  /** Population variance aggregate over matching `EraReward` objects. */
  readonly variancePopulation: InputMaybe<EraRewardVariancePopulationAggregateFilter>;
  /** Sample variance aggregate over matching `EraReward` objects. */
  readonly varianceSample: InputMaybe<EraRewardVarianceSampleAggregateFilter>;
};

export type EraRewardAverageAggregateFilter = {
  readonly amount: InputMaybe<BigFloatFilter>;
  readonly createdBlock: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigFloatFilter>;
};

export type EraRewardAverageAggregates = {
  readonly __typename: 'EraRewardAverageAggregates';
  /** Mean average of amount across the matching connection */
  readonly amount: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
};

export type EraRewardClaimed = Node & {
  readonly __typename: 'EraRewardClaimed';
  readonly id: Scalars['String']['output'];
  readonly lastClaimedEra: Scalars['Int']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  readonly nodeId: Scalars['ID']['output'];
};

export type EraRewardClaimedAggregates = {
  readonly __typename: 'EraRewardClaimedAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly average: Maybe<EraRewardClaimedAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly distinctCount: Maybe<EraRewardClaimedDistinctCountAggregates>;
  readonly keys: Maybe<ReadonlyArray<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly max: Maybe<EraRewardClaimedMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly min: Maybe<EraRewardClaimedMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevPopulation: Maybe<EraRewardClaimedStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevSample: Maybe<EraRewardClaimedStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly sum: Maybe<EraRewardClaimedSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly variancePopulation: Maybe<EraRewardClaimedVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly varianceSample: Maybe<EraRewardClaimedVarianceSampleAggregates>;
};

export type EraRewardClaimedAverageAggregates = {
  readonly __typename: 'EraRewardClaimedAverageAggregates';
  /** Mean average of lastClaimedEra across the matching connection */
  readonly lastClaimedEra: Maybe<Scalars['BigFloat']['output']>;
};

export type EraRewardClaimedDistinctCountAggregates = {
  readonly __typename: 'EraRewardClaimedDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  readonly _blockRange: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  readonly _id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  readonly id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of lastClaimedEra across the matching connection */
  readonly lastClaimedEra: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `EraRewardClaimed` object types. All fields are combined with a logical ‘and.’ */
export type EraRewardClaimedFilter = {
  /** Checks for all expressions in this list. */
  readonly and: InputMaybe<ReadonlyArray<EraRewardClaimedFilter>>;
  /** Filter by the object’s `id` field. */
  readonly id: InputMaybe<StringFilter>;
  /** Filter by the object’s `lastClaimedEra` field. */
  readonly lastClaimedEra: InputMaybe<IntFilter>;
  /** Negates the expression. */
  readonly not: InputMaybe<EraRewardClaimedFilter>;
  /** Checks for any expressions in this list. */
  readonly or: InputMaybe<ReadonlyArray<EraRewardClaimedFilter>>;
};

export type EraRewardClaimedMaxAggregates = {
  readonly __typename: 'EraRewardClaimedMaxAggregates';
  /** Maximum of lastClaimedEra across the matching connection */
  readonly lastClaimedEra: Maybe<Scalars['Int']['output']>;
};

export type EraRewardClaimedMinAggregates = {
  readonly __typename: 'EraRewardClaimedMinAggregates';
  /** Minimum of lastClaimedEra across the matching connection */
  readonly lastClaimedEra: Maybe<Scalars['Int']['output']>;
};

export type EraRewardClaimedStddevPopulationAggregates = {
  readonly __typename: 'EraRewardClaimedStddevPopulationAggregates';
  /** Population standard deviation of lastClaimedEra across the matching connection */
  readonly lastClaimedEra: Maybe<Scalars['BigFloat']['output']>;
};

export type EraRewardClaimedStddevSampleAggregates = {
  readonly __typename: 'EraRewardClaimedStddevSampleAggregates';
  /** Sample standard deviation of lastClaimedEra across the matching connection */
  readonly lastClaimedEra: Maybe<Scalars['BigFloat']['output']>;
};

export type EraRewardClaimedSumAggregates = {
  readonly __typename: 'EraRewardClaimedSumAggregates';
  /** Sum of lastClaimedEra across the matching connection */
  readonly lastClaimedEra: Scalars['BigInt']['output'];
};

export type EraRewardClaimedVariancePopulationAggregates = {
  readonly __typename: 'EraRewardClaimedVariancePopulationAggregates';
  /** Population variance of lastClaimedEra across the matching connection */
  readonly lastClaimedEra: Maybe<Scalars['BigFloat']['output']>;
};

export type EraRewardClaimedVarianceSampleAggregates = {
  readonly __typename: 'EraRewardClaimedVarianceSampleAggregates';
  /** Sample variance of lastClaimedEra across the matching connection */
  readonly lastClaimedEra: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `EraRewardClaimed` values. */
export type EraRewardClaimedsConnection = {
  readonly __typename: 'EraRewardClaimedsConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<EraRewardClaimedAggregates>;
  /** A list of edges which contains the `EraRewardClaimed` and cursor to aid in pagination. */
  readonly edges: ReadonlyArray<EraRewardClaimedsEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<EraRewardClaimedAggregates>>;
  /** A list of `EraRewardClaimed` objects. */
  readonly nodes: ReadonlyArray<Maybe<EraRewardClaimed>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `EraRewardClaimed` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `EraRewardClaimed` values. */
export type EraRewardClaimedsConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<EraRewardClaimedsGroupBy>;
  having: InputMaybe<EraRewardClaimedsHavingInput>;
};

/** A `EraRewardClaimed` edge in the connection. */
export type EraRewardClaimedsEdge = {
  readonly __typename: 'EraRewardClaimedsEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `EraRewardClaimed` at the end of the edge. */
  readonly node: Maybe<EraRewardClaimed>;
};

/** Grouping methods for `EraRewardClaimed` for usage during aggregation. */
export enum EraRewardClaimedsGroupBy {
  ID = 'ID',
  LAST_CLAIMED_ERA = 'LAST_CLAIMED_ERA',
}

export type EraRewardClaimedsHavingAverageInput = {
  readonly lastClaimedEra: InputMaybe<HavingIntFilter>;
};

export type EraRewardClaimedsHavingDistinctCountInput = {
  readonly lastClaimedEra: InputMaybe<HavingIntFilter>;
};

/** Conditions for `EraRewardClaimed` aggregates. */
export type EraRewardClaimedsHavingInput = {
  readonly AND: InputMaybe<ReadonlyArray<EraRewardClaimedsHavingInput>>;
  readonly OR: InputMaybe<ReadonlyArray<EraRewardClaimedsHavingInput>>;
  readonly average: InputMaybe<EraRewardClaimedsHavingAverageInput>;
  readonly distinctCount: InputMaybe<EraRewardClaimedsHavingDistinctCountInput>;
  readonly max: InputMaybe<EraRewardClaimedsHavingMaxInput>;
  readonly min: InputMaybe<EraRewardClaimedsHavingMinInput>;
  readonly stddevPopulation: InputMaybe<EraRewardClaimedsHavingStddevPopulationInput>;
  readonly stddevSample: InputMaybe<EraRewardClaimedsHavingStddevSampleInput>;
  readonly sum: InputMaybe<EraRewardClaimedsHavingSumInput>;
  readonly variancePopulation: InputMaybe<EraRewardClaimedsHavingVariancePopulationInput>;
  readonly varianceSample: InputMaybe<EraRewardClaimedsHavingVarianceSampleInput>;
};

export type EraRewardClaimedsHavingMaxInput = {
  readonly lastClaimedEra: InputMaybe<HavingIntFilter>;
};

export type EraRewardClaimedsHavingMinInput = {
  readonly lastClaimedEra: InputMaybe<HavingIntFilter>;
};

export type EraRewardClaimedsHavingStddevPopulationInput = {
  readonly lastClaimedEra: InputMaybe<HavingIntFilter>;
};

export type EraRewardClaimedsHavingStddevSampleInput = {
  readonly lastClaimedEra: InputMaybe<HavingIntFilter>;
};

export type EraRewardClaimedsHavingSumInput = {
  readonly lastClaimedEra: InputMaybe<HavingIntFilter>;
};

export type EraRewardClaimedsHavingVariancePopulationInput = {
  readonly lastClaimedEra: InputMaybe<HavingIntFilter>;
};

export type EraRewardClaimedsHavingVarianceSampleInput = {
  readonly lastClaimedEra: InputMaybe<HavingIntFilter>;
};

/** Methods to use when ordering `EraRewardClaimed`. */
export enum EraRewardClaimedsOrderBy {
  ID_ASC = 'ID_ASC',
  ID_DESC = 'ID_DESC',
  LAST_CLAIMED_ERA_ASC = 'LAST_CLAIMED_ERA_ASC',
  LAST_CLAIMED_ERA_DESC = 'LAST_CLAIMED_ERA_DESC',
  NATURAL = 'NATURAL',
  PRIMARY_KEY_ASC = 'PRIMARY_KEY_ASC',
  PRIMARY_KEY_DESC = 'PRIMARY_KEY_DESC',
}

export type EraRewardDistinctCountAggregateFilter = {
  readonly _blockRange: InputMaybe<BigIntFilter>;
  readonly _id: InputMaybe<BigIntFilter>;
  readonly amount: InputMaybe<BigIntFilter>;
  readonly claimed: InputMaybe<BigIntFilter>;
  readonly createdBlock: InputMaybe<BigIntFilter>;
  readonly createdTimestamp: InputMaybe<BigIntFilter>;
  readonly delegatorId: InputMaybe<BigIntFilter>;
  readonly eraId: InputMaybe<BigIntFilter>;
  readonly eraIdx: InputMaybe<BigIntFilter>;
  readonly id: InputMaybe<BigIntFilter>;
  readonly indexerId: InputMaybe<BigIntFilter>;
  readonly isCommission: InputMaybe<BigIntFilter>;
  readonly isIndexer: InputMaybe<BigIntFilter>;
};

export type EraRewardDistinctCountAggregates = {
  readonly __typename: 'EraRewardDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  readonly _blockRange: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  readonly _id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of amount across the matching connection */
  readonly amount: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of claimed across the matching connection */
  readonly claimed: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createdTimestamp across the matching connection */
  readonly createdTimestamp: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of delegatorId across the matching connection */
  readonly delegatorId: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of eraId across the matching connection */
  readonly eraId: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  readonly id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of indexerId across the matching connection */
  readonly indexerId: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of isCommission across the matching connection */
  readonly isCommission: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of isIndexer across the matching connection */
  readonly isIndexer: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `EraReward` object types. All fields are combined with a logical ‘and.’ */
export type EraRewardFilter = {
  /** Filter by the object’s `amount` field. */
  readonly amount: InputMaybe<BigFloatFilter>;
  /** Checks for all expressions in this list. */
  readonly and: InputMaybe<ReadonlyArray<EraRewardFilter>>;
  /** Filter by the object’s `claimed` field. */
  readonly claimed: InputMaybe<BooleanFilter>;
  /** Filter by the object’s `createdBlock` field. */
  readonly createdBlock: InputMaybe<IntFilter>;
  /** Filter by the object’s `createdTimestamp` field. */
  readonly createdTimestamp: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `delegator` relation. */
  readonly delegator: InputMaybe<DelegatorFilter>;
  /** Filter by the object’s `delegatorId` field. */
  readonly delegatorId: InputMaybe<StringFilter>;
  /** Filter by the object’s `era` relation. */
  readonly era: InputMaybe<EraFilter>;
  /** Filter by the object’s `eraId` field. */
  readonly eraId: InputMaybe<StringFilter>;
  /** Filter by the object’s `eraIdx` field. */
  readonly eraIdx: InputMaybe<IntFilter>;
  /** Filter by the object’s `id` field. */
  readonly id: InputMaybe<StringFilter>;
  /** Filter by the object’s `indexer` relation. */
  readonly indexer: InputMaybe<IndexerFilter>;
  /** Filter by the object’s `indexerId` field. */
  readonly indexerId: InputMaybe<StringFilter>;
  /** Filter by the object’s `isCommission` field. */
  readonly isCommission: InputMaybe<BooleanFilter>;
  /** Filter by the object’s `isIndexer` field. */
  readonly isIndexer: InputMaybe<BooleanFilter>;
  /** Negates the expression. */
  readonly not: InputMaybe<EraRewardFilter>;
  /** Checks for any expressions in this list. */
  readonly or: InputMaybe<ReadonlyArray<EraRewardFilter>>;
};

export type EraRewardMaxAggregateFilter = {
  readonly amount: InputMaybe<BigFloatFilter>;
  readonly createdBlock: InputMaybe<IntFilter>;
  readonly eraIdx: InputMaybe<IntFilter>;
};

export type EraRewardMaxAggregates = {
  readonly __typename: 'EraRewardMaxAggregates';
  /** Maximum of amount across the matching connection */
  readonly amount: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['Int']['output']>;
  /** Maximum of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['Int']['output']>;
};

export type EraRewardMinAggregateFilter = {
  readonly amount: InputMaybe<BigFloatFilter>;
  readonly createdBlock: InputMaybe<IntFilter>;
  readonly eraIdx: InputMaybe<IntFilter>;
};

export type EraRewardMinAggregates = {
  readonly __typename: 'EraRewardMinAggregates';
  /** Minimum of amount across the matching connection */
  readonly amount: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['Int']['output']>;
  /** Minimum of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['Int']['output']>;
};

export type EraRewardStddevPopulationAggregateFilter = {
  readonly amount: InputMaybe<BigFloatFilter>;
  readonly createdBlock: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigFloatFilter>;
};

export type EraRewardStddevPopulationAggregates = {
  readonly __typename: 'EraRewardStddevPopulationAggregates';
  /** Population standard deviation of amount across the matching connection */
  readonly amount: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
};

export type EraRewardStddevSampleAggregateFilter = {
  readonly amount: InputMaybe<BigFloatFilter>;
  readonly createdBlock: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigFloatFilter>;
};

export type EraRewardStddevSampleAggregates = {
  readonly __typename: 'EraRewardStddevSampleAggregates';
  /** Sample standard deviation of amount across the matching connection */
  readonly amount: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
};

export type EraRewardSumAggregateFilter = {
  readonly amount: InputMaybe<BigFloatFilter>;
  readonly createdBlock: InputMaybe<BigIntFilter>;
  readonly eraIdx: InputMaybe<BigIntFilter>;
};

export type EraRewardSumAggregates = {
  readonly __typename: 'EraRewardSumAggregates';
  /** Sum of amount across the matching connection */
  readonly amount: Scalars['BigFloat']['output'];
  /** Sum of createdBlock across the matching connection */
  readonly createdBlock: Scalars['BigInt']['output'];
  /** Sum of eraIdx across the matching connection */
  readonly eraIdx: Scalars['BigInt']['output'];
};

export type EraRewardVariancePopulationAggregateFilter = {
  readonly amount: InputMaybe<BigFloatFilter>;
  readonly createdBlock: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigFloatFilter>;
};

export type EraRewardVariancePopulationAggregates = {
  readonly __typename: 'EraRewardVariancePopulationAggregates';
  /** Population variance of amount across the matching connection */
  readonly amount: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
};

export type EraRewardVarianceSampleAggregateFilter = {
  readonly amount: InputMaybe<BigFloatFilter>;
  readonly createdBlock: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigFloatFilter>;
};

export type EraRewardVarianceSampleAggregates = {
  readonly __typename: 'EraRewardVarianceSampleAggregates';
  /** Sample variance of amount across the matching connection */
  readonly amount: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `EraReward` values. */
export type EraRewardsConnection = {
  readonly __typename: 'EraRewardsConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<EraRewardAggregates>;
  /** A list of edges which contains the `EraReward` and cursor to aid in pagination. */
  readonly edges: ReadonlyArray<EraRewardsEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<EraRewardAggregates>>;
  /** A list of `EraReward` objects. */
  readonly nodes: ReadonlyArray<Maybe<EraReward>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `EraReward` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `EraReward` values. */
export type EraRewardsConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<EraRewardsGroupBy>;
  having: InputMaybe<EraRewardsHavingInput>;
};

/** A `EraReward` edge in the connection. */
export type EraRewardsEdge = {
  readonly __typename: 'EraRewardsEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `EraReward` at the end of the edge. */
  readonly node: Maybe<EraReward>;
};

/** Grouping methods for `EraReward` for usage during aggregation. */
export enum EraRewardsGroupBy {
  AMOUNT = 'AMOUNT',
  CLAIMED = 'CLAIMED',
  CREATED_BLOCK = 'CREATED_BLOCK',
  CREATED_TIMESTAMP = 'CREATED_TIMESTAMP',
  CREATED_TIMESTAMP_TRUNCATED_TO_DAY = 'CREATED_TIMESTAMP_TRUNCATED_TO_DAY',
  CREATED_TIMESTAMP_TRUNCATED_TO_HOUR = 'CREATED_TIMESTAMP_TRUNCATED_TO_HOUR',
  DELEGATOR_ID = 'DELEGATOR_ID',
  ERA_ID = 'ERA_ID',
  ERA_IDX = 'ERA_IDX',
  ID = 'ID',
  INDEXER_ID = 'INDEXER_ID',
  IS_COMMISSION = 'IS_COMMISSION',
  IS_INDEXER = 'IS_INDEXER',
}

export type EraRewardsHavingAverageInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly createdTimestamp: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
};

export type EraRewardsHavingDistinctCountInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly createdTimestamp: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
};

/** Conditions for `EraReward` aggregates. */
export type EraRewardsHavingInput = {
  readonly AND: InputMaybe<ReadonlyArray<EraRewardsHavingInput>>;
  readonly OR: InputMaybe<ReadonlyArray<EraRewardsHavingInput>>;
  readonly average: InputMaybe<EraRewardsHavingAverageInput>;
  readonly distinctCount: InputMaybe<EraRewardsHavingDistinctCountInput>;
  readonly max: InputMaybe<EraRewardsHavingMaxInput>;
  readonly min: InputMaybe<EraRewardsHavingMinInput>;
  readonly stddevPopulation: InputMaybe<EraRewardsHavingStddevPopulationInput>;
  readonly stddevSample: InputMaybe<EraRewardsHavingStddevSampleInput>;
  readonly sum: InputMaybe<EraRewardsHavingSumInput>;
  readonly variancePopulation: InputMaybe<EraRewardsHavingVariancePopulationInput>;
  readonly varianceSample: InputMaybe<EraRewardsHavingVarianceSampleInput>;
};

export type EraRewardsHavingMaxInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly createdTimestamp: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
};

export type EraRewardsHavingMinInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly createdTimestamp: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
};

export type EraRewardsHavingStddevPopulationInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly createdTimestamp: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
};

export type EraRewardsHavingStddevSampleInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly createdTimestamp: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
};

export type EraRewardsHavingSumInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly createdTimestamp: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
};

export type EraRewardsHavingVariancePopulationInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly createdTimestamp: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
};

export type EraRewardsHavingVarianceSampleInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly createdTimestamp: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
};

/** Methods to use when ordering `EraReward`. */
export enum EraRewardsOrderBy {
  AMOUNT_ASC = 'AMOUNT_ASC',
  AMOUNT_DESC = 'AMOUNT_DESC',
  CLAIMED_ASC = 'CLAIMED_ASC',
  CLAIMED_DESC = 'CLAIMED_DESC',
  CREATED_BLOCK_ASC = 'CREATED_BLOCK_ASC',
  CREATED_BLOCK_DESC = 'CREATED_BLOCK_DESC',
  CREATED_TIMESTAMP_ASC = 'CREATED_TIMESTAMP_ASC',
  CREATED_TIMESTAMP_DESC = 'CREATED_TIMESTAMP_DESC',
  DELEGATOR_BY_DELEGATOR_ID__CREATED_BLOCK_ASC = 'DELEGATOR_BY_DELEGATOR_ID__CREATED_BLOCK_ASC',
  DELEGATOR_BY_DELEGATOR_ID__CREATED_BLOCK_DESC = 'DELEGATOR_BY_DELEGATOR_ID__CREATED_BLOCK_DESC',
  DELEGATOR_BY_DELEGATOR_ID__EXIT_ERA_ASC = 'DELEGATOR_BY_DELEGATOR_ID__EXIT_ERA_ASC',
  DELEGATOR_BY_DELEGATOR_ID__EXIT_ERA_DESC = 'DELEGATOR_BY_DELEGATOR_ID__EXIT_ERA_DESC',
  DELEGATOR_BY_DELEGATOR_ID__ID_ASC = 'DELEGATOR_BY_DELEGATOR_ID__ID_ASC',
  DELEGATOR_BY_DELEGATOR_ID__ID_DESC = 'DELEGATOR_BY_DELEGATOR_ID__ID_DESC',
  DELEGATOR_BY_DELEGATOR_ID__LAST_EVENT_ASC = 'DELEGATOR_BY_DELEGATOR_ID__LAST_EVENT_ASC',
  DELEGATOR_BY_DELEGATOR_ID__LAST_EVENT_DESC = 'DELEGATOR_BY_DELEGATOR_ID__LAST_EVENT_DESC',
  DELEGATOR_BY_DELEGATOR_ID__START_ERA_ASC = 'DELEGATOR_BY_DELEGATOR_ID__START_ERA_ASC',
  DELEGATOR_BY_DELEGATOR_ID__START_ERA_DESC = 'DELEGATOR_BY_DELEGATOR_ID__START_ERA_DESC',
  DELEGATOR_BY_DELEGATOR_ID__TOTAL_DELEGATIONS_ASC = 'DELEGATOR_BY_DELEGATOR_ID__TOTAL_DELEGATIONS_ASC',
  DELEGATOR_BY_DELEGATOR_ID__TOTAL_DELEGATIONS_DESC = 'DELEGATOR_BY_DELEGATOR_ID__TOTAL_DELEGATIONS_DESC',
  DELEGATOR_ID_ASC = 'DELEGATOR_ID_ASC',
  DELEGATOR_ID_DESC = 'DELEGATOR_ID_DESC',
  ERA_BY_ERA_ID__CREATED_BLOCK_ASC = 'ERA_BY_ERA_ID__CREATED_BLOCK_ASC',
  ERA_BY_ERA_ID__CREATED_BLOCK_DESC = 'ERA_BY_ERA_ID__CREATED_BLOCK_DESC',
  ERA_BY_ERA_ID__END_TIME_ASC = 'ERA_BY_ERA_ID__END_TIME_ASC',
  ERA_BY_ERA_ID__END_TIME_DESC = 'ERA_BY_ERA_ID__END_TIME_DESC',
  ERA_BY_ERA_ID__ERA_PERIOD_ASC = 'ERA_BY_ERA_ID__ERA_PERIOD_ASC',
  ERA_BY_ERA_ID__ERA_PERIOD_DESC = 'ERA_BY_ERA_ID__ERA_PERIOD_DESC',
  ERA_BY_ERA_ID__FORCE_NEXT_ASC = 'ERA_BY_ERA_ID__FORCE_NEXT_ASC',
  ERA_BY_ERA_ID__FORCE_NEXT_DESC = 'ERA_BY_ERA_ID__FORCE_NEXT_DESC',
  ERA_BY_ERA_ID__ID_ASC = 'ERA_BY_ERA_ID__ID_ASC',
  ERA_BY_ERA_ID__ID_DESC = 'ERA_BY_ERA_ID__ID_DESC',
  ERA_BY_ERA_ID__LAST_EVENT_ASC = 'ERA_BY_ERA_ID__LAST_EVENT_ASC',
  ERA_BY_ERA_ID__LAST_EVENT_DESC = 'ERA_BY_ERA_ID__LAST_EVENT_DESC',
  ERA_BY_ERA_ID__START_TIME_ASC = 'ERA_BY_ERA_ID__START_TIME_ASC',
  ERA_BY_ERA_ID__START_TIME_DESC = 'ERA_BY_ERA_ID__START_TIME_DESC',
  ERA_IDX_ASC = 'ERA_IDX_ASC',
  ERA_IDX_DESC = 'ERA_IDX_DESC',
  ERA_ID_ASC = 'ERA_ID_ASC',
  ERA_ID_DESC = 'ERA_ID_DESC',
  ID_ASC = 'ID_ASC',
  ID_DESC = 'ID_DESC',
  INDEXER_BY_INDEXER_ID__ACTIVE_ASC = 'INDEXER_BY_INDEXER_ID__ACTIVE_ASC',
  INDEXER_BY_INDEXER_ID__ACTIVE_DESC = 'INDEXER_BY_INDEXER_ID__ACTIVE_DESC',
  INDEXER_BY_INDEXER_ID__CAPACITY_ASC = 'INDEXER_BY_INDEXER_ID__CAPACITY_ASC',
  INDEXER_BY_INDEXER_ID__CAPACITY_DESC = 'INDEXER_BY_INDEXER_ID__CAPACITY_DESC',
  INDEXER_BY_INDEXER_ID__COMMISSION_ASC = 'INDEXER_BY_INDEXER_ID__COMMISSION_ASC',
  INDEXER_BY_INDEXER_ID__COMMISSION_DESC = 'INDEXER_BY_INDEXER_ID__COMMISSION_DESC',
  INDEXER_BY_INDEXER_ID__CONTROLLER_ASC = 'INDEXER_BY_INDEXER_ID__CONTROLLER_ASC',
  INDEXER_BY_INDEXER_ID__CONTROLLER_DESC = 'INDEXER_BY_INDEXER_ID__CONTROLLER_DESC',
  INDEXER_BY_INDEXER_ID__CREATED_BLOCK_ASC = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_ASC',
  INDEXER_BY_INDEXER_ID__CREATED_BLOCK_DESC = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_DESC',
  INDEXER_BY_INDEXER_ID__ID_ASC = 'INDEXER_BY_INDEXER_ID__ID_ASC',
  INDEXER_BY_INDEXER_ID__ID_DESC = 'INDEXER_BY_INDEXER_ID__ID_DESC',
  INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_ASC = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_ASC',
  INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_DESC = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_DESC',
  INDEXER_BY_INDEXER_ID__LAST_EVENT_ASC = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_ASC',
  INDEXER_BY_INDEXER_ID__LAST_EVENT_DESC = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_DESC',
  INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_ASC = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_ASC',
  INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_DESC = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_DESC',
  INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_ASC = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_ASC',
  INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_DESC = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_DESC',
  INDEXER_BY_INDEXER_ID__METADATA_ASC = 'INDEXER_BY_INDEXER_ID__METADATA_ASC',
  INDEXER_BY_INDEXER_ID__METADATA_DESC = 'INDEXER_BY_INDEXER_ID__METADATA_DESC',
  INDEXER_BY_INDEXER_ID__SELF_STAKE_ASC = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_ASC',
  INDEXER_BY_INDEXER_ID__SELF_STAKE_DESC = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_DESC',
  INDEXER_BY_INDEXER_ID__TOTAL_STAKE_ASC = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_ASC',
  INDEXER_BY_INDEXER_ID__TOTAL_STAKE_DESC = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_DESC',
  INDEXER_ID_ASC = 'INDEXER_ID_ASC',
  INDEXER_ID_DESC = 'INDEXER_ID_DESC',
  IS_COMMISSION_ASC = 'IS_COMMISSION_ASC',
  IS_COMMISSION_DESC = 'IS_COMMISSION_DESC',
  IS_INDEXER_ASC = 'IS_INDEXER_ASC',
  IS_INDEXER_DESC = 'IS_INDEXER_DESC',
  NATURAL = 'NATURAL',
  PRIMARY_KEY_ASC = 'PRIMARY_KEY_ASC',
  PRIMARY_KEY_DESC = 'PRIMARY_KEY_DESC',
}

export type EraStake = Node & {
  readonly __typename: 'EraStake';
  /** Reads a single `Delegator` that is related to this `EraStake`. */
  readonly delegator: Maybe<Delegator>;
  readonly delegatorId: Scalars['String']['output'];
  /** Reads a single `Era` that is related to this `EraStake`. */
  readonly era: Maybe<Era>;
  readonly eraId: Scalars['String']['output'];
  readonly eraIdx: Scalars['Int']['output'];
  readonly id: Scalars['String']['output'];
  /** Reads a single `Indexer` that is related to this `EraStake`. */
  readonly indexer: Maybe<Indexer>;
  readonly indexerId: Scalars['String']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  readonly nodeId: Scalars['ID']['output'];
  readonly stake: Scalars['BigFloat']['output'];
};

export type EraStakeAggregates = {
  readonly __typename: 'EraStakeAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly average: Maybe<EraStakeAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly distinctCount: Maybe<EraStakeDistinctCountAggregates>;
  readonly keys: Maybe<ReadonlyArray<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly max: Maybe<EraStakeMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly min: Maybe<EraStakeMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevPopulation: Maybe<EraStakeStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevSample: Maybe<EraStakeStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly sum: Maybe<EraStakeSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly variancePopulation: Maybe<EraStakeVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly varianceSample: Maybe<EraStakeVarianceSampleAggregates>;
};

/** A filter to be used against aggregates of `EraStake` object types. */
export type EraStakeAggregatesFilter = {
  /** Mean average aggregate over matching `EraStake` objects. */
  readonly average: InputMaybe<EraStakeAverageAggregateFilter>;
  /** Distinct count aggregate over matching `EraStake` objects. */
  readonly distinctCount: InputMaybe<EraStakeDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `EraStake` object to be included within the aggregate. */
  readonly filter: InputMaybe<EraStakeFilter>;
  /** Maximum aggregate over matching `EraStake` objects. */
  readonly max: InputMaybe<EraStakeMaxAggregateFilter>;
  /** Minimum aggregate over matching `EraStake` objects. */
  readonly min: InputMaybe<EraStakeMinAggregateFilter>;
  /** Population standard deviation aggregate over matching `EraStake` objects. */
  readonly stddevPopulation: InputMaybe<EraStakeStddevPopulationAggregateFilter>;
  /** Sample standard deviation aggregate over matching `EraStake` objects. */
  readonly stddevSample: InputMaybe<EraStakeStddevSampleAggregateFilter>;
  /** Sum aggregate over matching `EraStake` objects. */
  readonly sum: InputMaybe<EraStakeSumAggregateFilter>;
  /** Population variance aggregate over matching `EraStake` objects. */
  readonly variancePopulation: InputMaybe<EraStakeVariancePopulationAggregateFilter>;
  /** Sample variance aggregate over matching `EraStake` objects. */
  readonly varianceSample: InputMaybe<EraStakeVarianceSampleAggregateFilter>;
};

export type EraStakeAverageAggregateFilter = {
  readonly eraIdx: InputMaybe<BigFloatFilter>;
  readonly stake: InputMaybe<BigFloatFilter>;
};

export type EraStakeAverageAggregates = {
  readonly __typename: 'EraStakeAverageAggregates';
  /** Mean average of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of stake across the matching connection */
  readonly stake: Maybe<Scalars['BigFloat']['output']>;
};

export type EraStakeDistinctCountAggregateFilter = {
  readonly _blockRange: InputMaybe<BigIntFilter>;
  readonly _id: InputMaybe<BigIntFilter>;
  readonly delegatorId: InputMaybe<BigIntFilter>;
  readonly eraId: InputMaybe<BigIntFilter>;
  readonly eraIdx: InputMaybe<BigIntFilter>;
  readonly id: InputMaybe<BigIntFilter>;
  readonly indexerId: InputMaybe<BigIntFilter>;
  readonly stake: InputMaybe<BigIntFilter>;
};

export type EraStakeDistinctCountAggregates = {
  readonly __typename: 'EraStakeDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  readonly _blockRange: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  readonly _id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of delegatorId across the matching connection */
  readonly delegatorId: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of eraId across the matching connection */
  readonly eraId: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  readonly id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of indexerId across the matching connection */
  readonly indexerId: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of stake across the matching connection */
  readonly stake: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `EraStake` object types. All fields are combined with a logical ‘and.’ */
export type EraStakeFilter = {
  /** Checks for all expressions in this list. */
  readonly and: InputMaybe<ReadonlyArray<EraStakeFilter>>;
  /** Filter by the object’s `delegator` relation. */
  readonly delegator: InputMaybe<DelegatorFilter>;
  /** Filter by the object’s `delegatorId` field. */
  readonly delegatorId: InputMaybe<StringFilter>;
  /** Filter by the object’s `era` relation. */
  readonly era: InputMaybe<EraFilter>;
  /** Filter by the object’s `eraId` field. */
  readonly eraId: InputMaybe<StringFilter>;
  /** Filter by the object’s `eraIdx` field. */
  readonly eraIdx: InputMaybe<IntFilter>;
  /** Filter by the object’s `id` field. */
  readonly id: InputMaybe<StringFilter>;
  /** Filter by the object’s `indexer` relation. */
  readonly indexer: InputMaybe<IndexerFilter>;
  /** Filter by the object’s `indexerId` field. */
  readonly indexerId: InputMaybe<StringFilter>;
  /** Negates the expression. */
  readonly not: InputMaybe<EraStakeFilter>;
  /** Checks for any expressions in this list. */
  readonly or: InputMaybe<ReadonlyArray<EraStakeFilter>>;
  /** Filter by the object’s `stake` field. */
  readonly stake: InputMaybe<BigFloatFilter>;
};

export type EraStakeMaxAggregateFilter = {
  readonly eraIdx: InputMaybe<IntFilter>;
  readonly stake: InputMaybe<BigFloatFilter>;
};

export type EraStakeMaxAggregates = {
  readonly __typename: 'EraStakeMaxAggregates';
  /** Maximum of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['Int']['output']>;
  /** Maximum of stake across the matching connection */
  readonly stake: Maybe<Scalars['BigFloat']['output']>;
};

export type EraStakeMinAggregateFilter = {
  readonly eraIdx: InputMaybe<IntFilter>;
  readonly stake: InputMaybe<BigFloatFilter>;
};

export type EraStakeMinAggregates = {
  readonly __typename: 'EraStakeMinAggregates';
  /** Minimum of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['Int']['output']>;
  /** Minimum of stake across the matching connection */
  readonly stake: Maybe<Scalars['BigFloat']['output']>;
};

export type EraStakeStddevPopulationAggregateFilter = {
  readonly eraIdx: InputMaybe<BigFloatFilter>;
  readonly stake: InputMaybe<BigFloatFilter>;
};

export type EraStakeStddevPopulationAggregates = {
  readonly __typename: 'EraStakeStddevPopulationAggregates';
  /** Population standard deviation of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of stake across the matching connection */
  readonly stake: Maybe<Scalars['BigFloat']['output']>;
};

export type EraStakeStddevSampleAggregateFilter = {
  readonly eraIdx: InputMaybe<BigFloatFilter>;
  readonly stake: InputMaybe<BigFloatFilter>;
};

export type EraStakeStddevSampleAggregates = {
  readonly __typename: 'EraStakeStddevSampleAggregates';
  /** Sample standard deviation of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of stake across the matching connection */
  readonly stake: Maybe<Scalars['BigFloat']['output']>;
};

export type EraStakeSumAggregateFilter = {
  readonly eraIdx: InputMaybe<BigIntFilter>;
  readonly stake: InputMaybe<BigFloatFilter>;
};

export type EraStakeSumAggregates = {
  readonly __typename: 'EraStakeSumAggregates';
  /** Sum of eraIdx across the matching connection */
  readonly eraIdx: Scalars['BigInt']['output'];
  /** Sum of stake across the matching connection */
  readonly stake: Scalars['BigFloat']['output'];
};

export type EraStakeUpdate = Node & {
  readonly __typename: 'EraStakeUpdate';
  readonly id: Scalars['String']['output'];
  /** Reads a single `Era` that is related to this `EraStakeUpdate`. */
  readonly lastUpdateEra: Maybe<Era>;
  readonly lastUpdateEraId: Scalars['String']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  readonly nodeId: Scalars['ID']['output'];
};

export type EraStakeUpdateAggregates = {
  readonly __typename: 'EraStakeUpdateAggregates';
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly distinctCount: Maybe<EraStakeUpdateDistinctCountAggregates>;
  readonly keys: Maybe<ReadonlyArray<Scalars['String']['output']>>;
};

/** A filter to be used against aggregates of `EraStakeUpdate` object types. */
export type EraStakeUpdateAggregatesFilter = {
  /** Distinct count aggregate over matching `EraStakeUpdate` objects. */
  readonly distinctCount: InputMaybe<EraStakeUpdateDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `EraStakeUpdate` object to be included within the aggregate. */
  readonly filter: InputMaybe<EraStakeUpdateFilter>;
};

export type EraStakeUpdateDistinctCountAggregateFilter = {
  readonly _blockRange: InputMaybe<BigIntFilter>;
  readonly _id: InputMaybe<BigIntFilter>;
  readonly id: InputMaybe<BigIntFilter>;
  readonly lastUpdateEraId: InputMaybe<BigIntFilter>;
};

export type EraStakeUpdateDistinctCountAggregates = {
  readonly __typename: 'EraStakeUpdateDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  readonly _blockRange: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  readonly _id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  readonly id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of lastUpdateEraId across the matching connection */
  readonly lastUpdateEraId: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `EraStakeUpdate` object types. All fields are combined with a logical ‘and.’ */
export type EraStakeUpdateFilter = {
  /** Checks for all expressions in this list. */
  readonly and: InputMaybe<ReadonlyArray<EraStakeUpdateFilter>>;
  /** Filter by the object’s `id` field. */
  readonly id: InputMaybe<StringFilter>;
  /** Filter by the object’s `lastUpdateEra` relation. */
  readonly lastUpdateEra: InputMaybe<EraFilter>;
  /** Filter by the object’s `lastUpdateEraId` field. */
  readonly lastUpdateEraId: InputMaybe<StringFilter>;
  /** Negates the expression. */
  readonly not: InputMaybe<EraStakeUpdateFilter>;
  /** Checks for any expressions in this list. */
  readonly or: InputMaybe<ReadonlyArray<EraStakeUpdateFilter>>;
};

/** A connection to a list of `EraStakeUpdate` values. */
export type EraStakeUpdatesConnection = {
  readonly __typename: 'EraStakeUpdatesConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<EraStakeUpdateAggregates>;
  /** A list of edges which contains the `EraStakeUpdate` and cursor to aid in pagination. */
  readonly edges: ReadonlyArray<EraStakeUpdatesEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<EraStakeUpdateAggregates>>;
  /** A list of `EraStakeUpdate` objects. */
  readonly nodes: ReadonlyArray<Maybe<EraStakeUpdate>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `EraStakeUpdate` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `EraStakeUpdate` values. */
export type EraStakeUpdatesConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<EraStakeUpdatesGroupBy>;
  having: InputMaybe<EraStakeUpdatesHavingInput>;
};

/** A `EraStakeUpdate` edge in the connection. */
export type EraStakeUpdatesEdge = {
  readonly __typename: 'EraStakeUpdatesEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `EraStakeUpdate` at the end of the edge. */
  readonly node: Maybe<EraStakeUpdate>;
};

/** Grouping methods for `EraStakeUpdate` for usage during aggregation. */
export enum EraStakeUpdatesGroupBy {
  ID = 'ID',
  LAST_UPDATE_ERA_ID = 'LAST_UPDATE_ERA_ID',
}

/** Conditions for `EraStakeUpdate` aggregates. */
export type EraStakeUpdatesHavingInput = {
  readonly AND: InputMaybe<ReadonlyArray<EraStakeUpdatesHavingInput>>;
  readonly OR: InputMaybe<ReadonlyArray<EraStakeUpdatesHavingInput>>;
};

/** Methods to use when ordering `EraStakeUpdate`. */
export enum EraStakeUpdatesOrderBy {
  ERA_BY_LAST_UPDATE_ERA_ID__CREATED_BLOCK_ASC = 'ERA_BY_LAST_UPDATE_ERA_ID__CREATED_BLOCK_ASC',
  ERA_BY_LAST_UPDATE_ERA_ID__CREATED_BLOCK_DESC = 'ERA_BY_LAST_UPDATE_ERA_ID__CREATED_BLOCK_DESC',
  ERA_BY_LAST_UPDATE_ERA_ID__END_TIME_ASC = 'ERA_BY_LAST_UPDATE_ERA_ID__END_TIME_ASC',
  ERA_BY_LAST_UPDATE_ERA_ID__END_TIME_DESC = 'ERA_BY_LAST_UPDATE_ERA_ID__END_TIME_DESC',
  ERA_BY_LAST_UPDATE_ERA_ID__ERA_PERIOD_ASC = 'ERA_BY_LAST_UPDATE_ERA_ID__ERA_PERIOD_ASC',
  ERA_BY_LAST_UPDATE_ERA_ID__ERA_PERIOD_DESC = 'ERA_BY_LAST_UPDATE_ERA_ID__ERA_PERIOD_DESC',
  ERA_BY_LAST_UPDATE_ERA_ID__FORCE_NEXT_ASC = 'ERA_BY_LAST_UPDATE_ERA_ID__FORCE_NEXT_ASC',
  ERA_BY_LAST_UPDATE_ERA_ID__FORCE_NEXT_DESC = 'ERA_BY_LAST_UPDATE_ERA_ID__FORCE_NEXT_DESC',
  ERA_BY_LAST_UPDATE_ERA_ID__ID_ASC = 'ERA_BY_LAST_UPDATE_ERA_ID__ID_ASC',
  ERA_BY_LAST_UPDATE_ERA_ID__ID_DESC = 'ERA_BY_LAST_UPDATE_ERA_ID__ID_DESC',
  ERA_BY_LAST_UPDATE_ERA_ID__LAST_EVENT_ASC = 'ERA_BY_LAST_UPDATE_ERA_ID__LAST_EVENT_ASC',
  ERA_BY_LAST_UPDATE_ERA_ID__LAST_EVENT_DESC = 'ERA_BY_LAST_UPDATE_ERA_ID__LAST_EVENT_DESC',
  ERA_BY_LAST_UPDATE_ERA_ID__START_TIME_ASC = 'ERA_BY_LAST_UPDATE_ERA_ID__START_TIME_ASC',
  ERA_BY_LAST_UPDATE_ERA_ID__START_TIME_DESC = 'ERA_BY_LAST_UPDATE_ERA_ID__START_TIME_DESC',
  ID_ASC = 'ID_ASC',
  ID_DESC = 'ID_DESC',
  LAST_UPDATE_ERA_ID_ASC = 'LAST_UPDATE_ERA_ID_ASC',
  LAST_UPDATE_ERA_ID_DESC = 'LAST_UPDATE_ERA_ID_DESC',
  NATURAL = 'NATURAL',
  PRIMARY_KEY_ASC = 'PRIMARY_KEY_ASC',
  PRIMARY_KEY_DESC = 'PRIMARY_KEY_DESC',
}

export type EraStakeVariancePopulationAggregateFilter = {
  readonly eraIdx: InputMaybe<BigFloatFilter>;
  readonly stake: InputMaybe<BigFloatFilter>;
};

export type EraStakeVariancePopulationAggregates = {
  readonly __typename: 'EraStakeVariancePopulationAggregates';
  /** Population variance of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of stake across the matching connection */
  readonly stake: Maybe<Scalars['BigFloat']['output']>;
};

export type EraStakeVarianceSampleAggregateFilter = {
  readonly eraIdx: InputMaybe<BigFloatFilter>;
  readonly stake: InputMaybe<BigFloatFilter>;
};

export type EraStakeVarianceSampleAggregates = {
  readonly __typename: 'EraStakeVarianceSampleAggregates';
  /** Sample variance of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of stake across the matching connection */
  readonly stake: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `EraStake` values. */
export type EraStakesConnection = {
  readonly __typename: 'EraStakesConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<EraStakeAggregates>;
  /** A list of edges which contains the `EraStake` and cursor to aid in pagination. */
  readonly edges: ReadonlyArray<EraStakesEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<EraStakeAggregates>>;
  /** A list of `EraStake` objects. */
  readonly nodes: ReadonlyArray<Maybe<EraStake>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `EraStake` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `EraStake` values. */
export type EraStakesConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<EraStakesGroupBy>;
  having: InputMaybe<EraStakesHavingInput>;
};

/** A `EraStake` edge in the connection. */
export type EraStakesEdge = {
  readonly __typename: 'EraStakesEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `EraStake` at the end of the edge. */
  readonly node: Maybe<EraStake>;
};

/** Grouping methods for `EraStake` for usage during aggregation. */
export enum EraStakesGroupBy {
  DELEGATOR_ID = 'DELEGATOR_ID',
  ERA_ID = 'ERA_ID',
  ERA_IDX = 'ERA_IDX',
  ID = 'ID',
  INDEXER_ID = 'INDEXER_ID',
  STAKE = 'STAKE',
}

export type EraStakesHavingAverageInput = {
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly stake: InputMaybe<HavingBigfloatFilter>;
};

export type EraStakesHavingDistinctCountInput = {
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly stake: InputMaybe<HavingBigfloatFilter>;
};

/** Conditions for `EraStake` aggregates. */
export type EraStakesHavingInput = {
  readonly AND: InputMaybe<ReadonlyArray<EraStakesHavingInput>>;
  readonly OR: InputMaybe<ReadonlyArray<EraStakesHavingInput>>;
  readonly average: InputMaybe<EraStakesHavingAverageInput>;
  readonly distinctCount: InputMaybe<EraStakesHavingDistinctCountInput>;
  readonly max: InputMaybe<EraStakesHavingMaxInput>;
  readonly min: InputMaybe<EraStakesHavingMinInput>;
  readonly stddevPopulation: InputMaybe<EraStakesHavingStddevPopulationInput>;
  readonly stddevSample: InputMaybe<EraStakesHavingStddevSampleInput>;
  readonly sum: InputMaybe<EraStakesHavingSumInput>;
  readonly variancePopulation: InputMaybe<EraStakesHavingVariancePopulationInput>;
  readonly varianceSample: InputMaybe<EraStakesHavingVarianceSampleInput>;
};

export type EraStakesHavingMaxInput = {
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly stake: InputMaybe<HavingBigfloatFilter>;
};

export type EraStakesHavingMinInput = {
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly stake: InputMaybe<HavingBigfloatFilter>;
};

export type EraStakesHavingStddevPopulationInput = {
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly stake: InputMaybe<HavingBigfloatFilter>;
};

export type EraStakesHavingStddevSampleInput = {
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly stake: InputMaybe<HavingBigfloatFilter>;
};

export type EraStakesHavingSumInput = {
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly stake: InputMaybe<HavingBigfloatFilter>;
};

export type EraStakesHavingVariancePopulationInput = {
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly stake: InputMaybe<HavingBigfloatFilter>;
};

export type EraStakesHavingVarianceSampleInput = {
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly stake: InputMaybe<HavingBigfloatFilter>;
};

/** Methods to use when ordering `EraStake`. */
export enum EraStakesOrderBy {
  DELEGATOR_BY_DELEGATOR_ID__CREATED_BLOCK_ASC = 'DELEGATOR_BY_DELEGATOR_ID__CREATED_BLOCK_ASC',
  DELEGATOR_BY_DELEGATOR_ID__CREATED_BLOCK_DESC = 'DELEGATOR_BY_DELEGATOR_ID__CREATED_BLOCK_DESC',
  DELEGATOR_BY_DELEGATOR_ID__EXIT_ERA_ASC = 'DELEGATOR_BY_DELEGATOR_ID__EXIT_ERA_ASC',
  DELEGATOR_BY_DELEGATOR_ID__EXIT_ERA_DESC = 'DELEGATOR_BY_DELEGATOR_ID__EXIT_ERA_DESC',
  DELEGATOR_BY_DELEGATOR_ID__ID_ASC = 'DELEGATOR_BY_DELEGATOR_ID__ID_ASC',
  DELEGATOR_BY_DELEGATOR_ID__ID_DESC = 'DELEGATOR_BY_DELEGATOR_ID__ID_DESC',
  DELEGATOR_BY_DELEGATOR_ID__LAST_EVENT_ASC = 'DELEGATOR_BY_DELEGATOR_ID__LAST_EVENT_ASC',
  DELEGATOR_BY_DELEGATOR_ID__LAST_EVENT_DESC = 'DELEGATOR_BY_DELEGATOR_ID__LAST_EVENT_DESC',
  DELEGATOR_BY_DELEGATOR_ID__START_ERA_ASC = 'DELEGATOR_BY_DELEGATOR_ID__START_ERA_ASC',
  DELEGATOR_BY_DELEGATOR_ID__START_ERA_DESC = 'DELEGATOR_BY_DELEGATOR_ID__START_ERA_DESC',
  DELEGATOR_BY_DELEGATOR_ID__TOTAL_DELEGATIONS_ASC = 'DELEGATOR_BY_DELEGATOR_ID__TOTAL_DELEGATIONS_ASC',
  DELEGATOR_BY_DELEGATOR_ID__TOTAL_DELEGATIONS_DESC = 'DELEGATOR_BY_DELEGATOR_ID__TOTAL_DELEGATIONS_DESC',
  DELEGATOR_ID_ASC = 'DELEGATOR_ID_ASC',
  DELEGATOR_ID_DESC = 'DELEGATOR_ID_DESC',
  ERA_BY_ERA_ID__CREATED_BLOCK_ASC = 'ERA_BY_ERA_ID__CREATED_BLOCK_ASC',
  ERA_BY_ERA_ID__CREATED_BLOCK_DESC = 'ERA_BY_ERA_ID__CREATED_BLOCK_DESC',
  ERA_BY_ERA_ID__END_TIME_ASC = 'ERA_BY_ERA_ID__END_TIME_ASC',
  ERA_BY_ERA_ID__END_TIME_DESC = 'ERA_BY_ERA_ID__END_TIME_DESC',
  ERA_BY_ERA_ID__ERA_PERIOD_ASC = 'ERA_BY_ERA_ID__ERA_PERIOD_ASC',
  ERA_BY_ERA_ID__ERA_PERIOD_DESC = 'ERA_BY_ERA_ID__ERA_PERIOD_DESC',
  ERA_BY_ERA_ID__FORCE_NEXT_ASC = 'ERA_BY_ERA_ID__FORCE_NEXT_ASC',
  ERA_BY_ERA_ID__FORCE_NEXT_DESC = 'ERA_BY_ERA_ID__FORCE_NEXT_DESC',
  ERA_BY_ERA_ID__ID_ASC = 'ERA_BY_ERA_ID__ID_ASC',
  ERA_BY_ERA_ID__ID_DESC = 'ERA_BY_ERA_ID__ID_DESC',
  ERA_BY_ERA_ID__LAST_EVENT_ASC = 'ERA_BY_ERA_ID__LAST_EVENT_ASC',
  ERA_BY_ERA_ID__LAST_EVENT_DESC = 'ERA_BY_ERA_ID__LAST_EVENT_DESC',
  ERA_BY_ERA_ID__START_TIME_ASC = 'ERA_BY_ERA_ID__START_TIME_ASC',
  ERA_BY_ERA_ID__START_TIME_DESC = 'ERA_BY_ERA_ID__START_TIME_DESC',
  ERA_IDX_ASC = 'ERA_IDX_ASC',
  ERA_IDX_DESC = 'ERA_IDX_DESC',
  ERA_ID_ASC = 'ERA_ID_ASC',
  ERA_ID_DESC = 'ERA_ID_DESC',
  ID_ASC = 'ID_ASC',
  ID_DESC = 'ID_DESC',
  INDEXER_BY_INDEXER_ID__ACTIVE_ASC = 'INDEXER_BY_INDEXER_ID__ACTIVE_ASC',
  INDEXER_BY_INDEXER_ID__ACTIVE_DESC = 'INDEXER_BY_INDEXER_ID__ACTIVE_DESC',
  INDEXER_BY_INDEXER_ID__CAPACITY_ASC = 'INDEXER_BY_INDEXER_ID__CAPACITY_ASC',
  INDEXER_BY_INDEXER_ID__CAPACITY_DESC = 'INDEXER_BY_INDEXER_ID__CAPACITY_DESC',
  INDEXER_BY_INDEXER_ID__COMMISSION_ASC = 'INDEXER_BY_INDEXER_ID__COMMISSION_ASC',
  INDEXER_BY_INDEXER_ID__COMMISSION_DESC = 'INDEXER_BY_INDEXER_ID__COMMISSION_DESC',
  INDEXER_BY_INDEXER_ID__CONTROLLER_ASC = 'INDEXER_BY_INDEXER_ID__CONTROLLER_ASC',
  INDEXER_BY_INDEXER_ID__CONTROLLER_DESC = 'INDEXER_BY_INDEXER_ID__CONTROLLER_DESC',
  INDEXER_BY_INDEXER_ID__CREATED_BLOCK_ASC = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_ASC',
  INDEXER_BY_INDEXER_ID__CREATED_BLOCK_DESC = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_DESC',
  INDEXER_BY_INDEXER_ID__ID_ASC = 'INDEXER_BY_INDEXER_ID__ID_ASC',
  INDEXER_BY_INDEXER_ID__ID_DESC = 'INDEXER_BY_INDEXER_ID__ID_DESC',
  INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_ASC = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_ASC',
  INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_DESC = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_DESC',
  INDEXER_BY_INDEXER_ID__LAST_EVENT_ASC = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_ASC',
  INDEXER_BY_INDEXER_ID__LAST_EVENT_DESC = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_DESC',
  INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_ASC = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_ASC',
  INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_DESC = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_DESC',
  INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_ASC = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_ASC',
  INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_DESC = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_DESC',
  INDEXER_BY_INDEXER_ID__METADATA_ASC = 'INDEXER_BY_INDEXER_ID__METADATA_ASC',
  INDEXER_BY_INDEXER_ID__METADATA_DESC = 'INDEXER_BY_INDEXER_ID__METADATA_DESC',
  INDEXER_BY_INDEXER_ID__SELF_STAKE_ASC = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_ASC',
  INDEXER_BY_INDEXER_ID__SELF_STAKE_DESC = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_DESC',
  INDEXER_BY_INDEXER_ID__TOTAL_STAKE_ASC = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_ASC',
  INDEXER_BY_INDEXER_ID__TOTAL_STAKE_DESC = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_DESC',
  INDEXER_ID_ASC = 'INDEXER_ID_ASC',
  INDEXER_ID_DESC = 'INDEXER_ID_DESC',
  NATURAL = 'NATURAL',
  PRIMARY_KEY_ASC = 'PRIMARY_KEY_ASC',
  PRIMARY_KEY_DESC = 'PRIMARY_KEY_DESC',
  STAKE_ASC = 'STAKE_ASC',
  STAKE_DESC = 'STAKE_DESC',
}

export type EraStddevPopulationAggregates = {
  readonly __typename: 'EraStddevPopulationAggregates';
  /** Population standard deviation of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
};

export type EraStddevSampleAggregates = {
  readonly __typename: 'EraStddevSampleAggregates';
  /** Sample standard deviation of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
};

export type EraSumAggregates = {
  readonly __typename: 'EraSumAggregates';
  /** Sum of createdBlock across the matching connection */
  readonly createdBlock: Scalars['BigInt']['output'];
};

/** A filter to be used against many `EraReward` object types. All fields are combined with a logical ‘and.’ */
export type EraToManyEraRewardFilter = {
  /** Aggregates across related `EraReward` match the filter criteria. */
  readonly aggregates: InputMaybe<EraRewardAggregatesFilter>;
  /** Every related `EraReward` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly every: InputMaybe<EraRewardFilter>;
  /** No related `EraReward` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly none: InputMaybe<EraRewardFilter>;
  /** Some related `EraReward` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly some: InputMaybe<EraRewardFilter>;
};

/** A filter to be used against many `EraStake` object types. All fields are combined with a logical ‘and.’ */
export type EraToManyEraStakeFilter = {
  /** Aggregates across related `EraStake` match the filter criteria. */
  readonly aggregates: InputMaybe<EraStakeAggregatesFilter>;
  /** Every related `EraStake` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly every: InputMaybe<EraStakeFilter>;
  /** No related `EraStake` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly none: InputMaybe<EraStakeFilter>;
  /** Some related `EraStake` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly some: InputMaybe<EraStakeFilter>;
};

/** A filter to be used against many `EraStakeUpdate` object types. All fields are combined with a logical ‘and.’ */
export type EraToManyEraStakeUpdateFilter = {
  /** Aggregates across related `EraStakeUpdate` match the filter criteria. */
  readonly aggregates: InputMaybe<EraStakeUpdateAggregatesFilter>;
  /** Every related `EraStakeUpdate` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly every: InputMaybe<EraStakeUpdateFilter>;
  /** No related `EraStakeUpdate` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly none: InputMaybe<EraStakeUpdateFilter>;
  /** Some related `EraStakeUpdate` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly some: InputMaybe<EraStakeUpdateFilter>;
};

/** A filter to be used against many `IndexerCommissionRate` object types. All fields are combined with a logical ‘and.’ */
export type EraToManyIndexerCommissionRateFilter = {
  /** Aggregates across related `IndexerCommissionRate` match the filter criteria. */
  readonly aggregates: InputMaybe<IndexerCommissionRateAggregatesFilter>;
  /** Every related `IndexerCommissionRate` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly every: InputMaybe<IndexerCommissionRateFilter>;
  /** No related `IndexerCommissionRate` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly none: InputMaybe<IndexerCommissionRateFilter>;
  /** Some related `IndexerCommissionRate` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly some: InputMaybe<IndexerCommissionRateFilter>;
};

/** A filter to be used against many `IndexerStake` object types. All fields are combined with a logical ‘and.’ */
export type EraToManyIndexerStakeFilter = {
  /** Aggregates across related `IndexerStake` match the filter criteria. */
  readonly aggregates: InputMaybe<IndexerStakeAggregatesFilter>;
  /** Every related `IndexerStake` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly every: InputMaybe<IndexerStakeFilter>;
  /** No related `IndexerStake` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly none: InputMaybe<IndexerStakeFilter>;
  /** Some related `IndexerStake` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly some: InputMaybe<IndexerStakeFilter>;
};

/** A filter to be used against many `IndexerStakeSummary` object types. All fields are combined with a logical ‘and.’ */
export type EraToManyIndexerStakeSummaryFilter = {
  /** Aggregates across related `IndexerStakeSummary` match the filter criteria. */
  readonly aggregates: InputMaybe<IndexerStakeSummaryAggregatesFilter>;
  /** Every related `IndexerStakeSummary` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly every: InputMaybe<IndexerStakeSummaryFilter>;
  /** No related `IndexerStakeSummary` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly none: InputMaybe<IndexerStakeSummaryFilter>;
  /** Some related `IndexerStakeSummary` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly some: InputMaybe<IndexerStakeSummaryFilter>;
};

export type EraVariancePopulationAggregates = {
  readonly __typename: 'EraVariancePopulationAggregates';
  /** Population variance of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
};

export type EraVarianceSampleAggregates = {
  readonly __typename: 'EraVarianceSampleAggregates';
  /** Sample variance of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `Era` values. */
export type ErasConnection = {
  readonly __typename: 'ErasConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<EraAggregates>;
  /** A list of edges which contains the `Era` and cursor to aid in pagination. */
  readonly edges: ReadonlyArray<ErasEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<EraAggregates>>;
  /** A list of `Era` objects. */
  readonly nodes: ReadonlyArray<Maybe<Era>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Era` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Era` values. */
export type ErasConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<ErasGroupBy>;
  having: InputMaybe<ErasHavingInput>;
};

/** A `Era` edge in the connection. */
export type ErasEdge = {
  readonly __typename: 'ErasEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `Era` at the end of the edge. */
  readonly node: Maybe<Era>;
};

/** Grouping methods for `Era` for usage during aggregation. */
export enum ErasGroupBy {
  CREATED_BLOCK = 'CREATED_BLOCK',
  END_TIME = 'END_TIME',
  END_TIME_TRUNCATED_TO_DAY = 'END_TIME_TRUNCATED_TO_DAY',
  END_TIME_TRUNCATED_TO_HOUR = 'END_TIME_TRUNCATED_TO_HOUR',
  ERA_PERIOD = 'ERA_PERIOD',
  FORCE_NEXT = 'FORCE_NEXT',
  ID = 'ID',
  LAST_EVENT = 'LAST_EVENT',
  START_TIME = 'START_TIME',
  START_TIME_TRUNCATED_TO_DAY = 'START_TIME_TRUNCATED_TO_DAY',
  START_TIME_TRUNCATED_TO_HOUR = 'START_TIME_TRUNCATED_TO_HOUR',
}

export type ErasHavingAverageInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly endTime: InputMaybe<HavingDatetimeFilter>;
  readonly startTime: InputMaybe<HavingDatetimeFilter>;
};

export type ErasHavingDistinctCountInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly endTime: InputMaybe<HavingDatetimeFilter>;
  readonly startTime: InputMaybe<HavingDatetimeFilter>;
};

/** Conditions for `Era` aggregates. */
export type ErasHavingInput = {
  readonly AND: InputMaybe<ReadonlyArray<ErasHavingInput>>;
  readonly OR: InputMaybe<ReadonlyArray<ErasHavingInput>>;
  readonly average: InputMaybe<ErasHavingAverageInput>;
  readonly distinctCount: InputMaybe<ErasHavingDistinctCountInput>;
  readonly max: InputMaybe<ErasHavingMaxInput>;
  readonly min: InputMaybe<ErasHavingMinInput>;
  readonly stddevPopulation: InputMaybe<ErasHavingStddevPopulationInput>;
  readonly stddevSample: InputMaybe<ErasHavingStddevSampleInput>;
  readonly sum: InputMaybe<ErasHavingSumInput>;
  readonly variancePopulation: InputMaybe<ErasHavingVariancePopulationInput>;
  readonly varianceSample: InputMaybe<ErasHavingVarianceSampleInput>;
};

export type ErasHavingMaxInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly endTime: InputMaybe<HavingDatetimeFilter>;
  readonly startTime: InputMaybe<HavingDatetimeFilter>;
};

export type ErasHavingMinInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly endTime: InputMaybe<HavingDatetimeFilter>;
  readonly startTime: InputMaybe<HavingDatetimeFilter>;
};

export type ErasHavingStddevPopulationInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly endTime: InputMaybe<HavingDatetimeFilter>;
  readonly startTime: InputMaybe<HavingDatetimeFilter>;
};

export type ErasHavingStddevSampleInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly endTime: InputMaybe<HavingDatetimeFilter>;
  readonly startTime: InputMaybe<HavingDatetimeFilter>;
};

export type ErasHavingSumInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly endTime: InputMaybe<HavingDatetimeFilter>;
  readonly startTime: InputMaybe<HavingDatetimeFilter>;
};

export type ErasHavingVariancePopulationInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly endTime: InputMaybe<HavingDatetimeFilter>;
  readonly startTime: InputMaybe<HavingDatetimeFilter>;
};

export type ErasHavingVarianceSampleInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly endTime: InputMaybe<HavingDatetimeFilter>;
  readonly startTime: InputMaybe<HavingDatetimeFilter>;
};

/** Methods to use when ordering `Era`. */
export enum ErasOrderBy {
  CREATED_BLOCK_ASC = 'CREATED_BLOCK_ASC',
  CREATED_BLOCK_DESC = 'CREATED_BLOCK_DESC',
  END_TIME_ASC = 'END_TIME_ASC',
  END_TIME_DESC = 'END_TIME_DESC',
  ERA_PERIOD_ASC = 'ERA_PERIOD_ASC',
  ERA_PERIOD_DESC = 'ERA_PERIOD_DESC',
  ERA_REWARDS_AVERAGE_AMOUNT_ASC = 'ERA_REWARDS_AVERAGE_AMOUNT_ASC',
  ERA_REWARDS_AVERAGE_AMOUNT_DESC = 'ERA_REWARDS_AVERAGE_AMOUNT_DESC',
  ERA_REWARDS_AVERAGE_BLOCK_RANGE_ASC = 'ERA_REWARDS_AVERAGE_BLOCK_RANGE_ASC',
  ERA_REWARDS_AVERAGE_BLOCK_RANGE_DESC = 'ERA_REWARDS_AVERAGE_BLOCK_RANGE_DESC',
  ERA_REWARDS_AVERAGE_CLAIMED_ASC = 'ERA_REWARDS_AVERAGE_CLAIMED_ASC',
  ERA_REWARDS_AVERAGE_CLAIMED_DESC = 'ERA_REWARDS_AVERAGE_CLAIMED_DESC',
  ERA_REWARDS_AVERAGE_CREATED_BLOCK_ASC = 'ERA_REWARDS_AVERAGE_CREATED_BLOCK_ASC',
  ERA_REWARDS_AVERAGE_CREATED_BLOCK_DESC = 'ERA_REWARDS_AVERAGE_CREATED_BLOCK_DESC',
  ERA_REWARDS_AVERAGE_CREATED_TIMESTAMP_ASC = 'ERA_REWARDS_AVERAGE_CREATED_TIMESTAMP_ASC',
  ERA_REWARDS_AVERAGE_CREATED_TIMESTAMP_DESC = 'ERA_REWARDS_AVERAGE_CREATED_TIMESTAMP_DESC',
  ERA_REWARDS_AVERAGE_DELEGATOR_ID_ASC = 'ERA_REWARDS_AVERAGE_DELEGATOR_ID_ASC',
  ERA_REWARDS_AVERAGE_DELEGATOR_ID_DESC = 'ERA_REWARDS_AVERAGE_DELEGATOR_ID_DESC',
  ERA_REWARDS_AVERAGE_ERA_IDX_ASC = 'ERA_REWARDS_AVERAGE_ERA_IDX_ASC',
  ERA_REWARDS_AVERAGE_ERA_IDX_DESC = 'ERA_REWARDS_AVERAGE_ERA_IDX_DESC',
  ERA_REWARDS_AVERAGE_ERA_ID_ASC = 'ERA_REWARDS_AVERAGE_ERA_ID_ASC',
  ERA_REWARDS_AVERAGE_ERA_ID_DESC = 'ERA_REWARDS_AVERAGE_ERA_ID_DESC',
  ERA_REWARDS_AVERAGE_ID_ASC = 'ERA_REWARDS_AVERAGE_ID_ASC',
  ERA_REWARDS_AVERAGE_ID_DESC = 'ERA_REWARDS_AVERAGE_ID_DESC',
  ERA_REWARDS_AVERAGE_INDEXER_ID_ASC = 'ERA_REWARDS_AVERAGE_INDEXER_ID_ASC',
  ERA_REWARDS_AVERAGE_INDEXER_ID_DESC = 'ERA_REWARDS_AVERAGE_INDEXER_ID_DESC',
  ERA_REWARDS_AVERAGE_IS_COMMISSION_ASC = 'ERA_REWARDS_AVERAGE_IS_COMMISSION_ASC',
  ERA_REWARDS_AVERAGE_IS_COMMISSION_DESC = 'ERA_REWARDS_AVERAGE_IS_COMMISSION_DESC',
  ERA_REWARDS_AVERAGE_IS_INDEXER_ASC = 'ERA_REWARDS_AVERAGE_IS_INDEXER_ASC',
  ERA_REWARDS_AVERAGE_IS_INDEXER_DESC = 'ERA_REWARDS_AVERAGE_IS_INDEXER_DESC',
  ERA_REWARDS_BY_ERA_ID__COUNT_ASC = 'ERA_REWARDS_BY_ERA_ID__COUNT_ASC',
  ERA_REWARDS_BY_ERA_ID__COUNT_DESC = 'ERA_REWARDS_BY_ERA_ID__COUNT_DESC',
  ERA_REWARDS_COUNT_ASC = 'ERA_REWARDS_COUNT_ASC',
  ERA_REWARDS_COUNT_DESC = 'ERA_REWARDS_COUNT_DESC',
  ERA_REWARDS_DISTINCT_COUNT_AMOUNT_ASC = 'ERA_REWARDS_DISTINCT_COUNT_AMOUNT_ASC',
  ERA_REWARDS_DISTINCT_COUNT_AMOUNT_DESC = 'ERA_REWARDS_DISTINCT_COUNT_AMOUNT_DESC',
  ERA_REWARDS_DISTINCT_COUNT_BLOCK_RANGE_ASC = 'ERA_REWARDS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  ERA_REWARDS_DISTINCT_COUNT_BLOCK_RANGE_DESC = 'ERA_REWARDS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  ERA_REWARDS_DISTINCT_COUNT_CLAIMED_ASC = 'ERA_REWARDS_DISTINCT_COUNT_CLAIMED_ASC',
  ERA_REWARDS_DISTINCT_COUNT_CLAIMED_DESC = 'ERA_REWARDS_DISTINCT_COUNT_CLAIMED_DESC',
  ERA_REWARDS_DISTINCT_COUNT_CREATED_BLOCK_ASC = 'ERA_REWARDS_DISTINCT_COUNT_CREATED_BLOCK_ASC',
  ERA_REWARDS_DISTINCT_COUNT_CREATED_BLOCK_DESC = 'ERA_REWARDS_DISTINCT_COUNT_CREATED_BLOCK_DESC',
  ERA_REWARDS_DISTINCT_COUNT_CREATED_TIMESTAMP_ASC = 'ERA_REWARDS_DISTINCT_COUNT_CREATED_TIMESTAMP_ASC',
  ERA_REWARDS_DISTINCT_COUNT_CREATED_TIMESTAMP_DESC = 'ERA_REWARDS_DISTINCT_COUNT_CREATED_TIMESTAMP_DESC',
  ERA_REWARDS_DISTINCT_COUNT_DELEGATOR_ID_ASC = 'ERA_REWARDS_DISTINCT_COUNT_DELEGATOR_ID_ASC',
  ERA_REWARDS_DISTINCT_COUNT_DELEGATOR_ID_DESC = 'ERA_REWARDS_DISTINCT_COUNT_DELEGATOR_ID_DESC',
  ERA_REWARDS_DISTINCT_COUNT_ERA_IDX_ASC = 'ERA_REWARDS_DISTINCT_COUNT_ERA_IDX_ASC',
  ERA_REWARDS_DISTINCT_COUNT_ERA_IDX_DESC = 'ERA_REWARDS_DISTINCT_COUNT_ERA_IDX_DESC',
  ERA_REWARDS_DISTINCT_COUNT_ERA_ID_ASC = 'ERA_REWARDS_DISTINCT_COUNT_ERA_ID_ASC',
  ERA_REWARDS_DISTINCT_COUNT_ERA_ID_DESC = 'ERA_REWARDS_DISTINCT_COUNT_ERA_ID_DESC',
  ERA_REWARDS_DISTINCT_COUNT_ID_ASC = 'ERA_REWARDS_DISTINCT_COUNT_ID_ASC',
  ERA_REWARDS_DISTINCT_COUNT_ID_DESC = 'ERA_REWARDS_DISTINCT_COUNT_ID_DESC',
  ERA_REWARDS_DISTINCT_COUNT_INDEXER_ID_ASC = 'ERA_REWARDS_DISTINCT_COUNT_INDEXER_ID_ASC',
  ERA_REWARDS_DISTINCT_COUNT_INDEXER_ID_DESC = 'ERA_REWARDS_DISTINCT_COUNT_INDEXER_ID_DESC',
  ERA_REWARDS_DISTINCT_COUNT_IS_COMMISSION_ASC = 'ERA_REWARDS_DISTINCT_COUNT_IS_COMMISSION_ASC',
  ERA_REWARDS_DISTINCT_COUNT_IS_COMMISSION_DESC = 'ERA_REWARDS_DISTINCT_COUNT_IS_COMMISSION_DESC',
  ERA_REWARDS_DISTINCT_COUNT_IS_INDEXER_ASC = 'ERA_REWARDS_DISTINCT_COUNT_IS_INDEXER_ASC',
  ERA_REWARDS_DISTINCT_COUNT_IS_INDEXER_DESC = 'ERA_REWARDS_DISTINCT_COUNT_IS_INDEXER_DESC',
  ERA_REWARDS_MAX_AMOUNT_ASC = 'ERA_REWARDS_MAX_AMOUNT_ASC',
  ERA_REWARDS_MAX_AMOUNT_DESC = 'ERA_REWARDS_MAX_AMOUNT_DESC',
  ERA_REWARDS_MAX_BLOCK_RANGE_ASC = 'ERA_REWARDS_MAX_BLOCK_RANGE_ASC',
  ERA_REWARDS_MAX_BLOCK_RANGE_DESC = 'ERA_REWARDS_MAX_BLOCK_RANGE_DESC',
  ERA_REWARDS_MAX_CLAIMED_ASC = 'ERA_REWARDS_MAX_CLAIMED_ASC',
  ERA_REWARDS_MAX_CLAIMED_DESC = 'ERA_REWARDS_MAX_CLAIMED_DESC',
  ERA_REWARDS_MAX_CREATED_BLOCK_ASC = 'ERA_REWARDS_MAX_CREATED_BLOCK_ASC',
  ERA_REWARDS_MAX_CREATED_BLOCK_DESC = 'ERA_REWARDS_MAX_CREATED_BLOCK_DESC',
  ERA_REWARDS_MAX_CREATED_TIMESTAMP_ASC = 'ERA_REWARDS_MAX_CREATED_TIMESTAMP_ASC',
  ERA_REWARDS_MAX_CREATED_TIMESTAMP_DESC = 'ERA_REWARDS_MAX_CREATED_TIMESTAMP_DESC',
  ERA_REWARDS_MAX_DELEGATOR_ID_ASC = 'ERA_REWARDS_MAX_DELEGATOR_ID_ASC',
  ERA_REWARDS_MAX_DELEGATOR_ID_DESC = 'ERA_REWARDS_MAX_DELEGATOR_ID_DESC',
  ERA_REWARDS_MAX_ERA_IDX_ASC = 'ERA_REWARDS_MAX_ERA_IDX_ASC',
  ERA_REWARDS_MAX_ERA_IDX_DESC = 'ERA_REWARDS_MAX_ERA_IDX_DESC',
  ERA_REWARDS_MAX_ERA_ID_ASC = 'ERA_REWARDS_MAX_ERA_ID_ASC',
  ERA_REWARDS_MAX_ERA_ID_DESC = 'ERA_REWARDS_MAX_ERA_ID_DESC',
  ERA_REWARDS_MAX_ID_ASC = 'ERA_REWARDS_MAX_ID_ASC',
  ERA_REWARDS_MAX_ID_DESC = 'ERA_REWARDS_MAX_ID_DESC',
  ERA_REWARDS_MAX_INDEXER_ID_ASC = 'ERA_REWARDS_MAX_INDEXER_ID_ASC',
  ERA_REWARDS_MAX_INDEXER_ID_DESC = 'ERA_REWARDS_MAX_INDEXER_ID_DESC',
  ERA_REWARDS_MAX_IS_COMMISSION_ASC = 'ERA_REWARDS_MAX_IS_COMMISSION_ASC',
  ERA_REWARDS_MAX_IS_COMMISSION_DESC = 'ERA_REWARDS_MAX_IS_COMMISSION_DESC',
  ERA_REWARDS_MAX_IS_INDEXER_ASC = 'ERA_REWARDS_MAX_IS_INDEXER_ASC',
  ERA_REWARDS_MAX_IS_INDEXER_DESC = 'ERA_REWARDS_MAX_IS_INDEXER_DESC',
  ERA_REWARDS_MIN_AMOUNT_ASC = 'ERA_REWARDS_MIN_AMOUNT_ASC',
  ERA_REWARDS_MIN_AMOUNT_DESC = 'ERA_REWARDS_MIN_AMOUNT_DESC',
  ERA_REWARDS_MIN_BLOCK_RANGE_ASC = 'ERA_REWARDS_MIN_BLOCK_RANGE_ASC',
  ERA_REWARDS_MIN_BLOCK_RANGE_DESC = 'ERA_REWARDS_MIN_BLOCK_RANGE_DESC',
  ERA_REWARDS_MIN_CLAIMED_ASC = 'ERA_REWARDS_MIN_CLAIMED_ASC',
  ERA_REWARDS_MIN_CLAIMED_DESC = 'ERA_REWARDS_MIN_CLAIMED_DESC',
  ERA_REWARDS_MIN_CREATED_BLOCK_ASC = 'ERA_REWARDS_MIN_CREATED_BLOCK_ASC',
  ERA_REWARDS_MIN_CREATED_BLOCK_DESC = 'ERA_REWARDS_MIN_CREATED_BLOCK_DESC',
  ERA_REWARDS_MIN_CREATED_TIMESTAMP_ASC = 'ERA_REWARDS_MIN_CREATED_TIMESTAMP_ASC',
  ERA_REWARDS_MIN_CREATED_TIMESTAMP_DESC = 'ERA_REWARDS_MIN_CREATED_TIMESTAMP_DESC',
  ERA_REWARDS_MIN_DELEGATOR_ID_ASC = 'ERA_REWARDS_MIN_DELEGATOR_ID_ASC',
  ERA_REWARDS_MIN_DELEGATOR_ID_DESC = 'ERA_REWARDS_MIN_DELEGATOR_ID_DESC',
  ERA_REWARDS_MIN_ERA_IDX_ASC = 'ERA_REWARDS_MIN_ERA_IDX_ASC',
  ERA_REWARDS_MIN_ERA_IDX_DESC = 'ERA_REWARDS_MIN_ERA_IDX_DESC',
  ERA_REWARDS_MIN_ERA_ID_ASC = 'ERA_REWARDS_MIN_ERA_ID_ASC',
  ERA_REWARDS_MIN_ERA_ID_DESC = 'ERA_REWARDS_MIN_ERA_ID_DESC',
  ERA_REWARDS_MIN_ID_ASC = 'ERA_REWARDS_MIN_ID_ASC',
  ERA_REWARDS_MIN_ID_DESC = 'ERA_REWARDS_MIN_ID_DESC',
  ERA_REWARDS_MIN_INDEXER_ID_ASC = 'ERA_REWARDS_MIN_INDEXER_ID_ASC',
  ERA_REWARDS_MIN_INDEXER_ID_DESC = 'ERA_REWARDS_MIN_INDEXER_ID_DESC',
  ERA_REWARDS_MIN_IS_COMMISSION_ASC = 'ERA_REWARDS_MIN_IS_COMMISSION_ASC',
  ERA_REWARDS_MIN_IS_COMMISSION_DESC = 'ERA_REWARDS_MIN_IS_COMMISSION_DESC',
  ERA_REWARDS_MIN_IS_INDEXER_ASC = 'ERA_REWARDS_MIN_IS_INDEXER_ASC',
  ERA_REWARDS_MIN_IS_INDEXER_DESC = 'ERA_REWARDS_MIN_IS_INDEXER_DESC',
  ERA_REWARDS_STDDEV_POPULATION_AMOUNT_ASC = 'ERA_REWARDS_STDDEV_POPULATION_AMOUNT_ASC',
  ERA_REWARDS_STDDEV_POPULATION_AMOUNT_DESC = 'ERA_REWARDS_STDDEV_POPULATION_AMOUNT_DESC',
  ERA_REWARDS_STDDEV_POPULATION_BLOCK_RANGE_ASC = 'ERA_REWARDS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  ERA_REWARDS_STDDEV_POPULATION_BLOCK_RANGE_DESC = 'ERA_REWARDS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  ERA_REWARDS_STDDEV_POPULATION_CLAIMED_ASC = 'ERA_REWARDS_STDDEV_POPULATION_CLAIMED_ASC',
  ERA_REWARDS_STDDEV_POPULATION_CLAIMED_DESC = 'ERA_REWARDS_STDDEV_POPULATION_CLAIMED_DESC',
  ERA_REWARDS_STDDEV_POPULATION_CREATED_BLOCK_ASC = 'ERA_REWARDS_STDDEV_POPULATION_CREATED_BLOCK_ASC',
  ERA_REWARDS_STDDEV_POPULATION_CREATED_BLOCK_DESC = 'ERA_REWARDS_STDDEV_POPULATION_CREATED_BLOCK_DESC',
  ERA_REWARDS_STDDEV_POPULATION_CREATED_TIMESTAMP_ASC = 'ERA_REWARDS_STDDEV_POPULATION_CREATED_TIMESTAMP_ASC',
  ERA_REWARDS_STDDEV_POPULATION_CREATED_TIMESTAMP_DESC = 'ERA_REWARDS_STDDEV_POPULATION_CREATED_TIMESTAMP_DESC',
  ERA_REWARDS_STDDEV_POPULATION_DELEGATOR_ID_ASC = 'ERA_REWARDS_STDDEV_POPULATION_DELEGATOR_ID_ASC',
  ERA_REWARDS_STDDEV_POPULATION_DELEGATOR_ID_DESC = 'ERA_REWARDS_STDDEV_POPULATION_DELEGATOR_ID_DESC',
  ERA_REWARDS_STDDEV_POPULATION_ERA_IDX_ASC = 'ERA_REWARDS_STDDEV_POPULATION_ERA_IDX_ASC',
  ERA_REWARDS_STDDEV_POPULATION_ERA_IDX_DESC = 'ERA_REWARDS_STDDEV_POPULATION_ERA_IDX_DESC',
  ERA_REWARDS_STDDEV_POPULATION_ERA_ID_ASC = 'ERA_REWARDS_STDDEV_POPULATION_ERA_ID_ASC',
  ERA_REWARDS_STDDEV_POPULATION_ERA_ID_DESC = 'ERA_REWARDS_STDDEV_POPULATION_ERA_ID_DESC',
  ERA_REWARDS_STDDEV_POPULATION_ID_ASC = 'ERA_REWARDS_STDDEV_POPULATION_ID_ASC',
  ERA_REWARDS_STDDEV_POPULATION_ID_DESC = 'ERA_REWARDS_STDDEV_POPULATION_ID_DESC',
  ERA_REWARDS_STDDEV_POPULATION_INDEXER_ID_ASC = 'ERA_REWARDS_STDDEV_POPULATION_INDEXER_ID_ASC',
  ERA_REWARDS_STDDEV_POPULATION_INDEXER_ID_DESC = 'ERA_REWARDS_STDDEV_POPULATION_INDEXER_ID_DESC',
  ERA_REWARDS_STDDEV_POPULATION_IS_COMMISSION_ASC = 'ERA_REWARDS_STDDEV_POPULATION_IS_COMMISSION_ASC',
  ERA_REWARDS_STDDEV_POPULATION_IS_COMMISSION_DESC = 'ERA_REWARDS_STDDEV_POPULATION_IS_COMMISSION_DESC',
  ERA_REWARDS_STDDEV_POPULATION_IS_INDEXER_ASC = 'ERA_REWARDS_STDDEV_POPULATION_IS_INDEXER_ASC',
  ERA_REWARDS_STDDEV_POPULATION_IS_INDEXER_DESC = 'ERA_REWARDS_STDDEV_POPULATION_IS_INDEXER_DESC',
  ERA_REWARDS_STDDEV_SAMPLE_AMOUNT_ASC = 'ERA_REWARDS_STDDEV_SAMPLE_AMOUNT_ASC',
  ERA_REWARDS_STDDEV_SAMPLE_AMOUNT_DESC = 'ERA_REWARDS_STDDEV_SAMPLE_AMOUNT_DESC',
  ERA_REWARDS_STDDEV_SAMPLE_BLOCK_RANGE_ASC = 'ERA_REWARDS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  ERA_REWARDS_STDDEV_SAMPLE_BLOCK_RANGE_DESC = 'ERA_REWARDS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  ERA_REWARDS_STDDEV_SAMPLE_CLAIMED_ASC = 'ERA_REWARDS_STDDEV_SAMPLE_CLAIMED_ASC',
  ERA_REWARDS_STDDEV_SAMPLE_CLAIMED_DESC = 'ERA_REWARDS_STDDEV_SAMPLE_CLAIMED_DESC',
  ERA_REWARDS_STDDEV_SAMPLE_CREATED_BLOCK_ASC = 'ERA_REWARDS_STDDEV_SAMPLE_CREATED_BLOCK_ASC',
  ERA_REWARDS_STDDEV_SAMPLE_CREATED_BLOCK_DESC = 'ERA_REWARDS_STDDEV_SAMPLE_CREATED_BLOCK_DESC',
  ERA_REWARDS_STDDEV_SAMPLE_CREATED_TIMESTAMP_ASC = 'ERA_REWARDS_STDDEV_SAMPLE_CREATED_TIMESTAMP_ASC',
  ERA_REWARDS_STDDEV_SAMPLE_CREATED_TIMESTAMP_DESC = 'ERA_REWARDS_STDDEV_SAMPLE_CREATED_TIMESTAMP_DESC',
  ERA_REWARDS_STDDEV_SAMPLE_DELEGATOR_ID_ASC = 'ERA_REWARDS_STDDEV_SAMPLE_DELEGATOR_ID_ASC',
  ERA_REWARDS_STDDEV_SAMPLE_DELEGATOR_ID_DESC = 'ERA_REWARDS_STDDEV_SAMPLE_DELEGATOR_ID_DESC',
  ERA_REWARDS_STDDEV_SAMPLE_ERA_IDX_ASC = 'ERA_REWARDS_STDDEV_SAMPLE_ERA_IDX_ASC',
  ERA_REWARDS_STDDEV_SAMPLE_ERA_IDX_DESC = 'ERA_REWARDS_STDDEV_SAMPLE_ERA_IDX_DESC',
  ERA_REWARDS_STDDEV_SAMPLE_ERA_ID_ASC = 'ERA_REWARDS_STDDEV_SAMPLE_ERA_ID_ASC',
  ERA_REWARDS_STDDEV_SAMPLE_ERA_ID_DESC = 'ERA_REWARDS_STDDEV_SAMPLE_ERA_ID_DESC',
  ERA_REWARDS_STDDEV_SAMPLE_ID_ASC = 'ERA_REWARDS_STDDEV_SAMPLE_ID_ASC',
  ERA_REWARDS_STDDEV_SAMPLE_ID_DESC = 'ERA_REWARDS_STDDEV_SAMPLE_ID_DESC',
  ERA_REWARDS_STDDEV_SAMPLE_INDEXER_ID_ASC = 'ERA_REWARDS_STDDEV_SAMPLE_INDEXER_ID_ASC',
  ERA_REWARDS_STDDEV_SAMPLE_INDEXER_ID_DESC = 'ERA_REWARDS_STDDEV_SAMPLE_INDEXER_ID_DESC',
  ERA_REWARDS_STDDEV_SAMPLE_IS_COMMISSION_ASC = 'ERA_REWARDS_STDDEV_SAMPLE_IS_COMMISSION_ASC',
  ERA_REWARDS_STDDEV_SAMPLE_IS_COMMISSION_DESC = 'ERA_REWARDS_STDDEV_SAMPLE_IS_COMMISSION_DESC',
  ERA_REWARDS_STDDEV_SAMPLE_IS_INDEXER_ASC = 'ERA_REWARDS_STDDEV_SAMPLE_IS_INDEXER_ASC',
  ERA_REWARDS_STDDEV_SAMPLE_IS_INDEXER_DESC = 'ERA_REWARDS_STDDEV_SAMPLE_IS_INDEXER_DESC',
  ERA_REWARDS_SUM_AMOUNT_ASC = 'ERA_REWARDS_SUM_AMOUNT_ASC',
  ERA_REWARDS_SUM_AMOUNT_DESC = 'ERA_REWARDS_SUM_AMOUNT_DESC',
  ERA_REWARDS_SUM_BLOCK_RANGE_ASC = 'ERA_REWARDS_SUM_BLOCK_RANGE_ASC',
  ERA_REWARDS_SUM_BLOCK_RANGE_DESC = 'ERA_REWARDS_SUM_BLOCK_RANGE_DESC',
  ERA_REWARDS_SUM_CLAIMED_ASC = 'ERA_REWARDS_SUM_CLAIMED_ASC',
  ERA_REWARDS_SUM_CLAIMED_DESC = 'ERA_REWARDS_SUM_CLAIMED_DESC',
  ERA_REWARDS_SUM_CREATED_BLOCK_ASC = 'ERA_REWARDS_SUM_CREATED_BLOCK_ASC',
  ERA_REWARDS_SUM_CREATED_BLOCK_DESC = 'ERA_REWARDS_SUM_CREATED_BLOCK_DESC',
  ERA_REWARDS_SUM_CREATED_TIMESTAMP_ASC = 'ERA_REWARDS_SUM_CREATED_TIMESTAMP_ASC',
  ERA_REWARDS_SUM_CREATED_TIMESTAMP_DESC = 'ERA_REWARDS_SUM_CREATED_TIMESTAMP_DESC',
  ERA_REWARDS_SUM_DELEGATOR_ID_ASC = 'ERA_REWARDS_SUM_DELEGATOR_ID_ASC',
  ERA_REWARDS_SUM_DELEGATOR_ID_DESC = 'ERA_REWARDS_SUM_DELEGATOR_ID_DESC',
  ERA_REWARDS_SUM_ERA_IDX_ASC = 'ERA_REWARDS_SUM_ERA_IDX_ASC',
  ERA_REWARDS_SUM_ERA_IDX_DESC = 'ERA_REWARDS_SUM_ERA_IDX_DESC',
  ERA_REWARDS_SUM_ERA_ID_ASC = 'ERA_REWARDS_SUM_ERA_ID_ASC',
  ERA_REWARDS_SUM_ERA_ID_DESC = 'ERA_REWARDS_SUM_ERA_ID_DESC',
  ERA_REWARDS_SUM_ID_ASC = 'ERA_REWARDS_SUM_ID_ASC',
  ERA_REWARDS_SUM_ID_DESC = 'ERA_REWARDS_SUM_ID_DESC',
  ERA_REWARDS_SUM_INDEXER_ID_ASC = 'ERA_REWARDS_SUM_INDEXER_ID_ASC',
  ERA_REWARDS_SUM_INDEXER_ID_DESC = 'ERA_REWARDS_SUM_INDEXER_ID_DESC',
  ERA_REWARDS_SUM_IS_COMMISSION_ASC = 'ERA_REWARDS_SUM_IS_COMMISSION_ASC',
  ERA_REWARDS_SUM_IS_COMMISSION_DESC = 'ERA_REWARDS_SUM_IS_COMMISSION_DESC',
  ERA_REWARDS_SUM_IS_INDEXER_ASC = 'ERA_REWARDS_SUM_IS_INDEXER_ASC',
  ERA_REWARDS_SUM_IS_INDEXER_DESC = 'ERA_REWARDS_SUM_IS_INDEXER_DESC',
  ERA_REWARDS_VARIANCE_POPULATION_AMOUNT_ASC = 'ERA_REWARDS_VARIANCE_POPULATION_AMOUNT_ASC',
  ERA_REWARDS_VARIANCE_POPULATION_AMOUNT_DESC = 'ERA_REWARDS_VARIANCE_POPULATION_AMOUNT_DESC',
  ERA_REWARDS_VARIANCE_POPULATION_BLOCK_RANGE_ASC = 'ERA_REWARDS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  ERA_REWARDS_VARIANCE_POPULATION_BLOCK_RANGE_DESC = 'ERA_REWARDS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  ERA_REWARDS_VARIANCE_POPULATION_CLAIMED_ASC = 'ERA_REWARDS_VARIANCE_POPULATION_CLAIMED_ASC',
  ERA_REWARDS_VARIANCE_POPULATION_CLAIMED_DESC = 'ERA_REWARDS_VARIANCE_POPULATION_CLAIMED_DESC',
  ERA_REWARDS_VARIANCE_POPULATION_CREATED_BLOCK_ASC = 'ERA_REWARDS_VARIANCE_POPULATION_CREATED_BLOCK_ASC',
  ERA_REWARDS_VARIANCE_POPULATION_CREATED_BLOCK_DESC = 'ERA_REWARDS_VARIANCE_POPULATION_CREATED_BLOCK_DESC',
  ERA_REWARDS_VARIANCE_POPULATION_CREATED_TIMESTAMP_ASC = 'ERA_REWARDS_VARIANCE_POPULATION_CREATED_TIMESTAMP_ASC',
  ERA_REWARDS_VARIANCE_POPULATION_CREATED_TIMESTAMP_DESC = 'ERA_REWARDS_VARIANCE_POPULATION_CREATED_TIMESTAMP_DESC',
  ERA_REWARDS_VARIANCE_POPULATION_DELEGATOR_ID_ASC = 'ERA_REWARDS_VARIANCE_POPULATION_DELEGATOR_ID_ASC',
  ERA_REWARDS_VARIANCE_POPULATION_DELEGATOR_ID_DESC = 'ERA_REWARDS_VARIANCE_POPULATION_DELEGATOR_ID_DESC',
  ERA_REWARDS_VARIANCE_POPULATION_ERA_IDX_ASC = 'ERA_REWARDS_VARIANCE_POPULATION_ERA_IDX_ASC',
  ERA_REWARDS_VARIANCE_POPULATION_ERA_IDX_DESC = 'ERA_REWARDS_VARIANCE_POPULATION_ERA_IDX_DESC',
  ERA_REWARDS_VARIANCE_POPULATION_ERA_ID_ASC = 'ERA_REWARDS_VARIANCE_POPULATION_ERA_ID_ASC',
  ERA_REWARDS_VARIANCE_POPULATION_ERA_ID_DESC = 'ERA_REWARDS_VARIANCE_POPULATION_ERA_ID_DESC',
  ERA_REWARDS_VARIANCE_POPULATION_ID_ASC = 'ERA_REWARDS_VARIANCE_POPULATION_ID_ASC',
  ERA_REWARDS_VARIANCE_POPULATION_ID_DESC = 'ERA_REWARDS_VARIANCE_POPULATION_ID_DESC',
  ERA_REWARDS_VARIANCE_POPULATION_INDEXER_ID_ASC = 'ERA_REWARDS_VARIANCE_POPULATION_INDEXER_ID_ASC',
  ERA_REWARDS_VARIANCE_POPULATION_INDEXER_ID_DESC = 'ERA_REWARDS_VARIANCE_POPULATION_INDEXER_ID_DESC',
  ERA_REWARDS_VARIANCE_POPULATION_IS_COMMISSION_ASC = 'ERA_REWARDS_VARIANCE_POPULATION_IS_COMMISSION_ASC',
  ERA_REWARDS_VARIANCE_POPULATION_IS_COMMISSION_DESC = 'ERA_REWARDS_VARIANCE_POPULATION_IS_COMMISSION_DESC',
  ERA_REWARDS_VARIANCE_POPULATION_IS_INDEXER_ASC = 'ERA_REWARDS_VARIANCE_POPULATION_IS_INDEXER_ASC',
  ERA_REWARDS_VARIANCE_POPULATION_IS_INDEXER_DESC = 'ERA_REWARDS_VARIANCE_POPULATION_IS_INDEXER_DESC',
  ERA_REWARDS_VARIANCE_SAMPLE_AMOUNT_ASC = 'ERA_REWARDS_VARIANCE_SAMPLE_AMOUNT_ASC',
  ERA_REWARDS_VARIANCE_SAMPLE_AMOUNT_DESC = 'ERA_REWARDS_VARIANCE_SAMPLE_AMOUNT_DESC',
  ERA_REWARDS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC = 'ERA_REWARDS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  ERA_REWARDS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC = 'ERA_REWARDS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  ERA_REWARDS_VARIANCE_SAMPLE_CLAIMED_ASC = 'ERA_REWARDS_VARIANCE_SAMPLE_CLAIMED_ASC',
  ERA_REWARDS_VARIANCE_SAMPLE_CLAIMED_DESC = 'ERA_REWARDS_VARIANCE_SAMPLE_CLAIMED_DESC',
  ERA_REWARDS_VARIANCE_SAMPLE_CREATED_BLOCK_ASC = 'ERA_REWARDS_VARIANCE_SAMPLE_CREATED_BLOCK_ASC',
  ERA_REWARDS_VARIANCE_SAMPLE_CREATED_BLOCK_DESC = 'ERA_REWARDS_VARIANCE_SAMPLE_CREATED_BLOCK_DESC',
  ERA_REWARDS_VARIANCE_SAMPLE_CREATED_TIMESTAMP_ASC = 'ERA_REWARDS_VARIANCE_SAMPLE_CREATED_TIMESTAMP_ASC',
  ERA_REWARDS_VARIANCE_SAMPLE_CREATED_TIMESTAMP_DESC = 'ERA_REWARDS_VARIANCE_SAMPLE_CREATED_TIMESTAMP_DESC',
  ERA_REWARDS_VARIANCE_SAMPLE_DELEGATOR_ID_ASC = 'ERA_REWARDS_VARIANCE_SAMPLE_DELEGATOR_ID_ASC',
  ERA_REWARDS_VARIANCE_SAMPLE_DELEGATOR_ID_DESC = 'ERA_REWARDS_VARIANCE_SAMPLE_DELEGATOR_ID_DESC',
  ERA_REWARDS_VARIANCE_SAMPLE_ERA_IDX_ASC = 'ERA_REWARDS_VARIANCE_SAMPLE_ERA_IDX_ASC',
  ERA_REWARDS_VARIANCE_SAMPLE_ERA_IDX_DESC = 'ERA_REWARDS_VARIANCE_SAMPLE_ERA_IDX_DESC',
  ERA_REWARDS_VARIANCE_SAMPLE_ERA_ID_ASC = 'ERA_REWARDS_VARIANCE_SAMPLE_ERA_ID_ASC',
  ERA_REWARDS_VARIANCE_SAMPLE_ERA_ID_DESC = 'ERA_REWARDS_VARIANCE_SAMPLE_ERA_ID_DESC',
  ERA_REWARDS_VARIANCE_SAMPLE_ID_ASC = 'ERA_REWARDS_VARIANCE_SAMPLE_ID_ASC',
  ERA_REWARDS_VARIANCE_SAMPLE_ID_DESC = 'ERA_REWARDS_VARIANCE_SAMPLE_ID_DESC',
  ERA_REWARDS_VARIANCE_SAMPLE_INDEXER_ID_ASC = 'ERA_REWARDS_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  ERA_REWARDS_VARIANCE_SAMPLE_INDEXER_ID_DESC = 'ERA_REWARDS_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  ERA_REWARDS_VARIANCE_SAMPLE_IS_COMMISSION_ASC = 'ERA_REWARDS_VARIANCE_SAMPLE_IS_COMMISSION_ASC',
  ERA_REWARDS_VARIANCE_SAMPLE_IS_COMMISSION_DESC = 'ERA_REWARDS_VARIANCE_SAMPLE_IS_COMMISSION_DESC',
  ERA_REWARDS_VARIANCE_SAMPLE_IS_INDEXER_ASC = 'ERA_REWARDS_VARIANCE_SAMPLE_IS_INDEXER_ASC',
  ERA_REWARDS_VARIANCE_SAMPLE_IS_INDEXER_DESC = 'ERA_REWARDS_VARIANCE_SAMPLE_IS_INDEXER_DESC',
  ERA_STAKES_AVERAGE_BLOCK_RANGE_ASC = 'ERA_STAKES_AVERAGE_BLOCK_RANGE_ASC',
  ERA_STAKES_AVERAGE_BLOCK_RANGE_DESC = 'ERA_STAKES_AVERAGE_BLOCK_RANGE_DESC',
  ERA_STAKES_AVERAGE_DELEGATOR_ID_ASC = 'ERA_STAKES_AVERAGE_DELEGATOR_ID_ASC',
  ERA_STAKES_AVERAGE_DELEGATOR_ID_DESC = 'ERA_STAKES_AVERAGE_DELEGATOR_ID_DESC',
  ERA_STAKES_AVERAGE_ERA_IDX_ASC = 'ERA_STAKES_AVERAGE_ERA_IDX_ASC',
  ERA_STAKES_AVERAGE_ERA_IDX_DESC = 'ERA_STAKES_AVERAGE_ERA_IDX_DESC',
  ERA_STAKES_AVERAGE_ERA_ID_ASC = 'ERA_STAKES_AVERAGE_ERA_ID_ASC',
  ERA_STAKES_AVERAGE_ERA_ID_DESC = 'ERA_STAKES_AVERAGE_ERA_ID_DESC',
  ERA_STAKES_AVERAGE_ID_ASC = 'ERA_STAKES_AVERAGE_ID_ASC',
  ERA_STAKES_AVERAGE_ID_DESC = 'ERA_STAKES_AVERAGE_ID_DESC',
  ERA_STAKES_AVERAGE_INDEXER_ID_ASC = 'ERA_STAKES_AVERAGE_INDEXER_ID_ASC',
  ERA_STAKES_AVERAGE_INDEXER_ID_DESC = 'ERA_STAKES_AVERAGE_INDEXER_ID_DESC',
  ERA_STAKES_AVERAGE_STAKE_ASC = 'ERA_STAKES_AVERAGE_STAKE_ASC',
  ERA_STAKES_AVERAGE_STAKE_DESC = 'ERA_STAKES_AVERAGE_STAKE_DESC',
  ERA_STAKES_BY_ERA_ID__COUNT_ASC = 'ERA_STAKES_BY_ERA_ID__COUNT_ASC',
  ERA_STAKES_BY_ERA_ID__COUNT_DESC = 'ERA_STAKES_BY_ERA_ID__COUNT_DESC',
  ERA_STAKES_COUNT_ASC = 'ERA_STAKES_COUNT_ASC',
  ERA_STAKES_COUNT_DESC = 'ERA_STAKES_COUNT_DESC',
  ERA_STAKES_DISTINCT_COUNT_BLOCK_RANGE_ASC = 'ERA_STAKES_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  ERA_STAKES_DISTINCT_COUNT_BLOCK_RANGE_DESC = 'ERA_STAKES_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  ERA_STAKES_DISTINCT_COUNT_DELEGATOR_ID_ASC = 'ERA_STAKES_DISTINCT_COUNT_DELEGATOR_ID_ASC',
  ERA_STAKES_DISTINCT_COUNT_DELEGATOR_ID_DESC = 'ERA_STAKES_DISTINCT_COUNT_DELEGATOR_ID_DESC',
  ERA_STAKES_DISTINCT_COUNT_ERA_IDX_ASC = 'ERA_STAKES_DISTINCT_COUNT_ERA_IDX_ASC',
  ERA_STAKES_DISTINCT_COUNT_ERA_IDX_DESC = 'ERA_STAKES_DISTINCT_COUNT_ERA_IDX_DESC',
  ERA_STAKES_DISTINCT_COUNT_ERA_ID_ASC = 'ERA_STAKES_DISTINCT_COUNT_ERA_ID_ASC',
  ERA_STAKES_DISTINCT_COUNT_ERA_ID_DESC = 'ERA_STAKES_DISTINCT_COUNT_ERA_ID_DESC',
  ERA_STAKES_DISTINCT_COUNT_ID_ASC = 'ERA_STAKES_DISTINCT_COUNT_ID_ASC',
  ERA_STAKES_DISTINCT_COUNT_ID_DESC = 'ERA_STAKES_DISTINCT_COUNT_ID_DESC',
  ERA_STAKES_DISTINCT_COUNT_INDEXER_ID_ASC = 'ERA_STAKES_DISTINCT_COUNT_INDEXER_ID_ASC',
  ERA_STAKES_DISTINCT_COUNT_INDEXER_ID_DESC = 'ERA_STAKES_DISTINCT_COUNT_INDEXER_ID_DESC',
  ERA_STAKES_DISTINCT_COUNT_STAKE_ASC = 'ERA_STAKES_DISTINCT_COUNT_STAKE_ASC',
  ERA_STAKES_DISTINCT_COUNT_STAKE_DESC = 'ERA_STAKES_DISTINCT_COUNT_STAKE_DESC',
  ERA_STAKES_MAX_BLOCK_RANGE_ASC = 'ERA_STAKES_MAX_BLOCK_RANGE_ASC',
  ERA_STAKES_MAX_BLOCK_RANGE_DESC = 'ERA_STAKES_MAX_BLOCK_RANGE_DESC',
  ERA_STAKES_MAX_DELEGATOR_ID_ASC = 'ERA_STAKES_MAX_DELEGATOR_ID_ASC',
  ERA_STAKES_MAX_DELEGATOR_ID_DESC = 'ERA_STAKES_MAX_DELEGATOR_ID_DESC',
  ERA_STAKES_MAX_ERA_IDX_ASC = 'ERA_STAKES_MAX_ERA_IDX_ASC',
  ERA_STAKES_MAX_ERA_IDX_DESC = 'ERA_STAKES_MAX_ERA_IDX_DESC',
  ERA_STAKES_MAX_ERA_ID_ASC = 'ERA_STAKES_MAX_ERA_ID_ASC',
  ERA_STAKES_MAX_ERA_ID_DESC = 'ERA_STAKES_MAX_ERA_ID_DESC',
  ERA_STAKES_MAX_ID_ASC = 'ERA_STAKES_MAX_ID_ASC',
  ERA_STAKES_MAX_ID_DESC = 'ERA_STAKES_MAX_ID_DESC',
  ERA_STAKES_MAX_INDEXER_ID_ASC = 'ERA_STAKES_MAX_INDEXER_ID_ASC',
  ERA_STAKES_MAX_INDEXER_ID_DESC = 'ERA_STAKES_MAX_INDEXER_ID_DESC',
  ERA_STAKES_MAX_STAKE_ASC = 'ERA_STAKES_MAX_STAKE_ASC',
  ERA_STAKES_MAX_STAKE_DESC = 'ERA_STAKES_MAX_STAKE_DESC',
  ERA_STAKES_MIN_BLOCK_RANGE_ASC = 'ERA_STAKES_MIN_BLOCK_RANGE_ASC',
  ERA_STAKES_MIN_BLOCK_RANGE_DESC = 'ERA_STAKES_MIN_BLOCK_RANGE_DESC',
  ERA_STAKES_MIN_DELEGATOR_ID_ASC = 'ERA_STAKES_MIN_DELEGATOR_ID_ASC',
  ERA_STAKES_MIN_DELEGATOR_ID_DESC = 'ERA_STAKES_MIN_DELEGATOR_ID_DESC',
  ERA_STAKES_MIN_ERA_IDX_ASC = 'ERA_STAKES_MIN_ERA_IDX_ASC',
  ERA_STAKES_MIN_ERA_IDX_DESC = 'ERA_STAKES_MIN_ERA_IDX_DESC',
  ERA_STAKES_MIN_ERA_ID_ASC = 'ERA_STAKES_MIN_ERA_ID_ASC',
  ERA_STAKES_MIN_ERA_ID_DESC = 'ERA_STAKES_MIN_ERA_ID_DESC',
  ERA_STAKES_MIN_ID_ASC = 'ERA_STAKES_MIN_ID_ASC',
  ERA_STAKES_MIN_ID_DESC = 'ERA_STAKES_MIN_ID_DESC',
  ERA_STAKES_MIN_INDEXER_ID_ASC = 'ERA_STAKES_MIN_INDEXER_ID_ASC',
  ERA_STAKES_MIN_INDEXER_ID_DESC = 'ERA_STAKES_MIN_INDEXER_ID_DESC',
  ERA_STAKES_MIN_STAKE_ASC = 'ERA_STAKES_MIN_STAKE_ASC',
  ERA_STAKES_MIN_STAKE_DESC = 'ERA_STAKES_MIN_STAKE_DESC',
  ERA_STAKES_STDDEV_POPULATION_BLOCK_RANGE_ASC = 'ERA_STAKES_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  ERA_STAKES_STDDEV_POPULATION_BLOCK_RANGE_DESC = 'ERA_STAKES_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  ERA_STAKES_STDDEV_POPULATION_DELEGATOR_ID_ASC = 'ERA_STAKES_STDDEV_POPULATION_DELEGATOR_ID_ASC',
  ERA_STAKES_STDDEV_POPULATION_DELEGATOR_ID_DESC = 'ERA_STAKES_STDDEV_POPULATION_DELEGATOR_ID_DESC',
  ERA_STAKES_STDDEV_POPULATION_ERA_IDX_ASC = 'ERA_STAKES_STDDEV_POPULATION_ERA_IDX_ASC',
  ERA_STAKES_STDDEV_POPULATION_ERA_IDX_DESC = 'ERA_STAKES_STDDEV_POPULATION_ERA_IDX_DESC',
  ERA_STAKES_STDDEV_POPULATION_ERA_ID_ASC = 'ERA_STAKES_STDDEV_POPULATION_ERA_ID_ASC',
  ERA_STAKES_STDDEV_POPULATION_ERA_ID_DESC = 'ERA_STAKES_STDDEV_POPULATION_ERA_ID_DESC',
  ERA_STAKES_STDDEV_POPULATION_ID_ASC = 'ERA_STAKES_STDDEV_POPULATION_ID_ASC',
  ERA_STAKES_STDDEV_POPULATION_ID_DESC = 'ERA_STAKES_STDDEV_POPULATION_ID_DESC',
  ERA_STAKES_STDDEV_POPULATION_INDEXER_ID_ASC = 'ERA_STAKES_STDDEV_POPULATION_INDEXER_ID_ASC',
  ERA_STAKES_STDDEV_POPULATION_INDEXER_ID_DESC = 'ERA_STAKES_STDDEV_POPULATION_INDEXER_ID_DESC',
  ERA_STAKES_STDDEV_POPULATION_STAKE_ASC = 'ERA_STAKES_STDDEV_POPULATION_STAKE_ASC',
  ERA_STAKES_STDDEV_POPULATION_STAKE_DESC = 'ERA_STAKES_STDDEV_POPULATION_STAKE_DESC',
  ERA_STAKES_STDDEV_SAMPLE_BLOCK_RANGE_ASC = 'ERA_STAKES_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  ERA_STAKES_STDDEV_SAMPLE_BLOCK_RANGE_DESC = 'ERA_STAKES_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  ERA_STAKES_STDDEV_SAMPLE_DELEGATOR_ID_ASC = 'ERA_STAKES_STDDEV_SAMPLE_DELEGATOR_ID_ASC',
  ERA_STAKES_STDDEV_SAMPLE_DELEGATOR_ID_DESC = 'ERA_STAKES_STDDEV_SAMPLE_DELEGATOR_ID_DESC',
  ERA_STAKES_STDDEV_SAMPLE_ERA_IDX_ASC = 'ERA_STAKES_STDDEV_SAMPLE_ERA_IDX_ASC',
  ERA_STAKES_STDDEV_SAMPLE_ERA_IDX_DESC = 'ERA_STAKES_STDDEV_SAMPLE_ERA_IDX_DESC',
  ERA_STAKES_STDDEV_SAMPLE_ERA_ID_ASC = 'ERA_STAKES_STDDEV_SAMPLE_ERA_ID_ASC',
  ERA_STAKES_STDDEV_SAMPLE_ERA_ID_DESC = 'ERA_STAKES_STDDEV_SAMPLE_ERA_ID_DESC',
  ERA_STAKES_STDDEV_SAMPLE_ID_ASC = 'ERA_STAKES_STDDEV_SAMPLE_ID_ASC',
  ERA_STAKES_STDDEV_SAMPLE_ID_DESC = 'ERA_STAKES_STDDEV_SAMPLE_ID_DESC',
  ERA_STAKES_STDDEV_SAMPLE_INDEXER_ID_ASC = 'ERA_STAKES_STDDEV_SAMPLE_INDEXER_ID_ASC',
  ERA_STAKES_STDDEV_SAMPLE_INDEXER_ID_DESC = 'ERA_STAKES_STDDEV_SAMPLE_INDEXER_ID_DESC',
  ERA_STAKES_STDDEV_SAMPLE_STAKE_ASC = 'ERA_STAKES_STDDEV_SAMPLE_STAKE_ASC',
  ERA_STAKES_STDDEV_SAMPLE_STAKE_DESC = 'ERA_STAKES_STDDEV_SAMPLE_STAKE_DESC',
  ERA_STAKES_SUM_BLOCK_RANGE_ASC = 'ERA_STAKES_SUM_BLOCK_RANGE_ASC',
  ERA_STAKES_SUM_BLOCK_RANGE_DESC = 'ERA_STAKES_SUM_BLOCK_RANGE_DESC',
  ERA_STAKES_SUM_DELEGATOR_ID_ASC = 'ERA_STAKES_SUM_DELEGATOR_ID_ASC',
  ERA_STAKES_SUM_DELEGATOR_ID_DESC = 'ERA_STAKES_SUM_DELEGATOR_ID_DESC',
  ERA_STAKES_SUM_ERA_IDX_ASC = 'ERA_STAKES_SUM_ERA_IDX_ASC',
  ERA_STAKES_SUM_ERA_IDX_DESC = 'ERA_STAKES_SUM_ERA_IDX_DESC',
  ERA_STAKES_SUM_ERA_ID_ASC = 'ERA_STAKES_SUM_ERA_ID_ASC',
  ERA_STAKES_SUM_ERA_ID_DESC = 'ERA_STAKES_SUM_ERA_ID_DESC',
  ERA_STAKES_SUM_ID_ASC = 'ERA_STAKES_SUM_ID_ASC',
  ERA_STAKES_SUM_ID_DESC = 'ERA_STAKES_SUM_ID_DESC',
  ERA_STAKES_SUM_INDEXER_ID_ASC = 'ERA_STAKES_SUM_INDEXER_ID_ASC',
  ERA_STAKES_SUM_INDEXER_ID_DESC = 'ERA_STAKES_SUM_INDEXER_ID_DESC',
  ERA_STAKES_SUM_STAKE_ASC = 'ERA_STAKES_SUM_STAKE_ASC',
  ERA_STAKES_SUM_STAKE_DESC = 'ERA_STAKES_SUM_STAKE_DESC',
  ERA_STAKES_VARIANCE_POPULATION_BLOCK_RANGE_ASC = 'ERA_STAKES_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  ERA_STAKES_VARIANCE_POPULATION_BLOCK_RANGE_DESC = 'ERA_STAKES_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  ERA_STAKES_VARIANCE_POPULATION_DELEGATOR_ID_ASC = 'ERA_STAKES_VARIANCE_POPULATION_DELEGATOR_ID_ASC',
  ERA_STAKES_VARIANCE_POPULATION_DELEGATOR_ID_DESC = 'ERA_STAKES_VARIANCE_POPULATION_DELEGATOR_ID_DESC',
  ERA_STAKES_VARIANCE_POPULATION_ERA_IDX_ASC = 'ERA_STAKES_VARIANCE_POPULATION_ERA_IDX_ASC',
  ERA_STAKES_VARIANCE_POPULATION_ERA_IDX_DESC = 'ERA_STAKES_VARIANCE_POPULATION_ERA_IDX_DESC',
  ERA_STAKES_VARIANCE_POPULATION_ERA_ID_ASC = 'ERA_STAKES_VARIANCE_POPULATION_ERA_ID_ASC',
  ERA_STAKES_VARIANCE_POPULATION_ERA_ID_DESC = 'ERA_STAKES_VARIANCE_POPULATION_ERA_ID_DESC',
  ERA_STAKES_VARIANCE_POPULATION_ID_ASC = 'ERA_STAKES_VARIANCE_POPULATION_ID_ASC',
  ERA_STAKES_VARIANCE_POPULATION_ID_DESC = 'ERA_STAKES_VARIANCE_POPULATION_ID_DESC',
  ERA_STAKES_VARIANCE_POPULATION_INDEXER_ID_ASC = 'ERA_STAKES_VARIANCE_POPULATION_INDEXER_ID_ASC',
  ERA_STAKES_VARIANCE_POPULATION_INDEXER_ID_DESC = 'ERA_STAKES_VARIANCE_POPULATION_INDEXER_ID_DESC',
  ERA_STAKES_VARIANCE_POPULATION_STAKE_ASC = 'ERA_STAKES_VARIANCE_POPULATION_STAKE_ASC',
  ERA_STAKES_VARIANCE_POPULATION_STAKE_DESC = 'ERA_STAKES_VARIANCE_POPULATION_STAKE_DESC',
  ERA_STAKES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC = 'ERA_STAKES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  ERA_STAKES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC = 'ERA_STAKES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  ERA_STAKES_VARIANCE_SAMPLE_DELEGATOR_ID_ASC = 'ERA_STAKES_VARIANCE_SAMPLE_DELEGATOR_ID_ASC',
  ERA_STAKES_VARIANCE_SAMPLE_DELEGATOR_ID_DESC = 'ERA_STAKES_VARIANCE_SAMPLE_DELEGATOR_ID_DESC',
  ERA_STAKES_VARIANCE_SAMPLE_ERA_IDX_ASC = 'ERA_STAKES_VARIANCE_SAMPLE_ERA_IDX_ASC',
  ERA_STAKES_VARIANCE_SAMPLE_ERA_IDX_DESC = 'ERA_STAKES_VARIANCE_SAMPLE_ERA_IDX_DESC',
  ERA_STAKES_VARIANCE_SAMPLE_ERA_ID_ASC = 'ERA_STAKES_VARIANCE_SAMPLE_ERA_ID_ASC',
  ERA_STAKES_VARIANCE_SAMPLE_ERA_ID_DESC = 'ERA_STAKES_VARIANCE_SAMPLE_ERA_ID_DESC',
  ERA_STAKES_VARIANCE_SAMPLE_ID_ASC = 'ERA_STAKES_VARIANCE_SAMPLE_ID_ASC',
  ERA_STAKES_VARIANCE_SAMPLE_ID_DESC = 'ERA_STAKES_VARIANCE_SAMPLE_ID_DESC',
  ERA_STAKES_VARIANCE_SAMPLE_INDEXER_ID_ASC = 'ERA_STAKES_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  ERA_STAKES_VARIANCE_SAMPLE_INDEXER_ID_DESC = 'ERA_STAKES_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  ERA_STAKES_VARIANCE_SAMPLE_STAKE_ASC = 'ERA_STAKES_VARIANCE_SAMPLE_STAKE_ASC',
  ERA_STAKES_VARIANCE_SAMPLE_STAKE_DESC = 'ERA_STAKES_VARIANCE_SAMPLE_STAKE_DESC',
  ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_AVERAGE_BLOCK_RANGE_ASC = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_AVERAGE_BLOCK_RANGE_ASC',
  ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_AVERAGE_BLOCK_RANGE_DESC = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_AVERAGE_BLOCK_RANGE_DESC',
  ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_AVERAGE_ID_ASC = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_AVERAGE_ID_ASC',
  ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_AVERAGE_ID_DESC = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_AVERAGE_ID_DESC',
  ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_AVERAGE_LAST_UPDATE_ERA_ID_ASC = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_AVERAGE_LAST_UPDATE_ERA_ID_ASC',
  ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_AVERAGE_LAST_UPDATE_ERA_ID_DESC = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_AVERAGE_LAST_UPDATE_ERA_ID_DESC',
  ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_COUNT_ASC = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_COUNT_ASC',
  ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_COUNT_DESC = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_COUNT_DESC',
  ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_DISTINCT_COUNT_BLOCK_RANGE_ASC = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_DISTINCT_COUNT_BLOCK_RANGE_DESC = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_DISTINCT_COUNT_ID_ASC = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_DISTINCT_COUNT_ID_ASC',
  ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_DISTINCT_COUNT_ID_DESC = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_DISTINCT_COUNT_ID_DESC',
  ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_DISTINCT_COUNT_LAST_UPDATE_ERA_ID_ASC = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_DISTINCT_COUNT_LAST_UPDATE_ERA_ID_ASC',
  ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_DISTINCT_COUNT_LAST_UPDATE_ERA_ID_DESC = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_DISTINCT_COUNT_LAST_UPDATE_ERA_ID_DESC',
  ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_MAX_BLOCK_RANGE_ASC = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_MAX_BLOCK_RANGE_ASC',
  ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_MAX_BLOCK_RANGE_DESC = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_MAX_BLOCK_RANGE_DESC',
  ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_MAX_ID_ASC = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_MAX_ID_ASC',
  ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_MAX_ID_DESC = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_MAX_ID_DESC',
  ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_MAX_LAST_UPDATE_ERA_ID_ASC = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_MAX_LAST_UPDATE_ERA_ID_ASC',
  ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_MAX_LAST_UPDATE_ERA_ID_DESC = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_MAX_LAST_UPDATE_ERA_ID_DESC',
  ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_MIN_BLOCK_RANGE_ASC = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_MIN_BLOCK_RANGE_ASC',
  ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_MIN_BLOCK_RANGE_DESC = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_MIN_BLOCK_RANGE_DESC',
  ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_MIN_ID_ASC = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_MIN_ID_ASC',
  ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_MIN_ID_DESC = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_MIN_ID_DESC',
  ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_MIN_LAST_UPDATE_ERA_ID_ASC = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_MIN_LAST_UPDATE_ERA_ID_ASC',
  ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_MIN_LAST_UPDATE_ERA_ID_DESC = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_MIN_LAST_UPDATE_ERA_ID_DESC',
  ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_STDDEV_POPULATION_BLOCK_RANGE_ASC = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_STDDEV_POPULATION_BLOCK_RANGE_DESC = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_STDDEV_POPULATION_ID_ASC = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_STDDEV_POPULATION_ID_ASC',
  ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_STDDEV_POPULATION_ID_DESC = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_STDDEV_POPULATION_ID_DESC',
  ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_STDDEV_POPULATION_LAST_UPDATE_ERA_ID_ASC = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_STDDEV_POPULATION_LAST_UPDATE_ERA_ID_ASC',
  ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_STDDEV_POPULATION_LAST_UPDATE_ERA_ID_DESC = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_STDDEV_POPULATION_LAST_UPDATE_ERA_ID_DESC',
  ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_STDDEV_SAMPLE_BLOCK_RANGE_ASC = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_STDDEV_SAMPLE_BLOCK_RANGE_DESC = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_STDDEV_SAMPLE_ID_ASC = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_STDDEV_SAMPLE_ID_ASC',
  ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_STDDEV_SAMPLE_ID_DESC = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_STDDEV_SAMPLE_ID_DESC',
  ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_STDDEV_SAMPLE_LAST_UPDATE_ERA_ID_ASC = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_STDDEV_SAMPLE_LAST_UPDATE_ERA_ID_ASC',
  ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_STDDEV_SAMPLE_LAST_UPDATE_ERA_ID_DESC = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_STDDEV_SAMPLE_LAST_UPDATE_ERA_ID_DESC',
  ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_SUM_BLOCK_RANGE_ASC = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_SUM_BLOCK_RANGE_ASC',
  ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_SUM_BLOCK_RANGE_DESC = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_SUM_BLOCK_RANGE_DESC',
  ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_SUM_ID_ASC = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_SUM_ID_ASC',
  ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_SUM_ID_DESC = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_SUM_ID_DESC',
  ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_SUM_LAST_UPDATE_ERA_ID_ASC = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_SUM_LAST_UPDATE_ERA_ID_ASC',
  ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_SUM_LAST_UPDATE_ERA_ID_DESC = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_SUM_LAST_UPDATE_ERA_ID_DESC',
  ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_VARIANCE_POPULATION_BLOCK_RANGE_ASC = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_VARIANCE_POPULATION_BLOCK_RANGE_DESC = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_VARIANCE_POPULATION_ID_ASC = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_VARIANCE_POPULATION_ID_ASC',
  ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_VARIANCE_POPULATION_ID_DESC = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_VARIANCE_POPULATION_ID_DESC',
  ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_VARIANCE_POPULATION_LAST_UPDATE_ERA_ID_ASC = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_VARIANCE_POPULATION_LAST_UPDATE_ERA_ID_ASC',
  ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_VARIANCE_POPULATION_LAST_UPDATE_ERA_ID_DESC = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_VARIANCE_POPULATION_LAST_UPDATE_ERA_ID_DESC',
  ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_VARIANCE_SAMPLE_BLOCK_RANGE_ASC = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_VARIANCE_SAMPLE_BLOCK_RANGE_DESC = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_VARIANCE_SAMPLE_ID_ASC = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_VARIANCE_SAMPLE_ID_ASC',
  ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_VARIANCE_SAMPLE_ID_DESC = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_VARIANCE_SAMPLE_ID_DESC',
  ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_VARIANCE_SAMPLE_LAST_UPDATE_ERA_ID_ASC = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_VARIANCE_SAMPLE_LAST_UPDATE_ERA_ID_ASC',
  ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_VARIANCE_SAMPLE_LAST_UPDATE_ERA_ID_DESC = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_VARIANCE_SAMPLE_LAST_UPDATE_ERA_ID_DESC',
  ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID__COUNT_ASC = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID__COUNT_ASC',
  ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID__COUNT_DESC = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID__COUNT_DESC',
  FORCE_NEXT_ASC = 'FORCE_NEXT_ASC',
  FORCE_NEXT_DESC = 'FORCE_NEXT_DESC',
  ID_ASC = 'ID_ASC',
  ID_DESC = 'ID_DESC',
  INDEXER_COMMISSION_RATES_AVERAGE_BLOCK_RANGE_ASC = 'INDEXER_COMMISSION_RATES_AVERAGE_BLOCK_RANGE_ASC',
  INDEXER_COMMISSION_RATES_AVERAGE_BLOCK_RANGE_DESC = 'INDEXER_COMMISSION_RATES_AVERAGE_BLOCK_RANGE_DESC',
  INDEXER_COMMISSION_RATES_AVERAGE_COMMISSION_RATE_ASC = 'INDEXER_COMMISSION_RATES_AVERAGE_COMMISSION_RATE_ASC',
  INDEXER_COMMISSION_RATES_AVERAGE_COMMISSION_RATE_DESC = 'INDEXER_COMMISSION_RATES_AVERAGE_COMMISSION_RATE_DESC',
  INDEXER_COMMISSION_RATES_AVERAGE_ERA_IDX_ASC = 'INDEXER_COMMISSION_RATES_AVERAGE_ERA_IDX_ASC',
  INDEXER_COMMISSION_RATES_AVERAGE_ERA_IDX_DESC = 'INDEXER_COMMISSION_RATES_AVERAGE_ERA_IDX_DESC',
  INDEXER_COMMISSION_RATES_AVERAGE_ERA_ID_ASC = 'INDEXER_COMMISSION_RATES_AVERAGE_ERA_ID_ASC',
  INDEXER_COMMISSION_RATES_AVERAGE_ERA_ID_DESC = 'INDEXER_COMMISSION_RATES_AVERAGE_ERA_ID_DESC',
  INDEXER_COMMISSION_RATES_AVERAGE_ID_ASC = 'INDEXER_COMMISSION_RATES_AVERAGE_ID_ASC',
  INDEXER_COMMISSION_RATES_AVERAGE_ID_DESC = 'INDEXER_COMMISSION_RATES_AVERAGE_ID_DESC',
  INDEXER_COMMISSION_RATES_AVERAGE_INDEXER_ID_ASC = 'INDEXER_COMMISSION_RATES_AVERAGE_INDEXER_ID_ASC',
  INDEXER_COMMISSION_RATES_AVERAGE_INDEXER_ID_DESC = 'INDEXER_COMMISSION_RATES_AVERAGE_INDEXER_ID_DESC',
  INDEXER_COMMISSION_RATES_BY_ERA_ID__COUNT_ASC = 'INDEXER_COMMISSION_RATES_BY_ERA_ID__COUNT_ASC',
  INDEXER_COMMISSION_RATES_BY_ERA_ID__COUNT_DESC = 'INDEXER_COMMISSION_RATES_BY_ERA_ID__COUNT_DESC',
  INDEXER_COMMISSION_RATES_COUNT_ASC = 'INDEXER_COMMISSION_RATES_COUNT_ASC',
  INDEXER_COMMISSION_RATES_COUNT_DESC = 'INDEXER_COMMISSION_RATES_COUNT_DESC',
  INDEXER_COMMISSION_RATES_DISTINCT_COUNT_BLOCK_RANGE_ASC = 'INDEXER_COMMISSION_RATES_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  INDEXER_COMMISSION_RATES_DISTINCT_COUNT_BLOCK_RANGE_DESC = 'INDEXER_COMMISSION_RATES_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  INDEXER_COMMISSION_RATES_DISTINCT_COUNT_COMMISSION_RATE_ASC = 'INDEXER_COMMISSION_RATES_DISTINCT_COUNT_COMMISSION_RATE_ASC',
  INDEXER_COMMISSION_RATES_DISTINCT_COUNT_COMMISSION_RATE_DESC = 'INDEXER_COMMISSION_RATES_DISTINCT_COUNT_COMMISSION_RATE_DESC',
  INDEXER_COMMISSION_RATES_DISTINCT_COUNT_ERA_IDX_ASC = 'INDEXER_COMMISSION_RATES_DISTINCT_COUNT_ERA_IDX_ASC',
  INDEXER_COMMISSION_RATES_DISTINCT_COUNT_ERA_IDX_DESC = 'INDEXER_COMMISSION_RATES_DISTINCT_COUNT_ERA_IDX_DESC',
  INDEXER_COMMISSION_RATES_DISTINCT_COUNT_ERA_ID_ASC = 'INDEXER_COMMISSION_RATES_DISTINCT_COUNT_ERA_ID_ASC',
  INDEXER_COMMISSION_RATES_DISTINCT_COUNT_ERA_ID_DESC = 'INDEXER_COMMISSION_RATES_DISTINCT_COUNT_ERA_ID_DESC',
  INDEXER_COMMISSION_RATES_DISTINCT_COUNT_ID_ASC = 'INDEXER_COMMISSION_RATES_DISTINCT_COUNT_ID_ASC',
  INDEXER_COMMISSION_RATES_DISTINCT_COUNT_ID_DESC = 'INDEXER_COMMISSION_RATES_DISTINCT_COUNT_ID_DESC',
  INDEXER_COMMISSION_RATES_DISTINCT_COUNT_INDEXER_ID_ASC = 'INDEXER_COMMISSION_RATES_DISTINCT_COUNT_INDEXER_ID_ASC',
  INDEXER_COMMISSION_RATES_DISTINCT_COUNT_INDEXER_ID_DESC = 'INDEXER_COMMISSION_RATES_DISTINCT_COUNT_INDEXER_ID_DESC',
  INDEXER_COMMISSION_RATES_MAX_BLOCK_RANGE_ASC = 'INDEXER_COMMISSION_RATES_MAX_BLOCK_RANGE_ASC',
  INDEXER_COMMISSION_RATES_MAX_BLOCK_RANGE_DESC = 'INDEXER_COMMISSION_RATES_MAX_BLOCK_RANGE_DESC',
  INDEXER_COMMISSION_RATES_MAX_COMMISSION_RATE_ASC = 'INDEXER_COMMISSION_RATES_MAX_COMMISSION_RATE_ASC',
  INDEXER_COMMISSION_RATES_MAX_COMMISSION_RATE_DESC = 'INDEXER_COMMISSION_RATES_MAX_COMMISSION_RATE_DESC',
  INDEXER_COMMISSION_RATES_MAX_ERA_IDX_ASC = 'INDEXER_COMMISSION_RATES_MAX_ERA_IDX_ASC',
  INDEXER_COMMISSION_RATES_MAX_ERA_IDX_DESC = 'INDEXER_COMMISSION_RATES_MAX_ERA_IDX_DESC',
  INDEXER_COMMISSION_RATES_MAX_ERA_ID_ASC = 'INDEXER_COMMISSION_RATES_MAX_ERA_ID_ASC',
  INDEXER_COMMISSION_RATES_MAX_ERA_ID_DESC = 'INDEXER_COMMISSION_RATES_MAX_ERA_ID_DESC',
  INDEXER_COMMISSION_RATES_MAX_ID_ASC = 'INDEXER_COMMISSION_RATES_MAX_ID_ASC',
  INDEXER_COMMISSION_RATES_MAX_ID_DESC = 'INDEXER_COMMISSION_RATES_MAX_ID_DESC',
  INDEXER_COMMISSION_RATES_MAX_INDEXER_ID_ASC = 'INDEXER_COMMISSION_RATES_MAX_INDEXER_ID_ASC',
  INDEXER_COMMISSION_RATES_MAX_INDEXER_ID_DESC = 'INDEXER_COMMISSION_RATES_MAX_INDEXER_ID_DESC',
  INDEXER_COMMISSION_RATES_MIN_BLOCK_RANGE_ASC = 'INDEXER_COMMISSION_RATES_MIN_BLOCK_RANGE_ASC',
  INDEXER_COMMISSION_RATES_MIN_BLOCK_RANGE_DESC = 'INDEXER_COMMISSION_RATES_MIN_BLOCK_RANGE_DESC',
  INDEXER_COMMISSION_RATES_MIN_COMMISSION_RATE_ASC = 'INDEXER_COMMISSION_RATES_MIN_COMMISSION_RATE_ASC',
  INDEXER_COMMISSION_RATES_MIN_COMMISSION_RATE_DESC = 'INDEXER_COMMISSION_RATES_MIN_COMMISSION_RATE_DESC',
  INDEXER_COMMISSION_RATES_MIN_ERA_IDX_ASC = 'INDEXER_COMMISSION_RATES_MIN_ERA_IDX_ASC',
  INDEXER_COMMISSION_RATES_MIN_ERA_IDX_DESC = 'INDEXER_COMMISSION_RATES_MIN_ERA_IDX_DESC',
  INDEXER_COMMISSION_RATES_MIN_ERA_ID_ASC = 'INDEXER_COMMISSION_RATES_MIN_ERA_ID_ASC',
  INDEXER_COMMISSION_RATES_MIN_ERA_ID_DESC = 'INDEXER_COMMISSION_RATES_MIN_ERA_ID_DESC',
  INDEXER_COMMISSION_RATES_MIN_ID_ASC = 'INDEXER_COMMISSION_RATES_MIN_ID_ASC',
  INDEXER_COMMISSION_RATES_MIN_ID_DESC = 'INDEXER_COMMISSION_RATES_MIN_ID_DESC',
  INDEXER_COMMISSION_RATES_MIN_INDEXER_ID_ASC = 'INDEXER_COMMISSION_RATES_MIN_INDEXER_ID_ASC',
  INDEXER_COMMISSION_RATES_MIN_INDEXER_ID_DESC = 'INDEXER_COMMISSION_RATES_MIN_INDEXER_ID_DESC',
  INDEXER_COMMISSION_RATES_STDDEV_POPULATION_BLOCK_RANGE_ASC = 'INDEXER_COMMISSION_RATES_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  INDEXER_COMMISSION_RATES_STDDEV_POPULATION_BLOCK_RANGE_DESC = 'INDEXER_COMMISSION_RATES_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  INDEXER_COMMISSION_RATES_STDDEV_POPULATION_COMMISSION_RATE_ASC = 'INDEXER_COMMISSION_RATES_STDDEV_POPULATION_COMMISSION_RATE_ASC',
  INDEXER_COMMISSION_RATES_STDDEV_POPULATION_COMMISSION_RATE_DESC = 'INDEXER_COMMISSION_RATES_STDDEV_POPULATION_COMMISSION_RATE_DESC',
  INDEXER_COMMISSION_RATES_STDDEV_POPULATION_ERA_IDX_ASC = 'INDEXER_COMMISSION_RATES_STDDEV_POPULATION_ERA_IDX_ASC',
  INDEXER_COMMISSION_RATES_STDDEV_POPULATION_ERA_IDX_DESC = 'INDEXER_COMMISSION_RATES_STDDEV_POPULATION_ERA_IDX_DESC',
  INDEXER_COMMISSION_RATES_STDDEV_POPULATION_ERA_ID_ASC = 'INDEXER_COMMISSION_RATES_STDDEV_POPULATION_ERA_ID_ASC',
  INDEXER_COMMISSION_RATES_STDDEV_POPULATION_ERA_ID_DESC = 'INDEXER_COMMISSION_RATES_STDDEV_POPULATION_ERA_ID_DESC',
  INDEXER_COMMISSION_RATES_STDDEV_POPULATION_ID_ASC = 'INDEXER_COMMISSION_RATES_STDDEV_POPULATION_ID_ASC',
  INDEXER_COMMISSION_RATES_STDDEV_POPULATION_ID_DESC = 'INDEXER_COMMISSION_RATES_STDDEV_POPULATION_ID_DESC',
  INDEXER_COMMISSION_RATES_STDDEV_POPULATION_INDEXER_ID_ASC = 'INDEXER_COMMISSION_RATES_STDDEV_POPULATION_INDEXER_ID_ASC',
  INDEXER_COMMISSION_RATES_STDDEV_POPULATION_INDEXER_ID_DESC = 'INDEXER_COMMISSION_RATES_STDDEV_POPULATION_INDEXER_ID_DESC',
  INDEXER_COMMISSION_RATES_STDDEV_SAMPLE_BLOCK_RANGE_ASC = 'INDEXER_COMMISSION_RATES_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  INDEXER_COMMISSION_RATES_STDDEV_SAMPLE_BLOCK_RANGE_DESC = 'INDEXER_COMMISSION_RATES_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  INDEXER_COMMISSION_RATES_STDDEV_SAMPLE_COMMISSION_RATE_ASC = 'INDEXER_COMMISSION_RATES_STDDEV_SAMPLE_COMMISSION_RATE_ASC',
  INDEXER_COMMISSION_RATES_STDDEV_SAMPLE_COMMISSION_RATE_DESC = 'INDEXER_COMMISSION_RATES_STDDEV_SAMPLE_COMMISSION_RATE_DESC',
  INDEXER_COMMISSION_RATES_STDDEV_SAMPLE_ERA_IDX_ASC = 'INDEXER_COMMISSION_RATES_STDDEV_SAMPLE_ERA_IDX_ASC',
  INDEXER_COMMISSION_RATES_STDDEV_SAMPLE_ERA_IDX_DESC = 'INDEXER_COMMISSION_RATES_STDDEV_SAMPLE_ERA_IDX_DESC',
  INDEXER_COMMISSION_RATES_STDDEV_SAMPLE_ERA_ID_ASC = 'INDEXER_COMMISSION_RATES_STDDEV_SAMPLE_ERA_ID_ASC',
  INDEXER_COMMISSION_RATES_STDDEV_SAMPLE_ERA_ID_DESC = 'INDEXER_COMMISSION_RATES_STDDEV_SAMPLE_ERA_ID_DESC',
  INDEXER_COMMISSION_RATES_STDDEV_SAMPLE_ID_ASC = 'INDEXER_COMMISSION_RATES_STDDEV_SAMPLE_ID_ASC',
  INDEXER_COMMISSION_RATES_STDDEV_SAMPLE_ID_DESC = 'INDEXER_COMMISSION_RATES_STDDEV_SAMPLE_ID_DESC',
  INDEXER_COMMISSION_RATES_STDDEV_SAMPLE_INDEXER_ID_ASC = 'INDEXER_COMMISSION_RATES_STDDEV_SAMPLE_INDEXER_ID_ASC',
  INDEXER_COMMISSION_RATES_STDDEV_SAMPLE_INDEXER_ID_DESC = 'INDEXER_COMMISSION_RATES_STDDEV_SAMPLE_INDEXER_ID_DESC',
  INDEXER_COMMISSION_RATES_SUM_BLOCK_RANGE_ASC = 'INDEXER_COMMISSION_RATES_SUM_BLOCK_RANGE_ASC',
  INDEXER_COMMISSION_RATES_SUM_BLOCK_RANGE_DESC = 'INDEXER_COMMISSION_RATES_SUM_BLOCK_RANGE_DESC',
  INDEXER_COMMISSION_RATES_SUM_COMMISSION_RATE_ASC = 'INDEXER_COMMISSION_RATES_SUM_COMMISSION_RATE_ASC',
  INDEXER_COMMISSION_RATES_SUM_COMMISSION_RATE_DESC = 'INDEXER_COMMISSION_RATES_SUM_COMMISSION_RATE_DESC',
  INDEXER_COMMISSION_RATES_SUM_ERA_IDX_ASC = 'INDEXER_COMMISSION_RATES_SUM_ERA_IDX_ASC',
  INDEXER_COMMISSION_RATES_SUM_ERA_IDX_DESC = 'INDEXER_COMMISSION_RATES_SUM_ERA_IDX_DESC',
  INDEXER_COMMISSION_RATES_SUM_ERA_ID_ASC = 'INDEXER_COMMISSION_RATES_SUM_ERA_ID_ASC',
  INDEXER_COMMISSION_RATES_SUM_ERA_ID_DESC = 'INDEXER_COMMISSION_RATES_SUM_ERA_ID_DESC',
  INDEXER_COMMISSION_RATES_SUM_ID_ASC = 'INDEXER_COMMISSION_RATES_SUM_ID_ASC',
  INDEXER_COMMISSION_RATES_SUM_ID_DESC = 'INDEXER_COMMISSION_RATES_SUM_ID_DESC',
  INDEXER_COMMISSION_RATES_SUM_INDEXER_ID_ASC = 'INDEXER_COMMISSION_RATES_SUM_INDEXER_ID_ASC',
  INDEXER_COMMISSION_RATES_SUM_INDEXER_ID_DESC = 'INDEXER_COMMISSION_RATES_SUM_INDEXER_ID_DESC',
  INDEXER_COMMISSION_RATES_VARIANCE_POPULATION_BLOCK_RANGE_ASC = 'INDEXER_COMMISSION_RATES_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  INDEXER_COMMISSION_RATES_VARIANCE_POPULATION_BLOCK_RANGE_DESC = 'INDEXER_COMMISSION_RATES_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  INDEXER_COMMISSION_RATES_VARIANCE_POPULATION_COMMISSION_RATE_ASC = 'INDEXER_COMMISSION_RATES_VARIANCE_POPULATION_COMMISSION_RATE_ASC',
  INDEXER_COMMISSION_RATES_VARIANCE_POPULATION_COMMISSION_RATE_DESC = 'INDEXER_COMMISSION_RATES_VARIANCE_POPULATION_COMMISSION_RATE_DESC',
  INDEXER_COMMISSION_RATES_VARIANCE_POPULATION_ERA_IDX_ASC = 'INDEXER_COMMISSION_RATES_VARIANCE_POPULATION_ERA_IDX_ASC',
  INDEXER_COMMISSION_RATES_VARIANCE_POPULATION_ERA_IDX_DESC = 'INDEXER_COMMISSION_RATES_VARIANCE_POPULATION_ERA_IDX_DESC',
  INDEXER_COMMISSION_RATES_VARIANCE_POPULATION_ERA_ID_ASC = 'INDEXER_COMMISSION_RATES_VARIANCE_POPULATION_ERA_ID_ASC',
  INDEXER_COMMISSION_RATES_VARIANCE_POPULATION_ERA_ID_DESC = 'INDEXER_COMMISSION_RATES_VARIANCE_POPULATION_ERA_ID_DESC',
  INDEXER_COMMISSION_RATES_VARIANCE_POPULATION_ID_ASC = 'INDEXER_COMMISSION_RATES_VARIANCE_POPULATION_ID_ASC',
  INDEXER_COMMISSION_RATES_VARIANCE_POPULATION_ID_DESC = 'INDEXER_COMMISSION_RATES_VARIANCE_POPULATION_ID_DESC',
  INDEXER_COMMISSION_RATES_VARIANCE_POPULATION_INDEXER_ID_ASC = 'INDEXER_COMMISSION_RATES_VARIANCE_POPULATION_INDEXER_ID_ASC',
  INDEXER_COMMISSION_RATES_VARIANCE_POPULATION_INDEXER_ID_DESC = 'INDEXER_COMMISSION_RATES_VARIANCE_POPULATION_INDEXER_ID_DESC',
  INDEXER_COMMISSION_RATES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC = 'INDEXER_COMMISSION_RATES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  INDEXER_COMMISSION_RATES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC = 'INDEXER_COMMISSION_RATES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  INDEXER_COMMISSION_RATES_VARIANCE_SAMPLE_COMMISSION_RATE_ASC = 'INDEXER_COMMISSION_RATES_VARIANCE_SAMPLE_COMMISSION_RATE_ASC',
  INDEXER_COMMISSION_RATES_VARIANCE_SAMPLE_COMMISSION_RATE_DESC = 'INDEXER_COMMISSION_RATES_VARIANCE_SAMPLE_COMMISSION_RATE_DESC',
  INDEXER_COMMISSION_RATES_VARIANCE_SAMPLE_ERA_IDX_ASC = 'INDEXER_COMMISSION_RATES_VARIANCE_SAMPLE_ERA_IDX_ASC',
  INDEXER_COMMISSION_RATES_VARIANCE_SAMPLE_ERA_IDX_DESC = 'INDEXER_COMMISSION_RATES_VARIANCE_SAMPLE_ERA_IDX_DESC',
  INDEXER_COMMISSION_RATES_VARIANCE_SAMPLE_ERA_ID_ASC = 'INDEXER_COMMISSION_RATES_VARIANCE_SAMPLE_ERA_ID_ASC',
  INDEXER_COMMISSION_RATES_VARIANCE_SAMPLE_ERA_ID_DESC = 'INDEXER_COMMISSION_RATES_VARIANCE_SAMPLE_ERA_ID_DESC',
  INDEXER_COMMISSION_RATES_VARIANCE_SAMPLE_ID_ASC = 'INDEXER_COMMISSION_RATES_VARIANCE_SAMPLE_ID_ASC',
  INDEXER_COMMISSION_RATES_VARIANCE_SAMPLE_ID_DESC = 'INDEXER_COMMISSION_RATES_VARIANCE_SAMPLE_ID_DESC',
  INDEXER_COMMISSION_RATES_VARIANCE_SAMPLE_INDEXER_ID_ASC = 'INDEXER_COMMISSION_RATES_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  INDEXER_COMMISSION_RATES_VARIANCE_SAMPLE_INDEXER_ID_DESC = 'INDEXER_COMMISSION_RATES_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  INDEXER_STAKES_AVERAGE_BLOCK_RANGE_ASC = 'INDEXER_STAKES_AVERAGE_BLOCK_RANGE_ASC',
  INDEXER_STAKES_AVERAGE_BLOCK_RANGE_DESC = 'INDEXER_STAKES_AVERAGE_BLOCK_RANGE_DESC',
  INDEXER_STAKES_AVERAGE_DELEGATOR_STAKE_ASC = 'INDEXER_STAKES_AVERAGE_DELEGATOR_STAKE_ASC',
  INDEXER_STAKES_AVERAGE_DELEGATOR_STAKE_DESC = 'INDEXER_STAKES_AVERAGE_DELEGATOR_STAKE_DESC',
  INDEXER_STAKES_AVERAGE_ERA_IDX_ASC = 'INDEXER_STAKES_AVERAGE_ERA_IDX_ASC',
  INDEXER_STAKES_AVERAGE_ERA_IDX_DESC = 'INDEXER_STAKES_AVERAGE_ERA_IDX_DESC',
  INDEXER_STAKES_AVERAGE_ERA_ID_ASC = 'INDEXER_STAKES_AVERAGE_ERA_ID_ASC',
  INDEXER_STAKES_AVERAGE_ERA_ID_DESC = 'INDEXER_STAKES_AVERAGE_ERA_ID_DESC',
  INDEXER_STAKES_AVERAGE_ID_ASC = 'INDEXER_STAKES_AVERAGE_ID_ASC',
  INDEXER_STAKES_AVERAGE_ID_DESC = 'INDEXER_STAKES_AVERAGE_ID_DESC',
  INDEXER_STAKES_AVERAGE_INDEXER_ID_ASC = 'INDEXER_STAKES_AVERAGE_INDEXER_ID_ASC',
  INDEXER_STAKES_AVERAGE_INDEXER_ID_DESC = 'INDEXER_STAKES_AVERAGE_INDEXER_ID_DESC',
  INDEXER_STAKES_AVERAGE_INDEXER_STAKE_ASC = 'INDEXER_STAKES_AVERAGE_INDEXER_STAKE_ASC',
  INDEXER_STAKES_AVERAGE_INDEXER_STAKE_DESC = 'INDEXER_STAKES_AVERAGE_INDEXER_STAKE_DESC',
  INDEXER_STAKES_AVERAGE_TOTAL_STAKE_ASC = 'INDEXER_STAKES_AVERAGE_TOTAL_STAKE_ASC',
  INDEXER_STAKES_AVERAGE_TOTAL_STAKE_DESC = 'INDEXER_STAKES_AVERAGE_TOTAL_STAKE_DESC',
  INDEXER_STAKES_BY_ERA_ID__COUNT_ASC = 'INDEXER_STAKES_BY_ERA_ID__COUNT_ASC',
  INDEXER_STAKES_BY_ERA_ID__COUNT_DESC = 'INDEXER_STAKES_BY_ERA_ID__COUNT_DESC',
  INDEXER_STAKES_COUNT_ASC = 'INDEXER_STAKES_COUNT_ASC',
  INDEXER_STAKES_COUNT_DESC = 'INDEXER_STAKES_COUNT_DESC',
  INDEXER_STAKES_DISTINCT_COUNT_BLOCK_RANGE_ASC = 'INDEXER_STAKES_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  INDEXER_STAKES_DISTINCT_COUNT_BLOCK_RANGE_DESC = 'INDEXER_STAKES_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  INDEXER_STAKES_DISTINCT_COUNT_DELEGATOR_STAKE_ASC = 'INDEXER_STAKES_DISTINCT_COUNT_DELEGATOR_STAKE_ASC',
  INDEXER_STAKES_DISTINCT_COUNT_DELEGATOR_STAKE_DESC = 'INDEXER_STAKES_DISTINCT_COUNT_DELEGATOR_STAKE_DESC',
  INDEXER_STAKES_DISTINCT_COUNT_ERA_IDX_ASC = 'INDEXER_STAKES_DISTINCT_COUNT_ERA_IDX_ASC',
  INDEXER_STAKES_DISTINCT_COUNT_ERA_IDX_DESC = 'INDEXER_STAKES_DISTINCT_COUNT_ERA_IDX_DESC',
  INDEXER_STAKES_DISTINCT_COUNT_ERA_ID_ASC = 'INDEXER_STAKES_DISTINCT_COUNT_ERA_ID_ASC',
  INDEXER_STAKES_DISTINCT_COUNT_ERA_ID_DESC = 'INDEXER_STAKES_DISTINCT_COUNT_ERA_ID_DESC',
  INDEXER_STAKES_DISTINCT_COUNT_ID_ASC = 'INDEXER_STAKES_DISTINCT_COUNT_ID_ASC',
  INDEXER_STAKES_DISTINCT_COUNT_ID_DESC = 'INDEXER_STAKES_DISTINCT_COUNT_ID_DESC',
  INDEXER_STAKES_DISTINCT_COUNT_INDEXER_ID_ASC = 'INDEXER_STAKES_DISTINCT_COUNT_INDEXER_ID_ASC',
  INDEXER_STAKES_DISTINCT_COUNT_INDEXER_ID_DESC = 'INDEXER_STAKES_DISTINCT_COUNT_INDEXER_ID_DESC',
  INDEXER_STAKES_DISTINCT_COUNT_INDEXER_STAKE_ASC = 'INDEXER_STAKES_DISTINCT_COUNT_INDEXER_STAKE_ASC',
  INDEXER_STAKES_DISTINCT_COUNT_INDEXER_STAKE_DESC = 'INDEXER_STAKES_DISTINCT_COUNT_INDEXER_STAKE_DESC',
  INDEXER_STAKES_DISTINCT_COUNT_TOTAL_STAKE_ASC = 'INDEXER_STAKES_DISTINCT_COUNT_TOTAL_STAKE_ASC',
  INDEXER_STAKES_DISTINCT_COUNT_TOTAL_STAKE_DESC = 'INDEXER_STAKES_DISTINCT_COUNT_TOTAL_STAKE_DESC',
  INDEXER_STAKES_MAX_BLOCK_RANGE_ASC = 'INDEXER_STAKES_MAX_BLOCK_RANGE_ASC',
  INDEXER_STAKES_MAX_BLOCK_RANGE_DESC = 'INDEXER_STAKES_MAX_BLOCK_RANGE_DESC',
  INDEXER_STAKES_MAX_DELEGATOR_STAKE_ASC = 'INDEXER_STAKES_MAX_DELEGATOR_STAKE_ASC',
  INDEXER_STAKES_MAX_DELEGATOR_STAKE_DESC = 'INDEXER_STAKES_MAX_DELEGATOR_STAKE_DESC',
  INDEXER_STAKES_MAX_ERA_IDX_ASC = 'INDEXER_STAKES_MAX_ERA_IDX_ASC',
  INDEXER_STAKES_MAX_ERA_IDX_DESC = 'INDEXER_STAKES_MAX_ERA_IDX_DESC',
  INDEXER_STAKES_MAX_ERA_ID_ASC = 'INDEXER_STAKES_MAX_ERA_ID_ASC',
  INDEXER_STAKES_MAX_ERA_ID_DESC = 'INDEXER_STAKES_MAX_ERA_ID_DESC',
  INDEXER_STAKES_MAX_ID_ASC = 'INDEXER_STAKES_MAX_ID_ASC',
  INDEXER_STAKES_MAX_ID_DESC = 'INDEXER_STAKES_MAX_ID_DESC',
  INDEXER_STAKES_MAX_INDEXER_ID_ASC = 'INDEXER_STAKES_MAX_INDEXER_ID_ASC',
  INDEXER_STAKES_MAX_INDEXER_ID_DESC = 'INDEXER_STAKES_MAX_INDEXER_ID_DESC',
  INDEXER_STAKES_MAX_INDEXER_STAKE_ASC = 'INDEXER_STAKES_MAX_INDEXER_STAKE_ASC',
  INDEXER_STAKES_MAX_INDEXER_STAKE_DESC = 'INDEXER_STAKES_MAX_INDEXER_STAKE_DESC',
  INDEXER_STAKES_MAX_TOTAL_STAKE_ASC = 'INDEXER_STAKES_MAX_TOTAL_STAKE_ASC',
  INDEXER_STAKES_MAX_TOTAL_STAKE_DESC = 'INDEXER_STAKES_MAX_TOTAL_STAKE_DESC',
  INDEXER_STAKES_MIN_BLOCK_RANGE_ASC = 'INDEXER_STAKES_MIN_BLOCK_RANGE_ASC',
  INDEXER_STAKES_MIN_BLOCK_RANGE_DESC = 'INDEXER_STAKES_MIN_BLOCK_RANGE_DESC',
  INDEXER_STAKES_MIN_DELEGATOR_STAKE_ASC = 'INDEXER_STAKES_MIN_DELEGATOR_STAKE_ASC',
  INDEXER_STAKES_MIN_DELEGATOR_STAKE_DESC = 'INDEXER_STAKES_MIN_DELEGATOR_STAKE_DESC',
  INDEXER_STAKES_MIN_ERA_IDX_ASC = 'INDEXER_STAKES_MIN_ERA_IDX_ASC',
  INDEXER_STAKES_MIN_ERA_IDX_DESC = 'INDEXER_STAKES_MIN_ERA_IDX_DESC',
  INDEXER_STAKES_MIN_ERA_ID_ASC = 'INDEXER_STAKES_MIN_ERA_ID_ASC',
  INDEXER_STAKES_MIN_ERA_ID_DESC = 'INDEXER_STAKES_MIN_ERA_ID_DESC',
  INDEXER_STAKES_MIN_ID_ASC = 'INDEXER_STAKES_MIN_ID_ASC',
  INDEXER_STAKES_MIN_ID_DESC = 'INDEXER_STAKES_MIN_ID_DESC',
  INDEXER_STAKES_MIN_INDEXER_ID_ASC = 'INDEXER_STAKES_MIN_INDEXER_ID_ASC',
  INDEXER_STAKES_MIN_INDEXER_ID_DESC = 'INDEXER_STAKES_MIN_INDEXER_ID_DESC',
  INDEXER_STAKES_MIN_INDEXER_STAKE_ASC = 'INDEXER_STAKES_MIN_INDEXER_STAKE_ASC',
  INDEXER_STAKES_MIN_INDEXER_STAKE_DESC = 'INDEXER_STAKES_MIN_INDEXER_STAKE_DESC',
  INDEXER_STAKES_MIN_TOTAL_STAKE_ASC = 'INDEXER_STAKES_MIN_TOTAL_STAKE_ASC',
  INDEXER_STAKES_MIN_TOTAL_STAKE_DESC = 'INDEXER_STAKES_MIN_TOTAL_STAKE_DESC',
  INDEXER_STAKES_STDDEV_POPULATION_BLOCK_RANGE_ASC = 'INDEXER_STAKES_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  INDEXER_STAKES_STDDEV_POPULATION_BLOCK_RANGE_DESC = 'INDEXER_STAKES_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  INDEXER_STAKES_STDDEV_POPULATION_DELEGATOR_STAKE_ASC = 'INDEXER_STAKES_STDDEV_POPULATION_DELEGATOR_STAKE_ASC',
  INDEXER_STAKES_STDDEV_POPULATION_DELEGATOR_STAKE_DESC = 'INDEXER_STAKES_STDDEV_POPULATION_DELEGATOR_STAKE_DESC',
  INDEXER_STAKES_STDDEV_POPULATION_ERA_IDX_ASC = 'INDEXER_STAKES_STDDEV_POPULATION_ERA_IDX_ASC',
  INDEXER_STAKES_STDDEV_POPULATION_ERA_IDX_DESC = 'INDEXER_STAKES_STDDEV_POPULATION_ERA_IDX_DESC',
  INDEXER_STAKES_STDDEV_POPULATION_ERA_ID_ASC = 'INDEXER_STAKES_STDDEV_POPULATION_ERA_ID_ASC',
  INDEXER_STAKES_STDDEV_POPULATION_ERA_ID_DESC = 'INDEXER_STAKES_STDDEV_POPULATION_ERA_ID_DESC',
  INDEXER_STAKES_STDDEV_POPULATION_ID_ASC = 'INDEXER_STAKES_STDDEV_POPULATION_ID_ASC',
  INDEXER_STAKES_STDDEV_POPULATION_ID_DESC = 'INDEXER_STAKES_STDDEV_POPULATION_ID_DESC',
  INDEXER_STAKES_STDDEV_POPULATION_INDEXER_ID_ASC = 'INDEXER_STAKES_STDDEV_POPULATION_INDEXER_ID_ASC',
  INDEXER_STAKES_STDDEV_POPULATION_INDEXER_ID_DESC = 'INDEXER_STAKES_STDDEV_POPULATION_INDEXER_ID_DESC',
  INDEXER_STAKES_STDDEV_POPULATION_INDEXER_STAKE_ASC = 'INDEXER_STAKES_STDDEV_POPULATION_INDEXER_STAKE_ASC',
  INDEXER_STAKES_STDDEV_POPULATION_INDEXER_STAKE_DESC = 'INDEXER_STAKES_STDDEV_POPULATION_INDEXER_STAKE_DESC',
  INDEXER_STAKES_STDDEV_POPULATION_TOTAL_STAKE_ASC = 'INDEXER_STAKES_STDDEV_POPULATION_TOTAL_STAKE_ASC',
  INDEXER_STAKES_STDDEV_POPULATION_TOTAL_STAKE_DESC = 'INDEXER_STAKES_STDDEV_POPULATION_TOTAL_STAKE_DESC',
  INDEXER_STAKES_STDDEV_SAMPLE_BLOCK_RANGE_ASC = 'INDEXER_STAKES_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  INDEXER_STAKES_STDDEV_SAMPLE_BLOCK_RANGE_DESC = 'INDEXER_STAKES_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  INDEXER_STAKES_STDDEV_SAMPLE_DELEGATOR_STAKE_ASC = 'INDEXER_STAKES_STDDEV_SAMPLE_DELEGATOR_STAKE_ASC',
  INDEXER_STAKES_STDDEV_SAMPLE_DELEGATOR_STAKE_DESC = 'INDEXER_STAKES_STDDEV_SAMPLE_DELEGATOR_STAKE_DESC',
  INDEXER_STAKES_STDDEV_SAMPLE_ERA_IDX_ASC = 'INDEXER_STAKES_STDDEV_SAMPLE_ERA_IDX_ASC',
  INDEXER_STAKES_STDDEV_SAMPLE_ERA_IDX_DESC = 'INDEXER_STAKES_STDDEV_SAMPLE_ERA_IDX_DESC',
  INDEXER_STAKES_STDDEV_SAMPLE_ERA_ID_ASC = 'INDEXER_STAKES_STDDEV_SAMPLE_ERA_ID_ASC',
  INDEXER_STAKES_STDDEV_SAMPLE_ERA_ID_DESC = 'INDEXER_STAKES_STDDEV_SAMPLE_ERA_ID_DESC',
  INDEXER_STAKES_STDDEV_SAMPLE_ID_ASC = 'INDEXER_STAKES_STDDEV_SAMPLE_ID_ASC',
  INDEXER_STAKES_STDDEV_SAMPLE_ID_DESC = 'INDEXER_STAKES_STDDEV_SAMPLE_ID_DESC',
  INDEXER_STAKES_STDDEV_SAMPLE_INDEXER_ID_ASC = 'INDEXER_STAKES_STDDEV_SAMPLE_INDEXER_ID_ASC',
  INDEXER_STAKES_STDDEV_SAMPLE_INDEXER_ID_DESC = 'INDEXER_STAKES_STDDEV_SAMPLE_INDEXER_ID_DESC',
  INDEXER_STAKES_STDDEV_SAMPLE_INDEXER_STAKE_ASC = 'INDEXER_STAKES_STDDEV_SAMPLE_INDEXER_STAKE_ASC',
  INDEXER_STAKES_STDDEV_SAMPLE_INDEXER_STAKE_DESC = 'INDEXER_STAKES_STDDEV_SAMPLE_INDEXER_STAKE_DESC',
  INDEXER_STAKES_STDDEV_SAMPLE_TOTAL_STAKE_ASC = 'INDEXER_STAKES_STDDEV_SAMPLE_TOTAL_STAKE_ASC',
  INDEXER_STAKES_STDDEV_SAMPLE_TOTAL_STAKE_DESC = 'INDEXER_STAKES_STDDEV_SAMPLE_TOTAL_STAKE_DESC',
  INDEXER_STAKES_SUM_BLOCK_RANGE_ASC = 'INDEXER_STAKES_SUM_BLOCK_RANGE_ASC',
  INDEXER_STAKES_SUM_BLOCK_RANGE_DESC = 'INDEXER_STAKES_SUM_BLOCK_RANGE_DESC',
  INDEXER_STAKES_SUM_DELEGATOR_STAKE_ASC = 'INDEXER_STAKES_SUM_DELEGATOR_STAKE_ASC',
  INDEXER_STAKES_SUM_DELEGATOR_STAKE_DESC = 'INDEXER_STAKES_SUM_DELEGATOR_STAKE_DESC',
  INDEXER_STAKES_SUM_ERA_IDX_ASC = 'INDEXER_STAKES_SUM_ERA_IDX_ASC',
  INDEXER_STAKES_SUM_ERA_IDX_DESC = 'INDEXER_STAKES_SUM_ERA_IDX_DESC',
  INDEXER_STAKES_SUM_ERA_ID_ASC = 'INDEXER_STAKES_SUM_ERA_ID_ASC',
  INDEXER_STAKES_SUM_ERA_ID_DESC = 'INDEXER_STAKES_SUM_ERA_ID_DESC',
  INDEXER_STAKES_SUM_ID_ASC = 'INDEXER_STAKES_SUM_ID_ASC',
  INDEXER_STAKES_SUM_ID_DESC = 'INDEXER_STAKES_SUM_ID_DESC',
  INDEXER_STAKES_SUM_INDEXER_ID_ASC = 'INDEXER_STAKES_SUM_INDEXER_ID_ASC',
  INDEXER_STAKES_SUM_INDEXER_ID_DESC = 'INDEXER_STAKES_SUM_INDEXER_ID_DESC',
  INDEXER_STAKES_SUM_INDEXER_STAKE_ASC = 'INDEXER_STAKES_SUM_INDEXER_STAKE_ASC',
  INDEXER_STAKES_SUM_INDEXER_STAKE_DESC = 'INDEXER_STAKES_SUM_INDEXER_STAKE_DESC',
  INDEXER_STAKES_SUM_TOTAL_STAKE_ASC = 'INDEXER_STAKES_SUM_TOTAL_STAKE_ASC',
  INDEXER_STAKES_SUM_TOTAL_STAKE_DESC = 'INDEXER_STAKES_SUM_TOTAL_STAKE_DESC',
  INDEXER_STAKES_VARIANCE_POPULATION_BLOCK_RANGE_ASC = 'INDEXER_STAKES_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  INDEXER_STAKES_VARIANCE_POPULATION_BLOCK_RANGE_DESC = 'INDEXER_STAKES_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  INDEXER_STAKES_VARIANCE_POPULATION_DELEGATOR_STAKE_ASC = 'INDEXER_STAKES_VARIANCE_POPULATION_DELEGATOR_STAKE_ASC',
  INDEXER_STAKES_VARIANCE_POPULATION_DELEGATOR_STAKE_DESC = 'INDEXER_STAKES_VARIANCE_POPULATION_DELEGATOR_STAKE_DESC',
  INDEXER_STAKES_VARIANCE_POPULATION_ERA_IDX_ASC = 'INDEXER_STAKES_VARIANCE_POPULATION_ERA_IDX_ASC',
  INDEXER_STAKES_VARIANCE_POPULATION_ERA_IDX_DESC = 'INDEXER_STAKES_VARIANCE_POPULATION_ERA_IDX_DESC',
  INDEXER_STAKES_VARIANCE_POPULATION_ERA_ID_ASC = 'INDEXER_STAKES_VARIANCE_POPULATION_ERA_ID_ASC',
  INDEXER_STAKES_VARIANCE_POPULATION_ERA_ID_DESC = 'INDEXER_STAKES_VARIANCE_POPULATION_ERA_ID_DESC',
  INDEXER_STAKES_VARIANCE_POPULATION_ID_ASC = 'INDEXER_STAKES_VARIANCE_POPULATION_ID_ASC',
  INDEXER_STAKES_VARIANCE_POPULATION_ID_DESC = 'INDEXER_STAKES_VARIANCE_POPULATION_ID_DESC',
  INDEXER_STAKES_VARIANCE_POPULATION_INDEXER_ID_ASC = 'INDEXER_STAKES_VARIANCE_POPULATION_INDEXER_ID_ASC',
  INDEXER_STAKES_VARIANCE_POPULATION_INDEXER_ID_DESC = 'INDEXER_STAKES_VARIANCE_POPULATION_INDEXER_ID_DESC',
  INDEXER_STAKES_VARIANCE_POPULATION_INDEXER_STAKE_ASC = 'INDEXER_STAKES_VARIANCE_POPULATION_INDEXER_STAKE_ASC',
  INDEXER_STAKES_VARIANCE_POPULATION_INDEXER_STAKE_DESC = 'INDEXER_STAKES_VARIANCE_POPULATION_INDEXER_STAKE_DESC',
  INDEXER_STAKES_VARIANCE_POPULATION_TOTAL_STAKE_ASC = 'INDEXER_STAKES_VARIANCE_POPULATION_TOTAL_STAKE_ASC',
  INDEXER_STAKES_VARIANCE_POPULATION_TOTAL_STAKE_DESC = 'INDEXER_STAKES_VARIANCE_POPULATION_TOTAL_STAKE_DESC',
  INDEXER_STAKES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC = 'INDEXER_STAKES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  INDEXER_STAKES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC = 'INDEXER_STAKES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  INDEXER_STAKES_VARIANCE_SAMPLE_DELEGATOR_STAKE_ASC = 'INDEXER_STAKES_VARIANCE_SAMPLE_DELEGATOR_STAKE_ASC',
  INDEXER_STAKES_VARIANCE_SAMPLE_DELEGATOR_STAKE_DESC = 'INDEXER_STAKES_VARIANCE_SAMPLE_DELEGATOR_STAKE_DESC',
  INDEXER_STAKES_VARIANCE_SAMPLE_ERA_IDX_ASC = 'INDEXER_STAKES_VARIANCE_SAMPLE_ERA_IDX_ASC',
  INDEXER_STAKES_VARIANCE_SAMPLE_ERA_IDX_DESC = 'INDEXER_STAKES_VARIANCE_SAMPLE_ERA_IDX_DESC',
  INDEXER_STAKES_VARIANCE_SAMPLE_ERA_ID_ASC = 'INDEXER_STAKES_VARIANCE_SAMPLE_ERA_ID_ASC',
  INDEXER_STAKES_VARIANCE_SAMPLE_ERA_ID_DESC = 'INDEXER_STAKES_VARIANCE_SAMPLE_ERA_ID_DESC',
  INDEXER_STAKES_VARIANCE_SAMPLE_ID_ASC = 'INDEXER_STAKES_VARIANCE_SAMPLE_ID_ASC',
  INDEXER_STAKES_VARIANCE_SAMPLE_ID_DESC = 'INDEXER_STAKES_VARIANCE_SAMPLE_ID_DESC',
  INDEXER_STAKES_VARIANCE_SAMPLE_INDEXER_ID_ASC = 'INDEXER_STAKES_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  INDEXER_STAKES_VARIANCE_SAMPLE_INDEXER_ID_DESC = 'INDEXER_STAKES_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  INDEXER_STAKES_VARIANCE_SAMPLE_INDEXER_STAKE_ASC = 'INDEXER_STAKES_VARIANCE_SAMPLE_INDEXER_STAKE_ASC',
  INDEXER_STAKES_VARIANCE_SAMPLE_INDEXER_STAKE_DESC = 'INDEXER_STAKES_VARIANCE_SAMPLE_INDEXER_STAKE_DESC',
  INDEXER_STAKES_VARIANCE_SAMPLE_TOTAL_STAKE_ASC = 'INDEXER_STAKES_VARIANCE_SAMPLE_TOTAL_STAKE_ASC',
  INDEXER_STAKES_VARIANCE_SAMPLE_TOTAL_STAKE_DESC = 'INDEXER_STAKES_VARIANCE_SAMPLE_TOTAL_STAKE_DESC',
  INDEXER_STAKE_SUMMARIES_AVERAGE_BLOCK_RANGE_ASC = 'INDEXER_STAKE_SUMMARIES_AVERAGE_BLOCK_RANGE_ASC',
  INDEXER_STAKE_SUMMARIES_AVERAGE_BLOCK_RANGE_DESC = 'INDEXER_STAKE_SUMMARIES_AVERAGE_BLOCK_RANGE_DESC',
  INDEXER_STAKE_SUMMARIES_AVERAGE_DELEGATOR_STAKE_ASC = 'INDEXER_STAKE_SUMMARIES_AVERAGE_DELEGATOR_STAKE_ASC',
  INDEXER_STAKE_SUMMARIES_AVERAGE_DELEGATOR_STAKE_DESC = 'INDEXER_STAKE_SUMMARIES_AVERAGE_DELEGATOR_STAKE_DESC',
  INDEXER_STAKE_SUMMARIES_AVERAGE_ERA_IDX_ASC = 'INDEXER_STAKE_SUMMARIES_AVERAGE_ERA_IDX_ASC',
  INDEXER_STAKE_SUMMARIES_AVERAGE_ERA_IDX_DESC = 'INDEXER_STAKE_SUMMARIES_AVERAGE_ERA_IDX_DESC',
  INDEXER_STAKE_SUMMARIES_AVERAGE_ERA_ID_ASC = 'INDEXER_STAKE_SUMMARIES_AVERAGE_ERA_ID_ASC',
  INDEXER_STAKE_SUMMARIES_AVERAGE_ERA_ID_DESC = 'INDEXER_STAKE_SUMMARIES_AVERAGE_ERA_ID_DESC',
  INDEXER_STAKE_SUMMARIES_AVERAGE_ID_ASC = 'INDEXER_STAKE_SUMMARIES_AVERAGE_ID_ASC',
  INDEXER_STAKE_SUMMARIES_AVERAGE_ID_DESC = 'INDEXER_STAKE_SUMMARIES_AVERAGE_ID_DESC',
  INDEXER_STAKE_SUMMARIES_AVERAGE_INDEXER_STAKE_ASC = 'INDEXER_STAKE_SUMMARIES_AVERAGE_INDEXER_STAKE_ASC',
  INDEXER_STAKE_SUMMARIES_AVERAGE_INDEXER_STAKE_DESC = 'INDEXER_STAKE_SUMMARIES_AVERAGE_INDEXER_STAKE_DESC',
  INDEXER_STAKE_SUMMARIES_AVERAGE_NEXT_DELEGATOR_STAKE_ASC = 'INDEXER_STAKE_SUMMARIES_AVERAGE_NEXT_DELEGATOR_STAKE_ASC',
  INDEXER_STAKE_SUMMARIES_AVERAGE_NEXT_DELEGATOR_STAKE_DESC = 'INDEXER_STAKE_SUMMARIES_AVERAGE_NEXT_DELEGATOR_STAKE_DESC',
  INDEXER_STAKE_SUMMARIES_AVERAGE_NEXT_INDEXER_STAKE_ASC = 'INDEXER_STAKE_SUMMARIES_AVERAGE_NEXT_INDEXER_STAKE_ASC',
  INDEXER_STAKE_SUMMARIES_AVERAGE_NEXT_INDEXER_STAKE_DESC = 'INDEXER_STAKE_SUMMARIES_AVERAGE_NEXT_INDEXER_STAKE_DESC',
  INDEXER_STAKE_SUMMARIES_AVERAGE_NEXT_TOTAL_STAKE_ASC = 'INDEXER_STAKE_SUMMARIES_AVERAGE_NEXT_TOTAL_STAKE_ASC',
  INDEXER_STAKE_SUMMARIES_AVERAGE_NEXT_TOTAL_STAKE_DESC = 'INDEXER_STAKE_SUMMARIES_AVERAGE_NEXT_TOTAL_STAKE_DESC',
  INDEXER_STAKE_SUMMARIES_AVERAGE_TOTAL_STAKE_ASC = 'INDEXER_STAKE_SUMMARIES_AVERAGE_TOTAL_STAKE_ASC',
  INDEXER_STAKE_SUMMARIES_AVERAGE_TOTAL_STAKE_DESC = 'INDEXER_STAKE_SUMMARIES_AVERAGE_TOTAL_STAKE_DESC',
  INDEXER_STAKE_SUMMARIES_BY_ERA_ID__COUNT_ASC = 'INDEXER_STAKE_SUMMARIES_BY_ERA_ID__COUNT_ASC',
  INDEXER_STAKE_SUMMARIES_BY_ERA_ID__COUNT_DESC = 'INDEXER_STAKE_SUMMARIES_BY_ERA_ID__COUNT_DESC',
  INDEXER_STAKE_SUMMARIES_COUNT_ASC = 'INDEXER_STAKE_SUMMARIES_COUNT_ASC',
  INDEXER_STAKE_SUMMARIES_COUNT_DESC = 'INDEXER_STAKE_SUMMARIES_COUNT_DESC',
  INDEXER_STAKE_SUMMARIES_DISTINCT_COUNT_BLOCK_RANGE_ASC = 'INDEXER_STAKE_SUMMARIES_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  INDEXER_STAKE_SUMMARIES_DISTINCT_COUNT_BLOCK_RANGE_DESC = 'INDEXER_STAKE_SUMMARIES_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  INDEXER_STAKE_SUMMARIES_DISTINCT_COUNT_DELEGATOR_STAKE_ASC = 'INDEXER_STAKE_SUMMARIES_DISTINCT_COUNT_DELEGATOR_STAKE_ASC',
  INDEXER_STAKE_SUMMARIES_DISTINCT_COUNT_DELEGATOR_STAKE_DESC = 'INDEXER_STAKE_SUMMARIES_DISTINCT_COUNT_DELEGATOR_STAKE_DESC',
  INDEXER_STAKE_SUMMARIES_DISTINCT_COUNT_ERA_IDX_ASC = 'INDEXER_STAKE_SUMMARIES_DISTINCT_COUNT_ERA_IDX_ASC',
  INDEXER_STAKE_SUMMARIES_DISTINCT_COUNT_ERA_IDX_DESC = 'INDEXER_STAKE_SUMMARIES_DISTINCT_COUNT_ERA_IDX_DESC',
  INDEXER_STAKE_SUMMARIES_DISTINCT_COUNT_ERA_ID_ASC = 'INDEXER_STAKE_SUMMARIES_DISTINCT_COUNT_ERA_ID_ASC',
  INDEXER_STAKE_SUMMARIES_DISTINCT_COUNT_ERA_ID_DESC = 'INDEXER_STAKE_SUMMARIES_DISTINCT_COUNT_ERA_ID_DESC',
  INDEXER_STAKE_SUMMARIES_DISTINCT_COUNT_ID_ASC = 'INDEXER_STAKE_SUMMARIES_DISTINCT_COUNT_ID_ASC',
  INDEXER_STAKE_SUMMARIES_DISTINCT_COUNT_ID_DESC = 'INDEXER_STAKE_SUMMARIES_DISTINCT_COUNT_ID_DESC',
  INDEXER_STAKE_SUMMARIES_DISTINCT_COUNT_INDEXER_STAKE_ASC = 'INDEXER_STAKE_SUMMARIES_DISTINCT_COUNT_INDEXER_STAKE_ASC',
  INDEXER_STAKE_SUMMARIES_DISTINCT_COUNT_INDEXER_STAKE_DESC = 'INDEXER_STAKE_SUMMARIES_DISTINCT_COUNT_INDEXER_STAKE_DESC',
  INDEXER_STAKE_SUMMARIES_DISTINCT_COUNT_NEXT_DELEGATOR_STAKE_ASC = 'INDEXER_STAKE_SUMMARIES_DISTINCT_COUNT_NEXT_DELEGATOR_STAKE_ASC',
  INDEXER_STAKE_SUMMARIES_DISTINCT_COUNT_NEXT_DELEGATOR_STAKE_DESC = 'INDEXER_STAKE_SUMMARIES_DISTINCT_COUNT_NEXT_DELEGATOR_STAKE_DESC',
  INDEXER_STAKE_SUMMARIES_DISTINCT_COUNT_NEXT_INDEXER_STAKE_ASC = 'INDEXER_STAKE_SUMMARIES_DISTINCT_COUNT_NEXT_INDEXER_STAKE_ASC',
  INDEXER_STAKE_SUMMARIES_DISTINCT_COUNT_NEXT_INDEXER_STAKE_DESC = 'INDEXER_STAKE_SUMMARIES_DISTINCT_COUNT_NEXT_INDEXER_STAKE_DESC',
  INDEXER_STAKE_SUMMARIES_DISTINCT_COUNT_NEXT_TOTAL_STAKE_ASC = 'INDEXER_STAKE_SUMMARIES_DISTINCT_COUNT_NEXT_TOTAL_STAKE_ASC',
  INDEXER_STAKE_SUMMARIES_DISTINCT_COUNT_NEXT_TOTAL_STAKE_DESC = 'INDEXER_STAKE_SUMMARIES_DISTINCT_COUNT_NEXT_TOTAL_STAKE_DESC',
  INDEXER_STAKE_SUMMARIES_DISTINCT_COUNT_TOTAL_STAKE_ASC = 'INDEXER_STAKE_SUMMARIES_DISTINCT_COUNT_TOTAL_STAKE_ASC',
  INDEXER_STAKE_SUMMARIES_DISTINCT_COUNT_TOTAL_STAKE_DESC = 'INDEXER_STAKE_SUMMARIES_DISTINCT_COUNT_TOTAL_STAKE_DESC',
  INDEXER_STAKE_SUMMARIES_MAX_BLOCK_RANGE_ASC = 'INDEXER_STAKE_SUMMARIES_MAX_BLOCK_RANGE_ASC',
  INDEXER_STAKE_SUMMARIES_MAX_BLOCK_RANGE_DESC = 'INDEXER_STAKE_SUMMARIES_MAX_BLOCK_RANGE_DESC',
  INDEXER_STAKE_SUMMARIES_MAX_DELEGATOR_STAKE_ASC = 'INDEXER_STAKE_SUMMARIES_MAX_DELEGATOR_STAKE_ASC',
  INDEXER_STAKE_SUMMARIES_MAX_DELEGATOR_STAKE_DESC = 'INDEXER_STAKE_SUMMARIES_MAX_DELEGATOR_STAKE_DESC',
  INDEXER_STAKE_SUMMARIES_MAX_ERA_IDX_ASC = 'INDEXER_STAKE_SUMMARIES_MAX_ERA_IDX_ASC',
  INDEXER_STAKE_SUMMARIES_MAX_ERA_IDX_DESC = 'INDEXER_STAKE_SUMMARIES_MAX_ERA_IDX_DESC',
  INDEXER_STAKE_SUMMARIES_MAX_ERA_ID_ASC = 'INDEXER_STAKE_SUMMARIES_MAX_ERA_ID_ASC',
  INDEXER_STAKE_SUMMARIES_MAX_ERA_ID_DESC = 'INDEXER_STAKE_SUMMARIES_MAX_ERA_ID_DESC',
  INDEXER_STAKE_SUMMARIES_MAX_ID_ASC = 'INDEXER_STAKE_SUMMARIES_MAX_ID_ASC',
  INDEXER_STAKE_SUMMARIES_MAX_ID_DESC = 'INDEXER_STAKE_SUMMARIES_MAX_ID_DESC',
  INDEXER_STAKE_SUMMARIES_MAX_INDEXER_STAKE_ASC = 'INDEXER_STAKE_SUMMARIES_MAX_INDEXER_STAKE_ASC',
  INDEXER_STAKE_SUMMARIES_MAX_INDEXER_STAKE_DESC = 'INDEXER_STAKE_SUMMARIES_MAX_INDEXER_STAKE_DESC',
  INDEXER_STAKE_SUMMARIES_MAX_NEXT_DELEGATOR_STAKE_ASC = 'INDEXER_STAKE_SUMMARIES_MAX_NEXT_DELEGATOR_STAKE_ASC',
  INDEXER_STAKE_SUMMARIES_MAX_NEXT_DELEGATOR_STAKE_DESC = 'INDEXER_STAKE_SUMMARIES_MAX_NEXT_DELEGATOR_STAKE_DESC',
  INDEXER_STAKE_SUMMARIES_MAX_NEXT_INDEXER_STAKE_ASC = 'INDEXER_STAKE_SUMMARIES_MAX_NEXT_INDEXER_STAKE_ASC',
  INDEXER_STAKE_SUMMARIES_MAX_NEXT_INDEXER_STAKE_DESC = 'INDEXER_STAKE_SUMMARIES_MAX_NEXT_INDEXER_STAKE_DESC',
  INDEXER_STAKE_SUMMARIES_MAX_NEXT_TOTAL_STAKE_ASC = 'INDEXER_STAKE_SUMMARIES_MAX_NEXT_TOTAL_STAKE_ASC',
  INDEXER_STAKE_SUMMARIES_MAX_NEXT_TOTAL_STAKE_DESC = 'INDEXER_STAKE_SUMMARIES_MAX_NEXT_TOTAL_STAKE_DESC',
  INDEXER_STAKE_SUMMARIES_MAX_TOTAL_STAKE_ASC = 'INDEXER_STAKE_SUMMARIES_MAX_TOTAL_STAKE_ASC',
  INDEXER_STAKE_SUMMARIES_MAX_TOTAL_STAKE_DESC = 'INDEXER_STAKE_SUMMARIES_MAX_TOTAL_STAKE_DESC',
  INDEXER_STAKE_SUMMARIES_MIN_BLOCK_RANGE_ASC = 'INDEXER_STAKE_SUMMARIES_MIN_BLOCK_RANGE_ASC',
  INDEXER_STAKE_SUMMARIES_MIN_BLOCK_RANGE_DESC = 'INDEXER_STAKE_SUMMARIES_MIN_BLOCK_RANGE_DESC',
  INDEXER_STAKE_SUMMARIES_MIN_DELEGATOR_STAKE_ASC = 'INDEXER_STAKE_SUMMARIES_MIN_DELEGATOR_STAKE_ASC',
  INDEXER_STAKE_SUMMARIES_MIN_DELEGATOR_STAKE_DESC = 'INDEXER_STAKE_SUMMARIES_MIN_DELEGATOR_STAKE_DESC',
  INDEXER_STAKE_SUMMARIES_MIN_ERA_IDX_ASC = 'INDEXER_STAKE_SUMMARIES_MIN_ERA_IDX_ASC',
  INDEXER_STAKE_SUMMARIES_MIN_ERA_IDX_DESC = 'INDEXER_STAKE_SUMMARIES_MIN_ERA_IDX_DESC',
  INDEXER_STAKE_SUMMARIES_MIN_ERA_ID_ASC = 'INDEXER_STAKE_SUMMARIES_MIN_ERA_ID_ASC',
  INDEXER_STAKE_SUMMARIES_MIN_ERA_ID_DESC = 'INDEXER_STAKE_SUMMARIES_MIN_ERA_ID_DESC',
  INDEXER_STAKE_SUMMARIES_MIN_ID_ASC = 'INDEXER_STAKE_SUMMARIES_MIN_ID_ASC',
  INDEXER_STAKE_SUMMARIES_MIN_ID_DESC = 'INDEXER_STAKE_SUMMARIES_MIN_ID_DESC',
  INDEXER_STAKE_SUMMARIES_MIN_INDEXER_STAKE_ASC = 'INDEXER_STAKE_SUMMARIES_MIN_INDEXER_STAKE_ASC',
  INDEXER_STAKE_SUMMARIES_MIN_INDEXER_STAKE_DESC = 'INDEXER_STAKE_SUMMARIES_MIN_INDEXER_STAKE_DESC',
  INDEXER_STAKE_SUMMARIES_MIN_NEXT_DELEGATOR_STAKE_ASC = 'INDEXER_STAKE_SUMMARIES_MIN_NEXT_DELEGATOR_STAKE_ASC',
  INDEXER_STAKE_SUMMARIES_MIN_NEXT_DELEGATOR_STAKE_DESC = 'INDEXER_STAKE_SUMMARIES_MIN_NEXT_DELEGATOR_STAKE_DESC',
  INDEXER_STAKE_SUMMARIES_MIN_NEXT_INDEXER_STAKE_ASC = 'INDEXER_STAKE_SUMMARIES_MIN_NEXT_INDEXER_STAKE_ASC',
  INDEXER_STAKE_SUMMARIES_MIN_NEXT_INDEXER_STAKE_DESC = 'INDEXER_STAKE_SUMMARIES_MIN_NEXT_INDEXER_STAKE_DESC',
  INDEXER_STAKE_SUMMARIES_MIN_NEXT_TOTAL_STAKE_ASC = 'INDEXER_STAKE_SUMMARIES_MIN_NEXT_TOTAL_STAKE_ASC',
  INDEXER_STAKE_SUMMARIES_MIN_NEXT_TOTAL_STAKE_DESC = 'INDEXER_STAKE_SUMMARIES_MIN_NEXT_TOTAL_STAKE_DESC',
  INDEXER_STAKE_SUMMARIES_MIN_TOTAL_STAKE_ASC = 'INDEXER_STAKE_SUMMARIES_MIN_TOTAL_STAKE_ASC',
  INDEXER_STAKE_SUMMARIES_MIN_TOTAL_STAKE_DESC = 'INDEXER_STAKE_SUMMARIES_MIN_TOTAL_STAKE_DESC',
  INDEXER_STAKE_SUMMARIES_STDDEV_POPULATION_BLOCK_RANGE_ASC = 'INDEXER_STAKE_SUMMARIES_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  INDEXER_STAKE_SUMMARIES_STDDEV_POPULATION_BLOCK_RANGE_DESC = 'INDEXER_STAKE_SUMMARIES_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  INDEXER_STAKE_SUMMARIES_STDDEV_POPULATION_DELEGATOR_STAKE_ASC = 'INDEXER_STAKE_SUMMARIES_STDDEV_POPULATION_DELEGATOR_STAKE_ASC',
  INDEXER_STAKE_SUMMARIES_STDDEV_POPULATION_DELEGATOR_STAKE_DESC = 'INDEXER_STAKE_SUMMARIES_STDDEV_POPULATION_DELEGATOR_STAKE_DESC',
  INDEXER_STAKE_SUMMARIES_STDDEV_POPULATION_ERA_IDX_ASC = 'INDEXER_STAKE_SUMMARIES_STDDEV_POPULATION_ERA_IDX_ASC',
  INDEXER_STAKE_SUMMARIES_STDDEV_POPULATION_ERA_IDX_DESC = 'INDEXER_STAKE_SUMMARIES_STDDEV_POPULATION_ERA_IDX_DESC',
  INDEXER_STAKE_SUMMARIES_STDDEV_POPULATION_ERA_ID_ASC = 'INDEXER_STAKE_SUMMARIES_STDDEV_POPULATION_ERA_ID_ASC',
  INDEXER_STAKE_SUMMARIES_STDDEV_POPULATION_ERA_ID_DESC = 'INDEXER_STAKE_SUMMARIES_STDDEV_POPULATION_ERA_ID_DESC',
  INDEXER_STAKE_SUMMARIES_STDDEV_POPULATION_ID_ASC = 'INDEXER_STAKE_SUMMARIES_STDDEV_POPULATION_ID_ASC',
  INDEXER_STAKE_SUMMARIES_STDDEV_POPULATION_ID_DESC = 'INDEXER_STAKE_SUMMARIES_STDDEV_POPULATION_ID_DESC',
  INDEXER_STAKE_SUMMARIES_STDDEV_POPULATION_INDEXER_STAKE_ASC = 'INDEXER_STAKE_SUMMARIES_STDDEV_POPULATION_INDEXER_STAKE_ASC',
  INDEXER_STAKE_SUMMARIES_STDDEV_POPULATION_INDEXER_STAKE_DESC = 'INDEXER_STAKE_SUMMARIES_STDDEV_POPULATION_INDEXER_STAKE_DESC',
  INDEXER_STAKE_SUMMARIES_STDDEV_POPULATION_NEXT_DELEGATOR_STAKE_ASC = 'INDEXER_STAKE_SUMMARIES_STDDEV_POPULATION_NEXT_DELEGATOR_STAKE_ASC',
  INDEXER_STAKE_SUMMARIES_STDDEV_POPULATION_NEXT_DELEGATOR_STAKE_DESC = 'INDEXER_STAKE_SUMMARIES_STDDEV_POPULATION_NEXT_DELEGATOR_STAKE_DESC',
  INDEXER_STAKE_SUMMARIES_STDDEV_POPULATION_NEXT_INDEXER_STAKE_ASC = 'INDEXER_STAKE_SUMMARIES_STDDEV_POPULATION_NEXT_INDEXER_STAKE_ASC',
  INDEXER_STAKE_SUMMARIES_STDDEV_POPULATION_NEXT_INDEXER_STAKE_DESC = 'INDEXER_STAKE_SUMMARIES_STDDEV_POPULATION_NEXT_INDEXER_STAKE_DESC',
  INDEXER_STAKE_SUMMARIES_STDDEV_POPULATION_NEXT_TOTAL_STAKE_ASC = 'INDEXER_STAKE_SUMMARIES_STDDEV_POPULATION_NEXT_TOTAL_STAKE_ASC',
  INDEXER_STAKE_SUMMARIES_STDDEV_POPULATION_NEXT_TOTAL_STAKE_DESC = 'INDEXER_STAKE_SUMMARIES_STDDEV_POPULATION_NEXT_TOTAL_STAKE_DESC',
  INDEXER_STAKE_SUMMARIES_STDDEV_POPULATION_TOTAL_STAKE_ASC = 'INDEXER_STAKE_SUMMARIES_STDDEV_POPULATION_TOTAL_STAKE_ASC',
  INDEXER_STAKE_SUMMARIES_STDDEV_POPULATION_TOTAL_STAKE_DESC = 'INDEXER_STAKE_SUMMARIES_STDDEV_POPULATION_TOTAL_STAKE_DESC',
  INDEXER_STAKE_SUMMARIES_STDDEV_SAMPLE_BLOCK_RANGE_ASC = 'INDEXER_STAKE_SUMMARIES_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  INDEXER_STAKE_SUMMARIES_STDDEV_SAMPLE_BLOCK_RANGE_DESC = 'INDEXER_STAKE_SUMMARIES_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  INDEXER_STAKE_SUMMARIES_STDDEV_SAMPLE_DELEGATOR_STAKE_ASC = 'INDEXER_STAKE_SUMMARIES_STDDEV_SAMPLE_DELEGATOR_STAKE_ASC',
  INDEXER_STAKE_SUMMARIES_STDDEV_SAMPLE_DELEGATOR_STAKE_DESC = 'INDEXER_STAKE_SUMMARIES_STDDEV_SAMPLE_DELEGATOR_STAKE_DESC',
  INDEXER_STAKE_SUMMARIES_STDDEV_SAMPLE_ERA_IDX_ASC = 'INDEXER_STAKE_SUMMARIES_STDDEV_SAMPLE_ERA_IDX_ASC',
  INDEXER_STAKE_SUMMARIES_STDDEV_SAMPLE_ERA_IDX_DESC = 'INDEXER_STAKE_SUMMARIES_STDDEV_SAMPLE_ERA_IDX_DESC',
  INDEXER_STAKE_SUMMARIES_STDDEV_SAMPLE_ERA_ID_ASC = 'INDEXER_STAKE_SUMMARIES_STDDEV_SAMPLE_ERA_ID_ASC',
  INDEXER_STAKE_SUMMARIES_STDDEV_SAMPLE_ERA_ID_DESC = 'INDEXER_STAKE_SUMMARIES_STDDEV_SAMPLE_ERA_ID_DESC',
  INDEXER_STAKE_SUMMARIES_STDDEV_SAMPLE_ID_ASC = 'INDEXER_STAKE_SUMMARIES_STDDEV_SAMPLE_ID_ASC',
  INDEXER_STAKE_SUMMARIES_STDDEV_SAMPLE_ID_DESC = 'INDEXER_STAKE_SUMMARIES_STDDEV_SAMPLE_ID_DESC',
  INDEXER_STAKE_SUMMARIES_STDDEV_SAMPLE_INDEXER_STAKE_ASC = 'INDEXER_STAKE_SUMMARIES_STDDEV_SAMPLE_INDEXER_STAKE_ASC',
  INDEXER_STAKE_SUMMARIES_STDDEV_SAMPLE_INDEXER_STAKE_DESC = 'INDEXER_STAKE_SUMMARIES_STDDEV_SAMPLE_INDEXER_STAKE_DESC',
  INDEXER_STAKE_SUMMARIES_STDDEV_SAMPLE_NEXT_DELEGATOR_STAKE_ASC = 'INDEXER_STAKE_SUMMARIES_STDDEV_SAMPLE_NEXT_DELEGATOR_STAKE_ASC',
  INDEXER_STAKE_SUMMARIES_STDDEV_SAMPLE_NEXT_DELEGATOR_STAKE_DESC = 'INDEXER_STAKE_SUMMARIES_STDDEV_SAMPLE_NEXT_DELEGATOR_STAKE_DESC',
  INDEXER_STAKE_SUMMARIES_STDDEV_SAMPLE_NEXT_INDEXER_STAKE_ASC = 'INDEXER_STAKE_SUMMARIES_STDDEV_SAMPLE_NEXT_INDEXER_STAKE_ASC',
  INDEXER_STAKE_SUMMARIES_STDDEV_SAMPLE_NEXT_INDEXER_STAKE_DESC = 'INDEXER_STAKE_SUMMARIES_STDDEV_SAMPLE_NEXT_INDEXER_STAKE_DESC',
  INDEXER_STAKE_SUMMARIES_STDDEV_SAMPLE_NEXT_TOTAL_STAKE_ASC = 'INDEXER_STAKE_SUMMARIES_STDDEV_SAMPLE_NEXT_TOTAL_STAKE_ASC',
  INDEXER_STAKE_SUMMARIES_STDDEV_SAMPLE_NEXT_TOTAL_STAKE_DESC = 'INDEXER_STAKE_SUMMARIES_STDDEV_SAMPLE_NEXT_TOTAL_STAKE_DESC',
  INDEXER_STAKE_SUMMARIES_STDDEV_SAMPLE_TOTAL_STAKE_ASC = 'INDEXER_STAKE_SUMMARIES_STDDEV_SAMPLE_TOTAL_STAKE_ASC',
  INDEXER_STAKE_SUMMARIES_STDDEV_SAMPLE_TOTAL_STAKE_DESC = 'INDEXER_STAKE_SUMMARIES_STDDEV_SAMPLE_TOTAL_STAKE_DESC',
  INDEXER_STAKE_SUMMARIES_SUM_BLOCK_RANGE_ASC = 'INDEXER_STAKE_SUMMARIES_SUM_BLOCK_RANGE_ASC',
  INDEXER_STAKE_SUMMARIES_SUM_BLOCK_RANGE_DESC = 'INDEXER_STAKE_SUMMARIES_SUM_BLOCK_RANGE_DESC',
  INDEXER_STAKE_SUMMARIES_SUM_DELEGATOR_STAKE_ASC = 'INDEXER_STAKE_SUMMARIES_SUM_DELEGATOR_STAKE_ASC',
  INDEXER_STAKE_SUMMARIES_SUM_DELEGATOR_STAKE_DESC = 'INDEXER_STAKE_SUMMARIES_SUM_DELEGATOR_STAKE_DESC',
  INDEXER_STAKE_SUMMARIES_SUM_ERA_IDX_ASC = 'INDEXER_STAKE_SUMMARIES_SUM_ERA_IDX_ASC',
  INDEXER_STAKE_SUMMARIES_SUM_ERA_IDX_DESC = 'INDEXER_STAKE_SUMMARIES_SUM_ERA_IDX_DESC',
  INDEXER_STAKE_SUMMARIES_SUM_ERA_ID_ASC = 'INDEXER_STAKE_SUMMARIES_SUM_ERA_ID_ASC',
  INDEXER_STAKE_SUMMARIES_SUM_ERA_ID_DESC = 'INDEXER_STAKE_SUMMARIES_SUM_ERA_ID_DESC',
  INDEXER_STAKE_SUMMARIES_SUM_ID_ASC = 'INDEXER_STAKE_SUMMARIES_SUM_ID_ASC',
  INDEXER_STAKE_SUMMARIES_SUM_ID_DESC = 'INDEXER_STAKE_SUMMARIES_SUM_ID_DESC',
  INDEXER_STAKE_SUMMARIES_SUM_INDEXER_STAKE_ASC = 'INDEXER_STAKE_SUMMARIES_SUM_INDEXER_STAKE_ASC',
  INDEXER_STAKE_SUMMARIES_SUM_INDEXER_STAKE_DESC = 'INDEXER_STAKE_SUMMARIES_SUM_INDEXER_STAKE_DESC',
  INDEXER_STAKE_SUMMARIES_SUM_NEXT_DELEGATOR_STAKE_ASC = 'INDEXER_STAKE_SUMMARIES_SUM_NEXT_DELEGATOR_STAKE_ASC',
  INDEXER_STAKE_SUMMARIES_SUM_NEXT_DELEGATOR_STAKE_DESC = 'INDEXER_STAKE_SUMMARIES_SUM_NEXT_DELEGATOR_STAKE_DESC',
  INDEXER_STAKE_SUMMARIES_SUM_NEXT_INDEXER_STAKE_ASC = 'INDEXER_STAKE_SUMMARIES_SUM_NEXT_INDEXER_STAKE_ASC',
  INDEXER_STAKE_SUMMARIES_SUM_NEXT_INDEXER_STAKE_DESC = 'INDEXER_STAKE_SUMMARIES_SUM_NEXT_INDEXER_STAKE_DESC',
  INDEXER_STAKE_SUMMARIES_SUM_NEXT_TOTAL_STAKE_ASC = 'INDEXER_STAKE_SUMMARIES_SUM_NEXT_TOTAL_STAKE_ASC',
  INDEXER_STAKE_SUMMARIES_SUM_NEXT_TOTAL_STAKE_DESC = 'INDEXER_STAKE_SUMMARIES_SUM_NEXT_TOTAL_STAKE_DESC',
  INDEXER_STAKE_SUMMARIES_SUM_TOTAL_STAKE_ASC = 'INDEXER_STAKE_SUMMARIES_SUM_TOTAL_STAKE_ASC',
  INDEXER_STAKE_SUMMARIES_SUM_TOTAL_STAKE_DESC = 'INDEXER_STAKE_SUMMARIES_SUM_TOTAL_STAKE_DESC',
  INDEXER_STAKE_SUMMARIES_VARIANCE_POPULATION_BLOCK_RANGE_ASC = 'INDEXER_STAKE_SUMMARIES_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  INDEXER_STAKE_SUMMARIES_VARIANCE_POPULATION_BLOCK_RANGE_DESC = 'INDEXER_STAKE_SUMMARIES_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  INDEXER_STAKE_SUMMARIES_VARIANCE_POPULATION_DELEGATOR_STAKE_ASC = 'INDEXER_STAKE_SUMMARIES_VARIANCE_POPULATION_DELEGATOR_STAKE_ASC',
  INDEXER_STAKE_SUMMARIES_VARIANCE_POPULATION_DELEGATOR_STAKE_DESC = 'INDEXER_STAKE_SUMMARIES_VARIANCE_POPULATION_DELEGATOR_STAKE_DESC',
  INDEXER_STAKE_SUMMARIES_VARIANCE_POPULATION_ERA_IDX_ASC = 'INDEXER_STAKE_SUMMARIES_VARIANCE_POPULATION_ERA_IDX_ASC',
  INDEXER_STAKE_SUMMARIES_VARIANCE_POPULATION_ERA_IDX_DESC = 'INDEXER_STAKE_SUMMARIES_VARIANCE_POPULATION_ERA_IDX_DESC',
  INDEXER_STAKE_SUMMARIES_VARIANCE_POPULATION_ERA_ID_ASC = 'INDEXER_STAKE_SUMMARIES_VARIANCE_POPULATION_ERA_ID_ASC',
  INDEXER_STAKE_SUMMARIES_VARIANCE_POPULATION_ERA_ID_DESC = 'INDEXER_STAKE_SUMMARIES_VARIANCE_POPULATION_ERA_ID_DESC',
  INDEXER_STAKE_SUMMARIES_VARIANCE_POPULATION_ID_ASC = 'INDEXER_STAKE_SUMMARIES_VARIANCE_POPULATION_ID_ASC',
  INDEXER_STAKE_SUMMARIES_VARIANCE_POPULATION_ID_DESC = 'INDEXER_STAKE_SUMMARIES_VARIANCE_POPULATION_ID_DESC',
  INDEXER_STAKE_SUMMARIES_VARIANCE_POPULATION_INDEXER_STAKE_ASC = 'INDEXER_STAKE_SUMMARIES_VARIANCE_POPULATION_INDEXER_STAKE_ASC',
  INDEXER_STAKE_SUMMARIES_VARIANCE_POPULATION_INDEXER_STAKE_DESC = 'INDEXER_STAKE_SUMMARIES_VARIANCE_POPULATION_INDEXER_STAKE_DESC',
  INDEXER_STAKE_SUMMARIES_VARIANCE_POPULATION_NEXT_DELEGATOR_STAKE_ASC = 'INDEXER_STAKE_SUMMARIES_VARIANCE_POPULATION_NEXT_DELEGATOR_STAKE_ASC',
  INDEXER_STAKE_SUMMARIES_VARIANCE_POPULATION_NEXT_DELEGATOR_STAKE_DESC = 'INDEXER_STAKE_SUMMARIES_VARIANCE_POPULATION_NEXT_DELEGATOR_STAKE_DESC',
  INDEXER_STAKE_SUMMARIES_VARIANCE_POPULATION_NEXT_INDEXER_STAKE_ASC = 'INDEXER_STAKE_SUMMARIES_VARIANCE_POPULATION_NEXT_INDEXER_STAKE_ASC',
  INDEXER_STAKE_SUMMARIES_VARIANCE_POPULATION_NEXT_INDEXER_STAKE_DESC = 'INDEXER_STAKE_SUMMARIES_VARIANCE_POPULATION_NEXT_INDEXER_STAKE_DESC',
  INDEXER_STAKE_SUMMARIES_VARIANCE_POPULATION_NEXT_TOTAL_STAKE_ASC = 'INDEXER_STAKE_SUMMARIES_VARIANCE_POPULATION_NEXT_TOTAL_STAKE_ASC',
  INDEXER_STAKE_SUMMARIES_VARIANCE_POPULATION_NEXT_TOTAL_STAKE_DESC = 'INDEXER_STAKE_SUMMARIES_VARIANCE_POPULATION_NEXT_TOTAL_STAKE_DESC',
  INDEXER_STAKE_SUMMARIES_VARIANCE_POPULATION_TOTAL_STAKE_ASC = 'INDEXER_STAKE_SUMMARIES_VARIANCE_POPULATION_TOTAL_STAKE_ASC',
  INDEXER_STAKE_SUMMARIES_VARIANCE_POPULATION_TOTAL_STAKE_DESC = 'INDEXER_STAKE_SUMMARIES_VARIANCE_POPULATION_TOTAL_STAKE_DESC',
  INDEXER_STAKE_SUMMARIES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC = 'INDEXER_STAKE_SUMMARIES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  INDEXER_STAKE_SUMMARIES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC = 'INDEXER_STAKE_SUMMARIES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  INDEXER_STAKE_SUMMARIES_VARIANCE_SAMPLE_DELEGATOR_STAKE_ASC = 'INDEXER_STAKE_SUMMARIES_VARIANCE_SAMPLE_DELEGATOR_STAKE_ASC',
  INDEXER_STAKE_SUMMARIES_VARIANCE_SAMPLE_DELEGATOR_STAKE_DESC = 'INDEXER_STAKE_SUMMARIES_VARIANCE_SAMPLE_DELEGATOR_STAKE_DESC',
  INDEXER_STAKE_SUMMARIES_VARIANCE_SAMPLE_ERA_IDX_ASC = 'INDEXER_STAKE_SUMMARIES_VARIANCE_SAMPLE_ERA_IDX_ASC',
  INDEXER_STAKE_SUMMARIES_VARIANCE_SAMPLE_ERA_IDX_DESC = 'INDEXER_STAKE_SUMMARIES_VARIANCE_SAMPLE_ERA_IDX_DESC',
  INDEXER_STAKE_SUMMARIES_VARIANCE_SAMPLE_ERA_ID_ASC = 'INDEXER_STAKE_SUMMARIES_VARIANCE_SAMPLE_ERA_ID_ASC',
  INDEXER_STAKE_SUMMARIES_VARIANCE_SAMPLE_ERA_ID_DESC = 'INDEXER_STAKE_SUMMARIES_VARIANCE_SAMPLE_ERA_ID_DESC',
  INDEXER_STAKE_SUMMARIES_VARIANCE_SAMPLE_ID_ASC = 'INDEXER_STAKE_SUMMARIES_VARIANCE_SAMPLE_ID_ASC',
  INDEXER_STAKE_SUMMARIES_VARIANCE_SAMPLE_ID_DESC = 'INDEXER_STAKE_SUMMARIES_VARIANCE_SAMPLE_ID_DESC',
  INDEXER_STAKE_SUMMARIES_VARIANCE_SAMPLE_INDEXER_STAKE_ASC = 'INDEXER_STAKE_SUMMARIES_VARIANCE_SAMPLE_INDEXER_STAKE_ASC',
  INDEXER_STAKE_SUMMARIES_VARIANCE_SAMPLE_INDEXER_STAKE_DESC = 'INDEXER_STAKE_SUMMARIES_VARIANCE_SAMPLE_INDEXER_STAKE_DESC',
  INDEXER_STAKE_SUMMARIES_VARIANCE_SAMPLE_NEXT_DELEGATOR_STAKE_ASC = 'INDEXER_STAKE_SUMMARIES_VARIANCE_SAMPLE_NEXT_DELEGATOR_STAKE_ASC',
  INDEXER_STAKE_SUMMARIES_VARIANCE_SAMPLE_NEXT_DELEGATOR_STAKE_DESC = 'INDEXER_STAKE_SUMMARIES_VARIANCE_SAMPLE_NEXT_DELEGATOR_STAKE_DESC',
  INDEXER_STAKE_SUMMARIES_VARIANCE_SAMPLE_NEXT_INDEXER_STAKE_ASC = 'INDEXER_STAKE_SUMMARIES_VARIANCE_SAMPLE_NEXT_INDEXER_STAKE_ASC',
  INDEXER_STAKE_SUMMARIES_VARIANCE_SAMPLE_NEXT_INDEXER_STAKE_DESC = 'INDEXER_STAKE_SUMMARIES_VARIANCE_SAMPLE_NEXT_INDEXER_STAKE_DESC',
  INDEXER_STAKE_SUMMARIES_VARIANCE_SAMPLE_NEXT_TOTAL_STAKE_ASC = 'INDEXER_STAKE_SUMMARIES_VARIANCE_SAMPLE_NEXT_TOTAL_STAKE_ASC',
  INDEXER_STAKE_SUMMARIES_VARIANCE_SAMPLE_NEXT_TOTAL_STAKE_DESC = 'INDEXER_STAKE_SUMMARIES_VARIANCE_SAMPLE_NEXT_TOTAL_STAKE_DESC',
  INDEXER_STAKE_SUMMARIES_VARIANCE_SAMPLE_TOTAL_STAKE_ASC = 'INDEXER_STAKE_SUMMARIES_VARIANCE_SAMPLE_TOTAL_STAKE_ASC',
  INDEXER_STAKE_SUMMARIES_VARIANCE_SAMPLE_TOTAL_STAKE_DESC = 'INDEXER_STAKE_SUMMARIES_VARIANCE_SAMPLE_TOTAL_STAKE_DESC',
  LAST_EVENT_ASC = 'LAST_EVENT_ASC',
  LAST_EVENT_DESC = 'LAST_EVENT_DESC',
  NATURAL = 'NATURAL',
  PRIMARY_KEY_ASC = 'PRIMARY_KEY_ASC',
  PRIMARY_KEY_DESC = 'PRIMARY_KEY_DESC',
  START_TIME_ASC = 'START_TIME_ASC',
  START_TIME_DESC = 'START_TIME_DESC',
}

export type Exception = Node & {
  readonly __typename: 'Exception';
  readonly error: Scalars['String']['output'];
  readonly handler: Scalars['String']['output'];
  readonly id: Scalars['String']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  readonly nodeId: Scalars['ID']['output'];
};

export type ExceptionAggregates = {
  readonly __typename: 'ExceptionAggregates';
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly distinctCount: Maybe<ExceptionDistinctCountAggregates>;
  readonly keys: Maybe<ReadonlyArray<Scalars['String']['output']>>;
};

export type ExceptionDistinctCountAggregates = {
  readonly __typename: 'ExceptionDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  readonly _blockRange: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  readonly _id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of error across the matching connection */
  readonly error: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of handler across the matching connection */
  readonly handler: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  readonly id: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `Exception` object types. All fields are combined with a logical ‘and.’ */
export type ExceptionFilter = {
  /** Checks for all expressions in this list. */
  readonly and: InputMaybe<ReadonlyArray<ExceptionFilter>>;
  /** Filter by the object’s `error` field. */
  readonly error: InputMaybe<StringFilter>;
  /** Filter by the object’s `handler` field. */
  readonly handler: InputMaybe<StringFilter>;
  /** Filter by the object’s `id` field. */
  readonly id: InputMaybe<StringFilter>;
  /** Negates the expression. */
  readonly not: InputMaybe<ExceptionFilter>;
  /** Checks for any expressions in this list. */
  readonly or: InputMaybe<ReadonlyArray<ExceptionFilter>>;
};

/** A connection to a list of `Exception` values. */
export type ExceptionsConnection = {
  readonly __typename: 'ExceptionsConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<ExceptionAggregates>;
  /** A list of edges which contains the `Exception` and cursor to aid in pagination. */
  readonly edges: ReadonlyArray<ExceptionsEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<ExceptionAggregates>>;
  /** A list of `Exception` objects. */
  readonly nodes: ReadonlyArray<Maybe<Exception>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Exception` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Exception` values. */
export type ExceptionsConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<ExceptionsGroupBy>;
  having: InputMaybe<ExceptionsHavingInput>;
};

/** A `Exception` edge in the connection. */
export type ExceptionsEdge = {
  readonly __typename: 'ExceptionsEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `Exception` at the end of the edge. */
  readonly node: Maybe<Exception>;
};

/** Grouping methods for `Exception` for usage during aggregation. */
export enum ExceptionsGroupBy {
  ERROR = 'ERROR',
  HANDLER = 'HANDLER',
  ID = 'ID',
}

/** Conditions for `Exception` aggregates. */
export type ExceptionsHavingInput = {
  readonly AND: InputMaybe<ReadonlyArray<ExceptionsHavingInput>>;
  readonly OR: InputMaybe<ReadonlyArray<ExceptionsHavingInput>>;
};

/** Methods to use when ordering `Exception`. */
export enum ExceptionsOrderBy {
  ERROR_ASC = 'ERROR_ASC',
  ERROR_DESC = 'ERROR_DESC',
  HANDLER_ASC = 'HANDLER_ASC',
  HANDLER_DESC = 'HANDLER_DESC',
  ID_ASC = 'ID_ASC',
  ID_DESC = 'ID_DESC',
  NATURAL = 'NATURAL',
  PRIMARY_KEY_ASC = 'PRIMARY_KEY_ASC',
  PRIMARY_KEY_DESC = 'PRIMARY_KEY_DESC',
}

export type HavingBigfloatFilter = {
  readonly equalTo: InputMaybe<Scalars['BigFloat']['input']>;
  readonly greaterThan: InputMaybe<Scalars['BigFloat']['input']>;
  readonly greaterThanOrEqualTo: InputMaybe<Scalars['BigFloat']['input']>;
  readonly lessThan: InputMaybe<Scalars['BigFloat']['input']>;
  readonly lessThanOrEqualTo: InputMaybe<Scalars['BigFloat']['input']>;
  readonly notEqualTo: InputMaybe<Scalars['BigFloat']['input']>;
};

export type HavingDatetimeFilter = {
  readonly equalTo: InputMaybe<Scalars['Datetime']['input']>;
  readonly greaterThan: InputMaybe<Scalars['Datetime']['input']>;
  readonly greaterThanOrEqualTo: InputMaybe<Scalars['Datetime']['input']>;
  readonly lessThan: InputMaybe<Scalars['Datetime']['input']>;
  readonly lessThanOrEqualTo: InputMaybe<Scalars['Datetime']['input']>;
  readonly notEqualTo: InputMaybe<Scalars['Datetime']['input']>;
};

export type HavingIntFilter = {
  readonly equalTo: InputMaybe<Scalars['Int']['input']>;
  readonly greaterThan: InputMaybe<Scalars['Int']['input']>;
  readonly greaterThanOrEqualTo: InputMaybe<Scalars['Int']['input']>;
  readonly lessThan: InputMaybe<Scalars['Int']['input']>;
  readonly lessThanOrEqualTo: InputMaybe<Scalars['Int']['input']>;
  readonly notEqualTo: InputMaybe<Scalars['Int']['input']>;
};

export type Indexer = Node & {
  readonly __typename: 'Indexer';
  /** Reads and enables pagination through a set of `AcceptedOffer`. */
  readonly acceptedOffers: AcceptedOffersConnection;
  readonly active: Scalars['Boolean']['output'];
  readonly capacity: Scalars['JSON']['output'];
  readonly commission: Scalars['JSON']['output'];
  readonly controller: Maybe<Scalars['String']['output']>;
  /** Reads and enables pagination through a set of `Controller`. */
  readonly controllers: ControllersConnection;
  readonly createdBlock: Maybe<Scalars['Int']['output']>;
  /** Reads and enables pagination through a set of `Delegation`. */
  readonly delegations: DelegationsConnection;
  /** Reads and enables pagination through a set of `Delegator`. */
  readonly delegatorsByDelegationIndexerIdAndDelegatorId: IndexerDelegatorsByDelegationIndexerIdAndDelegatorIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Delegator`. */
  readonly delegatorsByEraDelegatorIndexerApyIndexerIdAndDelegatorId: IndexerDelegatorsByEraDelegatorIndexerApyIndexerIdAndDelegatorIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Delegator`. */
  readonly delegatorsByEraRewardIndexerIdAndDelegatorId: IndexerDelegatorsByEraRewardIndexerIdAndDelegatorIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Delegator`. */
  readonly delegatorsByEraStakeIndexerIdAndDelegatorId: IndexerDelegatorsByEraStakeIndexerIdAndDelegatorIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Deployment`. */
  readonly deploymentsByEraIndexerDeploymentApyIndexerIdAndDeploymentId: IndexerDeploymentsByEraIndexerDeploymentApyIndexerIdAndDeploymentIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Deployment`. */
  readonly deploymentsByIndexerAllocationIndexerIdAndDeploymentId: IndexerDeploymentsByIndexerAllocationIndexerIdAndDeploymentIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Deployment`. */
  readonly deploymentsByIndexerAllocationRewardIndexerIdAndDeploymentId: IndexerDeploymentsByIndexerAllocationRewardIndexerIdAndDeploymentIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Deployment`. */
  readonly deploymentsByIndexerAllocationRewardSummaryIndexerIdAndDeploymentId: IndexerDeploymentsByIndexerAllocationRewardSummaryIndexerIdAndDeploymentIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Deployment`. */
  readonly deploymentsByIndexerAllocationSummaryIndexerIdAndDeploymentId: IndexerDeploymentsByIndexerAllocationSummaryIndexerIdAndDeploymentIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Deployment`. */
  readonly deploymentsByIndexerDeploymentIndexerIdAndDeploymentId: IndexerDeploymentsByIndexerDeploymentIndexerIdAndDeploymentIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Deployment`. */
  readonly deploymentsByIndexerMissedLaborIndexerIdAndDeploymentId: IndexerDeploymentsByIndexerMissedLaborIndexerIdAndDeploymentIdManyToManyConnection;
  /** Reads and enables pagination through a set of `EraDelegatorIndexerApy`. */
  readonly eraDelegatorIndexerApies: EraDelegatorIndexerApiesConnection;
  /** Reads and enables pagination through a set of `EraIndexerApy`. */
  readonly eraIndexerApies: EraIndexerApiesConnection;
  /** Reads and enables pagination through a set of `EraIndexerDeploymentApy`. */
  readonly eraIndexerDeploymentApies: EraIndexerDeploymentApiesConnection;
  /** Reads and enables pagination through a set of `EraReward`. */
  readonly eraRewards: EraRewardsConnection;
  /** Reads and enables pagination through a set of `EraStake`. */
  readonly eraStakes: EraStakesConnection;
  /** Reads and enables pagination through a set of `Era`. */
  readonly erasByEraRewardIndexerIdAndEraId: IndexerErasByEraRewardIndexerIdAndEraIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Era`. */
  readonly erasByEraStakeIndexerIdAndEraId: IndexerErasByEraStakeIndexerIdAndEraIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Era`. */
  readonly erasByIndexerCommissionRateIndexerIdAndEraId: IndexerErasByIndexerCommissionRateIndexerIdAndEraIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Era`. */
  readonly erasByIndexerStakeIndexerIdAndEraId: IndexerErasByIndexerStakeIndexerIdAndEraIdManyToManyConnection;
  readonly id: Scalars['String']['output'];
  /** Reads and enables pagination through a set of `IndexerAllocationOverflow`. */
  readonly indexerAllocationOverflows: IndexerAllocationOverflowsConnection;
  /** Reads and enables pagination through a set of `IndexerAllocationRewardSummary`. */
  readonly indexerAllocationRewardSummaries: IndexerAllocationRewardSummariesConnection;
  /** Reads and enables pagination through a set of `IndexerAllocationReward`. */
  readonly indexerAllocationRewards: IndexerAllocationRewardsConnection;
  /** Reads and enables pagination through a set of `IndexerAllocationSummary`. */
  readonly indexerAllocationSummaries: IndexerAllocationSummariesConnection;
  /** Reads and enables pagination through a set of `IndexerAllocation`. */
  readonly indexerAllocations: IndexerAllocationsConnection;
  /** Reads and enables pagination through a set of `IndexerApySummary`. */
  readonly indexerApySummaries: IndexerApySummariesConnection;
  /** Reads and enables pagination through a set of `IndexerCommissionRate`. */
  readonly indexerCommissionRates: IndexerCommissionRatesConnection;
  /** Reads and enables pagination through a set of `IndexerEraDeploymentReward`. */
  readonly indexerEraDeploymentRewards: IndexerEraDeploymentRewardsConnection;
  /** Reads and enables pagination through a set of `IndexerLaborHistory`. */
  readonly indexerLaborHistories: IndexerLaborHistoriesConnection;
  /** Reads and enables pagination through a set of `IndexerMissedLabor`. */
  readonly indexerMissedLabors: IndexerMissedLaborsConnection;
  /** Reads and enables pagination through a set of `IndexerStakeWeight`. */
  readonly indexerStakeWeights: IndexerStakeWeightsConnection;
  /** Reads and enables pagination through a set of `IndexerStake`. */
  readonly indexerStakes: IndexerStakesConnection;
  readonly lastClaimEra: Maybe<Scalars['String']['output']>;
  readonly lastEvent: Maybe<Scalars['String']['output']>;
  readonly lastSettledEra: Maybe<Scalars['String']['output']>;
  readonly maxUnstakeAmount: Scalars['JSON']['output'];
  readonly metadata: Scalars['String']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  readonly nodeId: Scalars['ID']['output'];
  /** Reads and enables pagination through a set of `Offer`. */
  readonly offersByAcceptedOfferIndexerIdAndOfferId: IndexerOffersByAcceptedOfferIndexerIdAndOfferIdManyToManyConnection;
  /** Reads and enables pagination through a set of `IndexerDeployment`. */
  readonly projects: IndexerDeploymentsConnection;
  /** Reads and enables pagination through a set of `Project`. */
  readonly projectsByIndexerAllocationIndexerIdAndProjectId: IndexerProjectsByIndexerAllocationIndexerIdAndProjectIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Project`. */
  readonly projectsByIndexerAllocationRewardIndexerIdAndProjectId: IndexerProjectsByIndexerAllocationRewardIndexerIdAndProjectIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Project`. */
  readonly projectsByIndexerAllocationRewardSummaryIndexerIdAndProjectId: IndexerProjectsByIndexerAllocationRewardSummaryIndexerIdAndProjectIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Project`. */
  readonly projectsByIndexerAllocationSummaryIndexerIdAndProjectId: IndexerProjectsByIndexerAllocationSummaryIndexerIdAndProjectIdManyToManyConnection;
  /** Reads and enables pagination through a set of `IndexerReward`. */
  readonly rewards: IndexerRewardsConnection;
  readonly selfStake: Scalars['JSON']['output'];
  /** Reads and enables pagination through a set of `ServiceAgreement`. */
  readonly serviceAgreementsByAcceptedOfferIndexerIdAndServiceAgreementId: IndexerServiceAgreementsByAcceptedOfferIndexerIdAndServiceAgreementIdManyToManyConnection;
  readonly totalStake: Scalars['JSON']['output'];
};

export type IndexerAcceptedOffersArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Accepted_Offers_Distinct_Enum>>>;
  filter: InputMaybe<AcceptedOfferFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<AcceptedOffersOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type IndexerControllersArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Controllers_Distinct_Enum>>>;
  filter: InputMaybe<ControllerFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<ControllersOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type IndexerDelegationsArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Delegations_Distinct_Enum>>>;
  filter: InputMaybe<DelegationFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<DelegationsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type IndexerDelegatorsByDelegationIndexerIdAndDelegatorIdArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Delegators_Distinct_Enum>>>;
  filter: InputMaybe<DelegatorFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<DelegatorsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type IndexerDelegatorsByEraDelegatorIndexerApyIndexerIdAndDelegatorIdArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Delegators_Distinct_Enum>>>;
  filter: InputMaybe<DelegatorFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<DelegatorsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type IndexerDelegatorsByEraRewardIndexerIdAndDelegatorIdArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Delegators_Distinct_Enum>>>;
  filter: InputMaybe<DelegatorFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<DelegatorsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type IndexerDelegatorsByEraStakeIndexerIdAndDelegatorIdArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Delegators_Distinct_Enum>>>;
  filter: InputMaybe<DelegatorFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<DelegatorsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type IndexerDeploymentsByEraIndexerDeploymentApyIndexerIdAndDeploymentIdArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Deployments_Distinct_Enum>>>;
  filter: InputMaybe<DeploymentFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<DeploymentsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type IndexerDeploymentsByIndexerAllocationIndexerIdAndDeploymentIdArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Deployments_Distinct_Enum>>>;
  filter: InputMaybe<DeploymentFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<DeploymentsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type IndexerDeploymentsByIndexerAllocationRewardIndexerIdAndDeploymentIdArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Deployments_Distinct_Enum>>>;
  filter: InputMaybe<DeploymentFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<DeploymentsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type IndexerDeploymentsByIndexerAllocationRewardSummaryIndexerIdAndDeploymentIdArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Deployments_Distinct_Enum>>>;
  filter: InputMaybe<DeploymentFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<DeploymentsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type IndexerDeploymentsByIndexerAllocationSummaryIndexerIdAndDeploymentIdArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Deployments_Distinct_Enum>>>;
  filter: InputMaybe<DeploymentFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<DeploymentsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type IndexerDeploymentsByIndexerDeploymentIndexerIdAndDeploymentIdArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Deployments_Distinct_Enum>>>;
  filter: InputMaybe<DeploymentFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<DeploymentsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type IndexerDeploymentsByIndexerMissedLaborIndexerIdAndDeploymentIdArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Deployments_Distinct_Enum>>>;
  filter: InputMaybe<DeploymentFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<DeploymentsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type IndexerEraDelegatorIndexerApiesArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Era_Delegator_Indexer_Apies_Distinct_Enum>>>;
  filter: InputMaybe<EraDelegatorIndexerApyFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<EraDelegatorIndexerApiesOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type IndexerEraIndexerApiesArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Era_Indexer_Apies_Distinct_Enum>>>;
  filter: InputMaybe<EraIndexerApyFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<EraIndexerApiesOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type IndexerEraIndexerDeploymentApiesArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Era_Indexer_Deployment_Apies_Distinct_Enum>>>;
  filter: InputMaybe<EraIndexerDeploymentApyFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<EraIndexerDeploymentApiesOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type IndexerEraRewardsArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Era_Rewards_Distinct_Enum>>>;
  filter: InputMaybe<EraRewardFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<EraRewardsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type IndexerEraStakesArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Era_Stakes_Distinct_Enum>>>;
  filter: InputMaybe<EraStakeFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<EraStakesOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type IndexerErasByEraRewardIndexerIdAndEraIdArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Eras_Distinct_Enum>>>;
  filter: InputMaybe<EraFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<ErasOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type IndexerErasByEraStakeIndexerIdAndEraIdArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Eras_Distinct_Enum>>>;
  filter: InputMaybe<EraFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<ErasOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type IndexerErasByIndexerCommissionRateIndexerIdAndEraIdArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Eras_Distinct_Enum>>>;
  filter: InputMaybe<EraFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<ErasOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type IndexerErasByIndexerStakeIndexerIdAndEraIdArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Eras_Distinct_Enum>>>;
  filter: InputMaybe<EraFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<ErasOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type IndexerIndexerAllocationOverflowsArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Allocation_Overflows_Distinct_Enum>>>;
  filter: InputMaybe<IndexerAllocationOverflowFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexerAllocationOverflowsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type IndexerIndexerAllocationRewardSummariesArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Allocation_Reward_Summaries_Distinct_Enum>>>;
  filter: InputMaybe<IndexerAllocationRewardSummaryFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexerAllocationRewardSummariesOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type IndexerIndexerAllocationRewardsArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Allocation_Rewards_Distinct_Enum>>>;
  filter: InputMaybe<IndexerAllocationRewardFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexerAllocationRewardsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type IndexerIndexerAllocationSummariesArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Allocation_Summaries_Distinct_Enum>>>;
  filter: InputMaybe<IndexerAllocationSummaryFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexerAllocationSummariesOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type IndexerIndexerAllocationsArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Allocations_Distinct_Enum>>>;
  filter: InputMaybe<IndexerAllocationFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexerAllocationsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type IndexerIndexerApySummariesArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Apy_Summaries_Distinct_Enum>>>;
  filter: InputMaybe<IndexerApySummaryFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexerApySummariesOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type IndexerIndexerCommissionRatesArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Commission_Rates_Distinct_Enum>>>;
  filter: InputMaybe<IndexerCommissionRateFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexerCommissionRatesOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type IndexerIndexerEraDeploymentRewardsArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Era_Deployment_Rewards_Distinct_Enum>>>;
  filter: InputMaybe<IndexerEraDeploymentRewardFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexerEraDeploymentRewardsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type IndexerIndexerLaborHistoriesArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Labor_Histories_Distinct_Enum>>>;
  filter: InputMaybe<IndexerLaborHistoryFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexerLaborHistoriesOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type IndexerIndexerMissedLaborsArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Missed_Labors_Distinct_Enum>>>;
  filter: InputMaybe<IndexerMissedLaborFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexerMissedLaborsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type IndexerIndexerStakeWeightsArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Stake_Weights_Distinct_Enum>>>;
  filter: InputMaybe<IndexerStakeWeightFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexerStakeWeightsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type IndexerIndexerStakesArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Stakes_Distinct_Enum>>>;
  filter: InputMaybe<IndexerStakeFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexerStakesOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type IndexerOffersByAcceptedOfferIndexerIdAndOfferIdArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Offers_Distinct_Enum>>>;
  filter: InputMaybe<OfferFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<OffersOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type IndexerProjectsArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Deployments_Distinct_Enum>>>;
  filter: InputMaybe<IndexerDeploymentFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexerDeploymentsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type IndexerProjectsByIndexerAllocationIndexerIdAndProjectIdArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Projects_Distinct_Enum>>>;
  filter: InputMaybe<ProjectFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<ProjectsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type IndexerProjectsByIndexerAllocationRewardIndexerIdAndProjectIdArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Projects_Distinct_Enum>>>;
  filter: InputMaybe<ProjectFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<ProjectsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type IndexerProjectsByIndexerAllocationRewardSummaryIndexerIdAndProjectIdArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Projects_Distinct_Enum>>>;
  filter: InputMaybe<ProjectFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<ProjectsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type IndexerProjectsByIndexerAllocationSummaryIndexerIdAndProjectIdArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Projects_Distinct_Enum>>>;
  filter: InputMaybe<ProjectFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<ProjectsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type IndexerRewardsArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Rewards_Distinct_Enum>>>;
  filter: InputMaybe<IndexerRewardFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexerRewardsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type IndexerServiceAgreementsByAcceptedOfferIndexerIdAndServiceAgreementIdArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Service_Agreements_Distinct_Enum>>>;
  filter: InputMaybe<ServiceAgreementFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<ServiceAgreementsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type IndexerAggregates = {
  readonly __typename: 'IndexerAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly average: Maybe<IndexerAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly distinctCount: Maybe<IndexerDistinctCountAggregates>;
  readonly keys: Maybe<ReadonlyArray<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly max: Maybe<IndexerMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly min: Maybe<IndexerMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevPopulation: Maybe<IndexerStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevSample: Maybe<IndexerStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly sum: Maybe<IndexerSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly variancePopulation: Maybe<IndexerVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly varianceSample: Maybe<IndexerVarianceSampleAggregates>;
};

export type IndexerAllocation = Node & {
  readonly __typename: 'IndexerAllocation';
  readonly amountAdded: Scalars['BigFloat']['output'];
  readonly amountRemoved: Scalars['BigFloat']['output'];
  readonly createAt: Scalars['Datetime']['output'];
  /** Reads a single `Deployment` that is related to this `IndexerAllocation`. */
  readonly deployment: Maybe<Deployment>;
  readonly deploymentId: Scalars['String']['output'];
  readonly eraIdx: Scalars['Int']['output'];
  readonly id: Scalars['String']['output'];
  /** Reads a single `Indexer` that is related to this `IndexerAllocation`. */
  readonly indexer: Maybe<Indexer>;
  readonly indexerId: Scalars['String']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  readonly nodeId: Scalars['ID']['output'];
  /** Reads a single `Project` that is related to this `IndexerAllocation`. */
  readonly project: Maybe<Project>;
  readonly projectId: Scalars['String']['output'];
};

export type IndexerAllocationAggregates = {
  readonly __typename: 'IndexerAllocationAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly average: Maybe<IndexerAllocationAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly distinctCount: Maybe<IndexerAllocationDistinctCountAggregates>;
  readonly keys: Maybe<ReadonlyArray<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly max: Maybe<IndexerAllocationMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly min: Maybe<IndexerAllocationMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevPopulation: Maybe<IndexerAllocationStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevSample: Maybe<IndexerAllocationStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly sum: Maybe<IndexerAllocationSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly variancePopulation: Maybe<IndexerAllocationVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly varianceSample: Maybe<IndexerAllocationVarianceSampleAggregates>;
};

/** A filter to be used against aggregates of `IndexerAllocation` object types. */
export type IndexerAllocationAggregatesFilter = {
  /** Mean average aggregate over matching `IndexerAllocation` objects. */
  readonly average: InputMaybe<IndexerAllocationAverageAggregateFilter>;
  /** Distinct count aggregate over matching `IndexerAllocation` objects. */
  readonly distinctCount: InputMaybe<IndexerAllocationDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `IndexerAllocation` object to be included within the aggregate. */
  readonly filter: InputMaybe<IndexerAllocationFilter>;
  /** Maximum aggregate over matching `IndexerAllocation` objects. */
  readonly max: InputMaybe<IndexerAllocationMaxAggregateFilter>;
  /** Minimum aggregate over matching `IndexerAllocation` objects. */
  readonly min: InputMaybe<IndexerAllocationMinAggregateFilter>;
  /** Population standard deviation aggregate over matching `IndexerAllocation` objects. */
  readonly stddevPopulation: InputMaybe<IndexerAllocationStddevPopulationAggregateFilter>;
  /** Sample standard deviation aggregate over matching `IndexerAllocation` objects. */
  readonly stddevSample: InputMaybe<IndexerAllocationStddevSampleAggregateFilter>;
  /** Sum aggregate over matching `IndexerAllocation` objects. */
  readonly sum: InputMaybe<IndexerAllocationSumAggregateFilter>;
  /** Population variance aggregate over matching `IndexerAllocation` objects. */
  readonly variancePopulation: InputMaybe<IndexerAllocationVariancePopulationAggregateFilter>;
  /** Sample variance aggregate over matching `IndexerAllocation` objects. */
  readonly varianceSample: InputMaybe<IndexerAllocationVarianceSampleAggregateFilter>;
};

export type IndexerAllocationAverageAggregateFilter = {
  readonly amountAdded: InputMaybe<BigFloatFilter>;
  readonly amountRemoved: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigFloatFilter>;
};

export type IndexerAllocationAverageAggregates = {
  readonly __typename: 'IndexerAllocationAverageAggregates';
  /** Mean average of amountAdded across the matching connection */
  readonly amountAdded: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of amountRemoved across the matching connection */
  readonly amountRemoved: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerAllocationDistinctCountAggregateFilter = {
  readonly _blockRange: InputMaybe<BigIntFilter>;
  readonly _id: InputMaybe<BigIntFilter>;
  readonly amountAdded: InputMaybe<BigIntFilter>;
  readonly amountRemoved: InputMaybe<BigIntFilter>;
  readonly createAt: InputMaybe<BigIntFilter>;
  readonly deploymentId: InputMaybe<BigIntFilter>;
  readonly eraIdx: InputMaybe<BigIntFilter>;
  readonly id: InputMaybe<BigIntFilter>;
  readonly indexerId: InputMaybe<BigIntFilter>;
  readonly projectId: InputMaybe<BigIntFilter>;
};

export type IndexerAllocationDistinctCountAggregates = {
  readonly __typename: 'IndexerAllocationDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  readonly _blockRange: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  readonly _id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of amountAdded across the matching connection */
  readonly amountAdded: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of amountRemoved across the matching connection */
  readonly amountRemoved: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createAt across the matching connection */
  readonly createAt: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of deploymentId across the matching connection */
  readonly deploymentId: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  readonly id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of indexerId across the matching connection */
  readonly indexerId: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of projectId across the matching connection */
  readonly projectId: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `IndexerAllocation` object types. All fields are combined with a logical ‘and.’ */
export type IndexerAllocationFilter = {
  /** Filter by the object’s `amountAdded` field. */
  readonly amountAdded: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `amountRemoved` field. */
  readonly amountRemoved: InputMaybe<BigFloatFilter>;
  /** Checks for all expressions in this list. */
  readonly and: InputMaybe<ReadonlyArray<IndexerAllocationFilter>>;
  /** Filter by the object’s `createAt` field. */
  readonly createAt: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `deployment` relation. */
  readonly deployment: InputMaybe<DeploymentFilter>;
  /** Filter by the object’s `deploymentId` field. */
  readonly deploymentId: InputMaybe<StringFilter>;
  /** Filter by the object’s `eraIdx` field. */
  readonly eraIdx: InputMaybe<IntFilter>;
  /** Filter by the object’s `id` field. */
  readonly id: InputMaybe<StringFilter>;
  /** Filter by the object’s `indexer` relation. */
  readonly indexer: InputMaybe<IndexerFilter>;
  /** Filter by the object’s `indexerId` field. */
  readonly indexerId: InputMaybe<StringFilter>;
  /** Negates the expression. */
  readonly not: InputMaybe<IndexerAllocationFilter>;
  /** Checks for any expressions in this list. */
  readonly or: InputMaybe<ReadonlyArray<IndexerAllocationFilter>>;
  /** Filter by the object’s `project` relation. */
  readonly project: InputMaybe<ProjectFilter>;
  /** Filter by the object’s `projectId` field. */
  readonly projectId: InputMaybe<StringFilter>;
};

export type IndexerAllocationMaxAggregateFilter = {
  readonly amountAdded: InputMaybe<BigFloatFilter>;
  readonly amountRemoved: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<IntFilter>;
};

export type IndexerAllocationMaxAggregates = {
  readonly __typename: 'IndexerAllocationMaxAggregates';
  /** Maximum of amountAdded across the matching connection */
  readonly amountAdded: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of amountRemoved across the matching connection */
  readonly amountRemoved: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['Int']['output']>;
};

export type IndexerAllocationMinAggregateFilter = {
  readonly amountAdded: InputMaybe<BigFloatFilter>;
  readonly amountRemoved: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<IntFilter>;
};

export type IndexerAllocationMinAggregates = {
  readonly __typename: 'IndexerAllocationMinAggregates';
  /** Minimum of amountAdded across the matching connection */
  readonly amountAdded: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of amountRemoved across the matching connection */
  readonly amountRemoved: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['Int']['output']>;
};

export type IndexerAllocationOverflow = Node & {
  readonly __typename: 'IndexerAllocationOverflow';
  readonly createAt: Scalars['Datetime']['output'];
  readonly eraIdxEnd: Scalars['Int']['output'];
  readonly eraIdxStart: Scalars['Int']['output'];
  readonly id: Scalars['String']['output'];
  /** Reads a single `Indexer` that is related to this `IndexerAllocationOverflow`. */
  readonly indexer: Maybe<Indexer>;
  readonly indexerId: Scalars['String']['output'];
  /** Reads and enables pagination through a set of `IndexerLatestAllocationOverflow`. */
  readonly indexerLatestAllocationOverflowsByOverflowIdId: IndexerLatestAllocationOverflowsConnection;
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  readonly nodeId: Scalars['ID']['output'];
  readonly overflowEnd: Scalars['Datetime']['output'];
  readonly overflowStart: Scalars['Datetime']['output'];
  readonly overflowTime: Scalars['BigFloat']['output'];
  readonly updateAt: Scalars['Datetime']['output'];
};

export type IndexerAllocationOverflowIndexerLatestAllocationOverflowsByOverflowIdIdArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Latest_Allocation_Overflows_Distinct_Enum>>>;
  filter: InputMaybe<IndexerLatestAllocationOverflowFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexerLatestAllocationOverflowsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type IndexerAllocationOverflowAggregates = {
  readonly __typename: 'IndexerAllocationOverflowAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly average: Maybe<IndexerAllocationOverflowAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly distinctCount: Maybe<IndexerAllocationOverflowDistinctCountAggregates>;
  readonly keys: Maybe<ReadonlyArray<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly max: Maybe<IndexerAllocationOverflowMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly min: Maybe<IndexerAllocationOverflowMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevPopulation: Maybe<IndexerAllocationOverflowStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevSample: Maybe<IndexerAllocationOverflowStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly sum: Maybe<IndexerAllocationOverflowSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly variancePopulation: Maybe<IndexerAllocationOverflowVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly varianceSample: Maybe<IndexerAllocationOverflowVarianceSampleAggregates>;
};

/** A filter to be used against aggregates of `IndexerAllocationOverflow` object types. */
export type IndexerAllocationOverflowAggregatesFilter = {
  /** Mean average aggregate over matching `IndexerAllocationOverflow` objects. */
  readonly average: InputMaybe<IndexerAllocationOverflowAverageAggregateFilter>;
  /** Distinct count aggregate over matching `IndexerAllocationOverflow` objects. */
  readonly distinctCount: InputMaybe<IndexerAllocationOverflowDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `IndexerAllocationOverflow` object to be included within the aggregate. */
  readonly filter: InputMaybe<IndexerAllocationOverflowFilter>;
  /** Maximum aggregate over matching `IndexerAllocationOverflow` objects. */
  readonly max: InputMaybe<IndexerAllocationOverflowMaxAggregateFilter>;
  /** Minimum aggregate over matching `IndexerAllocationOverflow` objects. */
  readonly min: InputMaybe<IndexerAllocationOverflowMinAggregateFilter>;
  /** Population standard deviation aggregate over matching `IndexerAllocationOverflow` objects. */
  readonly stddevPopulation: InputMaybe<IndexerAllocationOverflowStddevPopulationAggregateFilter>;
  /** Sample standard deviation aggregate over matching `IndexerAllocationOverflow` objects. */
  readonly stddevSample: InputMaybe<IndexerAllocationOverflowStddevSampleAggregateFilter>;
  /** Sum aggregate over matching `IndexerAllocationOverflow` objects. */
  readonly sum: InputMaybe<IndexerAllocationOverflowSumAggregateFilter>;
  /** Population variance aggregate over matching `IndexerAllocationOverflow` objects. */
  readonly variancePopulation: InputMaybe<IndexerAllocationOverflowVariancePopulationAggregateFilter>;
  /** Sample variance aggregate over matching `IndexerAllocationOverflow` objects. */
  readonly varianceSample: InputMaybe<IndexerAllocationOverflowVarianceSampleAggregateFilter>;
};

export type IndexerAllocationOverflowAverageAggregateFilter = {
  readonly eraIdxEnd: InputMaybe<BigFloatFilter>;
  readonly eraIdxStart: InputMaybe<BigFloatFilter>;
  readonly overflowTime: InputMaybe<BigFloatFilter>;
};

export type IndexerAllocationOverflowAverageAggregates = {
  readonly __typename: 'IndexerAllocationOverflowAverageAggregates';
  /** Mean average of eraIdxEnd across the matching connection */
  readonly eraIdxEnd: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of eraIdxStart across the matching connection */
  readonly eraIdxStart: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of overflowTime across the matching connection */
  readonly overflowTime: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerAllocationOverflowDistinctCountAggregateFilter = {
  readonly _blockRange: InputMaybe<BigIntFilter>;
  readonly _id: InputMaybe<BigIntFilter>;
  readonly createAt: InputMaybe<BigIntFilter>;
  readonly eraIdxEnd: InputMaybe<BigIntFilter>;
  readonly eraIdxStart: InputMaybe<BigIntFilter>;
  readonly id: InputMaybe<BigIntFilter>;
  readonly indexerId: InputMaybe<BigIntFilter>;
  readonly overflowEnd: InputMaybe<BigIntFilter>;
  readonly overflowStart: InputMaybe<BigIntFilter>;
  readonly overflowTime: InputMaybe<BigIntFilter>;
  readonly updateAt: InputMaybe<BigIntFilter>;
};

export type IndexerAllocationOverflowDistinctCountAggregates = {
  readonly __typename: 'IndexerAllocationOverflowDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  readonly _blockRange: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  readonly _id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createAt across the matching connection */
  readonly createAt: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of eraIdxEnd across the matching connection */
  readonly eraIdxEnd: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of eraIdxStart across the matching connection */
  readonly eraIdxStart: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  readonly id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of indexerId across the matching connection */
  readonly indexerId: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of overflowEnd across the matching connection */
  readonly overflowEnd: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of overflowStart across the matching connection */
  readonly overflowStart: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of overflowTime across the matching connection */
  readonly overflowTime: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of updateAt across the matching connection */
  readonly updateAt: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `IndexerAllocationOverflow` object types. All fields are combined with a logical ‘and.’ */
export type IndexerAllocationOverflowFilter = {
  /** Checks for all expressions in this list. */
  readonly and: InputMaybe<ReadonlyArray<IndexerAllocationOverflowFilter>>;
  /** Filter by the object’s `createAt` field. */
  readonly createAt: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `eraIdxEnd` field. */
  readonly eraIdxEnd: InputMaybe<IntFilter>;
  /** Filter by the object’s `eraIdxStart` field. */
  readonly eraIdxStart: InputMaybe<IntFilter>;
  /** Filter by the object’s `id` field. */
  readonly id: InputMaybe<StringFilter>;
  /** Filter by the object’s `indexer` relation. */
  readonly indexer: InputMaybe<IndexerFilter>;
  /** Filter by the object’s `indexerId` field. */
  readonly indexerId: InputMaybe<StringFilter>;
  /** Filter by the object’s `indexerLatestAllocationOverflowsByOverflowIdId` relation. */
  readonly indexerLatestAllocationOverflowsByOverflowIdId: InputMaybe<IndexerAllocationOverflowToManyIndexerLatestAllocationOverflowFilter>;
  /** Some related `indexerLatestAllocationOverflowsByOverflowIdId` exist. */
  readonly indexerLatestAllocationOverflowsByOverflowIdIdExist: InputMaybe<Scalars['Boolean']['input']>;
  /** Negates the expression. */
  readonly not: InputMaybe<IndexerAllocationOverflowFilter>;
  /** Checks for any expressions in this list. */
  readonly or: InputMaybe<ReadonlyArray<IndexerAllocationOverflowFilter>>;
  /** Filter by the object’s `overflowEnd` field. */
  readonly overflowEnd: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `overflowStart` field. */
  readonly overflowStart: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `overflowTime` field. */
  readonly overflowTime: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `updateAt` field. */
  readonly updateAt: InputMaybe<DatetimeFilter>;
};

export type IndexerAllocationOverflowMaxAggregateFilter = {
  readonly eraIdxEnd: InputMaybe<IntFilter>;
  readonly eraIdxStart: InputMaybe<IntFilter>;
  readonly overflowTime: InputMaybe<BigFloatFilter>;
};

export type IndexerAllocationOverflowMaxAggregates = {
  readonly __typename: 'IndexerAllocationOverflowMaxAggregates';
  /** Maximum of eraIdxEnd across the matching connection */
  readonly eraIdxEnd: Maybe<Scalars['Int']['output']>;
  /** Maximum of eraIdxStart across the matching connection */
  readonly eraIdxStart: Maybe<Scalars['Int']['output']>;
  /** Maximum of overflowTime across the matching connection */
  readonly overflowTime: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerAllocationOverflowMinAggregateFilter = {
  readonly eraIdxEnd: InputMaybe<IntFilter>;
  readonly eraIdxStart: InputMaybe<IntFilter>;
  readonly overflowTime: InputMaybe<BigFloatFilter>;
};

export type IndexerAllocationOverflowMinAggregates = {
  readonly __typename: 'IndexerAllocationOverflowMinAggregates';
  /** Minimum of eraIdxEnd across the matching connection */
  readonly eraIdxEnd: Maybe<Scalars['Int']['output']>;
  /** Minimum of eraIdxStart across the matching connection */
  readonly eraIdxStart: Maybe<Scalars['Int']['output']>;
  /** Minimum of overflowTime across the matching connection */
  readonly overflowTime: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerAllocationOverflowStddevPopulationAggregateFilter = {
  readonly eraIdxEnd: InputMaybe<BigFloatFilter>;
  readonly eraIdxStart: InputMaybe<BigFloatFilter>;
  readonly overflowTime: InputMaybe<BigFloatFilter>;
};

export type IndexerAllocationOverflowStddevPopulationAggregates = {
  readonly __typename: 'IndexerAllocationOverflowStddevPopulationAggregates';
  /** Population standard deviation of eraIdxEnd across the matching connection */
  readonly eraIdxEnd: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of eraIdxStart across the matching connection */
  readonly eraIdxStart: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of overflowTime across the matching connection */
  readonly overflowTime: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerAllocationOverflowStddevSampleAggregateFilter = {
  readonly eraIdxEnd: InputMaybe<BigFloatFilter>;
  readonly eraIdxStart: InputMaybe<BigFloatFilter>;
  readonly overflowTime: InputMaybe<BigFloatFilter>;
};

export type IndexerAllocationOverflowStddevSampleAggregates = {
  readonly __typename: 'IndexerAllocationOverflowStddevSampleAggregates';
  /** Sample standard deviation of eraIdxEnd across the matching connection */
  readonly eraIdxEnd: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of eraIdxStart across the matching connection */
  readonly eraIdxStart: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of overflowTime across the matching connection */
  readonly overflowTime: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerAllocationOverflowSumAggregateFilter = {
  readonly eraIdxEnd: InputMaybe<BigIntFilter>;
  readonly eraIdxStart: InputMaybe<BigIntFilter>;
  readonly overflowTime: InputMaybe<BigFloatFilter>;
};

export type IndexerAllocationOverflowSumAggregates = {
  readonly __typename: 'IndexerAllocationOverflowSumAggregates';
  /** Sum of eraIdxEnd across the matching connection */
  readonly eraIdxEnd: Scalars['BigInt']['output'];
  /** Sum of eraIdxStart across the matching connection */
  readonly eraIdxStart: Scalars['BigInt']['output'];
  /** Sum of overflowTime across the matching connection */
  readonly overflowTime: Scalars['BigFloat']['output'];
};

/** A filter to be used against many `IndexerLatestAllocationOverflow` object types. All fields are combined with a logical ‘and.’ */
export type IndexerAllocationOverflowToManyIndexerLatestAllocationOverflowFilter = {
  /** Aggregates across related `IndexerLatestAllocationOverflow` match the filter criteria. */
  readonly aggregates: InputMaybe<IndexerLatestAllocationOverflowAggregatesFilter>;
  /** Every related `IndexerLatestAllocationOverflow` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly every: InputMaybe<IndexerLatestAllocationOverflowFilter>;
  /** No related `IndexerLatestAllocationOverflow` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly none: InputMaybe<IndexerLatestAllocationOverflowFilter>;
  /** Some related `IndexerLatestAllocationOverflow` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly some: InputMaybe<IndexerLatestAllocationOverflowFilter>;
};

export type IndexerAllocationOverflowVariancePopulationAggregateFilter = {
  readonly eraIdxEnd: InputMaybe<BigFloatFilter>;
  readonly eraIdxStart: InputMaybe<BigFloatFilter>;
  readonly overflowTime: InputMaybe<BigFloatFilter>;
};

export type IndexerAllocationOverflowVariancePopulationAggregates = {
  readonly __typename: 'IndexerAllocationOverflowVariancePopulationAggregates';
  /** Population variance of eraIdxEnd across the matching connection */
  readonly eraIdxEnd: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of eraIdxStart across the matching connection */
  readonly eraIdxStart: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of overflowTime across the matching connection */
  readonly overflowTime: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerAllocationOverflowVarianceSampleAggregateFilter = {
  readonly eraIdxEnd: InputMaybe<BigFloatFilter>;
  readonly eraIdxStart: InputMaybe<BigFloatFilter>;
  readonly overflowTime: InputMaybe<BigFloatFilter>;
};

export type IndexerAllocationOverflowVarianceSampleAggregates = {
  readonly __typename: 'IndexerAllocationOverflowVarianceSampleAggregates';
  /** Sample variance of eraIdxEnd across the matching connection */
  readonly eraIdxEnd: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of eraIdxStart across the matching connection */
  readonly eraIdxStart: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of overflowTime across the matching connection */
  readonly overflowTime: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `IndexerAllocationOverflow` values. */
export type IndexerAllocationOverflowsConnection = {
  readonly __typename: 'IndexerAllocationOverflowsConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<IndexerAllocationOverflowAggregates>;
  /** A list of edges which contains the `IndexerAllocationOverflow` and cursor to aid in pagination. */
  readonly edges: ReadonlyArray<IndexerAllocationOverflowsEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<IndexerAllocationOverflowAggregates>>;
  /** A list of `IndexerAllocationOverflow` objects. */
  readonly nodes: ReadonlyArray<Maybe<IndexerAllocationOverflow>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `IndexerAllocationOverflow` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `IndexerAllocationOverflow` values. */
export type IndexerAllocationOverflowsConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<IndexerAllocationOverflowsGroupBy>;
  having: InputMaybe<IndexerAllocationOverflowsHavingInput>;
};

/** A `IndexerAllocationOverflow` edge in the connection. */
export type IndexerAllocationOverflowsEdge = {
  readonly __typename: 'IndexerAllocationOverflowsEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `IndexerAllocationOverflow` at the end of the edge. */
  readonly node: Maybe<IndexerAllocationOverflow>;
};

/** Grouping methods for `IndexerAllocationOverflow` for usage during aggregation. */
export enum IndexerAllocationOverflowsGroupBy {
  CREATE_AT = 'CREATE_AT',
  CREATE_AT_TRUNCATED_TO_DAY = 'CREATE_AT_TRUNCATED_TO_DAY',
  CREATE_AT_TRUNCATED_TO_HOUR = 'CREATE_AT_TRUNCATED_TO_HOUR',
  ERA_IDX_END = 'ERA_IDX_END',
  ERA_IDX_START = 'ERA_IDX_START',
  ID = 'ID',
  INDEXER_ID = 'INDEXER_ID',
  OVERFLOW_END = 'OVERFLOW_END',
  OVERFLOW_END_TRUNCATED_TO_DAY = 'OVERFLOW_END_TRUNCATED_TO_DAY',
  OVERFLOW_END_TRUNCATED_TO_HOUR = 'OVERFLOW_END_TRUNCATED_TO_HOUR',
  OVERFLOW_START = 'OVERFLOW_START',
  OVERFLOW_START_TRUNCATED_TO_DAY = 'OVERFLOW_START_TRUNCATED_TO_DAY',
  OVERFLOW_START_TRUNCATED_TO_HOUR = 'OVERFLOW_START_TRUNCATED_TO_HOUR',
  OVERFLOW_TIME = 'OVERFLOW_TIME',
  UPDATE_AT = 'UPDATE_AT',
  UPDATE_AT_TRUNCATED_TO_DAY = 'UPDATE_AT_TRUNCATED_TO_DAY',
  UPDATE_AT_TRUNCATED_TO_HOUR = 'UPDATE_AT_TRUNCATED_TO_HOUR',
}

export type IndexerAllocationOverflowsHavingAverageInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdxEnd: InputMaybe<HavingIntFilter>;
  readonly eraIdxStart: InputMaybe<HavingIntFilter>;
  readonly overflowEnd: InputMaybe<HavingDatetimeFilter>;
  readonly overflowStart: InputMaybe<HavingDatetimeFilter>;
  readonly overflowTime: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerAllocationOverflowsHavingDistinctCountInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdxEnd: InputMaybe<HavingIntFilter>;
  readonly eraIdxStart: InputMaybe<HavingIntFilter>;
  readonly overflowEnd: InputMaybe<HavingDatetimeFilter>;
  readonly overflowStart: InputMaybe<HavingDatetimeFilter>;
  readonly overflowTime: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

/** Conditions for `IndexerAllocationOverflow` aggregates. */
export type IndexerAllocationOverflowsHavingInput = {
  readonly AND: InputMaybe<ReadonlyArray<IndexerAllocationOverflowsHavingInput>>;
  readonly OR: InputMaybe<ReadonlyArray<IndexerAllocationOverflowsHavingInput>>;
  readonly average: InputMaybe<IndexerAllocationOverflowsHavingAverageInput>;
  readonly distinctCount: InputMaybe<IndexerAllocationOverflowsHavingDistinctCountInput>;
  readonly max: InputMaybe<IndexerAllocationOverflowsHavingMaxInput>;
  readonly min: InputMaybe<IndexerAllocationOverflowsHavingMinInput>;
  readonly stddevPopulation: InputMaybe<IndexerAllocationOverflowsHavingStddevPopulationInput>;
  readonly stddevSample: InputMaybe<IndexerAllocationOverflowsHavingStddevSampleInput>;
  readonly sum: InputMaybe<IndexerAllocationOverflowsHavingSumInput>;
  readonly variancePopulation: InputMaybe<IndexerAllocationOverflowsHavingVariancePopulationInput>;
  readonly varianceSample: InputMaybe<IndexerAllocationOverflowsHavingVarianceSampleInput>;
};

export type IndexerAllocationOverflowsHavingMaxInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdxEnd: InputMaybe<HavingIntFilter>;
  readonly eraIdxStart: InputMaybe<HavingIntFilter>;
  readonly overflowEnd: InputMaybe<HavingDatetimeFilter>;
  readonly overflowStart: InputMaybe<HavingDatetimeFilter>;
  readonly overflowTime: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerAllocationOverflowsHavingMinInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdxEnd: InputMaybe<HavingIntFilter>;
  readonly eraIdxStart: InputMaybe<HavingIntFilter>;
  readonly overflowEnd: InputMaybe<HavingDatetimeFilter>;
  readonly overflowStart: InputMaybe<HavingDatetimeFilter>;
  readonly overflowTime: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerAllocationOverflowsHavingStddevPopulationInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdxEnd: InputMaybe<HavingIntFilter>;
  readonly eraIdxStart: InputMaybe<HavingIntFilter>;
  readonly overflowEnd: InputMaybe<HavingDatetimeFilter>;
  readonly overflowStart: InputMaybe<HavingDatetimeFilter>;
  readonly overflowTime: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerAllocationOverflowsHavingStddevSampleInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdxEnd: InputMaybe<HavingIntFilter>;
  readonly eraIdxStart: InputMaybe<HavingIntFilter>;
  readonly overflowEnd: InputMaybe<HavingDatetimeFilter>;
  readonly overflowStart: InputMaybe<HavingDatetimeFilter>;
  readonly overflowTime: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerAllocationOverflowsHavingSumInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdxEnd: InputMaybe<HavingIntFilter>;
  readonly eraIdxStart: InputMaybe<HavingIntFilter>;
  readonly overflowEnd: InputMaybe<HavingDatetimeFilter>;
  readonly overflowStart: InputMaybe<HavingDatetimeFilter>;
  readonly overflowTime: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerAllocationOverflowsHavingVariancePopulationInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdxEnd: InputMaybe<HavingIntFilter>;
  readonly eraIdxStart: InputMaybe<HavingIntFilter>;
  readonly overflowEnd: InputMaybe<HavingDatetimeFilter>;
  readonly overflowStart: InputMaybe<HavingDatetimeFilter>;
  readonly overflowTime: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerAllocationOverflowsHavingVarianceSampleInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdxEnd: InputMaybe<HavingIntFilter>;
  readonly eraIdxStart: InputMaybe<HavingIntFilter>;
  readonly overflowEnd: InputMaybe<HavingDatetimeFilter>;
  readonly overflowStart: InputMaybe<HavingDatetimeFilter>;
  readonly overflowTime: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

/** Methods to use when ordering `IndexerAllocationOverflow`. */
export enum IndexerAllocationOverflowsOrderBy {
  CREATE_AT_ASC = 'CREATE_AT_ASC',
  CREATE_AT_DESC = 'CREATE_AT_DESC',
  ERA_IDX_END_ASC = 'ERA_IDX_END_ASC',
  ERA_IDX_END_DESC = 'ERA_IDX_END_DESC',
  ERA_IDX_START_ASC = 'ERA_IDX_START_ASC',
  ERA_IDX_START_DESC = 'ERA_IDX_START_DESC',
  ID_ASC = 'ID_ASC',
  ID_DESC = 'ID_DESC',
  INDEXER_BY_INDEXER_ID__ACTIVE_ASC = 'INDEXER_BY_INDEXER_ID__ACTIVE_ASC',
  INDEXER_BY_INDEXER_ID__ACTIVE_DESC = 'INDEXER_BY_INDEXER_ID__ACTIVE_DESC',
  INDEXER_BY_INDEXER_ID__CAPACITY_ASC = 'INDEXER_BY_INDEXER_ID__CAPACITY_ASC',
  INDEXER_BY_INDEXER_ID__CAPACITY_DESC = 'INDEXER_BY_INDEXER_ID__CAPACITY_DESC',
  INDEXER_BY_INDEXER_ID__COMMISSION_ASC = 'INDEXER_BY_INDEXER_ID__COMMISSION_ASC',
  INDEXER_BY_INDEXER_ID__COMMISSION_DESC = 'INDEXER_BY_INDEXER_ID__COMMISSION_DESC',
  INDEXER_BY_INDEXER_ID__CONTROLLER_ASC = 'INDEXER_BY_INDEXER_ID__CONTROLLER_ASC',
  INDEXER_BY_INDEXER_ID__CONTROLLER_DESC = 'INDEXER_BY_INDEXER_ID__CONTROLLER_DESC',
  INDEXER_BY_INDEXER_ID__CREATED_BLOCK_ASC = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_ASC',
  INDEXER_BY_INDEXER_ID__CREATED_BLOCK_DESC = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_DESC',
  INDEXER_BY_INDEXER_ID__ID_ASC = 'INDEXER_BY_INDEXER_ID__ID_ASC',
  INDEXER_BY_INDEXER_ID__ID_DESC = 'INDEXER_BY_INDEXER_ID__ID_DESC',
  INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_ASC = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_ASC',
  INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_DESC = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_DESC',
  INDEXER_BY_INDEXER_ID__LAST_EVENT_ASC = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_ASC',
  INDEXER_BY_INDEXER_ID__LAST_EVENT_DESC = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_DESC',
  INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_ASC = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_ASC',
  INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_DESC = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_DESC',
  INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_ASC = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_ASC',
  INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_DESC = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_DESC',
  INDEXER_BY_INDEXER_ID__METADATA_ASC = 'INDEXER_BY_INDEXER_ID__METADATA_ASC',
  INDEXER_BY_INDEXER_ID__METADATA_DESC = 'INDEXER_BY_INDEXER_ID__METADATA_DESC',
  INDEXER_BY_INDEXER_ID__SELF_STAKE_ASC = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_ASC',
  INDEXER_BY_INDEXER_ID__SELF_STAKE_DESC = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_DESC',
  INDEXER_BY_INDEXER_ID__TOTAL_STAKE_ASC = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_ASC',
  INDEXER_BY_INDEXER_ID__TOTAL_STAKE_DESC = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_DESC',
  INDEXER_ID_ASC = 'INDEXER_ID_ASC',
  INDEXER_ID_DESC = 'INDEXER_ID_DESC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_AVERAGE_BLOCK_RANGE_ASC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_AVERAGE_BLOCK_RANGE_ASC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_AVERAGE_BLOCK_RANGE_DESC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_AVERAGE_BLOCK_RANGE_DESC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_AVERAGE_CREATE_AT_ASC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_AVERAGE_CREATE_AT_ASC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_AVERAGE_CREATE_AT_DESC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_AVERAGE_CREATE_AT_DESC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_AVERAGE_ID_ASC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_AVERAGE_ID_ASC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_AVERAGE_ID_DESC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_AVERAGE_ID_DESC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_AVERAGE_OVERFLOW_ID_ID_ASC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_AVERAGE_OVERFLOW_ID_ID_ASC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_AVERAGE_OVERFLOW_ID_ID_DESC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_AVERAGE_OVERFLOW_ID_ID_DESC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_AVERAGE_UPDATE_AT_ASC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_AVERAGE_UPDATE_AT_ASC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_AVERAGE_UPDATE_AT_DESC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_AVERAGE_UPDATE_AT_DESC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_COUNT_ASC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_COUNT_ASC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_COUNT_DESC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_COUNT_DESC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_DISTINCT_COUNT_BLOCK_RANGE_ASC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_DISTINCT_COUNT_BLOCK_RANGE_DESC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_DISTINCT_COUNT_CREATE_AT_ASC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_DISTINCT_COUNT_CREATE_AT_ASC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_DISTINCT_COUNT_CREATE_AT_DESC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_DISTINCT_COUNT_CREATE_AT_DESC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_DISTINCT_COUNT_ID_ASC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_DISTINCT_COUNT_ID_ASC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_DISTINCT_COUNT_ID_DESC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_DISTINCT_COUNT_ID_DESC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_DISTINCT_COUNT_OVERFLOW_ID_ID_ASC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_DISTINCT_COUNT_OVERFLOW_ID_ID_ASC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_DISTINCT_COUNT_OVERFLOW_ID_ID_DESC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_DISTINCT_COUNT_OVERFLOW_ID_ID_DESC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_DISTINCT_COUNT_UPDATE_AT_ASC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_DISTINCT_COUNT_UPDATE_AT_ASC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_DISTINCT_COUNT_UPDATE_AT_DESC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_DISTINCT_COUNT_UPDATE_AT_DESC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_MAX_BLOCK_RANGE_ASC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_MAX_BLOCK_RANGE_ASC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_MAX_BLOCK_RANGE_DESC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_MAX_BLOCK_RANGE_DESC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_MAX_CREATE_AT_ASC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_MAX_CREATE_AT_ASC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_MAX_CREATE_AT_DESC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_MAX_CREATE_AT_DESC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_MAX_ID_ASC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_MAX_ID_ASC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_MAX_ID_DESC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_MAX_ID_DESC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_MAX_OVERFLOW_ID_ID_ASC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_MAX_OVERFLOW_ID_ID_ASC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_MAX_OVERFLOW_ID_ID_DESC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_MAX_OVERFLOW_ID_ID_DESC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_MAX_UPDATE_AT_ASC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_MAX_UPDATE_AT_ASC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_MAX_UPDATE_AT_DESC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_MAX_UPDATE_AT_DESC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_MIN_BLOCK_RANGE_ASC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_MIN_BLOCK_RANGE_ASC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_MIN_BLOCK_RANGE_DESC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_MIN_BLOCK_RANGE_DESC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_MIN_CREATE_AT_ASC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_MIN_CREATE_AT_ASC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_MIN_CREATE_AT_DESC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_MIN_CREATE_AT_DESC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_MIN_ID_ASC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_MIN_ID_ASC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_MIN_ID_DESC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_MIN_ID_DESC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_MIN_OVERFLOW_ID_ID_ASC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_MIN_OVERFLOW_ID_ID_ASC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_MIN_OVERFLOW_ID_ID_DESC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_MIN_OVERFLOW_ID_ID_DESC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_MIN_UPDATE_AT_ASC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_MIN_UPDATE_AT_ASC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_MIN_UPDATE_AT_DESC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_MIN_UPDATE_AT_DESC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_STDDEV_POPULATION_BLOCK_RANGE_ASC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_STDDEV_POPULATION_BLOCK_RANGE_DESC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_STDDEV_POPULATION_CREATE_AT_ASC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_STDDEV_POPULATION_CREATE_AT_ASC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_STDDEV_POPULATION_CREATE_AT_DESC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_STDDEV_POPULATION_CREATE_AT_DESC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_STDDEV_POPULATION_ID_ASC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_STDDEV_POPULATION_ID_ASC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_STDDEV_POPULATION_ID_DESC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_STDDEV_POPULATION_ID_DESC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_STDDEV_POPULATION_OVERFLOW_ID_ID_ASC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_STDDEV_POPULATION_OVERFLOW_ID_ID_ASC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_STDDEV_POPULATION_OVERFLOW_ID_ID_DESC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_STDDEV_POPULATION_OVERFLOW_ID_ID_DESC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_STDDEV_POPULATION_UPDATE_AT_ASC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_STDDEV_POPULATION_UPDATE_AT_ASC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_STDDEV_POPULATION_UPDATE_AT_DESC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_STDDEV_POPULATION_UPDATE_AT_DESC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_STDDEV_SAMPLE_BLOCK_RANGE_ASC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_STDDEV_SAMPLE_BLOCK_RANGE_DESC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_STDDEV_SAMPLE_CREATE_AT_ASC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_STDDEV_SAMPLE_CREATE_AT_ASC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_STDDEV_SAMPLE_CREATE_AT_DESC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_STDDEV_SAMPLE_CREATE_AT_DESC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_STDDEV_SAMPLE_ID_ASC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_STDDEV_SAMPLE_ID_ASC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_STDDEV_SAMPLE_ID_DESC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_STDDEV_SAMPLE_ID_DESC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_STDDEV_SAMPLE_OVERFLOW_ID_ID_ASC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_STDDEV_SAMPLE_OVERFLOW_ID_ID_ASC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_STDDEV_SAMPLE_OVERFLOW_ID_ID_DESC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_STDDEV_SAMPLE_OVERFLOW_ID_ID_DESC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_STDDEV_SAMPLE_UPDATE_AT_ASC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_STDDEV_SAMPLE_UPDATE_AT_ASC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_STDDEV_SAMPLE_UPDATE_AT_DESC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_STDDEV_SAMPLE_UPDATE_AT_DESC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_SUM_BLOCK_RANGE_ASC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_SUM_BLOCK_RANGE_ASC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_SUM_BLOCK_RANGE_DESC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_SUM_BLOCK_RANGE_DESC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_SUM_CREATE_AT_ASC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_SUM_CREATE_AT_ASC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_SUM_CREATE_AT_DESC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_SUM_CREATE_AT_DESC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_SUM_ID_ASC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_SUM_ID_ASC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_SUM_ID_DESC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_SUM_ID_DESC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_SUM_OVERFLOW_ID_ID_ASC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_SUM_OVERFLOW_ID_ID_ASC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_SUM_OVERFLOW_ID_ID_DESC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_SUM_OVERFLOW_ID_ID_DESC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_SUM_UPDATE_AT_ASC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_SUM_UPDATE_AT_ASC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_SUM_UPDATE_AT_DESC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_SUM_UPDATE_AT_DESC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_VARIANCE_POPULATION_BLOCK_RANGE_ASC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_VARIANCE_POPULATION_BLOCK_RANGE_DESC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_VARIANCE_POPULATION_CREATE_AT_ASC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_VARIANCE_POPULATION_CREATE_AT_ASC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_VARIANCE_POPULATION_CREATE_AT_DESC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_VARIANCE_POPULATION_CREATE_AT_DESC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_VARIANCE_POPULATION_ID_ASC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_VARIANCE_POPULATION_ID_ASC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_VARIANCE_POPULATION_ID_DESC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_VARIANCE_POPULATION_ID_DESC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_VARIANCE_POPULATION_OVERFLOW_ID_ID_ASC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_VARIANCE_POPULATION_OVERFLOW_ID_ID_ASC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_VARIANCE_POPULATION_OVERFLOW_ID_ID_DESC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_VARIANCE_POPULATION_OVERFLOW_ID_ID_DESC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_VARIANCE_POPULATION_UPDATE_AT_ASC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_VARIANCE_POPULATION_UPDATE_AT_ASC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_VARIANCE_POPULATION_UPDATE_AT_DESC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_VARIANCE_POPULATION_UPDATE_AT_DESC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_VARIANCE_SAMPLE_BLOCK_RANGE_ASC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_VARIANCE_SAMPLE_BLOCK_RANGE_DESC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_VARIANCE_SAMPLE_CREATE_AT_ASC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_VARIANCE_SAMPLE_CREATE_AT_ASC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_VARIANCE_SAMPLE_CREATE_AT_DESC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_VARIANCE_SAMPLE_CREATE_AT_DESC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_VARIANCE_SAMPLE_ID_ASC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_VARIANCE_SAMPLE_ID_ASC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_VARIANCE_SAMPLE_ID_DESC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_VARIANCE_SAMPLE_ID_DESC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_VARIANCE_SAMPLE_OVERFLOW_ID_ID_ASC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_VARIANCE_SAMPLE_OVERFLOW_ID_ID_ASC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_VARIANCE_SAMPLE_OVERFLOW_ID_ID_DESC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_VARIANCE_SAMPLE_OVERFLOW_ID_ID_DESC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_VARIANCE_SAMPLE_UPDATE_AT_ASC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_VARIANCE_SAMPLE_UPDATE_AT_ASC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_VARIANCE_SAMPLE_UPDATE_AT_DESC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_VARIANCE_SAMPLE_UPDATE_AT_DESC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID__COUNT_ASC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID__COUNT_ASC',
  INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID__COUNT_DESC = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID__COUNT_DESC',
  NATURAL = 'NATURAL',
  OVERFLOW_END_ASC = 'OVERFLOW_END_ASC',
  OVERFLOW_END_DESC = 'OVERFLOW_END_DESC',
  OVERFLOW_START_ASC = 'OVERFLOW_START_ASC',
  OVERFLOW_START_DESC = 'OVERFLOW_START_DESC',
  OVERFLOW_TIME_ASC = 'OVERFLOW_TIME_ASC',
  OVERFLOW_TIME_DESC = 'OVERFLOW_TIME_DESC',
  PRIMARY_KEY_ASC = 'PRIMARY_KEY_ASC',
  PRIMARY_KEY_DESC = 'PRIMARY_KEY_DESC',
  UPDATE_AT_ASC = 'UPDATE_AT_ASC',
  UPDATE_AT_DESC = 'UPDATE_AT_DESC',
}

export type IndexerAllocationReward = Node & {
  readonly __typename: 'IndexerAllocationReward';
  readonly burnt: Scalars['BigFloat']['output'];
  readonly createAt: Scalars['Datetime']['output'];
  /** Reads a single `Deployment` that is related to this `IndexerAllocationReward`. */
  readonly deployment: Maybe<Deployment>;
  readonly deploymentId: Scalars['String']['output'];
  readonly eraIdx: Scalars['Int']['output'];
  readonly id: Scalars['String']['output'];
  /** Reads a single `Indexer` that is related to this `IndexerAllocationReward`. */
  readonly indexer: Maybe<Indexer>;
  readonly indexerId: Scalars['String']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  readonly nodeId: Scalars['ID']['output'];
  /** Reads a single `Project` that is related to this `IndexerAllocationReward`. */
  readonly project: Maybe<Project>;
  readonly projectId: Scalars['String']['output'];
  readonly reward: Scalars['BigFloat']['output'];
};

export type IndexerAllocationRewardAggregates = {
  readonly __typename: 'IndexerAllocationRewardAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly average: Maybe<IndexerAllocationRewardAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly distinctCount: Maybe<IndexerAllocationRewardDistinctCountAggregates>;
  readonly keys: Maybe<ReadonlyArray<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly max: Maybe<IndexerAllocationRewardMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly min: Maybe<IndexerAllocationRewardMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevPopulation: Maybe<IndexerAllocationRewardStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevSample: Maybe<IndexerAllocationRewardStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly sum: Maybe<IndexerAllocationRewardSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly variancePopulation: Maybe<IndexerAllocationRewardVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly varianceSample: Maybe<IndexerAllocationRewardVarianceSampleAggregates>;
};

/** A filter to be used against aggregates of `IndexerAllocationReward` object types. */
export type IndexerAllocationRewardAggregatesFilter = {
  /** Mean average aggregate over matching `IndexerAllocationReward` objects. */
  readonly average: InputMaybe<IndexerAllocationRewardAverageAggregateFilter>;
  /** Distinct count aggregate over matching `IndexerAllocationReward` objects. */
  readonly distinctCount: InputMaybe<IndexerAllocationRewardDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `IndexerAllocationReward` object to be included within the aggregate. */
  readonly filter: InputMaybe<IndexerAllocationRewardFilter>;
  /** Maximum aggregate over matching `IndexerAllocationReward` objects. */
  readonly max: InputMaybe<IndexerAllocationRewardMaxAggregateFilter>;
  /** Minimum aggregate over matching `IndexerAllocationReward` objects. */
  readonly min: InputMaybe<IndexerAllocationRewardMinAggregateFilter>;
  /** Population standard deviation aggregate over matching `IndexerAllocationReward` objects. */
  readonly stddevPopulation: InputMaybe<IndexerAllocationRewardStddevPopulationAggregateFilter>;
  /** Sample standard deviation aggregate over matching `IndexerAllocationReward` objects. */
  readonly stddevSample: InputMaybe<IndexerAllocationRewardStddevSampleAggregateFilter>;
  /** Sum aggregate over matching `IndexerAllocationReward` objects. */
  readonly sum: InputMaybe<IndexerAllocationRewardSumAggregateFilter>;
  /** Population variance aggregate over matching `IndexerAllocationReward` objects. */
  readonly variancePopulation: InputMaybe<IndexerAllocationRewardVariancePopulationAggregateFilter>;
  /** Sample variance aggregate over matching `IndexerAllocationReward` objects. */
  readonly varianceSample: InputMaybe<IndexerAllocationRewardVarianceSampleAggregateFilter>;
};

export type IndexerAllocationRewardAverageAggregateFilter = {
  readonly burnt: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigFloatFilter>;
  readonly reward: InputMaybe<BigFloatFilter>;
};

export type IndexerAllocationRewardAverageAggregates = {
  readonly __typename: 'IndexerAllocationRewardAverageAggregates';
  /** Mean average of burnt across the matching connection */
  readonly burnt: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of reward across the matching connection */
  readonly reward: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerAllocationRewardDistinctCountAggregateFilter = {
  readonly _blockRange: InputMaybe<BigIntFilter>;
  readonly _id: InputMaybe<BigIntFilter>;
  readonly burnt: InputMaybe<BigIntFilter>;
  readonly createAt: InputMaybe<BigIntFilter>;
  readonly deploymentId: InputMaybe<BigIntFilter>;
  readonly eraIdx: InputMaybe<BigIntFilter>;
  readonly id: InputMaybe<BigIntFilter>;
  readonly indexerId: InputMaybe<BigIntFilter>;
  readonly projectId: InputMaybe<BigIntFilter>;
  readonly reward: InputMaybe<BigIntFilter>;
};

export type IndexerAllocationRewardDistinctCountAggregates = {
  readonly __typename: 'IndexerAllocationRewardDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  readonly _blockRange: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  readonly _id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of burnt across the matching connection */
  readonly burnt: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createAt across the matching connection */
  readonly createAt: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of deploymentId across the matching connection */
  readonly deploymentId: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  readonly id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of indexerId across the matching connection */
  readonly indexerId: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of projectId across the matching connection */
  readonly projectId: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of reward across the matching connection */
  readonly reward: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `IndexerAllocationReward` object types. All fields are combined with a logical ‘and.’ */
export type IndexerAllocationRewardFilter = {
  /** Checks for all expressions in this list. */
  readonly and: InputMaybe<ReadonlyArray<IndexerAllocationRewardFilter>>;
  /** Filter by the object’s `burnt` field. */
  readonly burnt: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `createAt` field. */
  readonly createAt: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `deployment` relation. */
  readonly deployment: InputMaybe<DeploymentFilter>;
  /** Filter by the object’s `deploymentId` field. */
  readonly deploymentId: InputMaybe<StringFilter>;
  /** Filter by the object’s `eraIdx` field. */
  readonly eraIdx: InputMaybe<IntFilter>;
  /** Filter by the object’s `id` field. */
  readonly id: InputMaybe<StringFilter>;
  /** Filter by the object’s `indexer` relation. */
  readonly indexer: InputMaybe<IndexerFilter>;
  /** Filter by the object’s `indexerId` field. */
  readonly indexerId: InputMaybe<StringFilter>;
  /** Negates the expression. */
  readonly not: InputMaybe<IndexerAllocationRewardFilter>;
  /** Checks for any expressions in this list. */
  readonly or: InputMaybe<ReadonlyArray<IndexerAllocationRewardFilter>>;
  /** Filter by the object’s `project` relation. */
  readonly project: InputMaybe<ProjectFilter>;
  /** Filter by the object’s `projectId` field. */
  readonly projectId: InputMaybe<StringFilter>;
  /** Filter by the object’s `reward` field. */
  readonly reward: InputMaybe<BigFloatFilter>;
};

export type IndexerAllocationRewardMaxAggregateFilter = {
  readonly burnt: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<IntFilter>;
  readonly reward: InputMaybe<BigFloatFilter>;
};

export type IndexerAllocationRewardMaxAggregates = {
  readonly __typename: 'IndexerAllocationRewardMaxAggregates';
  /** Maximum of burnt across the matching connection */
  readonly burnt: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['Int']['output']>;
  /** Maximum of reward across the matching connection */
  readonly reward: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerAllocationRewardMinAggregateFilter = {
  readonly burnt: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<IntFilter>;
  readonly reward: InputMaybe<BigFloatFilter>;
};

export type IndexerAllocationRewardMinAggregates = {
  readonly __typename: 'IndexerAllocationRewardMinAggregates';
  /** Minimum of burnt across the matching connection */
  readonly burnt: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['Int']['output']>;
  /** Minimum of reward across the matching connection */
  readonly reward: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerAllocationRewardStddevPopulationAggregateFilter = {
  readonly burnt: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigFloatFilter>;
  readonly reward: InputMaybe<BigFloatFilter>;
};

export type IndexerAllocationRewardStddevPopulationAggregates = {
  readonly __typename: 'IndexerAllocationRewardStddevPopulationAggregates';
  /** Population standard deviation of burnt across the matching connection */
  readonly burnt: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of reward across the matching connection */
  readonly reward: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerAllocationRewardStddevSampleAggregateFilter = {
  readonly burnt: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigFloatFilter>;
  readonly reward: InputMaybe<BigFloatFilter>;
};

export type IndexerAllocationRewardStddevSampleAggregates = {
  readonly __typename: 'IndexerAllocationRewardStddevSampleAggregates';
  /** Sample standard deviation of burnt across the matching connection */
  readonly burnt: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of reward across the matching connection */
  readonly reward: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerAllocationRewardSumAggregateFilter = {
  readonly burnt: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigIntFilter>;
  readonly reward: InputMaybe<BigFloatFilter>;
};

export type IndexerAllocationRewardSumAggregates = {
  readonly __typename: 'IndexerAllocationRewardSumAggregates';
  /** Sum of burnt across the matching connection */
  readonly burnt: Scalars['BigFloat']['output'];
  /** Sum of eraIdx across the matching connection */
  readonly eraIdx: Scalars['BigInt']['output'];
  /** Sum of reward across the matching connection */
  readonly reward: Scalars['BigFloat']['output'];
};

/** A connection to a list of `IndexerAllocationRewardSummary` values. */
export type IndexerAllocationRewardSummariesConnection = {
  readonly __typename: 'IndexerAllocationRewardSummariesConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<IndexerAllocationRewardSummaryAggregates>;
  /** A list of edges which contains the `IndexerAllocationRewardSummary` and cursor to aid in pagination. */
  readonly edges: ReadonlyArray<IndexerAllocationRewardSummariesEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<IndexerAllocationRewardSummaryAggregates>>;
  /** A list of `IndexerAllocationRewardSummary` objects. */
  readonly nodes: ReadonlyArray<Maybe<IndexerAllocationRewardSummary>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `IndexerAllocationRewardSummary` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `IndexerAllocationRewardSummary` values. */
export type IndexerAllocationRewardSummariesConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<IndexerAllocationRewardSummariesGroupBy>;
  having: InputMaybe<IndexerAllocationRewardSummariesHavingInput>;
};

/** A `IndexerAllocationRewardSummary` edge in the connection. */
export type IndexerAllocationRewardSummariesEdge = {
  readonly __typename: 'IndexerAllocationRewardSummariesEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `IndexerAllocationRewardSummary` at the end of the edge. */
  readonly node: Maybe<IndexerAllocationRewardSummary>;
};

/** Grouping methods for `IndexerAllocationRewardSummary` for usage during aggregation. */
export enum IndexerAllocationRewardSummariesGroupBy {
  CREATE_AT = 'CREATE_AT',
  CREATE_AT_TRUNCATED_TO_DAY = 'CREATE_AT_TRUNCATED_TO_DAY',
  CREATE_AT_TRUNCATED_TO_HOUR = 'CREATE_AT_TRUNCATED_TO_HOUR',
  DEPLOYMENT_ID = 'DEPLOYMENT_ID',
  ID = 'ID',
  INDEXER_ID = 'INDEXER_ID',
  PROJECT_ID = 'PROJECT_ID',
  TOTAL_BURNT = 'TOTAL_BURNT',
  TOTAL_REWARD = 'TOTAL_REWARD',
  UPDATE_AT = 'UPDATE_AT',
  UPDATE_AT_TRUNCATED_TO_DAY = 'UPDATE_AT_TRUNCATED_TO_DAY',
  UPDATE_AT_TRUNCATED_TO_HOUR = 'UPDATE_AT_TRUNCATED_TO_HOUR',
}

export type IndexerAllocationRewardSummariesHavingAverageInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly totalBurnt: InputMaybe<HavingBigfloatFilter>;
  readonly totalReward: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerAllocationRewardSummariesHavingDistinctCountInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly totalBurnt: InputMaybe<HavingBigfloatFilter>;
  readonly totalReward: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

/** Conditions for `IndexerAllocationRewardSummary` aggregates. */
export type IndexerAllocationRewardSummariesHavingInput = {
  readonly AND: InputMaybe<ReadonlyArray<IndexerAllocationRewardSummariesHavingInput>>;
  readonly OR: InputMaybe<ReadonlyArray<IndexerAllocationRewardSummariesHavingInput>>;
  readonly average: InputMaybe<IndexerAllocationRewardSummariesHavingAverageInput>;
  readonly distinctCount: InputMaybe<IndexerAllocationRewardSummariesHavingDistinctCountInput>;
  readonly max: InputMaybe<IndexerAllocationRewardSummariesHavingMaxInput>;
  readonly min: InputMaybe<IndexerAllocationRewardSummariesHavingMinInput>;
  readonly stddevPopulation: InputMaybe<IndexerAllocationRewardSummariesHavingStddevPopulationInput>;
  readonly stddevSample: InputMaybe<IndexerAllocationRewardSummariesHavingStddevSampleInput>;
  readonly sum: InputMaybe<IndexerAllocationRewardSummariesHavingSumInput>;
  readonly variancePopulation: InputMaybe<IndexerAllocationRewardSummariesHavingVariancePopulationInput>;
  readonly varianceSample: InputMaybe<IndexerAllocationRewardSummariesHavingVarianceSampleInput>;
};

export type IndexerAllocationRewardSummariesHavingMaxInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly totalBurnt: InputMaybe<HavingBigfloatFilter>;
  readonly totalReward: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerAllocationRewardSummariesHavingMinInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly totalBurnt: InputMaybe<HavingBigfloatFilter>;
  readonly totalReward: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerAllocationRewardSummariesHavingStddevPopulationInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly totalBurnt: InputMaybe<HavingBigfloatFilter>;
  readonly totalReward: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerAllocationRewardSummariesHavingStddevSampleInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly totalBurnt: InputMaybe<HavingBigfloatFilter>;
  readonly totalReward: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerAllocationRewardSummariesHavingSumInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly totalBurnt: InputMaybe<HavingBigfloatFilter>;
  readonly totalReward: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerAllocationRewardSummariesHavingVariancePopulationInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly totalBurnt: InputMaybe<HavingBigfloatFilter>;
  readonly totalReward: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerAllocationRewardSummariesHavingVarianceSampleInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly totalBurnt: InputMaybe<HavingBigfloatFilter>;
  readonly totalReward: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

/** Methods to use when ordering `IndexerAllocationRewardSummary`. */
export enum IndexerAllocationRewardSummariesOrderBy {
  CREATE_AT_ASC = 'CREATE_AT_ASC',
  CREATE_AT_DESC = 'CREATE_AT_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__ID_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__ID_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__ID_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__ID_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_DESC',
  DEPLOYMENT_ID_ASC = 'DEPLOYMENT_ID_ASC',
  DEPLOYMENT_ID_DESC = 'DEPLOYMENT_ID_DESC',
  ID_ASC = 'ID_ASC',
  ID_DESC = 'ID_DESC',
  INDEXER_BY_INDEXER_ID__ACTIVE_ASC = 'INDEXER_BY_INDEXER_ID__ACTIVE_ASC',
  INDEXER_BY_INDEXER_ID__ACTIVE_DESC = 'INDEXER_BY_INDEXER_ID__ACTIVE_DESC',
  INDEXER_BY_INDEXER_ID__CAPACITY_ASC = 'INDEXER_BY_INDEXER_ID__CAPACITY_ASC',
  INDEXER_BY_INDEXER_ID__CAPACITY_DESC = 'INDEXER_BY_INDEXER_ID__CAPACITY_DESC',
  INDEXER_BY_INDEXER_ID__COMMISSION_ASC = 'INDEXER_BY_INDEXER_ID__COMMISSION_ASC',
  INDEXER_BY_INDEXER_ID__COMMISSION_DESC = 'INDEXER_BY_INDEXER_ID__COMMISSION_DESC',
  INDEXER_BY_INDEXER_ID__CONTROLLER_ASC = 'INDEXER_BY_INDEXER_ID__CONTROLLER_ASC',
  INDEXER_BY_INDEXER_ID__CONTROLLER_DESC = 'INDEXER_BY_INDEXER_ID__CONTROLLER_DESC',
  INDEXER_BY_INDEXER_ID__CREATED_BLOCK_ASC = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_ASC',
  INDEXER_BY_INDEXER_ID__CREATED_BLOCK_DESC = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_DESC',
  INDEXER_BY_INDEXER_ID__ID_ASC = 'INDEXER_BY_INDEXER_ID__ID_ASC',
  INDEXER_BY_INDEXER_ID__ID_DESC = 'INDEXER_BY_INDEXER_ID__ID_DESC',
  INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_ASC = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_ASC',
  INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_DESC = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_DESC',
  INDEXER_BY_INDEXER_ID__LAST_EVENT_ASC = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_ASC',
  INDEXER_BY_INDEXER_ID__LAST_EVENT_DESC = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_DESC',
  INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_ASC = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_ASC',
  INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_DESC = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_DESC',
  INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_ASC = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_ASC',
  INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_DESC = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_DESC',
  INDEXER_BY_INDEXER_ID__METADATA_ASC = 'INDEXER_BY_INDEXER_ID__METADATA_ASC',
  INDEXER_BY_INDEXER_ID__METADATA_DESC = 'INDEXER_BY_INDEXER_ID__METADATA_DESC',
  INDEXER_BY_INDEXER_ID__SELF_STAKE_ASC = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_ASC',
  INDEXER_BY_INDEXER_ID__SELF_STAKE_DESC = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_DESC',
  INDEXER_BY_INDEXER_ID__TOTAL_STAKE_ASC = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_ASC',
  INDEXER_BY_INDEXER_ID__TOTAL_STAKE_DESC = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_DESC',
  INDEXER_ID_ASC = 'INDEXER_ID_ASC',
  INDEXER_ID_DESC = 'INDEXER_ID_DESC',
  NATURAL = 'NATURAL',
  PRIMARY_KEY_ASC = 'PRIMARY_KEY_ASC',
  PRIMARY_KEY_DESC = 'PRIMARY_KEY_DESC',
  PROJECT_BY_PROJECT_ID__BOOST_ALLOCATION_RATIO_ASC = 'PROJECT_BY_PROJECT_ID__BOOST_ALLOCATION_RATIO_ASC',
  PROJECT_BY_PROJECT_ID__BOOST_ALLOCATION_RATIO_DESC = 'PROJECT_BY_PROJECT_ID__BOOST_ALLOCATION_RATIO_DESC',
  PROJECT_BY_PROJECT_ID__CREATED_BLOCK_ASC = 'PROJECT_BY_PROJECT_ID__CREATED_BLOCK_ASC',
  PROJECT_BY_PROJECT_ID__CREATED_BLOCK_DESC = 'PROJECT_BY_PROJECT_ID__CREATED_BLOCK_DESC',
  PROJECT_BY_PROJECT_ID__CREATED_TIMESTAMP_ASC = 'PROJECT_BY_PROJECT_ID__CREATED_TIMESTAMP_ASC',
  PROJECT_BY_PROJECT_ID__CREATED_TIMESTAMP_DESC = 'PROJECT_BY_PROJECT_ID__CREATED_TIMESTAMP_DESC',
  PROJECT_BY_PROJECT_ID__DEPLOYMENT_ID_ASC = 'PROJECT_BY_PROJECT_ID__DEPLOYMENT_ID_ASC',
  PROJECT_BY_PROJECT_ID__DEPLOYMENT_ID_DESC = 'PROJECT_BY_PROJECT_ID__DEPLOYMENT_ID_DESC',
  PROJECT_BY_PROJECT_ID__DEPLOYMENT_METADATA_ASC = 'PROJECT_BY_PROJECT_ID__DEPLOYMENT_METADATA_ASC',
  PROJECT_BY_PROJECT_ID__DEPLOYMENT_METADATA_DESC = 'PROJECT_BY_PROJECT_ID__DEPLOYMENT_METADATA_DESC',
  PROJECT_BY_PROJECT_ID__ID_ASC = 'PROJECT_BY_PROJECT_ID__ID_ASC',
  PROJECT_BY_PROJECT_ID__ID_DESC = 'PROJECT_BY_PROJECT_ID__ID_DESC',
  PROJECT_BY_PROJECT_ID__LAST_EVENT_ASC = 'PROJECT_BY_PROJECT_ID__LAST_EVENT_ASC',
  PROJECT_BY_PROJECT_ID__LAST_EVENT_DESC = 'PROJECT_BY_PROJECT_ID__LAST_EVENT_DESC',
  PROJECT_BY_PROJECT_ID__METADATA_ASC = 'PROJECT_BY_PROJECT_ID__METADATA_ASC',
  PROJECT_BY_PROJECT_ID__METADATA_DESC = 'PROJECT_BY_PROJECT_ID__METADATA_DESC',
  PROJECT_BY_PROJECT_ID__OWNER_ASC = 'PROJECT_BY_PROJECT_ID__OWNER_ASC',
  PROJECT_BY_PROJECT_ID__OWNER_DESC = 'PROJECT_BY_PROJECT_ID__OWNER_DESC',
  PROJECT_BY_PROJECT_ID__TOTAL_ALLOCATION_ASC = 'PROJECT_BY_PROJECT_ID__TOTAL_ALLOCATION_ASC',
  PROJECT_BY_PROJECT_ID__TOTAL_ALLOCATION_DESC = 'PROJECT_BY_PROJECT_ID__TOTAL_ALLOCATION_DESC',
  PROJECT_BY_PROJECT_ID__TOTAL_BOOST_ASC = 'PROJECT_BY_PROJECT_ID__TOTAL_BOOST_ASC',
  PROJECT_BY_PROJECT_ID__TOTAL_BOOST_DESC = 'PROJECT_BY_PROJECT_ID__TOTAL_BOOST_DESC',
  PROJECT_BY_PROJECT_ID__TOTAL_REWARD_ASC = 'PROJECT_BY_PROJECT_ID__TOTAL_REWARD_ASC',
  PROJECT_BY_PROJECT_ID__TOTAL_REWARD_DESC = 'PROJECT_BY_PROJECT_ID__TOTAL_REWARD_DESC',
  PROJECT_BY_PROJECT_ID__TYPE_ASC = 'PROJECT_BY_PROJECT_ID__TYPE_ASC',
  PROJECT_BY_PROJECT_ID__TYPE_DESC = 'PROJECT_BY_PROJECT_ID__TYPE_DESC',
  PROJECT_BY_PROJECT_ID__UPDATED_TIMESTAMP_ASC = 'PROJECT_BY_PROJECT_ID__UPDATED_TIMESTAMP_ASC',
  PROJECT_BY_PROJECT_ID__UPDATED_TIMESTAMP_DESC = 'PROJECT_BY_PROJECT_ID__UPDATED_TIMESTAMP_DESC',
  PROJECT_ID_ASC = 'PROJECT_ID_ASC',
  PROJECT_ID_DESC = 'PROJECT_ID_DESC',
  TOTAL_BURNT_ASC = 'TOTAL_BURNT_ASC',
  TOTAL_BURNT_DESC = 'TOTAL_BURNT_DESC',
  TOTAL_REWARD_ASC = 'TOTAL_REWARD_ASC',
  TOTAL_REWARD_DESC = 'TOTAL_REWARD_DESC',
  UPDATE_AT_ASC = 'UPDATE_AT_ASC',
  UPDATE_AT_DESC = 'UPDATE_AT_DESC',
}

export type IndexerAllocationRewardSummary = Node & {
  readonly __typename: 'IndexerAllocationRewardSummary';
  readonly createAt: Scalars['Datetime']['output'];
  /** Reads a single `Deployment` that is related to this `IndexerAllocationRewardSummary`. */
  readonly deployment: Maybe<Deployment>;
  readonly deploymentId: Scalars['String']['output'];
  readonly id: Scalars['String']['output'];
  /** Reads a single `Indexer` that is related to this `IndexerAllocationRewardSummary`. */
  readonly indexer: Maybe<Indexer>;
  readonly indexerId: Scalars['String']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  readonly nodeId: Scalars['ID']['output'];
  /** Reads a single `Project` that is related to this `IndexerAllocationRewardSummary`. */
  readonly project: Maybe<Project>;
  readonly projectId: Scalars['String']['output'];
  readonly totalBurnt: Scalars['BigFloat']['output'];
  readonly totalReward: Scalars['BigFloat']['output'];
  readonly updateAt: Scalars['Datetime']['output'];
};

export type IndexerAllocationRewardSummaryAggregates = {
  readonly __typename: 'IndexerAllocationRewardSummaryAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly average: Maybe<IndexerAllocationRewardSummaryAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly distinctCount: Maybe<IndexerAllocationRewardSummaryDistinctCountAggregates>;
  readonly keys: Maybe<ReadonlyArray<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly max: Maybe<IndexerAllocationRewardSummaryMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly min: Maybe<IndexerAllocationRewardSummaryMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevPopulation: Maybe<IndexerAllocationRewardSummaryStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevSample: Maybe<IndexerAllocationRewardSummaryStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly sum: Maybe<IndexerAllocationRewardSummarySumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly variancePopulation: Maybe<IndexerAllocationRewardSummaryVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly varianceSample: Maybe<IndexerAllocationRewardSummaryVarianceSampleAggregates>;
};

/** A filter to be used against aggregates of `IndexerAllocationRewardSummary` object types. */
export type IndexerAllocationRewardSummaryAggregatesFilter = {
  /** Mean average aggregate over matching `IndexerAllocationRewardSummary` objects. */
  readonly average: InputMaybe<IndexerAllocationRewardSummaryAverageAggregateFilter>;
  /** Distinct count aggregate over matching `IndexerAllocationRewardSummary` objects. */
  readonly distinctCount: InputMaybe<IndexerAllocationRewardSummaryDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `IndexerAllocationRewardSummary` object to be included within the aggregate. */
  readonly filter: InputMaybe<IndexerAllocationRewardSummaryFilter>;
  /** Maximum aggregate over matching `IndexerAllocationRewardSummary` objects. */
  readonly max: InputMaybe<IndexerAllocationRewardSummaryMaxAggregateFilter>;
  /** Minimum aggregate over matching `IndexerAllocationRewardSummary` objects. */
  readonly min: InputMaybe<IndexerAllocationRewardSummaryMinAggregateFilter>;
  /** Population standard deviation aggregate over matching `IndexerAllocationRewardSummary` objects. */
  readonly stddevPopulation: InputMaybe<IndexerAllocationRewardSummaryStddevPopulationAggregateFilter>;
  /** Sample standard deviation aggregate over matching `IndexerAllocationRewardSummary` objects. */
  readonly stddevSample: InputMaybe<IndexerAllocationRewardSummaryStddevSampleAggregateFilter>;
  /** Sum aggregate over matching `IndexerAllocationRewardSummary` objects. */
  readonly sum: InputMaybe<IndexerAllocationRewardSummarySumAggregateFilter>;
  /** Population variance aggregate over matching `IndexerAllocationRewardSummary` objects. */
  readonly variancePopulation: InputMaybe<IndexerAllocationRewardSummaryVariancePopulationAggregateFilter>;
  /** Sample variance aggregate over matching `IndexerAllocationRewardSummary` objects. */
  readonly varianceSample: InputMaybe<IndexerAllocationRewardSummaryVarianceSampleAggregateFilter>;
};

export type IndexerAllocationRewardSummaryAverageAggregateFilter = {
  readonly totalBurnt: InputMaybe<BigFloatFilter>;
  readonly totalReward: InputMaybe<BigFloatFilter>;
};

export type IndexerAllocationRewardSummaryAverageAggregates = {
  readonly __typename: 'IndexerAllocationRewardSummaryAverageAggregates';
  /** Mean average of totalBurnt across the matching connection */
  readonly totalBurnt: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of totalReward across the matching connection */
  readonly totalReward: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerAllocationRewardSummaryDistinctCountAggregateFilter = {
  readonly _blockRange: InputMaybe<BigIntFilter>;
  readonly _id: InputMaybe<BigIntFilter>;
  readonly createAt: InputMaybe<BigIntFilter>;
  readonly deploymentId: InputMaybe<BigIntFilter>;
  readonly id: InputMaybe<BigIntFilter>;
  readonly indexerId: InputMaybe<BigIntFilter>;
  readonly projectId: InputMaybe<BigIntFilter>;
  readonly totalBurnt: InputMaybe<BigIntFilter>;
  readonly totalReward: InputMaybe<BigIntFilter>;
  readonly updateAt: InputMaybe<BigIntFilter>;
};

export type IndexerAllocationRewardSummaryDistinctCountAggregates = {
  readonly __typename: 'IndexerAllocationRewardSummaryDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  readonly _blockRange: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  readonly _id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createAt across the matching connection */
  readonly createAt: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of deploymentId across the matching connection */
  readonly deploymentId: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  readonly id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of indexerId across the matching connection */
  readonly indexerId: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of projectId across the matching connection */
  readonly projectId: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of totalBurnt across the matching connection */
  readonly totalBurnt: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of totalReward across the matching connection */
  readonly totalReward: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of updateAt across the matching connection */
  readonly updateAt: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `IndexerAllocationRewardSummary` object types. All fields are combined with a logical ‘and.’ */
export type IndexerAllocationRewardSummaryFilter = {
  /** Checks for all expressions in this list. */
  readonly and: InputMaybe<ReadonlyArray<IndexerAllocationRewardSummaryFilter>>;
  /** Filter by the object’s `createAt` field. */
  readonly createAt: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `deployment` relation. */
  readonly deployment: InputMaybe<DeploymentFilter>;
  /** Filter by the object’s `deploymentId` field. */
  readonly deploymentId: InputMaybe<StringFilter>;
  /** Filter by the object’s `id` field. */
  readonly id: InputMaybe<StringFilter>;
  /** Filter by the object’s `indexer` relation. */
  readonly indexer: InputMaybe<IndexerFilter>;
  /** Filter by the object’s `indexerId` field. */
  readonly indexerId: InputMaybe<StringFilter>;
  /** Negates the expression. */
  readonly not: InputMaybe<IndexerAllocationRewardSummaryFilter>;
  /** Checks for any expressions in this list. */
  readonly or: InputMaybe<ReadonlyArray<IndexerAllocationRewardSummaryFilter>>;
  /** Filter by the object’s `project` relation. */
  readonly project: InputMaybe<ProjectFilter>;
  /** Filter by the object’s `projectId` field. */
  readonly projectId: InputMaybe<StringFilter>;
  /** Filter by the object’s `totalBurnt` field. */
  readonly totalBurnt: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `totalReward` field. */
  readonly totalReward: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `updateAt` field. */
  readonly updateAt: InputMaybe<DatetimeFilter>;
};

export type IndexerAllocationRewardSummaryMaxAggregateFilter = {
  readonly totalBurnt: InputMaybe<BigFloatFilter>;
  readonly totalReward: InputMaybe<BigFloatFilter>;
};

export type IndexerAllocationRewardSummaryMaxAggregates = {
  readonly __typename: 'IndexerAllocationRewardSummaryMaxAggregates';
  /** Maximum of totalBurnt across the matching connection */
  readonly totalBurnt: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of totalReward across the matching connection */
  readonly totalReward: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerAllocationRewardSummaryMinAggregateFilter = {
  readonly totalBurnt: InputMaybe<BigFloatFilter>;
  readonly totalReward: InputMaybe<BigFloatFilter>;
};

export type IndexerAllocationRewardSummaryMinAggregates = {
  readonly __typename: 'IndexerAllocationRewardSummaryMinAggregates';
  /** Minimum of totalBurnt across the matching connection */
  readonly totalBurnt: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of totalReward across the matching connection */
  readonly totalReward: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerAllocationRewardSummaryStddevPopulationAggregateFilter = {
  readonly totalBurnt: InputMaybe<BigFloatFilter>;
  readonly totalReward: InputMaybe<BigFloatFilter>;
};

export type IndexerAllocationRewardSummaryStddevPopulationAggregates = {
  readonly __typename: 'IndexerAllocationRewardSummaryStddevPopulationAggregates';
  /** Population standard deviation of totalBurnt across the matching connection */
  readonly totalBurnt: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of totalReward across the matching connection */
  readonly totalReward: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerAllocationRewardSummaryStddevSampleAggregateFilter = {
  readonly totalBurnt: InputMaybe<BigFloatFilter>;
  readonly totalReward: InputMaybe<BigFloatFilter>;
};

export type IndexerAllocationRewardSummaryStddevSampleAggregates = {
  readonly __typename: 'IndexerAllocationRewardSummaryStddevSampleAggregates';
  /** Sample standard deviation of totalBurnt across the matching connection */
  readonly totalBurnt: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of totalReward across the matching connection */
  readonly totalReward: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerAllocationRewardSummarySumAggregateFilter = {
  readonly totalBurnt: InputMaybe<BigFloatFilter>;
  readonly totalReward: InputMaybe<BigFloatFilter>;
};

export type IndexerAllocationRewardSummarySumAggregates = {
  readonly __typename: 'IndexerAllocationRewardSummarySumAggregates';
  /** Sum of totalBurnt across the matching connection */
  readonly totalBurnt: Scalars['BigFloat']['output'];
  /** Sum of totalReward across the matching connection */
  readonly totalReward: Scalars['BigFloat']['output'];
};

export type IndexerAllocationRewardSummaryVariancePopulationAggregateFilter = {
  readonly totalBurnt: InputMaybe<BigFloatFilter>;
  readonly totalReward: InputMaybe<BigFloatFilter>;
};

export type IndexerAllocationRewardSummaryVariancePopulationAggregates = {
  readonly __typename: 'IndexerAllocationRewardSummaryVariancePopulationAggregates';
  /** Population variance of totalBurnt across the matching connection */
  readonly totalBurnt: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of totalReward across the matching connection */
  readonly totalReward: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerAllocationRewardSummaryVarianceSampleAggregateFilter = {
  readonly totalBurnt: InputMaybe<BigFloatFilter>;
  readonly totalReward: InputMaybe<BigFloatFilter>;
};

export type IndexerAllocationRewardSummaryVarianceSampleAggregates = {
  readonly __typename: 'IndexerAllocationRewardSummaryVarianceSampleAggregates';
  /** Sample variance of totalBurnt across the matching connection */
  readonly totalBurnt: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of totalReward across the matching connection */
  readonly totalReward: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerAllocationRewardVariancePopulationAggregateFilter = {
  readonly burnt: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigFloatFilter>;
  readonly reward: InputMaybe<BigFloatFilter>;
};

export type IndexerAllocationRewardVariancePopulationAggregates = {
  readonly __typename: 'IndexerAllocationRewardVariancePopulationAggregates';
  /** Population variance of burnt across the matching connection */
  readonly burnt: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of reward across the matching connection */
  readonly reward: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerAllocationRewardVarianceSampleAggregateFilter = {
  readonly burnt: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigFloatFilter>;
  readonly reward: InputMaybe<BigFloatFilter>;
};

export type IndexerAllocationRewardVarianceSampleAggregates = {
  readonly __typename: 'IndexerAllocationRewardVarianceSampleAggregates';
  /** Sample variance of burnt across the matching connection */
  readonly burnt: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of reward across the matching connection */
  readonly reward: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `IndexerAllocationReward` values. */
export type IndexerAllocationRewardsConnection = {
  readonly __typename: 'IndexerAllocationRewardsConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<IndexerAllocationRewardAggregates>;
  /** A list of edges which contains the `IndexerAllocationReward` and cursor to aid in pagination. */
  readonly edges: ReadonlyArray<IndexerAllocationRewardsEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<IndexerAllocationRewardAggregates>>;
  /** A list of `IndexerAllocationReward` objects. */
  readonly nodes: ReadonlyArray<Maybe<IndexerAllocationReward>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `IndexerAllocationReward` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `IndexerAllocationReward` values. */
export type IndexerAllocationRewardsConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<IndexerAllocationRewardsGroupBy>;
  having: InputMaybe<IndexerAllocationRewardsHavingInput>;
};

/** A `IndexerAllocationReward` edge in the connection. */
export type IndexerAllocationRewardsEdge = {
  readonly __typename: 'IndexerAllocationRewardsEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `IndexerAllocationReward` at the end of the edge. */
  readonly node: Maybe<IndexerAllocationReward>;
};

/** Grouping methods for `IndexerAllocationReward` for usage during aggregation. */
export enum IndexerAllocationRewardsGroupBy {
  BURNT = 'BURNT',
  CREATE_AT = 'CREATE_AT',
  CREATE_AT_TRUNCATED_TO_DAY = 'CREATE_AT_TRUNCATED_TO_DAY',
  CREATE_AT_TRUNCATED_TO_HOUR = 'CREATE_AT_TRUNCATED_TO_HOUR',
  DEPLOYMENT_ID = 'DEPLOYMENT_ID',
  ERA_IDX = 'ERA_IDX',
  ID = 'ID',
  INDEXER_ID = 'INDEXER_ID',
  PROJECT_ID = 'PROJECT_ID',
  REWARD = 'REWARD',
}

export type IndexerAllocationRewardsHavingAverageInput = {
  readonly burnt: InputMaybe<HavingBigfloatFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly reward: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerAllocationRewardsHavingDistinctCountInput = {
  readonly burnt: InputMaybe<HavingBigfloatFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly reward: InputMaybe<HavingBigfloatFilter>;
};

/** Conditions for `IndexerAllocationReward` aggregates. */
export type IndexerAllocationRewardsHavingInput = {
  readonly AND: InputMaybe<ReadonlyArray<IndexerAllocationRewardsHavingInput>>;
  readonly OR: InputMaybe<ReadonlyArray<IndexerAllocationRewardsHavingInput>>;
  readonly average: InputMaybe<IndexerAllocationRewardsHavingAverageInput>;
  readonly distinctCount: InputMaybe<IndexerAllocationRewardsHavingDistinctCountInput>;
  readonly max: InputMaybe<IndexerAllocationRewardsHavingMaxInput>;
  readonly min: InputMaybe<IndexerAllocationRewardsHavingMinInput>;
  readonly stddevPopulation: InputMaybe<IndexerAllocationRewardsHavingStddevPopulationInput>;
  readonly stddevSample: InputMaybe<IndexerAllocationRewardsHavingStddevSampleInput>;
  readonly sum: InputMaybe<IndexerAllocationRewardsHavingSumInput>;
  readonly variancePopulation: InputMaybe<IndexerAllocationRewardsHavingVariancePopulationInput>;
  readonly varianceSample: InputMaybe<IndexerAllocationRewardsHavingVarianceSampleInput>;
};

export type IndexerAllocationRewardsHavingMaxInput = {
  readonly burnt: InputMaybe<HavingBigfloatFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly reward: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerAllocationRewardsHavingMinInput = {
  readonly burnt: InputMaybe<HavingBigfloatFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly reward: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerAllocationRewardsHavingStddevPopulationInput = {
  readonly burnt: InputMaybe<HavingBigfloatFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly reward: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerAllocationRewardsHavingStddevSampleInput = {
  readonly burnt: InputMaybe<HavingBigfloatFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly reward: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerAllocationRewardsHavingSumInput = {
  readonly burnt: InputMaybe<HavingBigfloatFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly reward: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerAllocationRewardsHavingVariancePopulationInput = {
  readonly burnt: InputMaybe<HavingBigfloatFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly reward: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerAllocationRewardsHavingVarianceSampleInput = {
  readonly burnt: InputMaybe<HavingBigfloatFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly reward: InputMaybe<HavingBigfloatFilter>;
};

/** Methods to use when ordering `IndexerAllocationReward`. */
export enum IndexerAllocationRewardsOrderBy {
  BURNT_ASC = 'BURNT_ASC',
  BURNT_DESC = 'BURNT_DESC',
  CREATE_AT_ASC = 'CREATE_AT_ASC',
  CREATE_AT_DESC = 'CREATE_AT_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__ID_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__ID_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__ID_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__ID_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_DESC',
  DEPLOYMENT_ID_ASC = 'DEPLOYMENT_ID_ASC',
  DEPLOYMENT_ID_DESC = 'DEPLOYMENT_ID_DESC',
  ERA_IDX_ASC = 'ERA_IDX_ASC',
  ERA_IDX_DESC = 'ERA_IDX_DESC',
  ID_ASC = 'ID_ASC',
  ID_DESC = 'ID_DESC',
  INDEXER_BY_INDEXER_ID__ACTIVE_ASC = 'INDEXER_BY_INDEXER_ID__ACTIVE_ASC',
  INDEXER_BY_INDEXER_ID__ACTIVE_DESC = 'INDEXER_BY_INDEXER_ID__ACTIVE_DESC',
  INDEXER_BY_INDEXER_ID__CAPACITY_ASC = 'INDEXER_BY_INDEXER_ID__CAPACITY_ASC',
  INDEXER_BY_INDEXER_ID__CAPACITY_DESC = 'INDEXER_BY_INDEXER_ID__CAPACITY_DESC',
  INDEXER_BY_INDEXER_ID__COMMISSION_ASC = 'INDEXER_BY_INDEXER_ID__COMMISSION_ASC',
  INDEXER_BY_INDEXER_ID__COMMISSION_DESC = 'INDEXER_BY_INDEXER_ID__COMMISSION_DESC',
  INDEXER_BY_INDEXER_ID__CONTROLLER_ASC = 'INDEXER_BY_INDEXER_ID__CONTROLLER_ASC',
  INDEXER_BY_INDEXER_ID__CONTROLLER_DESC = 'INDEXER_BY_INDEXER_ID__CONTROLLER_DESC',
  INDEXER_BY_INDEXER_ID__CREATED_BLOCK_ASC = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_ASC',
  INDEXER_BY_INDEXER_ID__CREATED_BLOCK_DESC = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_DESC',
  INDEXER_BY_INDEXER_ID__ID_ASC = 'INDEXER_BY_INDEXER_ID__ID_ASC',
  INDEXER_BY_INDEXER_ID__ID_DESC = 'INDEXER_BY_INDEXER_ID__ID_DESC',
  INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_ASC = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_ASC',
  INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_DESC = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_DESC',
  INDEXER_BY_INDEXER_ID__LAST_EVENT_ASC = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_ASC',
  INDEXER_BY_INDEXER_ID__LAST_EVENT_DESC = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_DESC',
  INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_ASC = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_ASC',
  INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_DESC = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_DESC',
  INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_ASC = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_ASC',
  INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_DESC = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_DESC',
  INDEXER_BY_INDEXER_ID__METADATA_ASC = 'INDEXER_BY_INDEXER_ID__METADATA_ASC',
  INDEXER_BY_INDEXER_ID__METADATA_DESC = 'INDEXER_BY_INDEXER_ID__METADATA_DESC',
  INDEXER_BY_INDEXER_ID__SELF_STAKE_ASC = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_ASC',
  INDEXER_BY_INDEXER_ID__SELF_STAKE_DESC = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_DESC',
  INDEXER_BY_INDEXER_ID__TOTAL_STAKE_ASC = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_ASC',
  INDEXER_BY_INDEXER_ID__TOTAL_STAKE_DESC = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_DESC',
  INDEXER_ID_ASC = 'INDEXER_ID_ASC',
  INDEXER_ID_DESC = 'INDEXER_ID_DESC',
  NATURAL = 'NATURAL',
  PRIMARY_KEY_ASC = 'PRIMARY_KEY_ASC',
  PRIMARY_KEY_DESC = 'PRIMARY_KEY_DESC',
  PROJECT_BY_PROJECT_ID__BOOST_ALLOCATION_RATIO_ASC = 'PROJECT_BY_PROJECT_ID__BOOST_ALLOCATION_RATIO_ASC',
  PROJECT_BY_PROJECT_ID__BOOST_ALLOCATION_RATIO_DESC = 'PROJECT_BY_PROJECT_ID__BOOST_ALLOCATION_RATIO_DESC',
  PROJECT_BY_PROJECT_ID__CREATED_BLOCK_ASC = 'PROJECT_BY_PROJECT_ID__CREATED_BLOCK_ASC',
  PROJECT_BY_PROJECT_ID__CREATED_BLOCK_DESC = 'PROJECT_BY_PROJECT_ID__CREATED_BLOCK_DESC',
  PROJECT_BY_PROJECT_ID__CREATED_TIMESTAMP_ASC = 'PROJECT_BY_PROJECT_ID__CREATED_TIMESTAMP_ASC',
  PROJECT_BY_PROJECT_ID__CREATED_TIMESTAMP_DESC = 'PROJECT_BY_PROJECT_ID__CREATED_TIMESTAMP_DESC',
  PROJECT_BY_PROJECT_ID__DEPLOYMENT_ID_ASC = 'PROJECT_BY_PROJECT_ID__DEPLOYMENT_ID_ASC',
  PROJECT_BY_PROJECT_ID__DEPLOYMENT_ID_DESC = 'PROJECT_BY_PROJECT_ID__DEPLOYMENT_ID_DESC',
  PROJECT_BY_PROJECT_ID__DEPLOYMENT_METADATA_ASC = 'PROJECT_BY_PROJECT_ID__DEPLOYMENT_METADATA_ASC',
  PROJECT_BY_PROJECT_ID__DEPLOYMENT_METADATA_DESC = 'PROJECT_BY_PROJECT_ID__DEPLOYMENT_METADATA_DESC',
  PROJECT_BY_PROJECT_ID__ID_ASC = 'PROJECT_BY_PROJECT_ID__ID_ASC',
  PROJECT_BY_PROJECT_ID__ID_DESC = 'PROJECT_BY_PROJECT_ID__ID_DESC',
  PROJECT_BY_PROJECT_ID__LAST_EVENT_ASC = 'PROJECT_BY_PROJECT_ID__LAST_EVENT_ASC',
  PROJECT_BY_PROJECT_ID__LAST_EVENT_DESC = 'PROJECT_BY_PROJECT_ID__LAST_EVENT_DESC',
  PROJECT_BY_PROJECT_ID__METADATA_ASC = 'PROJECT_BY_PROJECT_ID__METADATA_ASC',
  PROJECT_BY_PROJECT_ID__METADATA_DESC = 'PROJECT_BY_PROJECT_ID__METADATA_DESC',
  PROJECT_BY_PROJECT_ID__OWNER_ASC = 'PROJECT_BY_PROJECT_ID__OWNER_ASC',
  PROJECT_BY_PROJECT_ID__OWNER_DESC = 'PROJECT_BY_PROJECT_ID__OWNER_DESC',
  PROJECT_BY_PROJECT_ID__TOTAL_ALLOCATION_ASC = 'PROJECT_BY_PROJECT_ID__TOTAL_ALLOCATION_ASC',
  PROJECT_BY_PROJECT_ID__TOTAL_ALLOCATION_DESC = 'PROJECT_BY_PROJECT_ID__TOTAL_ALLOCATION_DESC',
  PROJECT_BY_PROJECT_ID__TOTAL_BOOST_ASC = 'PROJECT_BY_PROJECT_ID__TOTAL_BOOST_ASC',
  PROJECT_BY_PROJECT_ID__TOTAL_BOOST_DESC = 'PROJECT_BY_PROJECT_ID__TOTAL_BOOST_DESC',
  PROJECT_BY_PROJECT_ID__TOTAL_REWARD_ASC = 'PROJECT_BY_PROJECT_ID__TOTAL_REWARD_ASC',
  PROJECT_BY_PROJECT_ID__TOTAL_REWARD_DESC = 'PROJECT_BY_PROJECT_ID__TOTAL_REWARD_DESC',
  PROJECT_BY_PROJECT_ID__TYPE_ASC = 'PROJECT_BY_PROJECT_ID__TYPE_ASC',
  PROJECT_BY_PROJECT_ID__TYPE_DESC = 'PROJECT_BY_PROJECT_ID__TYPE_DESC',
  PROJECT_BY_PROJECT_ID__UPDATED_TIMESTAMP_ASC = 'PROJECT_BY_PROJECT_ID__UPDATED_TIMESTAMP_ASC',
  PROJECT_BY_PROJECT_ID__UPDATED_TIMESTAMP_DESC = 'PROJECT_BY_PROJECT_ID__UPDATED_TIMESTAMP_DESC',
  PROJECT_ID_ASC = 'PROJECT_ID_ASC',
  PROJECT_ID_DESC = 'PROJECT_ID_DESC',
  REWARD_ASC = 'REWARD_ASC',
  REWARD_DESC = 'REWARD_DESC',
}

export type IndexerAllocationStddevPopulationAggregateFilter = {
  readonly amountAdded: InputMaybe<BigFloatFilter>;
  readonly amountRemoved: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigFloatFilter>;
};

export type IndexerAllocationStddevPopulationAggregates = {
  readonly __typename: 'IndexerAllocationStddevPopulationAggregates';
  /** Population standard deviation of amountAdded across the matching connection */
  readonly amountAdded: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of amountRemoved across the matching connection */
  readonly amountRemoved: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerAllocationStddevSampleAggregateFilter = {
  readonly amountAdded: InputMaybe<BigFloatFilter>;
  readonly amountRemoved: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigFloatFilter>;
};

export type IndexerAllocationStddevSampleAggregates = {
  readonly __typename: 'IndexerAllocationStddevSampleAggregates';
  /** Sample standard deviation of amountAdded across the matching connection */
  readonly amountAdded: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of amountRemoved across the matching connection */
  readonly amountRemoved: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerAllocationSumAggregateFilter = {
  readonly amountAdded: InputMaybe<BigFloatFilter>;
  readonly amountRemoved: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigIntFilter>;
};

export type IndexerAllocationSumAggregates = {
  readonly __typename: 'IndexerAllocationSumAggregates';
  /** Sum of amountAdded across the matching connection */
  readonly amountAdded: Scalars['BigFloat']['output'];
  /** Sum of amountRemoved across the matching connection */
  readonly amountRemoved: Scalars['BigFloat']['output'];
  /** Sum of eraIdx across the matching connection */
  readonly eraIdx: Scalars['BigInt']['output'];
};

/** A connection to a list of `IndexerAllocationSummary` values. */
export type IndexerAllocationSummariesConnection = {
  readonly __typename: 'IndexerAllocationSummariesConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<IndexerAllocationSummaryAggregates>;
  /** A list of edges which contains the `IndexerAllocationSummary` and cursor to aid in pagination. */
  readonly edges: ReadonlyArray<IndexerAllocationSummariesEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<IndexerAllocationSummaryAggregates>>;
  /** A list of `IndexerAllocationSummary` objects. */
  readonly nodes: ReadonlyArray<Maybe<IndexerAllocationSummary>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `IndexerAllocationSummary` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `IndexerAllocationSummary` values. */
export type IndexerAllocationSummariesConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<IndexerAllocationSummariesGroupBy>;
  having: InputMaybe<IndexerAllocationSummariesHavingInput>;
};

/** A `IndexerAllocationSummary` edge in the connection. */
export type IndexerAllocationSummariesEdge = {
  readonly __typename: 'IndexerAllocationSummariesEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `IndexerAllocationSummary` at the end of the edge. */
  readonly node: Maybe<IndexerAllocationSummary>;
};

/** Grouping methods for `IndexerAllocationSummary` for usage during aggregation. */
export enum IndexerAllocationSummariesGroupBy {
  CREATE_AT = 'CREATE_AT',
  CREATE_AT_TRUNCATED_TO_DAY = 'CREATE_AT_TRUNCATED_TO_DAY',
  CREATE_AT_TRUNCATED_TO_HOUR = 'CREATE_AT_TRUNCATED_TO_HOUR',
  DEPLOYMENT_ID = 'DEPLOYMENT_ID',
  ID = 'ID',
  INDEXER_ID = 'INDEXER_ID',
  PROJECT_ID = 'PROJECT_ID',
  TOTAL_ADDED = 'TOTAL_ADDED',
  TOTAL_AMOUNT = 'TOTAL_AMOUNT',
  TOTAL_REMOVED = 'TOTAL_REMOVED',
  UPDATE_AT = 'UPDATE_AT',
  UPDATE_AT_TRUNCATED_TO_DAY = 'UPDATE_AT_TRUNCATED_TO_DAY',
  UPDATE_AT_TRUNCATED_TO_HOUR = 'UPDATE_AT_TRUNCATED_TO_HOUR',
}

export type IndexerAllocationSummariesHavingAverageInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly totalAdded: InputMaybe<HavingBigfloatFilter>;
  readonly totalAmount: InputMaybe<HavingBigfloatFilter>;
  readonly totalRemoved: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerAllocationSummariesHavingDistinctCountInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly totalAdded: InputMaybe<HavingBigfloatFilter>;
  readonly totalAmount: InputMaybe<HavingBigfloatFilter>;
  readonly totalRemoved: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

/** Conditions for `IndexerAllocationSummary` aggregates. */
export type IndexerAllocationSummariesHavingInput = {
  readonly AND: InputMaybe<ReadonlyArray<IndexerAllocationSummariesHavingInput>>;
  readonly OR: InputMaybe<ReadonlyArray<IndexerAllocationSummariesHavingInput>>;
  readonly average: InputMaybe<IndexerAllocationSummariesHavingAverageInput>;
  readonly distinctCount: InputMaybe<IndexerAllocationSummariesHavingDistinctCountInput>;
  readonly max: InputMaybe<IndexerAllocationSummariesHavingMaxInput>;
  readonly min: InputMaybe<IndexerAllocationSummariesHavingMinInput>;
  readonly stddevPopulation: InputMaybe<IndexerAllocationSummariesHavingStddevPopulationInput>;
  readonly stddevSample: InputMaybe<IndexerAllocationSummariesHavingStddevSampleInput>;
  readonly sum: InputMaybe<IndexerAllocationSummariesHavingSumInput>;
  readonly variancePopulation: InputMaybe<IndexerAllocationSummariesHavingVariancePopulationInput>;
  readonly varianceSample: InputMaybe<IndexerAllocationSummariesHavingVarianceSampleInput>;
};

export type IndexerAllocationSummariesHavingMaxInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly totalAdded: InputMaybe<HavingBigfloatFilter>;
  readonly totalAmount: InputMaybe<HavingBigfloatFilter>;
  readonly totalRemoved: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerAllocationSummariesHavingMinInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly totalAdded: InputMaybe<HavingBigfloatFilter>;
  readonly totalAmount: InputMaybe<HavingBigfloatFilter>;
  readonly totalRemoved: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerAllocationSummariesHavingStddevPopulationInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly totalAdded: InputMaybe<HavingBigfloatFilter>;
  readonly totalAmount: InputMaybe<HavingBigfloatFilter>;
  readonly totalRemoved: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerAllocationSummariesHavingStddevSampleInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly totalAdded: InputMaybe<HavingBigfloatFilter>;
  readonly totalAmount: InputMaybe<HavingBigfloatFilter>;
  readonly totalRemoved: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerAllocationSummariesHavingSumInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly totalAdded: InputMaybe<HavingBigfloatFilter>;
  readonly totalAmount: InputMaybe<HavingBigfloatFilter>;
  readonly totalRemoved: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerAllocationSummariesHavingVariancePopulationInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly totalAdded: InputMaybe<HavingBigfloatFilter>;
  readonly totalAmount: InputMaybe<HavingBigfloatFilter>;
  readonly totalRemoved: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerAllocationSummariesHavingVarianceSampleInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly totalAdded: InputMaybe<HavingBigfloatFilter>;
  readonly totalAmount: InputMaybe<HavingBigfloatFilter>;
  readonly totalRemoved: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

/** Methods to use when ordering `IndexerAllocationSummary`. */
export enum IndexerAllocationSummariesOrderBy {
  CREATE_AT_ASC = 'CREATE_AT_ASC',
  CREATE_AT_DESC = 'CREATE_AT_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__ID_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__ID_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__ID_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__ID_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_DESC',
  DEPLOYMENT_ID_ASC = 'DEPLOYMENT_ID_ASC',
  DEPLOYMENT_ID_DESC = 'DEPLOYMENT_ID_DESC',
  ID_ASC = 'ID_ASC',
  ID_DESC = 'ID_DESC',
  INDEXER_BY_INDEXER_ID__ACTIVE_ASC = 'INDEXER_BY_INDEXER_ID__ACTIVE_ASC',
  INDEXER_BY_INDEXER_ID__ACTIVE_DESC = 'INDEXER_BY_INDEXER_ID__ACTIVE_DESC',
  INDEXER_BY_INDEXER_ID__CAPACITY_ASC = 'INDEXER_BY_INDEXER_ID__CAPACITY_ASC',
  INDEXER_BY_INDEXER_ID__CAPACITY_DESC = 'INDEXER_BY_INDEXER_ID__CAPACITY_DESC',
  INDEXER_BY_INDEXER_ID__COMMISSION_ASC = 'INDEXER_BY_INDEXER_ID__COMMISSION_ASC',
  INDEXER_BY_INDEXER_ID__COMMISSION_DESC = 'INDEXER_BY_INDEXER_ID__COMMISSION_DESC',
  INDEXER_BY_INDEXER_ID__CONTROLLER_ASC = 'INDEXER_BY_INDEXER_ID__CONTROLLER_ASC',
  INDEXER_BY_INDEXER_ID__CONTROLLER_DESC = 'INDEXER_BY_INDEXER_ID__CONTROLLER_DESC',
  INDEXER_BY_INDEXER_ID__CREATED_BLOCK_ASC = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_ASC',
  INDEXER_BY_INDEXER_ID__CREATED_BLOCK_DESC = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_DESC',
  INDEXER_BY_INDEXER_ID__ID_ASC = 'INDEXER_BY_INDEXER_ID__ID_ASC',
  INDEXER_BY_INDEXER_ID__ID_DESC = 'INDEXER_BY_INDEXER_ID__ID_DESC',
  INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_ASC = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_ASC',
  INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_DESC = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_DESC',
  INDEXER_BY_INDEXER_ID__LAST_EVENT_ASC = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_ASC',
  INDEXER_BY_INDEXER_ID__LAST_EVENT_DESC = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_DESC',
  INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_ASC = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_ASC',
  INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_DESC = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_DESC',
  INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_ASC = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_ASC',
  INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_DESC = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_DESC',
  INDEXER_BY_INDEXER_ID__METADATA_ASC = 'INDEXER_BY_INDEXER_ID__METADATA_ASC',
  INDEXER_BY_INDEXER_ID__METADATA_DESC = 'INDEXER_BY_INDEXER_ID__METADATA_DESC',
  INDEXER_BY_INDEXER_ID__SELF_STAKE_ASC = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_ASC',
  INDEXER_BY_INDEXER_ID__SELF_STAKE_DESC = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_DESC',
  INDEXER_BY_INDEXER_ID__TOTAL_STAKE_ASC = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_ASC',
  INDEXER_BY_INDEXER_ID__TOTAL_STAKE_DESC = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_DESC',
  INDEXER_ID_ASC = 'INDEXER_ID_ASC',
  INDEXER_ID_DESC = 'INDEXER_ID_DESC',
  NATURAL = 'NATURAL',
  PRIMARY_KEY_ASC = 'PRIMARY_KEY_ASC',
  PRIMARY_KEY_DESC = 'PRIMARY_KEY_DESC',
  PROJECT_BY_PROJECT_ID__BOOST_ALLOCATION_RATIO_ASC = 'PROJECT_BY_PROJECT_ID__BOOST_ALLOCATION_RATIO_ASC',
  PROJECT_BY_PROJECT_ID__BOOST_ALLOCATION_RATIO_DESC = 'PROJECT_BY_PROJECT_ID__BOOST_ALLOCATION_RATIO_DESC',
  PROJECT_BY_PROJECT_ID__CREATED_BLOCK_ASC = 'PROJECT_BY_PROJECT_ID__CREATED_BLOCK_ASC',
  PROJECT_BY_PROJECT_ID__CREATED_BLOCK_DESC = 'PROJECT_BY_PROJECT_ID__CREATED_BLOCK_DESC',
  PROJECT_BY_PROJECT_ID__CREATED_TIMESTAMP_ASC = 'PROJECT_BY_PROJECT_ID__CREATED_TIMESTAMP_ASC',
  PROJECT_BY_PROJECT_ID__CREATED_TIMESTAMP_DESC = 'PROJECT_BY_PROJECT_ID__CREATED_TIMESTAMP_DESC',
  PROJECT_BY_PROJECT_ID__DEPLOYMENT_ID_ASC = 'PROJECT_BY_PROJECT_ID__DEPLOYMENT_ID_ASC',
  PROJECT_BY_PROJECT_ID__DEPLOYMENT_ID_DESC = 'PROJECT_BY_PROJECT_ID__DEPLOYMENT_ID_DESC',
  PROJECT_BY_PROJECT_ID__DEPLOYMENT_METADATA_ASC = 'PROJECT_BY_PROJECT_ID__DEPLOYMENT_METADATA_ASC',
  PROJECT_BY_PROJECT_ID__DEPLOYMENT_METADATA_DESC = 'PROJECT_BY_PROJECT_ID__DEPLOYMENT_METADATA_DESC',
  PROJECT_BY_PROJECT_ID__ID_ASC = 'PROJECT_BY_PROJECT_ID__ID_ASC',
  PROJECT_BY_PROJECT_ID__ID_DESC = 'PROJECT_BY_PROJECT_ID__ID_DESC',
  PROJECT_BY_PROJECT_ID__LAST_EVENT_ASC = 'PROJECT_BY_PROJECT_ID__LAST_EVENT_ASC',
  PROJECT_BY_PROJECT_ID__LAST_EVENT_DESC = 'PROJECT_BY_PROJECT_ID__LAST_EVENT_DESC',
  PROJECT_BY_PROJECT_ID__METADATA_ASC = 'PROJECT_BY_PROJECT_ID__METADATA_ASC',
  PROJECT_BY_PROJECT_ID__METADATA_DESC = 'PROJECT_BY_PROJECT_ID__METADATA_DESC',
  PROJECT_BY_PROJECT_ID__OWNER_ASC = 'PROJECT_BY_PROJECT_ID__OWNER_ASC',
  PROJECT_BY_PROJECT_ID__OWNER_DESC = 'PROJECT_BY_PROJECT_ID__OWNER_DESC',
  PROJECT_BY_PROJECT_ID__TOTAL_ALLOCATION_ASC = 'PROJECT_BY_PROJECT_ID__TOTAL_ALLOCATION_ASC',
  PROJECT_BY_PROJECT_ID__TOTAL_ALLOCATION_DESC = 'PROJECT_BY_PROJECT_ID__TOTAL_ALLOCATION_DESC',
  PROJECT_BY_PROJECT_ID__TOTAL_BOOST_ASC = 'PROJECT_BY_PROJECT_ID__TOTAL_BOOST_ASC',
  PROJECT_BY_PROJECT_ID__TOTAL_BOOST_DESC = 'PROJECT_BY_PROJECT_ID__TOTAL_BOOST_DESC',
  PROJECT_BY_PROJECT_ID__TOTAL_REWARD_ASC = 'PROJECT_BY_PROJECT_ID__TOTAL_REWARD_ASC',
  PROJECT_BY_PROJECT_ID__TOTAL_REWARD_DESC = 'PROJECT_BY_PROJECT_ID__TOTAL_REWARD_DESC',
  PROJECT_BY_PROJECT_ID__TYPE_ASC = 'PROJECT_BY_PROJECT_ID__TYPE_ASC',
  PROJECT_BY_PROJECT_ID__TYPE_DESC = 'PROJECT_BY_PROJECT_ID__TYPE_DESC',
  PROJECT_BY_PROJECT_ID__UPDATED_TIMESTAMP_ASC = 'PROJECT_BY_PROJECT_ID__UPDATED_TIMESTAMP_ASC',
  PROJECT_BY_PROJECT_ID__UPDATED_TIMESTAMP_DESC = 'PROJECT_BY_PROJECT_ID__UPDATED_TIMESTAMP_DESC',
  PROJECT_ID_ASC = 'PROJECT_ID_ASC',
  PROJECT_ID_DESC = 'PROJECT_ID_DESC',
  TOTAL_ADDED_ASC = 'TOTAL_ADDED_ASC',
  TOTAL_ADDED_DESC = 'TOTAL_ADDED_DESC',
  TOTAL_AMOUNT_ASC = 'TOTAL_AMOUNT_ASC',
  TOTAL_AMOUNT_DESC = 'TOTAL_AMOUNT_DESC',
  TOTAL_REMOVED_ASC = 'TOTAL_REMOVED_ASC',
  TOTAL_REMOVED_DESC = 'TOTAL_REMOVED_DESC',
  UPDATE_AT_ASC = 'UPDATE_AT_ASC',
  UPDATE_AT_DESC = 'UPDATE_AT_DESC',
}

export type IndexerAllocationSummary = Node & {
  readonly __typename: 'IndexerAllocationSummary';
  readonly createAt: Scalars['Datetime']['output'];
  /** Reads a single `Deployment` that is related to this `IndexerAllocationSummary`. */
  readonly deployment: Maybe<Deployment>;
  readonly deploymentId: Scalars['String']['output'];
  readonly id: Scalars['String']['output'];
  /** Reads a single `Indexer` that is related to this `IndexerAllocationSummary`. */
  readonly indexer: Maybe<Indexer>;
  readonly indexerId: Scalars['String']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  readonly nodeId: Scalars['ID']['output'];
  /** Reads a single `Project` that is related to this `IndexerAllocationSummary`. */
  readonly project: Maybe<Project>;
  readonly projectId: Scalars['String']['output'];
  readonly totalAdded: Scalars['BigFloat']['output'];
  readonly totalAmount: Scalars['BigFloat']['output'];
  readonly totalRemoved: Scalars['BigFloat']['output'];
  readonly updateAt: Scalars['Datetime']['output'];
};

export type IndexerAllocationSummaryAggregates = {
  readonly __typename: 'IndexerAllocationSummaryAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly average: Maybe<IndexerAllocationSummaryAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly distinctCount: Maybe<IndexerAllocationSummaryDistinctCountAggregates>;
  readonly keys: Maybe<ReadonlyArray<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly max: Maybe<IndexerAllocationSummaryMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly min: Maybe<IndexerAllocationSummaryMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevPopulation: Maybe<IndexerAllocationSummaryStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevSample: Maybe<IndexerAllocationSummaryStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly sum: Maybe<IndexerAllocationSummarySumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly variancePopulation: Maybe<IndexerAllocationSummaryVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly varianceSample: Maybe<IndexerAllocationSummaryVarianceSampleAggregates>;
};

/** A filter to be used against aggregates of `IndexerAllocationSummary` object types. */
export type IndexerAllocationSummaryAggregatesFilter = {
  /** Mean average aggregate over matching `IndexerAllocationSummary` objects. */
  readonly average: InputMaybe<IndexerAllocationSummaryAverageAggregateFilter>;
  /** Distinct count aggregate over matching `IndexerAllocationSummary` objects. */
  readonly distinctCount: InputMaybe<IndexerAllocationSummaryDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `IndexerAllocationSummary` object to be included within the aggregate. */
  readonly filter: InputMaybe<IndexerAllocationSummaryFilter>;
  /** Maximum aggregate over matching `IndexerAllocationSummary` objects. */
  readonly max: InputMaybe<IndexerAllocationSummaryMaxAggregateFilter>;
  /** Minimum aggregate over matching `IndexerAllocationSummary` objects. */
  readonly min: InputMaybe<IndexerAllocationSummaryMinAggregateFilter>;
  /** Population standard deviation aggregate over matching `IndexerAllocationSummary` objects. */
  readonly stddevPopulation: InputMaybe<IndexerAllocationSummaryStddevPopulationAggregateFilter>;
  /** Sample standard deviation aggregate over matching `IndexerAllocationSummary` objects. */
  readonly stddevSample: InputMaybe<IndexerAllocationSummaryStddevSampleAggregateFilter>;
  /** Sum aggregate over matching `IndexerAllocationSummary` objects. */
  readonly sum: InputMaybe<IndexerAllocationSummarySumAggregateFilter>;
  /** Population variance aggregate over matching `IndexerAllocationSummary` objects. */
  readonly variancePopulation: InputMaybe<IndexerAllocationSummaryVariancePopulationAggregateFilter>;
  /** Sample variance aggregate over matching `IndexerAllocationSummary` objects. */
  readonly varianceSample: InputMaybe<IndexerAllocationSummaryVarianceSampleAggregateFilter>;
};

export type IndexerAllocationSummaryAverageAggregateFilter = {
  readonly totalAdded: InputMaybe<BigFloatFilter>;
  readonly totalAmount: InputMaybe<BigFloatFilter>;
  readonly totalRemoved: InputMaybe<BigFloatFilter>;
};

export type IndexerAllocationSummaryAverageAggregates = {
  readonly __typename: 'IndexerAllocationSummaryAverageAggregates';
  /** Mean average of totalAdded across the matching connection */
  readonly totalAdded: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of totalAmount across the matching connection */
  readonly totalAmount: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of totalRemoved across the matching connection */
  readonly totalRemoved: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerAllocationSummaryDistinctCountAggregateFilter = {
  readonly _blockRange: InputMaybe<BigIntFilter>;
  readonly _id: InputMaybe<BigIntFilter>;
  readonly createAt: InputMaybe<BigIntFilter>;
  readonly deploymentId: InputMaybe<BigIntFilter>;
  readonly id: InputMaybe<BigIntFilter>;
  readonly indexerId: InputMaybe<BigIntFilter>;
  readonly projectId: InputMaybe<BigIntFilter>;
  readonly totalAdded: InputMaybe<BigIntFilter>;
  readonly totalAmount: InputMaybe<BigIntFilter>;
  readonly totalRemoved: InputMaybe<BigIntFilter>;
  readonly updateAt: InputMaybe<BigIntFilter>;
};

export type IndexerAllocationSummaryDistinctCountAggregates = {
  readonly __typename: 'IndexerAllocationSummaryDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  readonly _blockRange: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  readonly _id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createAt across the matching connection */
  readonly createAt: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of deploymentId across the matching connection */
  readonly deploymentId: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  readonly id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of indexerId across the matching connection */
  readonly indexerId: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of projectId across the matching connection */
  readonly projectId: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of totalAdded across the matching connection */
  readonly totalAdded: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of totalAmount across the matching connection */
  readonly totalAmount: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of totalRemoved across the matching connection */
  readonly totalRemoved: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of updateAt across the matching connection */
  readonly updateAt: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `IndexerAllocationSummary` object types. All fields are combined with a logical ‘and.’ */
export type IndexerAllocationSummaryFilter = {
  /** Checks for all expressions in this list. */
  readonly and: InputMaybe<ReadonlyArray<IndexerAllocationSummaryFilter>>;
  /** Filter by the object’s `createAt` field. */
  readonly createAt: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `deployment` relation. */
  readonly deployment: InputMaybe<DeploymentFilter>;
  /** Filter by the object’s `deploymentId` field. */
  readonly deploymentId: InputMaybe<StringFilter>;
  /** Filter by the object’s `id` field. */
  readonly id: InputMaybe<StringFilter>;
  /** Filter by the object’s `indexer` relation. */
  readonly indexer: InputMaybe<IndexerFilter>;
  /** Filter by the object’s `indexerId` field. */
  readonly indexerId: InputMaybe<StringFilter>;
  /** Negates the expression. */
  readonly not: InputMaybe<IndexerAllocationSummaryFilter>;
  /** Checks for any expressions in this list. */
  readonly or: InputMaybe<ReadonlyArray<IndexerAllocationSummaryFilter>>;
  /** Filter by the object’s `project` relation. */
  readonly project: InputMaybe<ProjectFilter>;
  /** Filter by the object’s `projectId` field. */
  readonly projectId: InputMaybe<StringFilter>;
  /** Filter by the object’s `totalAdded` field. */
  readonly totalAdded: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `totalAmount` field. */
  readonly totalAmount: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `totalRemoved` field. */
  readonly totalRemoved: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `updateAt` field. */
  readonly updateAt: InputMaybe<DatetimeFilter>;
};

export type IndexerAllocationSummaryMaxAggregateFilter = {
  readonly totalAdded: InputMaybe<BigFloatFilter>;
  readonly totalAmount: InputMaybe<BigFloatFilter>;
  readonly totalRemoved: InputMaybe<BigFloatFilter>;
};

export type IndexerAllocationSummaryMaxAggregates = {
  readonly __typename: 'IndexerAllocationSummaryMaxAggregates';
  /** Maximum of totalAdded across the matching connection */
  readonly totalAdded: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of totalAmount across the matching connection */
  readonly totalAmount: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of totalRemoved across the matching connection */
  readonly totalRemoved: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerAllocationSummaryMinAggregateFilter = {
  readonly totalAdded: InputMaybe<BigFloatFilter>;
  readonly totalAmount: InputMaybe<BigFloatFilter>;
  readonly totalRemoved: InputMaybe<BigFloatFilter>;
};

export type IndexerAllocationSummaryMinAggregates = {
  readonly __typename: 'IndexerAllocationSummaryMinAggregates';
  /** Minimum of totalAdded across the matching connection */
  readonly totalAdded: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of totalAmount across the matching connection */
  readonly totalAmount: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of totalRemoved across the matching connection */
  readonly totalRemoved: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerAllocationSummaryStddevPopulationAggregateFilter = {
  readonly totalAdded: InputMaybe<BigFloatFilter>;
  readonly totalAmount: InputMaybe<BigFloatFilter>;
  readonly totalRemoved: InputMaybe<BigFloatFilter>;
};

export type IndexerAllocationSummaryStddevPopulationAggregates = {
  readonly __typename: 'IndexerAllocationSummaryStddevPopulationAggregates';
  /** Population standard deviation of totalAdded across the matching connection */
  readonly totalAdded: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of totalAmount across the matching connection */
  readonly totalAmount: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of totalRemoved across the matching connection */
  readonly totalRemoved: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerAllocationSummaryStddevSampleAggregateFilter = {
  readonly totalAdded: InputMaybe<BigFloatFilter>;
  readonly totalAmount: InputMaybe<BigFloatFilter>;
  readonly totalRemoved: InputMaybe<BigFloatFilter>;
};

export type IndexerAllocationSummaryStddevSampleAggregates = {
  readonly __typename: 'IndexerAllocationSummaryStddevSampleAggregates';
  /** Sample standard deviation of totalAdded across the matching connection */
  readonly totalAdded: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of totalAmount across the matching connection */
  readonly totalAmount: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of totalRemoved across the matching connection */
  readonly totalRemoved: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerAllocationSummarySumAggregateFilter = {
  readonly totalAdded: InputMaybe<BigFloatFilter>;
  readonly totalAmount: InputMaybe<BigFloatFilter>;
  readonly totalRemoved: InputMaybe<BigFloatFilter>;
};

export type IndexerAllocationSummarySumAggregates = {
  readonly __typename: 'IndexerAllocationSummarySumAggregates';
  /** Sum of totalAdded across the matching connection */
  readonly totalAdded: Scalars['BigFloat']['output'];
  /** Sum of totalAmount across the matching connection */
  readonly totalAmount: Scalars['BigFloat']['output'];
  /** Sum of totalRemoved across the matching connection */
  readonly totalRemoved: Scalars['BigFloat']['output'];
};

export type IndexerAllocationSummaryVariancePopulationAggregateFilter = {
  readonly totalAdded: InputMaybe<BigFloatFilter>;
  readonly totalAmount: InputMaybe<BigFloatFilter>;
  readonly totalRemoved: InputMaybe<BigFloatFilter>;
};

export type IndexerAllocationSummaryVariancePopulationAggregates = {
  readonly __typename: 'IndexerAllocationSummaryVariancePopulationAggregates';
  /** Population variance of totalAdded across the matching connection */
  readonly totalAdded: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of totalAmount across the matching connection */
  readonly totalAmount: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of totalRemoved across the matching connection */
  readonly totalRemoved: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerAllocationSummaryVarianceSampleAggregateFilter = {
  readonly totalAdded: InputMaybe<BigFloatFilter>;
  readonly totalAmount: InputMaybe<BigFloatFilter>;
  readonly totalRemoved: InputMaybe<BigFloatFilter>;
};

export type IndexerAllocationSummaryVarianceSampleAggregates = {
  readonly __typename: 'IndexerAllocationSummaryVarianceSampleAggregates';
  /** Sample variance of totalAdded across the matching connection */
  readonly totalAdded: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of totalAmount across the matching connection */
  readonly totalAmount: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of totalRemoved across the matching connection */
  readonly totalRemoved: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerAllocationVariancePopulationAggregateFilter = {
  readonly amountAdded: InputMaybe<BigFloatFilter>;
  readonly amountRemoved: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigFloatFilter>;
};

export type IndexerAllocationVariancePopulationAggregates = {
  readonly __typename: 'IndexerAllocationVariancePopulationAggregates';
  /** Population variance of amountAdded across the matching connection */
  readonly amountAdded: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of amountRemoved across the matching connection */
  readonly amountRemoved: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerAllocationVarianceSampleAggregateFilter = {
  readonly amountAdded: InputMaybe<BigFloatFilter>;
  readonly amountRemoved: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigFloatFilter>;
};

export type IndexerAllocationVarianceSampleAggregates = {
  readonly __typename: 'IndexerAllocationVarianceSampleAggregates';
  /** Sample variance of amountAdded across the matching connection */
  readonly amountAdded: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of amountRemoved across the matching connection */
  readonly amountRemoved: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `IndexerAllocation` values. */
export type IndexerAllocationsConnection = {
  readonly __typename: 'IndexerAllocationsConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<IndexerAllocationAggregates>;
  /** A list of edges which contains the `IndexerAllocation` and cursor to aid in pagination. */
  readonly edges: ReadonlyArray<IndexerAllocationsEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<IndexerAllocationAggregates>>;
  /** A list of `IndexerAllocation` objects. */
  readonly nodes: ReadonlyArray<Maybe<IndexerAllocation>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `IndexerAllocation` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `IndexerAllocation` values. */
export type IndexerAllocationsConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<IndexerAllocationsGroupBy>;
  having: InputMaybe<IndexerAllocationsHavingInput>;
};

/** A `IndexerAllocation` edge in the connection. */
export type IndexerAllocationsEdge = {
  readonly __typename: 'IndexerAllocationsEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `IndexerAllocation` at the end of the edge. */
  readonly node: Maybe<IndexerAllocation>;
};

/** Grouping methods for `IndexerAllocation` for usage during aggregation. */
export enum IndexerAllocationsGroupBy {
  AMOUNT_ADDED = 'AMOUNT_ADDED',
  AMOUNT_REMOVED = 'AMOUNT_REMOVED',
  CREATE_AT = 'CREATE_AT',
  CREATE_AT_TRUNCATED_TO_DAY = 'CREATE_AT_TRUNCATED_TO_DAY',
  CREATE_AT_TRUNCATED_TO_HOUR = 'CREATE_AT_TRUNCATED_TO_HOUR',
  DEPLOYMENT_ID = 'DEPLOYMENT_ID',
  ERA_IDX = 'ERA_IDX',
  ID = 'ID',
  INDEXER_ID = 'INDEXER_ID',
  PROJECT_ID = 'PROJECT_ID',
}

export type IndexerAllocationsHavingAverageInput = {
  readonly amountAdded: InputMaybe<HavingBigfloatFilter>;
  readonly amountRemoved: InputMaybe<HavingBigfloatFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
};

export type IndexerAllocationsHavingDistinctCountInput = {
  readonly amountAdded: InputMaybe<HavingBigfloatFilter>;
  readonly amountRemoved: InputMaybe<HavingBigfloatFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
};

/** Conditions for `IndexerAllocation` aggregates. */
export type IndexerAllocationsHavingInput = {
  readonly AND: InputMaybe<ReadonlyArray<IndexerAllocationsHavingInput>>;
  readonly OR: InputMaybe<ReadonlyArray<IndexerAllocationsHavingInput>>;
  readonly average: InputMaybe<IndexerAllocationsHavingAverageInput>;
  readonly distinctCount: InputMaybe<IndexerAllocationsHavingDistinctCountInput>;
  readonly max: InputMaybe<IndexerAllocationsHavingMaxInput>;
  readonly min: InputMaybe<IndexerAllocationsHavingMinInput>;
  readonly stddevPopulation: InputMaybe<IndexerAllocationsHavingStddevPopulationInput>;
  readonly stddevSample: InputMaybe<IndexerAllocationsHavingStddevSampleInput>;
  readonly sum: InputMaybe<IndexerAllocationsHavingSumInput>;
  readonly variancePopulation: InputMaybe<IndexerAllocationsHavingVariancePopulationInput>;
  readonly varianceSample: InputMaybe<IndexerAllocationsHavingVarianceSampleInput>;
};

export type IndexerAllocationsHavingMaxInput = {
  readonly amountAdded: InputMaybe<HavingBigfloatFilter>;
  readonly amountRemoved: InputMaybe<HavingBigfloatFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
};

export type IndexerAllocationsHavingMinInput = {
  readonly amountAdded: InputMaybe<HavingBigfloatFilter>;
  readonly amountRemoved: InputMaybe<HavingBigfloatFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
};

export type IndexerAllocationsHavingStddevPopulationInput = {
  readonly amountAdded: InputMaybe<HavingBigfloatFilter>;
  readonly amountRemoved: InputMaybe<HavingBigfloatFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
};

export type IndexerAllocationsHavingStddevSampleInput = {
  readonly amountAdded: InputMaybe<HavingBigfloatFilter>;
  readonly amountRemoved: InputMaybe<HavingBigfloatFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
};

export type IndexerAllocationsHavingSumInput = {
  readonly amountAdded: InputMaybe<HavingBigfloatFilter>;
  readonly amountRemoved: InputMaybe<HavingBigfloatFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
};

export type IndexerAllocationsHavingVariancePopulationInput = {
  readonly amountAdded: InputMaybe<HavingBigfloatFilter>;
  readonly amountRemoved: InputMaybe<HavingBigfloatFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
};

export type IndexerAllocationsHavingVarianceSampleInput = {
  readonly amountAdded: InputMaybe<HavingBigfloatFilter>;
  readonly amountRemoved: InputMaybe<HavingBigfloatFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
};

/** Methods to use when ordering `IndexerAllocation`. */
export enum IndexerAllocationsOrderBy {
  AMOUNT_ADDED_ASC = 'AMOUNT_ADDED_ASC',
  AMOUNT_ADDED_DESC = 'AMOUNT_ADDED_DESC',
  AMOUNT_REMOVED_ASC = 'AMOUNT_REMOVED_ASC',
  AMOUNT_REMOVED_DESC = 'AMOUNT_REMOVED_DESC',
  CREATE_AT_ASC = 'CREATE_AT_ASC',
  CREATE_AT_DESC = 'CREATE_AT_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__ID_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__ID_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__ID_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__ID_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_DESC',
  DEPLOYMENT_ID_ASC = 'DEPLOYMENT_ID_ASC',
  DEPLOYMENT_ID_DESC = 'DEPLOYMENT_ID_DESC',
  ERA_IDX_ASC = 'ERA_IDX_ASC',
  ERA_IDX_DESC = 'ERA_IDX_DESC',
  ID_ASC = 'ID_ASC',
  ID_DESC = 'ID_DESC',
  INDEXER_BY_INDEXER_ID__ACTIVE_ASC = 'INDEXER_BY_INDEXER_ID__ACTIVE_ASC',
  INDEXER_BY_INDEXER_ID__ACTIVE_DESC = 'INDEXER_BY_INDEXER_ID__ACTIVE_DESC',
  INDEXER_BY_INDEXER_ID__CAPACITY_ASC = 'INDEXER_BY_INDEXER_ID__CAPACITY_ASC',
  INDEXER_BY_INDEXER_ID__CAPACITY_DESC = 'INDEXER_BY_INDEXER_ID__CAPACITY_DESC',
  INDEXER_BY_INDEXER_ID__COMMISSION_ASC = 'INDEXER_BY_INDEXER_ID__COMMISSION_ASC',
  INDEXER_BY_INDEXER_ID__COMMISSION_DESC = 'INDEXER_BY_INDEXER_ID__COMMISSION_DESC',
  INDEXER_BY_INDEXER_ID__CONTROLLER_ASC = 'INDEXER_BY_INDEXER_ID__CONTROLLER_ASC',
  INDEXER_BY_INDEXER_ID__CONTROLLER_DESC = 'INDEXER_BY_INDEXER_ID__CONTROLLER_DESC',
  INDEXER_BY_INDEXER_ID__CREATED_BLOCK_ASC = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_ASC',
  INDEXER_BY_INDEXER_ID__CREATED_BLOCK_DESC = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_DESC',
  INDEXER_BY_INDEXER_ID__ID_ASC = 'INDEXER_BY_INDEXER_ID__ID_ASC',
  INDEXER_BY_INDEXER_ID__ID_DESC = 'INDEXER_BY_INDEXER_ID__ID_DESC',
  INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_ASC = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_ASC',
  INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_DESC = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_DESC',
  INDEXER_BY_INDEXER_ID__LAST_EVENT_ASC = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_ASC',
  INDEXER_BY_INDEXER_ID__LAST_EVENT_DESC = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_DESC',
  INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_ASC = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_ASC',
  INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_DESC = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_DESC',
  INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_ASC = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_ASC',
  INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_DESC = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_DESC',
  INDEXER_BY_INDEXER_ID__METADATA_ASC = 'INDEXER_BY_INDEXER_ID__METADATA_ASC',
  INDEXER_BY_INDEXER_ID__METADATA_DESC = 'INDEXER_BY_INDEXER_ID__METADATA_DESC',
  INDEXER_BY_INDEXER_ID__SELF_STAKE_ASC = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_ASC',
  INDEXER_BY_INDEXER_ID__SELF_STAKE_DESC = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_DESC',
  INDEXER_BY_INDEXER_ID__TOTAL_STAKE_ASC = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_ASC',
  INDEXER_BY_INDEXER_ID__TOTAL_STAKE_DESC = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_DESC',
  INDEXER_ID_ASC = 'INDEXER_ID_ASC',
  INDEXER_ID_DESC = 'INDEXER_ID_DESC',
  NATURAL = 'NATURAL',
  PRIMARY_KEY_ASC = 'PRIMARY_KEY_ASC',
  PRIMARY_KEY_DESC = 'PRIMARY_KEY_DESC',
  PROJECT_BY_PROJECT_ID__BOOST_ALLOCATION_RATIO_ASC = 'PROJECT_BY_PROJECT_ID__BOOST_ALLOCATION_RATIO_ASC',
  PROJECT_BY_PROJECT_ID__BOOST_ALLOCATION_RATIO_DESC = 'PROJECT_BY_PROJECT_ID__BOOST_ALLOCATION_RATIO_DESC',
  PROJECT_BY_PROJECT_ID__CREATED_BLOCK_ASC = 'PROJECT_BY_PROJECT_ID__CREATED_BLOCK_ASC',
  PROJECT_BY_PROJECT_ID__CREATED_BLOCK_DESC = 'PROJECT_BY_PROJECT_ID__CREATED_BLOCK_DESC',
  PROJECT_BY_PROJECT_ID__CREATED_TIMESTAMP_ASC = 'PROJECT_BY_PROJECT_ID__CREATED_TIMESTAMP_ASC',
  PROJECT_BY_PROJECT_ID__CREATED_TIMESTAMP_DESC = 'PROJECT_BY_PROJECT_ID__CREATED_TIMESTAMP_DESC',
  PROJECT_BY_PROJECT_ID__DEPLOYMENT_ID_ASC = 'PROJECT_BY_PROJECT_ID__DEPLOYMENT_ID_ASC',
  PROJECT_BY_PROJECT_ID__DEPLOYMENT_ID_DESC = 'PROJECT_BY_PROJECT_ID__DEPLOYMENT_ID_DESC',
  PROJECT_BY_PROJECT_ID__DEPLOYMENT_METADATA_ASC = 'PROJECT_BY_PROJECT_ID__DEPLOYMENT_METADATA_ASC',
  PROJECT_BY_PROJECT_ID__DEPLOYMENT_METADATA_DESC = 'PROJECT_BY_PROJECT_ID__DEPLOYMENT_METADATA_DESC',
  PROJECT_BY_PROJECT_ID__ID_ASC = 'PROJECT_BY_PROJECT_ID__ID_ASC',
  PROJECT_BY_PROJECT_ID__ID_DESC = 'PROJECT_BY_PROJECT_ID__ID_DESC',
  PROJECT_BY_PROJECT_ID__LAST_EVENT_ASC = 'PROJECT_BY_PROJECT_ID__LAST_EVENT_ASC',
  PROJECT_BY_PROJECT_ID__LAST_EVENT_DESC = 'PROJECT_BY_PROJECT_ID__LAST_EVENT_DESC',
  PROJECT_BY_PROJECT_ID__METADATA_ASC = 'PROJECT_BY_PROJECT_ID__METADATA_ASC',
  PROJECT_BY_PROJECT_ID__METADATA_DESC = 'PROJECT_BY_PROJECT_ID__METADATA_DESC',
  PROJECT_BY_PROJECT_ID__OWNER_ASC = 'PROJECT_BY_PROJECT_ID__OWNER_ASC',
  PROJECT_BY_PROJECT_ID__OWNER_DESC = 'PROJECT_BY_PROJECT_ID__OWNER_DESC',
  PROJECT_BY_PROJECT_ID__TOTAL_ALLOCATION_ASC = 'PROJECT_BY_PROJECT_ID__TOTAL_ALLOCATION_ASC',
  PROJECT_BY_PROJECT_ID__TOTAL_ALLOCATION_DESC = 'PROJECT_BY_PROJECT_ID__TOTAL_ALLOCATION_DESC',
  PROJECT_BY_PROJECT_ID__TOTAL_BOOST_ASC = 'PROJECT_BY_PROJECT_ID__TOTAL_BOOST_ASC',
  PROJECT_BY_PROJECT_ID__TOTAL_BOOST_DESC = 'PROJECT_BY_PROJECT_ID__TOTAL_BOOST_DESC',
  PROJECT_BY_PROJECT_ID__TOTAL_REWARD_ASC = 'PROJECT_BY_PROJECT_ID__TOTAL_REWARD_ASC',
  PROJECT_BY_PROJECT_ID__TOTAL_REWARD_DESC = 'PROJECT_BY_PROJECT_ID__TOTAL_REWARD_DESC',
  PROJECT_BY_PROJECT_ID__TYPE_ASC = 'PROJECT_BY_PROJECT_ID__TYPE_ASC',
  PROJECT_BY_PROJECT_ID__TYPE_DESC = 'PROJECT_BY_PROJECT_ID__TYPE_DESC',
  PROJECT_BY_PROJECT_ID__UPDATED_TIMESTAMP_ASC = 'PROJECT_BY_PROJECT_ID__UPDATED_TIMESTAMP_ASC',
  PROJECT_BY_PROJECT_ID__UPDATED_TIMESTAMP_DESC = 'PROJECT_BY_PROJECT_ID__UPDATED_TIMESTAMP_DESC',
  PROJECT_ID_ASC = 'PROJECT_ID_ASC',
  PROJECT_ID_DESC = 'PROJECT_ID_DESC',
}

/** A connection to a list of `IndexerApySummary` values. */
export type IndexerApySummariesConnection = {
  readonly __typename: 'IndexerApySummariesConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<IndexerApySummaryAggregates>;
  /** A list of edges which contains the `IndexerApySummary` and cursor to aid in pagination. */
  readonly edges: ReadonlyArray<IndexerApySummariesEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<IndexerApySummaryAggregates>>;
  /** A list of `IndexerApySummary` objects. */
  readonly nodes: ReadonlyArray<Maybe<IndexerApySummary>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `IndexerApySummary` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `IndexerApySummary` values. */
export type IndexerApySummariesConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<IndexerApySummariesGroupBy>;
  having: InputMaybe<IndexerApySummariesHavingInput>;
};

/** A `IndexerApySummary` edge in the connection. */
export type IndexerApySummariesEdge = {
  readonly __typename: 'IndexerApySummariesEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `IndexerApySummary` at the end of the edge. */
  readonly node: Maybe<IndexerApySummary>;
};

/** Grouping methods for `IndexerApySummary` for usage during aggregation. */
export enum IndexerApySummariesGroupBy {
  CREATE_AT = 'CREATE_AT',
  CREATE_AT_TRUNCATED_TO_DAY = 'CREATE_AT_TRUNCATED_TO_DAY',
  CREATE_AT_TRUNCATED_TO_HOUR = 'CREATE_AT_TRUNCATED_TO_HOUR',
  DELEGATOR_APY = 'DELEGATOR_APY',
  DELEGATOR_REWARD = 'DELEGATOR_REWARD',
  ERA_IDX = 'ERA_IDX',
  ID = 'ID',
  INDEXER_APY = 'INDEXER_APY',
  INDEXER_ID = 'INDEXER_ID',
  INDEXER_REWARD = 'INDEXER_REWARD',
  UPDATE_AT = 'UPDATE_AT',
  UPDATE_AT_TRUNCATED_TO_DAY = 'UPDATE_AT_TRUNCATED_TO_DAY',
  UPDATE_AT_TRUNCATED_TO_HOUR = 'UPDATE_AT_TRUNCATED_TO_HOUR',
}

export type IndexerApySummariesHavingAverageInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly delegatorApy: InputMaybe<HavingBigfloatFilter>;
  readonly delegatorReward: InputMaybe<HavingBigfloatFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly indexerApy: InputMaybe<HavingBigfloatFilter>;
  readonly indexerReward: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerApySummariesHavingDistinctCountInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly delegatorApy: InputMaybe<HavingBigfloatFilter>;
  readonly delegatorReward: InputMaybe<HavingBigfloatFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly indexerApy: InputMaybe<HavingBigfloatFilter>;
  readonly indexerReward: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

/** Conditions for `IndexerApySummary` aggregates. */
export type IndexerApySummariesHavingInput = {
  readonly AND: InputMaybe<ReadonlyArray<IndexerApySummariesHavingInput>>;
  readonly OR: InputMaybe<ReadonlyArray<IndexerApySummariesHavingInput>>;
  readonly average: InputMaybe<IndexerApySummariesHavingAverageInput>;
  readonly distinctCount: InputMaybe<IndexerApySummariesHavingDistinctCountInput>;
  readonly max: InputMaybe<IndexerApySummariesHavingMaxInput>;
  readonly min: InputMaybe<IndexerApySummariesHavingMinInput>;
  readonly stddevPopulation: InputMaybe<IndexerApySummariesHavingStddevPopulationInput>;
  readonly stddevSample: InputMaybe<IndexerApySummariesHavingStddevSampleInput>;
  readonly sum: InputMaybe<IndexerApySummariesHavingSumInput>;
  readonly variancePopulation: InputMaybe<IndexerApySummariesHavingVariancePopulationInput>;
  readonly varianceSample: InputMaybe<IndexerApySummariesHavingVarianceSampleInput>;
};

export type IndexerApySummariesHavingMaxInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly delegatorApy: InputMaybe<HavingBigfloatFilter>;
  readonly delegatorReward: InputMaybe<HavingBigfloatFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly indexerApy: InputMaybe<HavingBigfloatFilter>;
  readonly indexerReward: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerApySummariesHavingMinInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly delegatorApy: InputMaybe<HavingBigfloatFilter>;
  readonly delegatorReward: InputMaybe<HavingBigfloatFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly indexerApy: InputMaybe<HavingBigfloatFilter>;
  readonly indexerReward: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerApySummariesHavingStddevPopulationInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly delegatorApy: InputMaybe<HavingBigfloatFilter>;
  readonly delegatorReward: InputMaybe<HavingBigfloatFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly indexerApy: InputMaybe<HavingBigfloatFilter>;
  readonly indexerReward: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerApySummariesHavingStddevSampleInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly delegatorApy: InputMaybe<HavingBigfloatFilter>;
  readonly delegatorReward: InputMaybe<HavingBigfloatFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly indexerApy: InputMaybe<HavingBigfloatFilter>;
  readonly indexerReward: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerApySummariesHavingSumInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly delegatorApy: InputMaybe<HavingBigfloatFilter>;
  readonly delegatorReward: InputMaybe<HavingBigfloatFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly indexerApy: InputMaybe<HavingBigfloatFilter>;
  readonly indexerReward: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerApySummariesHavingVariancePopulationInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly delegatorApy: InputMaybe<HavingBigfloatFilter>;
  readonly delegatorReward: InputMaybe<HavingBigfloatFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly indexerApy: InputMaybe<HavingBigfloatFilter>;
  readonly indexerReward: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerApySummariesHavingVarianceSampleInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly delegatorApy: InputMaybe<HavingBigfloatFilter>;
  readonly delegatorReward: InputMaybe<HavingBigfloatFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly indexerApy: InputMaybe<HavingBigfloatFilter>;
  readonly indexerReward: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

/** Methods to use when ordering `IndexerApySummary`. */
export enum IndexerApySummariesOrderBy {
  CREATE_AT_ASC = 'CREATE_AT_ASC',
  CREATE_AT_DESC = 'CREATE_AT_DESC',
  DELEGATOR_APY_ASC = 'DELEGATOR_APY_ASC',
  DELEGATOR_APY_DESC = 'DELEGATOR_APY_DESC',
  DELEGATOR_REWARD_ASC = 'DELEGATOR_REWARD_ASC',
  DELEGATOR_REWARD_DESC = 'DELEGATOR_REWARD_DESC',
  ERA_IDX_ASC = 'ERA_IDX_ASC',
  ERA_IDX_DESC = 'ERA_IDX_DESC',
  ID_ASC = 'ID_ASC',
  ID_DESC = 'ID_DESC',
  INDEXER_APY_ASC = 'INDEXER_APY_ASC',
  INDEXER_APY_DESC = 'INDEXER_APY_DESC',
  INDEXER_BY_INDEXER_ID__ACTIVE_ASC = 'INDEXER_BY_INDEXER_ID__ACTIVE_ASC',
  INDEXER_BY_INDEXER_ID__ACTIVE_DESC = 'INDEXER_BY_INDEXER_ID__ACTIVE_DESC',
  INDEXER_BY_INDEXER_ID__CAPACITY_ASC = 'INDEXER_BY_INDEXER_ID__CAPACITY_ASC',
  INDEXER_BY_INDEXER_ID__CAPACITY_DESC = 'INDEXER_BY_INDEXER_ID__CAPACITY_DESC',
  INDEXER_BY_INDEXER_ID__COMMISSION_ASC = 'INDEXER_BY_INDEXER_ID__COMMISSION_ASC',
  INDEXER_BY_INDEXER_ID__COMMISSION_DESC = 'INDEXER_BY_INDEXER_ID__COMMISSION_DESC',
  INDEXER_BY_INDEXER_ID__CONTROLLER_ASC = 'INDEXER_BY_INDEXER_ID__CONTROLLER_ASC',
  INDEXER_BY_INDEXER_ID__CONTROLLER_DESC = 'INDEXER_BY_INDEXER_ID__CONTROLLER_DESC',
  INDEXER_BY_INDEXER_ID__CREATED_BLOCK_ASC = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_ASC',
  INDEXER_BY_INDEXER_ID__CREATED_BLOCK_DESC = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_DESC',
  INDEXER_BY_INDEXER_ID__ID_ASC = 'INDEXER_BY_INDEXER_ID__ID_ASC',
  INDEXER_BY_INDEXER_ID__ID_DESC = 'INDEXER_BY_INDEXER_ID__ID_DESC',
  INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_ASC = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_ASC',
  INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_DESC = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_DESC',
  INDEXER_BY_INDEXER_ID__LAST_EVENT_ASC = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_ASC',
  INDEXER_BY_INDEXER_ID__LAST_EVENT_DESC = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_DESC',
  INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_ASC = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_ASC',
  INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_DESC = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_DESC',
  INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_ASC = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_ASC',
  INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_DESC = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_DESC',
  INDEXER_BY_INDEXER_ID__METADATA_ASC = 'INDEXER_BY_INDEXER_ID__METADATA_ASC',
  INDEXER_BY_INDEXER_ID__METADATA_DESC = 'INDEXER_BY_INDEXER_ID__METADATA_DESC',
  INDEXER_BY_INDEXER_ID__SELF_STAKE_ASC = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_ASC',
  INDEXER_BY_INDEXER_ID__SELF_STAKE_DESC = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_DESC',
  INDEXER_BY_INDEXER_ID__TOTAL_STAKE_ASC = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_ASC',
  INDEXER_BY_INDEXER_ID__TOTAL_STAKE_DESC = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_DESC',
  INDEXER_ID_ASC = 'INDEXER_ID_ASC',
  INDEXER_ID_DESC = 'INDEXER_ID_DESC',
  INDEXER_REWARD_ASC = 'INDEXER_REWARD_ASC',
  INDEXER_REWARD_DESC = 'INDEXER_REWARD_DESC',
  NATURAL = 'NATURAL',
  PRIMARY_KEY_ASC = 'PRIMARY_KEY_ASC',
  PRIMARY_KEY_DESC = 'PRIMARY_KEY_DESC',
  UPDATE_AT_ASC = 'UPDATE_AT_ASC',
  UPDATE_AT_DESC = 'UPDATE_AT_DESC',
}

export type IndexerApySummary = Node & {
  readonly __typename: 'IndexerApySummary';
  readonly createAt: Scalars['Datetime']['output'];
  readonly delegatorApy: Scalars['BigFloat']['output'];
  readonly delegatorReward: Scalars['BigFloat']['output'];
  readonly eraIdx: Scalars['Int']['output'];
  readonly id: Scalars['String']['output'];
  /** Reads a single `Indexer` that is related to this `IndexerApySummary`. */
  readonly indexer: Maybe<Indexer>;
  readonly indexerApy: Scalars['BigFloat']['output'];
  readonly indexerId: Scalars['String']['output'];
  readonly indexerReward: Scalars['BigFloat']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  readonly nodeId: Scalars['ID']['output'];
  readonly updateAt: Scalars['Datetime']['output'];
};

export type IndexerApySummaryAggregates = {
  readonly __typename: 'IndexerApySummaryAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly average: Maybe<IndexerApySummaryAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly distinctCount: Maybe<IndexerApySummaryDistinctCountAggregates>;
  readonly keys: Maybe<ReadonlyArray<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly max: Maybe<IndexerApySummaryMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly min: Maybe<IndexerApySummaryMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevPopulation: Maybe<IndexerApySummaryStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevSample: Maybe<IndexerApySummaryStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly sum: Maybe<IndexerApySummarySumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly variancePopulation: Maybe<IndexerApySummaryVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly varianceSample: Maybe<IndexerApySummaryVarianceSampleAggregates>;
};

/** A filter to be used against aggregates of `IndexerApySummary` object types. */
export type IndexerApySummaryAggregatesFilter = {
  /** Mean average aggregate over matching `IndexerApySummary` objects. */
  readonly average: InputMaybe<IndexerApySummaryAverageAggregateFilter>;
  /** Distinct count aggregate over matching `IndexerApySummary` objects. */
  readonly distinctCount: InputMaybe<IndexerApySummaryDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `IndexerApySummary` object to be included within the aggregate. */
  readonly filter: InputMaybe<IndexerApySummaryFilter>;
  /** Maximum aggregate over matching `IndexerApySummary` objects. */
  readonly max: InputMaybe<IndexerApySummaryMaxAggregateFilter>;
  /** Minimum aggregate over matching `IndexerApySummary` objects. */
  readonly min: InputMaybe<IndexerApySummaryMinAggregateFilter>;
  /** Population standard deviation aggregate over matching `IndexerApySummary` objects. */
  readonly stddevPopulation: InputMaybe<IndexerApySummaryStddevPopulationAggregateFilter>;
  /** Sample standard deviation aggregate over matching `IndexerApySummary` objects. */
  readonly stddevSample: InputMaybe<IndexerApySummaryStddevSampleAggregateFilter>;
  /** Sum aggregate over matching `IndexerApySummary` objects. */
  readonly sum: InputMaybe<IndexerApySummarySumAggregateFilter>;
  /** Population variance aggregate over matching `IndexerApySummary` objects. */
  readonly variancePopulation: InputMaybe<IndexerApySummaryVariancePopulationAggregateFilter>;
  /** Sample variance aggregate over matching `IndexerApySummary` objects. */
  readonly varianceSample: InputMaybe<IndexerApySummaryVarianceSampleAggregateFilter>;
};

export type IndexerApySummaryAverageAggregateFilter = {
  readonly delegatorApy: InputMaybe<BigFloatFilter>;
  readonly delegatorReward: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigFloatFilter>;
  readonly indexerApy: InputMaybe<BigFloatFilter>;
  readonly indexerReward: InputMaybe<BigFloatFilter>;
};

export type IndexerApySummaryAverageAggregates = {
  readonly __typename: 'IndexerApySummaryAverageAggregates';
  /** Mean average of delegatorApy across the matching connection */
  readonly delegatorApy: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of delegatorReward across the matching connection */
  readonly delegatorReward: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of indexerApy across the matching connection */
  readonly indexerApy: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of indexerReward across the matching connection */
  readonly indexerReward: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerApySummaryDistinctCountAggregateFilter = {
  readonly _blockRange: InputMaybe<BigIntFilter>;
  readonly _id: InputMaybe<BigIntFilter>;
  readonly createAt: InputMaybe<BigIntFilter>;
  readonly delegatorApy: InputMaybe<BigIntFilter>;
  readonly delegatorReward: InputMaybe<BigIntFilter>;
  readonly eraIdx: InputMaybe<BigIntFilter>;
  readonly id: InputMaybe<BigIntFilter>;
  readonly indexerApy: InputMaybe<BigIntFilter>;
  readonly indexerId: InputMaybe<BigIntFilter>;
  readonly indexerReward: InputMaybe<BigIntFilter>;
  readonly updateAt: InputMaybe<BigIntFilter>;
};

export type IndexerApySummaryDistinctCountAggregates = {
  readonly __typename: 'IndexerApySummaryDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  readonly _blockRange: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  readonly _id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createAt across the matching connection */
  readonly createAt: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of delegatorApy across the matching connection */
  readonly delegatorApy: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of delegatorReward across the matching connection */
  readonly delegatorReward: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  readonly id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of indexerApy across the matching connection */
  readonly indexerApy: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of indexerId across the matching connection */
  readonly indexerId: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of indexerReward across the matching connection */
  readonly indexerReward: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of updateAt across the matching connection */
  readonly updateAt: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `IndexerApySummary` object types. All fields are combined with a logical ‘and.’ */
export type IndexerApySummaryFilter = {
  /** Checks for all expressions in this list. */
  readonly and: InputMaybe<ReadonlyArray<IndexerApySummaryFilter>>;
  /** Filter by the object’s `createAt` field. */
  readonly createAt: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `delegatorApy` field. */
  readonly delegatorApy: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `delegatorReward` field. */
  readonly delegatorReward: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `eraIdx` field. */
  readonly eraIdx: InputMaybe<IntFilter>;
  /** Filter by the object’s `id` field. */
  readonly id: InputMaybe<StringFilter>;
  /** Filter by the object’s `indexer` relation. */
  readonly indexer: InputMaybe<IndexerFilter>;
  /** Filter by the object’s `indexerApy` field. */
  readonly indexerApy: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `indexerId` field. */
  readonly indexerId: InputMaybe<StringFilter>;
  /** Filter by the object’s `indexerReward` field. */
  readonly indexerReward: InputMaybe<BigFloatFilter>;
  /** Negates the expression. */
  readonly not: InputMaybe<IndexerApySummaryFilter>;
  /** Checks for any expressions in this list. */
  readonly or: InputMaybe<ReadonlyArray<IndexerApySummaryFilter>>;
  /** Filter by the object’s `updateAt` field. */
  readonly updateAt: InputMaybe<DatetimeFilter>;
};

export type IndexerApySummaryMaxAggregateFilter = {
  readonly delegatorApy: InputMaybe<BigFloatFilter>;
  readonly delegatorReward: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<IntFilter>;
  readonly indexerApy: InputMaybe<BigFloatFilter>;
  readonly indexerReward: InputMaybe<BigFloatFilter>;
};

export type IndexerApySummaryMaxAggregates = {
  readonly __typename: 'IndexerApySummaryMaxAggregates';
  /** Maximum of delegatorApy across the matching connection */
  readonly delegatorApy: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of delegatorReward across the matching connection */
  readonly delegatorReward: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['Int']['output']>;
  /** Maximum of indexerApy across the matching connection */
  readonly indexerApy: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of indexerReward across the matching connection */
  readonly indexerReward: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerApySummaryMinAggregateFilter = {
  readonly delegatorApy: InputMaybe<BigFloatFilter>;
  readonly delegatorReward: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<IntFilter>;
  readonly indexerApy: InputMaybe<BigFloatFilter>;
  readonly indexerReward: InputMaybe<BigFloatFilter>;
};

export type IndexerApySummaryMinAggregates = {
  readonly __typename: 'IndexerApySummaryMinAggregates';
  /** Minimum of delegatorApy across the matching connection */
  readonly delegatorApy: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of delegatorReward across the matching connection */
  readonly delegatorReward: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['Int']['output']>;
  /** Minimum of indexerApy across the matching connection */
  readonly indexerApy: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of indexerReward across the matching connection */
  readonly indexerReward: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerApySummaryStddevPopulationAggregateFilter = {
  readonly delegatorApy: InputMaybe<BigFloatFilter>;
  readonly delegatorReward: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigFloatFilter>;
  readonly indexerApy: InputMaybe<BigFloatFilter>;
  readonly indexerReward: InputMaybe<BigFloatFilter>;
};

export type IndexerApySummaryStddevPopulationAggregates = {
  readonly __typename: 'IndexerApySummaryStddevPopulationAggregates';
  /** Population standard deviation of delegatorApy across the matching connection */
  readonly delegatorApy: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of delegatorReward across the matching connection */
  readonly delegatorReward: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of indexerApy across the matching connection */
  readonly indexerApy: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of indexerReward across the matching connection */
  readonly indexerReward: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerApySummaryStddevSampleAggregateFilter = {
  readonly delegatorApy: InputMaybe<BigFloatFilter>;
  readonly delegatorReward: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigFloatFilter>;
  readonly indexerApy: InputMaybe<BigFloatFilter>;
  readonly indexerReward: InputMaybe<BigFloatFilter>;
};

export type IndexerApySummaryStddevSampleAggregates = {
  readonly __typename: 'IndexerApySummaryStddevSampleAggregates';
  /** Sample standard deviation of delegatorApy across the matching connection */
  readonly delegatorApy: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of delegatorReward across the matching connection */
  readonly delegatorReward: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of indexerApy across the matching connection */
  readonly indexerApy: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of indexerReward across the matching connection */
  readonly indexerReward: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerApySummarySumAggregateFilter = {
  readonly delegatorApy: InputMaybe<BigFloatFilter>;
  readonly delegatorReward: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigIntFilter>;
  readonly indexerApy: InputMaybe<BigFloatFilter>;
  readonly indexerReward: InputMaybe<BigFloatFilter>;
};

export type IndexerApySummarySumAggregates = {
  readonly __typename: 'IndexerApySummarySumAggregates';
  /** Sum of delegatorApy across the matching connection */
  readonly delegatorApy: Scalars['BigFloat']['output'];
  /** Sum of delegatorReward across the matching connection */
  readonly delegatorReward: Scalars['BigFloat']['output'];
  /** Sum of eraIdx across the matching connection */
  readonly eraIdx: Scalars['BigInt']['output'];
  /** Sum of indexerApy across the matching connection */
  readonly indexerApy: Scalars['BigFloat']['output'];
  /** Sum of indexerReward across the matching connection */
  readonly indexerReward: Scalars['BigFloat']['output'];
};

export type IndexerApySummaryVariancePopulationAggregateFilter = {
  readonly delegatorApy: InputMaybe<BigFloatFilter>;
  readonly delegatorReward: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigFloatFilter>;
  readonly indexerApy: InputMaybe<BigFloatFilter>;
  readonly indexerReward: InputMaybe<BigFloatFilter>;
};

export type IndexerApySummaryVariancePopulationAggregates = {
  readonly __typename: 'IndexerApySummaryVariancePopulationAggregates';
  /** Population variance of delegatorApy across the matching connection */
  readonly delegatorApy: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of delegatorReward across the matching connection */
  readonly delegatorReward: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of indexerApy across the matching connection */
  readonly indexerApy: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of indexerReward across the matching connection */
  readonly indexerReward: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerApySummaryVarianceSampleAggregateFilter = {
  readonly delegatorApy: InputMaybe<BigFloatFilter>;
  readonly delegatorReward: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigFloatFilter>;
  readonly indexerApy: InputMaybe<BigFloatFilter>;
  readonly indexerReward: InputMaybe<BigFloatFilter>;
};

export type IndexerApySummaryVarianceSampleAggregates = {
  readonly __typename: 'IndexerApySummaryVarianceSampleAggregates';
  /** Sample variance of delegatorApy across the matching connection */
  readonly delegatorApy: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of delegatorReward across the matching connection */
  readonly delegatorReward: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of indexerApy across the matching connection */
  readonly indexerApy: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of indexerReward across the matching connection */
  readonly indexerReward: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerAverageAggregates = {
  readonly __typename: 'IndexerAverageAggregates';
  /** Mean average of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerCommissionRate = Node & {
  readonly __typename: 'IndexerCommissionRate';
  readonly commissionRate: Scalars['Int']['output'];
  /** Reads a single `Era` that is related to this `IndexerCommissionRate`. */
  readonly era: Maybe<Era>;
  readonly eraId: Scalars['String']['output'];
  readonly eraIdx: Scalars['Int']['output'];
  readonly id: Scalars['String']['output'];
  /** Reads a single `Indexer` that is related to this `IndexerCommissionRate`. */
  readonly indexer: Maybe<Indexer>;
  readonly indexerId: Scalars['String']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  readonly nodeId: Scalars['ID']['output'];
};

export type IndexerCommissionRateAggregates = {
  readonly __typename: 'IndexerCommissionRateAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly average: Maybe<IndexerCommissionRateAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly distinctCount: Maybe<IndexerCommissionRateDistinctCountAggregates>;
  readonly keys: Maybe<ReadonlyArray<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly max: Maybe<IndexerCommissionRateMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly min: Maybe<IndexerCommissionRateMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevPopulation: Maybe<IndexerCommissionRateStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevSample: Maybe<IndexerCommissionRateStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly sum: Maybe<IndexerCommissionRateSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly variancePopulation: Maybe<IndexerCommissionRateVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly varianceSample: Maybe<IndexerCommissionRateVarianceSampleAggregates>;
};

/** A filter to be used against aggregates of `IndexerCommissionRate` object types. */
export type IndexerCommissionRateAggregatesFilter = {
  /** Mean average aggregate over matching `IndexerCommissionRate` objects. */
  readonly average: InputMaybe<IndexerCommissionRateAverageAggregateFilter>;
  /** Distinct count aggregate over matching `IndexerCommissionRate` objects. */
  readonly distinctCount: InputMaybe<IndexerCommissionRateDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `IndexerCommissionRate` object to be included within the aggregate. */
  readonly filter: InputMaybe<IndexerCommissionRateFilter>;
  /** Maximum aggregate over matching `IndexerCommissionRate` objects. */
  readonly max: InputMaybe<IndexerCommissionRateMaxAggregateFilter>;
  /** Minimum aggregate over matching `IndexerCommissionRate` objects. */
  readonly min: InputMaybe<IndexerCommissionRateMinAggregateFilter>;
  /** Population standard deviation aggregate over matching `IndexerCommissionRate` objects. */
  readonly stddevPopulation: InputMaybe<IndexerCommissionRateStddevPopulationAggregateFilter>;
  /** Sample standard deviation aggregate over matching `IndexerCommissionRate` objects. */
  readonly stddevSample: InputMaybe<IndexerCommissionRateStddevSampleAggregateFilter>;
  /** Sum aggregate over matching `IndexerCommissionRate` objects. */
  readonly sum: InputMaybe<IndexerCommissionRateSumAggregateFilter>;
  /** Population variance aggregate over matching `IndexerCommissionRate` objects. */
  readonly variancePopulation: InputMaybe<IndexerCommissionRateVariancePopulationAggregateFilter>;
  /** Sample variance aggregate over matching `IndexerCommissionRate` objects. */
  readonly varianceSample: InputMaybe<IndexerCommissionRateVarianceSampleAggregateFilter>;
};

export type IndexerCommissionRateAverageAggregateFilter = {
  readonly commissionRate: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigFloatFilter>;
};

export type IndexerCommissionRateAverageAggregates = {
  readonly __typename: 'IndexerCommissionRateAverageAggregates';
  /** Mean average of commissionRate across the matching connection */
  readonly commissionRate: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerCommissionRateDistinctCountAggregateFilter = {
  readonly _blockRange: InputMaybe<BigIntFilter>;
  readonly _id: InputMaybe<BigIntFilter>;
  readonly commissionRate: InputMaybe<BigIntFilter>;
  readonly eraId: InputMaybe<BigIntFilter>;
  readonly eraIdx: InputMaybe<BigIntFilter>;
  readonly id: InputMaybe<BigIntFilter>;
  readonly indexerId: InputMaybe<BigIntFilter>;
};

export type IndexerCommissionRateDistinctCountAggregates = {
  readonly __typename: 'IndexerCommissionRateDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  readonly _blockRange: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  readonly _id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of commissionRate across the matching connection */
  readonly commissionRate: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of eraId across the matching connection */
  readonly eraId: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  readonly id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of indexerId across the matching connection */
  readonly indexerId: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `IndexerCommissionRate` object types. All fields are combined with a logical ‘and.’ */
export type IndexerCommissionRateFilter = {
  /** Checks for all expressions in this list. */
  readonly and: InputMaybe<ReadonlyArray<IndexerCommissionRateFilter>>;
  /** Filter by the object’s `commissionRate` field. */
  readonly commissionRate: InputMaybe<IntFilter>;
  /** Filter by the object’s `era` relation. */
  readonly era: InputMaybe<EraFilter>;
  /** Filter by the object’s `eraId` field. */
  readonly eraId: InputMaybe<StringFilter>;
  /** Filter by the object’s `eraIdx` field. */
  readonly eraIdx: InputMaybe<IntFilter>;
  /** Filter by the object’s `id` field. */
  readonly id: InputMaybe<StringFilter>;
  /** Filter by the object’s `indexer` relation. */
  readonly indexer: InputMaybe<IndexerFilter>;
  /** Filter by the object’s `indexerId` field. */
  readonly indexerId: InputMaybe<StringFilter>;
  /** Negates the expression. */
  readonly not: InputMaybe<IndexerCommissionRateFilter>;
  /** Checks for any expressions in this list. */
  readonly or: InputMaybe<ReadonlyArray<IndexerCommissionRateFilter>>;
};

export type IndexerCommissionRateMaxAggregateFilter = {
  readonly commissionRate: InputMaybe<IntFilter>;
  readonly eraIdx: InputMaybe<IntFilter>;
};

export type IndexerCommissionRateMaxAggregates = {
  readonly __typename: 'IndexerCommissionRateMaxAggregates';
  /** Maximum of commissionRate across the matching connection */
  readonly commissionRate: Maybe<Scalars['Int']['output']>;
  /** Maximum of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['Int']['output']>;
};

export type IndexerCommissionRateMinAggregateFilter = {
  readonly commissionRate: InputMaybe<IntFilter>;
  readonly eraIdx: InputMaybe<IntFilter>;
};

export type IndexerCommissionRateMinAggregates = {
  readonly __typename: 'IndexerCommissionRateMinAggregates';
  /** Minimum of commissionRate across the matching connection */
  readonly commissionRate: Maybe<Scalars['Int']['output']>;
  /** Minimum of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['Int']['output']>;
};

export type IndexerCommissionRateStddevPopulationAggregateFilter = {
  readonly commissionRate: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigFloatFilter>;
};

export type IndexerCommissionRateStddevPopulationAggregates = {
  readonly __typename: 'IndexerCommissionRateStddevPopulationAggregates';
  /** Population standard deviation of commissionRate across the matching connection */
  readonly commissionRate: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerCommissionRateStddevSampleAggregateFilter = {
  readonly commissionRate: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigFloatFilter>;
};

export type IndexerCommissionRateStddevSampleAggregates = {
  readonly __typename: 'IndexerCommissionRateStddevSampleAggregates';
  /** Sample standard deviation of commissionRate across the matching connection */
  readonly commissionRate: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerCommissionRateSumAggregateFilter = {
  readonly commissionRate: InputMaybe<BigIntFilter>;
  readonly eraIdx: InputMaybe<BigIntFilter>;
};

export type IndexerCommissionRateSumAggregates = {
  readonly __typename: 'IndexerCommissionRateSumAggregates';
  /** Sum of commissionRate across the matching connection */
  readonly commissionRate: Scalars['BigInt']['output'];
  /** Sum of eraIdx across the matching connection */
  readonly eraIdx: Scalars['BigInt']['output'];
};

export type IndexerCommissionRateVariancePopulationAggregateFilter = {
  readonly commissionRate: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigFloatFilter>;
};

export type IndexerCommissionRateVariancePopulationAggregates = {
  readonly __typename: 'IndexerCommissionRateVariancePopulationAggregates';
  /** Population variance of commissionRate across the matching connection */
  readonly commissionRate: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerCommissionRateVarianceSampleAggregateFilter = {
  readonly commissionRate: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigFloatFilter>;
};

export type IndexerCommissionRateVarianceSampleAggregates = {
  readonly __typename: 'IndexerCommissionRateVarianceSampleAggregates';
  /** Sample variance of commissionRate across the matching connection */
  readonly commissionRate: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `IndexerCommissionRate` values. */
export type IndexerCommissionRatesConnection = {
  readonly __typename: 'IndexerCommissionRatesConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<IndexerCommissionRateAggregates>;
  /** A list of edges which contains the `IndexerCommissionRate` and cursor to aid in pagination. */
  readonly edges: ReadonlyArray<IndexerCommissionRatesEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<IndexerCommissionRateAggregates>>;
  /** A list of `IndexerCommissionRate` objects. */
  readonly nodes: ReadonlyArray<Maybe<IndexerCommissionRate>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `IndexerCommissionRate` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `IndexerCommissionRate` values. */
export type IndexerCommissionRatesConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<IndexerCommissionRatesGroupBy>;
  having: InputMaybe<IndexerCommissionRatesHavingInput>;
};

/** A `IndexerCommissionRate` edge in the connection. */
export type IndexerCommissionRatesEdge = {
  readonly __typename: 'IndexerCommissionRatesEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `IndexerCommissionRate` at the end of the edge. */
  readonly node: Maybe<IndexerCommissionRate>;
};

/** Grouping methods for `IndexerCommissionRate` for usage during aggregation. */
export enum IndexerCommissionRatesGroupBy {
  COMMISSION_RATE = 'COMMISSION_RATE',
  ERA_ID = 'ERA_ID',
  ERA_IDX = 'ERA_IDX',
  ID = 'ID',
  INDEXER_ID = 'INDEXER_ID',
}

export type IndexerCommissionRatesHavingAverageInput = {
  readonly commissionRate: InputMaybe<HavingIntFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
};

export type IndexerCommissionRatesHavingDistinctCountInput = {
  readonly commissionRate: InputMaybe<HavingIntFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
};

/** Conditions for `IndexerCommissionRate` aggregates. */
export type IndexerCommissionRatesHavingInput = {
  readonly AND: InputMaybe<ReadonlyArray<IndexerCommissionRatesHavingInput>>;
  readonly OR: InputMaybe<ReadonlyArray<IndexerCommissionRatesHavingInput>>;
  readonly average: InputMaybe<IndexerCommissionRatesHavingAverageInput>;
  readonly distinctCount: InputMaybe<IndexerCommissionRatesHavingDistinctCountInput>;
  readonly max: InputMaybe<IndexerCommissionRatesHavingMaxInput>;
  readonly min: InputMaybe<IndexerCommissionRatesHavingMinInput>;
  readonly stddevPopulation: InputMaybe<IndexerCommissionRatesHavingStddevPopulationInput>;
  readonly stddevSample: InputMaybe<IndexerCommissionRatesHavingStddevSampleInput>;
  readonly sum: InputMaybe<IndexerCommissionRatesHavingSumInput>;
  readonly variancePopulation: InputMaybe<IndexerCommissionRatesHavingVariancePopulationInput>;
  readonly varianceSample: InputMaybe<IndexerCommissionRatesHavingVarianceSampleInput>;
};

export type IndexerCommissionRatesHavingMaxInput = {
  readonly commissionRate: InputMaybe<HavingIntFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
};

export type IndexerCommissionRatesHavingMinInput = {
  readonly commissionRate: InputMaybe<HavingIntFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
};

export type IndexerCommissionRatesHavingStddevPopulationInput = {
  readonly commissionRate: InputMaybe<HavingIntFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
};

export type IndexerCommissionRatesHavingStddevSampleInput = {
  readonly commissionRate: InputMaybe<HavingIntFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
};

export type IndexerCommissionRatesHavingSumInput = {
  readonly commissionRate: InputMaybe<HavingIntFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
};

export type IndexerCommissionRatesHavingVariancePopulationInput = {
  readonly commissionRate: InputMaybe<HavingIntFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
};

export type IndexerCommissionRatesHavingVarianceSampleInput = {
  readonly commissionRate: InputMaybe<HavingIntFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
};

/** Methods to use when ordering `IndexerCommissionRate`. */
export enum IndexerCommissionRatesOrderBy {
  COMMISSION_RATE_ASC = 'COMMISSION_RATE_ASC',
  COMMISSION_RATE_DESC = 'COMMISSION_RATE_DESC',
  ERA_BY_ERA_ID__CREATED_BLOCK_ASC = 'ERA_BY_ERA_ID__CREATED_BLOCK_ASC',
  ERA_BY_ERA_ID__CREATED_BLOCK_DESC = 'ERA_BY_ERA_ID__CREATED_BLOCK_DESC',
  ERA_BY_ERA_ID__END_TIME_ASC = 'ERA_BY_ERA_ID__END_TIME_ASC',
  ERA_BY_ERA_ID__END_TIME_DESC = 'ERA_BY_ERA_ID__END_TIME_DESC',
  ERA_BY_ERA_ID__ERA_PERIOD_ASC = 'ERA_BY_ERA_ID__ERA_PERIOD_ASC',
  ERA_BY_ERA_ID__ERA_PERIOD_DESC = 'ERA_BY_ERA_ID__ERA_PERIOD_DESC',
  ERA_BY_ERA_ID__FORCE_NEXT_ASC = 'ERA_BY_ERA_ID__FORCE_NEXT_ASC',
  ERA_BY_ERA_ID__FORCE_NEXT_DESC = 'ERA_BY_ERA_ID__FORCE_NEXT_DESC',
  ERA_BY_ERA_ID__ID_ASC = 'ERA_BY_ERA_ID__ID_ASC',
  ERA_BY_ERA_ID__ID_DESC = 'ERA_BY_ERA_ID__ID_DESC',
  ERA_BY_ERA_ID__LAST_EVENT_ASC = 'ERA_BY_ERA_ID__LAST_EVENT_ASC',
  ERA_BY_ERA_ID__LAST_EVENT_DESC = 'ERA_BY_ERA_ID__LAST_EVENT_DESC',
  ERA_BY_ERA_ID__START_TIME_ASC = 'ERA_BY_ERA_ID__START_TIME_ASC',
  ERA_BY_ERA_ID__START_TIME_DESC = 'ERA_BY_ERA_ID__START_TIME_DESC',
  ERA_IDX_ASC = 'ERA_IDX_ASC',
  ERA_IDX_DESC = 'ERA_IDX_DESC',
  ERA_ID_ASC = 'ERA_ID_ASC',
  ERA_ID_DESC = 'ERA_ID_DESC',
  ID_ASC = 'ID_ASC',
  ID_DESC = 'ID_DESC',
  INDEXER_BY_INDEXER_ID__ACTIVE_ASC = 'INDEXER_BY_INDEXER_ID__ACTIVE_ASC',
  INDEXER_BY_INDEXER_ID__ACTIVE_DESC = 'INDEXER_BY_INDEXER_ID__ACTIVE_DESC',
  INDEXER_BY_INDEXER_ID__CAPACITY_ASC = 'INDEXER_BY_INDEXER_ID__CAPACITY_ASC',
  INDEXER_BY_INDEXER_ID__CAPACITY_DESC = 'INDEXER_BY_INDEXER_ID__CAPACITY_DESC',
  INDEXER_BY_INDEXER_ID__COMMISSION_ASC = 'INDEXER_BY_INDEXER_ID__COMMISSION_ASC',
  INDEXER_BY_INDEXER_ID__COMMISSION_DESC = 'INDEXER_BY_INDEXER_ID__COMMISSION_DESC',
  INDEXER_BY_INDEXER_ID__CONTROLLER_ASC = 'INDEXER_BY_INDEXER_ID__CONTROLLER_ASC',
  INDEXER_BY_INDEXER_ID__CONTROLLER_DESC = 'INDEXER_BY_INDEXER_ID__CONTROLLER_DESC',
  INDEXER_BY_INDEXER_ID__CREATED_BLOCK_ASC = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_ASC',
  INDEXER_BY_INDEXER_ID__CREATED_BLOCK_DESC = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_DESC',
  INDEXER_BY_INDEXER_ID__ID_ASC = 'INDEXER_BY_INDEXER_ID__ID_ASC',
  INDEXER_BY_INDEXER_ID__ID_DESC = 'INDEXER_BY_INDEXER_ID__ID_DESC',
  INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_ASC = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_ASC',
  INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_DESC = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_DESC',
  INDEXER_BY_INDEXER_ID__LAST_EVENT_ASC = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_ASC',
  INDEXER_BY_INDEXER_ID__LAST_EVENT_DESC = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_DESC',
  INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_ASC = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_ASC',
  INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_DESC = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_DESC',
  INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_ASC = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_ASC',
  INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_DESC = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_DESC',
  INDEXER_BY_INDEXER_ID__METADATA_ASC = 'INDEXER_BY_INDEXER_ID__METADATA_ASC',
  INDEXER_BY_INDEXER_ID__METADATA_DESC = 'INDEXER_BY_INDEXER_ID__METADATA_DESC',
  INDEXER_BY_INDEXER_ID__SELF_STAKE_ASC = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_ASC',
  INDEXER_BY_INDEXER_ID__SELF_STAKE_DESC = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_DESC',
  INDEXER_BY_INDEXER_ID__TOTAL_STAKE_ASC = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_ASC',
  INDEXER_BY_INDEXER_ID__TOTAL_STAKE_DESC = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_DESC',
  INDEXER_ID_ASC = 'INDEXER_ID_ASC',
  INDEXER_ID_DESC = 'INDEXER_ID_DESC',
  NATURAL = 'NATURAL',
  PRIMARY_KEY_ASC = 'PRIMARY_KEY_ASC',
  PRIMARY_KEY_DESC = 'PRIMARY_KEY_DESC',
}

/** A connection to a list of `Delegator` values, with data from `Delegation`. */
export type IndexerDelegatorsByDelegationIndexerIdAndDelegatorIdManyToManyConnection = {
  readonly __typename: 'IndexerDelegatorsByDelegationIndexerIdAndDelegatorIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<DelegatorAggregates>;
  /** A list of edges which contains the `Delegator`, info from the `Delegation`, and the cursor to aid in pagination. */
  readonly edges: ReadonlyArray<IndexerDelegatorsByDelegationIndexerIdAndDelegatorIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<DelegatorAggregates>>;
  /** A list of `Delegator` objects. */
  readonly nodes: ReadonlyArray<Maybe<Delegator>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Delegator` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Delegator` values, with data from `Delegation`. */
export type IndexerDelegatorsByDelegationIndexerIdAndDelegatorIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<DelegatorsGroupBy>;
  having: InputMaybe<DelegatorsHavingInput>;
};

/** A `Delegator` edge in the connection, with data from `Delegation`. */
export type IndexerDelegatorsByDelegationIndexerIdAndDelegatorIdManyToManyEdge = {
  readonly __typename: 'IndexerDelegatorsByDelegationIndexerIdAndDelegatorIdManyToManyEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `Delegation`. */
  readonly delegations: DelegationsConnection;
  /** The `Delegator` at the end of the edge. */
  readonly node: Maybe<Delegator>;
};

/** A `Delegator` edge in the connection, with data from `Delegation`. */
export type IndexerDelegatorsByDelegationIndexerIdAndDelegatorIdManyToManyEdgeDelegationsArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Delegations_Distinct_Enum>>>;
  filter: InputMaybe<DelegationFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<DelegationsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** A connection to a list of `Delegator` values, with data from `EraDelegatorIndexerApy`. */
export type IndexerDelegatorsByEraDelegatorIndexerApyIndexerIdAndDelegatorIdManyToManyConnection = {
  readonly __typename: 'IndexerDelegatorsByEraDelegatorIndexerApyIndexerIdAndDelegatorIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<DelegatorAggregates>;
  /** A list of edges which contains the `Delegator`, info from the `EraDelegatorIndexerApy`, and the cursor to aid in pagination. */
  readonly edges: ReadonlyArray<IndexerDelegatorsByEraDelegatorIndexerApyIndexerIdAndDelegatorIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<DelegatorAggregates>>;
  /** A list of `Delegator` objects. */
  readonly nodes: ReadonlyArray<Maybe<Delegator>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Delegator` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Delegator` values, with data from `EraDelegatorIndexerApy`. */
export type IndexerDelegatorsByEraDelegatorIndexerApyIndexerIdAndDelegatorIdManyToManyConnectionGroupedAggregatesArgs =
  {
    groupBy: ReadonlyArray<DelegatorsGroupBy>;
    having: InputMaybe<DelegatorsHavingInput>;
  };

/** A `Delegator` edge in the connection, with data from `EraDelegatorIndexerApy`. */
export type IndexerDelegatorsByEraDelegatorIndexerApyIndexerIdAndDelegatorIdManyToManyEdge = {
  readonly __typename: 'IndexerDelegatorsByEraDelegatorIndexerApyIndexerIdAndDelegatorIdManyToManyEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `EraDelegatorIndexerApy`. */
  readonly eraDelegatorIndexerApies: EraDelegatorIndexerApiesConnection;
  /** The `Delegator` at the end of the edge. */
  readonly node: Maybe<Delegator>;
};

/** A `Delegator` edge in the connection, with data from `EraDelegatorIndexerApy`. */
export type IndexerDelegatorsByEraDelegatorIndexerApyIndexerIdAndDelegatorIdManyToManyEdgeEraDelegatorIndexerApiesArgs =
  {
    after: InputMaybe<Scalars['Cursor']['input']>;
    before: InputMaybe<Scalars['Cursor']['input']>;
    blockHeight?: InputMaybe<Scalars['String']['input']>;
    distinct?: InputMaybe<ReadonlyArray<InputMaybe<Era_Delegator_Indexer_Apies_Distinct_Enum>>>;
    filter: InputMaybe<EraDelegatorIndexerApyFilter>;
    first: InputMaybe<Scalars['Int']['input']>;
    last: InputMaybe<Scalars['Int']['input']>;
    offset: InputMaybe<Scalars['Int']['input']>;
    orderBy: InputMaybe<ReadonlyArray<EraDelegatorIndexerApiesOrderBy>>;
    orderByNull: InputMaybe<NullOrder>;
  };

/** A connection to a list of `Delegator` values, with data from `EraReward`. */
export type IndexerDelegatorsByEraRewardIndexerIdAndDelegatorIdManyToManyConnection = {
  readonly __typename: 'IndexerDelegatorsByEraRewardIndexerIdAndDelegatorIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<DelegatorAggregates>;
  /** A list of edges which contains the `Delegator`, info from the `EraReward`, and the cursor to aid in pagination. */
  readonly edges: ReadonlyArray<IndexerDelegatorsByEraRewardIndexerIdAndDelegatorIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<DelegatorAggregates>>;
  /** A list of `Delegator` objects. */
  readonly nodes: ReadonlyArray<Maybe<Delegator>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Delegator` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Delegator` values, with data from `EraReward`. */
export type IndexerDelegatorsByEraRewardIndexerIdAndDelegatorIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<DelegatorsGroupBy>;
  having: InputMaybe<DelegatorsHavingInput>;
};

/** A `Delegator` edge in the connection, with data from `EraReward`. */
export type IndexerDelegatorsByEraRewardIndexerIdAndDelegatorIdManyToManyEdge = {
  readonly __typename: 'IndexerDelegatorsByEraRewardIndexerIdAndDelegatorIdManyToManyEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `EraReward`. */
  readonly eraRewards: EraRewardsConnection;
  /** The `Delegator` at the end of the edge. */
  readonly node: Maybe<Delegator>;
};

/** A `Delegator` edge in the connection, with data from `EraReward`. */
export type IndexerDelegatorsByEraRewardIndexerIdAndDelegatorIdManyToManyEdgeEraRewardsArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Era_Rewards_Distinct_Enum>>>;
  filter: InputMaybe<EraRewardFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<EraRewardsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** A connection to a list of `Delegator` values, with data from `EraStake`. */
export type IndexerDelegatorsByEraStakeIndexerIdAndDelegatorIdManyToManyConnection = {
  readonly __typename: 'IndexerDelegatorsByEraStakeIndexerIdAndDelegatorIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<DelegatorAggregates>;
  /** A list of edges which contains the `Delegator`, info from the `EraStake`, and the cursor to aid in pagination. */
  readonly edges: ReadonlyArray<IndexerDelegatorsByEraStakeIndexerIdAndDelegatorIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<DelegatorAggregates>>;
  /** A list of `Delegator` objects. */
  readonly nodes: ReadonlyArray<Maybe<Delegator>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Delegator` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Delegator` values, with data from `EraStake`. */
export type IndexerDelegatorsByEraStakeIndexerIdAndDelegatorIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<DelegatorsGroupBy>;
  having: InputMaybe<DelegatorsHavingInput>;
};

/** A `Delegator` edge in the connection, with data from `EraStake`. */
export type IndexerDelegatorsByEraStakeIndexerIdAndDelegatorIdManyToManyEdge = {
  readonly __typename: 'IndexerDelegatorsByEraStakeIndexerIdAndDelegatorIdManyToManyEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `EraStake`. */
  readonly eraStakes: EraStakesConnection;
  /** The `Delegator` at the end of the edge. */
  readonly node: Maybe<Delegator>;
};

/** A `Delegator` edge in the connection, with data from `EraStake`. */
export type IndexerDelegatorsByEraStakeIndexerIdAndDelegatorIdManyToManyEdgeEraStakesArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Era_Stakes_Distinct_Enum>>>;
  filter: InputMaybe<EraStakeFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<EraStakesOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type IndexerDeployment = Node & {
  readonly __typename: 'IndexerDeployment';
  readonly createdBlock: Maybe<Scalars['Int']['output']>;
  /** Reads a single `Deployment` that is related to this `IndexerDeployment`. */
  readonly deployment: Maybe<Deployment>;
  readonly deploymentId: Scalars['String']['output'];
  readonly id: Scalars['String']['output'];
  /** Reads a single `Indexer` that is related to this `IndexerDeployment`. */
  readonly indexer: Maybe<Indexer>;
  readonly indexerId: Scalars['String']['output'];
  readonly lastEvent: Maybe<Scalars['String']['output']>;
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  readonly nodeId: Scalars['ID']['output'];
  readonly status: ServiceStatus;
  readonly timestamp: Maybe<Scalars['Datetime']['output']>;
};

export type IndexerDeploymentAggregates = {
  readonly __typename: 'IndexerDeploymentAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly average: Maybe<IndexerDeploymentAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly distinctCount: Maybe<IndexerDeploymentDistinctCountAggregates>;
  readonly keys: Maybe<ReadonlyArray<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly max: Maybe<IndexerDeploymentMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly min: Maybe<IndexerDeploymentMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevPopulation: Maybe<IndexerDeploymentStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevSample: Maybe<IndexerDeploymentStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly sum: Maybe<IndexerDeploymentSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly variancePopulation: Maybe<IndexerDeploymentVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly varianceSample: Maybe<IndexerDeploymentVarianceSampleAggregates>;
};

/** A filter to be used against aggregates of `IndexerDeployment` object types. */
export type IndexerDeploymentAggregatesFilter = {
  /** Mean average aggregate over matching `IndexerDeployment` objects. */
  readonly average: InputMaybe<IndexerDeploymentAverageAggregateFilter>;
  /** Distinct count aggregate over matching `IndexerDeployment` objects. */
  readonly distinctCount: InputMaybe<IndexerDeploymentDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `IndexerDeployment` object to be included within the aggregate. */
  readonly filter: InputMaybe<IndexerDeploymentFilter>;
  /** Maximum aggregate over matching `IndexerDeployment` objects. */
  readonly max: InputMaybe<IndexerDeploymentMaxAggregateFilter>;
  /** Minimum aggregate over matching `IndexerDeployment` objects. */
  readonly min: InputMaybe<IndexerDeploymentMinAggregateFilter>;
  /** Population standard deviation aggregate over matching `IndexerDeployment` objects. */
  readonly stddevPopulation: InputMaybe<IndexerDeploymentStddevPopulationAggregateFilter>;
  /** Sample standard deviation aggregate over matching `IndexerDeployment` objects. */
  readonly stddevSample: InputMaybe<IndexerDeploymentStddevSampleAggregateFilter>;
  /** Sum aggregate over matching `IndexerDeployment` objects. */
  readonly sum: InputMaybe<IndexerDeploymentSumAggregateFilter>;
  /** Population variance aggregate over matching `IndexerDeployment` objects. */
  readonly variancePopulation: InputMaybe<IndexerDeploymentVariancePopulationAggregateFilter>;
  /** Sample variance aggregate over matching `IndexerDeployment` objects. */
  readonly varianceSample: InputMaybe<IndexerDeploymentVarianceSampleAggregateFilter>;
};

export type IndexerDeploymentAverageAggregateFilter = {
  readonly createdBlock: InputMaybe<BigFloatFilter>;
};

export type IndexerDeploymentAverageAggregates = {
  readonly __typename: 'IndexerDeploymentAverageAggregates';
  /** Mean average of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerDeploymentDistinctCountAggregateFilter = {
  readonly _blockRange: InputMaybe<BigIntFilter>;
  readonly _id: InputMaybe<BigIntFilter>;
  readonly createdBlock: InputMaybe<BigIntFilter>;
  readonly deploymentId: InputMaybe<BigIntFilter>;
  readonly id: InputMaybe<BigIntFilter>;
  readonly indexerId: InputMaybe<BigIntFilter>;
  readonly lastEvent: InputMaybe<BigIntFilter>;
  readonly status: InputMaybe<BigIntFilter>;
  readonly timestamp: InputMaybe<BigIntFilter>;
};

export type IndexerDeploymentDistinctCountAggregates = {
  readonly __typename: 'IndexerDeploymentDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  readonly _blockRange: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  readonly _id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of deploymentId across the matching connection */
  readonly deploymentId: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  readonly id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of indexerId across the matching connection */
  readonly indexerId: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of lastEvent across the matching connection */
  readonly lastEvent: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of status across the matching connection */
  readonly status: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of timestamp across the matching connection */
  readonly timestamp: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `IndexerDeployment` object types. All fields are combined with a logical ‘and.’ */
export type IndexerDeploymentFilter = {
  /** Checks for all expressions in this list. */
  readonly and: InputMaybe<ReadonlyArray<IndexerDeploymentFilter>>;
  /** Filter by the object’s `createdBlock` field. */
  readonly createdBlock: InputMaybe<IntFilter>;
  /** Filter by the object’s `deployment` relation. */
  readonly deployment: InputMaybe<DeploymentFilter>;
  /** Filter by the object’s `deploymentId` field. */
  readonly deploymentId: InputMaybe<StringFilter>;
  /** Filter by the object’s `id` field. */
  readonly id: InputMaybe<StringFilter>;
  /** Filter by the object’s `indexer` relation. */
  readonly indexer: InputMaybe<IndexerFilter>;
  /** Filter by the object’s `indexerId` field. */
  readonly indexerId: InputMaybe<StringFilter>;
  /** Filter by the object’s `lastEvent` field. */
  readonly lastEvent: InputMaybe<StringFilter>;
  /** Negates the expression. */
  readonly not: InputMaybe<IndexerDeploymentFilter>;
  /** Checks for any expressions in this list. */
  readonly or: InputMaybe<ReadonlyArray<IndexerDeploymentFilter>>;
  /** Filter by the object’s `status` field. */
  readonly status: InputMaybe<ServiceStatusFilter>;
  /** Filter by the object’s `timestamp` field. */
  readonly timestamp: InputMaybe<DatetimeFilter>;
};

export type IndexerDeploymentMaxAggregateFilter = {
  readonly createdBlock: InputMaybe<IntFilter>;
};

export type IndexerDeploymentMaxAggregates = {
  readonly __typename: 'IndexerDeploymentMaxAggregates';
  /** Maximum of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['Int']['output']>;
};

export type IndexerDeploymentMinAggregateFilter = {
  readonly createdBlock: InputMaybe<IntFilter>;
};

export type IndexerDeploymentMinAggregates = {
  readonly __typename: 'IndexerDeploymentMinAggregates';
  /** Minimum of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['Int']['output']>;
};

export type IndexerDeploymentStddevPopulationAggregateFilter = {
  readonly createdBlock: InputMaybe<BigFloatFilter>;
};

export type IndexerDeploymentStddevPopulationAggregates = {
  readonly __typename: 'IndexerDeploymentStddevPopulationAggregates';
  /** Population standard deviation of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerDeploymentStddevSampleAggregateFilter = {
  readonly createdBlock: InputMaybe<BigFloatFilter>;
};

export type IndexerDeploymentStddevSampleAggregates = {
  readonly __typename: 'IndexerDeploymentStddevSampleAggregates';
  /** Sample standard deviation of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerDeploymentSumAggregateFilter = {
  readonly createdBlock: InputMaybe<BigIntFilter>;
};

export type IndexerDeploymentSumAggregates = {
  readonly __typename: 'IndexerDeploymentSumAggregates';
  /** Sum of createdBlock across the matching connection */
  readonly createdBlock: Scalars['BigInt']['output'];
};

export type IndexerDeploymentVariancePopulationAggregateFilter = {
  readonly createdBlock: InputMaybe<BigFloatFilter>;
};

export type IndexerDeploymentVariancePopulationAggregates = {
  readonly __typename: 'IndexerDeploymentVariancePopulationAggregates';
  /** Population variance of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerDeploymentVarianceSampleAggregateFilter = {
  readonly createdBlock: InputMaybe<BigFloatFilter>;
};

export type IndexerDeploymentVarianceSampleAggregates = {
  readonly __typename: 'IndexerDeploymentVarianceSampleAggregates';
  /** Sample variance of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `Deployment` values, with data from `EraIndexerDeploymentApy`. */
export type IndexerDeploymentsByEraIndexerDeploymentApyIndexerIdAndDeploymentIdManyToManyConnection = {
  readonly __typename: 'IndexerDeploymentsByEraIndexerDeploymentApyIndexerIdAndDeploymentIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<DeploymentAggregates>;
  /** A list of edges which contains the `Deployment`, info from the `EraIndexerDeploymentApy`, and the cursor to aid in pagination. */
  readonly edges: ReadonlyArray<IndexerDeploymentsByEraIndexerDeploymentApyIndexerIdAndDeploymentIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<DeploymentAggregates>>;
  /** A list of `Deployment` objects. */
  readonly nodes: ReadonlyArray<Maybe<Deployment>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Deployment` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Deployment` values, with data from `EraIndexerDeploymentApy`. */
export type IndexerDeploymentsByEraIndexerDeploymentApyIndexerIdAndDeploymentIdManyToManyConnectionGroupedAggregatesArgs =
  {
    groupBy: ReadonlyArray<DeploymentsGroupBy>;
    having: InputMaybe<DeploymentsHavingInput>;
  };

/** A `Deployment` edge in the connection, with data from `EraIndexerDeploymentApy`. */
export type IndexerDeploymentsByEraIndexerDeploymentApyIndexerIdAndDeploymentIdManyToManyEdge = {
  readonly __typename: 'IndexerDeploymentsByEraIndexerDeploymentApyIndexerIdAndDeploymentIdManyToManyEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `EraIndexerDeploymentApy`. */
  readonly eraIndexerDeploymentApies: EraIndexerDeploymentApiesConnection;
  /** The `Deployment` at the end of the edge. */
  readonly node: Maybe<Deployment>;
};

/** A `Deployment` edge in the connection, with data from `EraIndexerDeploymentApy`. */
export type IndexerDeploymentsByEraIndexerDeploymentApyIndexerIdAndDeploymentIdManyToManyEdgeEraIndexerDeploymentApiesArgs =
  {
    after: InputMaybe<Scalars['Cursor']['input']>;
    before: InputMaybe<Scalars['Cursor']['input']>;
    blockHeight?: InputMaybe<Scalars['String']['input']>;
    distinct?: InputMaybe<ReadonlyArray<InputMaybe<Era_Indexer_Deployment_Apies_Distinct_Enum>>>;
    filter: InputMaybe<EraIndexerDeploymentApyFilter>;
    first: InputMaybe<Scalars['Int']['input']>;
    last: InputMaybe<Scalars['Int']['input']>;
    offset: InputMaybe<Scalars['Int']['input']>;
    orderBy: InputMaybe<ReadonlyArray<EraIndexerDeploymentApiesOrderBy>>;
    orderByNull: InputMaybe<NullOrder>;
  };

/** A connection to a list of `Deployment` values, with data from `IndexerAllocation`. */
export type IndexerDeploymentsByIndexerAllocationIndexerIdAndDeploymentIdManyToManyConnection = {
  readonly __typename: 'IndexerDeploymentsByIndexerAllocationIndexerIdAndDeploymentIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<DeploymentAggregates>;
  /** A list of edges which contains the `Deployment`, info from the `IndexerAllocation`, and the cursor to aid in pagination. */
  readonly edges: ReadonlyArray<IndexerDeploymentsByIndexerAllocationIndexerIdAndDeploymentIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<DeploymentAggregates>>;
  /** A list of `Deployment` objects. */
  readonly nodes: ReadonlyArray<Maybe<Deployment>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Deployment` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Deployment` values, with data from `IndexerAllocation`. */
export type IndexerDeploymentsByIndexerAllocationIndexerIdAndDeploymentIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<DeploymentsGroupBy>;
  having: InputMaybe<DeploymentsHavingInput>;
};

/** A `Deployment` edge in the connection, with data from `IndexerAllocation`. */
export type IndexerDeploymentsByIndexerAllocationIndexerIdAndDeploymentIdManyToManyEdge = {
  readonly __typename: 'IndexerDeploymentsByIndexerAllocationIndexerIdAndDeploymentIdManyToManyEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `IndexerAllocation`. */
  readonly indexerAllocations: IndexerAllocationsConnection;
  /** The `Deployment` at the end of the edge. */
  readonly node: Maybe<Deployment>;
};

/** A `Deployment` edge in the connection, with data from `IndexerAllocation`. */
export type IndexerDeploymentsByIndexerAllocationIndexerIdAndDeploymentIdManyToManyEdgeIndexerAllocationsArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Allocations_Distinct_Enum>>>;
  filter: InputMaybe<IndexerAllocationFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexerAllocationsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** A connection to a list of `Deployment` values, with data from `IndexerAllocationReward`. */
export type IndexerDeploymentsByIndexerAllocationRewardIndexerIdAndDeploymentIdManyToManyConnection = {
  readonly __typename: 'IndexerDeploymentsByIndexerAllocationRewardIndexerIdAndDeploymentIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<DeploymentAggregates>;
  /** A list of edges which contains the `Deployment`, info from the `IndexerAllocationReward`, and the cursor to aid in pagination. */
  readonly edges: ReadonlyArray<IndexerDeploymentsByIndexerAllocationRewardIndexerIdAndDeploymentIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<DeploymentAggregates>>;
  /** A list of `Deployment` objects. */
  readonly nodes: ReadonlyArray<Maybe<Deployment>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Deployment` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Deployment` values, with data from `IndexerAllocationReward`. */
export type IndexerDeploymentsByIndexerAllocationRewardIndexerIdAndDeploymentIdManyToManyConnectionGroupedAggregatesArgs =
  {
    groupBy: ReadonlyArray<DeploymentsGroupBy>;
    having: InputMaybe<DeploymentsHavingInput>;
  };

/** A `Deployment` edge in the connection, with data from `IndexerAllocationReward`. */
export type IndexerDeploymentsByIndexerAllocationRewardIndexerIdAndDeploymentIdManyToManyEdge = {
  readonly __typename: 'IndexerDeploymentsByIndexerAllocationRewardIndexerIdAndDeploymentIdManyToManyEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `IndexerAllocationReward`. */
  readonly indexerAllocationRewards: IndexerAllocationRewardsConnection;
  /** The `Deployment` at the end of the edge. */
  readonly node: Maybe<Deployment>;
};

/** A `Deployment` edge in the connection, with data from `IndexerAllocationReward`. */
export type IndexerDeploymentsByIndexerAllocationRewardIndexerIdAndDeploymentIdManyToManyEdgeIndexerAllocationRewardsArgs =
  {
    after: InputMaybe<Scalars['Cursor']['input']>;
    before: InputMaybe<Scalars['Cursor']['input']>;
    blockHeight?: InputMaybe<Scalars['String']['input']>;
    distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Allocation_Rewards_Distinct_Enum>>>;
    filter: InputMaybe<IndexerAllocationRewardFilter>;
    first: InputMaybe<Scalars['Int']['input']>;
    last: InputMaybe<Scalars['Int']['input']>;
    offset: InputMaybe<Scalars['Int']['input']>;
    orderBy: InputMaybe<ReadonlyArray<IndexerAllocationRewardsOrderBy>>;
    orderByNull: InputMaybe<NullOrder>;
  };

/** A connection to a list of `Deployment` values, with data from `IndexerAllocationRewardSummary`. */
export type IndexerDeploymentsByIndexerAllocationRewardSummaryIndexerIdAndDeploymentIdManyToManyConnection = {
  readonly __typename: 'IndexerDeploymentsByIndexerAllocationRewardSummaryIndexerIdAndDeploymentIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<DeploymentAggregates>;
  /** A list of edges which contains the `Deployment`, info from the `IndexerAllocationRewardSummary`, and the cursor to aid in pagination. */
  readonly edges: ReadonlyArray<IndexerDeploymentsByIndexerAllocationRewardSummaryIndexerIdAndDeploymentIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<DeploymentAggregates>>;
  /** A list of `Deployment` objects. */
  readonly nodes: ReadonlyArray<Maybe<Deployment>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Deployment` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Deployment` values, with data from `IndexerAllocationRewardSummary`. */
export type IndexerDeploymentsByIndexerAllocationRewardSummaryIndexerIdAndDeploymentIdManyToManyConnectionGroupedAggregatesArgs =
  {
    groupBy: ReadonlyArray<DeploymentsGroupBy>;
    having: InputMaybe<DeploymentsHavingInput>;
  };

/** A `Deployment` edge in the connection, with data from `IndexerAllocationRewardSummary`. */
export type IndexerDeploymentsByIndexerAllocationRewardSummaryIndexerIdAndDeploymentIdManyToManyEdge = {
  readonly __typename: 'IndexerDeploymentsByIndexerAllocationRewardSummaryIndexerIdAndDeploymentIdManyToManyEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `IndexerAllocationRewardSummary`. */
  readonly indexerAllocationRewardSummaries: IndexerAllocationRewardSummariesConnection;
  /** The `Deployment` at the end of the edge. */
  readonly node: Maybe<Deployment>;
};

/** A `Deployment` edge in the connection, with data from `IndexerAllocationRewardSummary`. */
export type IndexerDeploymentsByIndexerAllocationRewardSummaryIndexerIdAndDeploymentIdManyToManyEdgeIndexerAllocationRewardSummariesArgs =
  {
    after: InputMaybe<Scalars['Cursor']['input']>;
    before: InputMaybe<Scalars['Cursor']['input']>;
    blockHeight?: InputMaybe<Scalars['String']['input']>;
    distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Allocation_Reward_Summaries_Distinct_Enum>>>;
    filter: InputMaybe<IndexerAllocationRewardSummaryFilter>;
    first: InputMaybe<Scalars['Int']['input']>;
    last: InputMaybe<Scalars['Int']['input']>;
    offset: InputMaybe<Scalars['Int']['input']>;
    orderBy: InputMaybe<ReadonlyArray<IndexerAllocationRewardSummariesOrderBy>>;
    orderByNull: InputMaybe<NullOrder>;
  };

/** A connection to a list of `Deployment` values, with data from `IndexerAllocationSummary`. */
export type IndexerDeploymentsByIndexerAllocationSummaryIndexerIdAndDeploymentIdManyToManyConnection = {
  readonly __typename: 'IndexerDeploymentsByIndexerAllocationSummaryIndexerIdAndDeploymentIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<DeploymentAggregates>;
  /** A list of edges which contains the `Deployment`, info from the `IndexerAllocationSummary`, and the cursor to aid in pagination. */
  readonly edges: ReadonlyArray<IndexerDeploymentsByIndexerAllocationSummaryIndexerIdAndDeploymentIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<DeploymentAggregates>>;
  /** A list of `Deployment` objects. */
  readonly nodes: ReadonlyArray<Maybe<Deployment>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Deployment` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Deployment` values, with data from `IndexerAllocationSummary`. */
export type IndexerDeploymentsByIndexerAllocationSummaryIndexerIdAndDeploymentIdManyToManyConnectionGroupedAggregatesArgs =
  {
    groupBy: ReadonlyArray<DeploymentsGroupBy>;
    having: InputMaybe<DeploymentsHavingInput>;
  };

/** A `Deployment` edge in the connection, with data from `IndexerAllocationSummary`. */
export type IndexerDeploymentsByIndexerAllocationSummaryIndexerIdAndDeploymentIdManyToManyEdge = {
  readonly __typename: 'IndexerDeploymentsByIndexerAllocationSummaryIndexerIdAndDeploymentIdManyToManyEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `IndexerAllocationSummary`. */
  readonly indexerAllocationSummaries: IndexerAllocationSummariesConnection;
  /** The `Deployment` at the end of the edge. */
  readonly node: Maybe<Deployment>;
};

/** A `Deployment` edge in the connection, with data from `IndexerAllocationSummary`. */
export type IndexerDeploymentsByIndexerAllocationSummaryIndexerIdAndDeploymentIdManyToManyEdgeIndexerAllocationSummariesArgs =
  {
    after: InputMaybe<Scalars['Cursor']['input']>;
    before: InputMaybe<Scalars['Cursor']['input']>;
    blockHeight?: InputMaybe<Scalars['String']['input']>;
    distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Allocation_Summaries_Distinct_Enum>>>;
    filter: InputMaybe<IndexerAllocationSummaryFilter>;
    first: InputMaybe<Scalars['Int']['input']>;
    last: InputMaybe<Scalars['Int']['input']>;
    offset: InputMaybe<Scalars['Int']['input']>;
    orderBy: InputMaybe<ReadonlyArray<IndexerAllocationSummariesOrderBy>>;
    orderByNull: InputMaybe<NullOrder>;
  };

/** A connection to a list of `Deployment` values, with data from `IndexerDeployment`. */
export type IndexerDeploymentsByIndexerDeploymentIndexerIdAndDeploymentIdManyToManyConnection = {
  readonly __typename: 'IndexerDeploymentsByIndexerDeploymentIndexerIdAndDeploymentIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<DeploymentAggregates>;
  /** A list of edges which contains the `Deployment`, info from the `IndexerDeployment`, and the cursor to aid in pagination. */
  readonly edges: ReadonlyArray<IndexerDeploymentsByIndexerDeploymentIndexerIdAndDeploymentIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<DeploymentAggregates>>;
  /** A list of `Deployment` objects. */
  readonly nodes: ReadonlyArray<Maybe<Deployment>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Deployment` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Deployment` values, with data from `IndexerDeployment`. */
export type IndexerDeploymentsByIndexerDeploymentIndexerIdAndDeploymentIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<DeploymentsGroupBy>;
  having: InputMaybe<DeploymentsHavingInput>;
};

/** A `Deployment` edge in the connection, with data from `IndexerDeployment`. */
export type IndexerDeploymentsByIndexerDeploymentIndexerIdAndDeploymentIdManyToManyEdge = {
  readonly __typename: 'IndexerDeploymentsByIndexerDeploymentIndexerIdAndDeploymentIdManyToManyEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `IndexerDeployment`. */
  readonly indexers: IndexerDeploymentsConnection;
  /** The `Deployment` at the end of the edge. */
  readonly node: Maybe<Deployment>;
};

/** A `Deployment` edge in the connection, with data from `IndexerDeployment`. */
export type IndexerDeploymentsByIndexerDeploymentIndexerIdAndDeploymentIdManyToManyEdgeIndexersArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Deployments_Distinct_Enum>>>;
  filter: InputMaybe<IndexerDeploymentFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexerDeploymentsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** A connection to a list of `Deployment` values, with data from `IndexerMissedLabor`. */
export type IndexerDeploymentsByIndexerMissedLaborIndexerIdAndDeploymentIdManyToManyConnection = {
  readonly __typename: 'IndexerDeploymentsByIndexerMissedLaborIndexerIdAndDeploymentIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<DeploymentAggregates>;
  /** A list of edges which contains the `Deployment`, info from the `IndexerMissedLabor`, and the cursor to aid in pagination. */
  readonly edges: ReadonlyArray<IndexerDeploymentsByIndexerMissedLaborIndexerIdAndDeploymentIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<DeploymentAggregates>>;
  /** A list of `Deployment` objects. */
  readonly nodes: ReadonlyArray<Maybe<Deployment>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Deployment` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Deployment` values, with data from `IndexerMissedLabor`. */
export type IndexerDeploymentsByIndexerMissedLaborIndexerIdAndDeploymentIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<DeploymentsGroupBy>;
  having: InputMaybe<DeploymentsHavingInput>;
};

/** A `Deployment` edge in the connection, with data from `IndexerMissedLabor`. */
export type IndexerDeploymentsByIndexerMissedLaborIndexerIdAndDeploymentIdManyToManyEdge = {
  readonly __typename: 'IndexerDeploymentsByIndexerMissedLaborIndexerIdAndDeploymentIdManyToManyEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `IndexerMissedLabor`. */
  readonly indexerMissedLabors: IndexerMissedLaborsConnection;
  /** The `Deployment` at the end of the edge. */
  readonly node: Maybe<Deployment>;
};

/** A `Deployment` edge in the connection, with data from `IndexerMissedLabor`. */
export type IndexerDeploymentsByIndexerMissedLaborIndexerIdAndDeploymentIdManyToManyEdgeIndexerMissedLaborsArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Missed_Labors_Distinct_Enum>>>;
  filter: InputMaybe<IndexerMissedLaborFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexerMissedLaborsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** A connection to a list of `IndexerDeployment` values. */
export type IndexerDeploymentsConnection = {
  readonly __typename: 'IndexerDeploymentsConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<IndexerDeploymentAggregates>;
  /** A list of edges which contains the `IndexerDeployment` and cursor to aid in pagination. */
  readonly edges: ReadonlyArray<IndexerDeploymentsEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<IndexerDeploymentAggregates>>;
  /** A list of `IndexerDeployment` objects. */
  readonly nodes: ReadonlyArray<Maybe<IndexerDeployment>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `IndexerDeployment` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `IndexerDeployment` values. */
export type IndexerDeploymentsConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<IndexerDeploymentsGroupBy>;
  having: InputMaybe<IndexerDeploymentsHavingInput>;
};

/** A `IndexerDeployment` edge in the connection. */
export type IndexerDeploymentsEdge = {
  readonly __typename: 'IndexerDeploymentsEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `IndexerDeployment` at the end of the edge. */
  readonly node: Maybe<IndexerDeployment>;
};

/** Grouping methods for `IndexerDeployment` for usage during aggregation. */
export enum IndexerDeploymentsGroupBy {
  CREATED_BLOCK = 'CREATED_BLOCK',
  DEPLOYMENT_ID = 'DEPLOYMENT_ID',
  ID = 'ID',
  INDEXER_ID = 'INDEXER_ID',
  LAST_EVENT = 'LAST_EVENT',
  STATUS = 'STATUS',
  TIMESTAMP = 'TIMESTAMP',
  TIMESTAMP_TRUNCATED_TO_DAY = 'TIMESTAMP_TRUNCATED_TO_DAY',
  TIMESTAMP_TRUNCATED_TO_HOUR = 'TIMESTAMP_TRUNCATED_TO_HOUR',
}

export type IndexerDeploymentsHavingAverageInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly timestamp: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerDeploymentsHavingDistinctCountInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly timestamp: InputMaybe<HavingDatetimeFilter>;
};

/** Conditions for `IndexerDeployment` aggregates. */
export type IndexerDeploymentsHavingInput = {
  readonly AND: InputMaybe<ReadonlyArray<IndexerDeploymentsHavingInput>>;
  readonly OR: InputMaybe<ReadonlyArray<IndexerDeploymentsHavingInput>>;
  readonly average: InputMaybe<IndexerDeploymentsHavingAverageInput>;
  readonly distinctCount: InputMaybe<IndexerDeploymentsHavingDistinctCountInput>;
  readonly max: InputMaybe<IndexerDeploymentsHavingMaxInput>;
  readonly min: InputMaybe<IndexerDeploymentsHavingMinInput>;
  readonly stddevPopulation: InputMaybe<IndexerDeploymentsHavingStddevPopulationInput>;
  readonly stddevSample: InputMaybe<IndexerDeploymentsHavingStddevSampleInput>;
  readonly sum: InputMaybe<IndexerDeploymentsHavingSumInput>;
  readonly variancePopulation: InputMaybe<IndexerDeploymentsHavingVariancePopulationInput>;
  readonly varianceSample: InputMaybe<IndexerDeploymentsHavingVarianceSampleInput>;
};

export type IndexerDeploymentsHavingMaxInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly timestamp: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerDeploymentsHavingMinInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly timestamp: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerDeploymentsHavingStddevPopulationInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly timestamp: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerDeploymentsHavingStddevSampleInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly timestamp: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerDeploymentsHavingSumInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly timestamp: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerDeploymentsHavingVariancePopulationInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly timestamp: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerDeploymentsHavingVarianceSampleInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly timestamp: InputMaybe<HavingDatetimeFilter>;
};

/** Methods to use when ordering `IndexerDeployment`. */
export enum IndexerDeploymentsOrderBy {
  CREATED_BLOCK_ASC = 'CREATED_BLOCK_ASC',
  CREATED_BLOCK_DESC = 'CREATED_BLOCK_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__ID_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__ID_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__ID_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__ID_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_DESC',
  DEPLOYMENT_ID_ASC = 'DEPLOYMENT_ID_ASC',
  DEPLOYMENT_ID_DESC = 'DEPLOYMENT_ID_DESC',
  ID_ASC = 'ID_ASC',
  ID_DESC = 'ID_DESC',
  INDEXER_BY_INDEXER_ID__ACTIVE_ASC = 'INDEXER_BY_INDEXER_ID__ACTIVE_ASC',
  INDEXER_BY_INDEXER_ID__ACTIVE_DESC = 'INDEXER_BY_INDEXER_ID__ACTIVE_DESC',
  INDEXER_BY_INDEXER_ID__CAPACITY_ASC = 'INDEXER_BY_INDEXER_ID__CAPACITY_ASC',
  INDEXER_BY_INDEXER_ID__CAPACITY_DESC = 'INDEXER_BY_INDEXER_ID__CAPACITY_DESC',
  INDEXER_BY_INDEXER_ID__COMMISSION_ASC = 'INDEXER_BY_INDEXER_ID__COMMISSION_ASC',
  INDEXER_BY_INDEXER_ID__COMMISSION_DESC = 'INDEXER_BY_INDEXER_ID__COMMISSION_DESC',
  INDEXER_BY_INDEXER_ID__CONTROLLER_ASC = 'INDEXER_BY_INDEXER_ID__CONTROLLER_ASC',
  INDEXER_BY_INDEXER_ID__CONTROLLER_DESC = 'INDEXER_BY_INDEXER_ID__CONTROLLER_DESC',
  INDEXER_BY_INDEXER_ID__CREATED_BLOCK_ASC = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_ASC',
  INDEXER_BY_INDEXER_ID__CREATED_BLOCK_DESC = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_DESC',
  INDEXER_BY_INDEXER_ID__ID_ASC = 'INDEXER_BY_INDEXER_ID__ID_ASC',
  INDEXER_BY_INDEXER_ID__ID_DESC = 'INDEXER_BY_INDEXER_ID__ID_DESC',
  INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_ASC = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_ASC',
  INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_DESC = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_DESC',
  INDEXER_BY_INDEXER_ID__LAST_EVENT_ASC = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_ASC',
  INDEXER_BY_INDEXER_ID__LAST_EVENT_DESC = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_DESC',
  INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_ASC = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_ASC',
  INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_DESC = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_DESC',
  INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_ASC = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_ASC',
  INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_DESC = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_DESC',
  INDEXER_BY_INDEXER_ID__METADATA_ASC = 'INDEXER_BY_INDEXER_ID__METADATA_ASC',
  INDEXER_BY_INDEXER_ID__METADATA_DESC = 'INDEXER_BY_INDEXER_ID__METADATA_DESC',
  INDEXER_BY_INDEXER_ID__SELF_STAKE_ASC = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_ASC',
  INDEXER_BY_INDEXER_ID__SELF_STAKE_DESC = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_DESC',
  INDEXER_BY_INDEXER_ID__TOTAL_STAKE_ASC = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_ASC',
  INDEXER_BY_INDEXER_ID__TOTAL_STAKE_DESC = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_DESC',
  INDEXER_ID_ASC = 'INDEXER_ID_ASC',
  INDEXER_ID_DESC = 'INDEXER_ID_DESC',
  LAST_EVENT_ASC = 'LAST_EVENT_ASC',
  LAST_EVENT_DESC = 'LAST_EVENT_DESC',
  NATURAL = 'NATURAL',
  PRIMARY_KEY_ASC = 'PRIMARY_KEY_ASC',
  PRIMARY_KEY_DESC = 'PRIMARY_KEY_DESC',
  STATUS_ASC = 'STATUS_ASC',
  STATUS_DESC = 'STATUS_DESC',
  TIMESTAMP_ASC = 'TIMESTAMP_ASC',
  TIMESTAMP_DESC = 'TIMESTAMP_DESC',
}

export type IndexerDistinctCountAggregates = {
  readonly __typename: 'IndexerDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  readonly _blockRange: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  readonly _id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of active across the matching connection */
  readonly active: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of capacity across the matching connection */
  readonly capacity: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of commission across the matching connection */
  readonly commission: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of controller across the matching connection */
  readonly controller: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  readonly id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of lastClaimEra across the matching connection */
  readonly lastClaimEra: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of lastEvent across the matching connection */
  readonly lastEvent: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of lastSettledEra across the matching connection */
  readonly lastSettledEra: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of maxUnstakeAmount across the matching connection */
  readonly maxUnstakeAmount: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of metadata across the matching connection */
  readonly metadata: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of selfStake across the matching connection */
  readonly selfStake: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of totalStake across the matching connection */
  readonly totalStake: Maybe<Scalars['BigInt']['output']>;
};

export type IndexerEraDeploymentReward = Node & {
  readonly __typename: 'IndexerEraDeploymentReward';
  readonly agreementRewards: Scalars['BigFloat']['output'];
  readonly allocationRewards: Scalars['BigFloat']['output'];
  readonly changesHeight: Maybe<Scalars['String']['output']>;
  readonly deploymentId: Scalars['String']['output'];
  readonly eraIdx: Scalars['Int']['output'];
  readonly id: Scalars['String']['output'];
  /** Reads a single `Indexer` that is related to this `IndexerEraDeploymentReward`. */
  readonly indexer: Maybe<Indexer>;
  readonly indexerId: Scalars['String']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  readonly nodeId: Scalars['ID']['output'];
  readonly queryRewards: Scalars['BigFloat']['output'];
  readonly stateChannelRewards: Scalars['BigFloat']['output'];
  readonly totalRewards: Scalars['BigFloat']['output'];
};

export type IndexerEraDeploymentRewardAggregates = {
  readonly __typename: 'IndexerEraDeploymentRewardAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly average: Maybe<IndexerEraDeploymentRewardAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly distinctCount: Maybe<IndexerEraDeploymentRewardDistinctCountAggregates>;
  readonly keys: Maybe<ReadonlyArray<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly max: Maybe<IndexerEraDeploymentRewardMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly min: Maybe<IndexerEraDeploymentRewardMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevPopulation: Maybe<IndexerEraDeploymentRewardStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevSample: Maybe<IndexerEraDeploymentRewardStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly sum: Maybe<IndexerEraDeploymentRewardSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly variancePopulation: Maybe<IndexerEraDeploymentRewardVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly varianceSample: Maybe<IndexerEraDeploymentRewardVarianceSampleAggregates>;
};

/** A filter to be used against aggregates of `IndexerEraDeploymentReward` object types. */
export type IndexerEraDeploymentRewardAggregatesFilter = {
  /** Mean average aggregate over matching `IndexerEraDeploymentReward` objects. */
  readonly average: InputMaybe<IndexerEraDeploymentRewardAverageAggregateFilter>;
  /** Distinct count aggregate over matching `IndexerEraDeploymentReward` objects. */
  readonly distinctCount: InputMaybe<IndexerEraDeploymentRewardDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `IndexerEraDeploymentReward` object to be included within the aggregate. */
  readonly filter: InputMaybe<IndexerEraDeploymentRewardFilter>;
  /** Maximum aggregate over matching `IndexerEraDeploymentReward` objects. */
  readonly max: InputMaybe<IndexerEraDeploymentRewardMaxAggregateFilter>;
  /** Minimum aggregate over matching `IndexerEraDeploymentReward` objects. */
  readonly min: InputMaybe<IndexerEraDeploymentRewardMinAggregateFilter>;
  /** Population standard deviation aggregate over matching `IndexerEraDeploymentReward` objects. */
  readonly stddevPopulation: InputMaybe<IndexerEraDeploymentRewardStddevPopulationAggregateFilter>;
  /** Sample standard deviation aggregate over matching `IndexerEraDeploymentReward` objects. */
  readonly stddevSample: InputMaybe<IndexerEraDeploymentRewardStddevSampleAggregateFilter>;
  /** Sum aggregate over matching `IndexerEraDeploymentReward` objects. */
  readonly sum: InputMaybe<IndexerEraDeploymentRewardSumAggregateFilter>;
  /** Population variance aggregate over matching `IndexerEraDeploymentReward` objects. */
  readonly variancePopulation: InputMaybe<IndexerEraDeploymentRewardVariancePopulationAggregateFilter>;
  /** Sample variance aggregate over matching `IndexerEraDeploymentReward` objects. */
  readonly varianceSample: InputMaybe<IndexerEraDeploymentRewardVarianceSampleAggregateFilter>;
};

export type IndexerEraDeploymentRewardAverageAggregateFilter = {
  readonly agreementRewards: InputMaybe<BigFloatFilter>;
  readonly allocationRewards: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigFloatFilter>;
  readonly queryRewards: InputMaybe<BigFloatFilter>;
  readonly stateChannelRewards: InputMaybe<BigFloatFilter>;
  readonly totalRewards: InputMaybe<BigFloatFilter>;
};

export type IndexerEraDeploymentRewardAverageAggregates = {
  readonly __typename: 'IndexerEraDeploymentRewardAverageAggregates';
  /** Mean average of agreementRewards across the matching connection */
  readonly agreementRewards: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of allocationRewards across the matching connection */
  readonly allocationRewards: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of queryRewards across the matching connection */
  readonly queryRewards: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of stateChannelRewards across the matching connection */
  readonly stateChannelRewards: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of totalRewards across the matching connection */
  readonly totalRewards: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerEraDeploymentRewardDistinctCountAggregateFilter = {
  readonly _blockRange: InputMaybe<BigIntFilter>;
  readonly _id: InputMaybe<BigIntFilter>;
  readonly agreementRewards: InputMaybe<BigIntFilter>;
  readonly allocationRewards: InputMaybe<BigIntFilter>;
  readonly changesHeight: InputMaybe<BigIntFilter>;
  readonly deploymentId: InputMaybe<BigIntFilter>;
  readonly eraIdx: InputMaybe<BigIntFilter>;
  readonly id: InputMaybe<BigIntFilter>;
  readonly indexerId: InputMaybe<BigIntFilter>;
  readonly queryRewards: InputMaybe<BigIntFilter>;
  readonly stateChannelRewards: InputMaybe<BigIntFilter>;
  readonly totalRewards: InputMaybe<BigIntFilter>;
};

export type IndexerEraDeploymentRewardDistinctCountAggregates = {
  readonly __typename: 'IndexerEraDeploymentRewardDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  readonly _blockRange: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  readonly _id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of agreementRewards across the matching connection */
  readonly agreementRewards: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of allocationRewards across the matching connection */
  readonly allocationRewards: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of changesHeight across the matching connection */
  readonly changesHeight: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of deploymentId across the matching connection */
  readonly deploymentId: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  readonly id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of indexerId across the matching connection */
  readonly indexerId: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of queryRewards across the matching connection */
  readonly queryRewards: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of stateChannelRewards across the matching connection */
  readonly stateChannelRewards: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of totalRewards across the matching connection */
  readonly totalRewards: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `IndexerEraDeploymentReward` object types. All fields are combined with a logical ‘and.’ */
export type IndexerEraDeploymentRewardFilter = {
  /** Filter by the object’s `agreementRewards` field. */
  readonly agreementRewards: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `allocationRewards` field. */
  readonly allocationRewards: InputMaybe<BigFloatFilter>;
  /** Checks for all expressions in this list. */
  readonly and: InputMaybe<ReadonlyArray<IndexerEraDeploymentRewardFilter>>;
  /** Filter by the object’s `changesHeight` field. */
  readonly changesHeight: InputMaybe<StringFilter>;
  /** Filter by the object’s `deploymentId` field. */
  readonly deploymentId: InputMaybe<StringFilter>;
  /** Filter by the object’s `eraIdx` field. */
  readonly eraIdx: InputMaybe<IntFilter>;
  /** Filter by the object’s `id` field. */
  readonly id: InputMaybe<StringFilter>;
  /** Filter by the object’s `indexer` relation. */
  readonly indexer: InputMaybe<IndexerFilter>;
  /** Filter by the object’s `indexerId` field. */
  readonly indexerId: InputMaybe<StringFilter>;
  /** Negates the expression. */
  readonly not: InputMaybe<IndexerEraDeploymentRewardFilter>;
  /** Checks for any expressions in this list. */
  readonly or: InputMaybe<ReadonlyArray<IndexerEraDeploymentRewardFilter>>;
  /** Filter by the object’s `queryRewards` field. */
  readonly queryRewards: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `stateChannelRewards` field. */
  readonly stateChannelRewards: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `totalRewards` field. */
  readonly totalRewards: InputMaybe<BigFloatFilter>;
};

export type IndexerEraDeploymentRewardMaxAggregateFilter = {
  readonly agreementRewards: InputMaybe<BigFloatFilter>;
  readonly allocationRewards: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<IntFilter>;
  readonly queryRewards: InputMaybe<BigFloatFilter>;
  readonly stateChannelRewards: InputMaybe<BigFloatFilter>;
  readonly totalRewards: InputMaybe<BigFloatFilter>;
};

export type IndexerEraDeploymentRewardMaxAggregates = {
  readonly __typename: 'IndexerEraDeploymentRewardMaxAggregates';
  /** Maximum of agreementRewards across the matching connection */
  readonly agreementRewards: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of allocationRewards across the matching connection */
  readonly allocationRewards: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['Int']['output']>;
  /** Maximum of queryRewards across the matching connection */
  readonly queryRewards: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of stateChannelRewards across the matching connection */
  readonly stateChannelRewards: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of totalRewards across the matching connection */
  readonly totalRewards: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerEraDeploymentRewardMinAggregateFilter = {
  readonly agreementRewards: InputMaybe<BigFloatFilter>;
  readonly allocationRewards: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<IntFilter>;
  readonly queryRewards: InputMaybe<BigFloatFilter>;
  readonly stateChannelRewards: InputMaybe<BigFloatFilter>;
  readonly totalRewards: InputMaybe<BigFloatFilter>;
};

export type IndexerEraDeploymentRewardMinAggregates = {
  readonly __typename: 'IndexerEraDeploymentRewardMinAggregates';
  /** Minimum of agreementRewards across the matching connection */
  readonly agreementRewards: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of allocationRewards across the matching connection */
  readonly allocationRewards: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['Int']['output']>;
  /** Minimum of queryRewards across the matching connection */
  readonly queryRewards: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of stateChannelRewards across the matching connection */
  readonly stateChannelRewards: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of totalRewards across the matching connection */
  readonly totalRewards: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerEraDeploymentRewardStddevPopulationAggregateFilter = {
  readonly agreementRewards: InputMaybe<BigFloatFilter>;
  readonly allocationRewards: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigFloatFilter>;
  readonly queryRewards: InputMaybe<BigFloatFilter>;
  readonly stateChannelRewards: InputMaybe<BigFloatFilter>;
  readonly totalRewards: InputMaybe<BigFloatFilter>;
};

export type IndexerEraDeploymentRewardStddevPopulationAggregates = {
  readonly __typename: 'IndexerEraDeploymentRewardStddevPopulationAggregates';
  /** Population standard deviation of agreementRewards across the matching connection */
  readonly agreementRewards: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of allocationRewards across the matching connection */
  readonly allocationRewards: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of queryRewards across the matching connection */
  readonly queryRewards: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of stateChannelRewards across the matching connection */
  readonly stateChannelRewards: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of totalRewards across the matching connection */
  readonly totalRewards: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerEraDeploymentRewardStddevSampleAggregateFilter = {
  readonly agreementRewards: InputMaybe<BigFloatFilter>;
  readonly allocationRewards: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigFloatFilter>;
  readonly queryRewards: InputMaybe<BigFloatFilter>;
  readonly stateChannelRewards: InputMaybe<BigFloatFilter>;
  readonly totalRewards: InputMaybe<BigFloatFilter>;
};

export type IndexerEraDeploymentRewardStddevSampleAggregates = {
  readonly __typename: 'IndexerEraDeploymentRewardStddevSampleAggregates';
  /** Sample standard deviation of agreementRewards across the matching connection */
  readonly agreementRewards: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of allocationRewards across the matching connection */
  readonly allocationRewards: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of queryRewards across the matching connection */
  readonly queryRewards: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of stateChannelRewards across the matching connection */
  readonly stateChannelRewards: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of totalRewards across the matching connection */
  readonly totalRewards: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerEraDeploymentRewardSumAggregateFilter = {
  readonly agreementRewards: InputMaybe<BigFloatFilter>;
  readonly allocationRewards: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigIntFilter>;
  readonly queryRewards: InputMaybe<BigFloatFilter>;
  readonly stateChannelRewards: InputMaybe<BigFloatFilter>;
  readonly totalRewards: InputMaybe<BigFloatFilter>;
};

export type IndexerEraDeploymentRewardSumAggregates = {
  readonly __typename: 'IndexerEraDeploymentRewardSumAggregates';
  /** Sum of agreementRewards across the matching connection */
  readonly agreementRewards: Scalars['BigFloat']['output'];
  /** Sum of allocationRewards across the matching connection */
  readonly allocationRewards: Scalars['BigFloat']['output'];
  /** Sum of eraIdx across the matching connection */
  readonly eraIdx: Scalars['BigInt']['output'];
  /** Sum of queryRewards across the matching connection */
  readonly queryRewards: Scalars['BigFloat']['output'];
  /** Sum of stateChannelRewards across the matching connection */
  readonly stateChannelRewards: Scalars['BigFloat']['output'];
  /** Sum of totalRewards across the matching connection */
  readonly totalRewards: Scalars['BigFloat']['output'];
};

export type IndexerEraDeploymentRewardVariancePopulationAggregateFilter = {
  readonly agreementRewards: InputMaybe<BigFloatFilter>;
  readonly allocationRewards: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigFloatFilter>;
  readonly queryRewards: InputMaybe<BigFloatFilter>;
  readonly stateChannelRewards: InputMaybe<BigFloatFilter>;
  readonly totalRewards: InputMaybe<BigFloatFilter>;
};

export type IndexerEraDeploymentRewardVariancePopulationAggregates = {
  readonly __typename: 'IndexerEraDeploymentRewardVariancePopulationAggregates';
  /** Population variance of agreementRewards across the matching connection */
  readonly agreementRewards: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of allocationRewards across the matching connection */
  readonly allocationRewards: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of queryRewards across the matching connection */
  readonly queryRewards: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of stateChannelRewards across the matching connection */
  readonly stateChannelRewards: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of totalRewards across the matching connection */
  readonly totalRewards: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerEraDeploymentRewardVarianceSampleAggregateFilter = {
  readonly agreementRewards: InputMaybe<BigFloatFilter>;
  readonly allocationRewards: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigFloatFilter>;
  readonly queryRewards: InputMaybe<BigFloatFilter>;
  readonly stateChannelRewards: InputMaybe<BigFloatFilter>;
  readonly totalRewards: InputMaybe<BigFloatFilter>;
};

export type IndexerEraDeploymentRewardVarianceSampleAggregates = {
  readonly __typename: 'IndexerEraDeploymentRewardVarianceSampleAggregates';
  /** Sample variance of agreementRewards across the matching connection */
  readonly agreementRewards: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of allocationRewards across the matching connection */
  readonly allocationRewards: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of queryRewards across the matching connection */
  readonly queryRewards: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of stateChannelRewards across the matching connection */
  readonly stateChannelRewards: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of totalRewards across the matching connection */
  readonly totalRewards: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `IndexerEraDeploymentReward` values. */
export type IndexerEraDeploymentRewardsConnection = {
  readonly __typename: 'IndexerEraDeploymentRewardsConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<IndexerEraDeploymentRewardAggregates>;
  /** A list of edges which contains the `IndexerEraDeploymentReward` and cursor to aid in pagination. */
  readonly edges: ReadonlyArray<IndexerEraDeploymentRewardsEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<IndexerEraDeploymentRewardAggregates>>;
  /** A list of `IndexerEraDeploymentReward` objects. */
  readonly nodes: ReadonlyArray<Maybe<IndexerEraDeploymentReward>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `IndexerEraDeploymentReward` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `IndexerEraDeploymentReward` values. */
export type IndexerEraDeploymentRewardsConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<IndexerEraDeploymentRewardsGroupBy>;
  having: InputMaybe<IndexerEraDeploymentRewardsHavingInput>;
};

/** A `IndexerEraDeploymentReward` edge in the connection. */
export type IndexerEraDeploymentRewardsEdge = {
  readonly __typename: 'IndexerEraDeploymentRewardsEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `IndexerEraDeploymentReward` at the end of the edge. */
  readonly node: Maybe<IndexerEraDeploymentReward>;
};

/** Grouping methods for `IndexerEraDeploymentReward` for usage during aggregation. */
export enum IndexerEraDeploymentRewardsGroupBy {
  AGREEMENT_REWARDS = 'AGREEMENT_REWARDS',
  ALLOCATION_REWARDS = 'ALLOCATION_REWARDS',
  CHANGES_HEIGHT = 'CHANGES_HEIGHT',
  DEPLOYMENT_ID = 'DEPLOYMENT_ID',
  ERA_IDX = 'ERA_IDX',
  ID = 'ID',
  INDEXER_ID = 'INDEXER_ID',
  QUERY_REWARDS = 'QUERY_REWARDS',
  STATE_CHANNEL_REWARDS = 'STATE_CHANNEL_REWARDS',
  TOTAL_REWARDS = 'TOTAL_REWARDS',
}

export type IndexerEraDeploymentRewardsHavingAverageInput = {
  readonly agreementRewards: InputMaybe<HavingBigfloatFilter>;
  readonly allocationRewards: InputMaybe<HavingBigfloatFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly queryRewards: InputMaybe<HavingBigfloatFilter>;
  readonly stateChannelRewards: InputMaybe<HavingBigfloatFilter>;
  readonly totalRewards: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerEraDeploymentRewardsHavingDistinctCountInput = {
  readonly agreementRewards: InputMaybe<HavingBigfloatFilter>;
  readonly allocationRewards: InputMaybe<HavingBigfloatFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly queryRewards: InputMaybe<HavingBigfloatFilter>;
  readonly stateChannelRewards: InputMaybe<HavingBigfloatFilter>;
  readonly totalRewards: InputMaybe<HavingBigfloatFilter>;
};

/** Conditions for `IndexerEraDeploymentReward` aggregates. */
export type IndexerEraDeploymentRewardsHavingInput = {
  readonly AND: InputMaybe<ReadonlyArray<IndexerEraDeploymentRewardsHavingInput>>;
  readonly OR: InputMaybe<ReadonlyArray<IndexerEraDeploymentRewardsHavingInput>>;
  readonly average: InputMaybe<IndexerEraDeploymentRewardsHavingAverageInput>;
  readonly distinctCount: InputMaybe<IndexerEraDeploymentRewardsHavingDistinctCountInput>;
  readonly max: InputMaybe<IndexerEraDeploymentRewardsHavingMaxInput>;
  readonly min: InputMaybe<IndexerEraDeploymentRewardsHavingMinInput>;
  readonly stddevPopulation: InputMaybe<IndexerEraDeploymentRewardsHavingStddevPopulationInput>;
  readonly stddevSample: InputMaybe<IndexerEraDeploymentRewardsHavingStddevSampleInput>;
  readonly sum: InputMaybe<IndexerEraDeploymentRewardsHavingSumInput>;
  readonly variancePopulation: InputMaybe<IndexerEraDeploymentRewardsHavingVariancePopulationInput>;
  readonly varianceSample: InputMaybe<IndexerEraDeploymentRewardsHavingVarianceSampleInput>;
};

export type IndexerEraDeploymentRewardsHavingMaxInput = {
  readonly agreementRewards: InputMaybe<HavingBigfloatFilter>;
  readonly allocationRewards: InputMaybe<HavingBigfloatFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly queryRewards: InputMaybe<HavingBigfloatFilter>;
  readonly stateChannelRewards: InputMaybe<HavingBigfloatFilter>;
  readonly totalRewards: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerEraDeploymentRewardsHavingMinInput = {
  readonly agreementRewards: InputMaybe<HavingBigfloatFilter>;
  readonly allocationRewards: InputMaybe<HavingBigfloatFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly queryRewards: InputMaybe<HavingBigfloatFilter>;
  readonly stateChannelRewards: InputMaybe<HavingBigfloatFilter>;
  readonly totalRewards: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerEraDeploymentRewardsHavingStddevPopulationInput = {
  readonly agreementRewards: InputMaybe<HavingBigfloatFilter>;
  readonly allocationRewards: InputMaybe<HavingBigfloatFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly queryRewards: InputMaybe<HavingBigfloatFilter>;
  readonly stateChannelRewards: InputMaybe<HavingBigfloatFilter>;
  readonly totalRewards: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerEraDeploymentRewardsHavingStddevSampleInput = {
  readonly agreementRewards: InputMaybe<HavingBigfloatFilter>;
  readonly allocationRewards: InputMaybe<HavingBigfloatFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly queryRewards: InputMaybe<HavingBigfloatFilter>;
  readonly stateChannelRewards: InputMaybe<HavingBigfloatFilter>;
  readonly totalRewards: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerEraDeploymentRewardsHavingSumInput = {
  readonly agreementRewards: InputMaybe<HavingBigfloatFilter>;
  readonly allocationRewards: InputMaybe<HavingBigfloatFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly queryRewards: InputMaybe<HavingBigfloatFilter>;
  readonly stateChannelRewards: InputMaybe<HavingBigfloatFilter>;
  readonly totalRewards: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerEraDeploymentRewardsHavingVariancePopulationInput = {
  readonly agreementRewards: InputMaybe<HavingBigfloatFilter>;
  readonly allocationRewards: InputMaybe<HavingBigfloatFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly queryRewards: InputMaybe<HavingBigfloatFilter>;
  readonly stateChannelRewards: InputMaybe<HavingBigfloatFilter>;
  readonly totalRewards: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerEraDeploymentRewardsHavingVarianceSampleInput = {
  readonly agreementRewards: InputMaybe<HavingBigfloatFilter>;
  readonly allocationRewards: InputMaybe<HavingBigfloatFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly queryRewards: InputMaybe<HavingBigfloatFilter>;
  readonly stateChannelRewards: InputMaybe<HavingBigfloatFilter>;
  readonly totalRewards: InputMaybe<HavingBigfloatFilter>;
};

/** Methods to use when ordering `IndexerEraDeploymentReward`. */
export enum IndexerEraDeploymentRewardsOrderBy {
  AGREEMENT_REWARDS_ASC = 'AGREEMENT_REWARDS_ASC',
  AGREEMENT_REWARDS_DESC = 'AGREEMENT_REWARDS_DESC',
  ALLOCATION_REWARDS_ASC = 'ALLOCATION_REWARDS_ASC',
  ALLOCATION_REWARDS_DESC = 'ALLOCATION_REWARDS_DESC',
  CHANGES_HEIGHT_ASC = 'CHANGES_HEIGHT_ASC',
  CHANGES_HEIGHT_DESC = 'CHANGES_HEIGHT_DESC',
  DEPLOYMENT_ID_ASC = 'DEPLOYMENT_ID_ASC',
  DEPLOYMENT_ID_DESC = 'DEPLOYMENT_ID_DESC',
  ERA_IDX_ASC = 'ERA_IDX_ASC',
  ERA_IDX_DESC = 'ERA_IDX_DESC',
  ID_ASC = 'ID_ASC',
  ID_DESC = 'ID_DESC',
  INDEXER_BY_INDEXER_ID__ACTIVE_ASC = 'INDEXER_BY_INDEXER_ID__ACTIVE_ASC',
  INDEXER_BY_INDEXER_ID__ACTIVE_DESC = 'INDEXER_BY_INDEXER_ID__ACTIVE_DESC',
  INDEXER_BY_INDEXER_ID__CAPACITY_ASC = 'INDEXER_BY_INDEXER_ID__CAPACITY_ASC',
  INDEXER_BY_INDEXER_ID__CAPACITY_DESC = 'INDEXER_BY_INDEXER_ID__CAPACITY_DESC',
  INDEXER_BY_INDEXER_ID__COMMISSION_ASC = 'INDEXER_BY_INDEXER_ID__COMMISSION_ASC',
  INDEXER_BY_INDEXER_ID__COMMISSION_DESC = 'INDEXER_BY_INDEXER_ID__COMMISSION_DESC',
  INDEXER_BY_INDEXER_ID__CONTROLLER_ASC = 'INDEXER_BY_INDEXER_ID__CONTROLLER_ASC',
  INDEXER_BY_INDEXER_ID__CONTROLLER_DESC = 'INDEXER_BY_INDEXER_ID__CONTROLLER_DESC',
  INDEXER_BY_INDEXER_ID__CREATED_BLOCK_ASC = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_ASC',
  INDEXER_BY_INDEXER_ID__CREATED_BLOCK_DESC = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_DESC',
  INDEXER_BY_INDEXER_ID__ID_ASC = 'INDEXER_BY_INDEXER_ID__ID_ASC',
  INDEXER_BY_INDEXER_ID__ID_DESC = 'INDEXER_BY_INDEXER_ID__ID_DESC',
  INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_ASC = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_ASC',
  INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_DESC = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_DESC',
  INDEXER_BY_INDEXER_ID__LAST_EVENT_ASC = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_ASC',
  INDEXER_BY_INDEXER_ID__LAST_EVENT_DESC = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_DESC',
  INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_ASC = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_ASC',
  INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_DESC = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_DESC',
  INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_ASC = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_ASC',
  INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_DESC = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_DESC',
  INDEXER_BY_INDEXER_ID__METADATA_ASC = 'INDEXER_BY_INDEXER_ID__METADATA_ASC',
  INDEXER_BY_INDEXER_ID__METADATA_DESC = 'INDEXER_BY_INDEXER_ID__METADATA_DESC',
  INDEXER_BY_INDEXER_ID__SELF_STAKE_ASC = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_ASC',
  INDEXER_BY_INDEXER_ID__SELF_STAKE_DESC = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_DESC',
  INDEXER_BY_INDEXER_ID__TOTAL_STAKE_ASC = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_ASC',
  INDEXER_BY_INDEXER_ID__TOTAL_STAKE_DESC = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_DESC',
  INDEXER_ID_ASC = 'INDEXER_ID_ASC',
  INDEXER_ID_DESC = 'INDEXER_ID_DESC',
  NATURAL = 'NATURAL',
  PRIMARY_KEY_ASC = 'PRIMARY_KEY_ASC',
  PRIMARY_KEY_DESC = 'PRIMARY_KEY_DESC',
  QUERY_REWARDS_ASC = 'QUERY_REWARDS_ASC',
  QUERY_REWARDS_DESC = 'QUERY_REWARDS_DESC',
  STATE_CHANNEL_REWARDS_ASC = 'STATE_CHANNEL_REWARDS_ASC',
  STATE_CHANNEL_REWARDS_DESC = 'STATE_CHANNEL_REWARDS_DESC',
  TOTAL_REWARDS_ASC = 'TOTAL_REWARDS_ASC',
  TOTAL_REWARDS_DESC = 'TOTAL_REWARDS_DESC',
}

/** A connection to a list of `Era` values, with data from `EraReward`. */
export type IndexerErasByEraRewardIndexerIdAndEraIdManyToManyConnection = {
  readonly __typename: 'IndexerErasByEraRewardIndexerIdAndEraIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<EraAggregates>;
  /** A list of edges which contains the `Era`, info from the `EraReward`, and the cursor to aid in pagination. */
  readonly edges: ReadonlyArray<IndexerErasByEraRewardIndexerIdAndEraIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<EraAggregates>>;
  /** A list of `Era` objects. */
  readonly nodes: ReadonlyArray<Maybe<Era>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Era` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Era` values, with data from `EraReward`. */
export type IndexerErasByEraRewardIndexerIdAndEraIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<ErasGroupBy>;
  having: InputMaybe<ErasHavingInput>;
};

/** A `Era` edge in the connection, with data from `EraReward`. */
export type IndexerErasByEraRewardIndexerIdAndEraIdManyToManyEdge = {
  readonly __typename: 'IndexerErasByEraRewardIndexerIdAndEraIdManyToManyEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `EraReward`. */
  readonly eraRewards: EraRewardsConnection;
  /** The `Era` at the end of the edge. */
  readonly node: Maybe<Era>;
};

/** A `Era` edge in the connection, with data from `EraReward`. */
export type IndexerErasByEraRewardIndexerIdAndEraIdManyToManyEdgeEraRewardsArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Era_Rewards_Distinct_Enum>>>;
  filter: InputMaybe<EraRewardFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<EraRewardsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** A connection to a list of `Era` values, with data from `EraStake`. */
export type IndexerErasByEraStakeIndexerIdAndEraIdManyToManyConnection = {
  readonly __typename: 'IndexerErasByEraStakeIndexerIdAndEraIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<EraAggregates>;
  /** A list of edges which contains the `Era`, info from the `EraStake`, and the cursor to aid in pagination. */
  readonly edges: ReadonlyArray<IndexerErasByEraStakeIndexerIdAndEraIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<EraAggregates>>;
  /** A list of `Era` objects. */
  readonly nodes: ReadonlyArray<Maybe<Era>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Era` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Era` values, with data from `EraStake`. */
export type IndexerErasByEraStakeIndexerIdAndEraIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<ErasGroupBy>;
  having: InputMaybe<ErasHavingInput>;
};

/** A `Era` edge in the connection, with data from `EraStake`. */
export type IndexerErasByEraStakeIndexerIdAndEraIdManyToManyEdge = {
  readonly __typename: 'IndexerErasByEraStakeIndexerIdAndEraIdManyToManyEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `EraStake`. */
  readonly eraStakes: EraStakesConnection;
  /** The `Era` at the end of the edge. */
  readonly node: Maybe<Era>;
};

/** A `Era` edge in the connection, with data from `EraStake`. */
export type IndexerErasByEraStakeIndexerIdAndEraIdManyToManyEdgeEraStakesArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Era_Stakes_Distinct_Enum>>>;
  filter: InputMaybe<EraStakeFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<EraStakesOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** A connection to a list of `Era` values, with data from `IndexerCommissionRate`. */
export type IndexerErasByIndexerCommissionRateIndexerIdAndEraIdManyToManyConnection = {
  readonly __typename: 'IndexerErasByIndexerCommissionRateIndexerIdAndEraIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<EraAggregates>;
  /** A list of edges which contains the `Era`, info from the `IndexerCommissionRate`, and the cursor to aid in pagination. */
  readonly edges: ReadonlyArray<IndexerErasByIndexerCommissionRateIndexerIdAndEraIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<EraAggregates>>;
  /** A list of `Era` objects. */
  readonly nodes: ReadonlyArray<Maybe<Era>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Era` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Era` values, with data from `IndexerCommissionRate`. */
export type IndexerErasByIndexerCommissionRateIndexerIdAndEraIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<ErasGroupBy>;
  having: InputMaybe<ErasHavingInput>;
};

/** A `Era` edge in the connection, with data from `IndexerCommissionRate`. */
export type IndexerErasByIndexerCommissionRateIndexerIdAndEraIdManyToManyEdge = {
  readonly __typename: 'IndexerErasByIndexerCommissionRateIndexerIdAndEraIdManyToManyEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `IndexerCommissionRate`. */
  readonly indexerCommissionRates: IndexerCommissionRatesConnection;
  /** The `Era` at the end of the edge. */
  readonly node: Maybe<Era>;
};

/** A `Era` edge in the connection, with data from `IndexerCommissionRate`. */
export type IndexerErasByIndexerCommissionRateIndexerIdAndEraIdManyToManyEdgeIndexerCommissionRatesArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Commission_Rates_Distinct_Enum>>>;
  filter: InputMaybe<IndexerCommissionRateFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexerCommissionRatesOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** A connection to a list of `Era` values, with data from `IndexerStake`. */
export type IndexerErasByIndexerStakeIndexerIdAndEraIdManyToManyConnection = {
  readonly __typename: 'IndexerErasByIndexerStakeIndexerIdAndEraIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<EraAggregates>;
  /** A list of edges which contains the `Era`, info from the `IndexerStake`, and the cursor to aid in pagination. */
  readonly edges: ReadonlyArray<IndexerErasByIndexerStakeIndexerIdAndEraIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<EraAggregates>>;
  /** A list of `Era` objects. */
  readonly nodes: ReadonlyArray<Maybe<Era>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Era` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Era` values, with data from `IndexerStake`. */
export type IndexerErasByIndexerStakeIndexerIdAndEraIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<ErasGroupBy>;
  having: InputMaybe<ErasHavingInput>;
};

/** A `Era` edge in the connection, with data from `IndexerStake`. */
export type IndexerErasByIndexerStakeIndexerIdAndEraIdManyToManyEdge = {
  readonly __typename: 'IndexerErasByIndexerStakeIndexerIdAndEraIdManyToManyEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `IndexerStake`. */
  readonly indexerStakes: IndexerStakesConnection;
  /** The `Era` at the end of the edge. */
  readonly node: Maybe<Era>;
};

/** A `Era` edge in the connection, with data from `IndexerStake`. */
export type IndexerErasByIndexerStakeIndexerIdAndEraIdManyToManyEdgeIndexerStakesArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Stakes_Distinct_Enum>>>;
  filter: InputMaybe<IndexerStakeFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexerStakesOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** A filter to be used against `Indexer` object types. All fields are combined with a logical ‘and.’ */
export type IndexerFilter = {
  /** Filter by the object’s `acceptedOffers` relation. */
  readonly acceptedOffers: InputMaybe<IndexerToManyAcceptedOfferFilter>;
  /** Some related `acceptedOffers` exist. */
  readonly acceptedOffersExist: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `active` field. */
  readonly active: InputMaybe<BooleanFilter>;
  /** Checks for all expressions in this list. */
  readonly and: InputMaybe<ReadonlyArray<IndexerFilter>>;
  /** Filter by the object’s `capacity` field. */
  readonly capacity: InputMaybe<JsonFilter>;
  /** Filter by the object’s `commission` field. */
  readonly commission: InputMaybe<JsonFilter>;
  /** Filter by the object’s `controller` field. */
  readonly controller: InputMaybe<StringFilter>;
  /** Filter by the object’s `controllers` relation. */
  readonly controllers: InputMaybe<IndexerToManyControllerFilter>;
  /** Some related `controllers` exist. */
  readonly controllersExist: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `createdBlock` field. */
  readonly createdBlock: InputMaybe<IntFilter>;
  /** Filter by the object’s `delegations` relation. */
  readonly delegations: InputMaybe<IndexerToManyDelegationFilter>;
  /** Some related `delegations` exist. */
  readonly delegationsExist: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `eraDelegatorIndexerApies` relation. */
  readonly eraDelegatorIndexerApies: InputMaybe<IndexerToManyEraDelegatorIndexerApyFilter>;
  /** Some related `eraDelegatorIndexerApies` exist. */
  readonly eraDelegatorIndexerApiesExist: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `eraIndexerApies` relation. */
  readonly eraIndexerApies: InputMaybe<IndexerToManyEraIndexerApyFilter>;
  /** Some related `eraIndexerApies` exist. */
  readonly eraIndexerApiesExist: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `eraIndexerDeploymentApies` relation. */
  readonly eraIndexerDeploymentApies: InputMaybe<IndexerToManyEraIndexerDeploymentApyFilter>;
  /** Some related `eraIndexerDeploymentApies` exist. */
  readonly eraIndexerDeploymentApiesExist: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `eraRewards` relation. */
  readonly eraRewards: InputMaybe<IndexerToManyEraRewardFilter>;
  /** Some related `eraRewards` exist. */
  readonly eraRewardsExist: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `eraStakes` relation. */
  readonly eraStakes: InputMaybe<IndexerToManyEraStakeFilter>;
  /** Some related `eraStakes` exist. */
  readonly eraStakesExist: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `id` field. */
  readonly id: InputMaybe<StringFilter>;
  /** Filter by the object’s `indexerAllocationOverflows` relation. */
  readonly indexerAllocationOverflows: InputMaybe<IndexerToManyIndexerAllocationOverflowFilter>;
  /** Some related `indexerAllocationOverflows` exist. */
  readonly indexerAllocationOverflowsExist: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `indexerAllocationRewardSummaries` relation. */
  readonly indexerAllocationRewardSummaries: InputMaybe<IndexerToManyIndexerAllocationRewardSummaryFilter>;
  /** Some related `indexerAllocationRewardSummaries` exist. */
  readonly indexerAllocationRewardSummariesExist: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `indexerAllocationRewards` relation. */
  readonly indexerAllocationRewards: InputMaybe<IndexerToManyIndexerAllocationRewardFilter>;
  /** Some related `indexerAllocationRewards` exist. */
  readonly indexerAllocationRewardsExist: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `indexerAllocationSummaries` relation. */
  readonly indexerAllocationSummaries: InputMaybe<IndexerToManyIndexerAllocationSummaryFilter>;
  /** Some related `indexerAllocationSummaries` exist. */
  readonly indexerAllocationSummariesExist: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `indexerAllocations` relation. */
  readonly indexerAllocations: InputMaybe<IndexerToManyIndexerAllocationFilter>;
  /** Some related `indexerAllocations` exist. */
  readonly indexerAllocationsExist: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `indexerApySummaries` relation. */
  readonly indexerApySummaries: InputMaybe<IndexerToManyIndexerApySummaryFilter>;
  /** Some related `indexerApySummaries` exist. */
  readonly indexerApySummariesExist: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `indexerCommissionRates` relation. */
  readonly indexerCommissionRates: InputMaybe<IndexerToManyIndexerCommissionRateFilter>;
  /** Some related `indexerCommissionRates` exist. */
  readonly indexerCommissionRatesExist: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `indexerEraDeploymentRewards` relation. */
  readonly indexerEraDeploymentRewards: InputMaybe<IndexerToManyIndexerEraDeploymentRewardFilter>;
  /** Some related `indexerEraDeploymentRewards` exist. */
  readonly indexerEraDeploymentRewardsExist: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `indexerLaborHistories` relation. */
  readonly indexerLaborHistories: InputMaybe<IndexerToManyIndexerLaborHistoryFilter>;
  /** Some related `indexerLaborHistories` exist. */
  readonly indexerLaborHistoriesExist: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `indexerMissedLabors` relation. */
  readonly indexerMissedLabors: InputMaybe<IndexerToManyIndexerMissedLaborFilter>;
  /** Some related `indexerMissedLabors` exist. */
  readonly indexerMissedLaborsExist: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `indexerStakeWeights` relation. */
  readonly indexerStakeWeights: InputMaybe<IndexerToManyIndexerStakeWeightFilter>;
  /** Some related `indexerStakeWeights` exist. */
  readonly indexerStakeWeightsExist: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `indexerStakes` relation. */
  readonly indexerStakes: InputMaybe<IndexerToManyIndexerStakeFilter>;
  /** Some related `indexerStakes` exist. */
  readonly indexerStakesExist: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `lastClaimEra` field. */
  readonly lastClaimEra: InputMaybe<StringFilter>;
  /** Filter by the object’s `lastEvent` field. */
  readonly lastEvent: InputMaybe<StringFilter>;
  /** Filter by the object’s `lastSettledEra` field. */
  readonly lastSettledEra: InputMaybe<StringFilter>;
  /** Filter by the object’s `maxUnstakeAmount` field. */
  readonly maxUnstakeAmount: InputMaybe<JsonFilter>;
  /** Filter by the object’s `metadata` field. */
  readonly metadata: InputMaybe<StringFilter>;
  /** Negates the expression. */
  readonly not: InputMaybe<IndexerFilter>;
  /** Checks for any expressions in this list. */
  readonly or: InputMaybe<ReadonlyArray<IndexerFilter>>;
  /** Filter by the object’s `projects` relation. */
  readonly projects: InputMaybe<IndexerToManyIndexerDeploymentFilter>;
  /** Some related `projects` exist. */
  readonly projectsExist: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `rewards` relation. */
  readonly rewards: InputMaybe<IndexerToManyIndexerRewardFilter>;
  /** Some related `rewards` exist. */
  readonly rewardsExist: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `selfStake` field. */
  readonly selfStake: InputMaybe<JsonFilter>;
  /** Filter by the object’s `totalStake` field. */
  readonly totalStake: InputMaybe<JsonFilter>;
};

/** A connection to a list of `IndexerLaborHistory` values. */
export type IndexerLaborHistoriesConnection = {
  readonly __typename: 'IndexerLaborHistoriesConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<IndexerLaborHistoryAggregates>;
  /** A list of edges which contains the `IndexerLaborHistory` and cursor to aid in pagination. */
  readonly edges: ReadonlyArray<IndexerLaborHistoriesEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<IndexerLaborHistoryAggregates>>;
  /** A list of `IndexerLaborHistory` objects. */
  readonly nodes: ReadonlyArray<Maybe<IndexerLaborHistory>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `IndexerLaborHistory` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `IndexerLaborHistory` values. */
export type IndexerLaborHistoriesConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<IndexerLaborHistoriesGroupBy>;
  having: InputMaybe<IndexerLaborHistoriesHavingInput>;
};

/** A `IndexerLaborHistory` edge in the connection. */
export type IndexerLaborHistoriesEdge = {
  readonly __typename: 'IndexerLaborHistoriesEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `IndexerLaborHistory` at the end of the edge. */
  readonly node: Maybe<IndexerLaborHistory>;
};

/** Grouping methods for `IndexerLaborHistory` for usage during aggregation. */
export enum IndexerLaborHistoriesGroupBy {
  AMOUNT = 'AMOUNT',
  CREATE_AT = 'CREATE_AT',
  CREATE_AT_TRUNCATED_TO_DAY = 'CREATE_AT_TRUNCATED_TO_DAY',
  CREATE_AT_TRUNCATED_TO_HOUR = 'CREATE_AT_TRUNCATED_TO_HOUR',
  DEPLOYMENT_ID = 'DEPLOYMENT_ID',
  ERA_IDX = 'ERA_IDX',
  ID = 'ID',
  INDEXER_ID = 'INDEXER_ID',
}

export type IndexerLaborHistoriesHavingAverageInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
};

export type IndexerLaborHistoriesHavingDistinctCountInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
};

/** Conditions for `IndexerLaborHistory` aggregates. */
export type IndexerLaborHistoriesHavingInput = {
  readonly AND: InputMaybe<ReadonlyArray<IndexerLaborHistoriesHavingInput>>;
  readonly OR: InputMaybe<ReadonlyArray<IndexerLaborHistoriesHavingInput>>;
  readonly average: InputMaybe<IndexerLaborHistoriesHavingAverageInput>;
  readonly distinctCount: InputMaybe<IndexerLaborHistoriesHavingDistinctCountInput>;
  readonly max: InputMaybe<IndexerLaborHistoriesHavingMaxInput>;
  readonly min: InputMaybe<IndexerLaborHistoriesHavingMinInput>;
  readonly stddevPopulation: InputMaybe<IndexerLaborHistoriesHavingStddevPopulationInput>;
  readonly stddevSample: InputMaybe<IndexerLaborHistoriesHavingStddevSampleInput>;
  readonly sum: InputMaybe<IndexerLaborHistoriesHavingSumInput>;
  readonly variancePopulation: InputMaybe<IndexerLaborHistoriesHavingVariancePopulationInput>;
  readonly varianceSample: InputMaybe<IndexerLaborHistoriesHavingVarianceSampleInput>;
};

export type IndexerLaborHistoriesHavingMaxInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
};

export type IndexerLaborHistoriesHavingMinInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
};

export type IndexerLaborHistoriesHavingStddevPopulationInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
};

export type IndexerLaborHistoriesHavingStddevSampleInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
};

export type IndexerLaborHistoriesHavingSumInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
};

export type IndexerLaborHistoriesHavingVariancePopulationInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
};

export type IndexerLaborHistoriesHavingVarianceSampleInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
};

/** Methods to use when ordering `IndexerLaborHistory`. */
export enum IndexerLaborHistoriesOrderBy {
  AMOUNT_ASC = 'AMOUNT_ASC',
  AMOUNT_DESC = 'AMOUNT_DESC',
  CREATE_AT_ASC = 'CREATE_AT_ASC',
  CREATE_AT_DESC = 'CREATE_AT_DESC',
  DEPLOYMENT_ID_ASC = 'DEPLOYMENT_ID_ASC',
  DEPLOYMENT_ID_DESC = 'DEPLOYMENT_ID_DESC',
  ERA_IDX_ASC = 'ERA_IDX_ASC',
  ERA_IDX_DESC = 'ERA_IDX_DESC',
  ID_ASC = 'ID_ASC',
  ID_DESC = 'ID_DESC',
  INDEXER_BY_INDEXER_ID__ACTIVE_ASC = 'INDEXER_BY_INDEXER_ID__ACTIVE_ASC',
  INDEXER_BY_INDEXER_ID__ACTIVE_DESC = 'INDEXER_BY_INDEXER_ID__ACTIVE_DESC',
  INDEXER_BY_INDEXER_ID__CAPACITY_ASC = 'INDEXER_BY_INDEXER_ID__CAPACITY_ASC',
  INDEXER_BY_INDEXER_ID__CAPACITY_DESC = 'INDEXER_BY_INDEXER_ID__CAPACITY_DESC',
  INDEXER_BY_INDEXER_ID__COMMISSION_ASC = 'INDEXER_BY_INDEXER_ID__COMMISSION_ASC',
  INDEXER_BY_INDEXER_ID__COMMISSION_DESC = 'INDEXER_BY_INDEXER_ID__COMMISSION_DESC',
  INDEXER_BY_INDEXER_ID__CONTROLLER_ASC = 'INDEXER_BY_INDEXER_ID__CONTROLLER_ASC',
  INDEXER_BY_INDEXER_ID__CONTROLLER_DESC = 'INDEXER_BY_INDEXER_ID__CONTROLLER_DESC',
  INDEXER_BY_INDEXER_ID__CREATED_BLOCK_ASC = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_ASC',
  INDEXER_BY_INDEXER_ID__CREATED_BLOCK_DESC = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_DESC',
  INDEXER_BY_INDEXER_ID__ID_ASC = 'INDEXER_BY_INDEXER_ID__ID_ASC',
  INDEXER_BY_INDEXER_ID__ID_DESC = 'INDEXER_BY_INDEXER_ID__ID_DESC',
  INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_ASC = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_ASC',
  INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_DESC = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_DESC',
  INDEXER_BY_INDEXER_ID__LAST_EVENT_ASC = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_ASC',
  INDEXER_BY_INDEXER_ID__LAST_EVENT_DESC = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_DESC',
  INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_ASC = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_ASC',
  INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_DESC = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_DESC',
  INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_ASC = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_ASC',
  INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_DESC = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_DESC',
  INDEXER_BY_INDEXER_ID__METADATA_ASC = 'INDEXER_BY_INDEXER_ID__METADATA_ASC',
  INDEXER_BY_INDEXER_ID__METADATA_DESC = 'INDEXER_BY_INDEXER_ID__METADATA_DESC',
  INDEXER_BY_INDEXER_ID__SELF_STAKE_ASC = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_ASC',
  INDEXER_BY_INDEXER_ID__SELF_STAKE_DESC = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_DESC',
  INDEXER_BY_INDEXER_ID__TOTAL_STAKE_ASC = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_ASC',
  INDEXER_BY_INDEXER_ID__TOTAL_STAKE_DESC = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_DESC',
  INDEXER_ID_ASC = 'INDEXER_ID_ASC',
  INDEXER_ID_DESC = 'INDEXER_ID_DESC',
  NATURAL = 'NATURAL',
  PRIMARY_KEY_ASC = 'PRIMARY_KEY_ASC',
  PRIMARY_KEY_DESC = 'PRIMARY_KEY_DESC',
}

export type IndexerLaborHistory = Node & {
  readonly __typename: 'IndexerLaborHistory';
  readonly amount: Scalars['BigFloat']['output'];
  readonly createAt: Scalars['Datetime']['output'];
  readonly deploymentId: Scalars['String']['output'];
  readonly eraIdx: Scalars['Int']['output'];
  readonly id: Scalars['String']['output'];
  /** Reads a single `Indexer` that is related to this `IndexerLaborHistory`. */
  readonly indexer: Maybe<Indexer>;
  readonly indexerId: Scalars['String']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  readonly nodeId: Scalars['ID']['output'];
};

export type IndexerLaborHistoryAggregates = {
  readonly __typename: 'IndexerLaborHistoryAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly average: Maybe<IndexerLaborHistoryAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly distinctCount: Maybe<IndexerLaborHistoryDistinctCountAggregates>;
  readonly keys: Maybe<ReadonlyArray<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly max: Maybe<IndexerLaborHistoryMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly min: Maybe<IndexerLaborHistoryMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevPopulation: Maybe<IndexerLaborHistoryStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevSample: Maybe<IndexerLaborHistoryStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly sum: Maybe<IndexerLaborHistorySumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly variancePopulation: Maybe<IndexerLaborHistoryVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly varianceSample: Maybe<IndexerLaborHistoryVarianceSampleAggregates>;
};

/** A filter to be used against aggregates of `IndexerLaborHistory` object types. */
export type IndexerLaborHistoryAggregatesFilter = {
  /** Mean average aggregate over matching `IndexerLaborHistory` objects. */
  readonly average: InputMaybe<IndexerLaborHistoryAverageAggregateFilter>;
  /** Distinct count aggregate over matching `IndexerLaborHistory` objects. */
  readonly distinctCount: InputMaybe<IndexerLaborHistoryDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `IndexerLaborHistory` object to be included within the aggregate. */
  readonly filter: InputMaybe<IndexerLaborHistoryFilter>;
  /** Maximum aggregate over matching `IndexerLaborHistory` objects. */
  readonly max: InputMaybe<IndexerLaborHistoryMaxAggregateFilter>;
  /** Minimum aggregate over matching `IndexerLaborHistory` objects. */
  readonly min: InputMaybe<IndexerLaborHistoryMinAggregateFilter>;
  /** Population standard deviation aggregate over matching `IndexerLaborHistory` objects. */
  readonly stddevPopulation: InputMaybe<IndexerLaborHistoryStddevPopulationAggregateFilter>;
  /** Sample standard deviation aggregate over matching `IndexerLaborHistory` objects. */
  readonly stddevSample: InputMaybe<IndexerLaborHistoryStddevSampleAggregateFilter>;
  /** Sum aggregate over matching `IndexerLaborHistory` objects. */
  readonly sum: InputMaybe<IndexerLaborHistorySumAggregateFilter>;
  /** Population variance aggregate over matching `IndexerLaborHistory` objects. */
  readonly variancePopulation: InputMaybe<IndexerLaborHistoryVariancePopulationAggregateFilter>;
  /** Sample variance aggregate over matching `IndexerLaborHistory` objects. */
  readonly varianceSample: InputMaybe<IndexerLaborHistoryVarianceSampleAggregateFilter>;
};

export type IndexerLaborHistoryAverageAggregateFilter = {
  readonly amount: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigFloatFilter>;
};

export type IndexerLaborHistoryAverageAggregates = {
  readonly __typename: 'IndexerLaborHistoryAverageAggregates';
  /** Mean average of amount across the matching connection */
  readonly amount: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerLaborHistoryDistinctCountAggregateFilter = {
  readonly _blockRange: InputMaybe<BigIntFilter>;
  readonly _id: InputMaybe<BigIntFilter>;
  readonly amount: InputMaybe<BigIntFilter>;
  readonly createAt: InputMaybe<BigIntFilter>;
  readonly deploymentId: InputMaybe<BigIntFilter>;
  readonly eraIdx: InputMaybe<BigIntFilter>;
  readonly id: InputMaybe<BigIntFilter>;
  readonly indexerId: InputMaybe<BigIntFilter>;
};

export type IndexerLaborHistoryDistinctCountAggregates = {
  readonly __typename: 'IndexerLaborHistoryDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  readonly _blockRange: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  readonly _id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of amount across the matching connection */
  readonly amount: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createAt across the matching connection */
  readonly createAt: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of deploymentId across the matching connection */
  readonly deploymentId: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  readonly id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of indexerId across the matching connection */
  readonly indexerId: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `IndexerLaborHistory` object types. All fields are combined with a logical ‘and.’ */
export type IndexerLaborHistoryFilter = {
  /** Filter by the object’s `amount` field. */
  readonly amount: InputMaybe<BigFloatFilter>;
  /** Checks for all expressions in this list. */
  readonly and: InputMaybe<ReadonlyArray<IndexerLaborHistoryFilter>>;
  /** Filter by the object’s `createAt` field. */
  readonly createAt: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `deploymentId` field. */
  readonly deploymentId: InputMaybe<StringFilter>;
  /** Filter by the object’s `eraIdx` field. */
  readonly eraIdx: InputMaybe<IntFilter>;
  /** Filter by the object’s `id` field. */
  readonly id: InputMaybe<StringFilter>;
  /** Filter by the object’s `indexer` relation. */
  readonly indexer: InputMaybe<IndexerFilter>;
  /** Filter by the object’s `indexerId` field. */
  readonly indexerId: InputMaybe<StringFilter>;
  /** Negates the expression. */
  readonly not: InputMaybe<IndexerLaborHistoryFilter>;
  /** Checks for any expressions in this list. */
  readonly or: InputMaybe<ReadonlyArray<IndexerLaborHistoryFilter>>;
};

export type IndexerLaborHistoryMaxAggregateFilter = {
  readonly amount: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<IntFilter>;
};

export type IndexerLaborHistoryMaxAggregates = {
  readonly __typename: 'IndexerLaborHistoryMaxAggregates';
  /** Maximum of amount across the matching connection */
  readonly amount: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['Int']['output']>;
};

export type IndexerLaborHistoryMinAggregateFilter = {
  readonly amount: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<IntFilter>;
};

export type IndexerLaborHistoryMinAggregates = {
  readonly __typename: 'IndexerLaborHistoryMinAggregates';
  /** Minimum of amount across the matching connection */
  readonly amount: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['Int']['output']>;
};

export type IndexerLaborHistoryStddevPopulationAggregateFilter = {
  readonly amount: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigFloatFilter>;
};

export type IndexerLaborHistoryStddevPopulationAggregates = {
  readonly __typename: 'IndexerLaborHistoryStddevPopulationAggregates';
  /** Population standard deviation of amount across the matching connection */
  readonly amount: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerLaborHistoryStddevSampleAggregateFilter = {
  readonly amount: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigFloatFilter>;
};

export type IndexerLaborHistoryStddevSampleAggregates = {
  readonly __typename: 'IndexerLaborHistoryStddevSampleAggregates';
  /** Sample standard deviation of amount across the matching connection */
  readonly amount: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerLaborHistorySumAggregateFilter = {
  readonly amount: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigIntFilter>;
};

export type IndexerLaborHistorySumAggregates = {
  readonly __typename: 'IndexerLaborHistorySumAggregates';
  /** Sum of amount across the matching connection */
  readonly amount: Scalars['BigFloat']['output'];
  /** Sum of eraIdx across the matching connection */
  readonly eraIdx: Scalars['BigInt']['output'];
};

export type IndexerLaborHistoryVariancePopulationAggregateFilter = {
  readonly amount: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigFloatFilter>;
};

export type IndexerLaborHistoryVariancePopulationAggregates = {
  readonly __typename: 'IndexerLaborHistoryVariancePopulationAggregates';
  /** Population variance of amount across the matching connection */
  readonly amount: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerLaborHistoryVarianceSampleAggregateFilter = {
  readonly amount: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigFloatFilter>;
};

export type IndexerLaborHistoryVarianceSampleAggregates = {
  readonly __typename: 'IndexerLaborHistoryVarianceSampleAggregates';
  /** Sample variance of amount across the matching connection */
  readonly amount: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerLatestAllocationOverflow = Node & {
  readonly __typename: 'IndexerLatestAllocationOverflow';
  readonly createAt: Scalars['Datetime']['output'];
  readonly id: Scalars['String']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  readonly nodeId: Scalars['ID']['output'];
  /** Reads a single `IndexerAllocationOverflow` that is related to this `IndexerLatestAllocationOverflow`. */
  readonly overflowId: Maybe<IndexerAllocationOverflow>;
  readonly overflowIdId: Scalars['String']['output'];
  readonly updateAt: Scalars['Datetime']['output'];
};

export type IndexerLatestAllocationOverflowAggregates = {
  readonly __typename: 'IndexerLatestAllocationOverflowAggregates';
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly distinctCount: Maybe<IndexerLatestAllocationOverflowDistinctCountAggregates>;
  readonly keys: Maybe<ReadonlyArray<Scalars['String']['output']>>;
};

/** A filter to be used against aggregates of `IndexerLatestAllocationOverflow` object types. */
export type IndexerLatestAllocationOverflowAggregatesFilter = {
  /** Distinct count aggregate over matching `IndexerLatestAllocationOverflow` objects. */
  readonly distinctCount: InputMaybe<IndexerLatestAllocationOverflowDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `IndexerLatestAllocationOverflow` object to be included within the aggregate. */
  readonly filter: InputMaybe<IndexerLatestAllocationOverflowFilter>;
};

export type IndexerLatestAllocationOverflowDistinctCountAggregateFilter = {
  readonly _blockRange: InputMaybe<BigIntFilter>;
  readonly _id: InputMaybe<BigIntFilter>;
  readonly createAt: InputMaybe<BigIntFilter>;
  readonly id: InputMaybe<BigIntFilter>;
  readonly overflowIdId: InputMaybe<BigIntFilter>;
  readonly updateAt: InputMaybe<BigIntFilter>;
};

export type IndexerLatestAllocationOverflowDistinctCountAggregates = {
  readonly __typename: 'IndexerLatestAllocationOverflowDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  readonly _blockRange: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  readonly _id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createAt across the matching connection */
  readonly createAt: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  readonly id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of overflowIdId across the matching connection */
  readonly overflowIdId: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of updateAt across the matching connection */
  readonly updateAt: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `IndexerLatestAllocationOverflow` object types. All fields are combined with a logical ‘and.’ */
export type IndexerLatestAllocationOverflowFilter = {
  /** Checks for all expressions in this list. */
  readonly and: InputMaybe<ReadonlyArray<IndexerLatestAllocationOverflowFilter>>;
  /** Filter by the object’s `createAt` field. */
  readonly createAt: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `id` field. */
  readonly id: InputMaybe<StringFilter>;
  /** Negates the expression. */
  readonly not: InputMaybe<IndexerLatestAllocationOverflowFilter>;
  /** Checks for any expressions in this list. */
  readonly or: InputMaybe<ReadonlyArray<IndexerLatestAllocationOverflowFilter>>;
  /** Filter by the object’s `overflowId` relation. */
  readonly overflowId: InputMaybe<IndexerAllocationOverflowFilter>;
  /** Filter by the object’s `overflowIdId` field. */
  readonly overflowIdId: InputMaybe<StringFilter>;
  /** Filter by the object’s `updateAt` field. */
  readonly updateAt: InputMaybe<DatetimeFilter>;
};

/** A connection to a list of `IndexerLatestAllocationOverflow` values. */
export type IndexerLatestAllocationOverflowsConnection = {
  readonly __typename: 'IndexerLatestAllocationOverflowsConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<IndexerLatestAllocationOverflowAggregates>;
  /** A list of edges which contains the `IndexerLatestAllocationOverflow` and cursor to aid in pagination. */
  readonly edges: ReadonlyArray<IndexerLatestAllocationOverflowsEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<IndexerLatestAllocationOverflowAggregates>>;
  /** A list of `IndexerLatestAllocationOverflow` objects. */
  readonly nodes: ReadonlyArray<Maybe<IndexerLatestAllocationOverflow>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `IndexerLatestAllocationOverflow` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `IndexerLatestAllocationOverflow` values. */
export type IndexerLatestAllocationOverflowsConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<IndexerLatestAllocationOverflowsGroupBy>;
  having: InputMaybe<IndexerLatestAllocationOverflowsHavingInput>;
};

/** A `IndexerLatestAllocationOverflow` edge in the connection. */
export type IndexerLatestAllocationOverflowsEdge = {
  readonly __typename: 'IndexerLatestAllocationOverflowsEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `IndexerLatestAllocationOverflow` at the end of the edge. */
  readonly node: Maybe<IndexerLatestAllocationOverflow>;
};

/** Grouping methods for `IndexerLatestAllocationOverflow` for usage during aggregation. */
export enum IndexerLatestAllocationOverflowsGroupBy {
  CREATE_AT = 'CREATE_AT',
  CREATE_AT_TRUNCATED_TO_DAY = 'CREATE_AT_TRUNCATED_TO_DAY',
  CREATE_AT_TRUNCATED_TO_HOUR = 'CREATE_AT_TRUNCATED_TO_HOUR',
  ID = 'ID',
  OVERFLOW_ID_ID = 'OVERFLOW_ID_ID',
  UPDATE_AT = 'UPDATE_AT',
  UPDATE_AT_TRUNCATED_TO_DAY = 'UPDATE_AT_TRUNCATED_TO_DAY',
  UPDATE_AT_TRUNCATED_TO_HOUR = 'UPDATE_AT_TRUNCATED_TO_HOUR',
}

export type IndexerLatestAllocationOverflowsHavingAverageInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerLatestAllocationOverflowsHavingDistinctCountInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

/** Conditions for `IndexerLatestAllocationOverflow` aggregates. */
export type IndexerLatestAllocationOverflowsHavingInput = {
  readonly AND: InputMaybe<ReadonlyArray<IndexerLatestAllocationOverflowsHavingInput>>;
  readonly OR: InputMaybe<ReadonlyArray<IndexerLatestAllocationOverflowsHavingInput>>;
  readonly average: InputMaybe<IndexerLatestAllocationOverflowsHavingAverageInput>;
  readonly distinctCount: InputMaybe<IndexerLatestAllocationOverflowsHavingDistinctCountInput>;
  readonly max: InputMaybe<IndexerLatestAllocationOverflowsHavingMaxInput>;
  readonly min: InputMaybe<IndexerLatestAllocationOverflowsHavingMinInput>;
  readonly stddevPopulation: InputMaybe<IndexerLatestAllocationOverflowsHavingStddevPopulationInput>;
  readonly stddevSample: InputMaybe<IndexerLatestAllocationOverflowsHavingStddevSampleInput>;
  readonly sum: InputMaybe<IndexerLatestAllocationOverflowsHavingSumInput>;
  readonly variancePopulation: InputMaybe<IndexerLatestAllocationOverflowsHavingVariancePopulationInput>;
  readonly varianceSample: InputMaybe<IndexerLatestAllocationOverflowsHavingVarianceSampleInput>;
};

export type IndexerLatestAllocationOverflowsHavingMaxInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerLatestAllocationOverflowsHavingMinInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerLatestAllocationOverflowsHavingStddevPopulationInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerLatestAllocationOverflowsHavingStddevSampleInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerLatestAllocationOverflowsHavingSumInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerLatestAllocationOverflowsHavingVariancePopulationInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerLatestAllocationOverflowsHavingVarianceSampleInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

/** Methods to use when ordering `IndexerLatestAllocationOverflow`. */
export enum IndexerLatestAllocationOverflowsOrderBy {
  CREATE_AT_ASC = 'CREATE_AT_ASC',
  CREATE_AT_DESC = 'CREATE_AT_DESC',
  ID_ASC = 'ID_ASC',
  ID_DESC = 'ID_DESC',
  INDEXER_ALLOCATION_OVERFLOW_BY_OVERFLOW_ID_ID__CREATE_AT_ASC = 'INDEXER_ALLOCATION_OVERFLOW_BY_OVERFLOW_ID_ID__CREATE_AT_ASC',
  INDEXER_ALLOCATION_OVERFLOW_BY_OVERFLOW_ID_ID__CREATE_AT_DESC = 'INDEXER_ALLOCATION_OVERFLOW_BY_OVERFLOW_ID_ID__CREATE_AT_DESC',
  INDEXER_ALLOCATION_OVERFLOW_BY_OVERFLOW_ID_ID__ERA_IDX_END_ASC = 'INDEXER_ALLOCATION_OVERFLOW_BY_OVERFLOW_ID_ID__ERA_IDX_END_ASC',
  INDEXER_ALLOCATION_OVERFLOW_BY_OVERFLOW_ID_ID__ERA_IDX_END_DESC = 'INDEXER_ALLOCATION_OVERFLOW_BY_OVERFLOW_ID_ID__ERA_IDX_END_DESC',
  INDEXER_ALLOCATION_OVERFLOW_BY_OVERFLOW_ID_ID__ERA_IDX_START_ASC = 'INDEXER_ALLOCATION_OVERFLOW_BY_OVERFLOW_ID_ID__ERA_IDX_START_ASC',
  INDEXER_ALLOCATION_OVERFLOW_BY_OVERFLOW_ID_ID__ERA_IDX_START_DESC = 'INDEXER_ALLOCATION_OVERFLOW_BY_OVERFLOW_ID_ID__ERA_IDX_START_DESC',
  INDEXER_ALLOCATION_OVERFLOW_BY_OVERFLOW_ID_ID__ID_ASC = 'INDEXER_ALLOCATION_OVERFLOW_BY_OVERFLOW_ID_ID__ID_ASC',
  INDEXER_ALLOCATION_OVERFLOW_BY_OVERFLOW_ID_ID__ID_DESC = 'INDEXER_ALLOCATION_OVERFLOW_BY_OVERFLOW_ID_ID__ID_DESC',
  INDEXER_ALLOCATION_OVERFLOW_BY_OVERFLOW_ID_ID__INDEXER_ID_ASC = 'INDEXER_ALLOCATION_OVERFLOW_BY_OVERFLOW_ID_ID__INDEXER_ID_ASC',
  INDEXER_ALLOCATION_OVERFLOW_BY_OVERFLOW_ID_ID__INDEXER_ID_DESC = 'INDEXER_ALLOCATION_OVERFLOW_BY_OVERFLOW_ID_ID__INDEXER_ID_DESC',
  INDEXER_ALLOCATION_OVERFLOW_BY_OVERFLOW_ID_ID__OVERFLOW_END_ASC = 'INDEXER_ALLOCATION_OVERFLOW_BY_OVERFLOW_ID_ID__OVERFLOW_END_ASC',
  INDEXER_ALLOCATION_OVERFLOW_BY_OVERFLOW_ID_ID__OVERFLOW_END_DESC = 'INDEXER_ALLOCATION_OVERFLOW_BY_OVERFLOW_ID_ID__OVERFLOW_END_DESC',
  INDEXER_ALLOCATION_OVERFLOW_BY_OVERFLOW_ID_ID__OVERFLOW_START_ASC = 'INDEXER_ALLOCATION_OVERFLOW_BY_OVERFLOW_ID_ID__OVERFLOW_START_ASC',
  INDEXER_ALLOCATION_OVERFLOW_BY_OVERFLOW_ID_ID__OVERFLOW_START_DESC = 'INDEXER_ALLOCATION_OVERFLOW_BY_OVERFLOW_ID_ID__OVERFLOW_START_DESC',
  INDEXER_ALLOCATION_OVERFLOW_BY_OVERFLOW_ID_ID__OVERFLOW_TIME_ASC = 'INDEXER_ALLOCATION_OVERFLOW_BY_OVERFLOW_ID_ID__OVERFLOW_TIME_ASC',
  INDEXER_ALLOCATION_OVERFLOW_BY_OVERFLOW_ID_ID__OVERFLOW_TIME_DESC = 'INDEXER_ALLOCATION_OVERFLOW_BY_OVERFLOW_ID_ID__OVERFLOW_TIME_DESC',
  INDEXER_ALLOCATION_OVERFLOW_BY_OVERFLOW_ID_ID__UPDATE_AT_ASC = 'INDEXER_ALLOCATION_OVERFLOW_BY_OVERFLOW_ID_ID__UPDATE_AT_ASC',
  INDEXER_ALLOCATION_OVERFLOW_BY_OVERFLOW_ID_ID__UPDATE_AT_DESC = 'INDEXER_ALLOCATION_OVERFLOW_BY_OVERFLOW_ID_ID__UPDATE_AT_DESC',
  NATURAL = 'NATURAL',
  OVERFLOW_ID_ID_ASC = 'OVERFLOW_ID_ID_ASC',
  OVERFLOW_ID_ID_DESC = 'OVERFLOW_ID_ID_DESC',
  PRIMARY_KEY_ASC = 'PRIMARY_KEY_ASC',
  PRIMARY_KEY_DESC = 'PRIMARY_KEY_DESC',
  UPDATE_AT_ASC = 'UPDATE_AT_ASC',
  UPDATE_AT_DESC = 'UPDATE_AT_DESC',
}

export type IndexerMaxAggregates = {
  readonly __typename: 'IndexerMaxAggregates';
  /** Maximum of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['Int']['output']>;
};

export type IndexerMinAggregates = {
  readonly __typename: 'IndexerMinAggregates';
  /** Minimum of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['Int']['output']>;
};

export type IndexerMissedLabor = Node & {
  readonly __typename: 'IndexerMissedLabor';
  readonly createAt: Scalars['Datetime']['output'];
  /** Reads a single `Deployment` that is related to this `IndexerMissedLabor`. */
  readonly deployment: Maybe<Deployment>;
  readonly deploymentId: Scalars['String']['output'];
  readonly eraIdx: Scalars['Int']['output'];
  readonly id: Scalars['String']['output'];
  /** Reads a single `Indexer` that is related to this `IndexerMissedLabor`. */
  readonly indexer: Maybe<Indexer>;
  readonly indexerId: Scalars['String']['output'];
  readonly missedLabor: Scalars['BigFloat']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  readonly nodeId: Scalars['ID']['output'];
};

export type IndexerMissedLaborAggregates = {
  readonly __typename: 'IndexerMissedLaborAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly average: Maybe<IndexerMissedLaborAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly distinctCount: Maybe<IndexerMissedLaborDistinctCountAggregates>;
  readonly keys: Maybe<ReadonlyArray<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly max: Maybe<IndexerMissedLaborMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly min: Maybe<IndexerMissedLaborMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevPopulation: Maybe<IndexerMissedLaborStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevSample: Maybe<IndexerMissedLaborStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly sum: Maybe<IndexerMissedLaborSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly variancePopulation: Maybe<IndexerMissedLaborVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly varianceSample: Maybe<IndexerMissedLaborVarianceSampleAggregates>;
};

/** A filter to be used against aggregates of `IndexerMissedLabor` object types. */
export type IndexerMissedLaborAggregatesFilter = {
  /** Mean average aggregate over matching `IndexerMissedLabor` objects. */
  readonly average: InputMaybe<IndexerMissedLaborAverageAggregateFilter>;
  /** Distinct count aggregate over matching `IndexerMissedLabor` objects. */
  readonly distinctCount: InputMaybe<IndexerMissedLaborDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `IndexerMissedLabor` object to be included within the aggregate. */
  readonly filter: InputMaybe<IndexerMissedLaborFilter>;
  /** Maximum aggregate over matching `IndexerMissedLabor` objects. */
  readonly max: InputMaybe<IndexerMissedLaborMaxAggregateFilter>;
  /** Minimum aggregate over matching `IndexerMissedLabor` objects. */
  readonly min: InputMaybe<IndexerMissedLaborMinAggregateFilter>;
  /** Population standard deviation aggregate over matching `IndexerMissedLabor` objects. */
  readonly stddevPopulation: InputMaybe<IndexerMissedLaborStddevPopulationAggregateFilter>;
  /** Sample standard deviation aggregate over matching `IndexerMissedLabor` objects. */
  readonly stddevSample: InputMaybe<IndexerMissedLaborStddevSampleAggregateFilter>;
  /** Sum aggregate over matching `IndexerMissedLabor` objects. */
  readonly sum: InputMaybe<IndexerMissedLaborSumAggregateFilter>;
  /** Population variance aggregate over matching `IndexerMissedLabor` objects. */
  readonly variancePopulation: InputMaybe<IndexerMissedLaborVariancePopulationAggregateFilter>;
  /** Sample variance aggregate over matching `IndexerMissedLabor` objects. */
  readonly varianceSample: InputMaybe<IndexerMissedLaborVarianceSampleAggregateFilter>;
};

export type IndexerMissedLaborAverageAggregateFilter = {
  readonly eraIdx: InputMaybe<BigFloatFilter>;
  readonly missedLabor: InputMaybe<BigFloatFilter>;
};

export type IndexerMissedLaborAverageAggregates = {
  readonly __typename: 'IndexerMissedLaborAverageAggregates';
  /** Mean average of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of missedLabor across the matching connection */
  readonly missedLabor: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerMissedLaborDistinctCountAggregateFilter = {
  readonly _blockRange: InputMaybe<BigIntFilter>;
  readonly _id: InputMaybe<BigIntFilter>;
  readonly createAt: InputMaybe<BigIntFilter>;
  readonly deploymentId: InputMaybe<BigIntFilter>;
  readonly eraIdx: InputMaybe<BigIntFilter>;
  readonly id: InputMaybe<BigIntFilter>;
  readonly indexerId: InputMaybe<BigIntFilter>;
  readonly missedLabor: InputMaybe<BigIntFilter>;
};

export type IndexerMissedLaborDistinctCountAggregates = {
  readonly __typename: 'IndexerMissedLaborDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  readonly _blockRange: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  readonly _id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createAt across the matching connection */
  readonly createAt: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of deploymentId across the matching connection */
  readonly deploymentId: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  readonly id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of indexerId across the matching connection */
  readonly indexerId: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of missedLabor across the matching connection */
  readonly missedLabor: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `IndexerMissedLabor` object types. All fields are combined with a logical ‘and.’ */
export type IndexerMissedLaborFilter = {
  /** Checks for all expressions in this list. */
  readonly and: InputMaybe<ReadonlyArray<IndexerMissedLaborFilter>>;
  /** Filter by the object’s `createAt` field. */
  readonly createAt: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `deployment` relation. */
  readonly deployment: InputMaybe<DeploymentFilter>;
  /** Filter by the object’s `deploymentId` field. */
  readonly deploymentId: InputMaybe<StringFilter>;
  /** Filter by the object’s `eraIdx` field. */
  readonly eraIdx: InputMaybe<IntFilter>;
  /** Filter by the object’s `id` field. */
  readonly id: InputMaybe<StringFilter>;
  /** Filter by the object’s `indexer` relation. */
  readonly indexer: InputMaybe<IndexerFilter>;
  /** Filter by the object’s `indexerId` field. */
  readonly indexerId: InputMaybe<StringFilter>;
  /** Filter by the object’s `missedLabor` field. */
  readonly missedLabor: InputMaybe<BigFloatFilter>;
  /** Negates the expression. */
  readonly not: InputMaybe<IndexerMissedLaborFilter>;
  /** Checks for any expressions in this list. */
  readonly or: InputMaybe<ReadonlyArray<IndexerMissedLaborFilter>>;
};

export type IndexerMissedLaborMaxAggregateFilter = {
  readonly eraIdx: InputMaybe<IntFilter>;
  readonly missedLabor: InputMaybe<BigFloatFilter>;
};

export type IndexerMissedLaborMaxAggregates = {
  readonly __typename: 'IndexerMissedLaborMaxAggregates';
  /** Maximum of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['Int']['output']>;
  /** Maximum of missedLabor across the matching connection */
  readonly missedLabor: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerMissedLaborMinAggregateFilter = {
  readonly eraIdx: InputMaybe<IntFilter>;
  readonly missedLabor: InputMaybe<BigFloatFilter>;
};

export type IndexerMissedLaborMinAggregates = {
  readonly __typename: 'IndexerMissedLaborMinAggregates';
  /** Minimum of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['Int']['output']>;
  /** Minimum of missedLabor across the matching connection */
  readonly missedLabor: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerMissedLaborStddevPopulationAggregateFilter = {
  readonly eraIdx: InputMaybe<BigFloatFilter>;
  readonly missedLabor: InputMaybe<BigFloatFilter>;
};

export type IndexerMissedLaborStddevPopulationAggregates = {
  readonly __typename: 'IndexerMissedLaborStddevPopulationAggregates';
  /** Population standard deviation of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of missedLabor across the matching connection */
  readonly missedLabor: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerMissedLaborStddevSampleAggregateFilter = {
  readonly eraIdx: InputMaybe<BigFloatFilter>;
  readonly missedLabor: InputMaybe<BigFloatFilter>;
};

export type IndexerMissedLaborStddevSampleAggregates = {
  readonly __typename: 'IndexerMissedLaborStddevSampleAggregates';
  /** Sample standard deviation of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of missedLabor across the matching connection */
  readonly missedLabor: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerMissedLaborSumAggregateFilter = {
  readonly eraIdx: InputMaybe<BigIntFilter>;
  readonly missedLabor: InputMaybe<BigFloatFilter>;
};

export type IndexerMissedLaborSumAggregates = {
  readonly __typename: 'IndexerMissedLaborSumAggregates';
  /** Sum of eraIdx across the matching connection */
  readonly eraIdx: Scalars['BigInt']['output'];
  /** Sum of missedLabor across the matching connection */
  readonly missedLabor: Scalars['BigFloat']['output'];
};

export type IndexerMissedLaborVariancePopulationAggregateFilter = {
  readonly eraIdx: InputMaybe<BigFloatFilter>;
  readonly missedLabor: InputMaybe<BigFloatFilter>;
};

export type IndexerMissedLaborVariancePopulationAggregates = {
  readonly __typename: 'IndexerMissedLaborVariancePopulationAggregates';
  /** Population variance of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of missedLabor across the matching connection */
  readonly missedLabor: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerMissedLaborVarianceSampleAggregateFilter = {
  readonly eraIdx: InputMaybe<BigFloatFilter>;
  readonly missedLabor: InputMaybe<BigFloatFilter>;
};

export type IndexerMissedLaborVarianceSampleAggregates = {
  readonly __typename: 'IndexerMissedLaborVarianceSampleAggregates';
  /** Sample variance of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of missedLabor across the matching connection */
  readonly missedLabor: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `IndexerMissedLabor` values. */
export type IndexerMissedLaborsConnection = {
  readonly __typename: 'IndexerMissedLaborsConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<IndexerMissedLaborAggregates>;
  /** A list of edges which contains the `IndexerMissedLabor` and cursor to aid in pagination. */
  readonly edges: ReadonlyArray<IndexerMissedLaborsEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<IndexerMissedLaborAggregates>>;
  /** A list of `IndexerMissedLabor` objects. */
  readonly nodes: ReadonlyArray<Maybe<IndexerMissedLabor>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `IndexerMissedLabor` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `IndexerMissedLabor` values. */
export type IndexerMissedLaborsConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<IndexerMissedLaborsGroupBy>;
  having: InputMaybe<IndexerMissedLaborsHavingInput>;
};

/** A `IndexerMissedLabor` edge in the connection. */
export type IndexerMissedLaborsEdge = {
  readonly __typename: 'IndexerMissedLaborsEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `IndexerMissedLabor` at the end of the edge. */
  readonly node: Maybe<IndexerMissedLabor>;
};

/** Grouping methods for `IndexerMissedLabor` for usage during aggregation. */
export enum IndexerMissedLaborsGroupBy {
  CREATE_AT = 'CREATE_AT',
  CREATE_AT_TRUNCATED_TO_DAY = 'CREATE_AT_TRUNCATED_TO_DAY',
  CREATE_AT_TRUNCATED_TO_HOUR = 'CREATE_AT_TRUNCATED_TO_HOUR',
  DEPLOYMENT_ID = 'DEPLOYMENT_ID',
  ERA_IDX = 'ERA_IDX',
  ID = 'ID',
  INDEXER_ID = 'INDEXER_ID',
  MISSED_LABOR = 'MISSED_LABOR',
}

export type IndexerMissedLaborsHavingAverageInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly missedLabor: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerMissedLaborsHavingDistinctCountInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly missedLabor: InputMaybe<HavingBigfloatFilter>;
};

/** Conditions for `IndexerMissedLabor` aggregates. */
export type IndexerMissedLaborsHavingInput = {
  readonly AND: InputMaybe<ReadonlyArray<IndexerMissedLaborsHavingInput>>;
  readonly OR: InputMaybe<ReadonlyArray<IndexerMissedLaborsHavingInput>>;
  readonly average: InputMaybe<IndexerMissedLaborsHavingAverageInput>;
  readonly distinctCount: InputMaybe<IndexerMissedLaborsHavingDistinctCountInput>;
  readonly max: InputMaybe<IndexerMissedLaborsHavingMaxInput>;
  readonly min: InputMaybe<IndexerMissedLaborsHavingMinInput>;
  readonly stddevPopulation: InputMaybe<IndexerMissedLaborsHavingStddevPopulationInput>;
  readonly stddevSample: InputMaybe<IndexerMissedLaborsHavingStddevSampleInput>;
  readonly sum: InputMaybe<IndexerMissedLaborsHavingSumInput>;
  readonly variancePopulation: InputMaybe<IndexerMissedLaborsHavingVariancePopulationInput>;
  readonly varianceSample: InputMaybe<IndexerMissedLaborsHavingVarianceSampleInput>;
};

export type IndexerMissedLaborsHavingMaxInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly missedLabor: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerMissedLaborsHavingMinInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly missedLabor: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerMissedLaborsHavingStddevPopulationInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly missedLabor: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerMissedLaborsHavingStddevSampleInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly missedLabor: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerMissedLaborsHavingSumInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly missedLabor: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerMissedLaborsHavingVariancePopulationInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly missedLabor: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerMissedLaborsHavingVarianceSampleInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly missedLabor: InputMaybe<HavingBigfloatFilter>;
};

/** Methods to use when ordering `IndexerMissedLabor`. */
export enum IndexerMissedLaborsOrderBy {
  CREATE_AT_ASC = 'CREATE_AT_ASC',
  CREATE_AT_DESC = 'CREATE_AT_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__ID_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__ID_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__ID_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__ID_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_DESC',
  DEPLOYMENT_ID_ASC = 'DEPLOYMENT_ID_ASC',
  DEPLOYMENT_ID_DESC = 'DEPLOYMENT_ID_DESC',
  ERA_IDX_ASC = 'ERA_IDX_ASC',
  ERA_IDX_DESC = 'ERA_IDX_DESC',
  ID_ASC = 'ID_ASC',
  ID_DESC = 'ID_DESC',
  INDEXER_BY_INDEXER_ID__ACTIVE_ASC = 'INDEXER_BY_INDEXER_ID__ACTIVE_ASC',
  INDEXER_BY_INDEXER_ID__ACTIVE_DESC = 'INDEXER_BY_INDEXER_ID__ACTIVE_DESC',
  INDEXER_BY_INDEXER_ID__CAPACITY_ASC = 'INDEXER_BY_INDEXER_ID__CAPACITY_ASC',
  INDEXER_BY_INDEXER_ID__CAPACITY_DESC = 'INDEXER_BY_INDEXER_ID__CAPACITY_DESC',
  INDEXER_BY_INDEXER_ID__COMMISSION_ASC = 'INDEXER_BY_INDEXER_ID__COMMISSION_ASC',
  INDEXER_BY_INDEXER_ID__COMMISSION_DESC = 'INDEXER_BY_INDEXER_ID__COMMISSION_DESC',
  INDEXER_BY_INDEXER_ID__CONTROLLER_ASC = 'INDEXER_BY_INDEXER_ID__CONTROLLER_ASC',
  INDEXER_BY_INDEXER_ID__CONTROLLER_DESC = 'INDEXER_BY_INDEXER_ID__CONTROLLER_DESC',
  INDEXER_BY_INDEXER_ID__CREATED_BLOCK_ASC = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_ASC',
  INDEXER_BY_INDEXER_ID__CREATED_BLOCK_DESC = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_DESC',
  INDEXER_BY_INDEXER_ID__ID_ASC = 'INDEXER_BY_INDEXER_ID__ID_ASC',
  INDEXER_BY_INDEXER_ID__ID_DESC = 'INDEXER_BY_INDEXER_ID__ID_DESC',
  INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_ASC = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_ASC',
  INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_DESC = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_DESC',
  INDEXER_BY_INDEXER_ID__LAST_EVENT_ASC = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_ASC',
  INDEXER_BY_INDEXER_ID__LAST_EVENT_DESC = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_DESC',
  INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_ASC = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_ASC',
  INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_DESC = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_DESC',
  INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_ASC = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_ASC',
  INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_DESC = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_DESC',
  INDEXER_BY_INDEXER_ID__METADATA_ASC = 'INDEXER_BY_INDEXER_ID__METADATA_ASC',
  INDEXER_BY_INDEXER_ID__METADATA_DESC = 'INDEXER_BY_INDEXER_ID__METADATA_DESC',
  INDEXER_BY_INDEXER_ID__SELF_STAKE_ASC = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_ASC',
  INDEXER_BY_INDEXER_ID__SELF_STAKE_DESC = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_DESC',
  INDEXER_BY_INDEXER_ID__TOTAL_STAKE_ASC = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_ASC',
  INDEXER_BY_INDEXER_ID__TOTAL_STAKE_DESC = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_DESC',
  INDEXER_ID_ASC = 'INDEXER_ID_ASC',
  INDEXER_ID_DESC = 'INDEXER_ID_DESC',
  MISSED_LABOR_ASC = 'MISSED_LABOR_ASC',
  MISSED_LABOR_DESC = 'MISSED_LABOR_DESC',
  NATURAL = 'NATURAL',
  PRIMARY_KEY_ASC = 'PRIMARY_KEY_ASC',
  PRIMARY_KEY_DESC = 'PRIMARY_KEY_DESC',
}

/** A connection to a list of `Offer` values, with data from `AcceptedOffer`. */
export type IndexerOffersByAcceptedOfferIndexerIdAndOfferIdManyToManyConnection = {
  readonly __typename: 'IndexerOffersByAcceptedOfferIndexerIdAndOfferIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<OfferAggregates>;
  /** A list of edges which contains the `Offer`, info from the `AcceptedOffer`, and the cursor to aid in pagination. */
  readonly edges: ReadonlyArray<IndexerOffersByAcceptedOfferIndexerIdAndOfferIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<OfferAggregates>>;
  /** A list of `Offer` objects. */
  readonly nodes: ReadonlyArray<Maybe<Offer>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Offer` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Offer` values, with data from `AcceptedOffer`. */
export type IndexerOffersByAcceptedOfferIndexerIdAndOfferIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<OffersGroupBy>;
  having: InputMaybe<OffersHavingInput>;
};

/** A `Offer` edge in the connection, with data from `AcceptedOffer`. */
export type IndexerOffersByAcceptedOfferIndexerIdAndOfferIdManyToManyEdge = {
  readonly __typename: 'IndexerOffersByAcceptedOfferIndexerIdAndOfferIdManyToManyEdge';
  /** Reads and enables pagination through a set of `AcceptedOffer`. */
  readonly acceptedOffers: AcceptedOffersConnection;
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `Offer` at the end of the edge. */
  readonly node: Maybe<Offer>;
};

/** A `Offer` edge in the connection, with data from `AcceptedOffer`. */
export type IndexerOffersByAcceptedOfferIndexerIdAndOfferIdManyToManyEdgeAcceptedOffersArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Accepted_Offers_Distinct_Enum>>>;
  filter: InputMaybe<AcceptedOfferFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<AcceptedOffersOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** A connection to a list of `Project` values, with data from `IndexerAllocation`. */
export type IndexerProjectsByIndexerAllocationIndexerIdAndProjectIdManyToManyConnection = {
  readonly __typename: 'IndexerProjectsByIndexerAllocationIndexerIdAndProjectIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<ProjectAggregates>;
  /** A list of edges which contains the `Project`, info from the `IndexerAllocation`, and the cursor to aid in pagination. */
  readonly edges: ReadonlyArray<IndexerProjectsByIndexerAllocationIndexerIdAndProjectIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<ProjectAggregates>>;
  /** A list of `Project` objects. */
  readonly nodes: ReadonlyArray<Maybe<Project>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Project` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Project` values, with data from `IndexerAllocation`. */
export type IndexerProjectsByIndexerAllocationIndexerIdAndProjectIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<ProjectsGroupBy>;
  having: InputMaybe<ProjectsHavingInput>;
};

/** A `Project` edge in the connection, with data from `IndexerAllocation`. */
export type IndexerProjectsByIndexerAllocationIndexerIdAndProjectIdManyToManyEdge = {
  readonly __typename: 'IndexerProjectsByIndexerAllocationIndexerIdAndProjectIdManyToManyEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `IndexerAllocation`. */
  readonly indexerAllocations: IndexerAllocationsConnection;
  /** The `Project` at the end of the edge. */
  readonly node: Maybe<Project>;
};

/** A `Project` edge in the connection, with data from `IndexerAllocation`. */
export type IndexerProjectsByIndexerAllocationIndexerIdAndProjectIdManyToManyEdgeIndexerAllocationsArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Allocations_Distinct_Enum>>>;
  filter: InputMaybe<IndexerAllocationFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexerAllocationsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** A connection to a list of `Project` values, with data from `IndexerAllocationReward`. */
export type IndexerProjectsByIndexerAllocationRewardIndexerIdAndProjectIdManyToManyConnection = {
  readonly __typename: 'IndexerProjectsByIndexerAllocationRewardIndexerIdAndProjectIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<ProjectAggregates>;
  /** A list of edges which contains the `Project`, info from the `IndexerAllocationReward`, and the cursor to aid in pagination. */
  readonly edges: ReadonlyArray<IndexerProjectsByIndexerAllocationRewardIndexerIdAndProjectIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<ProjectAggregates>>;
  /** A list of `Project` objects. */
  readonly nodes: ReadonlyArray<Maybe<Project>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Project` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Project` values, with data from `IndexerAllocationReward`. */
export type IndexerProjectsByIndexerAllocationRewardIndexerIdAndProjectIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<ProjectsGroupBy>;
  having: InputMaybe<ProjectsHavingInput>;
};

/** A `Project` edge in the connection, with data from `IndexerAllocationReward`. */
export type IndexerProjectsByIndexerAllocationRewardIndexerIdAndProjectIdManyToManyEdge = {
  readonly __typename: 'IndexerProjectsByIndexerAllocationRewardIndexerIdAndProjectIdManyToManyEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `IndexerAllocationReward`. */
  readonly indexerAllocationRewards: IndexerAllocationRewardsConnection;
  /** The `Project` at the end of the edge. */
  readonly node: Maybe<Project>;
};

/** A `Project` edge in the connection, with data from `IndexerAllocationReward`. */
export type IndexerProjectsByIndexerAllocationRewardIndexerIdAndProjectIdManyToManyEdgeIndexerAllocationRewardsArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Allocation_Rewards_Distinct_Enum>>>;
  filter: InputMaybe<IndexerAllocationRewardFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexerAllocationRewardsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** A connection to a list of `Project` values, with data from `IndexerAllocationRewardSummary`. */
export type IndexerProjectsByIndexerAllocationRewardSummaryIndexerIdAndProjectIdManyToManyConnection = {
  readonly __typename: 'IndexerProjectsByIndexerAllocationRewardSummaryIndexerIdAndProjectIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<ProjectAggregates>;
  /** A list of edges which contains the `Project`, info from the `IndexerAllocationRewardSummary`, and the cursor to aid in pagination. */
  readonly edges: ReadonlyArray<IndexerProjectsByIndexerAllocationRewardSummaryIndexerIdAndProjectIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<ProjectAggregates>>;
  /** A list of `Project` objects. */
  readonly nodes: ReadonlyArray<Maybe<Project>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Project` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Project` values, with data from `IndexerAllocationRewardSummary`. */
export type IndexerProjectsByIndexerAllocationRewardSummaryIndexerIdAndProjectIdManyToManyConnectionGroupedAggregatesArgs =
  {
    groupBy: ReadonlyArray<ProjectsGroupBy>;
    having: InputMaybe<ProjectsHavingInput>;
  };

/** A `Project` edge in the connection, with data from `IndexerAllocationRewardSummary`. */
export type IndexerProjectsByIndexerAllocationRewardSummaryIndexerIdAndProjectIdManyToManyEdge = {
  readonly __typename: 'IndexerProjectsByIndexerAllocationRewardSummaryIndexerIdAndProjectIdManyToManyEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `IndexerAllocationRewardSummary`. */
  readonly indexerAllocationRewardSummaries: IndexerAllocationRewardSummariesConnection;
  /** The `Project` at the end of the edge. */
  readonly node: Maybe<Project>;
};

/** A `Project` edge in the connection, with data from `IndexerAllocationRewardSummary`. */
export type IndexerProjectsByIndexerAllocationRewardSummaryIndexerIdAndProjectIdManyToManyEdgeIndexerAllocationRewardSummariesArgs =
  {
    after: InputMaybe<Scalars['Cursor']['input']>;
    before: InputMaybe<Scalars['Cursor']['input']>;
    blockHeight?: InputMaybe<Scalars['String']['input']>;
    distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Allocation_Reward_Summaries_Distinct_Enum>>>;
    filter: InputMaybe<IndexerAllocationRewardSummaryFilter>;
    first: InputMaybe<Scalars['Int']['input']>;
    last: InputMaybe<Scalars['Int']['input']>;
    offset: InputMaybe<Scalars['Int']['input']>;
    orderBy: InputMaybe<ReadonlyArray<IndexerAllocationRewardSummariesOrderBy>>;
    orderByNull: InputMaybe<NullOrder>;
  };

/** A connection to a list of `Project` values, with data from `IndexerAllocationSummary`. */
export type IndexerProjectsByIndexerAllocationSummaryIndexerIdAndProjectIdManyToManyConnection = {
  readonly __typename: 'IndexerProjectsByIndexerAllocationSummaryIndexerIdAndProjectIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<ProjectAggregates>;
  /** A list of edges which contains the `Project`, info from the `IndexerAllocationSummary`, and the cursor to aid in pagination. */
  readonly edges: ReadonlyArray<IndexerProjectsByIndexerAllocationSummaryIndexerIdAndProjectIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<ProjectAggregates>>;
  /** A list of `Project` objects. */
  readonly nodes: ReadonlyArray<Maybe<Project>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Project` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Project` values, with data from `IndexerAllocationSummary`. */
export type IndexerProjectsByIndexerAllocationSummaryIndexerIdAndProjectIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<ProjectsGroupBy>;
  having: InputMaybe<ProjectsHavingInput>;
};

/** A `Project` edge in the connection, with data from `IndexerAllocationSummary`. */
export type IndexerProjectsByIndexerAllocationSummaryIndexerIdAndProjectIdManyToManyEdge = {
  readonly __typename: 'IndexerProjectsByIndexerAllocationSummaryIndexerIdAndProjectIdManyToManyEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `IndexerAllocationSummary`. */
  readonly indexerAllocationSummaries: IndexerAllocationSummariesConnection;
  /** The `Project` at the end of the edge. */
  readonly node: Maybe<Project>;
};

/** A `Project` edge in the connection, with data from `IndexerAllocationSummary`. */
export type IndexerProjectsByIndexerAllocationSummaryIndexerIdAndProjectIdManyToManyEdgeIndexerAllocationSummariesArgs =
  {
    after: InputMaybe<Scalars['Cursor']['input']>;
    before: InputMaybe<Scalars['Cursor']['input']>;
    blockHeight?: InputMaybe<Scalars['String']['input']>;
    distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Allocation_Summaries_Distinct_Enum>>>;
    filter: InputMaybe<IndexerAllocationSummaryFilter>;
    first: InputMaybe<Scalars['Int']['input']>;
    last: InputMaybe<Scalars['Int']['input']>;
    offset: InputMaybe<Scalars['Int']['input']>;
    orderBy: InputMaybe<ReadonlyArray<IndexerAllocationSummariesOrderBy>>;
    orderByNull: InputMaybe<NullOrder>;
  };

export type IndexerReward = Node & {
  readonly __typename: 'IndexerReward';
  readonly amount: Scalars['BigFloat']['output'];
  readonly createdBlock: Maybe<Scalars['Int']['output']>;
  readonly eraId: Scalars['BigFloat']['output'];
  readonly eraIdx: Scalars['String']['output'];
  readonly id: Scalars['String']['output'];
  /** Reads a single `Indexer` that is related to this `IndexerReward`. */
  readonly indexer: Maybe<Indexer>;
  readonly indexerId: Scalars['String']['output'];
  readonly lastEvent: Maybe<Scalars['String']['output']>;
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  readonly nodeId: Scalars['ID']['output'];
};

export type IndexerRewardAggregates = {
  readonly __typename: 'IndexerRewardAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly average: Maybe<IndexerRewardAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly distinctCount: Maybe<IndexerRewardDistinctCountAggregates>;
  readonly keys: Maybe<ReadonlyArray<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly max: Maybe<IndexerRewardMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly min: Maybe<IndexerRewardMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevPopulation: Maybe<IndexerRewardStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevSample: Maybe<IndexerRewardStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly sum: Maybe<IndexerRewardSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly variancePopulation: Maybe<IndexerRewardVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly varianceSample: Maybe<IndexerRewardVarianceSampleAggregates>;
};

/** A filter to be used against aggregates of `IndexerReward` object types. */
export type IndexerRewardAggregatesFilter = {
  /** Mean average aggregate over matching `IndexerReward` objects. */
  readonly average: InputMaybe<IndexerRewardAverageAggregateFilter>;
  /** Distinct count aggregate over matching `IndexerReward` objects. */
  readonly distinctCount: InputMaybe<IndexerRewardDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `IndexerReward` object to be included within the aggregate. */
  readonly filter: InputMaybe<IndexerRewardFilter>;
  /** Maximum aggregate over matching `IndexerReward` objects. */
  readonly max: InputMaybe<IndexerRewardMaxAggregateFilter>;
  /** Minimum aggregate over matching `IndexerReward` objects. */
  readonly min: InputMaybe<IndexerRewardMinAggregateFilter>;
  /** Population standard deviation aggregate over matching `IndexerReward` objects. */
  readonly stddevPopulation: InputMaybe<IndexerRewardStddevPopulationAggregateFilter>;
  /** Sample standard deviation aggregate over matching `IndexerReward` objects. */
  readonly stddevSample: InputMaybe<IndexerRewardStddevSampleAggregateFilter>;
  /** Sum aggregate over matching `IndexerReward` objects. */
  readonly sum: InputMaybe<IndexerRewardSumAggregateFilter>;
  /** Population variance aggregate over matching `IndexerReward` objects. */
  readonly variancePopulation: InputMaybe<IndexerRewardVariancePopulationAggregateFilter>;
  /** Sample variance aggregate over matching `IndexerReward` objects. */
  readonly varianceSample: InputMaybe<IndexerRewardVarianceSampleAggregateFilter>;
};

export type IndexerRewardAverageAggregateFilter = {
  readonly amount: InputMaybe<BigFloatFilter>;
  readonly createdBlock: InputMaybe<BigFloatFilter>;
  readonly eraId: InputMaybe<BigFloatFilter>;
};

export type IndexerRewardAverageAggregates = {
  readonly __typename: 'IndexerRewardAverageAggregates';
  /** Mean average of amount across the matching connection */
  readonly amount: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of eraId across the matching connection */
  readonly eraId: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerRewardDistinctCountAggregateFilter = {
  readonly _blockRange: InputMaybe<BigIntFilter>;
  readonly _id: InputMaybe<BigIntFilter>;
  readonly amount: InputMaybe<BigIntFilter>;
  readonly createdBlock: InputMaybe<BigIntFilter>;
  readonly eraId: InputMaybe<BigIntFilter>;
  readonly eraIdx: InputMaybe<BigIntFilter>;
  readonly id: InputMaybe<BigIntFilter>;
  readonly indexerId: InputMaybe<BigIntFilter>;
  readonly lastEvent: InputMaybe<BigIntFilter>;
};

export type IndexerRewardDistinctCountAggregates = {
  readonly __typename: 'IndexerRewardDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  readonly _blockRange: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  readonly _id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of amount across the matching connection */
  readonly amount: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of eraId across the matching connection */
  readonly eraId: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  readonly id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of indexerId across the matching connection */
  readonly indexerId: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of lastEvent across the matching connection */
  readonly lastEvent: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `IndexerReward` object types. All fields are combined with a logical ‘and.’ */
export type IndexerRewardFilter = {
  /** Filter by the object’s `amount` field. */
  readonly amount: InputMaybe<BigFloatFilter>;
  /** Checks for all expressions in this list. */
  readonly and: InputMaybe<ReadonlyArray<IndexerRewardFilter>>;
  /** Filter by the object’s `createdBlock` field. */
  readonly createdBlock: InputMaybe<IntFilter>;
  /** Filter by the object’s `eraId` field. */
  readonly eraId: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `eraIdx` field. */
  readonly eraIdx: InputMaybe<StringFilter>;
  /** Filter by the object’s `id` field. */
  readonly id: InputMaybe<StringFilter>;
  /** Filter by the object’s `indexer` relation. */
  readonly indexer: InputMaybe<IndexerFilter>;
  /** Filter by the object’s `indexerId` field. */
  readonly indexerId: InputMaybe<StringFilter>;
  /** Filter by the object’s `lastEvent` field. */
  readonly lastEvent: InputMaybe<StringFilter>;
  /** Negates the expression. */
  readonly not: InputMaybe<IndexerRewardFilter>;
  /** Checks for any expressions in this list. */
  readonly or: InputMaybe<ReadonlyArray<IndexerRewardFilter>>;
};

export type IndexerRewardMaxAggregateFilter = {
  readonly amount: InputMaybe<BigFloatFilter>;
  readonly createdBlock: InputMaybe<IntFilter>;
  readonly eraId: InputMaybe<BigFloatFilter>;
};

export type IndexerRewardMaxAggregates = {
  readonly __typename: 'IndexerRewardMaxAggregates';
  /** Maximum of amount across the matching connection */
  readonly amount: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['Int']['output']>;
  /** Maximum of eraId across the matching connection */
  readonly eraId: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerRewardMinAggregateFilter = {
  readonly amount: InputMaybe<BigFloatFilter>;
  readonly createdBlock: InputMaybe<IntFilter>;
  readonly eraId: InputMaybe<BigFloatFilter>;
};

export type IndexerRewardMinAggregates = {
  readonly __typename: 'IndexerRewardMinAggregates';
  /** Minimum of amount across the matching connection */
  readonly amount: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['Int']['output']>;
  /** Minimum of eraId across the matching connection */
  readonly eraId: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerRewardStddevPopulationAggregateFilter = {
  readonly amount: InputMaybe<BigFloatFilter>;
  readonly createdBlock: InputMaybe<BigFloatFilter>;
  readonly eraId: InputMaybe<BigFloatFilter>;
};

export type IndexerRewardStddevPopulationAggregates = {
  readonly __typename: 'IndexerRewardStddevPopulationAggregates';
  /** Population standard deviation of amount across the matching connection */
  readonly amount: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of eraId across the matching connection */
  readonly eraId: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerRewardStddevSampleAggregateFilter = {
  readonly amount: InputMaybe<BigFloatFilter>;
  readonly createdBlock: InputMaybe<BigFloatFilter>;
  readonly eraId: InputMaybe<BigFloatFilter>;
};

export type IndexerRewardStddevSampleAggregates = {
  readonly __typename: 'IndexerRewardStddevSampleAggregates';
  /** Sample standard deviation of amount across the matching connection */
  readonly amount: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of eraId across the matching connection */
  readonly eraId: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerRewardSumAggregateFilter = {
  readonly amount: InputMaybe<BigFloatFilter>;
  readonly createdBlock: InputMaybe<BigIntFilter>;
  readonly eraId: InputMaybe<BigFloatFilter>;
};

export type IndexerRewardSumAggregates = {
  readonly __typename: 'IndexerRewardSumAggregates';
  /** Sum of amount across the matching connection */
  readonly amount: Scalars['BigFloat']['output'];
  /** Sum of createdBlock across the matching connection */
  readonly createdBlock: Scalars['BigInt']['output'];
  /** Sum of eraId across the matching connection */
  readonly eraId: Scalars['BigFloat']['output'];
};

export type IndexerRewardVariancePopulationAggregateFilter = {
  readonly amount: InputMaybe<BigFloatFilter>;
  readonly createdBlock: InputMaybe<BigFloatFilter>;
  readonly eraId: InputMaybe<BigFloatFilter>;
};

export type IndexerRewardVariancePopulationAggregates = {
  readonly __typename: 'IndexerRewardVariancePopulationAggregates';
  /** Population variance of amount across the matching connection */
  readonly amount: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of eraId across the matching connection */
  readonly eraId: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerRewardVarianceSampleAggregateFilter = {
  readonly amount: InputMaybe<BigFloatFilter>;
  readonly createdBlock: InputMaybe<BigFloatFilter>;
  readonly eraId: InputMaybe<BigFloatFilter>;
};

export type IndexerRewardVarianceSampleAggregates = {
  readonly __typename: 'IndexerRewardVarianceSampleAggregates';
  /** Sample variance of amount across the matching connection */
  readonly amount: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of eraId across the matching connection */
  readonly eraId: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `IndexerReward` values. */
export type IndexerRewardsConnection = {
  readonly __typename: 'IndexerRewardsConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<IndexerRewardAggregates>;
  /** A list of edges which contains the `IndexerReward` and cursor to aid in pagination. */
  readonly edges: ReadonlyArray<IndexerRewardsEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<IndexerRewardAggregates>>;
  /** A list of `IndexerReward` objects. */
  readonly nodes: ReadonlyArray<Maybe<IndexerReward>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `IndexerReward` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `IndexerReward` values. */
export type IndexerRewardsConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<IndexerRewardsGroupBy>;
  having: InputMaybe<IndexerRewardsHavingInput>;
};

/** A `IndexerReward` edge in the connection. */
export type IndexerRewardsEdge = {
  readonly __typename: 'IndexerRewardsEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `IndexerReward` at the end of the edge. */
  readonly node: Maybe<IndexerReward>;
};

/** Grouping methods for `IndexerReward` for usage during aggregation. */
export enum IndexerRewardsGroupBy {
  AMOUNT = 'AMOUNT',
  CREATED_BLOCK = 'CREATED_BLOCK',
  ERA_ID = 'ERA_ID',
  ERA_IDX = 'ERA_IDX',
  ID = 'ID',
  INDEXER_ID = 'INDEXER_ID',
  LAST_EVENT = 'LAST_EVENT',
}

export type IndexerRewardsHavingAverageInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly eraId: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerRewardsHavingDistinctCountInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly eraId: InputMaybe<HavingBigfloatFilter>;
};

/** Conditions for `IndexerReward` aggregates. */
export type IndexerRewardsHavingInput = {
  readonly AND: InputMaybe<ReadonlyArray<IndexerRewardsHavingInput>>;
  readonly OR: InputMaybe<ReadonlyArray<IndexerRewardsHavingInput>>;
  readonly average: InputMaybe<IndexerRewardsHavingAverageInput>;
  readonly distinctCount: InputMaybe<IndexerRewardsHavingDistinctCountInput>;
  readonly max: InputMaybe<IndexerRewardsHavingMaxInput>;
  readonly min: InputMaybe<IndexerRewardsHavingMinInput>;
  readonly stddevPopulation: InputMaybe<IndexerRewardsHavingStddevPopulationInput>;
  readonly stddevSample: InputMaybe<IndexerRewardsHavingStddevSampleInput>;
  readonly sum: InputMaybe<IndexerRewardsHavingSumInput>;
  readonly variancePopulation: InputMaybe<IndexerRewardsHavingVariancePopulationInput>;
  readonly varianceSample: InputMaybe<IndexerRewardsHavingVarianceSampleInput>;
};

export type IndexerRewardsHavingMaxInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly eraId: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerRewardsHavingMinInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly eraId: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerRewardsHavingStddevPopulationInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly eraId: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerRewardsHavingStddevSampleInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly eraId: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerRewardsHavingSumInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly eraId: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerRewardsHavingVariancePopulationInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly eraId: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerRewardsHavingVarianceSampleInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly eraId: InputMaybe<HavingBigfloatFilter>;
};

/** Methods to use when ordering `IndexerReward`. */
export enum IndexerRewardsOrderBy {
  AMOUNT_ASC = 'AMOUNT_ASC',
  AMOUNT_DESC = 'AMOUNT_DESC',
  CREATED_BLOCK_ASC = 'CREATED_BLOCK_ASC',
  CREATED_BLOCK_DESC = 'CREATED_BLOCK_DESC',
  ERA_IDX_ASC = 'ERA_IDX_ASC',
  ERA_IDX_DESC = 'ERA_IDX_DESC',
  ERA_ID_ASC = 'ERA_ID_ASC',
  ERA_ID_DESC = 'ERA_ID_DESC',
  ID_ASC = 'ID_ASC',
  ID_DESC = 'ID_DESC',
  INDEXER_BY_INDEXER_ID__ACTIVE_ASC = 'INDEXER_BY_INDEXER_ID__ACTIVE_ASC',
  INDEXER_BY_INDEXER_ID__ACTIVE_DESC = 'INDEXER_BY_INDEXER_ID__ACTIVE_DESC',
  INDEXER_BY_INDEXER_ID__CAPACITY_ASC = 'INDEXER_BY_INDEXER_ID__CAPACITY_ASC',
  INDEXER_BY_INDEXER_ID__CAPACITY_DESC = 'INDEXER_BY_INDEXER_ID__CAPACITY_DESC',
  INDEXER_BY_INDEXER_ID__COMMISSION_ASC = 'INDEXER_BY_INDEXER_ID__COMMISSION_ASC',
  INDEXER_BY_INDEXER_ID__COMMISSION_DESC = 'INDEXER_BY_INDEXER_ID__COMMISSION_DESC',
  INDEXER_BY_INDEXER_ID__CONTROLLER_ASC = 'INDEXER_BY_INDEXER_ID__CONTROLLER_ASC',
  INDEXER_BY_INDEXER_ID__CONTROLLER_DESC = 'INDEXER_BY_INDEXER_ID__CONTROLLER_DESC',
  INDEXER_BY_INDEXER_ID__CREATED_BLOCK_ASC = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_ASC',
  INDEXER_BY_INDEXER_ID__CREATED_BLOCK_DESC = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_DESC',
  INDEXER_BY_INDEXER_ID__ID_ASC = 'INDEXER_BY_INDEXER_ID__ID_ASC',
  INDEXER_BY_INDEXER_ID__ID_DESC = 'INDEXER_BY_INDEXER_ID__ID_DESC',
  INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_ASC = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_ASC',
  INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_DESC = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_DESC',
  INDEXER_BY_INDEXER_ID__LAST_EVENT_ASC = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_ASC',
  INDEXER_BY_INDEXER_ID__LAST_EVENT_DESC = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_DESC',
  INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_ASC = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_ASC',
  INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_DESC = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_DESC',
  INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_ASC = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_ASC',
  INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_DESC = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_DESC',
  INDEXER_BY_INDEXER_ID__METADATA_ASC = 'INDEXER_BY_INDEXER_ID__METADATA_ASC',
  INDEXER_BY_INDEXER_ID__METADATA_DESC = 'INDEXER_BY_INDEXER_ID__METADATA_DESC',
  INDEXER_BY_INDEXER_ID__SELF_STAKE_ASC = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_ASC',
  INDEXER_BY_INDEXER_ID__SELF_STAKE_DESC = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_DESC',
  INDEXER_BY_INDEXER_ID__TOTAL_STAKE_ASC = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_ASC',
  INDEXER_BY_INDEXER_ID__TOTAL_STAKE_DESC = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_DESC',
  INDEXER_ID_ASC = 'INDEXER_ID_ASC',
  INDEXER_ID_DESC = 'INDEXER_ID_DESC',
  LAST_EVENT_ASC = 'LAST_EVENT_ASC',
  LAST_EVENT_DESC = 'LAST_EVENT_DESC',
  NATURAL = 'NATURAL',
  PRIMARY_KEY_ASC = 'PRIMARY_KEY_ASC',
  PRIMARY_KEY_DESC = 'PRIMARY_KEY_DESC',
}

/** A connection to a list of `ServiceAgreement` values, with data from `AcceptedOffer`. */
export type IndexerServiceAgreementsByAcceptedOfferIndexerIdAndServiceAgreementIdManyToManyConnection = {
  readonly __typename: 'IndexerServiceAgreementsByAcceptedOfferIndexerIdAndServiceAgreementIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<ServiceAgreementAggregates>;
  /** A list of edges which contains the `ServiceAgreement`, info from the `AcceptedOffer`, and the cursor to aid in pagination. */
  readonly edges: ReadonlyArray<IndexerServiceAgreementsByAcceptedOfferIndexerIdAndServiceAgreementIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<ServiceAgreementAggregates>>;
  /** A list of `ServiceAgreement` objects. */
  readonly nodes: ReadonlyArray<Maybe<ServiceAgreement>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `ServiceAgreement` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `ServiceAgreement` values, with data from `AcceptedOffer`. */
export type IndexerServiceAgreementsByAcceptedOfferIndexerIdAndServiceAgreementIdManyToManyConnectionGroupedAggregatesArgs =
  {
    groupBy: ReadonlyArray<ServiceAgreementsGroupBy>;
    having: InputMaybe<ServiceAgreementsHavingInput>;
  };

/** A `ServiceAgreement` edge in the connection, with data from `AcceptedOffer`. */
export type IndexerServiceAgreementsByAcceptedOfferIndexerIdAndServiceAgreementIdManyToManyEdge = {
  readonly __typename: 'IndexerServiceAgreementsByAcceptedOfferIndexerIdAndServiceAgreementIdManyToManyEdge';
  /** Reads and enables pagination through a set of `AcceptedOffer`. */
  readonly acceptedOffers: AcceptedOffersConnection;
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `ServiceAgreement` at the end of the edge. */
  readonly node: Maybe<ServiceAgreement>;
};

/** A `ServiceAgreement` edge in the connection, with data from `AcceptedOffer`. */
export type IndexerServiceAgreementsByAcceptedOfferIndexerIdAndServiceAgreementIdManyToManyEdgeAcceptedOffersArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Accepted_Offers_Distinct_Enum>>>;
  filter: InputMaybe<AcceptedOfferFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<AcceptedOffersOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type IndexerStake = Node & {
  readonly __typename: 'IndexerStake';
  readonly delegatorStake: Scalars['BigFloat']['output'];
  /** Reads a single `Era` that is related to this `IndexerStake`. */
  readonly era: Maybe<Era>;
  readonly eraId: Scalars['String']['output'];
  readonly eraIdx: Scalars['Int']['output'];
  readonly id: Scalars['String']['output'];
  /** Reads a single `Indexer` that is related to this `IndexerStake`. */
  readonly indexer: Maybe<Indexer>;
  readonly indexerId: Scalars['String']['output'];
  readonly indexerStake: Scalars['BigFloat']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  readonly nodeId: Scalars['ID']['output'];
  readonly totalStake: Scalars['BigFloat']['output'];
};

export type IndexerStakeAggregates = {
  readonly __typename: 'IndexerStakeAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly average: Maybe<IndexerStakeAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly distinctCount: Maybe<IndexerStakeDistinctCountAggregates>;
  readonly keys: Maybe<ReadonlyArray<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly max: Maybe<IndexerStakeMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly min: Maybe<IndexerStakeMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevPopulation: Maybe<IndexerStakeStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevSample: Maybe<IndexerStakeStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly sum: Maybe<IndexerStakeSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly variancePopulation: Maybe<IndexerStakeVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly varianceSample: Maybe<IndexerStakeVarianceSampleAggregates>;
};

/** A filter to be used against aggregates of `IndexerStake` object types. */
export type IndexerStakeAggregatesFilter = {
  /** Mean average aggregate over matching `IndexerStake` objects. */
  readonly average: InputMaybe<IndexerStakeAverageAggregateFilter>;
  /** Distinct count aggregate over matching `IndexerStake` objects. */
  readonly distinctCount: InputMaybe<IndexerStakeDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `IndexerStake` object to be included within the aggregate. */
  readonly filter: InputMaybe<IndexerStakeFilter>;
  /** Maximum aggregate over matching `IndexerStake` objects. */
  readonly max: InputMaybe<IndexerStakeMaxAggregateFilter>;
  /** Minimum aggregate over matching `IndexerStake` objects. */
  readonly min: InputMaybe<IndexerStakeMinAggregateFilter>;
  /** Population standard deviation aggregate over matching `IndexerStake` objects. */
  readonly stddevPopulation: InputMaybe<IndexerStakeStddevPopulationAggregateFilter>;
  /** Sample standard deviation aggregate over matching `IndexerStake` objects. */
  readonly stddevSample: InputMaybe<IndexerStakeStddevSampleAggregateFilter>;
  /** Sum aggregate over matching `IndexerStake` objects. */
  readonly sum: InputMaybe<IndexerStakeSumAggregateFilter>;
  /** Population variance aggregate over matching `IndexerStake` objects. */
  readonly variancePopulation: InputMaybe<IndexerStakeVariancePopulationAggregateFilter>;
  /** Sample variance aggregate over matching `IndexerStake` objects. */
  readonly varianceSample: InputMaybe<IndexerStakeVarianceSampleAggregateFilter>;
};

export type IndexerStakeAverageAggregateFilter = {
  readonly delegatorStake: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigFloatFilter>;
  readonly indexerStake: InputMaybe<BigFloatFilter>;
  readonly totalStake: InputMaybe<BigFloatFilter>;
};

export type IndexerStakeAverageAggregates = {
  readonly __typename: 'IndexerStakeAverageAggregates';
  /** Mean average of delegatorStake across the matching connection */
  readonly delegatorStake: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of indexerStake across the matching connection */
  readonly indexerStake: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of totalStake across the matching connection */
  readonly totalStake: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerStakeDistinctCountAggregateFilter = {
  readonly _blockRange: InputMaybe<BigIntFilter>;
  readonly _id: InputMaybe<BigIntFilter>;
  readonly delegatorStake: InputMaybe<BigIntFilter>;
  readonly eraId: InputMaybe<BigIntFilter>;
  readonly eraIdx: InputMaybe<BigIntFilter>;
  readonly id: InputMaybe<BigIntFilter>;
  readonly indexerId: InputMaybe<BigIntFilter>;
  readonly indexerStake: InputMaybe<BigIntFilter>;
  readonly totalStake: InputMaybe<BigIntFilter>;
};

export type IndexerStakeDistinctCountAggregates = {
  readonly __typename: 'IndexerStakeDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  readonly _blockRange: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  readonly _id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of delegatorStake across the matching connection */
  readonly delegatorStake: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of eraId across the matching connection */
  readonly eraId: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  readonly id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of indexerId across the matching connection */
  readonly indexerId: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of indexerStake across the matching connection */
  readonly indexerStake: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of totalStake across the matching connection */
  readonly totalStake: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `IndexerStake` object types. All fields are combined with a logical ‘and.’ */
export type IndexerStakeFilter = {
  /** Checks for all expressions in this list. */
  readonly and: InputMaybe<ReadonlyArray<IndexerStakeFilter>>;
  /** Filter by the object’s `delegatorStake` field. */
  readonly delegatorStake: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `era` relation. */
  readonly era: InputMaybe<EraFilter>;
  /** Filter by the object’s `eraId` field. */
  readonly eraId: InputMaybe<StringFilter>;
  /** Filter by the object’s `eraIdx` field. */
  readonly eraIdx: InputMaybe<IntFilter>;
  /** Filter by the object’s `id` field. */
  readonly id: InputMaybe<StringFilter>;
  /** Filter by the object’s `indexer` relation. */
  readonly indexer: InputMaybe<IndexerFilter>;
  /** Filter by the object’s `indexerId` field. */
  readonly indexerId: InputMaybe<StringFilter>;
  /** Filter by the object’s `indexerStake` field. */
  readonly indexerStake: InputMaybe<BigFloatFilter>;
  /** Negates the expression. */
  readonly not: InputMaybe<IndexerStakeFilter>;
  /** Checks for any expressions in this list. */
  readonly or: InputMaybe<ReadonlyArray<IndexerStakeFilter>>;
  /** Filter by the object’s `totalStake` field. */
  readonly totalStake: InputMaybe<BigFloatFilter>;
};

export type IndexerStakeMaxAggregateFilter = {
  readonly delegatorStake: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<IntFilter>;
  readonly indexerStake: InputMaybe<BigFloatFilter>;
  readonly totalStake: InputMaybe<BigFloatFilter>;
};

export type IndexerStakeMaxAggregates = {
  readonly __typename: 'IndexerStakeMaxAggregates';
  /** Maximum of delegatorStake across the matching connection */
  readonly delegatorStake: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['Int']['output']>;
  /** Maximum of indexerStake across the matching connection */
  readonly indexerStake: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of totalStake across the matching connection */
  readonly totalStake: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerStakeMinAggregateFilter = {
  readonly delegatorStake: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<IntFilter>;
  readonly indexerStake: InputMaybe<BigFloatFilter>;
  readonly totalStake: InputMaybe<BigFloatFilter>;
};

export type IndexerStakeMinAggregates = {
  readonly __typename: 'IndexerStakeMinAggregates';
  /** Minimum of delegatorStake across the matching connection */
  readonly delegatorStake: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['Int']['output']>;
  /** Minimum of indexerStake across the matching connection */
  readonly indexerStake: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of totalStake across the matching connection */
  readonly totalStake: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerStakeStddevPopulationAggregateFilter = {
  readonly delegatorStake: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigFloatFilter>;
  readonly indexerStake: InputMaybe<BigFloatFilter>;
  readonly totalStake: InputMaybe<BigFloatFilter>;
};

export type IndexerStakeStddevPopulationAggregates = {
  readonly __typename: 'IndexerStakeStddevPopulationAggregates';
  /** Population standard deviation of delegatorStake across the matching connection */
  readonly delegatorStake: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of indexerStake across the matching connection */
  readonly indexerStake: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of totalStake across the matching connection */
  readonly totalStake: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerStakeStddevSampleAggregateFilter = {
  readonly delegatorStake: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigFloatFilter>;
  readonly indexerStake: InputMaybe<BigFloatFilter>;
  readonly totalStake: InputMaybe<BigFloatFilter>;
};

export type IndexerStakeStddevSampleAggregates = {
  readonly __typename: 'IndexerStakeStddevSampleAggregates';
  /** Sample standard deviation of delegatorStake across the matching connection */
  readonly delegatorStake: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of indexerStake across the matching connection */
  readonly indexerStake: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of totalStake across the matching connection */
  readonly totalStake: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerStakeSumAggregateFilter = {
  readonly delegatorStake: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigIntFilter>;
  readonly indexerStake: InputMaybe<BigFloatFilter>;
  readonly totalStake: InputMaybe<BigFloatFilter>;
};

export type IndexerStakeSumAggregates = {
  readonly __typename: 'IndexerStakeSumAggregates';
  /** Sum of delegatorStake across the matching connection */
  readonly delegatorStake: Scalars['BigFloat']['output'];
  /** Sum of eraIdx across the matching connection */
  readonly eraIdx: Scalars['BigInt']['output'];
  /** Sum of indexerStake across the matching connection */
  readonly indexerStake: Scalars['BigFloat']['output'];
  /** Sum of totalStake across the matching connection */
  readonly totalStake: Scalars['BigFloat']['output'];
};

/** A connection to a list of `IndexerStakeSummary` values. */
export type IndexerStakeSummariesConnection = {
  readonly __typename: 'IndexerStakeSummariesConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<IndexerStakeSummaryAggregates>;
  /** A list of edges which contains the `IndexerStakeSummary` and cursor to aid in pagination. */
  readonly edges: ReadonlyArray<IndexerStakeSummariesEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<IndexerStakeSummaryAggregates>>;
  /** A list of `IndexerStakeSummary` objects. */
  readonly nodes: ReadonlyArray<Maybe<IndexerStakeSummary>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `IndexerStakeSummary` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `IndexerStakeSummary` values. */
export type IndexerStakeSummariesConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<IndexerStakeSummariesGroupBy>;
  having: InputMaybe<IndexerStakeSummariesHavingInput>;
};

/** A `IndexerStakeSummary` edge in the connection. */
export type IndexerStakeSummariesEdge = {
  readonly __typename: 'IndexerStakeSummariesEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `IndexerStakeSummary` at the end of the edge. */
  readonly node: Maybe<IndexerStakeSummary>;
};

/** Grouping methods for `IndexerStakeSummary` for usage during aggregation. */
export enum IndexerStakeSummariesGroupBy {
  DELEGATOR_STAKE = 'DELEGATOR_STAKE',
  ERA_ID = 'ERA_ID',
  ERA_IDX = 'ERA_IDX',
  ID = 'ID',
  INDEXER_STAKE = 'INDEXER_STAKE',
  NEXT_DELEGATOR_STAKE = 'NEXT_DELEGATOR_STAKE',
  NEXT_INDEXER_STAKE = 'NEXT_INDEXER_STAKE',
  NEXT_TOTAL_STAKE = 'NEXT_TOTAL_STAKE',
  TOTAL_STAKE = 'TOTAL_STAKE',
}

export type IndexerStakeSummariesHavingAverageInput = {
  readonly delegatorStake: InputMaybe<HavingBigfloatFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly indexerStake: InputMaybe<HavingBigfloatFilter>;
  readonly nextDelegatorStake: InputMaybe<HavingBigfloatFilter>;
  readonly nextIndexerStake: InputMaybe<HavingBigfloatFilter>;
  readonly nextTotalStake: InputMaybe<HavingBigfloatFilter>;
  readonly totalStake: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerStakeSummariesHavingDistinctCountInput = {
  readonly delegatorStake: InputMaybe<HavingBigfloatFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly indexerStake: InputMaybe<HavingBigfloatFilter>;
  readonly nextDelegatorStake: InputMaybe<HavingBigfloatFilter>;
  readonly nextIndexerStake: InputMaybe<HavingBigfloatFilter>;
  readonly nextTotalStake: InputMaybe<HavingBigfloatFilter>;
  readonly totalStake: InputMaybe<HavingBigfloatFilter>;
};

/** Conditions for `IndexerStakeSummary` aggregates. */
export type IndexerStakeSummariesHavingInput = {
  readonly AND: InputMaybe<ReadonlyArray<IndexerStakeSummariesHavingInput>>;
  readonly OR: InputMaybe<ReadonlyArray<IndexerStakeSummariesHavingInput>>;
  readonly average: InputMaybe<IndexerStakeSummariesHavingAverageInput>;
  readonly distinctCount: InputMaybe<IndexerStakeSummariesHavingDistinctCountInput>;
  readonly max: InputMaybe<IndexerStakeSummariesHavingMaxInput>;
  readonly min: InputMaybe<IndexerStakeSummariesHavingMinInput>;
  readonly stddevPopulation: InputMaybe<IndexerStakeSummariesHavingStddevPopulationInput>;
  readonly stddevSample: InputMaybe<IndexerStakeSummariesHavingStddevSampleInput>;
  readonly sum: InputMaybe<IndexerStakeSummariesHavingSumInput>;
  readonly variancePopulation: InputMaybe<IndexerStakeSummariesHavingVariancePopulationInput>;
  readonly varianceSample: InputMaybe<IndexerStakeSummariesHavingVarianceSampleInput>;
};

export type IndexerStakeSummariesHavingMaxInput = {
  readonly delegatorStake: InputMaybe<HavingBigfloatFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly indexerStake: InputMaybe<HavingBigfloatFilter>;
  readonly nextDelegatorStake: InputMaybe<HavingBigfloatFilter>;
  readonly nextIndexerStake: InputMaybe<HavingBigfloatFilter>;
  readonly nextTotalStake: InputMaybe<HavingBigfloatFilter>;
  readonly totalStake: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerStakeSummariesHavingMinInput = {
  readonly delegatorStake: InputMaybe<HavingBigfloatFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly indexerStake: InputMaybe<HavingBigfloatFilter>;
  readonly nextDelegatorStake: InputMaybe<HavingBigfloatFilter>;
  readonly nextIndexerStake: InputMaybe<HavingBigfloatFilter>;
  readonly nextTotalStake: InputMaybe<HavingBigfloatFilter>;
  readonly totalStake: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerStakeSummariesHavingStddevPopulationInput = {
  readonly delegatorStake: InputMaybe<HavingBigfloatFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly indexerStake: InputMaybe<HavingBigfloatFilter>;
  readonly nextDelegatorStake: InputMaybe<HavingBigfloatFilter>;
  readonly nextIndexerStake: InputMaybe<HavingBigfloatFilter>;
  readonly nextTotalStake: InputMaybe<HavingBigfloatFilter>;
  readonly totalStake: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerStakeSummariesHavingStddevSampleInput = {
  readonly delegatorStake: InputMaybe<HavingBigfloatFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly indexerStake: InputMaybe<HavingBigfloatFilter>;
  readonly nextDelegatorStake: InputMaybe<HavingBigfloatFilter>;
  readonly nextIndexerStake: InputMaybe<HavingBigfloatFilter>;
  readonly nextTotalStake: InputMaybe<HavingBigfloatFilter>;
  readonly totalStake: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerStakeSummariesHavingSumInput = {
  readonly delegatorStake: InputMaybe<HavingBigfloatFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly indexerStake: InputMaybe<HavingBigfloatFilter>;
  readonly nextDelegatorStake: InputMaybe<HavingBigfloatFilter>;
  readonly nextIndexerStake: InputMaybe<HavingBigfloatFilter>;
  readonly nextTotalStake: InputMaybe<HavingBigfloatFilter>;
  readonly totalStake: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerStakeSummariesHavingVariancePopulationInput = {
  readonly delegatorStake: InputMaybe<HavingBigfloatFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly indexerStake: InputMaybe<HavingBigfloatFilter>;
  readonly nextDelegatorStake: InputMaybe<HavingBigfloatFilter>;
  readonly nextIndexerStake: InputMaybe<HavingBigfloatFilter>;
  readonly nextTotalStake: InputMaybe<HavingBigfloatFilter>;
  readonly totalStake: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerStakeSummariesHavingVarianceSampleInput = {
  readonly delegatorStake: InputMaybe<HavingBigfloatFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly indexerStake: InputMaybe<HavingBigfloatFilter>;
  readonly nextDelegatorStake: InputMaybe<HavingBigfloatFilter>;
  readonly nextIndexerStake: InputMaybe<HavingBigfloatFilter>;
  readonly nextTotalStake: InputMaybe<HavingBigfloatFilter>;
  readonly totalStake: InputMaybe<HavingBigfloatFilter>;
};

/** Methods to use when ordering `IndexerStakeSummary`. */
export enum IndexerStakeSummariesOrderBy {
  DELEGATOR_STAKE_ASC = 'DELEGATOR_STAKE_ASC',
  DELEGATOR_STAKE_DESC = 'DELEGATOR_STAKE_DESC',
  ERA_BY_ERA_ID__CREATED_BLOCK_ASC = 'ERA_BY_ERA_ID__CREATED_BLOCK_ASC',
  ERA_BY_ERA_ID__CREATED_BLOCK_DESC = 'ERA_BY_ERA_ID__CREATED_BLOCK_DESC',
  ERA_BY_ERA_ID__END_TIME_ASC = 'ERA_BY_ERA_ID__END_TIME_ASC',
  ERA_BY_ERA_ID__END_TIME_DESC = 'ERA_BY_ERA_ID__END_TIME_DESC',
  ERA_BY_ERA_ID__ERA_PERIOD_ASC = 'ERA_BY_ERA_ID__ERA_PERIOD_ASC',
  ERA_BY_ERA_ID__ERA_PERIOD_DESC = 'ERA_BY_ERA_ID__ERA_PERIOD_DESC',
  ERA_BY_ERA_ID__FORCE_NEXT_ASC = 'ERA_BY_ERA_ID__FORCE_NEXT_ASC',
  ERA_BY_ERA_ID__FORCE_NEXT_DESC = 'ERA_BY_ERA_ID__FORCE_NEXT_DESC',
  ERA_BY_ERA_ID__ID_ASC = 'ERA_BY_ERA_ID__ID_ASC',
  ERA_BY_ERA_ID__ID_DESC = 'ERA_BY_ERA_ID__ID_DESC',
  ERA_BY_ERA_ID__LAST_EVENT_ASC = 'ERA_BY_ERA_ID__LAST_EVENT_ASC',
  ERA_BY_ERA_ID__LAST_EVENT_DESC = 'ERA_BY_ERA_ID__LAST_EVENT_DESC',
  ERA_BY_ERA_ID__START_TIME_ASC = 'ERA_BY_ERA_ID__START_TIME_ASC',
  ERA_BY_ERA_ID__START_TIME_DESC = 'ERA_BY_ERA_ID__START_TIME_DESC',
  ERA_IDX_ASC = 'ERA_IDX_ASC',
  ERA_IDX_DESC = 'ERA_IDX_DESC',
  ERA_ID_ASC = 'ERA_ID_ASC',
  ERA_ID_DESC = 'ERA_ID_DESC',
  ID_ASC = 'ID_ASC',
  ID_DESC = 'ID_DESC',
  INDEXER_STAKE_ASC = 'INDEXER_STAKE_ASC',
  INDEXER_STAKE_DESC = 'INDEXER_STAKE_DESC',
  NATURAL = 'NATURAL',
  NEXT_DELEGATOR_STAKE_ASC = 'NEXT_DELEGATOR_STAKE_ASC',
  NEXT_DELEGATOR_STAKE_DESC = 'NEXT_DELEGATOR_STAKE_DESC',
  NEXT_INDEXER_STAKE_ASC = 'NEXT_INDEXER_STAKE_ASC',
  NEXT_INDEXER_STAKE_DESC = 'NEXT_INDEXER_STAKE_DESC',
  NEXT_TOTAL_STAKE_ASC = 'NEXT_TOTAL_STAKE_ASC',
  NEXT_TOTAL_STAKE_DESC = 'NEXT_TOTAL_STAKE_DESC',
  PRIMARY_KEY_ASC = 'PRIMARY_KEY_ASC',
  PRIMARY_KEY_DESC = 'PRIMARY_KEY_DESC',
  TOTAL_STAKE_ASC = 'TOTAL_STAKE_ASC',
  TOTAL_STAKE_DESC = 'TOTAL_STAKE_DESC',
}

export type IndexerStakeSummary = Node & {
  readonly __typename: 'IndexerStakeSummary';
  readonly delegatorStake: Scalars['BigFloat']['output'];
  /** Reads a single `Era` that is related to this `IndexerStakeSummary`. */
  readonly era: Maybe<Era>;
  readonly eraId: Scalars['String']['output'];
  readonly eraIdx: Scalars['Int']['output'];
  readonly id: Scalars['String']['output'];
  readonly indexerStake: Scalars['BigFloat']['output'];
  readonly nextDelegatorStake: Scalars['BigFloat']['output'];
  readonly nextIndexerStake: Scalars['BigFloat']['output'];
  readonly nextTotalStake: Scalars['BigFloat']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  readonly nodeId: Scalars['ID']['output'];
  readonly totalStake: Scalars['BigFloat']['output'];
};

export type IndexerStakeSummaryAggregates = {
  readonly __typename: 'IndexerStakeSummaryAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly average: Maybe<IndexerStakeSummaryAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly distinctCount: Maybe<IndexerStakeSummaryDistinctCountAggregates>;
  readonly keys: Maybe<ReadonlyArray<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly max: Maybe<IndexerStakeSummaryMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly min: Maybe<IndexerStakeSummaryMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevPopulation: Maybe<IndexerStakeSummaryStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevSample: Maybe<IndexerStakeSummaryStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly sum: Maybe<IndexerStakeSummarySumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly variancePopulation: Maybe<IndexerStakeSummaryVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly varianceSample: Maybe<IndexerStakeSummaryVarianceSampleAggregates>;
};

/** A filter to be used against aggregates of `IndexerStakeSummary` object types. */
export type IndexerStakeSummaryAggregatesFilter = {
  /** Mean average aggregate over matching `IndexerStakeSummary` objects. */
  readonly average: InputMaybe<IndexerStakeSummaryAverageAggregateFilter>;
  /** Distinct count aggregate over matching `IndexerStakeSummary` objects. */
  readonly distinctCount: InputMaybe<IndexerStakeSummaryDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `IndexerStakeSummary` object to be included within the aggregate. */
  readonly filter: InputMaybe<IndexerStakeSummaryFilter>;
  /** Maximum aggregate over matching `IndexerStakeSummary` objects. */
  readonly max: InputMaybe<IndexerStakeSummaryMaxAggregateFilter>;
  /** Minimum aggregate over matching `IndexerStakeSummary` objects. */
  readonly min: InputMaybe<IndexerStakeSummaryMinAggregateFilter>;
  /** Population standard deviation aggregate over matching `IndexerStakeSummary` objects. */
  readonly stddevPopulation: InputMaybe<IndexerStakeSummaryStddevPopulationAggregateFilter>;
  /** Sample standard deviation aggregate over matching `IndexerStakeSummary` objects. */
  readonly stddevSample: InputMaybe<IndexerStakeSummaryStddevSampleAggregateFilter>;
  /** Sum aggregate over matching `IndexerStakeSummary` objects. */
  readonly sum: InputMaybe<IndexerStakeSummarySumAggregateFilter>;
  /** Population variance aggregate over matching `IndexerStakeSummary` objects. */
  readonly variancePopulation: InputMaybe<IndexerStakeSummaryVariancePopulationAggregateFilter>;
  /** Sample variance aggregate over matching `IndexerStakeSummary` objects. */
  readonly varianceSample: InputMaybe<IndexerStakeSummaryVarianceSampleAggregateFilter>;
};

export type IndexerStakeSummaryAverageAggregateFilter = {
  readonly delegatorStake: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigFloatFilter>;
  readonly indexerStake: InputMaybe<BigFloatFilter>;
  readonly nextDelegatorStake: InputMaybe<BigFloatFilter>;
  readonly nextIndexerStake: InputMaybe<BigFloatFilter>;
  readonly nextTotalStake: InputMaybe<BigFloatFilter>;
  readonly totalStake: InputMaybe<BigFloatFilter>;
};

export type IndexerStakeSummaryAverageAggregates = {
  readonly __typename: 'IndexerStakeSummaryAverageAggregates';
  /** Mean average of delegatorStake across the matching connection */
  readonly delegatorStake: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of indexerStake across the matching connection */
  readonly indexerStake: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of nextDelegatorStake across the matching connection */
  readonly nextDelegatorStake: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of nextIndexerStake across the matching connection */
  readonly nextIndexerStake: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of nextTotalStake across the matching connection */
  readonly nextTotalStake: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of totalStake across the matching connection */
  readonly totalStake: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerStakeSummaryDistinctCountAggregateFilter = {
  readonly _blockRange: InputMaybe<BigIntFilter>;
  readonly _id: InputMaybe<BigIntFilter>;
  readonly delegatorStake: InputMaybe<BigIntFilter>;
  readonly eraId: InputMaybe<BigIntFilter>;
  readonly eraIdx: InputMaybe<BigIntFilter>;
  readonly id: InputMaybe<BigIntFilter>;
  readonly indexerStake: InputMaybe<BigIntFilter>;
  readonly nextDelegatorStake: InputMaybe<BigIntFilter>;
  readonly nextIndexerStake: InputMaybe<BigIntFilter>;
  readonly nextTotalStake: InputMaybe<BigIntFilter>;
  readonly totalStake: InputMaybe<BigIntFilter>;
};

export type IndexerStakeSummaryDistinctCountAggregates = {
  readonly __typename: 'IndexerStakeSummaryDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  readonly _blockRange: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  readonly _id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of delegatorStake across the matching connection */
  readonly delegatorStake: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of eraId across the matching connection */
  readonly eraId: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  readonly id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of indexerStake across the matching connection */
  readonly indexerStake: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of nextDelegatorStake across the matching connection */
  readonly nextDelegatorStake: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of nextIndexerStake across the matching connection */
  readonly nextIndexerStake: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of nextTotalStake across the matching connection */
  readonly nextTotalStake: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of totalStake across the matching connection */
  readonly totalStake: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `IndexerStakeSummary` object types. All fields are combined with a logical ‘and.’ */
export type IndexerStakeSummaryFilter = {
  /** Checks for all expressions in this list. */
  readonly and: InputMaybe<ReadonlyArray<IndexerStakeSummaryFilter>>;
  /** Filter by the object’s `delegatorStake` field. */
  readonly delegatorStake: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `era` relation. */
  readonly era: InputMaybe<EraFilter>;
  /** Filter by the object’s `eraId` field. */
  readonly eraId: InputMaybe<StringFilter>;
  /** Filter by the object’s `eraIdx` field. */
  readonly eraIdx: InputMaybe<IntFilter>;
  /** Filter by the object’s `id` field. */
  readonly id: InputMaybe<StringFilter>;
  /** Filter by the object’s `indexerStake` field. */
  readonly indexerStake: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `nextDelegatorStake` field. */
  readonly nextDelegatorStake: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `nextIndexerStake` field. */
  readonly nextIndexerStake: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `nextTotalStake` field. */
  readonly nextTotalStake: InputMaybe<BigFloatFilter>;
  /** Negates the expression. */
  readonly not: InputMaybe<IndexerStakeSummaryFilter>;
  /** Checks for any expressions in this list. */
  readonly or: InputMaybe<ReadonlyArray<IndexerStakeSummaryFilter>>;
  /** Filter by the object’s `totalStake` field. */
  readonly totalStake: InputMaybe<BigFloatFilter>;
};

export type IndexerStakeSummaryMaxAggregateFilter = {
  readonly delegatorStake: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<IntFilter>;
  readonly indexerStake: InputMaybe<BigFloatFilter>;
  readonly nextDelegatorStake: InputMaybe<BigFloatFilter>;
  readonly nextIndexerStake: InputMaybe<BigFloatFilter>;
  readonly nextTotalStake: InputMaybe<BigFloatFilter>;
  readonly totalStake: InputMaybe<BigFloatFilter>;
};

export type IndexerStakeSummaryMaxAggregates = {
  readonly __typename: 'IndexerStakeSummaryMaxAggregates';
  /** Maximum of delegatorStake across the matching connection */
  readonly delegatorStake: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['Int']['output']>;
  /** Maximum of indexerStake across the matching connection */
  readonly indexerStake: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of nextDelegatorStake across the matching connection */
  readonly nextDelegatorStake: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of nextIndexerStake across the matching connection */
  readonly nextIndexerStake: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of nextTotalStake across the matching connection */
  readonly nextTotalStake: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of totalStake across the matching connection */
  readonly totalStake: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerStakeSummaryMinAggregateFilter = {
  readonly delegatorStake: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<IntFilter>;
  readonly indexerStake: InputMaybe<BigFloatFilter>;
  readonly nextDelegatorStake: InputMaybe<BigFloatFilter>;
  readonly nextIndexerStake: InputMaybe<BigFloatFilter>;
  readonly nextTotalStake: InputMaybe<BigFloatFilter>;
  readonly totalStake: InputMaybe<BigFloatFilter>;
};

export type IndexerStakeSummaryMinAggregates = {
  readonly __typename: 'IndexerStakeSummaryMinAggregates';
  /** Minimum of delegatorStake across the matching connection */
  readonly delegatorStake: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['Int']['output']>;
  /** Minimum of indexerStake across the matching connection */
  readonly indexerStake: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of nextDelegatorStake across the matching connection */
  readonly nextDelegatorStake: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of nextIndexerStake across the matching connection */
  readonly nextIndexerStake: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of nextTotalStake across the matching connection */
  readonly nextTotalStake: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of totalStake across the matching connection */
  readonly totalStake: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerStakeSummaryStddevPopulationAggregateFilter = {
  readonly delegatorStake: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigFloatFilter>;
  readonly indexerStake: InputMaybe<BigFloatFilter>;
  readonly nextDelegatorStake: InputMaybe<BigFloatFilter>;
  readonly nextIndexerStake: InputMaybe<BigFloatFilter>;
  readonly nextTotalStake: InputMaybe<BigFloatFilter>;
  readonly totalStake: InputMaybe<BigFloatFilter>;
};

export type IndexerStakeSummaryStddevPopulationAggregates = {
  readonly __typename: 'IndexerStakeSummaryStddevPopulationAggregates';
  /** Population standard deviation of delegatorStake across the matching connection */
  readonly delegatorStake: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of indexerStake across the matching connection */
  readonly indexerStake: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of nextDelegatorStake across the matching connection */
  readonly nextDelegatorStake: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of nextIndexerStake across the matching connection */
  readonly nextIndexerStake: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of nextTotalStake across the matching connection */
  readonly nextTotalStake: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of totalStake across the matching connection */
  readonly totalStake: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerStakeSummaryStddevSampleAggregateFilter = {
  readonly delegatorStake: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigFloatFilter>;
  readonly indexerStake: InputMaybe<BigFloatFilter>;
  readonly nextDelegatorStake: InputMaybe<BigFloatFilter>;
  readonly nextIndexerStake: InputMaybe<BigFloatFilter>;
  readonly nextTotalStake: InputMaybe<BigFloatFilter>;
  readonly totalStake: InputMaybe<BigFloatFilter>;
};

export type IndexerStakeSummaryStddevSampleAggregates = {
  readonly __typename: 'IndexerStakeSummaryStddevSampleAggregates';
  /** Sample standard deviation of delegatorStake across the matching connection */
  readonly delegatorStake: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of indexerStake across the matching connection */
  readonly indexerStake: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of nextDelegatorStake across the matching connection */
  readonly nextDelegatorStake: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of nextIndexerStake across the matching connection */
  readonly nextIndexerStake: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of nextTotalStake across the matching connection */
  readonly nextTotalStake: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of totalStake across the matching connection */
  readonly totalStake: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerStakeSummarySumAggregateFilter = {
  readonly delegatorStake: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigIntFilter>;
  readonly indexerStake: InputMaybe<BigFloatFilter>;
  readonly nextDelegatorStake: InputMaybe<BigFloatFilter>;
  readonly nextIndexerStake: InputMaybe<BigFloatFilter>;
  readonly nextTotalStake: InputMaybe<BigFloatFilter>;
  readonly totalStake: InputMaybe<BigFloatFilter>;
};

export type IndexerStakeSummarySumAggregates = {
  readonly __typename: 'IndexerStakeSummarySumAggregates';
  /** Sum of delegatorStake across the matching connection */
  readonly delegatorStake: Scalars['BigFloat']['output'];
  /** Sum of eraIdx across the matching connection */
  readonly eraIdx: Scalars['BigInt']['output'];
  /** Sum of indexerStake across the matching connection */
  readonly indexerStake: Scalars['BigFloat']['output'];
  /** Sum of nextDelegatorStake across the matching connection */
  readonly nextDelegatorStake: Scalars['BigFloat']['output'];
  /** Sum of nextIndexerStake across the matching connection */
  readonly nextIndexerStake: Scalars['BigFloat']['output'];
  /** Sum of nextTotalStake across the matching connection */
  readonly nextTotalStake: Scalars['BigFloat']['output'];
  /** Sum of totalStake across the matching connection */
  readonly totalStake: Scalars['BigFloat']['output'];
};

export type IndexerStakeSummaryVariancePopulationAggregateFilter = {
  readonly delegatorStake: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigFloatFilter>;
  readonly indexerStake: InputMaybe<BigFloatFilter>;
  readonly nextDelegatorStake: InputMaybe<BigFloatFilter>;
  readonly nextIndexerStake: InputMaybe<BigFloatFilter>;
  readonly nextTotalStake: InputMaybe<BigFloatFilter>;
  readonly totalStake: InputMaybe<BigFloatFilter>;
};

export type IndexerStakeSummaryVariancePopulationAggregates = {
  readonly __typename: 'IndexerStakeSummaryVariancePopulationAggregates';
  /** Population variance of delegatorStake across the matching connection */
  readonly delegatorStake: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of indexerStake across the matching connection */
  readonly indexerStake: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of nextDelegatorStake across the matching connection */
  readonly nextDelegatorStake: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of nextIndexerStake across the matching connection */
  readonly nextIndexerStake: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of nextTotalStake across the matching connection */
  readonly nextTotalStake: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of totalStake across the matching connection */
  readonly totalStake: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerStakeSummaryVarianceSampleAggregateFilter = {
  readonly delegatorStake: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigFloatFilter>;
  readonly indexerStake: InputMaybe<BigFloatFilter>;
  readonly nextDelegatorStake: InputMaybe<BigFloatFilter>;
  readonly nextIndexerStake: InputMaybe<BigFloatFilter>;
  readonly nextTotalStake: InputMaybe<BigFloatFilter>;
  readonly totalStake: InputMaybe<BigFloatFilter>;
};

export type IndexerStakeSummaryVarianceSampleAggregates = {
  readonly __typename: 'IndexerStakeSummaryVarianceSampleAggregates';
  /** Sample variance of delegatorStake across the matching connection */
  readonly delegatorStake: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of indexerStake across the matching connection */
  readonly indexerStake: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of nextDelegatorStake across the matching connection */
  readonly nextDelegatorStake: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of nextIndexerStake across the matching connection */
  readonly nextIndexerStake: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of nextTotalStake across the matching connection */
  readonly nextTotalStake: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of totalStake across the matching connection */
  readonly totalStake: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerStakeVariancePopulationAggregateFilter = {
  readonly delegatorStake: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigFloatFilter>;
  readonly indexerStake: InputMaybe<BigFloatFilter>;
  readonly totalStake: InputMaybe<BigFloatFilter>;
};

export type IndexerStakeVariancePopulationAggregates = {
  readonly __typename: 'IndexerStakeVariancePopulationAggregates';
  /** Population variance of delegatorStake across the matching connection */
  readonly delegatorStake: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of indexerStake across the matching connection */
  readonly indexerStake: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of totalStake across the matching connection */
  readonly totalStake: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerStakeVarianceSampleAggregateFilter = {
  readonly delegatorStake: InputMaybe<BigFloatFilter>;
  readonly eraIdx: InputMaybe<BigFloatFilter>;
  readonly indexerStake: InputMaybe<BigFloatFilter>;
  readonly totalStake: InputMaybe<BigFloatFilter>;
};

export type IndexerStakeVarianceSampleAggregates = {
  readonly __typename: 'IndexerStakeVarianceSampleAggregates';
  /** Sample variance of delegatorStake across the matching connection */
  readonly delegatorStake: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of indexerStake across the matching connection */
  readonly indexerStake: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of totalStake across the matching connection */
  readonly totalStake: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerStakeWeight = Node & {
  readonly __typename: 'IndexerStakeWeight';
  readonly createAt: Scalars['Datetime']['output'];
  readonly eraIdx: Scalars['Int']['output'];
  readonly id: Scalars['String']['output'];
  /** Reads a single `Indexer` that is related to this `IndexerStakeWeight`. */
  readonly indexer: Maybe<Indexer>;
  readonly indexerId: Scalars['String']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  readonly nodeId: Scalars['ID']['output'];
  readonly updateAt: Scalars['Datetime']['output'];
  readonly weight: Scalars['BigFloat']['output'];
};

export type IndexerStakeWeightAggregates = {
  readonly __typename: 'IndexerStakeWeightAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly average: Maybe<IndexerStakeWeightAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly distinctCount: Maybe<IndexerStakeWeightDistinctCountAggregates>;
  readonly keys: Maybe<ReadonlyArray<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly max: Maybe<IndexerStakeWeightMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly min: Maybe<IndexerStakeWeightMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevPopulation: Maybe<IndexerStakeWeightStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevSample: Maybe<IndexerStakeWeightStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly sum: Maybe<IndexerStakeWeightSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly variancePopulation: Maybe<IndexerStakeWeightVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly varianceSample: Maybe<IndexerStakeWeightVarianceSampleAggregates>;
};

/** A filter to be used against aggregates of `IndexerStakeWeight` object types. */
export type IndexerStakeWeightAggregatesFilter = {
  /** Mean average aggregate over matching `IndexerStakeWeight` objects. */
  readonly average: InputMaybe<IndexerStakeWeightAverageAggregateFilter>;
  /** Distinct count aggregate over matching `IndexerStakeWeight` objects. */
  readonly distinctCount: InputMaybe<IndexerStakeWeightDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `IndexerStakeWeight` object to be included within the aggregate. */
  readonly filter: InputMaybe<IndexerStakeWeightFilter>;
  /** Maximum aggregate over matching `IndexerStakeWeight` objects. */
  readonly max: InputMaybe<IndexerStakeWeightMaxAggregateFilter>;
  /** Minimum aggregate over matching `IndexerStakeWeight` objects. */
  readonly min: InputMaybe<IndexerStakeWeightMinAggregateFilter>;
  /** Population standard deviation aggregate over matching `IndexerStakeWeight` objects. */
  readonly stddevPopulation: InputMaybe<IndexerStakeWeightStddevPopulationAggregateFilter>;
  /** Sample standard deviation aggregate over matching `IndexerStakeWeight` objects. */
  readonly stddevSample: InputMaybe<IndexerStakeWeightStddevSampleAggregateFilter>;
  /** Sum aggregate over matching `IndexerStakeWeight` objects. */
  readonly sum: InputMaybe<IndexerStakeWeightSumAggregateFilter>;
  /** Population variance aggregate over matching `IndexerStakeWeight` objects. */
  readonly variancePopulation: InputMaybe<IndexerStakeWeightVariancePopulationAggregateFilter>;
  /** Sample variance aggregate over matching `IndexerStakeWeight` objects. */
  readonly varianceSample: InputMaybe<IndexerStakeWeightVarianceSampleAggregateFilter>;
};

export type IndexerStakeWeightAverageAggregateFilter = {
  readonly eraIdx: InputMaybe<BigFloatFilter>;
  readonly weight: InputMaybe<BigFloatFilter>;
};

export type IndexerStakeWeightAverageAggregates = {
  readonly __typename: 'IndexerStakeWeightAverageAggregates';
  /** Mean average of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of weight across the matching connection */
  readonly weight: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerStakeWeightDistinctCountAggregateFilter = {
  readonly _blockRange: InputMaybe<BigIntFilter>;
  readonly _id: InputMaybe<BigIntFilter>;
  readonly createAt: InputMaybe<BigIntFilter>;
  readonly eraIdx: InputMaybe<BigIntFilter>;
  readonly id: InputMaybe<BigIntFilter>;
  readonly indexerId: InputMaybe<BigIntFilter>;
  readonly updateAt: InputMaybe<BigIntFilter>;
  readonly weight: InputMaybe<BigIntFilter>;
};

export type IndexerStakeWeightDistinctCountAggregates = {
  readonly __typename: 'IndexerStakeWeightDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  readonly _blockRange: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  readonly _id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createAt across the matching connection */
  readonly createAt: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  readonly id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of indexerId across the matching connection */
  readonly indexerId: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of updateAt across the matching connection */
  readonly updateAt: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of weight across the matching connection */
  readonly weight: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `IndexerStakeWeight` object types. All fields are combined with a logical ‘and.’ */
export type IndexerStakeWeightFilter = {
  /** Checks for all expressions in this list. */
  readonly and: InputMaybe<ReadonlyArray<IndexerStakeWeightFilter>>;
  /** Filter by the object’s `createAt` field. */
  readonly createAt: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `eraIdx` field. */
  readonly eraIdx: InputMaybe<IntFilter>;
  /** Filter by the object’s `id` field. */
  readonly id: InputMaybe<StringFilter>;
  /** Filter by the object’s `indexer` relation. */
  readonly indexer: InputMaybe<IndexerFilter>;
  /** Filter by the object’s `indexerId` field. */
  readonly indexerId: InputMaybe<StringFilter>;
  /** Negates the expression. */
  readonly not: InputMaybe<IndexerStakeWeightFilter>;
  /** Checks for any expressions in this list. */
  readonly or: InputMaybe<ReadonlyArray<IndexerStakeWeightFilter>>;
  /** Filter by the object’s `updateAt` field. */
  readonly updateAt: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `weight` field. */
  readonly weight: InputMaybe<BigFloatFilter>;
};

export type IndexerStakeWeightMaxAggregateFilter = {
  readonly eraIdx: InputMaybe<IntFilter>;
  readonly weight: InputMaybe<BigFloatFilter>;
};

export type IndexerStakeWeightMaxAggregates = {
  readonly __typename: 'IndexerStakeWeightMaxAggregates';
  /** Maximum of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['Int']['output']>;
  /** Maximum of weight across the matching connection */
  readonly weight: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerStakeWeightMinAggregateFilter = {
  readonly eraIdx: InputMaybe<IntFilter>;
  readonly weight: InputMaybe<BigFloatFilter>;
};

export type IndexerStakeWeightMinAggregates = {
  readonly __typename: 'IndexerStakeWeightMinAggregates';
  /** Minimum of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['Int']['output']>;
  /** Minimum of weight across the matching connection */
  readonly weight: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerStakeWeightStddevPopulationAggregateFilter = {
  readonly eraIdx: InputMaybe<BigFloatFilter>;
  readonly weight: InputMaybe<BigFloatFilter>;
};

export type IndexerStakeWeightStddevPopulationAggregates = {
  readonly __typename: 'IndexerStakeWeightStddevPopulationAggregates';
  /** Population standard deviation of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of weight across the matching connection */
  readonly weight: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerStakeWeightStddevSampleAggregateFilter = {
  readonly eraIdx: InputMaybe<BigFloatFilter>;
  readonly weight: InputMaybe<BigFloatFilter>;
};

export type IndexerStakeWeightStddevSampleAggregates = {
  readonly __typename: 'IndexerStakeWeightStddevSampleAggregates';
  /** Sample standard deviation of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of weight across the matching connection */
  readonly weight: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerStakeWeightSumAggregateFilter = {
  readonly eraIdx: InputMaybe<BigIntFilter>;
  readonly weight: InputMaybe<BigFloatFilter>;
};

export type IndexerStakeWeightSumAggregates = {
  readonly __typename: 'IndexerStakeWeightSumAggregates';
  /** Sum of eraIdx across the matching connection */
  readonly eraIdx: Scalars['BigInt']['output'];
  /** Sum of weight across the matching connection */
  readonly weight: Scalars['BigFloat']['output'];
};

export type IndexerStakeWeightVariancePopulationAggregateFilter = {
  readonly eraIdx: InputMaybe<BigFloatFilter>;
  readonly weight: InputMaybe<BigFloatFilter>;
};

export type IndexerStakeWeightVariancePopulationAggregates = {
  readonly __typename: 'IndexerStakeWeightVariancePopulationAggregates';
  /** Population variance of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of weight across the matching connection */
  readonly weight: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerStakeWeightVarianceSampleAggregateFilter = {
  readonly eraIdx: InputMaybe<BigFloatFilter>;
  readonly weight: InputMaybe<BigFloatFilter>;
};

export type IndexerStakeWeightVarianceSampleAggregates = {
  readonly __typename: 'IndexerStakeWeightVarianceSampleAggregates';
  /** Sample variance of eraIdx across the matching connection */
  readonly eraIdx: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of weight across the matching connection */
  readonly weight: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `IndexerStakeWeight` values. */
export type IndexerStakeWeightsConnection = {
  readonly __typename: 'IndexerStakeWeightsConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<IndexerStakeWeightAggregates>;
  /** A list of edges which contains the `IndexerStakeWeight` and cursor to aid in pagination. */
  readonly edges: ReadonlyArray<IndexerStakeWeightsEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<IndexerStakeWeightAggregates>>;
  /** A list of `IndexerStakeWeight` objects. */
  readonly nodes: ReadonlyArray<Maybe<IndexerStakeWeight>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `IndexerStakeWeight` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `IndexerStakeWeight` values. */
export type IndexerStakeWeightsConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<IndexerStakeWeightsGroupBy>;
  having: InputMaybe<IndexerStakeWeightsHavingInput>;
};

/** A `IndexerStakeWeight` edge in the connection. */
export type IndexerStakeWeightsEdge = {
  readonly __typename: 'IndexerStakeWeightsEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `IndexerStakeWeight` at the end of the edge. */
  readonly node: Maybe<IndexerStakeWeight>;
};

/** Grouping methods for `IndexerStakeWeight` for usage during aggregation. */
export enum IndexerStakeWeightsGroupBy {
  CREATE_AT = 'CREATE_AT',
  CREATE_AT_TRUNCATED_TO_DAY = 'CREATE_AT_TRUNCATED_TO_DAY',
  CREATE_AT_TRUNCATED_TO_HOUR = 'CREATE_AT_TRUNCATED_TO_HOUR',
  ERA_IDX = 'ERA_IDX',
  ID = 'ID',
  INDEXER_ID = 'INDEXER_ID',
  UPDATE_AT = 'UPDATE_AT',
  UPDATE_AT_TRUNCATED_TO_DAY = 'UPDATE_AT_TRUNCATED_TO_DAY',
  UPDATE_AT_TRUNCATED_TO_HOUR = 'UPDATE_AT_TRUNCATED_TO_HOUR',
  WEIGHT = 'WEIGHT',
}

export type IndexerStakeWeightsHavingAverageInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
  readonly weight: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerStakeWeightsHavingDistinctCountInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
  readonly weight: InputMaybe<HavingBigfloatFilter>;
};

/** Conditions for `IndexerStakeWeight` aggregates. */
export type IndexerStakeWeightsHavingInput = {
  readonly AND: InputMaybe<ReadonlyArray<IndexerStakeWeightsHavingInput>>;
  readonly OR: InputMaybe<ReadonlyArray<IndexerStakeWeightsHavingInput>>;
  readonly average: InputMaybe<IndexerStakeWeightsHavingAverageInput>;
  readonly distinctCount: InputMaybe<IndexerStakeWeightsHavingDistinctCountInput>;
  readonly max: InputMaybe<IndexerStakeWeightsHavingMaxInput>;
  readonly min: InputMaybe<IndexerStakeWeightsHavingMinInput>;
  readonly stddevPopulation: InputMaybe<IndexerStakeWeightsHavingStddevPopulationInput>;
  readonly stddevSample: InputMaybe<IndexerStakeWeightsHavingStddevSampleInput>;
  readonly sum: InputMaybe<IndexerStakeWeightsHavingSumInput>;
  readonly variancePopulation: InputMaybe<IndexerStakeWeightsHavingVariancePopulationInput>;
  readonly varianceSample: InputMaybe<IndexerStakeWeightsHavingVarianceSampleInput>;
};

export type IndexerStakeWeightsHavingMaxInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
  readonly weight: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerStakeWeightsHavingMinInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
  readonly weight: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerStakeWeightsHavingStddevPopulationInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
  readonly weight: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerStakeWeightsHavingStddevSampleInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
  readonly weight: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerStakeWeightsHavingSumInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
  readonly weight: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerStakeWeightsHavingVariancePopulationInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
  readonly weight: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerStakeWeightsHavingVarianceSampleInput = {
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
  readonly weight: InputMaybe<HavingBigfloatFilter>;
};

/** Methods to use when ordering `IndexerStakeWeight`. */
export enum IndexerStakeWeightsOrderBy {
  CREATE_AT_ASC = 'CREATE_AT_ASC',
  CREATE_AT_DESC = 'CREATE_AT_DESC',
  ERA_IDX_ASC = 'ERA_IDX_ASC',
  ERA_IDX_DESC = 'ERA_IDX_DESC',
  ID_ASC = 'ID_ASC',
  ID_DESC = 'ID_DESC',
  INDEXER_BY_INDEXER_ID__ACTIVE_ASC = 'INDEXER_BY_INDEXER_ID__ACTIVE_ASC',
  INDEXER_BY_INDEXER_ID__ACTIVE_DESC = 'INDEXER_BY_INDEXER_ID__ACTIVE_DESC',
  INDEXER_BY_INDEXER_ID__CAPACITY_ASC = 'INDEXER_BY_INDEXER_ID__CAPACITY_ASC',
  INDEXER_BY_INDEXER_ID__CAPACITY_DESC = 'INDEXER_BY_INDEXER_ID__CAPACITY_DESC',
  INDEXER_BY_INDEXER_ID__COMMISSION_ASC = 'INDEXER_BY_INDEXER_ID__COMMISSION_ASC',
  INDEXER_BY_INDEXER_ID__COMMISSION_DESC = 'INDEXER_BY_INDEXER_ID__COMMISSION_DESC',
  INDEXER_BY_INDEXER_ID__CONTROLLER_ASC = 'INDEXER_BY_INDEXER_ID__CONTROLLER_ASC',
  INDEXER_BY_INDEXER_ID__CONTROLLER_DESC = 'INDEXER_BY_INDEXER_ID__CONTROLLER_DESC',
  INDEXER_BY_INDEXER_ID__CREATED_BLOCK_ASC = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_ASC',
  INDEXER_BY_INDEXER_ID__CREATED_BLOCK_DESC = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_DESC',
  INDEXER_BY_INDEXER_ID__ID_ASC = 'INDEXER_BY_INDEXER_ID__ID_ASC',
  INDEXER_BY_INDEXER_ID__ID_DESC = 'INDEXER_BY_INDEXER_ID__ID_DESC',
  INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_ASC = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_ASC',
  INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_DESC = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_DESC',
  INDEXER_BY_INDEXER_ID__LAST_EVENT_ASC = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_ASC',
  INDEXER_BY_INDEXER_ID__LAST_EVENT_DESC = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_DESC',
  INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_ASC = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_ASC',
  INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_DESC = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_DESC',
  INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_ASC = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_ASC',
  INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_DESC = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_DESC',
  INDEXER_BY_INDEXER_ID__METADATA_ASC = 'INDEXER_BY_INDEXER_ID__METADATA_ASC',
  INDEXER_BY_INDEXER_ID__METADATA_DESC = 'INDEXER_BY_INDEXER_ID__METADATA_DESC',
  INDEXER_BY_INDEXER_ID__SELF_STAKE_ASC = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_ASC',
  INDEXER_BY_INDEXER_ID__SELF_STAKE_DESC = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_DESC',
  INDEXER_BY_INDEXER_ID__TOTAL_STAKE_ASC = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_ASC',
  INDEXER_BY_INDEXER_ID__TOTAL_STAKE_DESC = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_DESC',
  INDEXER_ID_ASC = 'INDEXER_ID_ASC',
  INDEXER_ID_DESC = 'INDEXER_ID_DESC',
  NATURAL = 'NATURAL',
  PRIMARY_KEY_ASC = 'PRIMARY_KEY_ASC',
  PRIMARY_KEY_DESC = 'PRIMARY_KEY_DESC',
  UPDATE_AT_ASC = 'UPDATE_AT_ASC',
  UPDATE_AT_DESC = 'UPDATE_AT_DESC',
  WEIGHT_ASC = 'WEIGHT_ASC',
  WEIGHT_DESC = 'WEIGHT_DESC',
}

/** A connection to a list of `IndexerStake` values. */
export type IndexerStakesConnection = {
  readonly __typename: 'IndexerStakesConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<IndexerStakeAggregates>;
  /** A list of edges which contains the `IndexerStake` and cursor to aid in pagination. */
  readonly edges: ReadonlyArray<IndexerStakesEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<IndexerStakeAggregates>>;
  /** A list of `IndexerStake` objects. */
  readonly nodes: ReadonlyArray<Maybe<IndexerStake>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `IndexerStake` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `IndexerStake` values. */
export type IndexerStakesConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<IndexerStakesGroupBy>;
  having: InputMaybe<IndexerStakesHavingInput>;
};

/** A `IndexerStake` edge in the connection. */
export type IndexerStakesEdge = {
  readonly __typename: 'IndexerStakesEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `IndexerStake` at the end of the edge. */
  readonly node: Maybe<IndexerStake>;
};

/** Grouping methods for `IndexerStake` for usage during aggregation. */
export enum IndexerStakesGroupBy {
  DELEGATOR_STAKE = 'DELEGATOR_STAKE',
  ERA_ID = 'ERA_ID',
  ERA_IDX = 'ERA_IDX',
  ID = 'ID',
  INDEXER_ID = 'INDEXER_ID',
  INDEXER_STAKE = 'INDEXER_STAKE',
  TOTAL_STAKE = 'TOTAL_STAKE',
}

export type IndexerStakesHavingAverageInput = {
  readonly delegatorStake: InputMaybe<HavingBigfloatFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly indexerStake: InputMaybe<HavingBigfloatFilter>;
  readonly totalStake: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerStakesHavingDistinctCountInput = {
  readonly delegatorStake: InputMaybe<HavingBigfloatFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly indexerStake: InputMaybe<HavingBigfloatFilter>;
  readonly totalStake: InputMaybe<HavingBigfloatFilter>;
};

/** Conditions for `IndexerStake` aggregates. */
export type IndexerStakesHavingInput = {
  readonly AND: InputMaybe<ReadonlyArray<IndexerStakesHavingInput>>;
  readonly OR: InputMaybe<ReadonlyArray<IndexerStakesHavingInput>>;
  readonly average: InputMaybe<IndexerStakesHavingAverageInput>;
  readonly distinctCount: InputMaybe<IndexerStakesHavingDistinctCountInput>;
  readonly max: InputMaybe<IndexerStakesHavingMaxInput>;
  readonly min: InputMaybe<IndexerStakesHavingMinInput>;
  readonly stddevPopulation: InputMaybe<IndexerStakesHavingStddevPopulationInput>;
  readonly stddevSample: InputMaybe<IndexerStakesHavingStddevSampleInput>;
  readonly sum: InputMaybe<IndexerStakesHavingSumInput>;
  readonly variancePopulation: InputMaybe<IndexerStakesHavingVariancePopulationInput>;
  readonly varianceSample: InputMaybe<IndexerStakesHavingVarianceSampleInput>;
};

export type IndexerStakesHavingMaxInput = {
  readonly delegatorStake: InputMaybe<HavingBigfloatFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly indexerStake: InputMaybe<HavingBigfloatFilter>;
  readonly totalStake: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerStakesHavingMinInput = {
  readonly delegatorStake: InputMaybe<HavingBigfloatFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly indexerStake: InputMaybe<HavingBigfloatFilter>;
  readonly totalStake: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerStakesHavingStddevPopulationInput = {
  readonly delegatorStake: InputMaybe<HavingBigfloatFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly indexerStake: InputMaybe<HavingBigfloatFilter>;
  readonly totalStake: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerStakesHavingStddevSampleInput = {
  readonly delegatorStake: InputMaybe<HavingBigfloatFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly indexerStake: InputMaybe<HavingBigfloatFilter>;
  readonly totalStake: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerStakesHavingSumInput = {
  readonly delegatorStake: InputMaybe<HavingBigfloatFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly indexerStake: InputMaybe<HavingBigfloatFilter>;
  readonly totalStake: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerStakesHavingVariancePopulationInput = {
  readonly delegatorStake: InputMaybe<HavingBigfloatFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly indexerStake: InputMaybe<HavingBigfloatFilter>;
  readonly totalStake: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerStakesHavingVarianceSampleInput = {
  readonly delegatorStake: InputMaybe<HavingBigfloatFilter>;
  readonly eraIdx: InputMaybe<HavingIntFilter>;
  readonly indexerStake: InputMaybe<HavingBigfloatFilter>;
  readonly totalStake: InputMaybe<HavingBigfloatFilter>;
};

/** Methods to use when ordering `IndexerStake`. */
export enum IndexerStakesOrderBy {
  DELEGATOR_STAKE_ASC = 'DELEGATOR_STAKE_ASC',
  DELEGATOR_STAKE_DESC = 'DELEGATOR_STAKE_DESC',
  ERA_BY_ERA_ID__CREATED_BLOCK_ASC = 'ERA_BY_ERA_ID__CREATED_BLOCK_ASC',
  ERA_BY_ERA_ID__CREATED_BLOCK_DESC = 'ERA_BY_ERA_ID__CREATED_BLOCK_DESC',
  ERA_BY_ERA_ID__END_TIME_ASC = 'ERA_BY_ERA_ID__END_TIME_ASC',
  ERA_BY_ERA_ID__END_TIME_DESC = 'ERA_BY_ERA_ID__END_TIME_DESC',
  ERA_BY_ERA_ID__ERA_PERIOD_ASC = 'ERA_BY_ERA_ID__ERA_PERIOD_ASC',
  ERA_BY_ERA_ID__ERA_PERIOD_DESC = 'ERA_BY_ERA_ID__ERA_PERIOD_DESC',
  ERA_BY_ERA_ID__FORCE_NEXT_ASC = 'ERA_BY_ERA_ID__FORCE_NEXT_ASC',
  ERA_BY_ERA_ID__FORCE_NEXT_DESC = 'ERA_BY_ERA_ID__FORCE_NEXT_DESC',
  ERA_BY_ERA_ID__ID_ASC = 'ERA_BY_ERA_ID__ID_ASC',
  ERA_BY_ERA_ID__ID_DESC = 'ERA_BY_ERA_ID__ID_DESC',
  ERA_BY_ERA_ID__LAST_EVENT_ASC = 'ERA_BY_ERA_ID__LAST_EVENT_ASC',
  ERA_BY_ERA_ID__LAST_EVENT_DESC = 'ERA_BY_ERA_ID__LAST_EVENT_DESC',
  ERA_BY_ERA_ID__START_TIME_ASC = 'ERA_BY_ERA_ID__START_TIME_ASC',
  ERA_BY_ERA_ID__START_TIME_DESC = 'ERA_BY_ERA_ID__START_TIME_DESC',
  ERA_IDX_ASC = 'ERA_IDX_ASC',
  ERA_IDX_DESC = 'ERA_IDX_DESC',
  ERA_ID_ASC = 'ERA_ID_ASC',
  ERA_ID_DESC = 'ERA_ID_DESC',
  ID_ASC = 'ID_ASC',
  ID_DESC = 'ID_DESC',
  INDEXER_BY_INDEXER_ID__ACTIVE_ASC = 'INDEXER_BY_INDEXER_ID__ACTIVE_ASC',
  INDEXER_BY_INDEXER_ID__ACTIVE_DESC = 'INDEXER_BY_INDEXER_ID__ACTIVE_DESC',
  INDEXER_BY_INDEXER_ID__CAPACITY_ASC = 'INDEXER_BY_INDEXER_ID__CAPACITY_ASC',
  INDEXER_BY_INDEXER_ID__CAPACITY_DESC = 'INDEXER_BY_INDEXER_ID__CAPACITY_DESC',
  INDEXER_BY_INDEXER_ID__COMMISSION_ASC = 'INDEXER_BY_INDEXER_ID__COMMISSION_ASC',
  INDEXER_BY_INDEXER_ID__COMMISSION_DESC = 'INDEXER_BY_INDEXER_ID__COMMISSION_DESC',
  INDEXER_BY_INDEXER_ID__CONTROLLER_ASC = 'INDEXER_BY_INDEXER_ID__CONTROLLER_ASC',
  INDEXER_BY_INDEXER_ID__CONTROLLER_DESC = 'INDEXER_BY_INDEXER_ID__CONTROLLER_DESC',
  INDEXER_BY_INDEXER_ID__CREATED_BLOCK_ASC = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_ASC',
  INDEXER_BY_INDEXER_ID__CREATED_BLOCK_DESC = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_DESC',
  INDEXER_BY_INDEXER_ID__ID_ASC = 'INDEXER_BY_INDEXER_ID__ID_ASC',
  INDEXER_BY_INDEXER_ID__ID_DESC = 'INDEXER_BY_INDEXER_ID__ID_DESC',
  INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_ASC = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_ASC',
  INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_DESC = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_DESC',
  INDEXER_BY_INDEXER_ID__LAST_EVENT_ASC = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_ASC',
  INDEXER_BY_INDEXER_ID__LAST_EVENT_DESC = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_DESC',
  INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_ASC = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_ASC',
  INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_DESC = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_DESC',
  INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_ASC = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_ASC',
  INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_DESC = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_DESC',
  INDEXER_BY_INDEXER_ID__METADATA_ASC = 'INDEXER_BY_INDEXER_ID__METADATA_ASC',
  INDEXER_BY_INDEXER_ID__METADATA_DESC = 'INDEXER_BY_INDEXER_ID__METADATA_DESC',
  INDEXER_BY_INDEXER_ID__SELF_STAKE_ASC = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_ASC',
  INDEXER_BY_INDEXER_ID__SELF_STAKE_DESC = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_DESC',
  INDEXER_BY_INDEXER_ID__TOTAL_STAKE_ASC = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_ASC',
  INDEXER_BY_INDEXER_ID__TOTAL_STAKE_DESC = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_DESC',
  INDEXER_ID_ASC = 'INDEXER_ID_ASC',
  INDEXER_ID_DESC = 'INDEXER_ID_DESC',
  INDEXER_STAKE_ASC = 'INDEXER_STAKE_ASC',
  INDEXER_STAKE_DESC = 'INDEXER_STAKE_DESC',
  NATURAL = 'NATURAL',
  PRIMARY_KEY_ASC = 'PRIMARY_KEY_ASC',
  PRIMARY_KEY_DESC = 'PRIMARY_KEY_DESC',
  TOTAL_STAKE_ASC = 'TOTAL_STAKE_ASC',
  TOTAL_STAKE_DESC = 'TOTAL_STAKE_DESC',
}

export type IndexerStddevPopulationAggregates = {
  readonly __typename: 'IndexerStddevPopulationAggregates';
  /** Population standard deviation of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerStddevSampleAggregates = {
  readonly __typename: 'IndexerStddevSampleAggregates';
  /** Sample standard deviation of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerSumAggregates = {
  readonly __typename: 'IndexerSumAggregates';
  /** Sum of createdBlock across the matching connection */
  readonly createdBlock: Scalars['BigInt']['output'];
};

/** A filter to be used against many `AcceptedOffer` object types. All fields are combined with a logical ‘and.’ */
export type IndexerToManyAcceptedOfferFilter = {
  /** Aggregates across related `AcceptedOffer` match the filter criteria. */
  readonly aggregates: InputMaybe<AcceptedOfferAggregatesFilter>;
  /** Every related `AcceptedOffer` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly every: InputMaybe<AcceptedOfferFilter>;
  /** No related `AcceptedOffer` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly none: InputMaybe<AcceptedOfferFilter>;
  /** Some related `AcceptedOffer` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly some: InputMaybe<AcceptedOfferFilter>;
};

/** A filter to be used against many `Controller` object types. All fields are combined with a logical ‘and.’ */
export type IndexerToManyControllerFilter = {
  /** Aggregates across related `Controller` match the filter criteria. */
  readonly aggregates: InputMaybe<ControllerAggregatesFilter>;
  /** Every related `Controller` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly every: InputMaybe<ControllerFilter>;
  /** No related `Controller` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly none: InputMaybe<ControllerFilter>;
  /** Some related `Controller` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly some: InputMaybe<ControllerFilter>;
};

/** A filter to be used against many `Delegation` object types. All fields are combined with a logical ‘and.’ */
export type IndexerToManyDelegationFilter = {
  /** Aggregates across related `Delegation` match the filter criteria. */
  readonly aggregates: InputMaybe<DelegationAggregatesFilter>;
  /** Every related `Delegation` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly every: InputMaybe<DelegationFilter>;
  /** No related `Delegation` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly none: InputMaybe<DelegationFilter>;
  /** Some related `Delegation` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly some: InputMaybe<DelegationFilter>;
};

/** A filter to be used against many `EraDelegatorIndexerApy` object types. All fields are combined with a logical ‘and.’ */
export type IndexerToManyEraDelegatorIndexerApyFilter = {
  /** Aggregates across related `EraDelegatorIndexerApy` match the filter criteria. */
  readonly aggregates: InputMaybe<EraDelegatorIndexerApyAggregatesFilter>;
  /** Every related `EraDelegatorIndexerApy` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly every: InputMaybe<EraDelegatorIndexerApyFilter>;
  /** No related `EraDelegatorIndexerApy` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly none: InputMaybe<EraDelegatorIndexerApyFilter>;
  /** Some related `EraDelegatorIndexerApy` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly some: InputMaybe<EraDelegatorIndexerApyFilter>;
};

/** A filter to be used against many `EraIndexerApy` object types. All fields are combined with a logical ‘and.’ */
export type IndexerToManyEraIndexerApyFilter = {
  /** Aggregates across related `EraIndexerApy` match the filter criteria. */
  readonly aggregates: InputMaybe<EraIndexerApyAggregatesFilter>;
  /** Every related `EraIndexerApy` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly every: InputMaybe<EraIndexerApyFilter>;
  /** No related `EraIndexerApy` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly none: InputMaybe<EraIndexerApyFilter>;
  /** Some related `EraIndexerApy` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly some: InputMaybe<EraIndexerApyFilter>;
};

/** A filter to be used against many `EraIndexerDeploymentApy` object types. All fields are combined with a logical ‘and.’ */
export type IndexerToManyEraIndexerDeploymentApyFilter = {
  /** Aggregates across related `EraIndexerDeploymentApy` match the filter criteria. */
  readonly aggregates: InputMaybe<EraIndexerDeploymentApyAggregatesFilter>;
  /** Every related `EraIndexerDeploymentApy` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly every: InputMaybe<EraIndexerDeploymentApyFilter>;
  /** No related `EraIndexerDeploymentApy` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly none: InputMaybe<EraIndexerDeploymentApyFilter>;
  /** Some related `EraIndexerDeploymentApy` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly some: InputMaybe<EraIndexerDeploymentApyFilter>;
};

/** A filter to be used against many `EraReward` object types. All fields are combined with a logical ‘and.’ */
export type IndexerToManyEraRewardFilter = {
  /** Aggregates across related `EraReward` match the filter criteria. */
  readonly aggregates: InputMaybe<EraRewardAggregatesFilter>;
  /** Every related `EraReward` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly every: InputMaybe<EraRewardFilter>;
  /** No related `EraReward` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly none: InputMaybe<EraRewardFilter>;
  /** Some related `EraReward` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly some: InputMaybe<EraRewardFilter>;
};

/** A filter to be used against many `EraStake` object types. All fields are combined with a logical ‘and.’ */
export type IndexerToManyEraStakeFilter = {
  /** Aggregates across related `EraStake` match the filter criteria. */
  readonly aggregates: InputMaybe<EraStakeAggregatesFilter>;
  /** Every related `EraStake` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly every: InputMaybe<EraStakeFilter>;
  /** No related `EraStake` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly none: InputMaybe<EraStakeFilter>;
  /** Some related `EraStake` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly some: InputMaybe<EraStakeFilter>;
};

/** A filter to be used against many `IndexerAllocation` object types. All fields are combined with a logical ‘and.’ */
export type IndexerToManyIndexerAllocationFilter = {
  /** Aggregates across related `IndexerAllocation` match the filter criteria. */
  readonly aggregates: InputMaybe<IndexerAllocationAggregatesFilter>;
  /** Every related `IndexerAllocation` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly every: InputMaybe<IndexerAllocationFilter>;
  /** No related `IndexerAllocation` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly none: InputMaybe<IndexerAllocationFilter>;
  /** Some related `IndexerAllocation` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly some: InputMaybe<IndexerAllocationFilter>;
};

/** A filter to be used against many `IndexerAllocationOverflow` object types. All fields are combined with a logical ‘and.’ */
export type IndexerToManyIndexerAllocationOverflowFilter = {
  /** Aggregates across related `IndexerAllocationOverflow` match the filter criteria. */
  readonly aggregates: InputMaybe<IndexerAllocationOverflowAggregatesFilter>;
  /** Every related `IndexerAllocationOverflow` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly every: InputMaybe<IndexerAllocationOverflowFilter>;
  /** No related `IndexerAllocationOverflow` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly none: InputMaybe<IndexerAllocationOverflowFilter>;
  /** Some related `IndexerAllocationOverflow` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly some: InputMaybe<IndexerAllocationOverflowFilter>;
};

/** A filter to be used against many `IndexerAllocationReward` object types. All fields are combined with a logical ‘and.’ */
export type IndexerToManyIndexerAllocationRewardFilter = {
  /** Aggregates across related `IndexerAllocationReward` match the filter criteria. */
  readonly aggregates: InputMaybe<IndexerAllocationRewardAggregatesFilter>;
  /** Every related `IndexerAllocationReward` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly every: InputMaybe<IndexerAllocationRewardFilter>;
  /** No related `IndexerAllocationReward` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly none: InputMaybe<IndexerAllocationRewardFilter>;
  /** Some related `IndexerAllocationReward` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly some: InputMaybe<IndexerAllocationRewardFilter>;
};

/** A filter to be used against many `IndexerAllocationRewardSummary` object types. All fields are combined with a logical ‘and.’ */
export type IndexerToManyIndexerAllocationRewardSummaryFilter = {
  /** Aggregates across related `IndexerAllocationRewardSummary` match the filter criteria. */
  readonly aggregates: InputMaybe<IndexerAllocationRewardSummaryAggregatesFilter>;
  /** Every related `IndexerAllocationRewardSummary` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly every: InputMaybe<IndexerAllocationRewardSummaryFilter>;
  /** No related `IndexerAllocationRewardSummary` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly none: InputMaybe<IndexerAllocationRewardSummaryFilter>;
  /** Some related `IndexerAllocationRewardSummary` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly some: InputMaybe<IndexerAllocationRewardSummaryFilter>;
};

/** A filter to be used against many `IndexerAllocationSummary` object types. All fields are combined with a logical ‘and.’ */
export type IndexerToManyIndexerAllocationSummaryFilter = {
  /** Aggregates across related `IndexerAllocationSummary` match the filter criteria. */
  readonly aggregates: InputMaybe<IndexerAllocationSummaryAggregatesFilter>;
  /** Every related `IndexerAllocationSummary` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly every: InputMaybe<IndexerAllocationSummaryFilter>;
  /** No related `IndexerAllocationSummary` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly none: InputMaybe<IndexerAllocationSummaryFilter>;
  /** Some related `IndexerAllocationSummary` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly some: InputMaybe<IndexerAllocationSummaryFilter>;
};

/** A filter to be used against many `IndexerApySummary` object types. All fields are combined with a logical ‘and.’ */
export type IndexerToManyIndexerApySummaryFilter = {
  /** Aggregates across related `IndexerApySummary` match the filter criteria. */
  readonly aggregates: InputMaybe<IndexerApySummaryAggregatesFilter>;
  /** Every related `IndexerApySummary` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly every: InputMaybe<IndexerApySummaryFilter>;
  /** No related `IndexerApySummary` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly none: InputMaybe<IndexerApySummaryFilter>;
  /** Some related `IndexerApySummary` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly some: InputMaybe<IndexerApySummaryFilter>;
};

/** A filter to be used against many `IndexerCommissionRate` object types. All fields are combined with a logical ‘and.’ */
export type IndexerToManyIndexerCommissionRateFilter = {
  /** Aggregates across related `IndexerCommissionRate` match the filter criteria. */
  readonly aggregates: InputMaybe<IndexerCommissionRateAggregatesFilter>;
  /** Every related `IndexerCommissionRate` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly every: InputMaybe<IndexerCommissionRateFilter>;
  /** No related `IndexerCommissionRate` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly none: InputMaybe<IndexerCommissionRateFilter>;
  /** Some related `IndexerCommissionRate` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly some: InputMaybe<IndexerCommissionRateFilter>;
};

/** A filter to be used against many `IndexerDeployment` object types. All fields are combined with a logical ‘and.’ */
export type IndexerToManyIndexerDeploymentFilter = {
  /** Aggregates across related `IndexerDeployment` match the filter criteria. */
  readonly aggregates: InputMaybe<IndexerDeploymentAggregatesFilter>;
  /** Every related `IndexerDeployment` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly every: InputMaybe<IndexerDeploymentFilter>;
  /** No related `IndexerDeployment` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly none: InputMaybe<IndexerDeploymentFilter>;
  /** Some related `IndexerDeployment` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly some: InputMaybe<IndexerDeploymentFilter>;
};

/** A filter to be used against many `IndexerEraDeploymentReward` object types. All fields are combined with a logical ‘and.’ */
export type IndexerToManyIndexerEraDeploymentRewardFilter = {
  /** Aggregates across related `IndexerEraDeploymentReward` match the filter criteria. */
  readonly aggregates: InputMaybe<IndexerEraDeploymentRewardAggregatesFilter>;
  /** Every related `IndexerEraDeploymentReward` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly every: InputMaybe<IndexerEraDeploymentRewardFilter>;
  /** No related `IndexerEraDeploymentReward` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly none: InputMaybe<IndexerEraDeploymentRewardFilter>;
  /** Some related `IndexerEraDeploymentReward` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly some: InputMaybe<IndexerEraDeploymentRewardFilter>;
};

/** A filter to be used against many `IndexerLaborHistory` object types. All fields are combined with a logical ‘and.’ */
export type IndexerToManyIndexerLaborHistoryFilter = {
  /** Aggregates across related `IndexerLaborHistory` match the filter criteria. */
  readonly aggregates: InputMaybe<IndexerLaborHistoryAggregatesFilter>;
  /** Every related `IndexerLaborHistory` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly every: InputMaybe<IndexerLaborHistoryFilter>;
  /** No related `IndexerLaborHistory` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly none: InputMaybe<IndexerLaborHistoryFilter>;
  /** Some related `IndexerLaborHistory` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly some: InputMaybe<IndexerLaborHistoryFilter>;
};

/** A filter to be used against many `IndexerMissedLabor` object types. All fields are combined with a logical ‘and.’ */
export type IndexerToManyIndexerMissedLaborFilter = {
  /** Aggregates across related `IndexerMissedLabor` match the filter criteria. */
  readonly aggregates: InputMaybe<IndexerMissedLaborAggregatesFilter>;
  /** Every related `IndexerMissedLabor` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly every: InputMaybe<IndexerMissedLaborFilter>;
  /** No related `IndexerMissedLabor` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly none: InputMaybe<IndexerMissedLaborFilter>;
  /** Some related `IndexerMissedLabor` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly some: InputMaybe<IndexerMissedLaborFilter>;
};

/** A filter to be used against many `IndexerReward` object types. All fields are combined with a logical ‘and.’ */
export type IndexerToManyIndexerRewardFilter = {
  /** Aggregates across related `IndexerReward` match the filter criteria. */
  readonly aggregates: InputMaybe<IndexerRewardAggregatesFilter>;
  /** Every related `IndexerReward` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly every: InputMaybe<IndexerRewardFilter>;
  /** No related `IndexerReward` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly none: InputMaybe<IndexerRewardFilter>;
  /** Some related `IndexerReward` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly some: InputMaybe<IndexerRewardFilter>;
};

/** A filter to be used against many `IndexerStake` object types. All fields are combined with a logical ‘and.’ */
export type IndexerToManyIndexerStakeFilter = {
  /** Aggregates across related `IndexerStake` match the filter criteria. */
  readonly aggregates: InputMaybe<IndexerStakeAggregatesFilter>;
  /** Every related `IndexerStake` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly every: InputMaybe<IndexerStakeFilter>;
  /** No related `IndexerStake` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly none: InputMaybe<IndexerStakeFilter>;
  /** Some related `IndexerStake` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly some: InputMaybe<IndexerStakeFilter>;
};

/** A filter to be used against many `IndexerStakeWeight` object types. All fields are combined with a logical ‘and.’ */
export type IndexerToManyIndexerStakeWeightFilter = {
  /** Aggregates across related `IndexerStakeWeight` match the filter criteria. */
  readonly aggregates: InputMaybe<IndexerStakeWeightAggregatesFilter>;
  /** Every related `IndexerStakeWeight` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly every: InputMaybe<IndexerStakeWeightFilter>;
  /** No related `IndexerStakeWeight` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly none: InputMaybe<IndexerStakeWeightFilter>;
  /** Some related `IndexerStakeWeight` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly some: InputMaybe<IndexerStakeWeightFilter>;
};

export type IndexerVariancePopulationAggregates = {
  readonly __typename: 'IndexerVariancePopulationAggregates';
  /** Population variance of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerVarianceSampleAggregates = {
  readonly __typename: 'IndexerVarianceSampleAggregates';
  /** Sample variance of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `Indexer` values. */
export type IndexersConnection = {
  readonly __typename: 'IndexersConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<IndexerAggregates>;
  /** A list of edges which contains the `Indexer` and cursor to aid in pagination. */
  readonly edges: ReadonlyArray<IndexersEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<IndexerAggregates>>;
  /** A list of `Indexer` objects. */
  readonly nodes: ReadonlyArray<Maybe<Indexer>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Indexer` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Indexer` values. */
export type IndexersConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<IndexersGroupBy>;
  having: InputMaybe<IndexersHavingInput>;
};

/** A `Indexer` edge in the connection. */
export type IndexersEdge = {
  readonly __typename: 'IndexersEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `Indexer` at the end of the edge. */
  readonly node: Maybe<Indexer>;
};

/** Grouping methods for `Indexer` for usage during aggregation. */
export enum IndexersGroupBy {
  ACTIVE = 'ACTIVE',
  CAPACITY = 'CAPACITY',
  COMMISSION = 'COMMISSION',
  CONTROLLER = 'CONTROLLER',
  CREATED_BLOCK = 'CREATED_BLOCK',
  ID = 'ID',
  LAST_CLAIM_ERA = 'LAST_CLAIM_ERA',
  LAST_EVENT = 'LAST_EVENT',
  LAST_SETTLED_ERA = 'LAST_SETTLED_ERA',
  MAX_UNSTAKE_AMOUNT = 'MAX_UNSTAKE_AMOUNT',
  METADATA = 'METADATA',
  SELF_STAKE = 'SELF_STAKE',
  TOTAL_STAKE = 'TOTAL_STAKE',
}

export type IndexersHavingAverageInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
};

export type IndexersHavingDistinctCountInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
};

/** Conditions for `Indexer` aggregates. */
export type IndexersHavingInput = {
  readonly AND: InputMaybe<ReadonlyArray<IndexersHavingInput>>;
  readonly OR: InputMaybe<ReadonlyArray<IndexersHavingInput>>;
  readonly average: InputMaybe<IndexersHavingAverageInput>;
  readonly distinctCount: InputMaybe<IndexersHavingDistinctCountInput>;
  readonly max: InputMaybe<IndexersHavingMaxInput>;
  readonly min: InputMaybe<IndexersHavingMinInput>;
  readonly stddevPopulation: InputMaybe<IndexersHavingStddevPopulationInput>;
  readonly stddevSample: InputMaybe<IndexersHavingStddevSampleInput>;
  readonly sum: InputMaybe<IndexersHavingSumInput>;
  readonly variancePopulation: InputMaybe<IndexersHavingVariancePopulationInput>;
  readonly varianceSample: InputMaybe<IndexersHavingVarianceSampleInput>;
};

export type IndexersHavingMaxInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
};

export type IndexersHavingMinInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
};

export type IndexersHavingStddevPopulationInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
};

export type IndexersHavingStddevSampleInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
};

export type IndexersHavingSumInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
};

export type IndexersHavingVariancePopulationInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
};

export type IndexersHavingVarianceSampleInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
};

/** Methods to use when ordering `Indexer`. */
export enum IndexersOrderBy {
  ACCEPTED_OFFERS_AVERAGE_BLOCK_RANGE_ASC = 'ACCEPTED_OFFERS_AVERAGE_BLOCK_RANGE_ASC',
  ACCEPTED_OFFERS_AVERAGE_BLOCK_RANGE_DESC = 'ACCEPTED_OFFERS_AVERAGE_BLOCK_RANGE_DESC',
  ACCEPTED_OFFERS_AVERAGE_CREATED_BLOCK_ASC = 'ACCEPTED_OFFERS_AVERAGE_CREATED_BLOCK_ASC',
  ACCEPTED_OFFERS_AVERAGE_CREATED_BLOCK_DESC = 'ACCEPTED_OFFERS_AVERAGE_CREATED_BLOCK_DESC',
  ACCEPTED_OFFERS_AVERAGE_ID_ASC = 'ACCEPTED_OFFERS_AVERAGE_ID_ASC',
  ACCEPTED_OFFERS_AVERAGE_ID_DESC = 'ACCEPTED_OFFERS_AVERAGE_ID_DESC',
  ACCEPTED_OFFERS_AVERAGE_INDEXER_ID_ASC = 'ACCEPTED_OFFERS_AVERAGE_INDEXER_ID_ASC',
  ACCEPTED_OFFERS_AVERAGE_INDEXER_ID_DESC = 'ACCEPTED_OFFERS_AVERAGE_INDEXER_ID_DESC',
  ACCEPTED_OFFERS_AVERAGE_LAST_EVENT_ASC = 'ACCEPTED_OFFERS_AVERAGE_LAST_EVENT_ASC',
  ACCEPTED_OFFERS_AVERAGE_LAST_EVENT_DESC = 'ACCEPTED_OFFERS_AVERAGE_LAST_EVENT_DESC',
  ACCEPTED_OFFERS_AVERAGE_OFFER_ID_ASC = 'ACCEPTED_OFFERS_AVERAGE_OFFER_ID_ASC',
  ACCEPTED_OFFERS_AVERAGE_OFFER_ID_DESC = 'ACCEPTED_OFFERS_AVERAGE_OFFER_ID_DESC',
  ACCEPTED_OFFERS_AVERAGE_SERVICE_AGREEMENT_ID_ASC = 'ACCEPTED_OFFERS_AVERAGE_SERVICE_AGREEMENT_ID_ASC',
  ACCEPTED_OFFERS_AVERAGE_SERVICE_AGREEMENT_ID_DESC = 'ACCEPTED_OFFERS_AVERAGE_SERVICE_AGREEMENT_ID_DESC',
  ACCEPTED_OFFERS_BY_INDEXER_ID__COUNT_ASC = 'ACCEPTED_OFFERS_BY_INDEXER_ID__COUNT_ASC',
  ACCEPTED_OFFERS_BY_INDEXER_ID__COUNT_DESC = 'ACCEPTED_OFFERS_BY_INDEXER_ID__COUNT_DESC',
  ACCEPTED_OFFERS_COUNT_ASC = 'ACCEPTED_OFFERS_COUNT_ASC',
  ACCEPTED_OFFERS_COUNT_DESC = 'ACCEPTED_OFFERS_COUNT_DESC',
  ACCEPTED_OFFERS_DISTINCT_COUNT_BLOCK_RANGE_ASC = 'ACCEPTED_OFFERS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  ACCEPTED_OFFERS_DISTINCT_COUNT_BLOCK_RANGE_DESC = 'ACCEPTED_OFFERS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  ACCEPTED_OFFERS_DISTINCT_COUNT_CREATED_BLOCK_ASC = 'ACCEPTED_OFFERS_DISTINCT_COUNT_CREATED_BLOCK_ASC',
  ACCEPTED_OFFERS_DISTINCT_COUNT_CREATED_BLOCK_DESC = 'ACCEPTED_OFFERS_DISTINCT_COUNT_CREATED_BLOCK_DESC',
  ACCEPTED_OFFERS_DISTINCT_COUNT_ID_ASC = 'ACCEPTED_OFFERS_DISTINCT_COUNT_ID_ASC',
  ACCEPTED_OFFERS_DISTINCT_COUNT_ID_DESC = 'ACCEPTED_OFFERS_DISTINCT_COUNT_ID_DESC',
  ACCEPTED_OFFERS_DISTINCT_COUNT_INDEXER_ID_ASC = 'ACCEPTED_OFFERS_DISTINCT_COUNT_INDEXER_ID_ASC',
  ACCEPTED_OFFERS_DISTINCT_COUNT_INDEXER_ID_DESC = 'ACCEPTED_OFFERS_DISTINCT_COUNT_INDEXER_ID_DESC',
  ACCEPTED_OFFERS_DISTINCT_COUNT_LAST_EVENT_ASC = 'ACCEPTED_OFFERS_DISTINCT_COUNT_LAST_EVENT_ASC',
  ACCEPTED_OFFERS_DISTINCT_COUNT_LAST_EVENT_DESC = 'ACCEPTED_OFFERS_DISTINCT_COUNT_LAST_EVENT_DESC',
  ACCEPTED_OFFERS_DISTINCT_COUNT_OFFER_ID_ASC = 'ACCEPTED_OFFERS_DISTINCT_COUNT_OFFER_ID_ASC',
  ACCEPTED_OFFERS_DISTINCT_COUNT_OFFER_ID_DESC = 'ACCEPTED_OFFERS_DISTINCT_COUNT_OFFER_ID_DESC',
  ACCEPTED_OFFERS_DISTINCT_COUNT_SERVICE_AGREEMENT_ID_ASC = 'ACCEPTED_OFFERS_DISTINCT_COUNT_SERVICE_AGREEMENT_ID_ASC',
  ACCEPTED_OFFERS_DISTINCT_COUNT_SERVICE_AGREEMENT_ID_DESC = 'ACCEPTED_OFFERS_DISTINCT_COUNT_SERVICE_AGREEMENT_ID_DESC',
  ACCEPTED_OFFERS_MAX_BLOCK_RANGE_ASC = 'ACCEPTED_OFFERS_MAX_BLOCK_RANGE_ASC',
  ACCEPTED_OFFERS_MAX_BLOCK_RANGE_DESC = 'ACCEPTED_OFFERS_MAX_BLOCK_RANGE_DESC',
  ACCEPTED_OFFERS_MAX_CREATED_BLOCK_ASC = 'ACCEPTED_OFFERS_MAX_CREATED_BLOCK_ASC',
  ACCEPTED_OFFERS_MAX_CREATED_BLOCK_DESC = 'ACCEPTED_OFFERS_MAX_CREATED_BLOCK_DESC',
  ACCEPTED_OFFERS_MAX_ID_ASC = 'ACCEPTED_OFFERS_MAX_ID_ASC',
  ACCEPTED_OFFERS_MAX_ID_DESC = 'ACCEPTED_OFFERS_MAX_ID_DESC',
  ACCEPTED_OFFERS_MAX_INDEXER_ID_ASC = 'ACCEPTED_OFFERS_MAX_INDEXER_ID_ASC',
  ACCEPTED_OFFERS_MAX_INDEXER_ID_DESC = 'ACCEPTED_OFFERS_MAX_INDEXER_ID_DESC',
  ACCEPTED_OFFERS_MAX_LAST_EVENT_ASC = 'ACCEPTED_OFFERS_MAX_LAST_EVENT_ASC',
  ACCEPTED_OFFERS_MAX_LAST_EVENT_DESC = 'ACCEPTED_OFFERS_MAX_LAST_EVENT_DESC',
  ACCEPTED_OFFERS_MAX_OFFER_ID_ASC = 'ACCEPTED_OFFERS_MAX_OFFER_ID_ASC',
  ACCEPTED_OFFERS_MAX_OFFER_ID_DESC = 'ACCEPTED_OFFERS_MAX_OFFER_ID_DESC',
  ACCEPTED_OFFERS_MAX_SERVICE_AGREEMENT_ID_ASC = 'ACCEPTED_OFFERS_MAX_SERVICE_AGREEMENT_ID_ASC',
  ACCEPTED_OFFERS_MAX_SERVICE_AGREEMENT_ID_DESC = 'ACCEPTED_OFFERS_MAX_SERVICE_AGREEMENT_ID_DESC',
  ACCEPTED_OFFERS_MIN_BLOCK_RANGE_ASC = 'ACCEPTED_OFFERS_MIN_BLOCK_RANGE_ASC',
  ACCEPTED_OFFERS_MIN_BLOCK_RANGE_DESC = 'ACCEPTED_OFFERS_MIN_BLOCK_RANGE_DESC',
  ACCEPTED_OFFERS_MIN_CREATED_BLOCK_ASC = 'ACCEPTED_OFFERS_MIN_CREATED_BLOCK_ASC',
  ACCEPTED_OFFERS_MIN_CREATED_BLOCK_DESC = 'ACCEPTED_OFFERS_MIN_CREATED_BLOCK_DESC',
  ACCEPTED_OFFERS_MIN_ID_ASC = 'ACCEPTED_OFFERS_MIN_ID_ASC',
  ACCEPTED_OFFERS_MIN_ID_DESC = 'ACCEPTED_OFFERS_MIN_ID_DESC',
  ACCEPTED_OFFERS_MIN_INDEXER_ID_ASC = 'ACCEPTED_OFFERS_MIN_INDEXER_ID_ASC',
  ACCEPTED_OFFERS_MIN_INDEXER_ID_DESC = 'ACCEPTED_OFFERS_MIN_INDEXER_ID_DESC',
  ACCEPTED_OFFERS_MIN_LAST_EVENT_ASC = 'ACCEPTED_OFFERS_MIN_LAST_EVENT_ASC',
  ACCEPTED_OFFERS_MIN_LAST_EVENT_DESC = 'ACCEPTED_OFFERS_MIN_LAST_EVENT_DESC',
  ACCEPTED_OFFERS_MIN_OFFER_ID_ASC = 'ACCEPTED_OFFERS_MIN_OFFER_ID_ASC',
  ACCEPTED_OFFERS_MIN_OFFER_ID_DESC = 'ACCEPTED_OFFERS_MIN_OFFER_ID_DESC',
  ACCEPTED_OFFERS_MIN_SERVICE_AGREEMENT_ID_ASC = 'ACCEPTED_OFFERS_MIN_SERVICE_AGREEMENT_ID_ASC',
  ACCEPTED_OFFERS_MIN_SERVICE_AGREEMENT_ID_DESC = 'ACCEPTED_OFFERS_MIN_SERVICE_AGREEMENT_ID_DESC',
  ACCEPTED_OFFERS_STDDEV_POPULATION_BLOCK_RANGE_ASC = 'ACCEPTED_OFFERS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  ACCEPTED_OFFERS_STDDEV_POPULATION_BLOCK_RANGE_DESC = 'ACCEPTED_OFFERS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  ACCEPTED_OFFERS_STDDEV_POPULATION_CREATED_BLOCK_ASC = 'ACCEPTED_OFFERS_STDDEV_POPULATION_CREATED_BLOCK_ASC',
  ACCEPTED_OFFERS_STDDEV_POPULATION_CREATED_BLOCK_DESC = 'ACCEPTED_OFFERS_STDDEV_POPULATION_CREATED_BLOCK_DESC',
  ACCEPTED_OFFERS_STDDEV_POPULATION_ID_ASC = 'ACCEPTED_OFFERS_STDDEV_POPULATION_ID_ASC',
  ACCEPTED_OFFERS_STDDEV_POPULATION_ID_DESC = 'ACCEPTED_OFFERS_STDDEV_POPULATION_ID_DESC',
  ACCEPTED_OFFERS_STDDEV_POPULATION_INDEXER_ID_ASC = 'ACCEPTED_OFFERS_STDDEV_POPULATION_INDEXER_ID_ASC',
  ACCEPTED_OFFERS_STDDEV_POPULATION_INDEXER_ID_DESC = 'ACCEPTED_OFFERS_STDDEV_POPULATION_INDEXER_ID_DESC',
  ACCEPTED_OFFERS_STDDEV_POPULATION_LAST_EVENT_ASC = 'ACCEPTED_OFFERS_STDDEV_POPULATION_LAST_EVENT_ASC',
  ACCEPTED_OFFERS_STDDEV_POPULATION_LAST_EVENT_DESC = 'ACCEPTED_OFFERS_STDDEV_POPULATION_LAST_EVENT_DESC',
  ACCEPTED_OFFERS_STDDEV_POPULATION_OFFER_ID_ASC = 'ACCEPTED_OFFERS_STDDEV_POPULATION_OFFER_ID_ASC',
  ACCEPTED_OFFERS_STDDEV_POPULATION_OFFER_ID_DESC = 'ACCEPTED_OFFERS_STDDEV_POPULATION_OFFER_ID_DESC',
  ACCEPTED_OFFERS_STDDEV_POPULATION_SERVICE_AGREEMENT_ID_ASC = 'ACCEPTED_OFFERS_STDDEV_POPULATION_SERVICE_AGREEMENT_ID_ASC',
  ACCEPTED_OFFERS_STDDEV_POPULATION_SERVICE_AGREEMENT_ID_DESC = 'ACCEPTED_OFFERS_STDDEV_POPULATION_SERVICE_AGREEMENT_ID_DESC',
  ACCEPTED_OFFERS_STDDEV_SAMPLE_BLOCK_RANGE_ASC = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  ACCEPTED_OFFERS_STDDEV_SAMPLE_BLOCK_RANGE_DESC = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  ACCEPTED_OFFERS_STDDEV_SAMPLE_CREATED_BLOCK_ASC = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_CREATED_BLOCK_ASC',
  ACCEPTED_OFFERS_STDDEV_SAMPLE_CREATED_BLOCK_DESC = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_CREATED_BLOCK_DESC',
  ACCEPTED_OFFERS_STDDEV_SAMPLE_ID_ASC = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_ID_ASC',
  ACCEPTED_OFFERS_STDDEV_SAMPLE_ID_DESC = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_ID_DESC',
  ACCEPTED_OFFERS_STDDEV_SAMPLE_INDEXER_ID_ASC = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_INDEXER_ID_ASC',
  ACCEPTED_OFFERS_STDDEV_SAMPLE_INDEXER_ID_DESC = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_INDEXER_ID_DESC',
  ACCEPTED_OFFERS_STDDEV_SAMPLE_LAST_EVENT_ASC = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_LAST_EVENT_ASC',
  ACCEPTED_OFFERS_STDDEV_SAMPLE_LAST_EVENT_DESC = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_LAST_EVENT_DESC',
  ACCEPTED_OFFERS_STDDEV_SAMPLE_OFFER_ID_ASC = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_OFFER_ID_ASC',
  ACCEPTED_OFFERS_STDDEV_SAMPLE_OFFER_ID_DESC = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_OFFER_ID_DESC',
  ACCEPTED_OFFERS_STDDEV_SAMPLE_SERVICE_AGREEMENT_ID_ASC = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_SERVICE_AGREEMENT_ID_ASC',
  ACCEPTED_OFFERS_STDDEV_SAMPLE_SERVICE_AGREEMENT_ID_DESC = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_SERVICE_AGREEMENT_ID_DESC',
  ACCEPTED_OFFERS_SUM_BLOCK_RANGE_ASC = 'ACCEPTED_OFFERS_SUM_BLOCK_RANGE_ASC',
  ACCEPTED_OFFERS_SUM_BLOCK_RANGE_DESC = 'ACCEPTED_OFFERS_SUM_BLOCK_RANGE_DESC',
  ACCEPTED_OFFERS_SUM_CREATED_BLOCK_ASC = 'ACCEPTED_OFFERS_SUM_CREATED_BLOCK_ASC',
  ACCEPTED_OFFERS_SUM_CREATED_BLOCK_DESC = 'ACCEPTED_OFFERS_SUM_CREATED_BLOCK_DESC',
  ACCEPTED_OFFERS_SUM_ID_ASC = 'ACCEPTED_OFFERS_SUM_ID_ASC',
  ACCEPTED_OFFERS_SUM_ID_DESC = 'ACCEPTED_OFFERS_SUM_ID_DESC',
  ACCEPTED_OFFERS_SUM_INDEXER_ID_ASC = 'ACCEPTED_OFFERS_SUM_INDEXER_ID_ASC',
  ACCEPTED_OFFERS_SUM_INDEXER_ID_DESC = 'ACCEPTED_OFFERS_SUM_INDEXER_ID_DESC',
  ACCEPTED_OFFERS_SUM_LAST_EVENT_ASC = 'ACCEPTED_OFFERS_SUM_LAST_EVENT_ASC',
  ACCEPTED_OFFERS_SUM_LAST_EVENT_DESC = 'ACCEPTED_OFFERS_SUM_LAST_EVENT_DESC',
  ACCEPTED_OFFERS_SUM_OFFER_ID_ASC = 'ACCEPTED_OFFERS_SUM_OFFER_ID_ASC',
  ACCEPTED_OFFERS_SUM_OFFER_ID_DESC = 'ACCEPTED_OFFERS_SUM_OFFER_ID_DESC',
  ACCEPTED_OFFERS_SUM_SERVICE_AGREEMENT_ID_ASC = 'ACCEPTED_OFFERS_SUM_SERVICE_AGREEMENT_ID_ASC',
  ACCEPTED_OFFERS_SUM_SERVICE_AGREEMENT_ID_DESC = 'ACCEPTED_OFFERS_SUM_SERVICE_AGREEMENT_ID_DESC',
  ACCEPTED_OFFERS_VARIANCE_POPULATION_BLOCK_RANGE_ASC = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  ACCEPTED_OFFERS_VARIANCE_POPULATION_BLOCK_RANGE_DESC = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  ACCEPTED_OFFERS_VARIANCE_POPULATION_CREATED_BLOCK_ASC = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_CREATED_BLOCK_ASC',
  ACCEPTED_OFFERS_VARIANCE_POPULATION_CREATED_BLOCK_DESC = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_CREATED_BLOCK_DESC',
  ACCEPTED_OFFERS_VARIANCE_POPULATION_ID_ASC = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_ID_ASC',
  ACCEPTED_OFFERS_VARIANCE_POPULATION_ID_DESC = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_ID_DESC',
  ACCEPTED_OFFERS_VARIANCE_POPULATION_INDEXER_ID_ASC = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_INDEXER_ID_ASC',
  ACCEPTED_OFFERS_VARIANCE_POPULATION_INDEXER_ID_DESC = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_INDEXER_ID_DESC',
  ACCEPTED_OFFERS_VARIANCE_POPULATION_LAST_EVENT_ASC = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_LAST_EVENT_ASC',
  ACCEPTED_OFFERS_VARIANCE_POPULATION_LAST_EVENT_DESC = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_LAST_EVENT_DESC',
  ACCEPTED_OFFERS_VARIANCE_POPULATION_OFFER_ID_ASC = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_OFFER_ID_ASC',
  ACCEPTED_OFFERS_VARIANCE_POPULATION_OFFER_ID_DESC = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_OFFER_ID_DESC',
  ACCEPTED_OFFERS_VARIANCE_POPULATION_SERVICE_AGREEMENT_ID_ASC = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_SERVICE_AGREEMENT_ID_ASC',
  ACCEPTED_OFFERS_VARIANCE_POPULATION_SERVICE_AGREEMENT_ID_DESC = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_SERVICE_AGREEMENT_ID_DESC',
  ACCEPTED_OFFERS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  ACCEPTED_OFFERS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  ACCEPTED_OFFERS_VARIANCE_SAMPLE_CREATED_BLOCK_ASC = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_CREATED_BLOCK_ASC',
  ACCEPTED_OFFERS_VARIANCE_SAMPLE_CREATED_BLOCK_DESC = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_CREATED_BLOCK_DESC',
  ACCEPTED_OFFERS_VARIANCE_SAMPLE_ID_ASC = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_ID_ASC',
  ACCEPTED_OFFERS_VARIANCE_SAMPLE_ID_DESC = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_ID_DESC',
  ACCEPTED_OFFERS_VARIANCE_SAMPLE_INDEXER_ID_ASC = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  ACCEPTED_OFFERS_VARIANCE_SAMPLE_INDEXER_ID_DESC = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  ACCEPTED_OFFERS_VARIANCE_SAMPLE_LAST_EVENT_ASC = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_LAST_EVENT_ASC',
  ACCEPTED_OFFERS_VARIANCE_SAMPLE_LAST_EVENT_DESC = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_LAST_EVENT_DESC',
  ACCEPTED_OFFERS_VARIANCE_SAMPLE_OFFER_ID_ASC = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_OFFER_ID_ASC',
  ACCEPTED_OFFERS_VARIANCE_SAMPLE_OFFER_ID_DESC = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_OFFER_ID_DESC',
  ACCEPTED_OFFERS_VARIANCE_SAMPLE_SERVICE_AGREEMENT_ID_ASC = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_SERVICE_AGREEMENT_ID_ASC',
  ACCEPTED_OFFERS_VARIANCE_SAMPLE_SERVICE_AGREEMENT_ID_DESC = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_SERVICE_AGREEMENT_ID_DESC',
  ACTIVE_ASC = 'ACTIVE_ASC',
  ACTIVE_DESC = 'ACTIVE_DESC',
  CAPACITY_ASC = 'CAPACITY_ASC',
  CAPACITY_DESC = 'CAPACITY_DESC',
  COMMISSION_ASC = 'COMMISSION_ASC',
  COMMISSION_DESC = 'COMMISSION_DESC',
  CONTROLLERS_AVERAGE_BLOCK_RANGE_ASC = 'CONTROLLERS_AVERAGE_BLOCK_RANGE_ASC',
  CONTROLLERS_AVERAGE_BLOCK_RANGE_DESC = 'CONTROLLERS_AVERAGE_BLOCK_RANGE_DESC',
  CONTROLLERS_AVERAGE_CONTROLLER_ASC = 'CONTROLLERS_AVERAGE_CONTROLLER_ASC',
  CONTROLLERS_AVERAGE_CONTROLLER_DESC = 'CONTROLLERS_AVERAGE_CONTROLLER_DESC',
  CONTROLLERS_AVERAGE_CREATED_BLOCK_ASC = 'CONTROLLERS_AVERAGE_CREATED_BLOCK_ASC',
  CONTROLLERS_AVERAGE_CREATED_BLOCK_DESC = 'CONTROLLERS_AVERAGE_CREATED_BLOCK_DESC',
  CONTROLLERS_AVERAGE_ID_ASC = 'CONTROLLERS_AVERAGE_ID_ASC',
  CONTROLLERS_AVERAGE_ID_DESC = 'CONTROLLERS_AVERAGE_ID_DESC',
  CONTROLLERS_AVERAGE_INDEXER_ID_ASC = 'CONTROLLERS_AVERAGE_INDEXER_ID_ASC',
  CONTROLLERS_AVERAGE_INDEXER_ID_DESC = 'CONTROLLERS_AVERAGE_INDEXER_ID_DESC',
  CONTROLLERS_AVERAGE_IS_ACTIVE_ASC = 'CONTROLLERS_AVERAGE_IS_ACTIVE_ASC',
  CONTROLLERS_AVERAGE_IS_ACTIVE_DESC = 'CONTROLLERS_AVERAGE_IS_ACTIVE_DESC',
  CONTROLLERS_AVERAGE_LAST_EVENT_ASC = 'CONTROLLERS_AVERAGE_LAST_EVENT_ASC',
  CONTROLLERS_AVERAGE_LAST_EVENT_DESC = 'CONTROLLERS_AVERAGE_LAST_EVENT_DESC',
  CONTROLLERS_BY_INDEXER_ID__COUNT_ASC = 'CONTROLLERS_BY_INDEXER_ID__COUNT_ASC',
  CONTROLLERS_BY_INDEXER_ID__COUNT_DESC = 'CONTROLLERS_BY_INDEXER_ID__COUNT_DESC',
  CONTROLLERS_COUNT_ASC = 'CONTROLLERS_COUNT_ASC',
  CONTROLLERS_COUNT_DESC = 'CONTROLLERS_COUNT_DESC',
  CONTROLLERS_DISTINCT_COUNT_BLOCK_RANGE_ASC = 'CONTROLLERS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  CONTROLLERS_DISTINCT_COUNT_BLOCK_RANGE_DESC = 'CONTROLLERS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  CONTROLLERS_DISTINCT_COUNT_CONTROLLER_ASC = 'CONTROLLERS_DISTINCT_COUNT_CONTROLLER_ASC',
  CONTROLLERS_DISTINCT_COUNT_CONTROLLER_DESC = 'CONTROLLERS_DISTINCT_COUNT_CONTROLLER_DESC',
  CONTROLLERS_DISTINCT_COUNT_CREATED_BLOCK_ASC = 'CONTROLLERS_DISTINCT_COUNT_CREATED_BLOCK_ASC',
  CONTROLLERS_DISTINCT_COUNT_CREATED_BLOCK_DESC = 'CONTROLLERS_DISTINCT_COUNT_CREATED_BLOCK_DESC',
  CONTROLLERS_DISTINCT_COUNT_ID_ASC = 'CONTROLLERS_DISTINCT_COUNT_ID_ASC',
  CONTROLLERS_DISTINCT_COUNT_ID_DESC = 'CONTROLLERS_DISTINCT_COUNT_ID_DESC',
  CONTROLLERS_DISTINCT_COUNT_INDEXER_ID_ASC = 'CONTROLLERS_DISTINCT_COUNT_INDEXER_ID_ASC',
  CONTROLLERS_DISTINCT_COUNT_INDEXER_ID_DESC = 'CONTROLLERS_DISTINCT_COUNT_INDEXER_ID_DESC',
  CONTROLLERS_DISTINCT_COUNT_IS_ACTIVE_ASC = 'CONTROLLERS_DISTINCT_COUNT_IS_ACTIVE_ASC',
  CONTROLLERS_DISTINCT_COUNT_IS_ACTIVE_DESC = 'CONTROLLERS_DISTINCT_COUNT_IS_ACTIVE_DESC',
  CONTROLLERS_DISTINCT_COUNT_LAST_EVENT_ASC = 'CONTROLLERS_DISTINCT_COUNT_LAST_EVENT_ASC',
  CONTROLLERS_DISTINCT_COUNT_LAST_EVENT_DESC = 'CONTROLLERS_DISTINCT_COUNT_LAST_EVENT_DESC',
  CONTROLLERS_MAX_BLOCK_RANGE_ASC = 'CONTROLLERS_MAX_BLOCK_RANGE_ASC',
  CONTROLLERS_MAX_BLOCK_RANGE_DESC = 'CONTROLLERS_MAX_BLOCK_RANGE_DESC',
  CONTROLLERS_MAX_CONTROLLER_ASC = 'CONTROLLERS_MAX_CONTROLLER_ASC',
  CONTROLLERS_MAX_CONTROLLER_DESC = 'CONTROLLERS_MAX_CONTROLLER_DESC',
  CONTROLLERS_MAX_CREATED_BLOCK_ASC = 'CONTROLLERS_MAX_CREATED_BLOCK_ASC',
  CONTROLLERS_MAX_CREATED_BLOCK_DESC = 'CONTROLLERS_MAX_CREATED_BLOCK_DESC',
  CONTROLLERS_MAX_ID_ASC = 'CONTROLLERS_MAX_ID_ASC',
  CONTROLLERS_MAX_ID_DESC = 'CONTROLLERS_MAX_ID_DESC',
  CONTROLLERS_MAX_INDEXER_ID_ASC = 'CONTROLLERS_MAX_INDEXER_ID_ASC',
  CONTROLLERS_MAX_INDEXER_ID_DESC = 'CONTROLLERS_MAX_INDEXER_ID_DESC',
  CONTROLLERS_MAX_IS_ACTIVE_ASC = 'CONTROLLERS_MAX_IS_ACTIVE_ASC',
  CONTROLLERS_MAX_IS_ACTIVE_DESC = 'CONTROLLERS_MAX_IS_ACTIVE_DESC',
  CONTROLLERS_MAX_LAST_EVENT_ASC = 'CONTROLLERS_MAX_LAST_EVENT_ASC',
  CONTROLLERS_MAX_LAST_EVENT_DESC = 'CONTROLLERS_MAX_LAST_EVENT_DESC',
  CONTROLLERS_MIN_BLOCK_RANGE_ASC = 'CONTROLLERS_MIN_BLOCK_RANGE_ASC',
  CONTROLLERS_MIN_BLOCK_RANGE_DESC = 'CONTROLLERS_MIN_BLOCK_RANGE_DESC',
  CONTROLLERS_MIN_CONTROLLER_ASC = 'CONTROLLERS_MIN_CONTROLLER_ASC',
  CONTROLLERS_MIN_CONTROLLER_DESC = 'CONTROLLERS_MIN_CONTROLLER_DESC',
  CONTROLLERS_MIN_CREATED_BLOCK_ASC = 'CONTROLLERS_MIN_CREATED_BLOCK_ASC',
  CONTROLLERS_MIN_CREATED_BLOCK_DESC = 'CONTROLLERS_MIN_CREATED_BLOCK_DESC',
  CONTROLLERS_MIN_ID_ASC = 'CONTROLLERS_MIN_ID_ASC',
  CONTROLLERS_MIN_ID_DESC = 'CONTROLLERS_MIN_ID_DESC',
  CONTROLLERS_MIN_INDEXER_ID_ASC = 'CONTROLLERS_MIN_INDEXER_ID_ASC',
  CONTROLLERS_MIN_INDEXER_ID_DESC = 'CONTROLLERS_MIN_INDEXER_ID_DESC',
  CONTROLLERS_MIN_IS_ACTIVE_ASC = 'CONTROLLERS_MIN_IS_ACTIVE_ASC',
  CONTROLLERS_MIN_IS_ACTIVE_DESC = 'CONTROLLERS_MIN_IS_ACTIVE_DESC',
  CONTROLLERS_MIN_LAST_EVENT_ASC = 'CONTROLLERS_MIN_LAST_EVENT_ASC',
  CONTROLLERS_MIN_LAST_EVENT_DESC = 'CONTROLLERS_MIN_LAST_EVENT_DESC',
  CONTROLLERS_STDDEV_POPULATION_BLOCK_RANGE_ASC = 'CONTROLLERS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  CONTROLLERS_STDDEV_POPULATION_BLOCK_RANGE_DESC = 'CONTROLLERS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  CONTROLLERS_STDDEV_POPULATION_CONTROLLER_ASC = 'CONTROLLERS_STDDEV_POPULATION_CONTROLLER_ASC',
  CONTROLLERS_STDDEV_POPULATION_CONTROLLER_DESC = 'CONTROLLERS_STDDEV_POPULATION_CONTROLLER_DESC',
  CONTROLLERS_STDDEV_POPULATION_CREATED_BLOCK_ASC = 'CONTROLLERS_STDDEV_POPULATION_CREATED_BLOCK_ASC',
  CONTROLLERS_STDDEV_POPULATION_CREATED_BLOCK_DESC = 'CONTROLLERS_STDDEV_POPULATION_CREATED_BLOCK_DESC',
  CONTROLLERS_STDDEV_POPULATION_ID_ASC = 'CONTROLLERS_STDDEV_POPULATION_ID_ASC',
  CONTROLLERS_STDDEV_POPULATION_ID_DESC = 'CONTROLLERS_STDDEV_POPULATION_ID_DESC',
  CONTROLLERS_STDDEV_POPULATION_INDEXER_ID_ASC = 'CONTROLLERS_STDDEV_POPULATION_INDEXER_ID_ASC',
  CONTROLLERS_STDDEV_POPULATION_INDEXER_ID_DESC = 'CONTROLLERS_STDDEV_POPULATION_INDEXER_ID_DESC',
  CONTROLLERS_STDDEV_POPULATION_IS_ACTIVE_ASC = 'CONTROLLERS_STDDEV_POPULATION_IS_ACTIVE_ASC',
  CONTROLLERS_STDDEV_POPULATION_IS_ACTIVE_DESC = 'CONTROLLERS_STDDEV_POPULATION_IS_ACTIVE_DESC',
  CONTROLLERS_STDDEV_POPULATION_LAST_EVENT_ASC = 'CONTROLLERS_STDDEV_POPULATION_LAST_EVENT_ASC',
  CONTROLLERS_STDDEV_POPULATION_LAST_EVENT_DESC = 'CONTROLLERS_STDDEV_POPULATION_LAST_EVENT_DESC',
  CONTROLLERS_STDDEV_SAMPLE_BLOCK_RANGE_ASC = 'CONTROLLERS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  CONTROLLERS_STDDEV_SAMPLE_BLOCK_RANGE_DESC = 'CONTROLLERS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  CONTROLLERS_STDDEV_SAMPLE_CONTROLLER_ASC = 'CONTROLLERS_STDDEV_SAMPLE_CONTROLLER_ASC',
  CONTROLLERS_STDDEV_SAMPLE_CONTROLLER_DESC = 'CONTROLLERS_STDDEV_SAMPLE_CONTROLLER_DESC',
  CONTROLLERS_STDDEV_SAMPLE_CREATED_BLOCK_ASC = 'CONTROLLERS_STDDEV_SAMPLE_CREATED_BLOCK_ASC',
  CONTROLLERS_STDDEV_SAMPLE_CREATED_BLOCK_DESC = 'CONTROLLERS_STDDEV_SAMPLE_CREATED_BLOCK_DESC',
  CONTROLLERS_STDDEV_SAMPLE_ID_ASC = 'CONTROLLERS_STDDEV_SAMPLE_ID_ASC',
  CONTROLLERS_STDDEV_SAMPLE_ID_DESC = 'CONTROLLERS_STDDEV_SAMPLE_ID_DESC',
  CONTROLLERS_STDDEV_SAMPLE_INDEXER_ID_ASC = 'CONTROLLERS_STDDEV_SAMPLE_INDEXER_ID_ASC',
  CONTROLLERS_STDDEV_SAMPLE_INDEXER_ID_DESC = 'CONTROLLERS_STDDEV_SAMPLE_INDEXER_ID_DESC',
  CONTROLLERS_STDDEV_SAMPLE_IS_ACTIVE_ASC = 'CONTROLLERS_STDDEV_SAMPLE_IS_ACTIVE_ASC',
  CONTROLLERS_STDDEV_SAMPLE_IS_ACTIVE_DESC = 'CONTROLLERS_STDDEV_SAMPLE_IS_ACTIVE_DESC',
  CONTROLLERS_STDDEV_SAMPLE_LAST_EVENT_ASC = 'CONTROLLERS_STDDEV_SAMPLE_LAST_EVENT_ASC',
  CONTROLLERS_STDDEV_SAMPLE_LAST_EVENT_DESC = 'CONTROLLERS_STDDEV_SAMPLE_LAST_EVENT_DESC',
  CONTROLLERS_SUM_BLOCK_RANGE_ASC = 'CONTROLLERS_SUM_BLOCK_RANGE_ASC',
  CONTROLLERS_SUM_BLOCK_RANGE_DESC = 'CONTROLLERS_SUM_BLOCK_RANGE_DESC',
  CONTROLLERS_SUM_CONTROLLER_ASC = 'CONTROLLERS_SUM_CONTROLLER_ASC',
  CONTROLLERS_SUM_CONTROLLER_DESC = 'CONTROLLERS_SUM_CONTROLLER_DESC',
  CONTROLLERS_SUM_CREATED_BLOCK_ASC = 'CONTROLLERS_SUM_CREATED_BLOCK_ASC',
  CONTROLLERS_SUM_CREATED_BLOCK_DESC = 'CONTROLLERS_SUM_CREATED_BLOCK_DESC',
  CONTROLLERS_SUM_ID_ASC = 'CONTROLLERS_SUM_ID_ASC',
  CONTROLLERS_SUM_ID_DESC = 'CONTROLLERS_SUM_ID_DESC',
  CONTROLLERS_SUM_INDEXER_ID_ASC = 'CONTROLLERS_SUM_INDEXER_ID_ASC',
  CONTROLLERS_SUM_INDEXER_ID_DESC = 'CONTROLLERS_SUM_INDEXER_ID_DESC',
  CONTROLLERS_SUM_IS_ACTIVE_ASC = 'CONTROLLERS_SUM_IS_ACTIVE_ASC',
  CONTROLLERS_SUM_IS_ACTIVE_DESC = 'CONTROLLERS_SUM_IS_ACTIVE_DESC',
  CONTROLLERS_SUM_LAST_EVENT_ASC = 'CONTROLLERS_SUM_LAST_EVENT_ASC',
  CONTROLLERS_SUM_LAST_EVENT_DESC = 'CONTROLLERS_SUM_LAST_EVENT_DESC',
  CONTROLLERS_VARIANCE_POPULATION_BLOCK_RANGE_ASC = 'CONTROLLERS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  CONTROLLERS_VARIANCE_POPULATION_BLOCK_RANGE_DESC = 'CONTROLLERS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  CONTROLLERS_VARIANCE_POPULATION_CONTROLLER_ASC = 'CONTROLLERS_VARIANCE_POPULATION_CONTROLLER_ASC',
  CONTROLLERS_VARIANCE_POPULATION_CONTROLLER_DESC = 'CONTROLLERS_VARIANCE_POPULATION_CONTROLLER_DESC',
  CONTROLLERS_VARIANCE_POPULATION_CREATED_BLOCK_ASC = 'CONTROLLERS_VARIANCE_POPULATION_CREATED_BLOCK_ASC',
  CONTROLLERS_VARIANCE_POPULATION_CREATED_BLOCK_DESC = 'CONTROLLERS_VARIANCE_POPULATION_CREATED_BLOCK_DESC',
  CONTROLLERS_VARIANCE_POPULATION_ID_ASC = 'CONTROLLERS_VARIANCE_POPULATION_ID_ASC',
  CONTROLLERS_VARIANCE_POPULATION_ID_DESC = 'CONTROLLERS_VARIANCE_POPULATION_ID_DESC',
  CONTROLLERS_VARIANCE_POPULATION_INDEXER_ID_ASC = 'CONTROLLERS_VARIANCE_POPULATION_INDEXER_ID_ASC',
  CONTROLLERS_VARIANCE_POPULATION_INDEXER_ID_DESC = 'CONTROLLERS_VARIANCE_POPULATION_INDEXER_ID_DESC',
  CONTROLLERS_VARIANCE_POPULATION_IS_ACTIVE_ASC = 'CONTROLLERS_VARIANCE_POPULATION_IS_ACTIVE_ASC',
  CONTROLLERS_VARIANCE_POPULATION_IS_ACTIVE_DESC = 'CONTROLLERS_VARIANCE_POPULATION_IS_ACTIVE_DESC',
  CONTROLLERS_VARIANCE_POPULATION_LAST_EVENT_ASC = 'CONTROLLERS_VARIANCE_POPULATION_LAST_EVENT_ASC',
  CONTROLLERS_VARIANCE_POPULATION_LAST_EVENT_DESC = 'CONTROLLERS_VARIANCE_POPULATION_LAST_EVENT_DESC',
  CONTROLLERS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC = 'CONTROLLERS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  CONTROLLERS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC = 'CONTROLLERS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  CONTROLLERS_VARIANCE_SAMPLE_CONTROLLER_ASC = 'CONTROLLERS_VARIANCE_SAMPLE_CONTROLLER_ASC',
  CONTROLLERS_VARIANCE_SAMPLE_CONTROLLER_DESC = 'CONTROLLERS_VARIANCE_SAMPLE_CONTROLLER_DESC',
  CONTROLLERS_VARIANCE_SAMPLE_CREATED_BLOCK_ASC = 'CONTROLLERS_VARIANCE_SAMPLE_CREATED_BLOCK_ASC',
  CONTROLLERS_VARIANCE_SAMPLE_CREATED_BLOCK_DESC = 'CONTROLLERS_VARIANCE_SAMPLE_CREATED_BLOCK_DESC',
  CONTROLLERS_VARIANCE_SAMPLE_ID_ASC = 'CONTROLLERS_VARIANCE_SAMPLE_ID_ASC',
  CONTROLLERS_VARIANCE_SAMPLE_ID_DESC = 'CONTROLLERS_VARIANCE_SAMPLE_ID_DESC',
  CONTROLLERS_VARIANCE_SAMPLE_INDEXER_ID_ASC = 'CONTROLLERS_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  CONTROLLERS_VARIANCE_SAMPLE_INDEXER_ID_DESC = 'CONTROLLERS_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  CONTROLLERS_VARIANCE_SAMPLE_IS_ACTIVE_ASC = 'CONTROLLERS_VARIANCE_SAMPLE_IS_ACTIVE_ASC',
  CONTROLLERS_VARIANCE_SAMPLE_IS_ACTIVE_DESC = 'CONTROLLERS_VARIANCE_SAMPLE_IS_ACTIVE_DESC',
  CONTROLLERS_VARIANCE_SAMPLE_LAST_EVENT_ASC = 'CONTROLLERS_VARIANCE_SAMPLE_LAST_EVENT_ASC',
  CONTROLLERS_VARIANCE_SAMPLE_LAST_EVENT_DESC = 'CONTROLLERS_VARIANCE_SAMPLE_LAST_EVENT_DESC',
  CONTROLLER_ASC = 'CONTROLLER_ASC',
  CONTROLLER_DESC = 'CONTROLLER_DESC',
  CREATED_BLOCK_ASC = 'CREATED_BLOCK_ASC',
  CREATED_BLOCK_DESC = 'CREATED_BLOCK_DESC',
  DELEGATIONS_AVERAGE_AMOUNT_ASC = 'DELEGATIONS_AVERAGE_AMOUNT_ASC',
  DELEGATIONS_AVERAGE_AMOUNT_DESC = 'DELEGATIONS_AVERAGE_AMOUNT_DESC',
  DELEGATIONS_AVERAGE_BLOCK_RANGE_ASC = 'DELEGATIONS_AVERAGE_BLOCK_RANGE_ASC',
  DELEGATIONS_AVERAGE_BLOCK_RANGE_DESC = 'DELEGATIONS_AVERAGE_BLOCK_RANGE_DESC',
  DELEGATIONS_AVERAGE_CREATED_BLOCK_ASC = 'DELEGATIONS_AVERAGE_CREATED_BLOCK_ASC',
  DELEGATIONS_AVERAGE_CREATED_BLOCK_DESC = 'DELEGATIONS_AVERAGE_CREATED_BLOCK_DESC',
  DELEGATIONS_AVERAGE_DELEGATOR_ID_ASC = 'DELEGATIONS_AVERAGE_DELEGATOR_ID_ASC',
  DELEGATIONS_AVERAGE_DELEGATOR_ID_DESC = 'DELEGATIONS_AVERAGE_DELEGATOR_ID_DESC',
  DELEGATIONS_AVERAGE_EXIT_ERA_ASC = 'DELEGATIONS_AVERAGE_EXIT_ERA_ASC',
  DELEGATIONS_AVERAGE_EXIT_ERA_DESC = 'DELEGATIONS_AVERAGE_EXIT_ERA_DESC',
  DELEGATIONS_AVERAGE_ID_ASC = 'DELEGATIONS_AVERAGE_ID_ASC',
  DELEGATIONS_AVERAGE_ID_DESC = 'DELEGATIONS_AVERAGE_ID_DESC',
  DELEGATIONS_AVERAGE_INDEXER_ID_ASC = 'DELEGATIONS_AVERAGE_INDEXER_ID_ASC',
  DELEGATIONS_AVERAGE_INDEXER_ID_DESC = 'DELEGATIONS_AVERAGE_INDEXER_ID_DESC',
  DELEGATIONS_AVERAGE_LAST_EVENT_ASC = 'DELEGATIONS_AVERAGE_LAST_EVENT_ASC',
  DELEGATIONS_AVERAGE_LAST_EVENT_DESC = 'DELEGATIONS_AVERAGE_LAST_EVENT_DESC',
  DELEGATIONS_BY_INDEXER_ID__COUNT_ASC = 'DELEGATIONS_BY_INDEXER_ID__COUNT_ASC',
  DELEGATIONS_BY_INDEXER_ID__COUNT_DESC = 'DELEGATIONS_BY_INDEXER_ID__COUNT_DESC',
  DELEGATIONS_COUNT_ASC = 'DELEGATIONS_COUNT_ASC',
  DELEGATIONS_COUNT_DESC = 'DELEGATIONS_COUNT_DESC',
  DELEGATIONS_DISTINCT_COUNT_AMOUNT_ASC = 'DELEGATIONS_DISTINCT_COUNT_AMOUNT_ASC',
  DELEGATIONS_DISTINCT_COUNT_AMOUNT_DESC = 'DELEGATIONS_DISTINCT_COUNT_AMOUNT_DESC',
  DELEGATIONS_DISTINCT_COUNT_BLOCK_RANGE_ASC = 'DELEGATIONS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  DELEGATIONS_DISTINCT_COUNT_BLOCK_RANGE_DESC = 'DELEGATIONS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  DELEGATIONS_DISTINCT_COUNT_CREATED_BLOCK_ASC = 'DELEGATIONS_DISTINCT_COUNT_CREATED_BLOCK_ASC',
  DELEGATIONS_DISTINCT_COUNT_CREATED_BLOCK_DESC = 'DELEGATIONS_DISTINCT_COUNT_CREATED_BLOCK_DESC',
  DELEGATIONS_DISTINCT_COUNT_DELEGATOR_ID_ASC = 'DELEGATIONS_DISTINCT_COUNT_DELEGATOR_ID_ASC',
  DELEGATIONS_DISTINCT_COUNT_DELEGATOR_ID_DESC = 'DELEGATIONS_DISTINCT_COUNT_DELEGATOR_ID_DESC',
  DELEGATIONS_DISTINCT_COUNT_EXIT_ERA_ASC = 'DELEGATIONS_DISTINCT_COUNT_EXIT_ERA_ASC',
  DELEGATIONS_DISTINCT_COUNT_EXIT_ERA_DESC = 'DELEGATIONS_DISTINCT_COUNT_EXIT_ERA_DESC',
  DELEGATIONS_DISTINCT_COUNT_ID_ASC = 'DELEGATIONS_DISTINCT_COUNT_ID_ASC',
  DELEGATIONS_DISTINCT_COUNT_ID_DESC = 'DELEGATIONS_DISTINCT_COUNT_ID_DESC',
  DELEGATIONS_DISTINCT_COUNT_INDEXER_ID_ASC = 'DELEGATIONS_DISTINCT_COUNT_INDEXER_ID_ASC',
  DELEGATIONS_DISTINCT_COUNT_INDEXER_ID_DESC = 'DELEGATIONS_DISTINCT_COUNT_INDEXER_ID_DESC',
  DELEGATIONS_DISTINCT_COUNT_LAST_EVENT_ASC = 'DELEGATIONS_DISTINCT_COUNT_LAST_EVENT_ASC',
  DELEGATIONS_DISTINCT_COUNT_LAST_EVENT_DESC = 'DELEGATIONS_DISTINCT_COUNT_LAST_EVENT_DESC',
  DELEGATIONS_MAX_AMOUNT_ASC = 'DELEGATIONS_MAX_AMOUNT_ASC',
  DELEGATIONS_MAX_AMOUNT_DESC = 'DELEGATIONS_MAX_AMOUNT_DESC',
  DELEGATIONS_MAX_BLOCK_RANGE_ASC = 'DELEGATIONS_MAX_BLOCK_RANGE_ASC',
  DELEGATIONS_MAX_BLOCK_RANGE_DESC = 'DELEGATIONS_MAX_BLOCK_RANGE_DESC',
  DELEGATIONS_MAX_CREATED_BLOCK_ASC = 'DELEGATIONS_MAX_CREATED_BLOCK_ASC',
  DELEGATIONS_MAX_CREATED_BLOCK_DESC = 'DELEGATIONS_MAX_CREATED_BLOCK_DESC',
  DELEGATIONS_MAX_DELEGATOR_ID_ASC = 'DELEGATIONS_MAX_DELEGATOR_ID_ASC',
  DELEGATIONS_MAX_DELEGATOR_ID_DESC = 'DELEGATIONS_MAX_DELEGATOR_ID_DESC',
  DELEGATIONS_MAX_EXIT_ERA_ASC = 'DELEGATIONS_MAX_EXIT_ERA_ASC',
  DELEGATIONS_MAX_EXIT_ERA_DESC = 'DELEGATIONS_MAX_EXIT_ERA_DESC',
  DELEGATIONS_MAX_ID_ASC = 'DELEGATIONS_MAX_ID_ASC',
  DELEGATIONS_MAX_ID_DESC = 'DELEGATIONS_MAX_ID_DESC',
  DELEGATIONS_MAX_INDEXER_ID_ASC = 'DELEGATIONS_MAX_INDEXER_ID_ASC',
  DELEGATIONS_MAX_INDEXER_ID_DESC = 'DELEGATIONS_MAX_INDEXER_ID_DESC',
  DELEGATIONS_MAX_LAST_EVENT_ASC = 'DELEGATIONS_MAX_LAST_EVENT_ASC',
  DELEGATIONS_MAX_LAST_EVENT_DESC = 'DELEGATIONS_MAX_LAST_EVENT_DESC',
  DELEGATIONS_MIN_AMOUNT_ASC = 'DELEGATIONS_MIN_AMOUNT_ASC',
  DELEGATIONS_MIN_AMOUNT_DESC = 'DELEGATIONS_MIN_AMOUNT_DESC',
  DELEGATIONS_MIN_BLOCK_RANGE_ASC = 'DELEGATIONS_MIN_BLOCK_RANGE_ASC',
  DELEGATIONS_MIN_BLOCK_RANGE_DESC = 'DELEGATIONS_MIN_BLOCK_RANGE_DESC',
  DELEGATIONS_MIN_CREATED_BLOCK_ASC = 'DELEGATIONS_MIN_CREATED_BLOCK_ASC',
  DELEGATIONS_MIN_CREATED_BLOCK_DESC = 'DELEGATIONS_MIN_CREATED_BLOCK_DESC',
  DELEGATIONS_MIN_DELEGATOR_ID_ASC = 'DELEGATIONS_MIN_DELEGATOR_ID_ASC',
  DELEGATIONS_MIN_DELEGATOR_ID_DESC = 'DELEGATIONS_MIN_DELEGATOR_ID_DESC',
  DELEGATIONS_MIN_EXIT_ERA_ASC = 'DELEGATIONS_MIN_EXIT_ERA_ASC',
  DELEGATIONS_MIN_EXIT_ERA_DESC = 'DELEGATIONS_MIN_EXIT_ERA_DESC',
  DELEGATIONS_MIN_ID_ASC = 'DELEGATIONS_MIN_ID_ASC',
  DELEGATIONS_MIN_ID_DESC = 'DELEGATIONS_MIN_ID_DESC',
  DELEGATIONS_MIN_INDEXER_ID_ASC = 'DELEGATIONS_MIN_INDEXER_ID_ASC',
  DELEGATIONS_MIN_INDEXER_ID_DESC = 'DELEGATIONS_MIN_INDEXER_ID_DESC',
  DELEGATIONS_MIN_LAST_EVENT_ASC = 'DELEGATIONS_MIN_LAST_EVENT_ASC',
  DELEGATIONS_MIN_LAST_EVENT_DESC = 'DELEGATIONS_MIN_LAST_EVENT_DESC',
  DELEGATIONS_STDDEV_POPULATION_AMOUNT_ASC = 'DELEGATIONS_STDDEV_POPULATION_AMOUNT_ASC',
  DELEGATIONS_STDDEV_POPULATION_AMOUNT_DESC = 'DELEGATIONS_STDDEV_POPULATION_AMOUNT_DESC',
  DELEGATIONS_STDDEV_POPULATION_BLOCK_RANGE_ASC = 'DELEGATIONS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  DELEGATIONS_STDDEV_POPULATION_BLOCK_RANGE_DESC = 'DELEGATIONS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  DELEGATIONS_STDDEV_POPULATION_CREATED_BLOCK_ASC = 'DELEGATIONS_STDDEV_POPULATION_CREATED_BLOCK_ASC',
  DELEGATIONS_STDDEV_POPULATION_CREATED_BLOCK_DESC = 'DELEGATIONS_STDDEV_POPULATION_CREATED_BLOCK_DESC',
  DELEGATIONS_STDDEV_POPULATION_DELEGATOR_ID_ASC = 'DELEGATIONS_STDDEV_POPULATION_DELEGATOR_ID_ASC',
  DELEGATIONS_STDDEV_POPULATION_DELEGATOR_ID_DESC = 'DELEGATIONS_STDDEV_POPULATION_DELEGATOR_ID_DESC',
  DELEGATIONS_STDDEV_POPULATION_EXIT_ERA_ASC = 'DELEGATIONS_STDDEV_POPULATION_EXIT_ERA_ASC',
  DELEGATIONS_STDDEV_POPULATION_EXIT_ERA_DESC = 'DELEGATIONS_STDDEV_POPULATION_EXIT_ERA_DESC',
  DELEGATIONS_STDDEV_POPULATION_ID_ASC = 'DELEGATIONS_STDDEV_POPULATION_ID_ASC',
  DELEGATIONS_STDDEV_POPULATION_ID_DESC = 'DELEGATIONS_STDDEV_POPULATION_ID_DESC',
  DELEGATIONS_STDDEV_POPULATION_INDEXER_ID_ASC = 'DELEGATIONS_STDDEV_POPULATION_INDEXER_ID_ASC',
  DELEGATIONS_STDDEV_POPULATION_INDEXER_ID_DESC = 'DELEGATIONS_STDDEV_POPULATION_INDEXER_ID_DESC',
  DELEGATIONS_STDDEV_POPULATION_LAST_EVENT_ASC = 'DELEGATIONS_STDDEV_POPULATION_LAST_EVENT_ASC',
  DELEGATIONS_STDDEV_POPULATION_LAST_EVENT_DESC = 'DELEGATIONS_STDDEV_POPULATION_LAST_EVENT_DESC',
  DELEGATIONS_STDDEV_SAMPLE_AMOUNT_ASC = 'DELEGATIONS_STDDEV_SAMPLE_AMOUNT_ASC',
  DELEGATIONS_STDDEV_SAMPLE_AMOUNT_DESC = 'DELEGATIONS_STDDEV_SAMPLE_AMOUNT_DESC',
  DELEGATIONS_STDDEV_SAMPLE_BLOCK_RANGE_ASC = 'DELEGATIONS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  DELEGATIONS_STDDEV_SAMPLE_BLOCK_RANGE_DESC = 'DELEGATIONS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  DELEGATIONS_STDDEV_SAMPLE_CREATED_BLOCK_ASC = 'DELEGATIONS_STDDEV_SAMPLE_CREATED_BLOCK_ASC',
  DELEGATIONS_STDDEV_SAMPLE_CREATED_BLOCK_DESC = 'DELEGATIONS_STDDEV_SAMPLE_CREATED_BLOCK_DESC',
  DELEGATIONS_STDDEV_SAMPLE_DELEGATOR_ID_ASC = 'DELEGATIONS_STDDEV_SAMPLE_DELEGATOR_ID_ASC',
  DELEGATIONS_STDDEV_SAMPLE_DELEGATOR_ID_DESC = 'DELEGATIONS_STDDEV_SAMPLE_DELEGATOR_ID_DESC',
  DELEGATIONS_STDDEV_SAMPLE_EXIT_ERA_ASC = 'DELEGATIONS_STDDEV_SAMPLE_EXIT_ERA_ASC',
  DELEGATIONS_STDDEV_SAMPLE_EXIT_ERA_DESC = 'DELEGATIONS_STDDEV_SAMPLE_EXIT_ERA_DESC',
  DELEGATIONS_STDDEV_SAMPLE_ID_ASC = 'DELEGATIONS_STDDEV_SAMPLE_ID_ASC',
  DELEGATIONS_STDDEV_SAMPLE_ID_DESC = 'DELEGATIONS_STDDEV_SAMPLE_ID_DESC',
  DELEGATIONS_STDDEV_SAMPLE_INDEXER_ID_ASC = 'DELEGATIONS_STDDEV_SAMPLE_INDEXER_ID_ASC',
  DELEGATIONS_STDDEV_SAMPLE_INDEXER_ID_DESC = 'DELEGATIONS_STDDEV_SAMPLE_INDEXER_ID_DESC',
  DELEGATIONS_STDDEV_SAMPLE_LAST_EVENT_ASC = 'DELEGATIONS_STDDEV_SAMPLE_LAST_EVENT_ASC',
  DELEGATIONS_STDDEV_SAMPLE_LAST_EVENT_DESC = 'DELEGATIONS_STDDEV_SAMPLE_LAST_EVENT_DESC',
  DELEGATIONS_SUM_AMOUNT_ASC = 'DELEGATIONS_SUM_AMOUNT_ASC',
  DELEGATIONS_SUM_AMOUNT_DESC = 'DELEGATIONS_SUM_AMOUNT_DESC',
  DELEGATIONS_SUM_BLOCK_RANGE_ASC = 'DELEGATIONS_SUM_BLOCK_RANGE_ASC',
  DELEGATIONS_SUM_BLOCK_RANGE_DESC = 'DELEGATIONS_SUM_BLOCK_RANGE_DESC',
  DELEGATIONS_SUM_CREATED_BLOCK_ASC = 'DELEGATIONS_SUM_CREATED_BLOCK_ASC',
  DELEGATIONS_SUM_CREATED_BLOCK_DESC = 'DELEGATIONS_SUM_CREATED_BLOCK_DESC',
  DELEGATIONS_SUM_DELEGATOR_ID_ASC = 'DELEGATIONS_SUM_DELEGATOR_ID_ASC',
  DELEGATIONS_SUM_DELEGATOR_ID_DESC = 'DELEGATIONS_SUM_DELEGATOR_ID_DESC',
  DELEGATIONS_SUM_EXIT_ERA_ASC = 'DELEGATIONS_SUM_EXIT_ERA_ASC',
  DELEGATIONS_SUM_EXIT_ERA_DESC = 'DELEGATIONS_SUM_EXIT_ERA_DESC',
  DELEGATIONS_SUM_ID_ASC = 'DELEGATIONS_SUM_ID_ASC',
  DELEGATIONS_SUM_ID_DESC = 'DELEGATIONS_SUM_ID_DESC',
  DELEGATIONS_SUM_INDEXER_ID_ASC = 'DELEGATIONS_SUM_INDEXER_ID_ASC',
  DELEGATIONS_SUM_INDEXER_ID_DESC = 'DELEGATIONS_SUM_INDEXER_ID_DESC',
  DELEGATIONS_SUM_LAST_EVENT_ASC = 'DELEGATIONS_SUM_LAST_EVENT_ASC',
  DELEGATIONS_SUM_LAST_EVENT_DESC = 'DELEGATIONS_SUM_LAST_EVENT_DESC',
  DELEGATIONS_VARIANCE_POPULATION_AMOUNT_ASC = 'DELEGATIONS_VARIANCE_POPULATION_AMOUNT_ASC',
  DELEGATIONS_VARIANCE_POPULATION_AMOUNT_DESC = 'DELEGATIONS_VARIANCE_POPULATION_AMOUNT_DESC',
  DELEGATIONS_VARIANCE_POPULATION_BLOCK_RANGE_ASC = 'DELEGATIONS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  DELEGATIONS_VARIANCE_POPULATION_BLOCK_RANGE_DESC = 'DELEGATIONS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  DELEGATIONS_VARIANCE_POPULATION_CREATED_BLOCK_ASC = 'DELEGATIONS_VARIANCE_POPULATION_CREATED_BLOCK_ASC',
  DELEGATIONS_VARIANCE_POPULATION_CREATED_BLOCK_DESC = 'DELEGATIONS_VARIANCE_POPULATION_CREATED_BLOCK_DESC',
  DELEGATIONS_VARIANCE_POPULATION_DELEGATOR_ID_ASC = 'DELEGATIONS_VARIANCE_POPULATION_DELEGATOR_ID_ASC',
  DELEGATIONS_VARIANCE_POPULATION_DELEGATOR_ID_DESC = 'DELEGATIONS_VARIANCE_POPULATION_DELEGATOR_ID_DESC',
  DELEGATIONS_VARIANCE_POPULATION_EXIT_ERA_ASC = 'DELEGATIONS_VARIANCE_POPULATION_EXIT_ERA_ASC',
  DELEGATIONS_VARIANCE_POPULATION_EXIT_ERA_DESC = 'DELEGATIONS_VARIANCE_POPULATION_EXIT_ERA_DESC',
  DELEGATIONS_VARIANCE_POPULATION_ID_ASC = 'DELEGATIONS_VARIANCE_POPULATION_ID_ASC',
  DELEGATIONS_VARIANCE_POPULATION_ID_DESC = 'DELEGATIONS_VARIANCE_POPULATION_ID_DESC',
  DELEGATIONS_VARIANCE_POPULATION_INDEXER_ID_ASC = 'DELEGATIONS_VARIANCE_POPULATION_INDEXER_ID_ASC',
  DELEGATIONS_VARIANCE_POPULATION_INDEXER_ID_DESC = 'DELEGATIONS_VARIANCE_POPULATION_INDEXER_ID_DESC',
  DELEGATIONS_VARIANCE_POPULATION_LAST_EVENT_ASC = 'DELEGATIONS_VARIANCE_POPULATION_LAST_EVENT_ASC',
  DELEGATIONS_VARIANCE_POPULATION_LAST_EVENT_DESC = 'DELEGATIONS_VARIANCE_POPULATION_LAST_EVENT_DESC',
  DELEGATIONS_VARIANCE_SAMPLE_AMOUNT_ASC = 'DELEGATIONS_VARIANCE_SAMPLE_AMOUNT_ASC',
  DELEGATIONS_VARIANCE_SAMPLE_AMOUNT_DESC = 'DELEGATIONS_VARIANCE_SAMPLE_AMOUNT_DESC',
  DELEGATIONS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC = 'DELEGATIONS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  DELEGATIONS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC = 'DELEGATIONS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  DELEGATIONS_VARIANCE_SAMPLE_CREATED_BLOCK_ASC = 'DELEGATIONS_VARIANCE_SAMPLE_CREATED_BLOCK_ASC',
  DELEGATIONS_VARIANCE_SAMPLE_CREATED_BLOCK_DESC = 'DELEGATIONS_VARIANCE_SAMPLE_CREATED_BLOCK_DESC',
  DELEGATIONS_VARIANCE_SAMPLE_DELEGATOR_ID_ASC = 'DELEGATIONS_VARIANCE_SAMPLE_DELEGATOR_ID_ASC',
  DELEGATIONS_VARIANCE_SAMPLE_DELEGATOR_ID_DESC = 'DELEGATIONS_VARIANCE_SAMPLE_DELEGATOR_ID_DESC',
  DELEGATIONS_VARIANCE_SAMPLE_EXIT_ERA_ASC = 'DELEGATIONS_VARIANCE_SAMPLE_EXIT_ERA_ASC',
  DELEGATIONS_VARIANCE_SAMPLE_EXIT_ERA_DESC = 'DELEGATIONS_VARIANCE_SAMPLE_EXIT_ERA_DESC',
  DELEGATIONS_VARIANCE_SAMPLE_ID_ASC = 'DELEGATIONS_VARIANCE_SAMPLE_ID_ASC',
  DELEGATIONS_VARIANCE_SAMPLE_ID_DESC = 'DELEGATIONS_VARIANCE_SAMPLE_ID_DESC',
  DELEGATIONS_VARIANCE_SAMPLE_INDEXER_ID_ASC = 'DELEGATIONS_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  DELEGATIONS_VARIANCE_SAMPLE_INDEXER_ID_DESC = 'DELEGATIONS_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  DELEGATIONS_VARIANCE_SAMPLE_LAST_EVENT_ASC = 'DELEGATIONS_VARIANCE_SAMPLE_LAST_EVENT_ASC',
  DELEGATIONS_VARIANCE_SAMPLE_LAST_EVENT_DESC = 'DELEGATIONS_VARIANCE_SAMPLE_LAST_EVENT_DESC',
  ERA_DELEGATOR_INDEXER_APIES_AVERAGE_APY_ASC = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_APY_ASC',
  ERA_DELEGATOR_INDEXER_APIES_AVERAGE_APY_DESC = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_APY_DESC',
  ERA_DELEGATOR_INDEXER_APIES_AVERAGE_BLOCK_RANGE_ASC = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_BLOCK_RANGE_ASC',
  ERA_DELEGATOR_INDEXER_APIES_AVERAGE_BLOCK_RANGE_DESC = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_BLOCK_RANGE_DESC',
  ERA_DELEGATOR_INDEXER_APIES_AVERAGE_CREATE_AT_ASC = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_CREATE_AT_ASC',
  ERA_DELEGATOR_INDEXER_APIES_AVERAGE_CREATE_AT_DESC = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_CREATE_AT_DESC',
  ERA_DELEGATOR_INDEXER_APIES_AVERAGE_DELEGATOR_ID_ASC = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_DELEGATOR_ID_ASC',
  ERA_DELEGATOR_INDEXER_APIES_AVERAGE_DELEGATOR_ID_DESC = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_DELEGATOR_ID_DESC',
  ERA_DELEGATOR_INDEXER_APIES_AVERAGE_ERA_IDX_ASC = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_ERA_IDX_ASC',
  ERA_DELEGATOR_INDEXER_APIES_AVERAGE_ERA_IDX_DESC = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_ERA_IDX_DESC',
  ERA_DELEGATOR_INDEXER_APIES_AVERAGE_ID_ASC = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_ID_ASC',
  ERA_DELEGATOR_INDEXER_APIES_AVERAGE_ID_DESC = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_ID_DESC',
  ERA_DELEGATOR_INDEXER_APIES_AVERAGE_INDEXER_ID_ASC = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_INDEXER_ID_ASC',
  ERA_DELEGATOR_INDEXER_APIES_AVERAGE_INDEXER_ID_DESC = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_INDEXER_ID_DESC',
  ERA_DELEGATOR_INDEXER_APIES_AVERAGE_REWARD_ASC = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_REWARD_ASC',
  ERA_DELEGATOR_INDEXER_APIES_AVERAGE_REWARD_DESC = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_REWARD_DESC',
  ERA_DELEGATOR_INDEXER_APIES_AVERAGE_STAKE_ASC = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_STAKE_ASC',
  ERA_DELEGATOR_INDEXER_APIES_AVERAGE_STAKE_DESC = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_STAKE_DESC',
  ERA_DELEGATOR_INDEXER_APIES_AVERAGE_UPDATE_AT_ASC = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_UPDATE_AT_ASC',
  ERA_DELEGATOR_INDEXER_APIES_AVERAGE_UPDATE_AT_DESC = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_UPDATE_AT_DESC',
  ERA_DELEGATOR_INDEXER_APIES_BY_INDEXER_ID__COUNT_ASC = 'ERA_DELEGATOR_INDEXER_APIES_BY_INDEXER_ID__COUNT_ASC',
  ERA_DELEGATOR_INDEXER_APIES_BY_INDEXER_ID__COUNT_DESC = 'ERA_DELEGATOR_INDEXER_APIES_BY_INDEXER_ID__COUNT_DESC',
  ERA_DELEGATOR_INDEXER_APIES_COUNT_ASC = 'ERA_DELEGATOR_INDEXER_APIES_COUNT_ASC',
  ERA_DELEGATOR_INDEXER_APIES_COUNT_DESC = 'ERA_DELEGATOR_INDEXER_APIES_COUNT_DESC',
  ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_APY_ASC = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_APY_ASC',
  ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_APY_DESC = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_APY_DESC',
  ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_BLOCK_RANGE_ASC = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_BLOCK_RANGE_DESC = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_CREATE_AT_ASC = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_CREATE_AT_ASC',
  ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_CREATE_AT_DESC = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_CREATE_AT_DESC',
  ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_DELEGATOR_ID_ASC = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_DELEGATOR_ID_ASC',
  ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_DELEGATOR_ID_DESC = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_DELEGATOR_ID_DESC',
  ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_ERA_IDX_ASC = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_ERA_IDX_ASC',
  ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_ERA_IDX_DESC = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_ERA_IDX_DESC',
  ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_ID_ASC = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_ID_ASC',
  ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_ID_DESC = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_ID_DESC',
  ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_INDEXER_ID_ASC = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_INDEXER_ID_ASC',
  ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_INDEXER_ID_DESC = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_INDEXER_ID_DESC',
  ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_REWARD_ASC = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_REWARD_ASC',
  ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_REWARD_DESC = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_REWARD_DESC',
  ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_STAKE_ASC = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_STAKE_ASC',
  ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_STAKE_DESC = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_STAKE_DESC',
  ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_UPDATE_AT_ASC = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_UPDATE_AT_ASC',
  ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_UPDATE_AT_DESC = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_UPDATE_AT_DESC',
  ERA_DELEGATOR_INDEXER_APIES_MAX_APY_ASC = 'ERA_DELEGATOR_INDEXER_APIES_MAX_APY_ASC',
  ERA_DELEGATOR_INDEXER_APIES_MAX_APY_DESC = 'ERA_DELEGATOR_INDEXER_APIES_MAX_APY_DESC',
  ERA_DELEGATOR_INDEXER_APIES_MAX_BLOCK_RANGE_ASC = 'ERA_DELEGATOR_INDEXER_APIES_MAX_BLOCK_RANGE_ASC',
  ERA_DELEGATOR_INDEXER_APIES_MAX_BLOCK_RANGE_DESC = 'ERA_DELEGATOR_INDEXER_APIES_MAX_BLOCK_RANGE_DESC',
  ERA_DELEGATOR_INDEXER_APIES_MAX_CREATE_AT_ASC = 'ERA_DELEGATOR_INDEXER_APIES_MAX_CREATE_AT_ASC',
  ERA_DELEGATOR_INDEXER_APIES_MAX_CREATE_AT_DESC = 'ERA_DELEGATOR_INDEXER_APIES_MAX_CREATE_AT_DESC',
  ERA_DELEGATOR_INDEXER_APIES_MAX_DELEGATOR_ID_ASC = 'ERA_DELEGATOR_INDEXER_APIES_MAX_DELEGATOR_ID_ASC',
  ERA_DELEGATOR_INDEXER_APIES_MAX_DELEGATOR_ID_DESC = 'ERA_DELEGATOR_INDEXER_APIES_MAX_DELEGATOR_ID_DESC',
  ERA_DELEGATOR_INDEXER_APIES_MAX_ERA_IDX_ASC = 'ERA_DELEGATOR_INDEXER_APIES_MAX_ERA_IDX_ASC',
  ERA_DELEGATOR_INDEXER_APIES_MAX_ERA_IDX_DESC = 'ERA_DELEGATOR_INDEXER_APIES_MAX_ERA_IDX_DESC',
  ERA_DELEGATOR_INDEXER_APIES_MAX_ID_ASC = 'ERA_DELEGATOR_INDEXER_APIES_MAX_ID_ASC',
  ERA_DELEGATOR_INDEXER_APIES_MAX_ID_DESC = 'ERA_DELEGATOR_INDEXER_APIES_MAX_ID_DESC',
  ERA_DELEGATOR_INDEXER_APIES_MAX_INDEXER_ID_ASC = 'ERA_DELEGATOR_INDEXER_APIES_MAX_INDEXER_ID_ASC',
  ERA_DELEGATOR_INDEXER_APIES_MAX_INDEXER_ID_DESC = 'ERA_DELEGATOR_INDEXER_APIES_MAX_INDEXER_ID_DESC',
  ERA_DELEGATOR_INDEXER_APIES_MAX_REWARD_ASC = 'ERA_DELEGATOR_INDEXER_APIES_MAX_REWARD_ASC',
  ERA_DELEGATOR_INDEXER_APIES_MAX_REWARD_DESC = 'ERA_DELEGATOR_INDEXER_APIES_MAX_REWARD_DESC',
  ERA_DELEGATOR_INDEXER_APIES_MAX_STAKE_ASC = 'ERA_DELEGATOR_INDEXER_APIES_MAX_STAKE_ASC',
  ERA_DELEGATOR_INDEXER_APIES_MAX_STAKE_DESC = 'ERA_DELEGATOR_INDEXER_APIES_MAX_STAKE_DESC',
  ERA_DELEGATOR_INDEXER_APIES_MAX_UPDATE_AT_ASC = 'ERA_DELEGATOR_INDEXER_APIES_MAX_UPDATE_AT_ASC',
  ERA_DELEGATOR_INDEXER_APIES_MAX_UPDATE_AT_DESC = 'ERA_DELEGATOR_INDEXER_APIES_MAX_UPDATE_AT_DESC',
  ERA_DELEGATOR_INDEXER_APIES_MIN_APY_ASC = 'ERA_DELEGATOR_INDEXER_APIES_MIN_APY_ASC',
  ERA_DELEGATOR_INDEXER_APIES_MIN_APY_DESC = 'ERA_DELEGATOR_INDEXER_APIES_MIN_APY_DESC',
  ERA_DELEGATOR_INDEXER_APIES_MIN_BLOCK_RANGE_ASC = 'ERA_DELEGATOR_INDEXER_APIES_MIN_BLOCK_RANGE_ASC',
  ERA_DELEGATOR_INDEXER_APIES_MIN_BLOCK_RANGE_DESC = 'ERA_DELEGATOR_INDEXER_APIES_MIN_BLOCK_RANGE_DESC',
  ERA_DELEGATOR_INDEXER_APIES_MIN_CREATE_AT_ASC = 'ERA_DELEGATOR_INDEXER_APIES_MIN_CREATE_AT_ASC',
  ERA_DELEGATOR_INDEXER_APIES_MIN_CREATE_AT_DESC = 'ERA_DELEGATOR_INDEXER_APIES_MIN_CREATE_AT_DESC',
  ERA_DELEGATOR_INDEXER_APIES_MIN_DELEGATOR_ID_ASC = 'ERA_DELEGATOR_INDEXER_APIES_MIN_DELEGATOR_ID_ASC',
  ERA_DELEGATOR_INDEXER_APIES_MIN_DELEGATOR_ID_DESC = 'ERA_DELEGATOR_INDEXER_APIES_MIN_DELEGATOR_ID_DESC',
  ERA_DELEGATOR_INDEXER_APIES_MIN_ERA_IDX_ASC = 'ERA_DELEGATOR_INDEXER_APIES_MIN_ERA_IDX_ASC',
  ERA_DELEGATOR_INDEXER_APIES_MIN_ERA_IDX_DESC = 'ERA_DELEGATOR_INDEXER_APIES_MIN_ERA_IDX_DESC',
  ERA_DELEGATOR_INDEXER_APIES_MIN_ID_ASC = 'ERA_DELEGATOR_INDEXER_APIES_MIN_ID_ASC',
  ERA_DELEGATOR_INDEXER_APIES_MIN_ID_DESC = 'ERA_DELEGATOR_INDEXER_APIES_MIN_ID_DESC',
  ERA_DELEGATOR_INDEXER_APIES_MIN_INDEXER_ID_ASC = 'ERA_DELEGATOR_INDEXER_APIES_MIN_INDEXER_ID_ASC',
  ERA_DELEGATOR_INDEXER_APIES_MIN_INDEXER_ID_DESC = 'ERA_DELEGATOR_INDEXER_APIES_MIN_INDEXER_ID_DESC',
  ERA_DELEGATOR_INDEXER_APIES_MIN_REWARD_ASC = 'ERA_DELEGATOR_INDEXER_APIES_MIN_REWARD_ASC',
  ERA_DELEGATOR_INDEXER_APIES_MIN_REWARD_DESC = 'ERA_DELEGATOR_INDEXER_APIES_MIN_REWARD_DESC',
  ERA_DELEGATOR_INDEXER_APIES_MIN_STAKE_ASC = 'ERA_DELEGATOR_INDEXER_APIES_MIN_STAKE_ASC',
  ERA_DELEGATOR_INDEXER_APIES_MIN_STAKE_DESC = 'ERA_DELEGATOR_INDEXER_APIES_MIN_STAKE_DESC',
  ERA_DELEGATOR_INDEXER_APIES_MIN_UPDATE_AT_ASC = 'ERA_DELEGATOR_INDEXER_APIES_MIN_UPDATE_AT_ASC',
  ERA_DELEGATOR_INDEXER_APIES_MIN_UPDATE_AT_DESC = 'ERA_DELEGATOR_INDEXER_APIES_MIN_UPDATE_AT_DESC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_APY_ASC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_APY_ASC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_APY_DESC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_APY_DESC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_BLOCK_RANGE_ASC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_BLOCK_RANGE_DESC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_CREATE_AT_ASC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_CREATE_AT_ASC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_CREATE_AT_DESC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_CREATE_AT_DESC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_DELEGATOR_ID_ASC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_DELEGATOR_ID_ASC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_DELEGATOR_ID_DESC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_DELEGATOR_ID_DESC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_ERA_IDX_ASC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_ERA_IDX_ASC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_ERA_IDX_DESC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_ERA_IDX_DESC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_ID_ASC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_ID_ASC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_ID_DESC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_ID_DESC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_INDEXER_ID_ASC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_INDEXER_ID_ASC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_INDEXER_ID_DESC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_INDEXER_ID_DESC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_REWARD_ASC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_REWARD_ASC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_REWARD_DESC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_REWARD_DESC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_STAKE_ASC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_STAKE_ASC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_STAKE_DESC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_STAKE_DESC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_UPDATE_AT_ASC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_UPDATE_AT_ASC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_UPDATE_AT_DESC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_UPDATE_AT_DESC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_APY_ASC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_APY_ASC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_APY_DESC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_APY_DESC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_BLOCK_RANGE_ASC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_BLOCK_RANGE_DESC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_CREATE_AT_ASC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_CREATE_AT_ASC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_CREATE_AT_DESC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_CREATE_AT_DESC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_DELEGATOR_ID_ASC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_DELEGATOR_ID_ASC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_DELEGATOR_ID_DESC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_DELEGATOR_ID_DESC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_ERA_IDX_ASC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_ERA_IDX_ASC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_ERA_IDX_DESC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_ERA_IDX_DESC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_ID_ASC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_ID_ASC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_ID_DESC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_ID_DESC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_INDEXER_ID_ASC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_INDEXER_ID_ASC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_INDEXER_ID_DESC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_INDEXER_ID_DESC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_REWARD_ASC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_REWARD_ASC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_REWARD_DESC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_REWARD_DESC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_STAKE_ASC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_STAKE_ASC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_STAKE_DESC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_STAKE_DESC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_UPDATE_AT_ASC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_UPDATE_AT_ASC',
  ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_UPDATE_AT_DESC = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_UPDATE_AT_DESC',
  ERA_DELEGATOR_INDEXER_APIES_SUM_APY_ASC = 'ERA_DELEGATOR_INDEXER_APIES_SUM_APY_ASC',
  ERA_DELEGATOR_INDEXER_APIES_SUM_APY_DESC = 'ERA_DELEGATOR_INDEXER_APIES_SUM_APY_DESC',
  ERA_DELEGATOR_INDEXER_APIES_SUM_BLOCK_RANGE_ASC = 'ERA_DELEGATOR_INDEXER_APIES_SUM_BLOCK_RANGE_ASC',
  ERA_DELEGATOR_INDEXER_APIES_SUM_BLOCK_RANGE_DESC = 'ERA_DELEGATOR_INDEXER_APIES_SUM_BLOCK_RANGE_DESC',
  ERA_DELEGATOR_INDEXER_APIES_SUM_CREATE_AT_ASC = 'ERA_DELEGATOR_INDEXER_APIES_SUM_CREATE_AT_ASC',
  ERA_DELEGATOR_INDEXER_APIES_SUM_CREATE_AT_DESC = 'ERA_DELEGATOR_INDEXER_APIES_SUM_CREATE_AT_DESC',
  ERA_DELEGATOR_INDEXER_APIES_SUM_DELEGATOR_ID_ASC = 'ERA_DELEGATOR_INDEXER_APIES_SUM_DELEGATOR_ID_ASC',
  ERA_DELEGATOR_INDEXER_APIES_SUM_DELEGATOR_ID_DESC = 'ERA_DELEGATOR_INDEXER_APIES_SUM_DELEGATOR_ID_DESC',
  ERA_DELEGATOR_INDEXER_APIES_SUM_ERA_IDX_ASC = 'ERA_DELEGATOR_INDEXER_APIES_SUM_ERA_IDX_ASC',
  ERA_DELEGATOR_INDEXER_APIES_SUM_ERA_IDX_DESC = 'ERA_DELEGATOR_INDEXER_APIES_SUM_ERA_IDX_DESC',
  ERA_DELEGATOR_INDEXER_APIES_SUM_ID_ASC = 'ERA_DELEGATOR_INDEXER_APIES_SUM_ID_ASC',
  ERA_DELEGATOR_INDEXER_APIES_SUM_ID_DESC = 'ERA_DELEGATOR_INDEXER_APIES_SUM_ID_DESC',
  ERA_DELEGATOR_INDEXER_APIES_SUM_INDEXER_ID_ASC = 'ERA_DELEGATOR_INDEXER_APIES_SUM_INDEXER_ID_ASC',
  ERA_DELEGATOR_INDEXER_APIES_SUM_INDEXER_ID_DESC = 'ERA_DELEGATOR_INDEXER_APIES_SUM_INDEXER_ID_DESC',
  ERA_DELEGATOR_INDEXER_APIES_SUM_REWARD_ASC = 'ERA_DELEGATOR_INDEXER_APIES_SUM_REWARD_ASC',
  ERA_DELEGATOR_INDEXER_APIES_SUM_REWARD_DESC = 'ERA_DELEGATOR_INDEXER_APIES_SUM_REWARD_DESC',
  ERA_DELEGATOR_INDEXER_APIES_SUM_STAKE_ASC = 'ERA_DELEGATOR_INDEXER_APIES_SUM_STAKE_ASC',
  ERA_DELEGATOR_INDEXER_APIES_SUM_STAKE_DESC = 'ERA_DELEGATOR_INDEXER_APIES_SUM_STAKE_DESC',
  ERA_DELEGATOR_INDEXER_APIES_SUM_UPDATE_AT_ASC = 'ERA_DELEGATOR_INDEXER_APIES_SUM_UPDATE_AT_ASC',
  ERA_DELEGATOR_INDEXER_APIES_SUM_UPDATE_AT_DESC = 'ERA_DELEGATOR_INDEXER_APIES_SUM_UPDATE_AT_DESC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_APY_ASC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_APY_ASC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_APY_DESC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_APY_DESC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_BLOCK_RANGE_ASC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_BLOCK_RANGE_DESC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_CREATE_AT_ASC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_CREATE_AT_ASC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_CREATE_AT_DESC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_CREATE_AT_DESC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_DELEGATOR_ID_ASC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_DELEGATOR_ID_ASC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_DELEGATOR_ID_DESC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_DELEGATOR_ID_DESC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_ERA_IDX_ASC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_ERA_IDX_ASC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_ERA_IDX_DESC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_ERA_IDX_DESC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_ID_ASC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_ID_ASC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_ID_DESC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_ID_DESC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_INDEXER_ID_ASC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_INDEXER_ID_ASC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_INDEXER_ID_DESC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_INDEXER_ID_DESC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_REWARD_ASC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_REWARD_ASC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_REWARD_DESC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_REWARD_DESC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_STAKE_ASC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_STAKE_ASC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_STAKE_DESC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_STAKE_DESC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_UPDATE_AT_ASC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_UPDATE_AT_ASC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_UPDATE_AT_DESC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_UPDATE_AT_DESC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_APY_ASC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_APY_ASC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_APY_DESC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_APY_DESC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_CREATE_AT_ASC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_CREATE_AT_ASC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_CREATE_AT_DESC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_CREATE_AT_DESC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_DELEGATOR_ID_ASC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_DELEGATOR_ID_ASC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_DELEGATOR_ID_DESC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_DELEGATOR_ID_DESC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_ERA_IDX_ASC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_ERA_IDX_ASC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_ERA_IDX_DESC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_ERA_IDX_DESC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_ID_ASC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_ID_ASC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_ID_DESC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_ID_DESC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_INDEXER_ID_ASC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_INDEXER_ID_DESC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_REWARD_ASC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_REWARD_ASC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_REWARD_DESC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_REWARD_DESC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_STAKE_ASC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_STAKE_ASC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_STAKE_DESC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_STAKE_DESC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_UPDATE_AT_ASC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_UPDATE_AT_ASC',
  ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_UPDATE_AT_DESC = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_UPDATE_AT_DESC',
  ERA_INDEXER_APIES_AVERAGE_BLOCK_RANGE_ASC = 'ERA_INDEXER_APIES_AVERAGE_BLOCK_RANGE_ASC',
  ERA_INDEXER_APIES_AVERAGE_BLOCK_RANGE_DESC = 'ERA_INDEXER_APIES_AVERAGE_BLOCK_RANGE_DESC',
  ERA_INDEXER_APIES_AVERAGE_CREATE_AT_ASC = 'ERA_INDEXER_APIES_AVERAGE_CREATE_AT_ASC',
  ERA_INDEXER_APIES_AVERAGE_CREATE_AT_DESC = 'ERA_INDEXER_APIES_AVERAGE_CREATE_AT_DESC',
  ERA_INDEXER_APIES_AVERAGE_DELEGATOR_APY_ASC = 'ERA_INDEXER_APIES_AVERAGE_DELEGATOR_APY_ASC',
  ERA_INDEXER_APIES_AVERAGE_DELEGATOR_APY_DESC = 'ERA_INDEXER_APIES_AVERAGE_DELEGATOR_APY_DESC',
  ERA_INDEXER_APIES_AVERAGE_DELEGATOR_REWARD_ASC = 'ERA_INDEXER_APIES_AVERAGE_DELEGATOR_REWARD_ASC',
  ERA_INDEXER_APIES_AVERAGE_DELEGATOR_REWARD_DESC = 'ERA_INDEXER_APIES_AVERAGE_DELEGATOR_REWARD_DESC',
  ERA_INDEXER_APIES_AVERAGE_ERA_IDX_ASC = 'ERA_INDEXER_APIES_AVERAGE_ERA_IDX_ASC',
  ERA_INDEXER_APIES_AVERAGE_ERA_IDX_DESC = 'ERA_INDEXER_APIES_AVERAGE_ERA_IDX_DESC',
  ERA_INDEXER_APIES_AVERAGE_ID_ASC = 'ERA_INDEXER_APIES_AVERAGE_ID_ASC',
  ERA_INDEXER_APIES_AVERAGE_ID_DESC = 'ERA_INDEXER_APIES_AVERAGE_ID_DESC',
  ERA_INDEXER_APIES_AVERAGE_INDEXER_APY_ASC = 'ERA_INDEXER_APIES_AVERAGE_INDEXER_APY_ASC',
  ERA_INDEXER_APIES_AVERAGE_INDEXER_APY_DESC = 'ERA_INDEXER_APIES_AVERAGE_INDEXER_APY_DESC',
  ERA_INDEXER_APIES_AVERAGE_INDEXER_ID_ASC = 'ERA_INDEXER_APIES_AVERAGE_INDEXER_ID_ASC',
  ERA_INDEXER_APIES_AVERAGE_INDEXER_ID_DESC = 'ERA_INDEXER_APIES_AVERAGE_INDEXER_ID_DESC',
  ERA_INDEXER_APIES_AVERAGE_INDEXER_REWARD_ASC = 'ERA_INDEXER_APIES_AVERAGE_INDEXER_REWARD_ASC',
  ERA_INDEXER_APIES_AVERAGE_INDEXER_REWARD_DESC = 'ERA_INDEXER_APIES_AVERAGE_INDEXER_REWARD_DESC',
  ERA_INDEXER_APIES_AVERAGE_UPDATE_AT_ASC = 'ERA_INDEXER_APIES_AVERAGE_UPDATE_AT_ASC',
  ERA_INDEXER_APIES_AVERAGE_UPDATE_AT_DESC = 'ERA_INDEXER_APIES_AVERAGE_UPDATE_AT_DESC',
  ERA_INDEXER_APIES_BY_INDEXER_ID__COUNT_ASC = 'ERA_INDEXER_APIES_BY_INDEXER_ID__COUNT_ASC',
  ERA_INDEXER_APIES_BY_INDEXER_ID__COUNT_DESC = 'ERA_INDEXER_APIES_BY_INDEXER_ID__COUNT_DESC',
  ERA_INDEXER_APIES_COUNT_ASC = 'ERA_INDEXER_APIES_COUNT_ASC',
  ERA_INDEXER_APIES_COUNT_DESC = 'ERA_INDEXER_APIES_COUNT_DESC',
  ERA_INDEXER_APIES_DISTINCT_COUNT_BLOCK_RANGE_ASC = 'ERA_INDEXER_APIES_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  ERA_INDEXER_APIES_DISTINCT_COUNT_BLOCK_RANGE_DESC = 'ERA_INDEXER_APIES_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  ERA_INDEXER_APIES_DISTINCT_COUNT_CREATE_AT_ASC = 'ERA_INDEXER_APIES_DISTINCT_COUNT_CREATE_AT_ASC',
  ERA_INDEXER_APIES_DISTINCT_COUNT_CREATE_AT_DESC = 'ERA_INDEXER_APIES_DISTINCT_COUNT_CREATE_AT_DESC',
  ERA_INDEXER_APIES_DISTINCT_COUNT_DELEGATOR_APY_ASC = 'ERA_INDEXER_APIES_DISTINCT_COUNT_DELEGATOR_APY_ASC',
  ERA_INDEXER_APIES_DISTINCT_COUNT_DELEGATOR_APY_DESC = 'ERA_INDEXER_APIES_DISTINCT_COUNT_DELEGATOR_APY_DESC',
  ERA_INDEXER_APIES_DISTINCT_COUNT_DELEGATOR_REWARD_ASC = 'ERA_INDEXER_APIES_DISTINCT_COUNT_DELEGATOR_REWARD_ASC',
  ERA_INDEXER_APIES_DISTINCT_COUNT_DELEGATOR_REWARD_DESC = 'ERA_INDEXER_APIES_DISTINCT_COUNT_DELEGATOR_REWARD_DESC',
  ERA_INDEXER_APIES_DISTINCT_COUNT_ERA_IDX_ASC = 'ERA_INDEXER_APIES_DISTINCT_COUNT_ERA_IDX_ASC',
  ERA_INDEXER_APIES_DISTINCT_COUNT_ERA_IDX_DESC = 'ERA_INDEXER_APIES_DISTINCT_COUNT_ERA_IDX_DESC',
  ERA_INDEXER_APIES_DISTINCT_COUNT_ID_ASC = 'ERA_INDEXER_APIES_DISTINCT_COUNT_ID_ASC',
  ERA_INDEXER_APIES_DISTINCT_COUNT_ID_DESC = 'ERA_INDEXER_APIES_DISTINCT_COUNT_ID_DESC',
  ERA_INDEXER_APIES_DISTINCT_COUNT_INDEXER_APY_ASC = 'ERA_INDEXER_APIES_DISTINCT_COUNT_INDEXER_APY_ASC',
  ERA_INDEXER_APIES_DISTINCT_COUNT_INDEXER_APY_DESC = 'ERA_INDEXER_APIES_DISTINCT_COUNT_INDEXER_APY_DESC',
  ERA_INDEXER_APIES_DISTINCT_COUNT_INDEXER_ID_ASC = 'ERA_INDEXER_APIES_DISTINCT_COUNT_INDEXER_ID_ASC',
  ERA_INDEXER_APIES_DISTINCT_COUNT_INDEXER_ID_DESC = 'ERA_INDEXER_APIES_DISTINCT_COUNT_INDEXER_ID_DESC',
  ERA_INDEXER_APIES_DISTINCT_COUNT_INDEXER_REWARD_ASC = 'ERA_INDEXER_APIES_DISTINCT_COUNT_INDEXER_REWARD_ASC',
  ERA_INDEXER_APIES_DISTINCT_COUNT_INDEXER_REWARD_DESC = 'ERA_INDEXER_APIES_DISTINCT_COUNT_INDEXER_REWARD_DESC',
  ERA_INDEXER_APIES_DISTINCT_COUNT_UPDATE_AT_ASC = 'ERA_INDEXER_APIES_DISTINCT_COUNT_UPDATE_AT_ASC',
  ERA_INDEXER_APIES_DISTINCT_COUNT_UPDATE_AT_DESC = 'ERA_INDEXER_APIES_DISTINCT_COUNT_UPDATE_AT_DESC',
  ERA_INDEXER_APIES_MAX_BLOCK_RANGE_ASC = 'ERA_INDEXER_APIES_MAX_BLOCK_RANGE_ASC',
  ERA_INDEXER_APIES_MAX_BLOCK_RANGE_DESC = 'ERA_INDEXER_APIES_MAX_BLOCK_RANGE_DESC',
  ERA_INDEXER_APIES_MAX_CREATE_AT_ASC = 'ERA_INDEXER_APIES_MAX_CREATE_AT_ASC',
  ERA_INDEXER_APIES_MAX_CREATE_AT_DESC = 'ERA_INDEXER_APIES_MAX_CREATE_AT_DESC',
  ERA_INDEXER_APIES_MAX_DELEGATOR_APY_ASC = 'ERA_INDEXER_APIES_MAX_DELEGATOR_APY_ASC',
  ERA_INDEXER_APIES_MAX_DELEGATOR_APY_DESC = 'ERA_INDEXER_APIES_MAX_DELEGATOR_APY_DESC',
  ERA_INDEXER_APIES_MAX_DELEGATOR_REWARD_ASC = 'ERA_INDEXER_APIES_MAX_DELEGATOR_REWARD_ASC',
  ERA_INDEXER_APIES_MAX_DELEGATOR_REWARD_DESC = 'ERA_INDEXER_APIES_MAX_DELEGATOR_REWARD_DESC',
  ERA_INDEXER_APIES_MAX_ERA_IDX_ASC = 'ERA_INDEXER_APIES_MAX_ERA_IDX_ASC',
  ERA_INDEXER_APIES_MAX_ERA_IDX_DESC = 'ERA_INDEXER_APIES_MAX_ERA_IDX_DESC',
  ERA_INDEXER_APIES_MAX_ID_ASC = 'ERA_INDEXER_APIES_MAX_ID_ASC',
  ERA_INDEXER_APIES_MAX_ID_DESC = 'ERA_INDEXER_APIES_MAX_ID_DESC',
  ERA_INDEXER_APIES_MAX_INDEXER_APY_ASC = 'ERA_INDEXER_APIES_MAX_INDEXER_APY_ASC',
  ERA_INDEXER_APIES_MAX_INDEXER_APY_DESC = 'ERA_INDEXER_APIES_MAX_INDEXER_APY_DESC',
  ERA_INDEXER_APIES_MAX_INDEXER_ID_ASC = 'ERA_INDEXER_APIES_MAX_INDEXER_ID_ASC',
  ERA_INDEXER_APIES_MAX_INDEXER_ID_DESC = 'ERA_INDEXER_APIES_MAX_INDEXER_ID_DESC',
  ERA_INDEXER_APIES_MAX_INDEXER_REWARD_ASC = 'ERA_INDEXER_APIES_MAX_INDEXER_REWARD_ASC',
  ERA_INDEXER_APIES_MAX_INDEXER_REWARD_DESC = 'ERA_INDEXER_APIES_MAX_INDEXER_REWARD_DESC',
  ERA_INDEXER_APIES_MAX_UPDATE_AT_ASC = 'ERA_INDEXER_APIES_MAX_UPDATE_AT_ASC',
  ERA_INDEXER_APIES_MAX_UPDATE_AT_DESC = 'ERA_INDEXER_APIES_MAX_UPDATE_AT_DESC',
  ERA_INDEXER_APIES_MIN_BLOCK_RANGE_ASC = 'ERA_INDEXER_APIES_MIN_BLOCK_RANGE_ASC',
  ERA_INDEXER_APIES_MIN_BLOCK_RANGE_DESC = 'ERA_INDEXER_APIES_MIN_BLOCK_RANGE_DESC',
  ERA_INDEXER_APIES_MIN_CREATE_AT_ASC = 'ERA_INDEXER_APIES_MIN_CREATE_AT_ASC',
  ERA_INDEXER_APIES_MIN_CREATE_AT_DESC = 'ERA_INDEXER_APIES_MIN_CREATE_AT_DESC',
  ERA_INDEXER_APIES_MIN_DELEGATOR_APY_ASC = 'ERA_INDEXER_APIES_MIN_DELEGATOR_APY_ASC',
  ERA_INDEXER_APIES_MIN_DELEGATOR_APY_DESC = 'ERA_INDEXER_APIES_MIN_DELEGATOR_APY_DESC',
  ERA_INDEXER_APIES_MIN_DELEGATOR_REWARD_ASC = 'ERA_INDEXER_APIES_MIN_DELEGATOR_REWARD_ASC',
  ERA_INDEXER_APIES_MIN_DELEGATOR_REWARD_DESC = 'ERA_INDEXER_APIES_MIN_DELEGATOR_REWARD_DESC',
  ERA_INDEXER_APIES_MIN_ERA_IDX_ASC = 'ERA_INDEXER_APIES_MIN_ERA_IDX_ASC',
  ERA_INDEXER_APIES_MIN_ERA_IDX_DESC = 'ERA_INDEXER_APIES_MIN_ERA_IDX_DESC',
  ERA_INDEXER_APIES_MIN_ID_ASC = 'ERA_INDEXER_APIES_MIN_ID_ASC',
  ERA_INDEXER_APIES_MIN_ID_DESC = 'ERA_INDEXER_APIES_MIN_ID_DESC',
  ERA_INDEXER_APIES_MIN_INDEXER_APY_ASC = 'ERA_INDEXER_APIES_MIN_INDEXER_APY_ASC',
  ERA_INDEXER_APIES_MIN_INDEXER_APY_DESC = 'ERA_INDEXER_APIES_MIN_INDEXER_APY_DESC',
  ERA_INDEXER_APIES_MIN_INDEXER_ID_ASC = 'ERA_INDEXER_APIES_MIN_INDEXER_ID_ASC',
  ERA_INDEXER_APIES_MIN_INDEXER_ID_DESC = 'ERA_INDEXER_APIES_MIN_INDEXER_ID_DESC',
  ERA_INDEXER_APIES_MIN_INDEXER_REWARD_ASC = 'ERA_INDEXER_APIES_MIN_INDEXER_REWARD_ASC',
  ERA_INDEXER_APIES_MIN_INDEXER_REWARD_DESC = 'ERA_INDEXER_APIES_MIN_INDEXER_REWARD_DESC',
  ERA_INDEXER_APIES_MIN_UPDATE_AT_ASC = 'ERA_INDEXER_APIES_MIN_UPDATE_AT_ASC',
  ERA_INDEXER_APIES_MIN_UPDATE_AT_DESC = 'ERA_INDEXER_APIES_MIN_UPDATE_AT_DESC',
  ERA_INDEXER_APIES_STDDEV_POPULATION_BLOCK_RANGE_ASC = 'ERA_INDEXER_APIES_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  ERA_INDEXER_APIES_STDDEV_POPULATION_BLOCK_RANGE_DESC = 'ERA_INDEXER_APIES_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  ERA_INDEXER_APIES_STDDEV_POPULATION_CREATE_AT_ASC = 'ERA_INDEXER_APIES_STDDEV_POPULATION_CREATE_AT_ASC',
  ERA_INDEXER_APIES_STDDEV_POPULATION_CREATE_AT_DESC = 'ERA_INDEXER_APIES_STDDEV_POPULATION_CREATE_AT_DESC',
  ERA_INDEXER_APIES_STDDEV_POPULATION_DELEGATOR_APY_ASC = 'ERA_INDEXER_APIES_STDDEV_POPULATION_DELEGATOR_APY_ASC',
  ERA_INDEXER_APIES_STDDEV_POPULATION_DELEGATOR_APY_DESC = 'ERA_INDEXER_APIES_STDDEV_POPULATION_DELEGATOR_APY_DESC',
  ERA_INDEXER_APIES_STDDEV_POPULATION_DELEGATOR_REWARD_ASC = 'ERA_INDEXER_APIES_STDDEV_POPULATION_DELEGATOR_REWARD_ASC',
  ERA_INDEXER_APIES_STDDEV_POPULATION_DELEGATOR_REWARD_DESC = 'ERA_INDEXER_APIES_STDDEV_POPULATION_DELEGATOR_REWARD_DESC',
  ERA_INDEXER_APIES_STDDEV_POPULATION_ERA_IDX_ASC = 'ERA_INDEXER_APIES_STDDEV_POPULATION_ERA_IDX_ASC',
  ERA_INDEXER_APIES_STDDEV_POPULATION_ERA_IDX_DESC = 'ERA_INDEXER_APIES_STDDEV_POPULATION_ERA_IDX_DESC',
  ERA_INDEXER_APIES_STDDEV_POPULATION_ID_ASC = 'ERA_INDEXER_APIES_STDDEV_POPULATION_ID_ASC',
  ERA_INDEXER_APIES_STDDEV_POPULATION_ID_DESC = 'ERA_INDEXER_APIES_STDDEV_POPULATION_ID_DESC',
  ERA_INDEXER_APIES_STDDEV_POPULATION_INDEXER_APY_ASC = 'ERA_INDEXER_APIES_STDDEV_POPULATION_INDEXER_APY_ASC',
  ERA_INDEXER_APIES_STDDEV_POPULATION_INDEXER_APY_DESC = 'ERA_INDEXER_APIES_STDDEV_POPULATION_INDEXER_APY_DESC',
  ERA_INDEXER_APIES_STDDEV_POPULATION_INDEXER_ID_ASC = 'ERA_INDEXER_APIES_STDDEV_POPULATION_INDEXER_ID_ASC',
  ERA_INDEXER_APIES_STDDEV_POPULATION_INDEXER_ID_DESC = 'ERA_INDEXER_APIES_STDDEV_POPULATION_INDEXER_ID_DESC',
  ERA_INDEXER_APIES_STDDEV_POPULATION_INDEXER_REWARD_ASC = 'ERA_INDEXER_APIES_STDDEV_POPULATION_INDEXER_REWARD_ASC',
  ERA_INDEXER_APIES_STDDEV_POPULATION_INDEXER_REWARD_DESC = 'ERA_INDEXER_APIES_STDDEV_POPULATION_INDEXER_REWARD_DESC',
  ERA_INDEXER_APIES_STDDEV_POPULATION_UPDATE_AT_ASC = 'ERA_INDEXER_APIES_STDDEV_POPULATION_UPDATE_AT_ASC',
  ERA_INDEXER_APIES_STDDEV_POPULATION_UPDATE_AT_DESC = 'ERA_INDEXER_APIES_STDDEV_POPULATION_UPDATE_AT_DESC',
  ERA_INDEXER_APIES_STDDEV_SAMPLE_BLOCK_RANGE_ASC = 'ERA_INDEXER_APIES_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  ERA_INDEXER_APIES_STDDEV_SAMPLE_BLOCK_RANGE_DESC = 'ERA_INDEXER_APIES_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  ERA_INDEXER_APIES_STDDEV_SAMPLE_CREATE_AT_ASC = 'ERA_INDEXER_APIES_STDDEV_SAMPLE_CREATE_AT_ASC',
  ERA_INDEXER_APIES_STDDEV_SAMPLE_CREATE_AT_DESC = 'ERA_INDEXER_APIES_STDDEV_SAMPLE_CREATE_AT_DESC',
  ERA_INDEXER_APIES_STDDEV_SAMPLE_DELEGATOR_APY_ASC = 'ERA_INDEXER_APIES_STDDEV_SAMPLE_DELEGATOR_APY_ASC',
  ERA_INDEXER_APIES_STDDEV_SAMPLE_DELEGATOR_APY_DESC = 'ERA_INDEXER_APIES_STDDEV_SAMPLE_DELEGATOR_APY_DESC',
  ERA_INDEXER_APIES_STDDEV_SAMPLE_DELEGATOR_REWARD_ASC = 'ERA_INDEXER_APIES_STDDEV_SAMPLE_DELEGATOR_REWARD_ASC',
  ERA_INDEXER_APIES_STDDEV_SAMPLE_DELEGATOR_REWARD_DESC = 'ERA_INDEXER_APIES_STDDEV_SAMPLE_DELEGATOR_REWARD_DESC',
  ERA_INDEXER_APIES_STDDEV_SAMPLE_ERA_IDX_ASC = 'ERA_INDEXER_APIES_STDDEV_SAMPLE_ERA_IDX_ASC',
  ERA_INDEXER_APIES_STDDEV_SAMPLE_ERA_IDX_DESC = 'ERA_INDEXER_APIES_STDDEV_SAMPLE_ERA_IDX_DESC',
  ERA_INDEXER_APIES_STDDEV_SAMPLE_ID_ASC = 'ERA_INDEXER_APIES_STDDEV_SAMPLE_ID_ASC',
  ERA_INDEXER_APIES_STDDEV_SAMPLE_ID_DESC = 'ERA_INDEXER_APIES_STDDEV_SAMPLE_ID_DESC',
  ERA_INDEXER_APIES_STDDEV_SAMPLE_INDEXER_APY_ASC = 'ERA_INDEXER_APIES_STDDEV_SAMPLE_INDEXER_APY_ASC',
  ERA_INDEXER_APIES_STDDEV_SAMPLE_INDEXER_APY_DESC = 'ERA_INDEXER_APIES_STDDEV_SAMPLE_INDEXER_APY_DESC',
  ERA_INDEXER_APIES_STDDEV_SAMPLE_INDEXER_ID_ASC = 'ERA_INDEXER_APIES_STDDEV_SAMPLE_INDEXER_ID_ASC',
  ERA_INDEXER_APIES_STDDEV_SAMPLE_INDEXER_ID_DESC = 'ERA_INDEXER_APIES_STDDEV_SAMPLE_INDEXER_ID_DESC',
  ERA_INDEXER_APIES_STDDEV_SAMPLE_INDEXER_REWARD_ASC = 'ERA_INDEXER_APIES_STDDEV_SAMPLE_INDEXER_REWARD_ASC',
  ERA_INDEXER_APIES_STDDEV_SAMPLE_INDEXER_REWARD_DESC = 'ERA_INDEXER_APIES_STDDEV_SAMPLE_INDEXER_REWARD_DESC',
  ERA_INDEXER_APIES_STDDEV_SAMPLE_UPDATE_AT_ASC = 'ERA_INDEXER_APIES_STDDEV_SAMPLE_UPDATE_AT_ASC',
  ERA_INDEXER_APIES_STDDEV_SAMPLE_UPDATE_AT_DESC = 'ERA_INDEXER_APIES_STDDEV_SAMPLE_UPDATE_AT_DESC',
  ERA_INDEXER_APIES_SUM_BLOCK_RANGE_ASC = 'ERA_INDEXER_APIES_SUM_BLOCK_RANGE_ASC',
  ERA_INDEXER_APIES_SUM_BLOCK_RANGE_DESC = 'ERA_INDEXER_APIES_SUM_BLOCK_RANGE_DESC',
  ERA_INDEXER_APIES_SUM_CREATE_AT_ASC = 'ERA_INDEXER_APIES_SUM_CREATE_AT_ASC',
  ERA_INDEXER_APIES_SUM_CREATE_AT_DESC = 'ERA_INDEXER_APIES_SUM_CREATE_AT_DESC',
  ERA_INDEXER_APIES_SUM_DELEGATOR_APY_ASC = 'ERA_INDEXER_APIES_SUM_DELEGATOR_APY_ASC',
  ERA_INDEXER_APIES_SUM_DELEGATOR_APY_DESC = 'ERA_INDEXER_APIES_SUM_DELEGATOR_APY_DESC',
  ERA_INDEXER_APIES_SUM_DELEGATOR_REWARD_ASC = 'ERA_INDEXER_APIES_SUM_DELEGATOR_REWARD_ASC',
  ERA_INDEXER_APIES_SUM_DELEGATOR_REWARD_DESC = 'ERA_INDEXER_APIES_SUM_DELEGATOR_REWARD_DESC',
  ERA_INDEXER_APIES_SUM_ERA_IDX_ASC = 'ERA_INDEXER_APIES_SUM_ERA_IDX_ASC',
  ERA_INDEXER_APIES_SUM_ERA_IDX_DESC = 'ERA_INDEXER_APIES_SUM_ERA_IDX_DESC',
  ERA_INDEXER_APIES_SUM_ID_ASC = 'ERA_INDEXER_APIES_SUM_ID_ASC',
  ERA_INDEXER_APIES_SUM_ID_DESC = 'ERA_INDEXER_APIES_SUM_ID_DESC',
  ERA_INDEXER_APIES_SUM_INDEXER_APY_ASC = 'ERA_INDEXER_APIES_SUM_INDEXER_APY_ASC',
  ERA_INDEXER_APIES_SUM_INDEXER_APY_DESC = 'ERA_INDEXER_APIES_SUM_INDEXER_APY_DESC',
  ERA_INDEXER_APIES_SUM_INDEXER_ID_ASC = 'ERA_INDEXER_APIES_SUM_INDEXER_ID_ASC',
  ERA_INDEXER_APIES_SUM_INDEXER_ID_DESC = 'ERA_INDEXER_APIES_SUM_INDEXER_ID_DESC',
  ERA_INDEXER_APIES_SUM_INDEXER_REWARD_ASC = 'ERA_INDEXER_APIES_SUM_INDEXER_REWARD_ASC',
  ERA_INDEXER_APIES_SUM_INDEXER_REWARD_DESC = 'ERA_INDEXER_APIES_SUM_INDEXER_REWARD_DESC',
  ERA_INDEXER_APIES_SUM_UPDATE_AT_ASC = 'ERA_INDEXER_APIES_SUM_UPDATE_AT_ASC',
  ERA_INDEXER_APIES_SUM_UPDATE_AT_DESC = 'ERA_INDEXER_APIES_SUM_UPDATE_AT_DESC',
  ERA_INDEXER_APIES_VARIANCE_POPULATION_BLOCK_RANGE_ASC = 'ERA_INDEXER_APIES_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  ERA_INDEXER_APIES_VARIANCE_POPULATION_BLOCK_RANGE_DESC = 'ERA_INDEXER_APIES_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  ERA_INDEXER_APIES_VARIANCE_POPULATION_CREATE_AT_ASC = 'ERA_INDEXER_APIES_VARIANCE_POPULATION_CREATE_AT_ASC',
  ERA_INDEXER_APIES_VARIANCE_POPULATION_CREATE_AT_DESC = 'ERA_INDEXER_APIES_VARIANCE_POPULATION_CREATE_AT_DESC',
  ERA_INDEXER_APIES_VARIANCE_POPULATION_DELEGATOR_APY_ASC = 'ERA_INDEXER_APIES_VARIANCE_POPULATION_DELEGATOR_APY_ASC',
  ERA_INDEXER_APIES_VARIANCE_POPULATION_DELEGATOR_APY_DESC = 'ERA_INDEXER_APIES_VARIANCE_POPULATION_DELEGATOR_APY_DESC',
  ERA_INDEXER_APIES_VARIANCE_POPULATION_DELEGATOR_REWARD_ASC = 'ERA_INDEXER_APIES_VARIANCE_POPULATION_DELEGATOR_REWARD_ASC',
  ERA_INDEXER_APIES_VARIANCE_POPULATION_DELEGATOR_REWARD_DESC = 'ERA_INDEXER_APIES_VARIANCE_POPULATION_DELEGATOR_REWARD_DESC',
  ERA_INDEXER_APIES_VARIANCE_POPULATION_ERA_IDX_ASC = 'ERA_INDEXER_APIES_VARIANCE_POPULATION_ERA_IDX_ASC',
  ERA_INDEXER_APIES_VARIANCE_POPULATION_ERA_IDX_DESC = 'ERA_INDEXER_APIES_VARIANCE_POPULATION_ERA_IDX_DESC',
  ERA_INDEXER_APIES_VARIANCE_POPULATION_ID_ASC = 'ERA_INDEXER_APIES_VARIANCE_POPULATION_ID_ASC',
  ERA_INDEXER_APIES_VARIANCE_POPULATION_ID_DESC = 'ERA_INDEXER_APIES_VARIANCE_POPULATION_ID_DESC',
  ERA_INDEXER_APIES_VARIANCE_POPULATION_INDEXER_APY_ASC = 'ERA_INDEXER_APIES_VARIANCE_POPULATION_INDEXER_APY_ASC',
  ERA_INDEXER_APIES_VARIANCE_POPULATION_INDEXER_APY_DESC = 'ERA_INDEXER_APIES_VARIANCE_POPULATION_INDEXER_APY_DESC',
  ERA_INDEXER_APIES_VARIANCE_POPULATION_INDEXER_ID_ASC = 'ERA_INDEXER_APIES_VARIANCE_POPULATION_INDEXER_ID_ASC',
  ERA_INDEXER_APIES_VARIANCE_POPULATION_INDEXER_ID_DESC = 'ERA_INDEXER_APIES_VARIANCE_POPULATION_INDEXER_ID_DESC',
  ERA_INDEXER_APIES_VARIANCE_POPULATION_INDEXER_REWARD_ASC = 'ERA_INDEXER_APIES_VARIANCE_POPULATION_INDEXER_REWARD_ASC',
  ERA_INDEXER_APIES_VARIANCE_POPULATION_INDEXER_REWARD_DESC = 'ERA_INDEXER_APIES_VARIANCE_POPULATION_INDEXER_REWARD_DESC',
  ERA_INDEXER_APIES_VARIANCE_POPULATION_UPDATE_AT_ASC = 'ERA_INDEXER_APIES_VARIANCE_POPULATION_UPDATE_AT_ASC',
  ERA_INDEXER_APIES_VARIANCE_POPULATION_UPDATE_AT_DESC = 'ERA_INDEXER_APIES_VARIANCE_POPULATION_UPDATE_AT_DESC',
  ERA_INDEXER_APIES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC = 'ERA_INDEXER_APIES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  ERA_INDEXER_APIES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC = 'ERA_INDEXER_APIES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  ERA_INDEXER_APIES_VARIANCE_SAMPLE_CREATE_AT_ASC = 'ERA_INDEXER_APIES_VARIANCE_SAMPLE_CREATE_AT_ASC',
  ERA_INDEXER_APIES_VARIANCE_SAMPLE_CREATE_AT_DESC = 'ERA_INDEXER_APIES_VARIANCE_SAMPLE_CREATE_AT_DESC',
  ERA_INDEXER_APIES_VARIANCE_SAMPLE_DELEGATOR_APY_ASC = 'ERA_INDEXER_APIES_VARIANCE_SAMPLE_DELEGATOR_APY_ASC',
  ERA_INDEXER_APIES_VARIANCE_SAMPLE_DELEGATOR_APY_DESC = 'ERA_INDEXER_APIES_VARIANCE_SAMPLE_DELEGATOR_APY_DESC',
  ERA_INDEXER_APIES_VARIANCE_SAMPLE_DELEGATOR_REWARD_ASC = 'ERA_INDEXER_APIES_VARIANCE_SAMPLE_DELEGATOR_REWARD_ASC',
  ERA_INDEXER_APIES_VARIANCE_SAMPLE_DELEGATOR_REWARD_DESC = 'ERA_INDEXER_APIES_VARIANCE_SAMPLE_DELEGATOR_REWARD_DESC',
  ERA_INDEXER_APIES_VARIANCE_SAMPLE_ERA_IDX_ASC = 'ERA_INDEXER_APIES_VARIANCE_SAMPLE_ERA_IDX_ASC',
  ERA_INDEXER_APIES_VARIANCE_SAMPLE_ERA_IDX_DESC = 'ERA_INDEXER_APIES_VARIANCE_SAMPLE_ERA_IDX_DESC',
  ERA_INDEXER_APIES_VARIANCE_SAMPLE_ID_ASC = 'ERA_INDEXER_APIES_VARIANCE_SAMPLE_ID_ASC',
  ERA_INDEXER_APIES_VARIANCE_SAMPLE_ID_DESC = 'ERA_INDEXER_APIES_VARIANCE_SAMPLE_ID_DESC',
  ERA_INDEXER_APIES_VARIANCE_SAMPLE_INDEXER_APY_ASC = 'ERA_INDEXER_APIES_VARIANCE_SAMPLE_INDEXER_APY_ASC',
  ERA_INDEXER_APIES_VARIANCE_SAMPLE_INDEXER_APY_DESC = 'ERA_INDEXER_APIES_VARIANCE_SAMPLE_INDEXER_APY_DESC',
  ERA_INDEXER_APIES_VARIANCE_SAMPLE_INDEXER_ID_ASC = 'ERA_INDEXER_APIES_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  ERA_INDEXER_APIES_VARIANCE_SAMPLE_INDEXER_ID_DESC = 'ERA_INDEXER_APIES_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  ERA_INDEXER_APIES_VARIANCE_SAMPLE_INDEXER_REWARD_ASC = 'ERA_INDEXER_APIES_VARIANCE_SAMPLE_INDEXER_REWARD_ASC',
  ERA_INDEXER_APIES_VARIANCE_SAMPLE_INDEXER_REWARD_DESC = 'ERA_INDEXER_APIES_VARIANCE_SAMPLE_INDEXER_REWARD_DESC',
  ERA_INDEXER_APIES_VARIANCE_SAMPLE_UPDATE_AT_ASC = 'ERA_INDEXER_APIES_VARIANCE_SAMPLE_UPDATE_AT_ASC',
  ERA_INDEXER_APIES_VARIANCE_SAMPLE_UPDATE_AT_DESC = 'ERA_INDEXER_APIES_VARIANCE_SAMPLE_UPDATE_AT_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_AGREEMENT_REWARD_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_AGREEMENT_REWARD_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_AGREEMENT_REWARD_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_AGREEMENT_REWARD_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_ALLOCATION_REWARD_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_ALLOCATION_REWARD_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_ALLOCATION_REWARD_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_ALLOCATION_REWARD_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_APY_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_APY_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_APY_CALC_ADDED_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_APY_CALC_ADDED_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_APY_CALC_ADDED_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_APY_CALC_ADDED_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_APY_CALC_ALLOCATION_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_APY_CALC_ALLOCATION_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_APY_CALC_ALLOCATION_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_APY_CALC_ALLOCATION_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_APY_CALC_ALLOCATION_RECORD_AT_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_APY_CALC_ALLOCATION_RECORD_AT_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_APY_CALC_ALLOCATION_RECORD_AT_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_APY_CALC_ALLOCATION_RECORD_AT_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_APY_CALC_HISTORY_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_APY_CALC_HISTORY_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_APY_CALC_HISTORY_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_APY_CALC_HISTORY_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_APY_CALC_REMOVAL_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_APY_CALC_REMOVAL_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_APY_CALC_REMOVAL_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_APY_CALC_REMOVAL_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_APY_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_APY_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_BLOCK_RANGE_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_BLOCK_RANGE_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_BLOCK_RANGE_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_BLOCK_RANGE_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_CREATE_AT_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_CREATE_AT_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_CREATE_AT_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_CREATE_AT_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_DEPLOYMENT_ID_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_DEPLOYMENT_ID_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_DEPLOYMENT_ID_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_DEPLOYMENT_ID_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_ERA_IDX_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_ERA_IDX_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_ERA_IDX_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_ERA_IDX_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_FLEX_PLAN_REWARD_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_FLEX_PLAN_REWARD_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_FLEX_PLAN_REWARD_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_FLEX_PLAN_REWARD_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_ID_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_ID_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_ID_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_ID_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_INDEXER_ID_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_INDEXER_ID_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_INDEXER_ID_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_INDEXER_ID_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_UPDATE_AT_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_UPDATE_AT_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_UPDATE_AT_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_UPDATE_AT_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_BY_INDEXER_ID__COUNT_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_BY_INDEXER_ID__COUNT_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_BY_INDEXER_ID__COUNT_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_BY_INDEXER_ID__COUNT_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_COUNT_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_COUNT_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_COUNT_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_COUNT_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_AGREEMENT_REWARD_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_AGREEMENT_REWARD_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_AGREEMENT_REWARD_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_AGREEMENT_REWARD_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_ALLOCATION_REWARD_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_ALLOCATION_REWARD_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_ALLOCATION_REWARD_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_ALLOCATION_REWARD_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_APY_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_APY_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_APY_CALC_ADDED_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_APY_CALC_ADDED_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_APY_CALC_ADDED_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_APY_CALC_ADDED_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_APY_CALC_ALLOCATION_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_APY_CALC_ALLOCATION_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_APY_CALC_ALLOCATION_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_APY_CALC_ALLOCATION_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_APY_CALC_ALLOCATION_RECORD_AT_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_APY_CALC_ALLOCATION_RECORD_AT_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_APY_CALC_ALLOCATION_RECORD_AT_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_APY_CALC_ALLOCATION_RECORD_AT_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_APY_CALC_HISTORY_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_APY_CALC_HISTORY_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_APY_CALC_HISTORY_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_APY_CALC_HISTORY_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_APY_CALC_REMOVAL_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_APY_CALC_REMOVAL_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_APY_CALC_REMOVAL_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_APY_CALC_REMOVAL_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_APY_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_APY_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_BLOCK_RANGE_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_BLOCK_RANGE_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_CREATE_AT_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_CREATE_AT_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_CREATE_AT_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_CREATE_AT_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_DEPLOYMENT_ID_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_DEPLOYMENT_ID_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_DEPLOYMENT_ID_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_DEPLOYMENT_ID_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_ERA_IDX_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_ERA_IDX_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_ERA_IDX_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_ERA_IDX_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_FLEX_PLAN_REWARD_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_FLEX_PLAN_REWARD_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_FLEX_PLAN_REWARD_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_FLEX_PLAN_REWARD_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_ID_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_ID_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_ID_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_ID_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_INDEXER_ID_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_INDEXER_ID_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_INDEXER_ID_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_INDEXER_ID_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_UPDATE_AT_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_UPDATE_AT_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_UPDATE_AT_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_UPDATE_AT_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_MAX_AGREEMENT_REWARD_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_AGREEMENT_REWARD_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_MAX_AGREEMENT_REWARD_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_AGREEMENT_REWARD_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_MAX_ALLOCATION_REWARD_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_ALLOCATION_REWARD_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_MAX_ALLOCATION_REWARD_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_ALLOCATION_REWARD_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_MAX_APY_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_APY_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_MAX_APY_CALC_ADDED_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_APY_CALC_ADDED_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_MAX_APY_CALC_ADDED_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_APY_CALC_ADDED_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_MAX_APY_CALC_ALLOCATION_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_APY_CALC_ALLOCATION_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_MAX_APY_CALC_ALLOCATION_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_APY_CALC_ALLOCATION_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_MAX_APY_CALC_ALLOCATION_RECORD_AT_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_APY_CALC_ALLOCATION_RECORD_AT_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_MAX_APY_CALC_ALLOCATION_RECORD_AT_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_APY_CALC_ALLOCATION_RECORD_AT_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_MAX_APY_CALC_HISTORY_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_APY_CALC_HISTORY_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_MAX_APY_CALC_HISTORY_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_APY_CALC_HISTORY_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_MAX_APY_CALC_REMOVAL_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_APY_CALC_REMOVAL_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_MAX_APY_CALC_REMOVAL_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_APY_CALC_REMOVAL_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_MAX_APY_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_APY_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_MAX_BLOCK_RANGE_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_BLOCK_RANGE_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_MAX_BLOCK_RANGE_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_BLOCK_RANGE_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_MAX_CREATE_AT_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_CREATE_AT_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_MAX_CREATE_AT_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_CREATE_AT_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_MAX_DEPLOYMENT_ID_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_DEPLOYMENT_ID_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_MAX_DEPLOYMENT_ID_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_DEPLOYMENT_ID_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_MAX_ERA_IDX_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_ERA_IDX_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_MAX_ERA_IDX_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_ERA_IDX_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_MAX_FLEX_PLAN_REWARD_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_FLEX_PLAN_REWARD_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_MAX_FLEX_PLAN_REWARD_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_FLEX_PLAN_REWARD_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_MAX_ID_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_ID_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_MAX_ID_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_ID_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_MAX_INDEXER_ID_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_INDEXER_ID_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_MAX_INDEXER_ID_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_INDEXER_ID_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_MAX_UPDATE_AT_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_UPDATE_AT_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_MAX_UPDATE_AT_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_UPDATE_AT_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_MIN_AGREEMENT_REWARD_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_AGREEMENT_REWARD_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_MIN_AGREEMENT_REWARD_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_AGREEMENT_REWARD_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_MIN_ALLOCATION_REWARD_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_ALLOCATION_REWARD_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_MIN_ALLOCATION_REWARD_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_ALLOCATION_REWARD_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_MIN_APY_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_APY_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_MIN_APY_CALC_ADDED_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_APY_CALC_ADDED_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_MIN_APY_CALC_ADDED_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_APY_CALC_ADDED_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_MIN_APY_CALC_ALLOCATION_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_APY_CALC_ALLOCATION_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_MIN_APY_CALC_ALLOCATION_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_APY_CALC_ALLOCATION_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_MIN_APY_CALC_ALLOCATION_RECORD_AT_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_APY_CALC_ALLOCATION_RECORD_AT_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_MIN_APY_CALC_ALLOCATION_RECORD_AT_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_APY_CALC_ALLOCATION_RECORD_AT_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_MIN_APY_CALC_HISTORY_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_APY_CALC_HISTORY_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_MIN_APY_CALC_HISTORY_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_APY_CALC_HISTORY_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_MIN_APY_CALC_REMOVAL_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_APY_CALC_REMOVAL_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_MIN_APY_CALC_REMOVAL_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_APY_CALC_REMOVAL_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_MIN_APY_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_APY_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_MIN_BLOCK_RANGE_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_BLOCK_RANGE_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_MIN_BLOCK_RANGE_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_BLOCK_RANGE_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_MIN_CREATE_AT_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_CREATE_AT_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_MIN_CREATE_AT_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_CREATE_AT_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_MIN_DEPLOYMENT_ID_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_DEPLOYMENT_ID_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_MIN_DEPLOYMENT_ID_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_DEPLOYMENT_ID_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_MIN_ERA_IDX_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_ERA_IDX_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_MIN_ERA_IDX_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_ERA_IDX_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_MIN_FLEX_PLAN_REWARD_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_FLEX_PLAN_REWARD_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_MIN_FLEX_PLAN_REWARD_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_FLEX_PLAN_REWARD_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_MIN_ID_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_ID_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_MIN_ID_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_ID_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_MIN_INDEXER_ID_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_INDEXER_ID_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_MIN_INDEXER_ID_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_INDEXER_ID_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_MIN_UPDATE_AT_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_UPDATE_AT_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_MIN_UPDATE_AT_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_UPDATE_AT_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_AGREEMENT_REWARD_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_AGREEMENT_REWARD_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_AGREEMENT_REWARD_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_AGREEMENT_REWARD_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_ALLOCATION_REWARD_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_ALLOCATION_REWARD_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_ALLOCATION_REWARD_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_ALLOCATION_REWARD_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_APY_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_APY_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_APY_CALC_ADDED_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_APY_CALC_ADDED_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_APY_CALC_ADDED_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_APY_CALC_ADDED_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_APY_CALC_ALLOCATION_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_APY_CALC_ALLOCATION_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_APY_CALC_ALLOCATION_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_APY_CALC_ALLOCATION_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_APY_CALC_ALLOCATION_RECORD_AT_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_APY_CALC_ALLOCATION_RECORD_AT_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_APY_CALC_ALLOCATION_RECORD_AT_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_APY_CALC_ALLOCATION_RECORD_AT_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_APY_CALC_HISTORY_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_APY_CALC_HISTORY_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_APY_CALC_HISTORY_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_APY_CALC_HISTORY_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_APY_CALC_REMOVAL_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_APY_CALC_REMOVAL_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_APY_CALC_REMOVAL_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_APY_CALC_REMOVAL_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_APY_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_APY_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_BLOCK_RANGE_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_BLOCK_RANGE_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_CREATE_AT_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_CREATE_AT_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_CREATE_AT_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_CREATE_AT_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_DEPLOYMENT_ID_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_DEPLOYMENT_ID_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_DEPLOYMENT_ID_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_DEPLOYMENT_ID_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_ERA_IDX_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_ERA_IDX_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_ERA_IDX_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_ERA_IDX_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_FLEX_PLAN_REWARD_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_FLEX_PLAN_REWARD_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_FLEX_PLAN_REWARD_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_FLEX_PLAN_REWARD_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_ID_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_ID_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_ID_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_ID_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_INDEXER_ID_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_INDEXER_ID_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_INDEXER_ID_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_INDEXER_ID_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_UPDATE_AT_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_UPDATE_AT_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_UPDATE_AT_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_UPDATE_AT_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_AGREEMENT_REWARD_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_AGREEMENT_REWARD_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_AGREEMENT_REWARD_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_AGREEMENT_REWARD_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_ALLOCATION_REWARD_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_ALLOCATION_REWARD_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_ALLOCATION_REWARD_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_ALLOCATION_REWARD_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_APY_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_APY_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_APY_CALC_ADDED_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_APY_CALC_ADDED_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_APY_CALC_ADDED_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_APY_CALC_ADDED_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_APY_CALC_ALLOCATION_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_APY_CALC_ALLOCATION_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_APY_CALC_ALLOCATION_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_APY_CALC_ALLOCATION_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_APY_CALC_ALLOCATION_RECORD_AT_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_APY_CALC_ALLOCATION_RECORD_AT_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_APY_CALC_ALLOCATION_RECORD_AT_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_APY_CALC_ALLOCATION_RECORD_AT_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_APY_CALC_HISTORY_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_APY_CALC_HISTORY_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_APY_CALC_HISTORY_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_APY_CALC_HISTORY_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_APY_CALC_REMOVAL_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_APY_CALC_REMOVAL_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_APY_CALC_REMOVAL_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_APY_CALC_REMOVAL_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_APY_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_APY_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_BLOCK_RANGE_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_BLOCK_RANGE_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_CREATE_AT_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_CREATE_AT_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_CREATE_AT_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_CREATE_AT_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_ERA_IDX_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_ERA_IDX_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_ERA_IDX_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_ERA_IDX_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_FLEX_PLAN_REWARD_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_FLEX_PLAN_REWARD_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_FLEX_PLAN_REWARD_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_FLEX_PLAN_REWARD_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_ID_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_ID_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_ID_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_ID_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_INDEXER_ID_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_INDEXER_ID_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_INDEXER_ID_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_INDEXER_ID_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_UPDATE_AT_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_UPDATE_AT_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_UPDATE_AT_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_UPDATE_AT_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_SUM_AGREEMENT_REWARD_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_AGREEMENT_REWARD_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_SUM_AGREEMENT_REWARD_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_AGREEMENT_REWARD_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_SUM_ALLOCATION_REWARD_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_ALLOCATION_REWARD_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_SUM_ALLOCATION_REWARD_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_ALLOCATION_REWARD_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_SUM_APY_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_APY_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_SUM_APY_CALC_ADDED_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_APY_CALC_ADDED_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_SUM_APY_CALC_ADDED_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_APY_CALC_ADDED_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_SUM_APY_CALC_ALLOCATION_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_APY_CALC_ALLOCATION_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_SUM_APY_CALC_ALLOCATION_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_APY_CALC_ALLOCATION_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_SUM_APY_CALC_ALLOCATION_RECORD_AT_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_APY_CALC_ALLOCATION_RECORD_AT_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_SUM_APY_CALC_ALLOCATION_RECORD_AT_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_APY_CALC_ALLOCATION_RECORD_AT_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_SUM_APY_CALC_HISTORY_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_APY_CALC_HISTORY_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_SUM_APY_CALC_HISTORY_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_APY_CALC_HISTORY_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_SUM_APY_CALC_REMOVAL_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_APY_CALC_REMOVAL_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_SUM_APY_CALC_REMOVAL_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_APY_CALC_REMOVAL_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_SUM_APY_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_APY_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_SUM_BLOCK_RANGE_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_BLOCK_RANGE_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_SUM_BLOCK_RANGE_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_BLOCK_RANGE_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_SUM_CREATE_AT_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_CREATE_AT_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_SUM_CREATE_AT_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_CREATE_AT_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_SUM_DEPLOYMENT_ID_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_DEPLOYMENT_ID_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_SUM_DEPLOYMENT_ID_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_DEPLOYMENT_ID_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_SUM_ERA_IDX_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_ERA_IDX_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_SUM_ERA_IDX_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_ERA_IDX_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_SUM_FLEX_PLAN_REWARD_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_FLEX_PLAN_REWARD_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_SUM_FLEX_PLAN_REWARD_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_FLEX_PLAN_REWARD_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_SUM_ID_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_ID_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_SUM_ID_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_ID_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_SUM_INDEXER_ID_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_INDEXER_ID_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_SUM_INDEXER_ID_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_INDEXER_ID_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_SUM_UPDATE_AT_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_UPDATE_AT_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_SUM_UPDATE_AT_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_UPDATE_AT_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_AGREEMENT_REWARD_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_AGREEMENT_REWARD_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_AGREEMENT_REWARD_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_AGREEMENT_REWARD_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_ALLOCATION_REWARD_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_ALLOCATION_REWARD_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_ALLOCATION_REWARD_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_ALLOCATION_REWARD_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_APY_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_APY_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_APY_CALC_ADDED_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_APY_CALC_ADDED_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_APY_CALC_ADDED_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_APY_CALC_ADDED_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_APY_CALC_ALLOCATION_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_APY_CALC_ALLOCATION_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_APY_CALC_ALLOCATION_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_APY_CALC_ALLOCATION_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_APY_CALC_ALLOCATION_RECORD_AT_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_APY_CALC_ALLOCATION_RECORD_AT_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_APY_CALC_ALLOCATION_RECORD_AT_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_APY_CALC_ALLOCATION_RECORD_AT_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_APY_CALC_HISTORY_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_APY_CALC_HISTORY_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_APY_CALC_HISTORY_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_APY_CALC_HISTORY_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_APY_CALC_REMOVAL_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_APY_CALC_REMOVAL_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_APY_CALC_REMOVAL_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_APY_CALC_REMOVAL_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_APY_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_APY_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_BLOCK_RANGE_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_BLOCK_RANGE_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_CREATE_AT_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_CREATE_AT_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_CREATE_AT_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_CREATE_AT_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_ERA_IDX_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_ERA_IDX_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_ERA_IDX_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_ERA_IDX_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_FLEX_PLAN_REWARD_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_FLEX_PLAN_REWARD_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_FLEX_PLAN_REWARD_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_FLEX_PLAN_REWARD_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_ID_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_ID_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_ID_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_ID_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_INDEXER_ID_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_INDEXER_ID_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_INDEXER_ID_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_INDEXER_ID_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_UPDATE_AT_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_UPDATE_AT_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_UPDATE_AT_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_UPDATE_AT_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_AGREEMENT_REWARD_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_AGREEMENT_REWARD_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_AGREEMENT_REWARD_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_AGREEMENT_REWARD_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_ALLOCATION_REWARD_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_ALLOCATION_REWARD_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_ALLOCATION_REWARD_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_ALLOCATION_REWARD_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_APY_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_APY_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_APY_CALC_ADDED_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_APY_CALC_ADDED_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_APY_CALC_ADDED_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_APY_CALC_ADDED_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_APY_CALC_ALLOCATION_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_APY_CALC_ALLOCATION_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_APY_CALC_ALLOCATION_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_APY_CALC_ALLOCATION_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_APY_CALC_ALLOCATION_RECORD_AT_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_APY_CALC_ALLOCATION_RECORD_AT_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_APY_CALC_ALLOCATION_RECORD_AT_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_APY_CALC_ALLOCATION_RECORD_AT_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_APY_CALC_HISTORY_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_APY_CALC_HISTORY_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_APY_CALC_HISTORY_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_APY_CALC_HISTORY_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_APY_CALC_REMOVAL_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_APY_CALC_REMOVAL_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_APY_CALC_REMOVAL_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_APY_CALC_REMOVAL_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_APY_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_APY_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_CREATE_AT_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_CREATE_AT_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_CREATE_AT_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_CREATE_AT_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_ERA_IDX_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_ERA_IDX_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_ERA_IDX_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_ERA_IDX_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_FLEX_PLAN_REWARD_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_FLEX_PLAN_REWARD_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_FLEX_PLAN_REWARD_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_FLEX_PLAN_REWARD_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_ID_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_ID_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_ID_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_ID_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_INDEXER_ID_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_INDEXER_ID_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_UPDATE_AT_ASC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_UPDATE_AT_ASC',
  ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_UPDATE_AT_DESC = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_UPDATE_AT_DESC',
  ERA_REWARDS_AVERAGE_AMOUNT_ASC = 'ERA_REWARDS_AVERAGE_AMOUNT_ASC',
  ERA_REWARDS_AVERAGE_AMOUNT_DESC = 'ERA_REWARDS_AVERAGE_AMOUNT_DESC',
  ERA_REWARDS_AVERAGE_BLOCK_RANGE_ASC = 'ERA_REWARDS_AVERAGE_BLOCK_RANGE_ASC',
  ERA_REWARDS_AVERAGE_BLOCK_RANGE_DESC = 'ERA_REWARDS_AVERAGE_BLOCK_RANGE_DESC',
  ERA_REWARDS_AVERAGE_CLAIMED_ASC = 'ERA_REWARDS_AVERAGE_CLAIMED_ASC',
  ERA_REWARDS_AVERAGE_CLAIMED_DESC = 'ERA_REWARDS_AVERAGE_CLAIMED_DESC',
  ERA_REWARDS_AVERAGE_CREATED_BLOCK_ASC = 'ERA_REWARDS_AVERAGE_CREATED_BLOCK_ASC',
  ERA_REWARDS_AVERAGE_CREATED_BLOCK_DESC = 'ERA_REWARDS_AVERAGE_CREATED_BLOCK_DESC',
  ERA_REWARDS_AVERAGE_CREATED_TIMESTAMP_ASC = 'ERA_REWARDS_AVERAGE_CREATED_TIMESTAMP_ASC',
  ERA_REWARDS_AVERAGE_CREATED_TIMESTAMP_DESC = 'ERA_REWARDS_AVERAGE_CREATED_TIMESTAMP_DESC',
  ERA_REWARDS_AVERAGE_DELEGATOR_ID_ASC = 'ERA_REWARDS_AVERAGE_DELEGATOR_ID_ASC',
  ERA_REWARDS_AVERAGE_DELEGATOR_ID_DESC = 'ERA_REWARDS_AVERAGE_DELEGATOR_ID_DESC',
  ERA_REWARDS_AVERAGE_ERA_IDX_ASC = 'ERA_REWARDS_AVERAGE_ERA_IDX_ASC',
  ERA_REWARDS_AVERAGE_ERA_IDX_DESC = 'ERA_REWARDS_AVERAGE_ERA_IDX_DESC',
  ERA_REWARDS_AVERAGE_ERA_ID_ASC = 'ERA_REWARDS_AVERAGE_ERA_ID_ASC',
  ERA_REWARDS_AVERAGE_ERA_ID_DESC = 'ERA_REWARDS_AVERAGE_ERA_ID_DESC',
  ERA_REWARDS_AVERAGE_ID_ASC = 'ERA_REWARDS_AVERAGE_ID_ASC',
  ERA_REWARDS_AVERAGE_ID_DESC = 'ERA_REWARDS_AVERAGE_ID_DESC',
  ERA_REWARDS_AVERAGE_INDEXER_ID_ASC = 'ERA_REWARDS_AVERAGE_INDEXER_ID_ASC',
  ERA_REWARDS_AVERAGE_INDEXER_ID_DESC = 'ERA_REWARDS_AVERAGE_INDEXER_ID_DESC',
  ERA_REWARDS_AVERAGE_IS_COMMISSION_ASC = 'ERA_REWARDS_AVERAGE_IS_COMMISSION_ASC',
  ERA_REWARDS_AVERAGE_IS_COMMISSION_DESC = 'ERA_REWARDS_AVERAGE_IS_COMMISSION_DESC',
  ERA_REWARDS_AVERAGE_IS_INDEXER_ASC = 'ERA_REWARDS_AVERAGE_IS_INDEXER_ASC',
  ERA_REWARDS_AVERAGE_IS_INDEXER_DESC = 'ERA_REWARDS_AVERAGE_IS_INDEXER_DESC',
  ERA_REWARDS_BY_INDEXER_ID__COUNT_ASC = 'ERA_REWARDS_BY_INDEXER_ID__COUNT_ASC',
  ERA_REWARDS_BY_INDEXER_ID__COUNT_DESC = 'ERA_REWARDS_BY_INDEXER_ID__COUNT_DESC',
  ERA_REWARDS_COUNT_ASC = 'ERA_REWARDS_COUNT_ASC',
  ERA_REWARDS_COUNT_DESC = 'ERA_REWARDS_COUNT_DESC',
  ERA_REWARDS_DISTINCT_COUNT_AMOUNT_ASC = 'ERA_REWARDS_DISTINCT_COUNT_AMOUNT_ASC',
  ERA_REWARDS_DISTINCT_COUNT_AMOUNT_DESC = 'ERA_REWARDS_DISTINCT_COUNT_AMOUNT_DESC',
  ERA_REWARDS_DISTINCT_COUNT_BLOCK_RANGE_ASC = 'ERA_REWARDS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  ERA_REWARDS_DISTINCT_COUNT_BLOCK_RANGE_DESC = 'ERA_REWARDS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  ERA_REWARDS_DISTINCT_COUNT_CLAIMED_ASC = 'ERA_REWARDS_DISTINCT_COUNT_CLAIMED_ASC',
  ERA_REWARDS_DISTINCT_COUNT_CLAIMED_DESC = 'ERA_REWARDS_DISTINCT_COUNT_CLAIMED_DESC',
  ERA_REWARDS_DISTINCT_COUNT_CREATED_BLOCK_ASC = 'ERA_REWARDS_DISTINCT_COUNT_CREATED_BLOCK_ASC',
  ERA_REWARDS_DISTINCT_COUNT_CREATED_BLOCK_DESC = 'ERA_REWARDS_DISTINCT_COUNT_CREATED_BLOCK_DESC',
  ERA_REWARDS_DISTINCT_COUNT_CREATED_TIMESTAMP_ASC = 'ERA_REWARDS_DISTINCT_COUNT_CREATED_TIMESTAMP_ASC',
  ERA_REWARDS_DISTINCT_COUNT_CREATED_TIMESTAMP_DESC = 'ERA_REWARDS_DISTINCT_COUNT_CREATED_TIMESTAMP_DESC',
  ERA_REWARDS_DISTINCT_COUNT_DELEGATOR_ID_ASC = 'ERA_REWARDS_DISTINCT_COUNT_DELEGATOR_ID_ASC',
  ERA_REWARDS_DISTINCT_COUNT_DELEGATOR_ID_DESC = 'ERA_REWARDS_DISTINCT_COUNT_DELEGATOR_ID_DESC',
  ERA_REWARDS_DISTINCT_COUNT_ERA_IDX_ASC = 'ERA_REWARDS_DISTINCT_COUNT_ERA_IDX_ASC',
  ERA_REWARDS_DISTINCT_COUNT_ERA_IDX_DESC = 'ERA_REWARDS_DISTINCT_COUNT_ERA_IDX_DESC',
  ERA_REWARDS_DISTINCT_COUNT_ERA_ID_ASC = 'ERA_REWARDS_DISTINCT_COUNT_ERA_ID_ASC',
  ERA_REWARDS_DISTINCT_COUNT_ERA_ID_DESC = 'ERA_REWARDS_DISTINCT_COUNT_ERA_ID_DESC',
  ERA_REWARDS_DISTINCT_COUNT_ID_ASC = 'ERA_REWARDS_DISTINCT_COUNT_ID_ASC',
  ERA_REWARDS_DISTINCT_COUNT_ID_DESC = 'ERA_REWARDS_DISTINCT_COUNT_ID_DESC',
  ERA_REWARDS_DISTINCT_COUNT_INDEXER_ID_ASC = 'ERA_REWARDS_DISTINCT_COUNT_INDEXER_ID_ASC',
  ERA_REWARDS_DISTINCT_COUNT_INDEXER_ID_DESC = 'ERA_REWARDS_DISTINCT_COUNT_INDEXER_ID_DESC',
  ERA_REWARDS_DISTINCT_COUNT_IS_COMMISSION_ASC = 'ERA_REWARDS_DISTINCT_COUNT_IS_COMMISSION_ASC',
  ERA_REWARDS_DISTINCT_COUNT_IS_COMMISSION_DESC = 'ERA_REWARDS_DISTINCT_COUNT_IS_COMMISSION_DESC',
  ERA_REWARDS_DISTINCT_COUNT_IS_INDEXER_ASC = 'ERA_REWARDS_DISTINCT_COUNT_IS_INDEXER_ASC',
  ERA_REWARDS_DISTINCT_COUNT_IS_INDEXER_DESC = 'ERA_REWARDS_DISTINCT_COUNT_IS_INDEXER_DESC',
  ERA_REWARDS_MAX_AMOUNT_ASC = 'ERA_REWARDS_MAX_AMOUNT_ASC',
  ERA_REWARDS_MAX_AMOUNT_DESC = 'ERA_REWARDS_MAX_AMOUNT_DESC',
  ERA_REWARDS_MAX_BLOCK_RANGE_ASC = 'ERA_REWARDS_MAX_BLOCK_RANGE_ASC',
  ERA_REWARDS_MAX_BLOCK_RANGE_DESC = 'ERA_REWARDS_MAX_BLOCK_RANGE_DESC',
  ERA_REWARDS_MAX_CLAIMED_ASC = 'ERA_REWARDS_MAX_CLAIMED_ASC',
  ERA_REWARDS_MAX_CLAIMED_DESC = 'ERA_REWARDS_MAX_CLAIMED_DESC',
  ERA_REWARDS_MAX_CREATED_BLOCK_ASC = 'ERA_REWARDS_MAX_CREATED_BLOCK_ASC',
  ERA_REWARDS_MAX_CREATED_BLOCK_DESC = 'ERA_REWARDS_MAX_CREATED_BLOCK_DESC',
  ERA_REWARDS_MAX_CREATED_TIMESTAMP_ASC = 'ERA_REWARDS_MAX_CREATED_TIMESTAMP_ASC',
  ERA_REWARDS_MAX_CREATED_TIMESTAMP_DESC = 'ERA_REWARDS_MAX_CREATED_TIMESTAMP_DESC',
  ERA_REWARDS_MAX_DELEGATOR_ID_ASC = 'ERA_REWARDS_MAX_DELEGATOR_ID_ASC',
  ERA_REWARDS_MAX_DELEGATOR_ID_DESC = 'ERA_REWARDS_MAX_DELEGATOR_ID_DESC',
  ERA_REWARDS_MAX_ERA_IDX_ASC = 'ERA_REWARDS_MAX_ERA_IDX_ASC',
  ERA_REWARDS_MAX_ERA_IDX_DESC = 'ERA_REWARDS_MAX_ERA_IDX_DESC',
  ERA_REWARDS_MAX_ERA_ID_ASC = 'ERA_REWARDS_MAX_ERA_ID_ASC',
  ERA_REWARDS_MAX_ERA_ID_DESC = 'ERA_REWARDS_MAX_ERA_ID_DESC',
  ERA_REWARDS_MAX_ID_ASC = 'ERA_REWARDS_MAX_ID_ASC',
  ERA_REWARDS_MAX_ID_DESC = 'ERA_REWARDS_MAX_ID_DESC',
  ERA_REWARDS_MAX_INDEXER_ID_ASC = 'ERA_REWARDS_MAX_INDEXER_ID_ASC',
  ERA_REWARDS_MAX_INDEXER_ID_DESC = 'ERA_REWARDS_MAX_INDEXER_ID_DESC',
  ERA_REWARDS_MAX_IS_COMMISSION_ASC = 'ERA_REWARDS_MAX_IS_COMMISSION_ASC',
  ERA_REWARDS_MAX_IS_COMMISSION_DESC = 'ERA_REWARDS_MAX_IS_COMMISSION_DESC',
  ERA_REWARDS_MAX_IS_INDEXER_ASC = 'ERA_REWARDS_MAX_IS_INDEXER_ASC',
  ERA_REWARDS_MAX_IS_INDEXER_DESC = 'ERA_REWARDS_MAX_IS_INDEXER_DESC',
  ERA_REWARDS_MIN_AMOUNT_ASC = 'ERA_REWARDS_MIN_AMOUNT_ASC',
  ERA_REWARDS_MIN_AMOUNT_DESC = 'ERA_REWARDS_MIN_AMOUNT_DESC',
  ERA_REWARDS_MIN_BLOCK_RANGE_ASC = 'ERA_REWARDS_MIN_BLOCK_RANGE_ASC',
  ERA_REWARDS_MIN_BLOCK_RANGE_DESC = 'ERA_REWARDS_MIN_BLOCK_RANGE_DESC',
  ERA_REWARDS_MIN_CLAIMED_ASC = 'ERA_REWARDS_MIN_CLAIMED_ASC',
  ERA_REWARDS_MIN_CLAIMED_DESC = 'ERA_REWARDS_MIN_CLAIMED_DESC',
  ERA_REWARDS_MIN_CREATED_BLOCK_ASC = 'ERA_REWARDS_MIN_CREATED_BLOCK_ASC',
  ERA_REWARDS_MIN_CREATED_BLOCK_DESC = 'ERA_REWARDS_MIN_CREATED_BLOCK_DESC',
  ERA_REWARDS_MIN_CREATED_TIMESTAMP_ASC = 'ERA_REWARDS_MIN_CREATED_TIMESTAMP_ASC',
  ERA_REWARDS_MIN_CREATED_TIMESTAMP_DESC = 'ERA_REWARDS_MIN_CREATED_TIMESTAMP_DESC',
  ERA_REWARDS_MIN_DELEGATOR_ID_ASC = 'ERA_REWARDS_MIN_DELEGATOR_ID_ASC',
  ERA_REWARDS_MIN_DELEGATOR_ID_DESC = 'ERA_REWARDS_MIN_DELEGATOR_ID_DESC',
  ERA_REWARDS_MIN_ERA_IDX_ASC = 'ERA_REWARDS_MIN_ERA_IDX_ASC',
  ERA_REWARDS_MIN_ERA_IDX_DESC = 'ERA_REWARDS_MIN_ERA_IDX_DESC',
  ERA_REWARDS_MIN_ERA_ID_ASC = 'ERA_REWARDS_MIN_ERA_ID_ASC',
  ERA_REWARDS_MIN_ERA_ID_DESC = 'ERA_REWARDS_MIN_ERA_ID_DESC',
  ERA_REWARDS_MIN_ID_ASC = 'ERA_REWARDS_MIN_ID_ASC',
  ERA_REWARDS_MIN_ID_DESC = 'ERA_REWARDS_MIN_ID_DESC',
  ERA_REWARDS_MIN_INDEXER_ID_ASC = 'ERA_REWARDS_MIN_INDEXER_ID_ASC',
  ERA_REWARDS_MIN_INDEXER_ID_DESC = 'ERA_REWARDS_MIN_INDEXER_ID_DESC',
  ERA_REWARDS_MIN_IS_COMMISSION_ASC = 'ERA_REWARDS_MIN_IS_COMMISSION_ASC',
  ERA_REWARDS_MIN_IS_COMMISSION_DESC = 'ERA_REWARDS_MIN_IS_COMMISSION_DESC',
  ERA_REWARDS_MIN_IS_INDEXER_ASC = 'ERA_REWARDS_MIN_IS_INDEXER_ASC',
  ERA_REWARDS_MIN_IS_INDEXER_DESC = 'ERA_REWARDS_MIN_IS_INDEXER_DESC',
  ERA_REWARDS_STDDEV_POPULATION_AMOUNT_ASC = 'ERA_REWARDS_STDDEV_POPULATION_AMOUNT_ASC',
  ERA_REWARDS_STDDEV_POPULATION_AMOUNT_DESC = 'ERA_REWARDS_STDDEV_POPULATION_AMOUNT_DESC',
  ERA_REWARDS_STDDEV_POPULATION_BLOCK_RANGE_ASC = 'ERA_REWARDS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  ERA_REWARDS_STDDEV_POPULATION_BLOCK_RANGE_DESC = 'ERA_REWARDS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  ERA_REWARDS_STDDEV_POPULATION_CLAIMED_ASC = 'ERA_REWARDS_STDDEV_POPULATION_CLAIMED_ASC',
  ERA_REWARDS_STDDEV_POPULATION_CLAIMED_DESC = 'ERA_REWARDS_STDDEV_POPULATION_CLAIMED_DESC',
  ERA_REWARDS_STDDEV_POPULATION_CREATED_BLOCK_ASC = 'ERA_REWARDS_STDDEV_POPULATION_CREATED_BLOCK_ASC',
  ERA_REWARDS_STDDEV_POPULATION_CREATED_BLOCK_DESC = 'ERA_REWARDS_STDDEV_POPULATION_CREATED_BLOCK_DESC',
  ERA_REWARDS_STDDEV_POPULATION_CREATED_TIMESTAMP_ASC = 'ERA_REWARDS_STDDEV_POPULATION_CREATED_TIMESTAMP_ASC',
  ERA_REWARDS_STDDEV_POPULATION_CREATED_TIMESTAMP_DESC = 'ERA_REWARDS_STDDEV_POPULATION_CREATED_TIMESTAMP_DESC',
  ERA_REWARDS_STDDEV_POPULATION_DELEGATOR_ID_ASC = 'ERA_REWARDS_STDDEV_POPULATION_DELEGATOR_ID_ASC',
  ERA_REWARDS_STDDEV_POPULATION_DELEGATOR_ID_DESC = 'ERA_REWARDS_STDDEV_POPULATION_DELEGATOR_ID_DESC',
  ERA_REWARDS_STDDEV_POPULATION_ERA_IDX_ASC = 'ERA_REWARDS_STDDEV_POPULATION_ERA_IDX_ASC',
  ERA_REWARDS_STDDEV_POPULATION_ERA_IDX_DESC = 'ERA_REWARDS_STDDEV_POPULATION_ERA_IDX_DESC',
  ERA_REWARDS_STDDEV_POPULATION_ERA_ID_ASC = 'ERA_REWARDS_STDDEV_POPULATION_ERA_ID_ASC',
  ERA_REWARDS_STDDEV_POPULATION_ERA_ID_DESC = 'ERA_REWARDS_STDDEV_POPULATION_ERA_ID_DESC',
  ERA_REWARDS_STDDEV_POPULATION_ID_ASC = 'ERA_REWARDS_STDDEV_POPULATION_ID_ASC',
  ERA_REWARDS_STDDEV_POPULATION_ID_DESC = 'ERA_REWARDS_STDDEV_POPULATION_ID_DESC',
  ERA_REWARDS_STDDEV_POPULATION_INDEXER_ID_ASC = 'ERA_REWARDS_STDDEV_POPULATION_INDEXER_ID_ASC',
  ERA_REWARDS_STDDEV_POPULATION_INDEXER_ID_DESC = 'ERA_REWARDS_STDDEV_POPULATION_INDEXER_ID_DESC',
  ERA_REWARDS_STDDEV_POPULATION_IS_COMMISSION_ASC = 'ERA_REWARDS_STDDEV_POPULATION_IS_COMMISSION_ASC',
  ERA_REWARDS_STDDEV_POPULATION_IS_COMMISSION_DESC = 'ERA_REWARDS_STDDEV_POPULATION_IS_COMMISSION_DESC',
  ERA_REWARDS_STDDEV_POPULATION_IS_INDEXER_ASC = 'ERA_REWARDS_STDDEV_POPULATION_IS_INDEXER_ASC',
  ERA_REWARDS_STDDEV_POPULATION_IS_INDEXER_DESC = 'ERA_REWARDS_STDDEV_POPULATION_IS_INDEXER_DESC',
  ERA_REWARDS_STDDEV_SAMPLE_AMOUNT_ASC = 'ERA_REWARDS_STDDEV_SAMPLE_AMOUNT_ASC',
  ERA_REWARDS_STDDEV_SAMPLE_AMOUNT_DESC = 'ERA_REWARDS_STDDEV_SAMPLE_AMOUNT_DESC',
  ERA_REWARDS_STDDEV_SAMPLE_BLOCK_RANGE_ASC = 'ERA_REWARDS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  ERA_REWARDS_STDDEV_SAMPLE_BLOCK_RANGE_DESC = 'ERA_REWARDS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  ERA_REWARDS_STDDEV_SAMPLE_CLAIMED_ASC = 'ERA_REWARDS_STDDEV_SAMPLE_CLAIMED_ASC',
  ERA_REWARDS_STDDEV_SAMPLE_CLAIMED_DESC = 'ERA_REWARDS_STDDEV_SAMPLE_CLAIMED_DESC',
  ERA_REWARDS_STDDEV_SAMPLE_CREATED_BLOCK_ASC = 'ERA_REWARDS_STDDEV_SAMPLE_CREATED_BLOCK_ASC',
  ERA_REWARDS_STDDEV_SAMPLE_CREATED_BLOCK_DESC = 'ERA_REWARDS_STDDEV_SAMPLE_CREATED_BLOCK_DESC',
  ERA_REWARDS_STDDEV_SAMPLE_CREATED_TIMESTAMP_ASC = 'ERA_REWARDS_STDDEV_SAMPLE_CREATED_TIMESTAMP_ASC',
  ERA_REWARDS_STDDEV_SAMPLE_CREATED_TIMESTAMP_DESC = 'ERA_REWARDS_STDDEV_SAMPLE_CREATED_TIMESTAMP_DESC',
  ERA_REWARDS_STDDEV_SAMPLE_DELEGATOR_ID_ASC = 'ERA_REWARDS_STDDEV_SAMPLE_DELEGATOR_ID_ASC',
  ERA_REWARDS_STDDEV_SAMPLE_DELEGATOR_ID_DESC = 'ERA_REWARDS_STDDEV_SAMPLE_DELEGATOR_ID_DESC',
  ERA_REWARDS_STDDEV_SAMPLE_ERA_IDX_ASC = 'ERA_REWARDS_STDDEV_SAMPLE_ERA_IDX_ASC',
  ERA_REWARDS_STDDEV_SAMPLE_ERA_IDX_DESC = 'ERA_REWARDS_STDDEV_SAMPLE_ERA_IDX_DESC',
  ERA_REWARDS_STDDEV_SAMPLE_ERA_ID_ASC = 'ERA_REWARDS_STDDEV_SAMPLE_ERA_ID_ASC',
  ERA_REWARDS_STDDEV_SAMPLE_ERA_ID_DESC = 'ERA_REWARDS_STDDEV_SAMPLE_ERA_ID_DESC',
  ERA_REWARDS_STDDEV_SAMPLE_ID_ASC = 'ERA_REWARDS_STDDEV_SAMPLE_ID_ASC',
  ERA_REWARDS_STDDEV_SAMPLE_ID_DESC = 'ERA_REWARDS_STDDEV_SAMPLE_ID_DESC',
  ERA_REWARDS_STDDEV_SAMPLE_INDEXER_ID_ASC = 'ERA_REWARDS_STDDEV_SAMPLE_INDEXER_ID_ASC',
  ERA_REWARDS_STDDEV_SAMPLE_INDEXER_ID_DESC = 'ERA_REWARDS_STDDEV_SAMPLE_INDEXER_ID_DESC',
  ERA_REWARDS_STDDEV_SAMPLE_IS_COMMISSION_ASC = 'ERA_REWARDS_STDDEV_SAMPLE_IS_COMMISSION_ASC',
  ERA_REWARDS_STDDEV_SAMPLE_IS_COMMISSION_DESC = 'ERA_REWARDS_STDDEV_SAMPLE_IS_COMMISSION_DESC',
  ERA_REWARDS_STDDEV_SAMPLE_IS_INDEXER_ASC = 'ERA_REWARDS_STDDEV_SAMPLE_IS_INDEXER_ASC',
  ERA_REWARDS_STDDEV_SAMPLE_IS_INDEXER_DESC = 'ERA_REWARDS_STDDEV_SAMPLE_IS_INDEXER_DESC',
  ERA_REWARDS_SUM_AMOUNT_ASC = 'ERA_REWARDS_SUM_AMOUNT_ASC',
  ERA_REWARDS_SUM_AMOUNT_DESC = 'ERA_REWARDS_SUM_AMOUNT_DESC',
  ERA_REWARDS_SUM_BLOCK_RANGE_ASC = 'ERA_REWARDS_SUM_BLOCK_RANGE_ASC',
  ERA_REWARDS_SUM_BLOCK_RANGE_DESC = 'ERA_REWARDS_SUM_BLOCK_RANGE_DESC',
  ERA_REWARDS_SUM_CLAIMED_ASC = 'ERA_REWARDS_SUM_CLAIMED_ASC',
  ERA_REWARDS_SUM_CLAIMED_DESC = 'ERA_REWARDS_SUM_CLAIMED_DESC',
  ERA_REWARDS_SUM_CREATED_BLOCK_ASC = 'ERA_REWARDS_SUM_CREATED_BLOCK_ASC',
  ERA_REWARDS_SUM_CREATED_BLOCK_DESC = 'ERA_REWARDS_SUM_CREATED_BLOCK_DESC',
  ERA_REWARDS_SUM_CREATED_TIMESTAMP_ASC = 'ERA_REWARDS_SUM_CREATED_TIMESTAMP_ASC',
  ERA_REWARDS_SUM_CREATED_TIMESTAMP_DESC = 'ERA_REWARDS_SUM_CREATED_TIMESTAMP_DESC',
  ERA_REWARDS_SUM_DELEGATOR_ID_ASC = 'ERA_REWARDS_SUM_DELEGATOR_ID_ASC',
  ERA_REWARDS_SUM_DELEGATOR_ID_DESC = 'ERA_REWARDS_SUM_DELEGATOR_ID_DESC',
  ERA_REWARDS_SUM_ERA_IDX_ASC = 'ERA_REWARDS_SUM_ERA_IDX_ASC',
  ERA_REWARDS_SUM_ERA_IDX_DESC = 'ERA_REWARDS_SUM_ERA_IDX_DESC',
  ERA_REWARDS_SUM_ERA_ID_ASC = 'ERA_REWARDS_SUM_ERA_ID_ASC',
  ERA_REWARDS_SUM_ERA_ID_DESC = 'ERA_REWARDS_SUM_ERA_ID_DESC',
  ERA_REWARDS_SUM_ID_ASC = 'ERA_REWARDS_SUM_ID_ASC',
  ERA_REWARDS_SUM_ID_DESC = 'ERA_REWARDS_SUM_ID_DESC',
  ERA_REWARDS_SUM_INDEXER_ID_ASC = 'ERA_REWARDS_SUM_INDEXER_ID_ASC',
  ERA_REWARDS_SUM_INDEXER_ID_DESC = 'ERA_REWARDS_SUM_INDEXER_ID_DESC',
  ERA_REWARDS_SUM_IS_COMMISSION_ASC = 'ERA_REWARDS_SUM_IS_COMMISSION_ASC',
  ERA_REWARDS_SUM_IS_COMMISSION_DESC = 'ERA_REWARDS_SUM_IS_COMMISSION_DESC',
  ERA_REWARDS_SUM_IS_INDEXER_ASC = 'ERA_REWARDS_SUM_IS_INDEXER_ASC',
  ERA_REWARDS_SUM_IS_INDEXER_DESC = 'ERA_REWARDS_SUM_IS_INDEXER_DESC',
  ERA_REWARDS_VARIANCE_POPULATION_AMOUNT_ASC = 'ERA_REWARDS_VARIANCE_POPULATION_AMOUNT_ASC',
  ERA_REWARDS_VARIANCE_POPULATION_AMOUNT_DESC = 'ERA_REWARDS_VARIANCE_POPULATION_AMOUNT_DESC',
  ERA_REWARDS_VARIANCE_POPULATION_BLOCK_RANGE_ASC = 'ERA_REWARDS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  ERA_REWARDS_VARIANCE_POPULATION_BLOCK_RANGE_DESC = 'ERA_REWARDS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  ERA_REWARDS_VARIANCE_POPULATION_CLAIMED_ASC = 'ERA_REWARDS_VARIANCE_POPULATION_CLAIMED_ASC',
  ERA_REWARDS_VARIANCE_POPULATION_CLAIMED_DESC = 'ERA_REWARDS_VARIANCE_POPULATION_CLAIMED_DESC',
  ERA_REWARDS_VARIANCE_POPULATION_CREATED_BLOCK_ASC = 'ERA_REWARDS_VARIANCE_POPULATION_CREATED_BLOCK_ASC',
  ERA_REWARDS_VARIANCE_POPULATION_CREATED_BLOCK_DESC = 'ERA_REWARDS_VARIANCE_POPULATION_CREATED_BLOCK_DESC',
  ERA_REWARDS_VARIANCE_POPULATION_CREATED_TIMESTAMP_ASC = 'ERA_REWARDS_VARIANCE_POPULATION_CREATED_TIMESTAMP_ASC',
  ERA_REWARDS_VARIANCE_POPULATION_CREATED_TIMESTAMP_DESC = 'ERA_REWARDS_VARIANCE_POPULATION_CREATED_TIMESTAMP_DESC',
  ERA_REWARDS_VARIANCE_POPULATION_DELEGATOR_ID_ASC = 'ERA_REWARDS_VARIANCE_POPULATION_DELEGATOR_ID_ASC',
  ERA_REWARDS_VARIANCE_POPULATION_DELEGATOR_ID_DESC = 'ERA_REWARDS_VARIANCE_POPULATION_DELEGATOR_ID_DESC',
  ERA_REWARDS_VARIANCE_POPULATION_ERA_IDX_ASC = 'ERA_REWARDS_VARIANCE_POPULATION_ERA_IDX_ASC',
  ERA_REWARDS_VARIANCE_POPULATION_ERA_IDX_DESC = 'ERA_REWARDS_VARIANCE_POPULATION_ERA_IDX_DESC',
  ERA_REWARDS_VARIANCE_POPULATION_ERA_ID_ASC = 'ERA_REWARDS_VARIANCE_POPULATION_ERA_ID_ASC',
  ERA_REWARDS_VARIANCE_POPULATION_ERA_ID_DESC = 'ERA_REWARDS_VARIANCE_POPULATION_ERA_ID_DESC',
  ERA_REWARDS_VARIANCE_POPULATION_ID_ASC = 'ERA_REWARDS_VARIANCE_POPULATION_ID_ASC',
  ERA_REWARDS_VARIANCE_POPULATION_ID_DESC = 'ERA_REWARDS_VARIANCE_POPULATION_ID_DESC',
  ERA_REWARDS_VARIANCE_POPULATION_INDEXER_ID_ASC = 'ERA_REWARDS_VARIANCE_POPULATION_INDEXER_ID_ASC',
  ERA_REWARDS_VARIANCE_POPULATION_INDEXER_ID_DESC = 'ERA_REWARDS_VARIANCE_POPULATION_INDEXER_ID_DESC',
  ERA_REWARDS_VARIANCE_POPULATION_IS_COMMISSION_ASC = 'ERA_REWARDS_VARIANCE_POPULATION_IS_COMMISSION_ASC',
  ERA_REWARDS_VARIANCE_POPULATION_IS_COMMISSION_DESC = 'ERA_REWARDS_VARIANCE_POPULATION_IS_COMMISSION_DESC',
  ERA_REWARDS_VARIANCE_POPULATION_IS_INDEXER_ASC = 'ERA_REWARDS_VARIANCE_POPULATION_IS_INDEXER_ASC',
  ERA_REWARDS_VARIANCE_POPULATION_IS_INDEXER_DESC = 'ERA_REWARDS_VARIANCE_POPULATION_IS_INDEXER_DESC',
  ERA_REWARDS_VARIANCE_SAMPLE_AMOUNT_ASC = 'ERA_REWARDS_VARIANCE_SAMPLE_AMOUNT_ASC',
  ERA_REWARDS_VARIANCE_SAMPLE_AMOUNT_DESC = 'ERA_REWARDS_VARIANCE_SAMPLE_AMOUNT_DESC',
  ERA_REWARDS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC = 'ERA_REWARDS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  ERA_REWARDS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC = 'ERA_REWARDS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  ERA_REWARDS_VARIANCE_SAMPLE_CLAIMED_ASC = 'ERA_REWARDS_VARIANCE_SAMPLE_CLAIMED_ASC',
  ERA_REWARDS_VARIANCE_SAMPLE_CLAIMED_DESC = 'ERA_REWARDS_VARIANCE_SAMPLE_CLAIMED_DESC',
  ERA_REWARDS_VARIANCE_SAMPLE_CREATED_BLOCK_ASC = 'ERA_REWARDS_VARIANCE_SAMPLE_CREATED_BLOCK_ASC',
  ERA_REWARDS_VARIANCE_SAMPLE_CREATED_BLOCK_DESC = 'ERA_REWARDS_VARIANCE_SAMPLE_CREATED_BLOCK_DESC',
  ERA_REWARDS_VARIANCE_SAMPLE_CREATED_TIMESTAMP_ASC = 'ERA_REWARDS_VARIANCE_SAMPLE_CREATED_TIMESTAMP_ASC',
  ERA_REWARDS_VARIANCE_SAMPLE_CREATED_TIMESTAMP_DESC = 'ERA_REWARDS_VARIANCE_SAMPLE_CREATED_TIMESTAMP_DESC',
  ERA_REWARDS_VARIANCE_SAMPLE_DELEGATOR_ID_ASC = 'ERA_REWARDS_VARIANCE_SAMPLE_DELEGATOR_ID_ASC',
  ERA_REWARDS_VARIANCE_SAMPLE_DELEGATOR_ID_DESC = 'ERA_REWARDS_VARIANCE_SAMPLE_DELEGATOR_ID_DESC',
  ERA_REWARDS_VARIANCE_SAMPLE_ERA_IDX_ASC = 'ERA_REWARDS_VARIANCE_SAMPLE_ERA_IDX_ASC',
  ERA_REWARDS_VARIANCE_SAMPLE_ERA_IDX_DESC = 'ERA_REWARDS_VARIANCE_SAMPLE_ERA_IDX_DESC',
  ERA_REWARDS_VARIANCE_SAMPLE_ERA_ID_ASC = 'ERA_REWARDS_VARIANCE_SAMPLE_ERA_ID_ASC',
  ERA_REWARDS_VARIANCE_SAMPLE_ERA_ID_DESC = 'ERA_REWARDS_VARIANCE_SAMPLE_ERA_ID_DESC',
  ERA_REWARDS_VARIANCE_SAMPLE_ID_ASC = 'ERA_REWARDS_VARIANCE_SAMPLE_ID_ASC',
  ERA_REWARDS_VARIANCE_SAMPLE_ID_DESC = 'ERA_REWARDS_VARIANCE_SAMPLE_ID_DESC',
  ERA_REWARDS_VARIANCE_SAMPLE_INDEXER_ID_ASC = 'ERA_REWARDS_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  ERA_REWARDS_VARIANCE_SAMPLE_INDEXER_ID_DESC = 'ERA_REWARDS_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  ERA_REWARDS_VARIANCE_SAMPLE_IS_COMMISSION_ASC = 'ERA_REWARDS_VARIANCE_SAMPLE_IS_COMMISSION_ASC',
  ERA_REWARDS_VARIANCE_SAMPLE_IS_COMMISSION_DESC = 'ERA_REWARDS_VARIANCE_SAMPLE_IS_COMMISSION_DESC',
  ERA_REWARDS_VARIANCE_SAMPLE_IS_INDEXER_ASC = 'ERA_REWARDS_VARIANCE_SAMPLE_IS_INDEXER_ASC',
  ERA_REWARDS_VARIANCE_SAMPLE_IS_INDEXER_DESC = 'ERA_REWARDS_VARIANCE_SAMPLE_IS_INDEXER_DESC',
  ERA_STAKES_AVERAGE_BLOCK_RANGE_ASC = 'ERA_STAKES_AVERAGE_BLOCK_RANGE_ASC',
  ERA_STAKES_AVERAGE_BLOCK_RANGE_DESC = 'ERA_STAKES_AVERAGE_BLOCK_RANGE_DESC',
  ERA_STAKES_AVERAGE_DELEGATOR_ID_ASC = 'ERA_STAKES_AVERAGE_DELEGATOR_ID_ASC',
  ERA_STAKES_AVERAGE_DELEGATOR_ID_DESC = 'ERA_STAKES_AVERAGE_DELEGATOR_ID_DESC',
  ERA_STAKES_AVERAGE_ERA_IDX_ASC = 'ERA_STAKES_AVERAGE_ERA_IDX_ASC',
  ERA_STAKES_AVERAGE_ERA_IDX_DESC = 'ERA_STAKES_AVERAGE_ERA_IDX_DESC',
  ERA_STAKES_AVERAGE_ERA_ID_ASC = 'ERA_STAKES_AVERAGE_ERA_ID_ASC',
  ERA_STAKES_AVERAGE_ERA_ID_DESC = 'ERA_STAKES_AVERAGE_ERA_ID_DESC',
  ERA_STAKES_AVERAGE_ID_ASC = 'ERA_STAKES_AVERAGE_ID_ASC',
  ERA_STAKES_AVERAGE_ID_DESC = 'ERA_STAKES_AVERAGE_ID_DESC',
  ERA_STAKES_AVERAGE_INDEXER_ID_ASC = 'ERA_STAKES_AVERAGE_INDEXER_ID_ASC',
  ERA_STAKES_AVERAGE_INDEXER_ID_DESC = 'ERA_STAKES_AVERAGE_INDEXER_ID_DESC',
  ERA_STAKES_AVERAGE_STAKE_ASC = 'ERA_STAKES_AVERAGE_STAKE_ASC',
  ERA_STAKES_AVERAGE_STAKE_DESC = 'ERA_STAKES_AVERAGE_STAKE_DESC',
  ERA_STAKES_BY_INDEXER_ID__COUNT_ASC = 'ERA_STAKES_BY_INDEXER_ID__COUNT_ASC',
  ERA_STAKES_BY_INDEXER_ID__COUNT_DESC = 'ERA_STAKES_BY_INDEXER_ID__COUNT_DESC',
  ERA_STAKES_COUNT_ASC = 'ERA_STAKES_COUNT_ASC',
  ERA_STAKES_COUNT_DESC = 'ERA_STAKES_COUNT_DESC',
  ERA_STAKES_DISTINCT_COUNT_BLOCK_RANGE_ASC = 'ERA_STAKES_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  ERA_STAKES_DISTINCT_COUNT_BLOCK_RANGE_DESC = 'ERA_STAKES_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  ERA_STAKES_DISTINCT_COUNT_DELEGATOR_ID_ASC = 'ERA_STAKES_DISTINCT_COUNT_DELEGATOR_ID_ASC',
  ERA_STAKES_DISTINCT_COUNT_DELEGATOR_ID_DESC = 'ERA_STAKES_DISTINCT_COUNT_DELEGATOR_ID_DESC',
  ERA_STAKES_DISTINCT_COUNT_ERA_IDX_ASC = 'ERA_STAKES_DISTINCT_COUNT_ERA_IDX_ASC',
  ERA_STAKES_DISTINCT_COUNT_ERA_IDX_DESC = 'ERA_STAKES_DISTINCT_COUNT_ERA_IDX_DESC',
  ERA_STAKES_DISTINCT_COUNT_ERA_ID_ASC = 'ERA_STAKES_DISTINCT_COUNT_ERA_ID_ASC',
  ERA_STAKES_DISTINCT_COUNT_ERA_ID_DESC = 'ERA_STAKES_DISTINCT_COUNT_ERA_ID_DESC',
  ERA_STAKES_DISTINCT_COUNT_ID_ASC = 'ERA_STAKES_DISTINCT_COUNT_ID_ASC',
  ERA_STAKES_DISTINCT_COUNT_ID_DESC = 'ERA_STAKES_DISTINCT_COUNT_ID_DESC',
  ERA_STAKES_DISTINCT_COUNT_INDEXER_ID_ASC = 'ERA_STAKES_DISTINCT_COUNT_INDEXER_ID_ASC',
  ERA_STAKES_DISTINCT_COUNT_INDEXER_ID_DESC = 'ERA_STAKES_DISTINCT_COUNT_INDEXER_ID_DESC',
  ERA_STAKES_DISTINCT_COUNT_STAKE_ASC = 'ERA_STAKES_DISTINCT_COUNT_STAKE_ASC',
  ERA_STAKES_DISTINCT_COUNT_STAKE_DESC = 'ERA_STAKES_DISTINCT_COUNT_STAKE_DESC',
  ERA_STAKES_MAX_BLOCK_RANGE_ASC = 'ERA_STAKES_MAX_BLOCK_RANGE_ASC',
  ERA_STAKES_MAX_BLOCK_RANGE_DESC = 'ERA_STAKES_MAX_BLOCK_RANGE_DESC',
  ERA_STAKES_MAX_DELEGATOR_ID_ASC = 'ERA_STAKES_MAX_DELEGATOR_ID_ASC',
  ERA_STAKES_MAX_DELEGATOR_ID_DESC = 'ERA_STAKES_MAX_DELEGATOR_ID_DESC',
  ERA_STAKES_MAX_ERA_IDX_ASC = 'ERA_STAKES_MAX_ERA_IDX_ASC',
  ERA_STAKES_MAX_ERA_IDX_DESC = 'ERA_STAKES_MAX_ERA_IDX_DESC',
  ERA_STAKES_MAX_ERA_ID_ASC = 'ERA_STAKES_MAX_ERA_ID_ASC',
  ERA_STAKES_MAX_ERA_ID_DESC = 'ERA_STAKES_MAX_ERA_ID_DESC',
  ERA_STAKES_MAX_ID_ASC = 'ERA_STAKES_MAX_ID_ASC',
  ERA_STAKES_MAX_ID_DESC = 'ERA_STAKES_MAX_ID_DESC',
  ERA_STAKES_MAX_INDEXER_ID_ASC = 'ERA_STAKES_MAX_INDEXER_ID_ASC',
  ERA_STAKES_MAX_INDEXER_ID_DESC = 'ERA_STAKES_MAX_INDEXER_ID_DESC',
  ERA_STAKES_MAX_STAKE_ASC = 'ERA_STAKES_MAX_STAKE_ASC',
  ERA_STAKES_MAX_STAKE_DESC = 'ERA_STAKES_MAX_STAKE_DESC',
  ERA_STAKES_MIN_BLOCK_RANGE_ASC = 'ERA_STAKES_MIN_BLOCK_RANGE_ASC',
  ERA_STAKES_MIN_BLOCK_RANGE_DESC = 'ERA_STAKES_MIN_BLOCK_RANGE_DESC',
  ERA_STAKES_MIN_DELEGATOR_ID_ASC = 'ERA_STAKES_MIN_DELEGATOR_ID_ASC',
  ERA_STAKES_MIN_DELEGATOR_ID_DESC = 'ERA_STAKES_MIN_DELEGATOR_ID_DESC',
  ERA_STAKES_MIN_ERA_IDX_ASC = 'ERA_STAKES_MIN_ERA_IDX_ASC',
  ERA_STAKES_MIN_ERA_IDX_DESC = 'ERA_STAKES_MIN_ERA_IDX_DESC',
  ERA_STAKES_MIN_ERA_ID_ASC = 'ERA_STAKES_MIN_ERA_ID_ASC',
  ERA_STAKES_MIN_ERA_ID_DESC = 'ERA_STAKES_MIN_ERA_ID_DESC',
  ERA_STAKES_MIN_ID_ASC = 'ERA_STAKES_MIN_ID_ASC',
  ERA_STAKES_MIN_ID_DESC = 'ERA_STAKES_MIN_ID_DESC',
  ERA_STAKES_MIN_INDEXER_ID_ASC = 'ERA_STAKES_MIN_INDEXER_ID_ASC',
  ERA_STAKES_MIN_INDEXER_ID_DESC = 'ERA_STAKES_MIN_INDEXER_ID_DESC',
  ERA_STAKES_MIN_STAKE_ASC = 'ERA_STAKES_MIN_STAKE_ASC',
  ERA_STAKES_MIN_STAKE_DESC = 'ERA_STAKES_MIN_STAKE_DESC',
  ERA_STAKES_STDDEV_POPULATION_BLOCK_RANGE_ASC = 'ERA_STAKES_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  ERA_STAKES_STDDEV_POPULATION_BLOCK_RANGE_DESC = 'ERA_STAKES_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  ERA_STAKES_STDDEV_POPULATION_DELEGATOR_ID_ASC = 'ERA_STAKES_STDDEV_POPULATION_DELEGATOR_ID_ASC',
  ERA_STAKES_STDDEV_POPULATION_DELEGATOR_ID_DESC = 'ERA_STAKES_STDDEV_POPULATION_DELEGATOR_ID_DESC',
  ERA_STAKES_STDDEV_POPULATION_ERA_IDX_ASC = 'ERA_STAKES_STDDEV_POPULATION_ERA_IDX_ASC',
  ERA_STAKES_STDDEV_POPULATION_ERA_IDX_DESC = 'ERA_STAKES_STDDEV_POPULATION_ERA_IDX_DESC',
  ERA_STAKES_STDDEV_POPULATION_ERA_ID_ASC = 'ERA_STAKES_STDDEV_POPULATION_ERA_ID_ASC',
  ERA_STAKES_STDDEV_POPULATION_ERA_ID_DESC = 'ERA_STAKES_STDDEV_POPULATION_ERA_ID_DESC',
  ERA_STAKES_STDDEV_POPULATION_ID_ASC = 'ERA_STAKES_STDDEV_POPULATION_ID_ASC',
  ERA_STAKES_STDDEV_POPULATION_ID_DESC = 'ERA_STAKES_STDDEV_POPULATION_ID_DESC',
  ERA_STAKES_STDDEV_POPULATION_INDEXER_ID_ASC = 'ERA_STAKES_STDDEV_POPULATION_INDEXER_ID_ASC',
  ERA_STAKES_STDDEV_POPULATION_INDEXER_ID_DESC = 'ERA_STAKES_STDDEV_POPULATION_INDEXER_ID_DESC',
  ERA_STAKES_STDDEV_POPULATION_STAKE_ASC = 'ERA_STAKES_STDDEV_POPULATION_STAKE_ASC',
  ERA_STAKES_STDDEV_POPULATION_STAKE_DESC = 'ERA_STAKES_STDDEV_POPULATION_STAKE_DESC',
  ERA_STAKES_STDDEV_SAMPLE_BLOCK_RANGE_ASC = 'ERA_STAKES_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  ERA_STAKES_STDDEV_SAMPLE_BLOCK_RANGE_DESC = 'ERA_STAKES_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  ERA_STAKES_STDDEV_SAMPLE_DELEGATOR_ID_ASC = 'ERA_STAKES_STDDEV_SAMPLE_DELEGATOR_ID_ASC',
  ERA_STAKES_STDDEV_SAMPLE_DELEGATOR_ID_DESC = 'ERA_STAKES_STDDEV_SAMPLE_DELEGATOR_ID_DESC',
  ERA_STAKES_STDDEV_SAMPLE_ERA_IDX_ASC = 'ERA_STAKES_STDDEV_SAMPLE_ERA_IDX_ASC',
  ERA_STAKES_STDDEV_SAMPLE_ERA_IDX_DESC = 'ERA_STAKES_STDDEV_SAMPLE_ERA_IDX_DESC',
  ERA_STAKES_STDDEV_SAMPLE_ERA_ID_ASC = 'ERA_STAKES_STDDEV_SAMPLE_ERA_ID_ASC',
  ERA_STAKES_STDDEV_SAMPLE_ERA_ID_DESC = 'ERA_STAKES_STDDEV_SAMPLE_ERA_ID_DESC',
  ERA_STAKES_STDDEV_SAMPLE_ID_ASC = 'ERA_STAKES_STDDEV_SAMPLE_ID_ASC',
  ERA_STAKES_STDDEV_SAMPLE_ID_DESC = 'ERA_STAKES_STDDEV_SAMPLE_ID_DESC',
  ERA_STAKES_STDDEV_SAMPLE_INDEXER_ID_ASC = 'ERA_STAKES_STDDEV_SAMPLE_INDEXER_ID_ASC',
  ERA_STAKES_STDDEV_SAMPLE_INDEXER_ID_DESC = 'ERA_STAKES_STDDEV_SAMPLE_INDEXER_ID_DESC',
  ERA_STAKES_STDDEV_SAMPLE_STAKE_ASC = 'ERA_STAKES_STDDEV_SAMPLE_STAKE_ASC',
  ERA_STAKES_STDDEV_SAMPLE_STAKE_DESC = 'ERA_STAKES_STDDEV_SAMPLE_STAKE_DESC',
  ERA_STAKES_SUM_BLOCK_RANGE_ASC = 'ERA_STAKES_SUM_BLOCK_RANGE_ASC',
  ERA_STAKES_SUM_BLOCK_RANGE_DESC = 'ERA_STAKES_SUM_BLOCK_RANGE_DESC',
  ERA_STAKES_SUM_DELEGATOR_ID_ASC = 'ERA_STAKES_SUM_DELEGATOR_ID_ASC',
  ERA_STAKES_SUM_DELEGATOR_ID_DESC = 'ERA_STAKES_SUM_DELEGATOR_ID_DESC',
  ERA_STAKES_SUM_ERA_IDX_ASC = 'ERA_STAKES_SUM_ERA_IDX_ASC',
  ERA_STAKES_SUM_ERA_IDX_DESC = 'ERA_STAKES_SUM_ERA_IDX_DESC',
  ERA_STAKES_SUM_ERA_ID_ASC = 'ERA_STAKES_SUM_ERA_ID_ASC',
  ERA_STAKES_SUM_ERA_ID_DESC = 'ERA_STAKES_SUM_ERA_ID_DESC',
  ERA_STAKES_SUM_ID_ASC = 'ERA_STAKES_SUM_ID_ASC',
  ERA_STAKES_SUM_ID_DESC = 'ERA_STAKES_SUM_ID_DESC',
  ERA_STAKES_SUM_INDEXER_ID_ASC = 'ERA_STAKES_SUM_INDEXER_ID_ASC',
  ERA_STAKES_SUM_INDEXER_ID_DESC = 'ERA_STAKES_SUM_INDEXER_ID_DESC',
  ERA_STAKES_SUM_STAKE_ASC = 'ERA_STAKES_SUM_STAKE_ASC',
  ERA_STAKES_SUM_STAKE_DESC = 'ERA_STAKES_SUM_STAKE_DESC',
  ERA_STAKES_VARIANCE_POPULATION_BLOCK_RANGE_ASC = 'ERA_STAKES_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  ERA_STAKES_VARIANCE_POPULATION_BLOCK_RANGE_DESC = 'ERA_STAKES_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  ERA_STAKES_VARIANCE_POPULATION_DELEGATOR_ID_ASC = 'ERA_STAKES_VARIANCE_POPULATION_DELEGATOR_ID_ASC',
  ERA_STAKES_VARIANCE_POPULATION_DELEGATOR_ID_DESC = 'ERA_STAKES_VARIANCE_POPULATION_DELEGATOR_ID_DESC',
  ERA_STAKES_VARIANCE_POPULATION_ERA_IDX_ASC = 'ERA_STAKES_VARIANCE_POPULATION_ERA_IDX_ASC',
  ERA_STAKES_VARIANCE_POPULATION_ERA_IDX_DESC = 'ERA_STAKES_VARIANCE_POPULATION_ERA_IDX_DESC',
  ERA_STAKES_VARIANCE_POPULATION_ERA_ID_ASC = 'ERA_STAKES_VARIANCE_POPULATION_ERA_ID_ASC',
  ERA_STAKES_VARIANCE_POPULATION_ERA_ID_DESC = 'ERA_STAKES_VARIANCE_POPULATION_ERA_ID_DESC',
  ERA_STAKES_VARIANCE_POPULATION_ID_ASC = 'ERA_STAKES_VARIANCE_POPULATION_ID_ASC',
  ERA_STAKES_VARIANCE_POPULATION_ID_DESC = 'ERA_STAKES_VARIANCE_POPULATION_ID_DESC',
  ERA_STAKES_VARIANCE_POPULATION_INDEXER_ID_ASC = 'ERA_STAKES_VARIANCE_POPULATION_INDEXER_ID_ASC',
  ERA_STAKES_VARIANCE_POPULATION_INDEXER_ID_DESC = 'ERA_STAKES_VARIANCE_POPULATION_INDEXER_ID_DESC',
  ERA_STAKES_VARIANCE_POPULATION_STAKE_ASC = 'ERA_STAKES_VARIANCE_POPULATION_STAKE_ASC',
  ERA_STAKES_VARIANCE_POPULATION_STAKE_DESC = 'ERA_STAKES_VARIANCE_POPULATION_STAKE_DESC',
  ERA_STAKES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC = 'ERA_STAKES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  ERA_STAKES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC = 'ERA_STAKES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  ERA_STAKES_VARIANCE_SAMPLE_DELEGATOR_ID_ASC = 'ERA_STAKES_VARIANCE_SAMPLE_DELEGATOR_ID_ASC',
  ERA_STAKES_VARIANCE_SAMPLE_DELEGATOR_ID_DESC = 'ERA_STAKES_VARIANCE_SAMPLE_DELEGATOR_ID_DESC',
  ERA_STAKES_VARIANCE_SAMPLE_ERA_IDX_ASC = 'ERA_STAKES_VARIANCE_SAMPLE_ERA_IDX_ASC',
  ERA_STAKES_VARIANCE_SAMPLE_ERA_IDX_DESC = 'ERA_STAKES_VARIANCE_SAMPLE_ERA_IDX_DESC',
  ERA_STAKES_VARIANCE_SAMPLE_ERA_ID_ASC = 'ERA_STAKES_VARIANCE_SAMPLE_ERA_ID_ASC',
  ERA_STAKES_VARIANCE_SAMPLE_ERA_ID_DESC = 'ERA_STAKES_VARIANCE_SAMPLE_ERA_ID_DESC',
  ERA_STAKES_VARIANCE_SAMPLE_ID_ASC = 'ERA_STAKES_VARIANCE_SAMPLE_ID_ASC',
  ERA_STAKES_VARIANCE_SAMPLE_ID_DESC = 'ERA_STAKES_VARIANCE_SAMPLE_ID_DESC',
  ERA_STAKES_VARIANCE_SAMPLE_INDEXER_ID_ASC = 'ERA_STAKES_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  ERA_STAKES_VARIANCE_SAMPLE_INDEXER_ID_DESC = 'ERA_STAKES_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  ERA_STAKES_VARIANCE_SAMPLE_STAKE_ASC = 'ERA_STAKES_VARIANCE_SAMPLE_STAKE_ASC',
  ERA_STAKES_VARIANCE_SAMPLE_STAKE_DESC = 'ERA_STAKES_VARIANCE_SAMPLE_STAKE_DESC',
  ID_ASC = 'ID_ASC',
  ID_DESC = 'ID_DESC',
  INDEXER_ALLOCATIONS_AVERAGE_AMOUNT_ADDED_ASC = 'INDEXER_ALLOCATIONS_AVERAGE_AMOUNT_ADDED_ASC',
  INDEXER_ALLOCATIONS_AVERAGE_AMOUNT_ADDED_DESC = 'INDEXER_ALLOCATIONS_AVERAGE_AMOUNT_ADDED_DESC',
  INDEXER_ALLOCATIONS_AVERAGE_AMOUNT_REMOVED_ASC = 'INDEXER_ALLOCATIONS_AVERAGE_AMOUNT_REMOVED_ASC',
  INDEXER_ALLOCATIONS_AVERAGE_AMOUNT_REMOVED_DESC = 'INDEXER_ALLOCATIONS_AVERAGE_AMOUNT_REMOVED_DESC',
  INDEXER_ALLOCATIONS_AVERAGE_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATIONS_AVERAGE_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATIONS_AVERAGE_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATIONS_AVERAGE_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATIONS_AVERAGE_CREATE_AT_ASC = 'INDEXER_ALLOCATIONS_AVERAGE_CREATE_AT_ASC',
  INDEXER_ALLOCATIONS_AVERAGE_CREATE_AT_DESC = 'INDEXER_ALLOCATIONS_AVERAGE_CREATE_AT_DESC',
  INDEXER_ALLOCATIONS_AVERAGE_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATIONS_AVERAGE_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATIONS_AVERAGE_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATIONS_AVERAGE_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATIONS_AVERAGE_ERA_IDX_ASC = 'INDEXER_ALLOCATIONS_AVERAGE_ERA_IDX_ASC',
  INDEXER_ALLOCATIONS_AVERAGE_ERA_IDX_DESC = 'INDEXER_ALLOCATIONS_AVERAGE_ERA_IDX_DESC',
  INDEXER_ALLOCATIONS_AVERAGE_ID_ASC = 'INDEXER_ALLOCATIONS_AVERAGE_ID_ASC',
  INDEXER_ALLOCATIONS_AVERAGE_ID_DESC = 'INDEXER_ALLOCATIONS_AVERAGE_ID_DESC',
  INDEXER_ALLOCATIONS_AVERAGE_INDEXER_ID_ASC = 'INDEXER_ALLOCATIONS_AVERAGE_INDEXER_ID_ASC',
  INDEXER_ALLOCATIONS_AVERAGE_INDEXER_ID_DESC = 'INDEXER_ALLOCATIONS_AVERAGE_INDEXER_ID_DESC',
  INDEXER_ALLOCATIONS_AVERAGE_PROJECT_ID_ASC = 'INDEXER_ALLOCATIONS_AVERAGE_PROJECT_ID_ASC',
  INDEXER_ALLOCATIONS_AVERAGE_PROJECT_ID_DESC = 'INDEXER_ALLOCATIONS_AVERAGE_PROJECT_ID_DESC',
  INDEXER_ALLOCATIONS_BY_INDEXER_ID__COUNT_ASC = 'INDEXER_ALLOCATIONS_BY_INDEXER_ID__COUNT_ASC',
  INDEXER_ALLOCATIONS_BY_INDEXER_ID__COUNT_DESC = 'INDEXER_ALLOCATIONS_BY_INDEXER_ID__COUNT_DESC',
  INDEXER_ALLOCATIONS_COUNT_ASC = 'INDEXER_ALLOCATIONS_COUNT_ASC',
  INDEXER_ALLOCATIONS_COUNT_DESC = 'INDEXER_ALLOCATIONS_COUNT_DESC',
  INDEXER_ALLOCATIONS_DISTINCT_COUNT_AMOUNT_ADDED_ASC = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_AMOUNT_ADDED_ASC',
  INDEXER_ALLOCATIONS_DISTINCT_COUNT_AMOUNT_ADDED_DESC = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_AMOUNT_ADDED_DESC',
  INDEXER_ALLOCATIONS_DISTINCT_COUNT_AMOUNT_REMOVED_ASC = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_AMOUNT_REMOVED_ASC',
  INDEXER_ALLOCATIONS_DISTINCT_COUNT_AMOUNT_REMOVED_DESC = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_AMOUNT_REMOVED_DESC',
  INDEXER_ALLOCATIONS_DISTINCT_COUNT_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATIONS_DISTINCT_COUNT_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATIONS_DISTINCT_COUNT_CREATE_AT_ASC = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_CREATE_AT_ASC',
  INDEXER_ALLOCATIONS_DISTINCT_COUNT_CREATE_AT_DESC = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_CREATE_AT_DESC',
  INDEXER_ALLOCATIONS_DISTINCT_COUNT_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATIONS_DISTINCT_COUNT_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATIONS_DISTINCT_COUNT_ERA_IDX_ASC = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_ERA_IDX_ASC',
  INDEXER_ALLOCATIONS_DISTINCT_COUNT_ERA_IDX_DESC = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_ERA_IDX_DESC',
  INDEXER_ALLOCATIONS_DISTINCT_COUNT_ID_ASC = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_ID_ASC',
  INDEXER_ALLOCATIONS_DISTINCT_COUNT_ID_DESC = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_ID_DESC',
  INDEXER_ALLOCATIONS_DISTINCT_COUNT_INDEXER_ID_ASC = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_INDEXER_ID_ASC',
  INDEXER_ALLOCATIONS_DISTINCT_COUNT_INDEXER_ID_DESC = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_INDEXER_ID_DESC',
  INDEXER_ALLOCATIONS_DISTINCT_COUNT_PROJECT_ID_ASC = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_PROJECT_ID_ASC',
  INDEXER_ALLOCATIONS_DISTINCT_COUNT_PROJECT_ID_DESC = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_PROJECT_ID_DESC',
  INDEXER_ALLOCATIONS_MAX_AMOUNT_ADDED_ASC = 'INDEXER_ALLOCATIONS_MAX_AMOUNT_ADDED_ASC',
  INDEXER_ALLOCATIONS_MAX_AMOUNT_ADDED_DESC = 'INDEXER_ALLOCATIONS_MAX_AMOUNT_ADDED_DESC',
  INDEXER_ALLOCATIONS_MAX_AMOUNT_REMOVED_ASC = 'INDEXER_ALLOCATIONS_MAX_AMOUNT_REMOVED_ASC',
  INDEXER_ALLOCATIONS_MAX_AMOUNT_REMOVED_DESC = 'INDEXER_ALLOCATIONS_MAX_AMOUNT_REMOVED_DESC',
  INDEXER_ALLOCATIONS_MAX_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATIONS_MAX_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATIONS_MAX_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATIONS_MAX_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATIONS_MAX_CREATE_AT_ASC = 'INDEXER_ALLOCATIONS_MAX_CREATE_AT_ASC',
  INDEXER_ALLOCATIONS_MAX_CREATE_AT_DESC = 'INDEXER_ALLOCATIONS_MAX_CREATE_AT_DESC',
  INDEXER_ALLOCATIONS_MAX_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATIONS_MAX_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATIONS_MAX_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATIONS_MAX_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATIONS_MAX_ERA_IDX_ASC = 'INDEXER_ALLOCATIONS_MAX_ERA_IDX_ASC',
  INDEXER_ALLOCATIONS_MAX_ERA_IDX_DESC = 'INDEXER_ALLOCATIONS_MAX_ERA_IDX_DESC',
  INDEXER_ALLOCATIONS_MAX_ID_ASC = 'INDEXER_ALLOCATIONS_MAX_ID_ASC',
  INDEXER_ALLOCATIONS_MAX_ID_DESC = 'INDEXER_ALLOCATIONS_MAX_ID_DESC',
  INDEXER_ALLOCATIONS_MAX_INDEXER_ID_ASC = 'INDEXER_ALLOCATIONS_MAX_INDEXER_ID_ASC',
  INDEXER_ALLOCATIONS_MAX_INDEXER_ID_DESC = 'INDEXER_ALLOCATIONS_MAX_INDEXER_ID_DESC',
  INDEXER_ALLOCATIONS_MAX_PROJECT_ID_ASC = 'INDEXER_ALLOCATIONS_MAX_PROJECT_ID_ASC',
  INDEXER_ALLOCATIONS_MAX_PROJECT_ID_DESC = 'INDEXER_ALLOCATIONS_MAX_PROJECT_ID_DESC',
  INDEXER_ALLOCATIONS_MIN_AMOUNT_ADDED_ASC = 'INDEXER_ALLOCATIONS_MIN_AMOUNT_ADDED_ASC',
  INDEXER_ALLOCATIONS_MIN_AMOUNT_ADDED_DESC = 'INDEXER_ALLOCATIONS_MIN_AMOUNT_ADDED_DESC',
  INDEXER_ALLOCATIONS_MIN_AMOUNT_REMOVED_ASC = 'INDEXER_ALLOCATIONS_MIN_AMOUNT_REMOVED_ASC',
  INDEXER_ALLOCATIONS_MIN_AMOUNT_REMOVED_DESC = 'INDEXER_ALLOCATIONS_MIN_AMOUNT_REMOVED_DESC',
  INDEXER_ALLOCATIONS_MIN_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATIONS_MIN_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATIONS_MIN_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATIONS_MIN_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATIONS_MIN_CREATE_AT_ASC = 'INDEXER_ALLOCATIONS_MIN_CREATE_AT_ASC',
  INDEXER_ALLOCATIONS_MIN_CREATE_AT_DESC = 'INDEXER_ALLOCATIONS_MIN_CREATE_AT_DESC',
  INDEXER_ALLOCATIONS_MIN_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATIONS_MIN_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATIONS_MIN_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATIONS_MIN_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATIONS_MIN_ERA_IDX_ASC = 'INDEXER_ALLOCATIONS_MIN_ERA_IDX_ASC',
  INDEXER_ALLOCATIONS_MIN_ERA_IDX_DESC = 'INDEXER_ALLOCATIONS_MIN_ERA_IDX_DESC',
  INDEXER_ALLOCATIONS_MIN_ID_ASC = 'INDEXER_ALLOCATIONS_MIN_ID_ASC',
  INDEXER_ALLOCATIONS_MIN_ID_DESC = 'INDEXER_ALLOCATIONS_MIN_ID_DESC',
  INDEXER_ALLOCATIONS_MIN_INDEXER_ID_ASC = 'INDEXER_ALLOCATIONS_MIN_INDEXER_ID_ASC',
  INDEXER_ALLOCATIONS_MIN_INDEXER_ID_DESC = 'INDEXER_ALLOCATIONS_MIN_INDEXER_ID_DESC',
  INDEXER_ALLOCATIONS_MIN_PROJECT_ID_ASC = 'INDEXER_ALLOCATIONS_MIN_PROJECT_ID_ASC',
  INDEXER_ALLOCATIONS_MIN_PROJECT_ID_DESC = 'INDEXER_ALLOCATIONS_MIN_PROJECT_ID_DESC',
  INDEXER_ALLOCATIONS_STDDEV_POPULATION_AMOUNT_ADDED_ASC = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_AMOUNT_ADDED_ASC',
  INDEXER_ALLOCATIONS_STDDEV_POPULATION_AMOUNT_ADDED_DESC = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_AMOUNT_ADDED_DESC',
  INDEXER_ALLOCATIONS_STDDEV_POPULATION_AMOUNT_REMOVED_ASC = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_AMOUNT_REMOVED_ASC',
  INDEXER_ALLOCATIONS_STDDEV_POPULATION_AMOUNT_REMOVED_DESC = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_AMOUNT_REMOVED_DESC',
  INDEXER_ALLOCATIONS_STDDEV_POPULATION_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATIONS_STDDEV_POPULATION_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATIONS_STDDEV_POPULATION_CREATE_AT_ASC = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_CREATE_AT_ASC',
  INDEXER_ALLOCATIONS_STDDEV_POPULATION_CREATE_AT_DESC = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_CREATE_AT_DESC',
  INDEXER_ALLOCATIONS_STDDEV_POPULATION_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATIONS_STDDEV_POPULATION_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATIONS_STDDEV_POPULATION_ERA_IDX_ASC = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_ERA_IDX_ASC',
  INDEXER_ALLOCATIONS_STDDEV_POPULATION_ERA_IDX_DESC = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_ERA_IDX_DESC',
  INDEXER_ALLOCATIONS_STDDEV_POPULATION_ID_ASC = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_ID_ASC',
  INDEXER_ALLOCATIONS_STDDEV_POPULATION_ID_DESC = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_ID_DESC',
  INDEXER_ALLOCATIONS_STDDEV_POPULATION_INDEXER_ID_ASC = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_INDEXER_ID_ASC',
  INDEXER_ALLOCATIONS_STDDEV_POPULATION_INDEXER_ID_DESC = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_INDEXER_ID_DESC',
  INDEXER_ALLOCATIONS_STDDEV_POPULATION_PROJECT_ID_ASC = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_PROJECT_ID_ASC',
  INDEXER_ALLOCATIONS_STDDEV_POPULATION_PROJECT_ID_DESC = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_PROJECT_ID_DESC',
  INDEXER_ALLOCATIONS_STDDEV_SAMPLE_AMOUNT_ADDED_ASC = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_AMOUNT_ADDED_ASC',
  INDEXER_ALLOCATIONS_STDDEV_SAMPLE_AMOUNT_ADDED_DESC = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_AMOUNT_ADDED_DESC',
  INDEXER_ALLOCATIONS_STDDEV_SAMPLE_AMOUNT_REMOVED_ASC = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_AMOUNT_REMOVED_ASC',
  INDEXER_ALLOCATIONS_STDDEV_SAMPLE_AMOUNT_REMOVED_DESC = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_AMOUNT_REMOVED_DESC',
  INDEXER_ALLOCATIONS_STDDEV_SAMPLE_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATIONS_STDDEV_SAMPLE_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATIONS_STDDEV_SAMPLE_CREATE_AT_ASC = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_CREATE_AT_ASC',
  INDEXER_ALLOCATIONS_STDDEV_SAMPLE_CREATE_AT_DESC = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_CREATE_AT_DESC',
  INDEXER_ALLOCATIONS_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATIONS_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATIONS_STDDEV_SAMPLE_ERA_IDX_ASC = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_ERA_IDX_ASC',
  INDEXER_ALLOCATIONS_STDDEV_SAMPLE_ERA_IDX_DESC = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_ERA_IDX_DESC',
  INDEXER_ALLOCATIONS_STDDEV_SAMPLE_ID_ASC = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_ID_ASC',
  INDEXER_ALLOCATIONS_STDDEV_SAMPLE_ID_DESC = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_ID_DESC',
  INDEXER_ALLOCATIONS_STDDEV_SAMPLE_INDEXER_ID_ASC = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_INDEXER_ID_ASC',
  INDEXER_ALLOCATIONS_STDDEV_SAMPLE_INDEXER_ID_DESC = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_INDEXER_ID_DESC',
  INDEXER_ALLOCATIONS_STDDEV_SAMPLE_PROJECT_ID_ASC = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_PROJECT_ID_ASC',
  INDEXER_ALLOCATIONS_STDDEV_SAMPLE_PROJECT_ID_DESC = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_PROJECT_ID_DESC',
  INDEXER_ALLOCATIONS_SUM_AMOUNT_ADDED_ASC = 'INDEXER_ALLOCATIONS_SUM_AMOUNT_ADDED_ASC',
  INDEXER_ALLOCATIONS_SUM_AMOUNT_ADDED_DESC = 'INDEXER_ALLOCATIONS_SUM_AMOUNT_ADDED_DESC',
  INDEXER_ALLOCATIONS_SUM_AMOUNT_REMOVED_ASC = 'INDEXER_ALLOCATIONS_SUM_AMOUNT_REMOVED_ASC',
  INDEXER_ALLOCATIONS_SUM_AMOUNT_REMOVED_DESC = 'INDEXER_ALLOCATIONS_SUM_AMOUNT_REMOVED_DESC',
  INDEXER_ALLOCATIONS_SUM_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATIONS_SUM_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATIONS_SUM_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATIONS_SUM_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATIONS_SUM_CREATE_AT_ASC = 'INDEXER_ALLOCATIONS_SUM_CREATE_AT_ASC',
  INDEXER_ALLOCATIONS_SUM_CREATE_AT_DESC = 'INDEXER_ALLOCATIONS_SUM_CREATE_AT_DESC',
  INDEXER_ALLOCATIONS_SUM_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATIONS_SUM_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATIONS_SUM_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATIONS_SUM_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATIONS_SUM_ERA_IDX_ASC = 'INDEXER_ALLOCATIONS_SUM_ERA_IDX_ASC',
  INDEXER_ALLOCATIONS_SUM_ERA_IDX_DESC = 'INDEXER_ALLOCATIONS_SUM_ERA_IDX_DESC',
  INDEXER_ALLOCATIONS_SUM_ID_ASC = 'INDEXER_ALLOCATIONS_SUM_ID_ASC',
  INDEXER_ALLOCATIONS_SUM_ID_DESC = 'INDEXER_ALLOCATIONS_SUM_ID_DESC',
  INDEXER_ALLOCATIONS_SUM_INDEXER_ID_ASC = 'INDEXER_ALLOCATIONS_SUM_INDEXER_ID_ASC',
  INDEXER_ALLOCATIONS_SUM_INDEXER_ID_DESC = 'INDEXER_ALLOCATIONS_SUM_INDEXER_ID_DESC',
  INDEXER_ALLOCATIONS_SUM_PROJECT_ID_ASC = 'INDEXER_ALLOCATIONS_SUM_PROJECT_ID_ASC',
  INDEXER_ALLOCATIONS_SUM_PROJECT_ID_DESC = 'INDEXER_ALLOCATIONS_SUM_PROJECT_ID_DESC',
  INDEXER_ALLOCATIONS_VARIANCE_POPULATION_AMOUNT_ADDED_ASC = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_AMOUNT_ADDED_ASC',
  INDEXER_ALLOCATIONS_VARIANCE_POPULATION_AMOUNT_ADDED_DESC = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_AMOUNT_ADDED_DESC',
  INDEXER_ALLOCATIONS_VARIANCE_POPULATION_AMOUNT_REMOVED_ASC = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_AMOUNT_REMOVED_ASC',
  INDEXER_ALLOCATIONS_VARIANCE_POPULATION_AMOUNT_REMOVED_DESC = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_AMOUNT_REMOVED_DESC',
  INDEXER_ALLOCATIONS_VARIANCE_POPULATION_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATIONS_VARIANCE_POPULATION_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATIONS_VARIANCE_POPULATION_CREATE_AT_ASC = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_CREATE_AT_ASC',
  INDEXER_ALLOCATIONS_VARIANCE_POPULATION_CREATE_AT_DESC = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_CREATE_AT_DESC',
  INDEXER_ALLOCATIONS_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATIONS_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATIONS_VARIANCE_POPULATION_ERA_IDX_ASC = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_ERA_IDX_ASC',
  INDEXER_ALLOCATIONS_VARIANCE_POPULATION_ERA_IDX_DESC = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_ERA_IDX_DESC',
  INDEXER_ALLOCATIONS_VARIANCE_POPULATION_ID_ASC = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_ID_ASC',
  INDEXER_ALLOCATIONS_VARIANCE_POPULATION_ID_DESC = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_ID_DESC',
  INDEXER_ALLOCATIONS_VARIANCE_POPULATION_INDEXER_ID_ASC = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_INDEXER_ID_ASC',
  INDEXER_ALLOCATIONS_VARIANCE_POPULATION_INDEXER_ID_DESC = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_INDEXER_ID_DESC',
  INDEXER_ALLOCATIONS_VARIANCE_POPULATION_PROJECT_ID_ASC = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_PROJECT_ID_ASC',
  INDEXER_ALLOCATIONS_VARIANCE_POPULATION_PROJECT_ID_DESC = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_PROJECT_ID_DESC',
  INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_AMOUNT_ADDED_ASC = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_AMOUNT_ADDED_ASC',
  INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_AMOUNT_ADDED_DESC = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_AMOUNT_ADDED_DESC',
  INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_AMOUNT_REMOVED_ASC = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_AMOUNT_REMOVED_ASC',
  INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_AMOUNT_REMOVED_DESC = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_AMOUNT_REMOVED_DESC',
  INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_CREATE_AT_ASC = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_CREATE_AT_ASC',
  INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_CREATE_AT_DESC = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_CREATE_AT_DESC',
  INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_ERA_IDX_ASC = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_ERA_IDX_ASC',
  INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_ERA_IDX_DESC = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_ERA_IDX_DESC',
  INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_ID_ASC = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_ID_ASC',
  INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_ID_DESC = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_ID_DESC',
  INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_INDEXER_ID_ASC = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_INDEXER_ID_DESC = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_PROJECT_ID_ASC = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_PROJECT_ID_ASC',
  INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_PROJECT_ID_DESC = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_AVERAGE_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_AVERAGE_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_AVERAGE_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_AVERAGE_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_AVERAGE_CREATE_AT_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_AVERAGE_CREATE_AT_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_AVERAGE_CREATE_AT_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_AVERAGE_CREATE_AT_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_AVERAGE_ERA_IDX_END_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_AVERAGE_ERA_IDX_END_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_AVERAGE_ERA_IDX_END_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_AVERAGE_ERA_IDX_END_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_AVERAGE_ERA_IDX_START_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_AVERAGE_ERA_IDX_START_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_AVERAGE_ERA_IDX_START_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_AVERAGE_ERA_IDX_START_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_AVERAGE_ID_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_AVERAGE_ID_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_AVERAGE_ID_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_AVERAGE_ID_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_AVERAGE_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_AVERAGE_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_AVERAGE_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_AVERAGE_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_AVERAGE_OVERFLOW_END_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_AVERAGE_OVERFLOW_END_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_AVERAGE_OVERFLOW_END_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_AVERAGE_OVERFLOW_END_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_AVERAGE_OVERFLOW_START_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_AVERAGE_OVERFLOW_START_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_AVERAGE_OVERFLOW_START_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_AVERAGE_OVERFLOW_START_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_AVERAGE_OVERFLOW_TIME_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_AVERAGE_OVERFLOW_TIME_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_AVERAGE_OVERFLOW_TIME_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_AVERAGE_OVERFLOW_TIME_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_AVERAGE_UPDATE_AT_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_AVERAGE_UPDATE_AT_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_AVERAGE_UPDATE_AT_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_AVERAGE_UPDATE_AT_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_BY_INDEXER_ID__COUNT_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_BY_INDEXER_ID__COUNT_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_BY_INDEXER_ID__COUNT_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_BY_INDEXER_ID__COUNT_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_COUNT_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_COUNT_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_COUNT_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_COUNT_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_DISTINCT_COUNT_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_DISTINCT_COUNT_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_DISTINCT_COUNT_CREATE_AT_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_DISTINCT_COUNT_CREATE_AT_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_DISTINCT_COUNT_CREATE_AT_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_DISTINCT_COUNT_CREATE_AT_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_DISTINCT_COUNT_ERA_IDX_END_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_DISTINCT_COUNT_ERA_IDX_END_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_DISTINCT_COUNT_ERA_IDX_END_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_DISTINCT_COUNT_ERA_IDX_END_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_DISTINCT_COUNT_ERA_IDX_START_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_DISTINCT_COUNT_ERA_IDX_START_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_DISTINCT_COUNT_ERA_IDX_START_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_DISTINCT_COUNT_ERA_IDX_START_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_DISTINCT_COUNT_ID_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_DISTINCT_COUNT_ID_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_DISTINCT_COUNT_ID_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_DISTINCT_COUNT_ID_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_DISTINCT_COUNT_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_DISTINCT_COUNT_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_DISTINCT_COUNT_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_DISTINCT_COUNT_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_DISTINCT_COUNT_OVERFLOW_END_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_DISTINCT_COUNT_OVERFLOW_END_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_DISTINCT_COUNT_OVERFLOW_END_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_DISTINCT_COUNT_OVERFLOW_END_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_DISTINCT_COUNT_OVERFLOW_START_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_DISTINCT_COUNT_OVERFLOW_START_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_DISTINCT_COUNT_OVERFLOW_START_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_DISTINCT_COUNT_OVERFLOW_START_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_DISTINCT_COUNT_OVERFLOW_TIME_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_DISTINCT_COUNT_OVERFLOW_TIME_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_DISTINCT_COUNT_OVERFLOW_TIME_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_DISTINCT_COUNT_OVERFLOW_TIME_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_DISTINCT_COUNT_UPDATE_AT_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_DISTINCT_COUNT_UPDATE_AT_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_DISTINCT_COUNT_UPDATE_AT_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_DISTINCT_COUNT_UPDATE_AT_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_MAX_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_MAX_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_MAX_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_MAX_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_MAX_CREATE_AT_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_MAX_CREATE_AT_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_MAX_CREATE_AT_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_MAX_CREATE_AT_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_MAX_ERA_IDX_END_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_MAX_ERA_IDX_END_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_MAX_ERA_IDX_END_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_MAX_ERA_IDX_END_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_MAX_ERA_IDX_START_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_MAX_ERA_IDX_START_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_MAX_ERA_IDX_START_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_MAX_ERA_IDX_START_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_MAX_ID_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_MAX_ID_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_MAX_ID_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_MAX_ID_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_MAX_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_MAX_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_MAX_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_MAX_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_MAX_OVERFLOW_END_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_MAX_OVERFLOW_END_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_MAX_OVERFLOW_END_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_MAX_OVERFLOW_END_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_MAX_OVERFLOW_START_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_MAX_OVERFLOW_START_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_MAX_OVERFLOW_START_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_MAX_OVERFLOW_START_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_MAX_OVERFLOW_TIME_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_MAX_OVERFLOW_TIME_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_MAX_OVERFLOW_TIME_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_MAX_OVERFLOW_TIME_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_MAX_UPDATE_AT_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_MAX_UPDATE_AT_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_MAX_UPDATE_AT_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_MAX_UPDATE_AT_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_MIN_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_MIN_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_MIN_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_MIN_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_MIN_CREATE_AT_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_MIN_CREATE_AT_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_MIN_CREATE_AT_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_MIN_CREATE_AT_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_MIN_ERA_IDX_END_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_MIN_ERA_IDX_END_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_MIN_ERA_IDX_END_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_MIN_ERA_IDX_END_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_MIN_ERA_IDX_START_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_MIN_ERA_IDX_START_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_MIN_ERA_IDX_START_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_MIN_ERA_IDX_START_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_MIN_ID_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_MIN_ID_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_MIN_ID_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_MIN_ID_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_MIN_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_MIN_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_MIN_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_MIN_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_MIN_OVERFLOW_END_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_MIN_OVERFLOW_END_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_MIN_OVERFLOW_END_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_MIN_OVERFLOW_END_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_MIN_OVERFLOW_START_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_MIN_OVERFLOW_START_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_MIN_OVERFLOW_START_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_MIN_OVERFLOW_START_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_MIN_OVERFLOW_TIME_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_MIN_OVERFLOW_TIME_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_MIN_OVERFLOW_TIME_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_MIN_OVERFLOW_TIME_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_MIN_UPDATE_AT_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_MIN_UPDATE_AT_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_MIN_UPDATE_AT_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_MIN_UPDATE_AT_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_STDDEV_POPULATION_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_STDDEV_POPULATION_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_STDDEV_POPULATION_CREATE_AT_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_POPULATION_CREATE_AT_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_STDDEV_POPULATION_CREATE_AT_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_POPULATION_CREATE_AT_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_STDDEV_POPULATION_ERA_IDX_END_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_POPULATION_ERA_IDX_END_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_STDDEV_POPULATION_ERA_IDX_END_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_POPULATION_ERA_IDX_END_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_STDDEV_POPULATION_ERA_IDX_START_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_POPULATION_ERA_IDX_START_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_STDDEV_POPULATION_ERA_IDX_START_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_POPULATION_ERA_IDX_START_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_STDDEV_POPULATION_ID_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_POPULATION_ID_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_STDDEV_POPULATION_ID_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_POPULATION_ID_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_STDDEV_POPULATION_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_POPULATION_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_STDDEV_POPULATION_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_POPULATION_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_STDDEV_POPULATION_OVERFLOW_END_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_POPULATION_OVERFLOW_END_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_STDDEV_POPULATION_OVERFLOW_END_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_POPULATION_OVERFLOW_END_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_STDDEV_POPULATION_OVERFLOW_START_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_POPULATION_OVERFLOW_START_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_STDDEV_POPULATION_OVERFLOW_START_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_POPULATION_OVERFLOW_START_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_STDDEV_POPULATION_OVERFLOW_TIME_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_POPULATION_OVERFLOW_TIME_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_STDDEV_POPULATION_OVERFLOW_TIME_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_POPULATION_OVERFLOW_TIME_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_STDDEV_POPULATION_UPDATE_AT_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_POPULATION_UPDATE_AT_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_STDDEV_POPULATION_UPDATE_AT_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_POPULATION_UPDATE_AT_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_STDDEV_SAMPLE_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_STDDEV_SAMPLE_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_STDDEV_SAMPLE_CREATE_AT_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_SAMPLE_CREATE_AT_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_STDDEV_SAMPLE_CREATE_AT_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_SAMPLE_CREATE_AT_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_STDDEV_SAMPLE_ERA_IDX_END_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_SAMPLE_ERA_IDX_END_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_STDDEV_SAMPLE_ERA_IDX_END_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_SAMPLE_ERA_IDX_END_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_STDDEV_SAMPLE_ERA_IDX_START_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_SAMPLE_ERA_IDX_START_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_STDDEV_SAMPLE_ERA_IDX_START_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_SAMPLE_ERA_IDX_START_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_STDDEV_SAMPLE_ID_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_SAMPLE_ID_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_STDDEV_SAMPLE_ID_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_SAMPLE_ID_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_STDDEV_SAMPLE_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_SAMPLE_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_STDDEV_SAMPLE_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_SAMPLE_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_STDDEV_SAMPLE_OVERFLOW_END_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_SAMPLE_OVERFLOW_END_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_STDDEV_SAMPLE_OVERFLOW_END_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_SAMPLE_OVERFLOW_END_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_STDDEV_SAMPLE_OVERFLOW_START_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_SAMPLE_OVERFLOW_START_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_STDDEV_SAMPLE_OVERFLOW_START_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_SAMPLE_OVERFLOW_START_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_STDDEV_SAMPLE_OVERFLOW_TIME_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_SAMPLE_OVERFLOW_TIME_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_STDDEV_SAMPLE_OVERFLOW_TIME_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_SAMPLE_OVERFLOW_TIME_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_STDDEV_SAMPLE_UPDATE_AT_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_SAMPLE_UPDATE_AT_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_STDDEV_SAMPLE_UPDATE_AT_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_SAMPLE_UPDATE_AT_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_SUM_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_SUM_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_SUM_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_SUM_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_SUM_CREATE_AT_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_SUM_CREATE_AT_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_SUM_CREATE_AT_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_SUM_CREATE_AT_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_SUM_ERA_IDX_END_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_SUM_ERA_IDX_END_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_SUM_ERA_IDX_END_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_SUM_ERA_IDX_END_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_SUM_ERA_IDX_START_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_SUM_ERA_IDX_START_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_SUM_ERA_IDX_START_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_SUM_ERA_IDX_START_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_SUM_ID_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_SUM_ID_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_SUM_ID_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_SUM_ID_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_SUM_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_SUM_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_SUM_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_SUM_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_SUM_OVERFLOW_END_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_SUM_OVERFLOW_END_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_SUM_OVERFLOW_END_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_SUM_OVERFLOW_END_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_SUM_OVERFLOW_START_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_SUM_OVERFLOW_START_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_SUM_OVERFLOW_START_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_SUM_OVERFLOW_START_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_SUM_OVERFLOW_TIME_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_SUM_OVERFLOW_TIME_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_SUM_OVERFLOW_TIME_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_SUM_OVERFLOW_TIME_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_SUM_UPDATE_AT_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_SUM_UPDATE_AT_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_SUM_UPDATE_AT_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_SUM_UPDATE_AT_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_POPULATION_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_POPULATION_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_POPULATION_CREATE_AT_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_POPULATION_CREATE_AT_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_POPULATION_CREATE_AT_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_POPULATION_CREATE_AT_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_POPULATION_ERA_IDX_END_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_POPULATION_ERA_IDX_END_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_POPULATION_ERA_IDX_END_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_POPULATION_ERA_IDX_END_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_POPULATION_ERA_IDX_START_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_POPULATION_ERA_IDX_START_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_POPULATION_ERA_IDX_START_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_POPULATION_ERA_IDX_START_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_POPULATION_ID_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_POPULATION_ID_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_POPULATION_ID_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_POPULATION_ID_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_POPULATION_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_POPULATION_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_POPULATION_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_POPULATION_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_POPULATION_OVERFLOW_END_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_POPULATION_OVERFLOW_END_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_POPULATION_OVERFLOW_END_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_POPULATION_OVERFLOW_END_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_POPULATION_OVERFLOW_START_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_POPULATION_OVERFLOW_START_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_POPULATION_OVERFLOW_START_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_POPULATION_OVERFLOW_START_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_POPULATION_OVERFLOW_TIME_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_POPULATION_OVERFLOW_TIME_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_POPULATION_OVERFLOW_TIME_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_POPULATION_OVERFLOW_TIME_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_POPULATION_UPDATE_AT_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_POPULATION_UPDATE_AT_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_POPULATION_UPDATE_AT_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_POPULATION_UPDATE_AT_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_SAMPLE_CREATE_AT_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_SAMPLE_CREATE_AT_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_SAMPLE_CREATE_AT_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_SAMPLE_CREATE_AT_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_SAMPLE_ERA_IDX_END_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_SAMPLE_ERA_IDX_END_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_SAMPLE_ERA_IDX_END_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_SAMPLE_ERA_IDX_END_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_SAMPLE_ERA_IDX_START_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_SAMPLE_ERA_IDX_START_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_SAMPLE_ERA_IDX_START_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_SAMPLE_ERA_IDX_START_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_SAMPLE_ID_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_SAMPLE_ID_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_SAMPLE_ID_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_SAMPLE_ID_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_SAMPLE_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_SAMPLE_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_SAMPLE_OVERFLOW_END_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_SAMPLE_OVERFLOW_END_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_SAMPLE_OVERFLOW_END_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_SAMPLE_OVERFLOW_END_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_SAMPLE_OVERFLOW_START_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_SAMPLE_OVERFLOW_START_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_SAMPLE_OVERFLOW_START_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_SAMPLE_OVERFLOW_START_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_SAMPLE_OVERFLOW_TIME_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_SAMPLE_OVERFLOW_TIME_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_SAMPLE_OVERFLOW_TIME_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_SAMPLE_OVERFLOW_TIME_DESC',
  INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_SAMPLE_UPDATE_AT_ASC = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_SAMPLE_UPDATE_AT_ASC',
  INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_SAMPLE_UPDATE_AT_DESC = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_SAMPLE_UPDATE_AT_DESC',
  INDEXER_ALLOCATION_REWARDS_AVERAGE_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_REWARDS_AVERAGE_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_REWARDS_AVERAGE_BURNT_ASC = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_BURNT_ASC',
  INDEXER_ALLOCATION_REWARDS_AVERAGE_BURNT_DESC = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_BURNT_DESC',
  INDEXER_ALLOCATION_REWARDS_AVERAGE_CREATE_AT_ASC = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_CREATE_AT_ASC',
  INDEXER_ALLOCATION_REWARDS_AVERAGE_CREATE_AT_DESC = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_CREATE_AT_DESC',
  INDEXER_ALLOCATION_REWARDS_AVERAGE_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_AVERAGE_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_AVERAGE_ERA_IDX_ASC = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_ERA_IDX_ASC',
  INDEXER_ALLOCATION_REWARDS_AVERAGE_ERA_IDX_DESC = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_ERA_IDX_DESC',
  INDEXER_ALLOCATION_REWARDS_AVERAGE_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_AVERAGE_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_AVERAGE_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_AVERAGE_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_AVERAGE_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_AVERAGE_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_AVERAGE_REWARD_ASC = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_REWARD_ASC',
  INDEXER_ALLOCATION_REWARDS_AVERAGE_REWARD_DESC = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_REWARD_DESC',
  INDEXER_ALLOCATION_REWARDS_BY_INDEXER_ID__COUNT_ASC = 'INDEXER_ALLOCATION_REWARDS_BY_INDEXER_ID__COUNT_ASC',
  INDEXER_ALLOCATION_REWARDS_BY_INDEXER_ID__COUNT_DESC = 'INDEXER_ALLOCATION_REWARDS_BY_INDEXER_ID__COUNT_DESC',
  INDEXER_ALLOCATION_REWARDS_COUNT_ASC = 'INDEXER_ALLOCATION_REWARDS_COUNT_ASC',
  INDEXER_ALLOCATION_REWARDS_COUNT_DESC = 'INDEXER_ALLOCATION_REWARDS_COUNT_DESC',
  INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_BURNT_ASC = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_BURNT_ASC',
  INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_BURNT_DESC = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_BURNT_DESC',
  INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_CREATE_AT_ASC = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_CREATE_AT_ASC',
  INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_CREATE_AT_DESC = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_CREATE_AT_DESC',
  INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_ERA_IDX_ASC = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_ERA_IDX_ASC',
  INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_ERA_IDX_DESC = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_ERA_IDX_DESC',
  INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_REWARD_ASC = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_REWARD_ASC',
  INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_REWARD_DESC = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_REWARD_DESC',
  INDEXER_ALLOCATION_REWARDS_MAX_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_REWARDS_MAX_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_REWARDS_MAX_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_REWARDS_MAX_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_REWARDS_MAX_BURNT_ASC = 'INDEXER_ALLOCATION_REWARDS_MAX_BURNT_ASC',
  INDEXER_ALLOCATION_REWARDS_MAX_BURNT_DESC = 'INDEXER_ALLOCATION_REWARDS_MAX_BURNT_DESC',
  INDEXER_ALLOCATION_REWARDS_MAX_CREATE_AT_ASC = 'INDEXER_ALLOCATION_REWARDS_MAX_CREATE_AT_ASC',
  INDEXER_ALLOCATION_REWARDS_MAX_CREATE_AT_DESC = 'INDEXER_ALLOCATION_REWARDS_MAX_CREATE_AT_DESC',
  INDEXER_ALLOCATION_REWARDS_MAX_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_MAX_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_MAX_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_MAX_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_MAX_ERA_IDX_ASC = 'INDEXER_ALLOCATION_REWARDS_MAX_ERA_IDX_ASC',
  INDEXER_ALLOCATION_REWARDS_MAX_ERA_IDX_DESC = 'INDEXER_ALLOCATION_REWARDS_MAX_ERA_IDX_DESC',
  INDEXER_ALLOCATION_REWARDS_MAX_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_MAX_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_MAX_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_MAX_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_MAX_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_MAX_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_MAX_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_MAX_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_MAX_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_MAX_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_MAX_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_MAX_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_MAX_REWARD_ASC = 'INDEXER_ALLOCATION_REWARDS_MAX_REWARD_ASC',
  INDEXER_ALLOCATION_REWARDS_MAX_REWARD_DESC = 'INDEXER_ALLOCATION_REWARDS_MAX_REWARD_DESC',
  INDEXER_ALLOCATION_REWARDS_MIN_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_REWARDS_MIN_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_REWARDS_MIN_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_REWARDS_MIN_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_REWARDS_MIN_BURNT_ASC = 'INDEXER_ALLOCATION_REWARDS_MIN_BURNT_ASC',
  INDEXER_ALLOCATION_REWARDS_MIN_BURNT_DESC = 'INDEXER_ALLOCATION_REWARDS_MIN_BURNT_DESC',
  INDEXER_ALLOCATION_REWARDS_MIN_CREATE_AT_ASC = 'INDEXER_ALLOCATION_REWARDS_MIN_CREATE_AT_ASC',
  INDEXER_ALLOCATION_REWARDS_MIN_CREATE_AT_DESC = 'INDEXER_ALLOCATION_REWARDS_MIN_CREATE_AT_DESC',
  INDEXER_ALLOCATION_REWARDS_MIN_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_MIN_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_MIN_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_MIN_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_MIN_ERA_IDX_ASC = 'INDEXER_ALLOCATION_REWARDS_MIN_ERA_IDX_ASC',
  INDEXER_ALLOCATION_REWARDS_MIN_ERA_IDX_DESC = 'INDEXER_ALLOCATION_REWARDS_MIN_ERA_IDX_DESC',
  INDEXER_ALLOCATION_REWARDS_MIN_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_MIN_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_MIN_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_MIN_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_MIN_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_MIN_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_MIN_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_MIN_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_MIN_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_MIN_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_MIN_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_MIN_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_MIN_REWARD_ASC = 'INDEXER_ALLOCATION_REWARDS_MIN_REWARD_ASC',
  INDEXER_ALLOCATION_REWARDS_MIN_REWARD_DESC = 'INDEXER_ALLOCATION_REWARDS_MIN_REWARD_DESC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_BURNT_ASC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_BURNT_ASC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_BURNT_DESC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_BURNT_DESC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_CREATE_AT_ASC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_CREATE_AT_ASC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_CREATE_AT_DESC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_CREATE_AT_DESC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_ERA_IDX_ASC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_ERA_IDX_ASC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_ERA_IDX_DESC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_ERA_IDX_DESC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_REWARD_ASC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_REWARD_ASC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_REWARD_DESC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_REWARD_DESC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_BURNT_ASC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_BURNT_ASC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_BURNT_DESC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_BURNT_DESC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_CREATE_AT_ASC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_CREATE_AT_ASC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_CREATE_AT_DESC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_CREATE_AT_DESC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_ERA_IDX_ASC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_ERA_IDX_ASC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_ERA_IDX_DESC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_ERA_IDX_DESC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_REWARD_ASC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_REWARD_ASC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_REWARD_DESC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_REWARD_DESC',
  INDEXER_ALLOCATION_REWARDS_SUM_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_REWARDS_SUM_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_REWARDS_SUM_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_REWARDS_SUM_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_REWARDS_SUM_BURNT_ASC = 'INDEXER_ALLOCATION_REWARDS_SUM_BURNT_ASC',
  INDEXER_ALLOCATION_REWARDS_SUM_BURNT_DESC = 'INDEXER_ALLOCATION_REWARDS_SUM_BURNT_DESC',
  INDEXER_ALLOCATION_REWARDS_SUM_CREATE_AT_ASC = 'INDEXER_ALLOCATION_REWARDS_SUM_CREATE_AT_ASC',
  INDEXER_ALLOCATION_REWARDS_SUM_CREATE_AT_DESC = 'INDEXER_ALLOCATION_REWARDS_SUM_CREATE_AT_DESC',
  INDEXER_ALLOCATION_REWARDS_SUM_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_SUM_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_SUM_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_SUM_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_SUM_ERA_IDX_ASC = 'INDEXER_ALLOCATION_REWARDS_SUM_ERA_IDX_ASC',
  INDEXER_ALLOCATION_REWARDS_SUM_ERA_IDX_DESC = 'INDEXER_ALLOCATION_REWARDS_SUM_ERA_IDX_DESC',
  INDEXER_ALLOCATION_REWARDS_SUM_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_SUM_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_SUM_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_SUM_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_SUM_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_SUM_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_SUM_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_SUM_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_SUM_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_SUM_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_SUM_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_SUM_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_SUM_REWARD_ASC = 'INDEXER_ALLOCATION_REWARDS_SUM_REWARD_ASC',
  INDEXER_ALLOCATION_REWARDS_SUM_REWARD_DESC = 'INDEXER_ALLOCATION_REWARDS_SUM_REWARD_DESC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_BURNT_ASC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_BURNT_ASC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_BURNT_DESC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_BURNT_DESC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_CREATE_AT_ASC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_CREATE_AT_ASC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_CREATE_AT_DESC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_CREATE_AT_DESC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_ERA_IDX_ASC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_ERA_IDX_ASC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_ERA_IDX_DESC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_ERA_IDX_DESC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_REWARD_ASC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_REWARD_ASC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_REWARD_DESC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_REWARD_DESC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_BURNT_ASC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_BURNT_ASC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_BURNT_DESC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_BURNT_DESC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_CREATE_AT_ASC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_CREATE_AT_ASC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_CREATE_AT_DESC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_CREATE_AT_DESC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_ERA_IDX_ASC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_ERA_IDX_ASC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_ERA_IDX_DESC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_ERA_IDX_DESC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_REWARD_ASC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_REWARD_ASC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_REWARD_DESC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_REWARD_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_CREATE_AT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_CREATE_AT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_CREATE_AT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_CREATE_AT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_TOTAL_BURNT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_TOTAL_BURNT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_TOTAL_BURNT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_TOTAL_BURNT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_TOTAL_REWARD_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_TOTAL_REWARD_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_TOTAL_REWARD_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_TOTAL_REWARD_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_UPDATE_AT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_UPDATE_AT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_UPDATE_AT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_UPDATE_AT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_BY_INDEXER_ID__COUNT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_BY_INDEXER_ID__COUNT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_BY_INDEXER_ID__COUNT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_BY_INDEXER_ID__COUNT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_COUNT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_COUNT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_COUNT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_COUNT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_CREATE_AT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_CREATE_AT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_CREATE_AT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_CREATE_AT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_TOTAL_BURNT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_TOTAL_BURNT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_TOTAL_BURNT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_TOTAL_BURNT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_TOTAL_REWARD_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_TOTAL_REWARD_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_TOTAL_REWARD_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_TOTAL_REWARD_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_UPDATE_AT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_UPDATE_AT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_UPDATE_AT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_UPDATE_AT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_CREATE_AT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_CREATE_AT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_CREATE_AT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_CREATE_AT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_TOTAL_BURNT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_TOTAL_BURNT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_TOTAL_BURNT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_TOTAL_BURNT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_TOTAL_REWARD_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_TOTAL_REWARD_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_TOTAL_REWARD_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_TOTAL_REWARD_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_UPDATE_AT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_UPDATE_AT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_UPDATE_AT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_UPDATE_AT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_CREATE_AT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_CREATE_AT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_CREATE_AT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_CREATE_AT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_TOTAL_BURNT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_TOTAL_BURNT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_TOTAL_BURNT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_TOTAL_BURNT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_TOTAL_REWARD_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_TOTAL_REWARD_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_TOTAL_REWARD_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_TOTAL_REWARD_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_UPDATE_AT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_UPDATE_AT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_UPDATE_AT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_UPDATE_AT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_CREATE_AT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_CREATE_AT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_CREATE_AT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_CREATE_AT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_TOTAL_BURNT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_TOTAL_BURNT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_TOTAL_BURNT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_TOTAL_BURNT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_TOTAL_REWARD_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_TOTAL_REWARD_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_TOTAL_REWARD_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_TOTAL_REWARD_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_UPDATE_AT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_UPDATE_AT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_UPDATE_AT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_UPDATE_AT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_CREATE_AT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_CREATE_AT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_CREATE_AT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_CREATE_AT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_TOTAL_BURNT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_TOTAL_BURNT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_TOTAL_BURNT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_TOTAL_BURNT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_TOTAL_REWARD_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_TOTAL_REWARD_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_TOTAL_REWARD_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_TOTAL_REWARD_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_UPDATE_AT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_UPDATE_AT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_UPDATE_AT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_UPDATE_AT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_CREATE_AT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_CREATE_AT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_CREATE_AT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_CREATE_AT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_TOTAL_BURNT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_TOTAL_BURNT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_TOTAL_BURNT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_TOTAL_BURNT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_TOTAL_REWARD_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_TOTAL_REWARD_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_TOTAL_REWARD_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_TOTAL_REWARD_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_UPDATE_AT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_UPDATE_AT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_UPDATE_AT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_UPDATE_AT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_CREATE_AT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_CREATE_AT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_CREATE_AT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_CREATE_AT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_TOTAL_BURNT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_TOTAL_BURNT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_TOTAL_BURNT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_TOTAL_BURNT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_TOTAL_REWARD_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_TOTAL_REWARD_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_TOTAL_REWARD_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_TOTAL_REWARD_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_UPDATE_AT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_UPDATE_AT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_UPDATE_AT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_UPDATE_AT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_CREATE_AT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_CREATE_AT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_CREATE_AT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_CREATE_AT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_TOTAL_BURNT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_TOTAL_BURNT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_TOTAL_BURNT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_TOTAL_BURNT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_TOTAL_REWARD_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_TOTAL_REWARD_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_TOTAL_REWARD_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_TOTAL_REWARD_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_UPDATE_AT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_UPDATE_AT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_UPDATE_AT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_UPDATE_AT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_AVERAGE_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_SUMMARIES_AVERAGE_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_SUMMARIES_AVERAGE_CREATE_AT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_CREATE_AT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_AVERAGE_CREATE_AT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_CREATE_AT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_AVERAGE_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_AVERAGE_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_AVERAGE_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_AVERAGE_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_AVERAGE_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_AVERAGE_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_AVERAGE_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_AVERAGE_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_AVERAGE_TOTAL_ADDED_ASC = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_TOTAL_ADDED_ASC',
  INDEXER_ALLOCATION_SUMMARIES_AVERAGE_TOTAL_ADDED_DESC = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_TOTAL_ADDED_DESC',
  INDEXER_ALLOCATION_SUMMARIES_AVERAGE_TOTAL_AMOUNT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_TOTAL_AMOUNT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_AVERAGE_TOTAL_AMOUNT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_TOTAL_AMOUNT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_AVERAGE_TOTAL_REMOVED_ASC = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_TOTAL_REMOVED_ASC',
  INDEXER_ALLOCATION_SUMMARIES_AVERAGE_TOTAL_REMOVED_DESC = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_TOTAL_REMOVED_DESC',
  INDEXER_ALLOCATION_SUMMARIES_AVERAGE_UPDATE_AT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_UPDATE_AT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_AVERAGE_UPDATE_AT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_UPDATE_AT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_BY_INDEXER_ID__COUNT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_BY_INDEXER_ID__COUNT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_BY_INDEXER_ID__COUNT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_BY_INDEXER_ID__COUNT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_COUNT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_COUNT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_COUNT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_COUNT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_CREATE_AT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_CREATE_AT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_CREATE_AT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_CREATE_AT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_TOTAL_ADDED_ASC = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_TOTAL_ADDED_ASC',
  INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_TOTAL_ADDED_DESC = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_TOTAL_ADDED_DESC',
  INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_TOTAL_AMOUNT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_TOTAL_AMOUNT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_TOTAL_AMOUNT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_TOTAL_AMOUNT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_TOTAL_REMOVED_ASC = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_TOTAL_REMOVED_ASC',
  INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_TOTAL_REMOVED_DESC = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_TOTAL_REMOVED_DESC',
  INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_UPDATE_AT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_UPDATE_AT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_UPDATE_AT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_UPDATE_AT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_MAX_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_SUMMARIES_MAX_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_SUMMARIES_MAX_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_SUMMARIES_MAX_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_SUMMARIES_MAX_CREATE_AT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_MAX_CREATE_AT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_MAX_CREATE_AT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_MAX_CREATE_AT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_MAX_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_MAX_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_MAX_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_MAX_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_MAX_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_MAX_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_MAX_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_MAX_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_MAX_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_MAX_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_MAX_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_MAX_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_MAX_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_MAX_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_MAX_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_MAX_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_MAX_TOTAL_ADDED_ASC = 'INDEXER_ALLOCATION_SUMMARIES_MAX_TOTAL_ADDED_ASC',
  INDEXER_ALLOCATION_SUMMARIES_MAX_TOTAL_ADDED_DESC = 'INDEXER_ALLOCATION_SUMMARIES_MAX_TOTAL_ADDED_DESC',
  INDEXER_ALLOCATION_SUMMARIES_MAX_TOTAL_AMOUNT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_MAX_TOTAL_AMOUNT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_MAX_TOTAL_AMOUNT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_MAX_TOTAL_AMOUNT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_MAX_TOTAL_REMOVED_ASC = 'INDEXER_ALLOCATION_SUMMARIES_MAX_TOTAL_REMOVED_ASC',
  INDEXER_ALLOCATION_SUMMARIES_MAX_TOTAL_REMOVED_DESC = 'INDEXER_ALLOCATION_SUMMARIES_MAX_TOTAL_REMOVED_DESC',
  INDEXER_ALLOCATION_SUMMARIES_MAX_UPDATE_AT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_MAX_UPDATE_AT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_MAX_UPDATE_AT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_MAX_UPDATE_AT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_MIN_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_SUMMARIES_MIN_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_SUMMARIES_MIN_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_SUMMARIES_MIN_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_SUMMARIES_MIN_CREATE_AT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_MIN_CREATE_AT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_MIN_CREATE_AT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_MIN_CREATE_AT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_MIN_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_MIN_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_MIN_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_MIN_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_MIN_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_MIN_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_MIN_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_MIN_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_MIN_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_MIN_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_MIN_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_MIN_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_MIN_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_MIN_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_MIN_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_MIN_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_MIN_TOTAL_ADDED_ASC = 'INDEXER_ALLOCATION_SUMMARIES_MIN_TOTAL_ADDED_ASC',
  INDEXER_ALLOCATION_SUMMARIES_MIN_TOTAL_ADDED_DESC = 'INDEXER_ALLOCATION_SUMMARIES_MIN_TOTAL_ADDED_DESC',
  INDEXER_ALLOCATION_SUMMARIES_MIN_TOTAL_AMOUNT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_MIN_TOTAL_AMOUNT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_MIN_TOTAL_AMOUNT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_MIN_TOTAL_AMOUNT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_MIN_TOTAL_REMOVED_ASC = 'INDEXER_ALLOCATION_SUMMARIES_MIN_TOTAL_REMOVED_ASC',
  INDEXER_ALLOCATION_SUMMARIES_MIN_TOTAL_REMOVED_DESC = 'INDEXER_ALLOCATION_SUMMARIES_MIN_TOTAL_REMOVED_DESC',
  INDEXER_ALLOCATION_SUMMARIES_MIN_UPDATE_AT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_MIN_UPDATE_AT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_MIN_UPDATE_AT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_MIN_UPDATE_AT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_CREATE_AT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_CREATE_AT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_CREATE_AT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_CREATE_AT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_TOTAL_ADDED_ASC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_TOTAL_ADDED_ASC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_TOTAL_ADDED_DESC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_TOTAL_ADDED_DESC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_TOTAL_AMOUNT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_TOTAL_AMOUNT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_TOTAL_AMOUNT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_TOTAL_AMOUNT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_TOTAL_REMOVED_ASC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_TOTAL_REMOVED_ASC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_TOTAL_REMOVED_DESC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_TOTAL_REMOVED_DESC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_UPDATE_AT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_UPDATE_AT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_UPDATE_AT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_UPDATE_AT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_CREATE_AT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_CREATE_AT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_CREATE_AT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_CREATE_AT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_TOTAL_ADDED_ASC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_TOTAL_ADDED_ASC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_TOTAL_ADDED_DESC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_TOTAL_ADDED_DESC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_TOTAL_AMOUNT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_TOTAL_AMOUNT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_TOTAL_AMOUNT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_TOTAL_AMOUNT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_TOTAL_REMOVED_ASC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_TOTAL_REMOVED_ASC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_TOTAL_REMOVED_DESC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_TOTAL_REMOVED_DESC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_UPDATE_AT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_UPDATE_AT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_UPDATE_AT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_UPDATE_AT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_SUM_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_SUMMARIES_SUM_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_SUMMARIES_SUM_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_SUMMARIES_SUM_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_SUMMARIES_SUM_CREATE_AT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_SUM_CREATE_AT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_SUM_CREATE_AT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_SUM_CREATE_AT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_SUM_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_SUM_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_SUM_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_SUM_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_SUM_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_SUM_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_SUM_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_SUM_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_SUM_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_SUM_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_SUM_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_SUM_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_SUM_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_SUM_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_SUM_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_SUM_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_SUM_TOTAL_ADDED_ASC = 'INDEXER_ALLOCATION_SUMMARIES_SUM_TOTAL_ADDED_ASC',
  INDEXER_ALLOCATION_SUMMARIES_SUM_TOTAL_ADDED_DESC = 'INDEXER_ALLOCATION_SUMMARIES_SUM_TOTAL_ADDED_DESC',
  INDEXER_ALLOCATION_SUMMARIES_SUM_TOTAL_AMOUNT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_SUM_TOTAL_AMOUNT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_SUM_TOTAL_AMOUNT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_SUM_TOTAL_AMOUNT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_SUM_TOTAL_REMOVED_ASC = 'INDEXER_ALLOCATION_SUMMARIES_SUM_TOTAL_REMOVED_ASC',
  INDEXER_ALLOCATION_SUMMARIES_SUM_TOTAL_REMOVED_DESC = 'INDEXER_ALLOCATION_SUMMARIES_SUM_TOTAL_REMOVED_DESC',
  INDEXER_ALLOCATION_SUMMARIES_SUM_UPDATE_AT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_SUM_UPDATE_AT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_SUM_UPDATE_AT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_SUM_UPDATE_AT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_CREATE_AT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_CREATE_AT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_CREATE_AT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_CREATE_AT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_TOTAL_ADDED_ASC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_TOTAL_ADDED_ASC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_TOTAL_ADDED_DESC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_TOTAL_ADDED_DESC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_TOTAL_AMOUNT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_TOTAL_AMOUNT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_TOTAL_AMOUNT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_TOTAL_AMOUNT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_TOTAL_REMOVED_ASC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_TOTAL_REMOVED_ASC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_TOTAL_REMOVED_DESC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_TOTAL_REMOVED_DESC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_UPDATE_AT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_UPDATE_AT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_UPDATE_AT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_UPDATE_AT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_CREATE_AT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_CREATE_AT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_CREATE_AT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_CREATE_AT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_TOTAL_ADDED_ASC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_TOTAL_ADDED_ASC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_TOTAL_ADDED_DESC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_TOTAL_ADDED_DESC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_TOTAL_AMOUNT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_TOTAL_AMOUNT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_TOTAL_AMOUNT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_TOTAL_AMOUNT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_TOTAL_REMOVED_ASC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_TOTAL_REMOVED_ASC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_TOTAL_REMOVED_DESC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_TOTAL_REMOVED_DESC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_UPDATE_AT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_UPDATE_AT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_UPDATE_AT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_UPDATE_AT_DESC',
  INDEXER_APY_SUMMARIES_AVERAGE_BLOCK_RANGE_ASC = 'INDEXER_APY_SUMMARIES_AVERAGE_BLOCK_RANGE_ASC',
  INDEXER_APY_SUMMARIES_AVERAGE_BLOCK_RANGE_DESC = 'INDEXER_APY_SUMMARIES_AVERAGE_BLOCK_RANGE_DESC',
  INDEXER_APY_SUMMARIES_AVERAGE_CREATE_AT_ASC = 'INDEXER_APY_SUMMARIES_AVERAGE_CREATE_AT_ASC',
  INDEXER_APY_SUMMARIES_AVERAGE_CREATE_AT_DESC = 'INDEXER_APY_SUMMARIES_AVERAGE_CREATE_AT_DESC',
  INDEXER_APY_SUMMARIES_AVERAGE_DELEGATOR_APY_ASC = 'INDEXER_APY_SUMMARIES_AVERAGE_DELEGATOR_APY_ASC',
  INDEXER_APY_SUMMARIES_AVERAGE_DELEGATOR_APY_DESC = 'INDEXER_APY_SUMMARIES_AVERAGE_DELEGATOR_APY_DESC',
  INDEXER_APY_SUMMARIES_AVERAGE_DELEGATOR_REWARD_ASC = 'INDEXER_APY_SUMMARIES_AVERAGE_DELEGATOR_REWARD_ASC',
  INDEXER_APY_SUMMARIES_AVERAGE_DELEGATOR_REWARD_DESC = 'INDEXER_APY_SUMMARIES_AVERAGE_DELEGATOR_REWARD_DESC',
  INDEXER_APY_SUMMARIES_AVERAGE_ERA_IDX_ASC = 'INDEXER_APY_SUMMARIES_AVERAGE_ERA_IDX_ASC',
  INDEXER_APY_SUMMARIES_AVERAGE_ERA_IDX_DESC = 'INDEXER_APY_SUMMARIES_AVERAGE_ERA_IDX_DESC',
  INDEXER_APY_SUMMARIES_AVERAGE_ID_ASC = 'INDEXER_APY_SUMMARIES_AVERAGE_ID_ASC',
  INDEXER_APY_SUMMARIES_AVERAGE_ID_DESC = 'INDEXER_APY_SUMMARIES_AVERAGE_ID_DESC',
  INDEXER_APY_SUMMARIES_AVERAGE_INDEXER_APY_ASC = 'INDEXER_APY_SUMMARIES_AVERAGE_INDEXER_APY_ASC',
  INDEXER_APY_SUMMARIES_AVERAGE_INDEXER_APY_DESC = 'INDEXER_APY_SUMMARIES_AVERAGE_INDEXER_APY_DESC',
  INDEXER_APY_SUMMARIES_AVERAGE_INDEXER_ID_ASC = 'INDEXER_APY_SUMMARIES_AVERAGE_INDEXER_ID_ASC',
  INDEXER_APY_SUMMARIES_AVERAGE_INDEXER_ID_DESC = 'INDEXER_APY_SUMMARIES_AVERAGE_INDEXER_ID_DESC',
  INDEXER_APY_SUMMARIES_AVERAGE_INDEXER_REWARD_ASC = 'INDEXER_APY_SUMMARIES_AVERAGE_INDEXER_REWARD_ASC',
  INDEXER_APY_SUMMARIES_AVERAGE_INDEXER_REWARD_DESC = 'INDEXER_APY_SUMMARIES_AVERAGE_INDEXER_REWARD_DESC',
  INDEXER_APY_SUMMARIES_AVERAGE_UPDATE_AT_ASC = 'INDEXER_APY_SUMMARIES_AVERAGE_UPDATE_AT_ASC',
  INDEXER_APY_SUMMARIES_AVERAGE_UPDATE_AT_DESC = 'INDEXER_APY_SUMMARIES_AVERAGE_UPDATE_AT_DESC',
  INDEXER_APY_SUMMARIES_BY_INDEXER_ID__COUNT_ASC = 'INDEXER_APY_SUMMARIES_BY_INDEXER_ID__COUNT_ASC',
  INDEXER_APY_SUMMARIES_BY_INDEXER_ID__COUNT_DESC = 'INDEXER_APY_SUMMARIES_BY_INDEXER_ID__COUNT_DESC',
  INDEXER_APY_SUMMARIES_COUNT_ASC = 'INDEXER_APY_SUMMARIES_COUNT_ASC',
  INDEXER_APY_SUMMARIES_COUNT_DESC = 'INDEXER_APY_SUMMARIES_COUNT_DESC',
  INDEXER_APY_SUMMARIES_DISTINCT_COUNT_BLOCK_RANGE_ASC = 'INDEXER_APY_SUMMARIES_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  INDEXER_APY_SUMMARIES_DISTINCT_COUNT_BLOCK_RANGE_DESC = 'INDEXER_APY_SUMMARIES_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  INDEXER_APY_SUMMARIES_DISTINCT_COUNT_CREATE_AT_ASC = 'INDEXER_APY_SUMMARIES_DISTINCT_COUNT_CREATE_AT_ASC',
  INDEXER_APY_SUMMARIES_DISTINCT_COUNT_CREATE_AT_DESC = 'INDEXER_APY_SUMMARIES_DISTINCT_COUNT_CREATE_AT_DESC',
  INDEXER_APY_SUMMARIES_DISTINCT_COUNT_DELEGATOR_APY_ASC = 'INDEXER_APY_SUMMARIES_DISTINCT_COUNT_DELEGATOR_APY_ASC',
  INDEXER_APY_SUMMARIES_DISTINCT_COUNT_DELEGATOR_APY_DESC = 'INDEXER_APY_SUMMARIES_DISTINCT_COUNT_DELEGATOR_APY_DESC',
  INDEXER_APY_SUMMARIES_DISTINCT_COUNT_DELEGATOR_REWARD_ASC = 'INDEXER_APY_SUMMARIES_DISTINCT_COUNT_DELEGATOR_REWARD_ASC',
  INDEXER_APY_SUMMARIES_DISTINCT_COUNT_DELEGATOR_REWARD_DESC = 'INDEXER_APY_SUMMARIES_DISTINCT_COUNT_DELEGATOR_REWARD_DESC',
  INDEXER_APY_SUMMARIES_DISTINCT_COUNT_ERA_IDX_ASC = 'INDEXER_APY_SUMMARIES_DISTINCT_COUNT_ERA_IDX_ASC',
  INDEXER_APY_SUMMARIES_DISTINCT_COUNT_ERA_IDX_DESC = 'INDEXER_APY_SUMMARIES_DISTINCT_COUNT_ERA_IDX_DESC',
  INDEXER_APY_SUMMARIES_DISTINCT_COUNT_ID_ASC = 'INDEXER_APY_SUMMARIES_DISTINCT_COUNT_ID_ASC',
  INDEXER_APY_SUMMARIES_DISTINCT_COUNT_ID_DESC = 'INDEXER_APY_SUMMARIES_DISTINCT_COUNT_ID_DESC',
  INDEXER_APY_SUMMARIES_DISTINCT_COUNT_INDEXER_APY_ASC = 'INDEXER_APY_SUMMARIES_DISTINCT_COUNT_INDEXER_APY_ASC',
  INDEXER_APY_SUMMARIES_DISTINCT_COUNT_INDEXER_APY_DESC = 'INDEXER_APY_SUMMARIES_DISTINCT_COUNT_INDEXER_APY_DESC',
  INDEXER_APY_SUMMARIES_DISTINCT_COUNT_INDEXER_ID_ASC = 'INDEXER_APY_SUMMARIES_DISTINCT_COUNT_INDEXER_ID_ASC',
  INDEXER_APY_SUMMARIES_DISTINCT_COUNT_INDEXER_ID_DESC = 'INDEXER_APY_SUMMARIES_DISTINCT_COUNT_INDEXER_ID_DESC',
  INDEXER_APY_SUMMARIES_DISTINCT_COUNT_INDEXER_REWARD_ASC = 'INDEXER_APY_SUMMARIES_DISTINCT_COUNT_INDEXER_REWARD_ASC',
  INDEXER_APY_SUMMARIES_DISTINCT_COUNT_INDEXER_REWARD_DESC = 'INDEXER_APY_SUMMARIES_DISTINCT_COUNT_INDEXER_REWARD_DESC',
  INDEXER_APY_SUMMARIES_DISTINCT_COUNT_UPDATE_AT_ASC = 'INDEXER_APY_SUMMARIES_DISTINCT_COUNT_UPDATE_AT_ASC',
  INDEXER_APY_SUMMARIES_DISTINCT_COUNT_UPDATE_AT_DESC = 'INDEXER_APY_SUMMARIES_DISTINCT_COUNT_UPDATE_AT_DESC',
  INDEXER_APY_SUMMARIES_MAX_BLOCK_RANGE_ASC = 'INDEXER_APY_SUMMARIES_MAX_BLOCK_RANGE_ASC',
  INDEXER_APY_SUMMARIES_MAX_BLOCK_RANGE_DESC = 'INDEXER_APY_SUMMARIES_MAX_BLOCK_RANGE_DESC',
  INDEXER_APY_SUMMARIES_MAX_CREATE_AT_ASC = 'INDEXER_APY_SUMMARIES_MAX_CREATE_AT_ASC',
  INDEXER_APY_SUMMARIES_MAX_CREATE_AT_DESC = 'INDEXER_APY_SUMMARIES_MAX_CREATE_AT_DESC',
  INDEXER_APY_SUMMARIES_MAX_DELEGATOR_APY_ASC = 'INDEXER_APY_SUMMARIES_MAX_DELEGATOR_APY_ASC',
  INDEXER_APY_SUMMARIES_MAX_DELEGATOR_APY_DESC = 'INDEXER_APY_SUMMARIES_MAX_DELEGATOR_APY_DESC',
  INDEXER_APY_SUMMARIES_MAX_DELEGATOR_REWARD_ASC = 'INDEXER_APY_SUMMARIES_MAX_DELEGATOR_REWARD_ASC',
  INDEXER_APY_SUMMARIES_MAX_DELEGATOR_REWARD_DESC = 'INDEXER_APY_SUMMARIES_MAX_DELEGATOR_REWARD_DESC',
  INDEXER_APY_SUMMARIES_MAX_ERA_IDX_ASC = 'INDEXER_APY_SUMMARIES_MAX_ERA_IDX_ASC',
  INDEXER_APY_SUMMARIES_MAX_ERA_IDX_DESC = 'INDEXER_APY_SUMMARIES_MAX_ERA_IDX_DESC',
  INDEXER_APY_SUMMARIES_MAX_ID_ASC = 'INDEXER_APY_SUMMARIES_MAX_ID_ASC',
  INDEXER_APY_SUMMARIES_MAX_ID_DESC = 'INDEXER_APY_SUMMARIES_MAX_ID_DESC',
  INDEXER_APY_SUMMARIES_MAX_INDEXER_APY_ASC = 'INDEXER_APY_SUMMARIES_MAX_INDEXER_APY_ASC',
  INDEXER_APY_SUMMARIES_MAX_INDEXER_APY_DESC = 'INDEXER_APY_SUMMARIES_MAX_INDEXER_APY_DESC',
  INDEXER_APY_SUMMARIES_MAX_INDEXER_ID_ASC = 'INDEXER_APY_SUMMARIES_MAX_INDEXER_ID_ASC',
  INDEXER_APY_SUMMARIES_MAX_INDEXER_ID_DESC = 'INDEXER_APY_SUMMARIES_MAX_INDEXER_ID_DESC',
  INDEXER_APY_SUMMARIES_MAX_INDEXER_REWARD_ASC = 'INDEXER_APY_SUMMARIES_MAX_INDEXER_REWARD_ASC',
  INDEXER_APY_SUMMARIES_MAX_INDEXER_REWARD_DESC = 'INDEXER_APY_SUMMARIES_MAX_INDEXER_REWARD_DESC',
  INDEXER_APY_SUMMARIES_MAX_UPDATE_AT_ASC = 'INDEXER_APY_SUMMARIES_MAX_UPDATE_AT_ASC',
  INDEXER_APY_SUMMARIES_MAX_UPDATE_AT_DESC = 'INDEXER_APY_SUMMARIES_MAX_UPDATE_AT_DESC',
  INDEXER_APY_SUMMARIES_MIN_BLOCK_RANGE_ASC = 'INDEXER_APY_SUMMARIES_MIN_BLOCK_RANGE_ASC',
  INDEXER_APY_SUMMARIES_MIN_BLOCK_RANGE_DESC = 'INDEXER_APY_SUMMARIES_MIN_BLOCK_RANGE_DESC',
  INDEXER_APY_SUMMARIES_MIN_CREATE_AT_ASC = 'INDEXER_APY_SUMMARIES_MIN_CREATE_AT_ASC',
  INDEXER_APY_SUMMARIES_MIN_CREATE_AT_DESC = 'INDEXER_APY_SUMMARIES_MIN_CREATE_AT_DESC',
  INDEXER_APY_SUMMARIES_MIN_DELEGATOR_APY_ASC = 'INDEXER_APY_SUMMARIES_MIN_DELEGATOR_APY_ASC',
  INDEXER_APY_SUMMARIES_MIN_DELEGATOR_APY_DESC = 'INDEXER_APY_SUMMARIES_MIN_DELEGATOR_APY_DESC',
  INDEXER_APY_SUMMARIES_MIN_DELEGATOR_REWARD_ASC = 'INDEXER_APY_SUMMARIES_MIN_DELEGATOR_REWARD_ASC',
  INDEXER_APY_SUMMARIES_MIN_DELEGATOR_REWARD_DESC = 'INDEXER_APY_SUMMARIES_MIN_DELEGATOR_REWARD_DESC',
  INDEXER_APY_SUMMARIES_MIN_ERA_IDX_ASC = 'INDEXER_APY_SUMMARIES_MIN_ERA_IDX_ASC',
  INDEXER_APY_SUMMARIES_MIN_ERA_IDX_DESC = 'INDEXER_APY_SUMMARIES_MIN_ERA_IDX_DESC',
  INDEXER_APY_SUMMARIES_MIN_ID_ASC = 'INDEXER_APY_SUMMARIES_MIN_ID_ASC',
  INDEXER_APY_SUMMARIES_MIN_ID_DESC = 'INDEXER_APY_SUMMARIES_MIN_ID_DESC',
  INDEXER_APY_SUMMARIES_MIN_INDEXER_APY_ASC = 'INDEXER_APY_SUMMARIES_MIN_INDEXER_APY_ASC',
  INDEXER_APY_SUMMARIES_MIN_INDEXER_APY_DESC = 'INDEXER_APY_SUMMARIES_MIN_INDEXER_APY_DESC',
  INDEXER_APY_SUMMARIES_MIN_INDEXER_ID_ASC = 'INDEXER_APY_SUMMARIES_MIN_INDEXER_ID_ASC',
  INDEXER_APY_SUMMARIES_MIN_INDEXER_ID_DESC = 'INDEXER_APY_SUMMARIES_MIN_INDEXER_ID_DESC',
  INDEXER_APY_SUMMARIES_MIN_INDEXER_REWARD_ASC = 'INDEXER_APY_SUMMARIES_MIN_INDEXER_REWARD_ASC',
  INDEXER_APY_SUMMARIES_MIN_INDEXER_REWARD_DESC = 'INDEXER_APY_SUMMARIES_MIN_INDEXER_REWARD_DESC',
  INDEXER_APY_SUMMARIES_MIN_UPDATE_AT_ASC = 'INDEXER_APY_SUMMARIES_MIN_UPDATE_AT_ASC',
  INDEXER_APY_SUMMARIES_MIN_UPDATE_AT_DESC = 'INDEXER_APY_SUMMARIES_MIN_UPDATE_AT_DESC',
  INDEXER_APY_SUMMARIES_STDDEV_POPULATION_BLOCK_RANGE_ASC = 'INDEXER_APY_SUMMARIES_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  INDEXER_APY_SUMMARIES_STDDEV_POPULATION_BLOCK_RANGE_DESC = 'INDEXER_APY_SUMMARIES_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  INDEXER_APY_SUMMARIES_STDDEV_POPULATION_CREATE_AT_ASC = 'INDEXER_APY_SUMMARIES_STDDEV_POPULATION_CREATE_AT_ASC',
  INDEXER_APY_SUMMARIES_STDDEV_POPULATION_CREATE_AT_DESC = 'INDEXER_APY_SUMMARIES_STDDEV_POPULATION_CREATE_AT_DESC',
  INDEXER_APY_SUMMARIES_STDDEV_POPULATION_DELEGATOR_APY_ASC = 'INDEXER_APY_SUMMARIES_STDDEV_POPULATION_DELEGATOR_APY_ASC',
  INDEXER_APY_SUMMARIES_STDDEV_POPULATION_DELEGATOR_APY_DESC = 'INDEXER_APY_SUMMARIES_STDDEV_POPULATION_DELEGATOR_APY_DESC',
  INDEXER_APY_SUMMARIES_STDDEV_POPULATION_DELEGATOR_REWARD_ASC = 'INDEXER_APY_SUMMARIES_STDDEV_POPULATION_DELEGATOR_REWARD_ASC',
  INDEXER_APY_SUMMARIES_STDDEV_POPULATION_DELEGATOR_REWARD_DESC = 'INDEXER_APY_SUMMARIES_STDDEV_POPULATION_DELEGATOR_REWARD_DESC',
  INDEXER_APY_SUMMARIES_STDDEV_POPULATION_ERA_IDX_ASC = 'INDEXER_APY_SUMMARIES_STDDEV_POPULATION_ERA_IDX_ASC',
  INDEXER_APY_SUMMARIES_STDDEV_POPULATION_ERA_IDX_DESC = 'INDEXER_APY_SUMMARIES_STDDEV_POPULATION_ERA_IDX_DESC',
  INDEXER_APY_SUMMARIES_STDDEV_POPULATION_ID_ASC = 'INDEXER_APY_SUMMARIES_STDDEV_POPULATION_ID_ASC',
  INDEXER_APY_SUMMARIES_STDDEV_POPULATION_ID_DESC = 'INDEXER_APY_SUMMARIES_STDDEV_POPULATION_ID_DESC',
  INDEXER_APY_SUMMARIES_STDDEV_POPULATION_INDEXER_APY_ASC = 'INDEXER_APY_SUMMARIES_STDDEV_POPULATION_INDEXER_APY_ASC',
  INDEXER_APY_SUMMARIES_STDDEV_POPULATION_INDEXER_APY_DESC = 'INDEXER_APY_SUMMARIES_STDDEV_POPULATION_INDEXER_APY_DESC',
  INDEXER_APY_SUMMARIES_STDDEV_POPULATION_INDEXER_ID_ASC = 'INDEXER_APY_SUMMARIES_STDDEV_POPULATION_INDEXER_ID_ASC',
  INDEXER_APY_SUMMARIES_STDDEV_POPULATION_INDEXER_ID_DESC = 'INDEXER_APY_SUMMARIES_STDDEV_POPULATION_INDEXER_ID_DESC',
  INDEXER_APY_SUMMARIES_STDDEV_POPULATION_INDEXER_REWARD_ASC = 'INDEXER_APY_SUMMARIES_STDDEV_POPULATION_INDEXER_REWARD_ASC',
  INDEXER_APY_SUMMARIES_STDDEV_POPULATION_INDEXER_REWARD_DESC = 'INDEXER_APY_SUMMARIES_STDDEV_POPULATION_INDEXER_REWARD_DESC',
  INDEXER_APY_SUMMARIES_STDDEV_POPULATION_UPDATE_AT_ASC = 'INDEXER_APY_SUMMARIES_STDDEV_POPULATION_UPDATE_AT_ASC',
  INDEXER_APY_SUMMARIES_STDDEV_POPULATION_UPDATE_AT_DESC = 'INDEXER_APY_SUMMARIES_STDDEV_POPULATION_UPDATE_AT_DESC',
  INDEXER_APY_SUMMARIES_STDDEV_SAMPLE_BLOCK_RANGE_ASC = 'INDEXER_APY_SUMMARIES_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  INDEXER_APY_SUMMARIES_STDDEV_SAMPLE_BLOCK_RANGE_DESC = 'INDEXER_APY_SUMMARIES_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  INDEXER_APY_SUMMARIES_STDDEV_SAMPLE_CREATE_AT_ASC = 'INDEXER_APY_SUMMARIES_STDDEV_SAMPLE_CREATE_AT_ASC',
  INDEXER_APY_SUMMARIES_STDDEV_SAMPLE_CREATE_AT_DESC = 'INDEXER_APY_SUMMARIES_STDDEV_SAMPLE_CREATE_AT_DESC',
  INDEXER_APY_SUMMARIES_STDDEV_SAMPLE_DELEGATOR_APY_ASC = 'INDEXER_APY_SUMMARIES_STDDEV_SAMPLE_DELEGATOR_APY_ASC',
  INDEXER_APY_SUMMARIES_STDDEV_SAMPLE_DELEGATOR_APY_DESC = 'INDEXER_APY_SUMMARIES_STDDEV_SAMPLE_DELEGATOR_APY_DESC',
  INDEXER_APY_SUMMARIES_STDDEV_SAMPLE_DELEGATOR_REWARD_ASC = 'INDEXER_APY_SUMMARIES_STDDEV_SAMPLE_DELEGATOR_REWARD_ASC',
  INDEXER_APY_SUMMARIES_STDDEV_SAMPLE_DELEGATOR_REWARD_DESC = 'INDEXER_APY_SUMMARIES_STDDEV_SAMPLE_DELEGATOR_REWARD_DESC',
  INDEXER_APY_SUMMARIES_STDDEV_SAMPLE_ERA_IDX_ASC = 'INDEXER_APY_SUMMARIES_STDDEV_SAMPLE_ERA_IDX_ASC',
  INDEXER_APY_SUMMARIES_STDDEV_SAMPLE_ERA_IDX_DESC = 'INDEXER_APY_SUMMARIES_STDDEV_SAMPLE_ERA_IDX_DESC',
  INDEXER_APY_SUMMARIES_STDDEV_SAMPLE_ID_ASC = 'INDEXER_APY_SUMMARIES_STDDEV_SAMPLE_ID_ASC',
  INDEXER_APY_SUMMARIES_STDDEV_SAMPLE_ID_DESC = 'INDEXER_APY_SUMMARIES_STDDEV_SAMPLE_ID_DESC',
  INDEXER_APY_SUMMARIES_STDDEV_SAMPLE_INDEXER_APY_ASC = 'INDEXER_APY_SUMMARIES_STDDEV_SAMPLE_INDEXER_APY_ASC',
  INDEXER_APY_SUMMARIES_STDDEV_SAMPLE_INDEXER_APY_DESC = 'INDEXER_APY_SUMMARIES_STDDEV_SAMPLE_INDEXER_APY_DESC',
  INDEXER_APY_SUMMARIES_STDDEV_SAMPLE_INDEXER_ID_ASC = 'INDEXER_APY_SUMMARIES_STDDEV_SAMPLE_INDEXER_ID_ASC',
  INDEXER_APY_SUMMARIES_STDDEV_SAMPLE_INDEXER_ID_DESC = 'INDEXER_APY_SUMMARIES_STDDEV_SAMPLE_INDEXER_ID_DESC',
  INDEXER_APY_SUMMARIES_STDDEV_SAMPLE_INDEXER_REWARD_ASC = 'INDEXER_APY_SUMMARIES_STDDEV_SAMPLE_INDEXER_REWARD_ASC',
  INDEXER_APY_SUMMARIES_STDDEV_SAMPLE_INDEXER_REWARD_DESC = 'INDEXER_APY_SUMMARIES_STDDEV_SAMPLE_INDEXER_REWARD_DESC',
  INDEXER_APY_SUMMARIES_STDDEV_SAMPLE_UPDATE_AT_ASC = 'INDEXER_APY_SUMMARIES_STDDEV_SAMPLE_UPDATE_AT_ASC',
  INDEXER_APY_SUMMARIES_STDDEV_SAMPLE_UPDATE_AT_DESC = 'INDEXER_APY_SUMMARIES_STDDEV_SAMPLE_UPDATE_AT_DESC',
  INDEXER_APY_SUMMARIES_SUM_BLOCK_RANGE_ASC = 'INDEXER_APY_SUMMARIES_SUM_BLOCK_RANGE_ASC',
  INDEXER_APY_SUMMARIES_SUM_BLOCK_RANGE_DESC = 'INDEXER_APY_SUMMARIES_SUM_BLOCK_RANGE_DESC',
  INDEXER_APY_SUMMARIES_SUM_CREATE_AT_ASC = 'INDEXER_APY_SUMMARIES_SUM_CREATE_AT_ASC',
  INDEXER_APY_SUMMARIES_SUM_CREATE_AT_DESC = 'INDEXER_APY_SUMMARIES_SUM_CREATE_AT_DESC',
  INDEXER_APY_SUMMARIES_SUM_DELEGATOR_APY_ASC = 'INDEXER_APY_SUMMARIES_SUM_DELEGATOR_APY_ASC',
  INDEXER_APY_SUMMARIES_SUM_DELEGATOR_APY_DESC = 'INDEXER_APY_SUMMARIES_SUM_DELEGATOR_APY_DESC',
  INDEXER_APY_SUMMARIES_SUM_DELEGATOR_REWARD_ASC = 'INDEXER_APY_SUMMARIES_SUM_DELEGATOR_REWARD_ASC',
  INDEXER_APY_SUMMARIES_SUM_DELEGATOR_REWARD_DESC = 'INDEXER_APY_SUMMARIES_SUM_DELEGATOR_REWARD_DESC',
  INDEXER_APY_SUMMARIES_SUM_ERA_IDX_ASC = 'INDEXER_APY_SUMMARIES_SUM_ERA_IDX_ASC',
  INDEXER_APY_SUMMARIES_SUM_ERA_IDX_DESC = 'INDEXER_APY_SUMMARIES_SUM_ERA_IDX_DESC',
  INDEXER_APY_SUMMARIES_SUM_ID_ASC = 'INDEXER_APY_SUMMARIES_SUM_ID_ASC',
  INDEXER_APY_SUMMARIES_SUM_ID_DESC = 'INDEXER_APY_SUMMARIES_SUM_ID_DESC',
  INDEXER_APY_SUMMARIES_SUM_INDEXER_APY_ASC = 'INDEXER_APY_SUMMARIES_SUM_INDEXER_APY_ASC',
  INDEXER_APY_SUMMARIES_SUM_INDEXER_APY_DESC = 'INDEXER_APY_SUMMARIES_SUM_INDEXER_APY_DESC',
  INDEXER_APY_SUMMARIES_SUM_INDEXER_ID_ASC = 'INDEXER_APY_SUMMARIES_SUM_INDEXER_ID_ASC',
  INDEXER_APY_SUMMARIES_SUM_INDEXER_ID_DESC = 'INDEXER_APY_SUMMARIES_SUM_INDEXER_ID_DESC',
  INDEXER_APY_SUMMARIES_SUM_INDEXER_REWARD_ASC = 'INDEXER_APY_SUMMARIES_SUM_INDEXER_REWARD_ASC',
  INDEXER_APY_SUMMARIES_SUM_INDEXER_REWARD_DESC = 'INDEXER_APY_SUMMARIES_SUM_INDEXER_REWARD_DESC',
  INDEXER_APY_SUMMARIES_SUM_UPDATE_AT_ASC = 'INDEXER_APY_SUMMARIES_SUM_UPDATE_AT_ASC',
  INDEXER_APY_SUMMARIES_SUM_UPDATE_AT_DESC = 'INDEXER_APY_SUMMARIES_SUM_UPDATE_AT_DESC',
  INDEXER_APY_SUMMARIES_VARIANCE_POPULATION_BLOCK_RANGE_ASC = 'INDEXER_APY_SUMMARIES_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  INDEXER_APY_SUMMARIES_VARIANCE_POPULATION_BLOCK_RANGE_DESC = 'INDEXER_APY_SUMMARIES_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  INDEXER_APY_SUMMARIES_VARIANCE_POPULATION_CREATE_AT_ASC = 'INDEXER_APY_SUMMARIES_VARIANCE_POPULATION_CREATE_AT_ASC',
  INDEXER_APY_SUMMARIES_VARIANCE_POPULATION_CREATE_AT_DESC = 'INDEXER_APY_SUMMARIES_VARIANCE_POPULATION_CREATE_AT_DESC',
  INDEXER_APY_SUMMARIES_VARIANCE_POPULATION_DELEGATOR_APY_ASC = 'INDEXER_APY_SUMMARIES_VARIANCE_POPULATION_DELEGATOR_APY_ASC',
  INDEXER_APY_SUMMARIES_VARIANCE_POPULATION_DELEGATOR_APY_DESC = 'INDEXER_APY_SUMMARIES_VARIANCE_POPULATION_DELEGATOR_APY_DESC',
  INDEXER_APY_SUMMARIES_VARIANCE_POPULATION_DELEGATOR_REWARD_ASC = 'INDEXER_APY_SUMMARIES_VARIANCE_POPULATION_DELEGATOR_REWARD_ASC',
  INDEXER_APY_SUMMARIES_VARIANCE_POPULATION_DELEGATOR_REWARD_DESC = 'INDEXER_APY_SUMMARIES_VARIANCE_POPULATION_DELEGATOR_REWARD_DESC',
  INDEXER_APY_SUMMARIES_VARIANCE_POPULATION_ERA_IDX_ASC = 'INDEXER_APY_SUMMARIES_VARIANCE_POPULATION_ERA_IDX_ASC',
  INDEXER_APY_SUMMARIES_VARIANCE_POPULATION_ERA_IDX_DESC = 'INDEXER_APY_SUMMARIES_VARIANCE_POPULATION_ERA_IDX_DESC',
  INDEXER_APY_SUMMARIES_VARIANCE_POPULATION_ID_ASC = 'INDEXER_APY_SUMMARIES_VARIANCE_POPULATION_ID_ASC',
  INDEXER_APY_SUMMARIES_VARIANCE_POPULATION_ID_DESC = 'INDEXER_APY_SUMMARIES_VARIANCE_POPULATION_ID_DESC',
  INDEXER_APY_SUMMARIES_VARIANCE_POPULATION_INDEXER_APY_ASC = 'INDEXER_APY_SUMMARIES_VARIANCE_POPULATION_INDEXER_APY_ASC',
  INDEXER_APY_SUMMARIES_VARIANCE_POPULATION_INDEXER_APY_DESC = 'INDEXER_APY_SUMMARIES_VARIANCE_POPULATION_INDEXER_APY_DESC',
  INDEXER_APY_SUMMARIES_VARIANCE_POPULATION_INDEXER_ID_ASC = 'INDEXER_APY_SUMMARIES_VARIANCE_POPULATION_INDEXER_ID_ASC',
  INDEXER_APY_SUMMARIES_VARIANCE_POPULATION_INDEXER_ID_DESC = 'INDEXER_APY_SUMMARIES_VARIANCE_POPULATION_INDEXER_ID_DESC',
  INDEXER_APY_SUMMARIES_VARIANCE_POPULATION_INDEXER_REWARD_ASC = 'INDEXER_APY_SUMMARIES_VARIANCE_POPULATION_INDEXER_REWARD_ASC',
  INDEXER_APY_SUMMARIES_VARIANCE_POPULATION_INDEXER_REWARD_DESC = 'INDEXER_APY_SUMMARIES_VARIANCE_POPULATION_INDEXER_REWARD_DESC',
  INDEXER_APY_SUMMARIES_VARIANCE_POPULATION_UPDATE_AT_ASC = 'INDEXER_APY_SUMMARIES_VARIANCE_POPULATION_UPDATE_AT_ASC',
  INDEXER_APY_SUMMARIES_VARIANCE_POPULATION_UPDATE_AT_DESC = 'INDEXER_APY_SUMMARIES_VARIANCE_POPULATION_UPDATE_AT_DESC',
  INDEXER_APY_SUMMARIES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC = 'INDEXER_APY_SUMMARIES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  INDEXER_APY_SUMMARIES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC = 'INDEXER_APY_SUMMARIES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  INDEXER_APY_SUMMARIES_VARIANCE_SAMPLE_CREATE_AT_ASC = 'INDEXER_APY_SUMMARIES_VARIANCE_SAMPLE_CREATE_AT_ASC',
  INDEXER_APY_SUMMARIES_VARIANCE_SAMPLE_CREATE_AT_DESC = 'INDEXER_APY_SUMMARIES_VARIANCE_SAMPLE_CREATE_AT_DESC',
  INDEXER_APY_SUMMARIES_VARIANCE_SAMPLE_DELEGATOR_APY_ASC = 'INDEXER_APY_SUMMARIES_VARIANCE_SAMPLE_DELEGATOR_APY_ASC',
  INDEXER_APY_SUMMARIES_VARIANCE_SAMPLE_DELEGATOR_APY_DESC = 'INDEXER_APY_SUMMARIES_VARIANCE_SAMPLE_DELEGATOR_APY_DESC',
  INDEXER_APY_SUMMARIES_VARIANCE_SAMPLE_DELEGATOR_REWARD_ASC = 'INDEXER_APY_SUMMARIES_VARIANCE_SAMPLE_DELEGATOR_REWARD_ASC',
  INDEXER_APY_SUMMARIES_VARIANCE_SAMPLE_DELEGATOR_REWARD_DESC = 'INDEXER_APY_SUMMARIES_VARIANCE_SAMPLE_DELEGATOR_REWARD_DESC',
  INDEXER_APY_SUMMARIES_VARIANCE_SAMPLE_ERA_IDX_ASC = 'INDEXER_APY_SUMMARIES_VARIANCE_SAMPLE_ERA_IDX_ASC',
  INDEXER_APY_SUMMARIES_VARIANCE_SAMPLE_ERA_IDX_DESC = 'INDEXER_APY_SUMMARIES_VARIANCE_SAMPLE_ERA_IDX_DESC',
  INDEXER_APY_SUMMARIES_VARIANCE_SAMPLE_ID_ASC = 'INDEXER_APY_SUMMARIES_VARIANCE_SAMPLE_ID_ASC',
  INDEXER_APY_SUMMARIES_VARIANCE_SAMPLE_ID_DESC = 'INDEXER_APY_SUMMARIES_VARIANCE_SAMPLE_ID_DESC',
  INDEXER_APY_SUMMARIES_VARIANCE_SAMPLE_INDEXER_APY_ASC = 'INDEXER_APY_SUMMARIES_VARIANCE_SAMPLE_INDEXER_APY_ASC',
  INDEXER_APY_SUMMARIES_VARIANCE_SAMPLE_INDEXER_APY_DESC = 'INDEXER_APY_SUMMARIES_VARIANCE_SAMPLE_INDEXER_APY_DESC',
  INDEXER_APY_SUMMARIES_VARIANCE_SAMPLE_INDEXER_ID_ASC = 'INDEXER_APY_SUMMARIES_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  INDEXER_APY_SUMMARIES_VARIANCE_SAMPLE_INDEXER_ID_DESC = 'INDEXER_APY_SUMMARIES_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  INDEXER_APY_SUMMARIES_VARIANCE_SAMPLE_INDEXER_REWARD_ASC = 'INDEXER_APY_SUMMARIES_VARIANCE_SAMPLE_INDEXER_REWARD_ASC',
  INDEXER_APY_SUMMARIES_VARIANCE_SAMPLE_INDEXER_REWARD_DESC = 'INDEXER_APY_SUMMARIES_VARIANCE_SAMPLE_INDEXER_REWARD_DESC',
  INDEXER_APY_SUMMARIES_VARIANCE_SAMPLE_UPDATE_AT_ASC = 'INDEXER_APY_SUMMARIES_VARIANCE_SAMPLE_UPDATE_AT_ASC',
  INDEXER_APY_SUMMARIES_VARIANCE_SAMPLE_UPDATE_AT_DESC = 'INDEXER_APY_SUMMARIES_VARIANCE_SAMPLE_UPDATE_AT_DESC',
  INDEXER_COMMISSION_RATES_AVERAGE_BLOCK_RANGE_ASC = 'INDEXER_COMMISSION_RATES_AVERAGE_BLOCK_RANGE_ASC',
  INDEXER_COMMISSION_RATES_AVERAGE_BLOCK_RANGE_DESC = 'INDEXER_COMMISSION_RATES_AVERAGE_BLOCK_RANGE_DESC',
  INDEXER_COMMISSION_RATES_AVERAGE_COMMISSION_RATE_ASC = 'INDEXER_COMMISSION_RATES_AVERAGE_COMMISSION_RATE_ASC',
  INDEXER_COMMISSION_RATES_AVERAGE_COMMISSION_RATE_DESC = 'INDEXER_COMMISSION_RATES_AVERAGE_COMMISSION_RATE_DESC',
  INDEXER_COMMISSION_RATES_AVERAGE_ERA_IDX_ASC = 'INDEXER_COMMISSION_RATES_AVERAGE_ERA_IDX_ASC',
  INDEXER_COMMISSION_RATES_AVERAGE_ERA_IDX_DESC = 'INDEXER_COMMISSION_RATES_AVERAGE_ERA_IDX_DESC',
  INDEXER_COMMISSION_RATES_AVERAGE_ERA_ID_ASC = 'INDEXER_COMMISSION_RATES_AVERAGE_ERA_ID_ASC',
  INDEXER_COMMISSION_RATES_AVERAGE_ERA_ID_DESC = 'INDEXER_COMMISSION_RATES_AVERAGE_ERA_ID_DESC',
  INDEXER_COMMISSION_RATES_AVERAGE_ID_ASC = 'INDEXER_COMMISSION_RATES_AVERAGE_ID_ASC',
  INDEXER_COMMISSION_RATES_AVERAGE_ID_DESC = 'INDEXER_COMMISSION_RATES_AVERAGE_ID_DESC',
  INDEXER_COMMISSION_RATES_AVERAGE_INDEXER_ID_ASC = 'INDEXER_COMMISSION_RATES_AVERAGE_INDEXER_ID_ASC',
  INDEXER_COMMISSION_RATES_AVERAGE_INDEXER_ID_DESC = 'INDEXER_COMMISSION_RATES_AVERAGE_INDEXER_ID_DESC',
  INDEXER_COMMISSION_RATES_BY_INDEXER_ID__COUNT_ASC = 'INDEXER_COMMISSION_RATES_BY_INDEXER_ID__COUNT_ASC',
  INDEXER_COMMISSION_RATES_BY_INDEXER_ID__COUNT_DESC = 'INDEXER_COMMISSION_RATES_BY_INDEXER_ID__COUNT_DESC',
  INDEXER_COMMISSION_RATES_COUNT_ASC = 'INDEXER_COMMISSION_RATES_COUNT_ASC',
  INDEXER_COMMISSION_RATES_COUNT_DESC = 'INDEXER_COMMISSION_RATES_COUNT_DESC',
  INDEXER_COMMISSION_RATES_DISTINCT_COUNT_BLOCK_RANGE_ASC = 'INDEXER_COMMISSION_RATES_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  INDEXER_COMMISSION_RATES_DISTINCT_COUNT_BLOCK_RANGE_DESC = 'INDEXER_COMMISSION_RATES_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  INDEXER_COMMISSION_RATES_DISTINCT_COUNT_COMMISSION_RATE_ASC = 'INDEXER_COMMISSION_RATES_DISTINCT_COUNT_COMMISSION_RATE_ASC',
  INDEXER_COMMISSION_RATES_DISTINCT_COUNT_COMMISSION_RATE_DESC = 'INDEXER_COMMISSION_RATES_DISTINCT_COUNT_COMMISSION_RATE_DESC',
  INDEXER_COMMISSION_RATES_DISTINCT_COUNT_ERA_IDX_ASC = 'INDEXER_COMMISSION_RATES_DISTINCT_COUNT_ERA_IDX_ASC',
  INDEXER_COMMISSION_RATES_DISTINCT_COUNT_ERA_IDX_DESC = 'INDEXER_COMMISSION_RATES_DISTINCT_COUNT_ERA_IDX_DESC',
  INDEXER_COMMISSION_RATES_DISTINCT_COUNT_ERA_ID_ASC = 'INDEXER_COMMISSION_RATES_DISTINCT_COUNT_ERA_ID_ASC',
  INDEXER_COMMISSION_RATES_DISTINCT_COUNT_ERA_ID_DESC = 'INDEXER_COMMISSION_RATES_DISTINCT_COUNT_ERA_ID_DESC',
  INDEXER_COMMISSION_RATES_DISTINCT_COUNT_ID_ASC = 'INDEXER_COMMISSION_RATES_DISTINCT_COUNT_ID_ASC',
  INDEXER_COMMISSION_RATES_DISTINCT_COUNT_ID_DESC = 'INDEXER_COMMISSION_RATES_DISTINCT_COUNT_ID_DESC',
  INDEXER_COMMISSION_RATES_DISTINCT_COUNT_INDEXER_ID_ASC = 'INDEXER_COMMISSION_RATES_DISTINCT_COUNT_INDEXER_ID_ASC',
  INDEXER_COMMISSION_RATES_DISTINCT_COUNT_INDEXER_ID_DESC = 'INDEXER_COMMISSION_RATES_DISTINCT_COUNT_INDEXER_ID_DESC',
  INDEXER_COMMISSION_RATES_MAX_BLOCK_RANGE_ASC = 'INDEXER_COMMISSION_RATES_MAX_BLOCK_RANGE_ASC',
  INDEXER_COMMISSION_RATES_MAX_BLOCK_RANGE_DESC = 'INDEXER_COMMISSION_RATES_MAX_BLOCK_RANGE_DESC',
  INDEXER_COMMISSION_RATES_MAX_COMMISSION_RATE_ASC = 'INDEXER_COMMISSION_RATES_MAX_COMMISSION_RATE_ASC',
  INDEXER_COMMISSION_RATES_MAX_COMMISSION_RATE_DESC = 'INDEXER_COMMISSION_RATES_MAX_COMMISSION_RATE_DESC',
  INDEXER_COMMISSION_RATES_MAX_ERA_IDX_ASC = 'INDEXER_COMMISSION_RATES_MAX_ERA_IDX_ASC',
  INDEXER_COMMISSION_RATES_MAX_ERA_IDX_DESC = 'INDEXER_COMMISSION_RATES_MAX_ERA_IDX_DESC',
  INDEXER_COMMISSION_RATES_MAX_ERA_ID_ASC = 'INDEXER_COMMISSION_RATES_MAX_ERA_ID_ASC',
  INDEXER_COMMISSION_RATES_MAX_ERA_ID_DESC = 'INDEXER_COMMISSION_RATES_MAX_ERA_ID_DESC',
  INDEXER_COMMISSION_RATES_MAX_ID_ASC = 'INDEXER_COMMISSION_RATES_MAX_ID_ASC',
  INDEXER_COMMISSION_RATES_MAX_ID_DESC = 'INDEXER_COMMISSION_RATES_MAX_ID_DESC',
  INDEXER_COMMISSION_RATES_MAX_INDEXER_ID_ASC = 'INDEXER_COMMISSION_RATES_MAX_INDEXER_ID_ASC',
  INDEXER_COMMISSION_RATES_MAX_INDEXER_ID_DESC = 'INDEXER_COMMISSION_RATES_MAX_INDEXER_ID_DESC',
  INDEXER_COMMISSION_RATES_MIN_BLOCK_RANGE_ASC = 'INDEXER_COMMISSION_RATES_MIN_BLOCK_RANGE_ASC',
  INDEXER_COMMISSION_RATES_MIN_BLOCK_RANGE_DESC = 'INDEXER_COMMISSION_RATES_MIN_BLOCK_RANGE_DESC',
  INDEXER_COMMISSION_RATES_MIN_COMMISSION_RATE_ASC = 'INDEXER_COMMISSION_RATES_MIN_COMMISSION_RATE_ASC',
  INDEXER_COMMISSION_RATES_MIN_COMMISSION_RATE_DESC = 'INDEXER_COMMISSION_RATES_MIN_COMMISSION_RATE_DESC',
  INDEXER_COMMISSION_RATES_MIN_ERA_IDX_ASC = 'INDEXER_COMMISSION_RATES_MIN_ERA_IDX_ASC',
  INDEXER_COMMISSION_RATES_MIN_ERA_IDX_DESC = 'INDEXER_COMMISSION_RATES_MIN_ERA_IDX_DESC',
  INDEXER_COMMISSION_RATES_MIN_ERA_ID_ASC = 'INDEXER_COMMISSION_RATES_MIN_ERA_ID_ASC',
  INDEXER_COMMISSION_RATES_MIN_ERA_ID_DESC = 'INDEXER_COMMISSION_RATES_MIN_ERA_ID_DESC',
  INDEXER_COMMISSION_RATES_MIN_ID_ASC = 'INDEXER_COMMISSION_RATES_MIN_ID_ASC',
  INDEXER_COMMISSION_RATES_MIN_ID_DESC = 'INDEXER_COMMISSION_RATES_MIN_ID_DESC',
  INDEXER_COMMISSION_RATES_MIN_INDEXER_ID_ASC = 'INDEXER_COMMISSION_RATES_MIN_INDEXER_ID_ASC',
  INDEXER_COMMISSION_RATES_MIN_INDEXER_ID_DESC = 'INDEXER_COMMISSION_RATES_MIN_INDEXER_ID_DESC',
  INDEXER_COMMISSION_RATES_STDDEV_POPULATION_BLOCK_RANGE_ASC = 'INDEXER_COMMISSION_RATES_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  INDEXER_COMMISSION_RATES_STDDEV_POPULATION_BLOCK_RANGE_DESC = 'INDEXER_COMMISSION_RATES_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  INDEXER_COMMISSION_RATES_STDDEV_POPULATION_COMMISSION_RATE_ASC = 'INDEXER_COMMISSION_RATES_STDDEV_POPULATION_COMMISSION_RATE_ASC',
  INDEXER_COMMISSION_RATES_STDDEV_POPULATION_COMMISSION_RATE_DESC = 'INDEXER_COMMISSION_RATES_STDDEV_POPULATION_COMMISSION_RATE_DESC',
  INDEXER_COMMISSION_RATES_STDDEV_POPULATION_ERA_IDX_ASC = 'INDEXER_COMMISSION_RATES_STDDEV_POPULATION_ERA_IDX_ASC',
  INDEXER_COMMISSION_RATES_STDDEV_POPULATION_ERA_IDX_DESC = 'INDEXER_COMMISSION_RATES_STDDEV_POPULATION_ERA_IDX_DESC',
  INDEXER_COMMISSION_RATES_STDDEV_POPULATION_ERA_ID_ASC = 'INDEXER_COMMISSION_RATES_STDDEV_POPULATION_ERA_ID_ASC',
  INDEXER_COMMISSION_RATES_STDDEV_POPULATION_ERA_ID_DESC = 'INDEXER_COMMISSION_RATES_STDDEV_POPULATION_ERA_ID_DESC',
  INDEXER_COMMISSION_RATES_STDDEV_POPULATION_ID_ASC = 'INDEXER_COMMISSION_RATES_STDDEV_POPULATION_ID_ASC',
  INDEXER_COMMISSION_RATES_STDDEV_POPULATION_ID_DESC = 'INDEXER_COMMISSION_RATES_STDDEV_POPULATION_ID_DESC',
  INDEXER_COMMISSION_RATES_STDDEV_POPULATION_INDEXER_ID_ASC = 'INDEXER_COMMISSION_RATES_STDDEV_POPULATION_INDEXER_ID_ASC',
  INDEXER_COMMISSION_RATES_STDDEV_POPULATION_INDEXER_ID_DESC = 'INDEXER_COMMISSION_RATES_STDDEV_POPULATION_INDEXER_ID_DESC',
  INDEXER_COMMISSION_RATES_STDDEV_SAMPLE_BLOCK_RANGE_ASC = 'INDEXER_COMMISSION_RATES_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  INDEXER_COMMISSION_RATES_STDDEV_SAMPLE_BLOCK_RANGE_DESC = 'INDEXER_COMMISSION_RATES_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  INDEXER_COMMISSION_RATES_STDDEV_SAMPLE_COMMISSION_RATE_ASC = 'INDEXER_COMMISSION_RATES_STDDEV_SAMPLE_COMMISSION_RATE_ASC',
  INDEXER_COMMISSION_RATES_STDDEV_SAMPLE_COMMISSION_RATE_DESC = 'INDEXER_COMMISSION_RATES_STDDEV_SAMPLE_COMMISSION_RATE_DESC',
  INDEXER_COMMISSION_RATES_STDDEV_SAMPLE_ERA_IDX_ASC = 'INDEXER_COMMISSION_RATES_STDDEV_SAMPLE_ERA_IDX_ASC',
  INDEXER_COMMISSION_RATES_STDDEV_SAMPLE_ERA_IDX_DESC = 'INDEXER_COMMISSION_RATES_STDDEV_SAMPLE_ERA_IDX_DESC',
  INDEXER_COMMISSION_RATES_STDDEV_SAMPLE_ERA_ID_ASC = 'INDEXER_COMMISSION_RATES_STDDEV_SAMPLE_ERA_ID_ASC',
  INDEXER_COMMISSION_RATES_STDDEV_SAMPLE_ERA_ID_DESC = 'INDEXER_COMMISSION_RATES_STDDEV_SAMPLE_ERA_ID_DESC',
  INDEXER_COMMISSION_RATES_STDDEV_SAMPLE_ID_ASC = 'INDEXER_COMMISSION_RATES_STDDEV_SAMPLE_ID_ASC',
  INDEXER_COMMISSION_RATES_STDDEV_SAMPLE_ID_DESC = 'INDEXER_COMMISSION_RATES_STDDEV_SAMPLE_ID_DESC',
  INDEXER_COMMISSION_RATES_STDDEV_SAMPLE_INDEXER_ID_ASC = 'INDEXER_COMMISSION_RATES_STDDEV_SAMPLE_INDEXER_ID_ASC',
  INDEXER_COMMISSION_RATES_STDDEV_SAMPLE_INDEXER_ID_DESC = 'INDEXER_COMMISSION_RATES_STDDEV_SAMPLE_INDEXER_ID_DESC',
  INDEXER_COMMISSION_RATES_SUM_BLOCK_RANGE_ASC = 'INDEXER_COMMISSION_RATES_SUM_BLOCK_RANGE_ASC',
  INDEXER_COMMISSION_RATES_SUM_BLOCK_RANGE_DESC = 'INDEXER_COMMISSION_RATES_SUM_BLOCK_RANGE_DESC',
  INDEXER_COMMISSION_RATES_SUM_COMMISSION_RATE_ASC = 'INDEXER_COMMISSION_RATES_SUM_COMMISSION_RATE_ASC',
  INDEXER_COMMISSION_RATES_SUM_COMMISSION_RATE_DESC = 'INDEXER_COMMISSION_RATES_SUM_COMMISSION_RATE_DESC',
  INDEXER_COMMISSION_RATES_SUM_ERA_IDX_ASC = 'INDEXER_COMMISSION_RATES_SUM_ERA_IDX_ASC',
  INDEXER_COMMISSION_RATES_SUM_ERA_IDX_DESC = 'INDEXER_COMMISSION_RATES_SUM_ERA_IDX_DESC',
  INDEXER_COMMISSION_RATES_SUM_ERA_ID_ASC = 'INDEXER_COMMISSION_RATES_SUM_ERA_ID_ASC',
  INDEXER_COMMISSION_RATES_SUM_ERA_ID_DESC = 'INDEXER_COMMISSION_RATES_SUM_ERA_ID_DESC',
  INDEXER_COMMISSION_RATES_SUM_ID_ASC = 'INDEXER_COMMISSION_RATES_SUM_ID_ASC',
  INDEXER_COMMISSION_RATES_SUM_ID_DESC = 'INDEXER_COMMISSION_RATES_SUM_ID_DESC',
  INDEXER_COMMISSION_RATES_SUM_INDEXER_ID_ASC = 'INDEXER_COMMISSION_RATES_SUM_INDEXER_ID_ASC',
  INDEXER_COMMISSION_RATES_SUM_INDEXER_ID_DESC = 'INDEXER_COMMISSION_RATES_SUM_INDEXER_ID_DESC',
  INDEXER_COMMISSION_RATES_VARIANCE_POPULATION_BLOCK_RANGE_ASC = 'INDEXER_COMMISSION_RATES_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  INDEXER_COMMISSION_RATES_VARIANCE_POPULATION_BLOCK_RANGE_DESC = 'INDEXER_COMMISSION_RATES_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  INDEXER_COMMISSION_RATES_VARIANCE_POPULATION_COMMISSION_RATE_ASC = 'INDEXER_COMMISSION_RATES_VARIANCE_POPULATION_COMMISSION_RATE_ASC',
  INDEXER_COMMISSION_RATES_VARIANCE_POPULATION_COMMISSION_RATE_DESC = 'INDEXER_COMMISSION_RATES_VARIANCE_POPULATION_COMMISSION_RATE_DESC',
  INDEXER_COMMISSION_RATES_VARIANCE_POPULATION_ERA_IDX_ASC = 'INDEXER_COMMISSION_RATES_VARIANCE_POPULATION_ERA_IDX_ASC',
  INDEXER_COMMISSION_RATES_VARIANCE_POPULATION_ERA_IDX_DESC = 'INDEXER_COMMISSION_RATES_VARIANCE_POPULATION_ERA_IDX_DESC',
  INDEXER_COMMISSION_RATES_VARIANCE_POPULATION_ERA_ID_ASC = 'INDEXER_COMMISSION_RATES_VARIANCE_POPULATION_ERA_ID_ASC',
  INDEXER_COMMISSION_RATES_VARIANCE_POPULATION_ERA_ID_DESC = 'INDEXER_COMMISSION_RATES_VARIANCE_POPULATION_ERA_ID_DESC',
  INDEXER_COMMISSION_RATES_VARIANCE_POPULATION_ID_ASC = 'INDEXER_COMMISSION_RATES_VARIANCE_POPULATION_ID_ASC',
  INDEXER_COMMISSION_RATES_VARIANCE_POPULATION_ID_DESC = 'INDEXER_COMMISSION_RATES_VARIANCE_POPULATION_ID_DESC',
  INDEXER_COMMISSION_RATES_VARIANCE_POPULATION_INDEXER_ID_ASC = 'INDEXER_COMMISSION_RATES_VARIANCE_POPULATION_INDEXER_ID_ASC',
  INDEXER_COMMISSION_RATES_VARIANCE_POPULATION_INDEXER_ID_DESC = 'INDEXER_COMMISSION_RATES_VARIANCE_POPULATION_INDEXER_ID_DESC',
  INDEXER_COMMISSION_RATES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC = 'INDEXER_COMMISSION_RATES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  INDEXER_COMMISSION_RATES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC = 'INDEXER_COMMISSION_RATES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  INDEXER_COMMISSION_RATES_VARIANCE_SAMPLE_COMMISSION_RATE_ASC = 'INDEXER_COMMISSION_RATES_VARIANCE_SAMPLE_COMMISSION_RATE_ASC',
  INDEXER_COMMISSION_RATES_VARIANCE_SAMPLE_COMMISSION_RATE_DESC = 'INDEXER_COMMISSION_RATES_VARIANCE_SAMPLE_COMMISSION_RATE_DESC',
  INDEXER_COMMISSION_RATES_VARIANCE_SAMPLE_ERA_IDX_ASC = 'INDEXER_COMMISSION_RATES_VARIANCE_SAMPLE_ERA_IDX_ASC',
  INDEXER_COMMISSION_RATES_VARIANCE_SAMPLE_ERA_IDX_DESC = 'INDEXER_COMMISSION_RATES_VARIANCE_SAMPLE_ERA_IDX_DESC',
  INDEXER_COMMISSION_RATES_VARIANCE_SAMPLE_ERA_ID_ASC = 'INDEXER_COMMISSION_RATES_VARIANCE_SAMPLE_ERA_ID_ASC',
  INDEXER_COMMISSION_RATES_VARIANCE_SAMPLE_ERA_ID_DESC = 'INDEXER_COMMISSION_RATES_VARIANCE_SAMPLE_ERA_ID_DESC',
  INDEXER_COMMISSION_RATES_VARIANCE_SAMPLE_ID_ASC = 'INDEXER_COMMISSION_RATES_VARIANCE_SAMPLE_ID_ASC',
  INDEXER_COMMISSION_RATES_VARIANCE_SAMPLE_ID_DESC = 'INDEXER_COMMISSION_RATES_VARIANCE_SAMPLE_ID_DESC',
  INDEXER_COMMISSION_RATES_VARIANCE_SAMPLE_INDEXER_ID_ASC = 'INDEXER_COMMISSION_RATES_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  INDEXER_COMMISSION_RATES_VARIANCE_SAMPLE_INDEXER_ID_DESC = 'INDEXER_COMMISSION_RATES_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  INDEXER_DEPLOYMENTS_BY_INDEXER_ID__COUNT_ASC = 'INDEXER_DEPLOYMENTS_BY_INDEXER_ID__COUNT_ASC',
  INDEXER_DEPLOYMENTS_BY_INDEXER_ID__COUNT_DESC = 'INDEXER_DEPLOYMENTS_BY_INDEXER_ID__COUNT_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_AVERAGE_AGREEMENT_REWARDS_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_AVERAGE_AGREEMENT_REWARDS_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_AVERAGE_AGREEMENT_REWARDS_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_AVERAGE_AGREEMENT_REWARDS_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_AVERAGE_ALLOCATION_REWARDS_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_AVERAGE_ALLOCATION_REWARDS_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_AVERAGE_ALLOCATION_REWARDS_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_AVERAGE_ALLOCATION_REWARDS_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_AVERAGE_BLOCK_RANGE_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_AVERAGE_BLOCK_RANGE_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_AVERAGE_BLOCK_RANGE_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_AVERAGE_BLOCK_RANGE_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_AVERAGE_CHANGES_HEIGHT_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_AVERAGE_CHANGES_HEIGHT_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_AVERAGE_CHANGES_HEIGHT_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_AVERAGE_CHANGES_HEIGHT_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_AVERAGE_DEPLOYMENT_ID_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_AVERAGE_DEPLOYMENT_ID_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_AVERAGE_DEPLOYMENT_ID_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_AVERAGE_DEPLOYMENT_ID_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_AVERAGE_ERA_IDX_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_AVERAGE_ERA_IDX_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_AVERAGE_ERA_IDX_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_AVERAGE_ERA_IDX_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_AVERAGE_ID_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_AVERAGE_ID_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_AVERAGE_ID_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_AVERAGE_ID_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_AVERAGE_INDEXER_ID_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_AVERAGE_INDEXER_ID_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_AVERAGE_INDEXER_ID_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_AVERAGE_INDEXER_ID_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_AVERAGE_QUERY_REWARDS_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_AVERAGE_QUERY_REWARDS_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_AVERAGE_QUERY_REWARDS_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_AVERAGE_QUERY_REWARDS_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_AVERAGE_STATE_CHANNEL_REWARDS_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_AVERAGE_STATE_CHANNEL_REWARDS_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_AVERAGE_STATE_CHANNEL_REWARDS_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_AVERAGE_STATE_CHANNEL_REWARDS_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_AVERAGE_TOTAL_REWARDS_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_AVERAGE_TOTAL_REWARDS_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_AVERAGE_TOTAL_REWARDS_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_AVERAGE_TOTAL_REWARDS_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_BY_INDEXER_ID__COUNT_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_BY_INDEXER_ID__COUNT_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_BY_INDEXER_ID__COUNT_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_BY_INDEXER_ID__COUNT_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_COUNT_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_COUNT_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_COUNT_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_COUNT_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_DISTINCT_COUNT_AGREEMENT_REWARDS_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_DISTINCT_COUNT_AGREEMENT_REWARDS_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_DISTINCT_COUNT_AGREEMENT_REWARDS_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_DISTINCT_COUNT_AGREEMENT_REWARDS_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_DISTINCT_COUNT_ALLOCATION_REWARDS_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_DISTINCT_COUNT_ALLOCATION_REWARDS_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_DISTINCT_COUNT_ALLOCATION_REWARDS_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_DISTINCT_COUNT_ALLOCATION_REWARDS_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_DISTINCT_COUNT_BLOCK_RANGE_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_DISTINCT_COUNT_BLOCK_RANGE_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_DISTINCT_COUNT_CHANGES_HEIGHT_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_DISTINCT_COUNT_CHANGES_HEIGHT_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_DISTINCT_COUNT_CHANGES_HEIGHT_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_DISTINCT_COUNT_CHANGES_HEIGHT_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_DISTINCT_COUNT_DEPLOYMENT_ID_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_DISTINCT_COUNT_DEPLOYMENT_ID_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_DISTINCT_COUNT_DEPLOYMENT_ID_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_DISTINCT_COUNT_DEPLOYMENT_ID_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_DISTINCT_COUNT_ERA_IDX_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_DISTINCT_COUNT_ERA_IDX_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_DISTINCT_COUNT_ERA_IDX_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_DISTINCT_COUNT_ERA_IDX_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_DISTINCT_COUNT_ID_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_DISTINCT_COUNT_ID_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_DISTINCT_COUNT_ID_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_DISTINCT_COUNT_ID_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_DISTINCT_COUNT_INDEXER_ID_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_DISTINCT_COUNT_INDEXER_ID_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_DISTINCT_COUNT_INDEXER_ID_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_DISTINCT_COUNT_INDEXER_ID_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_DISTINCT_COUNT_QUERY_REWARDS_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_DISTINCT_COUNT_QUERY_REWARDS_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_DISTINCT_COUNT_QUERY_REWARDS_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_DISTINCT_COUNT_QUERY_REWARDS_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_DISTINCT_COUNT_STATE_CHANNEL_REWARDS_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_DISTINCT_COUNT_STATE_CHANNEL_REWARDS_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_DISTINCT_COUNT_STATE_CHANNEL_REWARDS_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_DISTINCT_COUNT_STATE_CHANNEL_REWARDS_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_DISTINCT_COUNT_TOTAL_REWARDS_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_DISTINCT_COUNT_TOTAL_REWARDS_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_DISTINCT_COUNT_TOTAL_REWARDS_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_DISTINCT_COUNT_TOTAL_REWARDS_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_MAX_AGREEMENT_REWARDS_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MAX_AGREEMENT_REWARDS_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_MAX_AGREEMENT_REWARDS_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MAX_AGREEMENT_REWARDS_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_MAX_ALLOCATION_REWARDS_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MAX_ALLOCATION_REWARDS_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_MAX_ALLOCATION_REWARDS_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MAX_ALLOCATION_REWARDS_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_MAX_BLOCK_RANGE_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MAX_BLOCK_RANGE_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_MAX_BLOCK_RANGE_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MAX_BLOCK_RANGE_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_MAX_CHANGES_HEIGHT_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MAX_CHANGES_HEIGHT_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_MAX_CHANGES_HEIGHT_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MAX_CHANGES_HEIGHT_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_MAX_DEPLOYMENT_ID_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MAX_DEPLOYMENT_ID_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_MAX_DEPLOYMENT_ID_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MAX_DEPLOYMENT_ID_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_MAX_ERA_IDX_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MAX_ERA_IDX_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_MAX_ERA_IDX_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MAX_ERA_IDX_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_MAX_ID_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MAX_ID_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_MAX_ID_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MAX_ID_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_MAX_INDEXER_ID_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MAX_INDEXER_ID_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_MAX_INDEXER_ID_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MAX_INDEXER_ID_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_MAX_QUERY_REWARDS_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MAX_QUERY_REWARDS_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_MAX_QUERY_REWARDS_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MAX_QUERY_REWARDS_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_MAX_STATE_CHANNEL_REWARDS_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MAX_STATE_CHANNEL_REWARDS_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_MAX_STATE_CHANNEL_REWARDS_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MAX_STATE_CHANNEL_REWARDS_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_MAX_TOTAL_REWARDS_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MAX_TOTAL_REWARDS_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_MAX_TOTAL_REWARDS_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MAX_TOTAL_REWARDS_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_MIN_AGREEMENT_REWARDS_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MIN_AGREEMENT_REWARDS_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_MIN_AGREEMENT_REWARDS_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MIN_AGREEMENT_REWARDS_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_MIN_ALLOCATION_REWARDS_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MIN_ALLOCATION_REWARDS_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_MIN_ALLOCATION_REWARDS_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MIN_ALLOCATION_REWARDS_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_MIN_BLOCK_RANGE_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MIN_BLOCK_RANGE_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_MIN_BLOCK_RANGE_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MIN_BLOCK_RANGE_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_MIN_CHANGES_HEIGHT_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MIN_CHANGES_HEIGHT_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_MIN_CHANGES_HEIGHT_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MIN_CHANGES_HEIGHT_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_MIN_DEPLOYMENT_ID_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MIN_DEPLOYMENT_ID_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_MIN_DEPLOYMENT_ID_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MIN_DEPLOYMENT_ID_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_MIN_ERA_IDX_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MIN_ERA_IDX_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_MIN_ERA_IDX_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MIN_ERA_IDX_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_MIN_ID_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MIN_ID_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_MIN_ID_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MIN_ID_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_MIN_INDEXER_ID_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MIN_INDEXER_ID_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_MIN_INDEXER_ID_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MIN_INDEXER_ID_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_MIN_QUERY_REWARDS_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MIN_QUERY_REWARDS_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_MIN_QUERY_REWARDS_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MIN_QUERY_REWARDS_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_MIN_STATE_CHANNEL_REWARDS_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MIN_STATE_CHANNEL_REWARDS_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_MIN_STATE_CHANNEL_REWARDS_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MIN_STATE_CHANNEL_REWARDS_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_MIN_TOTAL_REWARDS_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MIN_TOTAL_REWARDS_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_MIN_TOTAL_REWARDS_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MIN_TOTAL_REWARDS_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_POPULATION_AGREEMENT_REWARDS_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_POPULATION_AGREEMENT_REWARDS_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_POPULATION_AGREEMENT_REWARDS_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_POPULATION_AGREEMENT_REWARDS_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_POPULATION_ALLOCATION_REWARDS_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_POPULATION_ALLOCATION_REWARDS_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_POPULATION_ALLOCATION_REWARDS_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_POPULATION_ALLOCATION_REWARDS_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_POPULATION_BLOCK_RANGE_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_POPULATION_BLOCK_RANGE_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_POPULATION_CHANGES_HEIGHT_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_POPULATION_CHANGES_HEIGHT_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_POPULATION_CHANGES_HEIGHT_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_POPULATION_CHANGES_HEIGHT_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_POPULATION_DEPLOYMENT_ID_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_POPULATION_DEPLOYMENT_ID_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_POPULATION_DEPLOYMENT_ID_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_POPULATION_DEPLOYMENT_ID_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_POPULATION_ERA_IDX_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_POPULATION_ERA_IDX_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_POPULATION_ERA_IDX_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_POPULATION_ERA_IDX_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_POPULATION_ID_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_POPULATION_ID_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_POPULATION_ID_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_POPULATION_ID_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_POPULATION_INDEXER_ID_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_POPULATION_INDEXER_ID_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_POPULATION_INDEXER_ID_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_POPULATION_INDEXER_ID_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_POPULATION_QUERY_REWARDS_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_POPULATION_QUERY_REWARDS_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_POPULATION_QUERY_REWARDS_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_POPULATION_QUERY_REWARDS_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_POPULATION_STATE_CHANNEL_REWARDS_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_POPULATION_STATE_CHANNEL_REWARDS_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_POPULATION_STATE_CHANNEL_REWARDS_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_POPULATION_STATE_CHANNEL_REWARDS_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_POPULATION_TOTAL_REWARDS_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_POPULATION_TOTAL_REWARDS_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_POPULATION_TOTAL_REWARDS_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_POPULATION_TOTAL_REWARDS_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_SAMPLE_AGREEMENT_REWARDS_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_SAMPLE_AGREEMENT_REWARDS_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_SAMPLE_AGREEMENT_REWARDS_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_SAMPLE_AGREEMENT_REWARDS_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_SAMPLE_ALLOCATION_REWARDS_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_SAMPLE_ALLOCATION_REWARDS_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_SAMPLE_ALLOCATION_REWARDS_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_SAMPLE_ALLOCATION_REWARDS_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_SAMPLE_BLOCK_RANGE_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_SAMPLE_BLOCK_RANGE_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_SAMPLE_CHANGES_HEIGHT_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_SAMPLE_CHANGES_HEIGHT_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_SAMPLE_CHANGES_HEIGHT_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_SAMPLE_CHANGES_HEIGHT_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_SAMPLE_ERA_IDX_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_SAMPLE_ERA_IDX_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_SAMPLE_ERA_IDX_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_SAMPLE_ERA_IDX_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_SAMPLE_ID_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_SAMPLE_ID_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_SAMPLE_ID_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_SAMPLE_ID_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_SAMPLE_INDEXER_ID_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_SAMPLE_INDEXER_ID_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_SAMPLE_INDEXER_ID_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_SAMPLE_INDEXER_ID_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_SAMPLE_QUERY_REWARDS_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_SAMPLE_QUERY_REWARDS_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_SAMPLE_QUERY_REWARDS_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_SAMPLE_QUERY_REWARDS_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_SAMPLE_STATE_CHANNEL_REWARDS_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_SAMPLE_STATE_CHANNEL_REWARDS_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_SAMPLE_STATE_CHANNEL_REWARDS_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_SAMPLE_STATE_CHANNEL_REWARDS_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_SAMPLE_TOTAL_REWARDS_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_SAMPLE_TOTAL_REWARDS_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_SAMPLE_TOTAL_REWARDS_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_SAMPLE_TOTAL_REWARDS_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_SUM_AGREEMENT_REWARDS_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_SUM_AGREEMENT_REWARDS_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_SUM_AGREEMENT_REWARDS_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_SUM_AGREEMENT_REWARDS_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_SUM_ALLOCATION_REWARDS_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_SUM_ALLOCATION_REWARDS_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_SUM_ALLOCATION_REWARDS_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_SUM_ALLOCATION_REWARDS_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_SUM_BLOCK_RANGE_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_SUM_BLOCK_RANGE_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_SUM_BLOCK_RANGE_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_SUM_BLOCK_RANGE_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_SUM_CHANGES_HEIGHT_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_SUM_CHANGES_HEIGHT_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_SUM_CHANGES_HEIGHT_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_SUM_CHANGES_HEIGHT_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_SUM_DEPLOYMENT_ID_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_SUM_DEPLOYMENT_ID_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_SUM_DEPLOYMENT_ID_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_SUM_DEPLOYMENT_ID_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_SUM_ERA_IDX_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_SUM_ERA_IDX_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_SUM_ERA_IDX_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_SUM_ERA_IDX_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_SUM_ID_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_SUM_ID_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_SUM_ID_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_SUM_ID_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_SUM_INDEXER_ID_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_SUM_INDEXER_ID_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_SUM_INDEXER_ID_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_SUM_INDEXER_ID_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_SUM_QUERY_REWARDS_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_SUM_QUERY_REWARDS_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_SUM_QUERY_REWARDS_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_SUM_QUERY_REWARDS_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_SUM_STATE_CHANNEL_REWARDS_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_SUM_STATE_CHANNEL_REWARDS_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_SUM_STATE_CHANNEL_REWARDS_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_SUM_STATE_CHANNEL_REWARDS_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_SUM_TOTAL_REWARDS_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_SUM_TOTAL_REWARDS_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_SUM_TOTAL_REWARDS_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_SUM_TOTAL_REWARDS_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_POPULATION_AGREEMENT_REWARDS_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_POPULATION_AGREEMENT_REWARDS_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_POPULATION_AGREEMENT_REWARDS_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_POPULATION_AGREEMENT_REWARDS_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_POPULATION_ALLOCATION_REWARDS_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_POPULATION_ALLOCATION_REWARDS_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_POPULATION_ALLOCATION_REWARDS_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_POPULATION_ALLOCATION_REWARDS_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_POPULATION_BLOCK_RANGE_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_POPULATION_BLOCK_RANGE_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_POPULATION_CHANGES_HEIGHT_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_POPULATION_CHANGES_HEIGHT_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_POPULATION_CHANGES_HEIGHT_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_POPULATION_CHANGES_HEIGHT_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_POPULATION_ERA_IDX_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_POPULATION_ERA_IDX_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_POPULATION_ERA_IDX_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_POPULATION_ERA_IDX_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_POPULATION_ID_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_POPULATION_ID_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_POPULATION_ID_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_POPULATION_ID_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_POPULATION_INDEXER_ID_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_POPULATION_INDEXER_ID_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_POPULATION_INDEXER_ID_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_POPULATION_INDEXER_ID_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_POPULATION_QUERY_REWARDS_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_POPULATION_QUERY_REWARDS_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_POPULATION_QUERY_REWARDS_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_POPULATION_QUERY_REWARDS_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_POPULATION_STATE_CHANNEL_REWARDS_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_POPULATION_STATE_CHANNEL_REWARDS_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_POPULATION_STATE_CHANNEL_REWARDS_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_POPULATION_STATE_CHANNEL_REWARDS_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_POPULATION_TOTAL_REWARDS_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_POPULATION_TOTAL_REWARDS_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_POPULATION_TOTAL_REWARDS_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_POPULATION_TOTAL_REWARDS_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_SAMPLE_AGREEMENT_REWARDS_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_SAMPLE_AGREEMENT_REWARDS_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_SAMPLE_AGREEMENT_REWARDS_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_SAMPLE_AGREEMENT_REWARDS_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_SAMPLE_ALLOCATION_REWARDS_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_SAMPLE_ALLOCATION_REWARDS_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_SAMPLE_ALLOCATION_REWARDS_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_SAMPLE_ALLOCATION_REWARDS_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_SAMPLE_CHANGES_HEIGHT_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_SAMPLE_CHANGES_HEIGHT_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_SAMPLE_CHANGES_HEIGHT_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_SAMPLE_CHANGES_HEIGHT_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_SAMPLE_ERA_IDX_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_SAMPLE_ERA_IDX_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_SAMPLE_ERA_IDX_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_SAMPLE_ERA_IDX_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_SAMPLE_ID_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_SAMPLE_ID_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_SAMPLE_ID_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_SAMPLE_ID_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_SAMPLE_INDEXER_ID_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_SAMPLE_INDEXER_ID_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_SAMPLE_QUERY_REWARDS_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_SAMPLE_QUERY_REWARDS_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_SAMPLE_QUERY_REWARDS_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_SAMPLE_QUERY_REWARDS_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_SAMPLE_STATE_CHANNEL_REWARDS_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_SAMPLE_STATE_CHANNEL_REWARDS_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_SAMPLE_STATE_CHANNEL_REWARDS_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_SAMPLE_STATE_CHANNEL_REWARDS_DESC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_SAMPLE_TOTAL_REWARDS_ASC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_SAMPLE_TOTAL_REWARDS_ASC',
  INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_SAMPLE_TOTAL_REWARDS_DESC = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_SAMPLE_TOTAL_REWARDS_DESC',
  INDEXER_LABOR_HISTORIES_AVERAGE_AMOUNT_ASC = 'INDEXER_LABOR_HISTORIES_AVERAGE_AMOUNT_ASC',
  INDEXER_LABOR_HISTORIES_AVERAGE_AMOUNT_DESC = 'INDEXER_LABOR_HISTORIES_AVERAGE_AMOUNT_DESC',
  INDEXER_LABOR_HISTORIES_AVERAGE_BLOCK_RANGE_ASC = 'INDEXER_LABOR_HISTORIES_AVERAGE_BLOCK_RANGE_ASC',
  INDEXER_LABOR_HISTORIES_AVERAGE_BLOCK_RANGE_DESC = 'INDEXER_LABOR_HISTORIES_AVERAGE_BLOCK_RANGE_DESC',
  INDEXER_LABOR_HISTORIES_AVERAGE_CREATE_AT_ASC = 'INDEXER_LABOR_HISTORIES_AVERAGE_CREATE_AT_ASC',
  INDEXER_LABOR_HISTORIES_AVERAGE_CREATE_AT_DESC = 'INDEXER_LABOR_HISTORIES_AVERAGE_CREATE_AT_DESC',
  INDEXER_LABOR_HISTORIES_AVERAGE_DEPLOYMENT_ID_ASC = 'INDEXER_LABOR_HISTORIES_AVERAGE_DEPLOYMENT_ID_ASC',
  INDEXER_LABOR_HISTORIES_AVERAGE_DEPLOYMENT_ID_DESC = 'INDEXER_LABOR_HISTORIES_AVERAGE_DEPLOYMENT_ID_DESC',
  INDEXER_LABOR_HISTORIES_AVERAGE_ERA_IDX_ASC = 'INDEXER_LABOR_HISTORIES_AVERAGE_ERA_IDX_ASC',
  INDEXER_LABOR_HISTORIES_AVERAGE_ERA_IDX_DESC = 'INDEXER_LABOR_HISTORIES_AVERAGE_ERA_IDX_DESC',
  INDEXER_LABOR_HISTORIES_AVERAGE_ID_ASC = 'INDEXER_LABOR_HISTORIES_AVERAGE_ID_ASC',
  INDEXER_LABOR_HISTORIES_AVERAGE_ID_DESC = 'INDEXER_LABOR_HISTORIES_AVERAGE_ID_DESC',
  INDEXER_LABOR_HISTORIES_AVERAGE_INDEXER_ID_ASC = 'INDEXER_LABOR_HISTORIES_AVERAGE_INDEXER_ID_ASC',
  INDEXER_LABOR_HISTORIES_AVERAGE_INDEXER_ID_DESC = 'INDEXER_LABOR_HISTORIES_AVERAGE_INDEXER_ID_DESC',
  INDEXER_LABOR_HISTORIES_BY_INDEXER_ID__COUNT_ASC = 'INDEXER_LABOR_HISTORIES_BY_INDEXER_ID__COUNT_ASC',
  INDEXER_LABOR_HISTORIES_BY_INDEXER_ID__COUNT_DESC = 'INDEXER_LABOR_HISTORIES_BY_INDEXER_ID__COUNT_DESC',
  INDEXER_LABOR_HISTORIES_COUNT_ASC = 'INDEXER_LABOR_HISTORIES_COUNT_ASC',
  INDEXER_LABOR_HISTORIES_COUNT_DESC = 'INDEXER_LABOR_HISTORIES_COUNT_DESC',
  INDEXER_LABOR_HISTORIES_DISTINCT_COUNT_AMOUNT_ASC = 'INDEXER_LABOR_HISTORIES_DISTINCT_COUNT_AMOUNT_ASC',
  INDEXER_LABOR_HISTORIES_DISTINCT_COUNT_AMOUNT_DESC = 'INDEXER_LABOR_HISTORIES_DISTINCT_COUNT_AMOUNT_DESC',
  INDEXER_LABOR_HISTORIES_DISTINCT_COUNT_BLOCK_RANGE_ASC = 'INDEXER_LABOR_HISTORIES_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  INDEXER_LABOR_HISTORIES_DISTINCT_COUNT_BLOCK_RANGE_DESC = 'INDEXER_LABOR_HISTORIES_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  INDEXER_LABOR_HISTORIES_DISTINCT_COUNT_CREATE_AT_ASC = 'INDEXER_LABOR_HISTORIES_DISTINCT_COUNT_CREATE_AT_ASC',
  INDEXER_LABOR_HISTORIES_DISTINCT_COUNT_CREATE_AT_DESC = 'INDEXER_LABOR_HISTORIES_DISTINCT_COUNT_CREATE_AT_DESC',
  INDEXER_LABOR_HISTORIES_DISTINCT_COUNT_DEPLOYMENT_ID_ASC = 'INDEXER_LABOR_HISTORIES_DISTINCT_COUNT_DEPLOYMENT_ID_ASC',
  INDEXER_LABOR_HISTORIES_DISTINCT_COUNT_DEPLOYMENT_ID_DESC = 'INDEXER_LABOR_HISTORIES_DISTINCT_COUNT_DEPLOYMENT_ID_DESC',
  INDEXER_LABOR_HISTORIES_DISTINCT_COUNT_ERA_IDX_ASC = 'INDEXER_LABOR_HISTORIES_DISTINCT_COUNT_ERA_IDX_ASC',
  INDEXER_LABOR_HISTORIES_DISTINCT_COUNT_ERA_IDX_DESC = 'INDEXER_LABOR_HISTORIES_DISTINCT_COUNT_ERA_IDX_DESC',
  INDEXER_LABOR_HISTORIES_DISTINCT_COUNT_ID_ASC = 'INDEXER_LABOR_HISTORIES_DISTINCT_COUNT_ID_ASC',
  INDEXER_LABOR_HISTORIES_DISTINCT_COUNT_ID_DESC = 'INDEXER_LABOR_HISTORIES_DISTINCT_COUNT_ID_DESC',
  INDEXER_LABOR_HISTORIES_DISTINCT_COUNT_INDEXER_ID_ASC = 'INDEXER_LABOR_HISTORIES_DISTINCT_COUNT_INDEXER_ID_ASC',
  INDEXER_LABOR_HISTORIES_DISTINCT_COUNT_INDEXER_ID_DESC = 'INDEXER_LABOR_HISTORIES_DISTINCT_COUNT_INDEXER_ID_DESC',
  INDEXER_LABOR_HISTORIES_MAX_AMOUNT_ASC = 'INDEXER_LABOR_HISTORIES_MAX_AMOUNT_ASC',
  INDEXER_LABOR_HISTORIES_MAX_AMOUNT_DESC = 'INDEXER_LABOR_HISTORIES_MAX_AMOUNT_DESC',
  INDEXER_LABOR_HISTORIES_MAX_BLOCK_RANGE_ASC = 'INDEXER_LABOR_HISTORIES_MAX_BLOCK_RANGE_ASC',
  INDEXER_LABOR_HISTORIES_MAX_BLOCK_RANGE_DESC = 'INDEXER_LABOR_HISTORIES_MAX_BLOCK_RANGE_DESC',
  INDEXER_LABOR_HISTORIES_MAX_CREATE_AT_ASC = 'INDEXER_LABOR_HISTORIES_MAX_CREATE_AT_ASC',
  INDEXER_LABOR_HISTORIES_MAX_CREATE_AT_DESC = 'INDEXER_LABOR_HISTORIES_MAX_CREATE_AT_DESC',
  INDEXER_LABOR_HISTORIES_MAX_DEPLOYMENT_ID_ASC = 'INDEXER_LABOR_HISTORIES_MAX_DEPLOYMENT_ID_ASC',
  INDEXER_LABOR_HISTORIES_MAX_DEPLOYMENT_ID_DESC = 'INDEXER_LABOR_HISTORIES_MAX_DEPLOYMENT_ID_DESC',
  INDEXER_LABOR_HISTORIES_MAX_ERA_IDX_ASC = 'INDEXER_LABOR_HISTORIES_MAX_ERA_IDX_ASC',
  INDEXER_LABOR_HISTORIES_MAX_ERA_IDX_DESC = 'INDEXER_LABOR_HISTORIES_MAX_ERA_IDX_DESC',
  INDEXER_LABOR_HISTORIES_MAX_ID_ASC = 'INDEXER_LABOR_HISTORIES_MAX_ID_ASC',
  INDEXER_LABOR_HISTORIES_MAX_ID_DESC = 'INDEXER_LABOR_HISTORIES_MAX_ID_DESC',
  INDEXER_LABOR_HISTORIES_MAX_INDEXER_ID_ASC = 'INDEXER_LABOR_HISTORIES_MAX_INDEXER_ID_ASC',
  INDEXER_LABOR_HISTORIES_MAX_INDEXER_ID_DESC = 'INDEXER_LABOR_HISTORIES_MAX_INDEXER_ID_DESC',
  INDEXER_LABOR_HISTORIES_MIN_AMOUNT_ASC = 'INDEXER_LABOR_HISTORIES_MIN_AMOUNT_ASC',
  INDEXER_LABOR_HISTORIES_MIN_AMOUNT_DESC = 'INDEXER_LABOR_HISTORIES_MIN_AMOUNT_DESC',
  INDEXER_LABOR_HISTORIES_MIN_BLOCK_RANGE_ASC = 'INDEXER_LABOR_HISTORIES_MIN_BLOCK_RANGE_ASC',
  INDEXER_LABOR_HISTORIES_MIN_BLOCK_RANGE_DESC = 'INDEXER_LABOR_HISTORIES_MIN_BLOCK_RANGE_DESC',
  INDEXER_LABOR_HISTORIES_MIN_CREATE_AT_ASC = 'INDEXER_LABOR_HISTORIES_MIN_CREATE_AT_ASC',
  INDEXER_LABOR_HISTORIES_MIN_CREATE_AT_DESC = 'INDEXER_LABOR_HISTORIES_MIN_CREATE_AT_DESC',
  INDEXER_LABOR_HISTORIES_MIN_DEPLOYMENT_ID_ASC = 'INDEXER_LABOR_HISTORIES_MIN_DEPLOYMENT_ID_ASC',
  INDEXER_LABOR_HISTORIES_MIN_DEPLOYMENT_ID_DESC = 'INDEXER_LABOR_HISTORIES_MIN_DEPLOYMENT_ID_DESC',
  INDEXER_LABOR_HISTORIES_MIN_ERA_IDX_ASC = 'INDEXER_LABOR_HISTORIES_MIN_ERA_IDX_ASC',
  INDEXER_LABOR_HISTORIES_MIN_ERA_IDX_DESC = 'INDEXER_LABOR_HISTORIES_MIN_ERA_IDX_DESC',
  INDEXER_LABOR_HISTORIES_MIN_ID_ASC = 'INDEXER_LABOR_HISTORIES_MIN_ID_ASC',
  INDEXER_LABOR_HISTORIES_MIN_ID_DESC = 'INDEXER_LABOR_HISTORIES_MIN_ID_DESC',
  INDEXER_LABOR_HISTORIES_MIN_INDEXER_ID_ASC = 'INDEXER_LABOR_HISTORIES_MIN_INDEXER_ID_ASC',
  INDEXER_LABOR_HISTORIES_MIN_INDEXER_ID_DESC = 'INDEXER_LABOR_HISTORIES_MIN_INDEXER_ID_DESC',
  INDEXER_LABOR_HISTORIES_STDDEV_POPULATION_AMOUNT_ASC = 'INDEXER_LABOR_HISTORIES_STDDEV_POPULATION_AMOUNT_ASC',
  INDEXER_LABOR_HISTORIES_STDDEV_POPULATION_AMOUNT_DESC = 'INDEXER_LABOR_HISTORIES_STDDEV_POPULATION_AMOUNT_DESC',
  INDEXER_LABOR_HISTORIES_STDDEV_POPULATION_BLOCK_RANGE_ASC = 'INDEXER_LABOR_HISTORIES_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  INDEXER_LABOR_HISTORIES_STDDEV_POPULATION_BLOCK_RANGE_DESC = 'INDEXER_LABOR_HISTORIES_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  INDEXER_LABOR_HISTORIES_STDDEV_POPULATION_CREATE_AT_ASC = 'INDEXER_LABOR_HISTORIES_STDDEV_POPULATION_CREATE_AT_ASC',
  INDEXER_LABOR_HISTORIES_STDDEV_POPULATION_CREATE_AT_DESC = 'INDEXER_LABOR_HISTORIES_STDDEV_POPULATION_CREATE_AT_DESC',
  INDEXER_LABOR_HISTORIES_STDDEV_POPULATION_DEPLOYMENT_ID_ASC = 'INDEXER_LABOR_HISTORIES_STDDEV_POPULATION_DEPLOYMENT_ID_ASC',
  INDEXER_LABOR_HISTORIES_STDDEV_POPULATION_DEPLOYMENT_ID_DESC = 'INDEXER_LABOR_HISTORIES_STDDEV_POPULATION_DEPLOYMENT_ID_DESC',
  INDEXER_LABOR_HISTORIES_STDDEV_POPULATION_ERA_IDX_ASC = 'INDEXER_LABOR_HISTORIES_STDDEV_POPULATION_ERA_IDX_ASC',
  INDEXER_LABOR_HISTORIES_STDDEV_POPULATION_ERA_IDX_DESC = 'INDEXER_LABOR_HISTORIES_STDDEV_POPULATION_ERA_IDX_DESC',
  INDEXER_LABOR_HISTORIES_STDDEV_POPULATION_ID_ASC = 'INDEXER_LABOR_HISTORIES_STDDEV_POPULATION_ID_ASC',
  INDEXER_LABOR_HISTORIES_STDDEV_POPULATION_ID_DESC = 'INDEXER_LABOR_HISTORIES_STDDEV_POPULATION_ID_DESC',
  INDEXER_LABOR_HISTORIES_STDDEV_POPULATION_INDEXER_ID_ASC = 'INDEXER_LABOR_HISTORIES_STDDEV_POPULATION_INDEXER_ID_ASC',
  INDEXER_LABOR_HISTORIES_STDDEV_POPULATION_INDEXER_ID_DESC = 'INDEXER_LABOR_HISTORIES_STDDEV_POPULATION_INDEXER_ID_DESC',
  INDEXER_LABOR_HISTORIES_STDDEV_SAMPLE_AMOUNT_ASC = 'INDEXER_LABOR_HISTORIES_STDDEV_SAMPLE_AMOUNT_ASC',
  INDEXER_LABOR_HISTORIES_STDDEV_SAMPLE_AMOUNT_DESC = 'INDEXER_LABOR_HISTORIES_STDDEV_SAMPLE_AMOUNT_DESC',
  INDEXER_LABOR_HISTORIES_STDDEV_SAMPLE_BLOCK_RANGE_ASC = 'INDEXER_LABOR_HISTORIES_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  INDEXER_LABOR_HISTORIES_STDDEV_SAMPLE_BLOCK_RANGE_DESC = 'INDEXER_LABOR_HISTORIES_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  INDEXER_LABOR_HISTORIES_STDDEV_SAMPLE_CREATE_AT_ASC = 'INDEXER_LABOR_HISTORIES_STDDEV_SAMPLE_CREATE_AT_ASC',
  INDEXER_LABOR_HISTORIES_STDDEV_SAMPLE_CREATE_AT_DESC = 'INDEXER_LABOR_HISTORIES_STDDEV_SAMPLE_CREATE_AT_DESC',
  INDEXER_LABOR_HISTORIES_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC = 'INDEXER_LABOR_HISTORIES_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC',
  INDEXER_LABOR_HISTORIES_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC = 'INDEXER_LABOR_HISTORIES_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC',
  INDEXER_LABOR_HISTORIES_STDDEV_SAMPLE_ERA_IDX_ASC = 'INDEXER_LABOR_HISTORIES_STDDEV_SAMPLE_ERA_IDX_ASC',
  INDEXER_LABOR_HISTORIES_STDDEV_SAMPLE_ERA_IDX_DESC = 'INDEXER_LABOR_HISTORIES_STDDEV_SAMPLE_ERA_IDX_DESC',
  INDEXER_LABOR_HISTORIES_STDDEV_SAMPLE_ID_ASC = 'INDEXER_LABOR_HISTORIES_STDDEV_SAMPLE_ID_ASC',
  INDEXER_LABOR_HISTORIES_STDDEV_SAMPLE_ID_DESC = 'INDEXER_LABOR_HISTORIES_STDDEV_SAMPLE_ID_DESC',
  INDEXER_LABOR_HISTORIES_STDDEV_SAMPLE_INDEXER_ID_ASC = 'INDEXER_LABOR_HISTORIES_STDDEV_SAMPLE_INDEXER_ID_ASC',
  INDEXER_LABOR_HISTORIES_STDDEV_SAMPLE_INDEXER_ID_DESC = 'INDEXER_LABOR_HISTORIES_STDDEV_SAMPLE_INDEXER_ID_DESC',
  INDEXER_LABOR_HISTORIES_SUM_AMOUNT_ASC = 'INDEXER_LABOR_HISTORIES_SUM_AMOUNT_ASC',
  INDEXER_LABOR_HISTORIES_SUM_AMOUNT_DESC = 'INDEXER_LABOR_HISTORIES_SUM_AMOUNT_DESC',
  INDEXER_LABOR_HISTORIES_SUM_BLOCK_RANGE_ASC = 'INDEXER_LABOR_HISTORIES_SUM_BLOCK_RANGE_ASC',
  INDEXER_LABOR_HISTORIES_SUM_BLOCK_RANGE_DESC = 'INDEXER_LABOR_HISTORIES_SUM_BLOCK_RANGE_DESC',
  INDEXER_LABOR_HISTORIES_SUM_CREATE_AT_ASC = 'INDEXER_LABOR_HISTORIES_SUM_CREATE_AT_ASC',
  INDEXER_LABOR_HISTORIES_SUM_CREATE_AT_DESC = 'INDEXER_LABOR_HISTORIES_SUM_CREATE_AT_DESC',
  INDEXER_LABOR_HISTORIES_SUM_DEPLOYMENT_ID_ASC = 'INDEXER_LABOR_HISTORIES_SUM_DEPLOYMENT_ID_ASC',
  INDEXER_LABOR_HISTORIES_SUM_DEPLOYMENT_ID_DESC = 'INDEXER_LABOR_HISTORIES_SUM_DEPLOYMENT_ID_DESC',
  INDEXER_LABOR_HISTORIES_SUM_ERA_IDX_ASC = 'INDEXER_LABOR_HISTORIES_SUM_ERA_IDX_ASC',
  INDEXER_LABOR_HISTORIES_SUM_ERA_IDX_DESC = 'INDEXER_LABOR_HISTORIES_SUM_ERA_IDX_DESC',
  INDEXER_LABOR_HISTORIES_SUM_ID_ASC = 'INDEXER_LABOR_HISTORIES_SUM_ID_ASC',
  INDEXER_LABOR_HISTORIES_SUM_ID_DESC = 'INDEXER_LABOR_HISTORIES_SUM_ID_DESC',
  INDEXER_LABOR_HISTORIES_SUM_INDEXER_ID_ASC = 'INDEXER_LABOR_HISTORIES_SUM_INDEXER_ID_ASC',
  INDEXER_LABOR_HISTORIES_SUM_INDEXER_ID_DESC = 'INDEXER_LABOR_HISTORIES_SUM_INDEXER_ID_DESC',
  INDEXER_LABOR_HISTORIES_VARIANCE_POPULATION_AMOUNT_ASC = 'INDEXER_LABOR_HISTORIES_VARIANCE_POPULATION_AMOUNT_ASC',
  INDEXER_LABOR_HISTORIES_VARIANCE_POPULATION_AMOUNT_DESC = 'INDEXER_LABOR_HISTORIES_VARIANCE_POPULATION_AMOUNT_DESC',
  INDEXER_LABOR_HISTORIES_VARIANCE_POPULATION_BLOCK_RANGE_ASC = 'INDEXER_LABOR_HISTORIES_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  INDEXER_LABOR_HISTORIES_VARIANCE_POPULATION_BLOCK_RANGE_DESC = 'INDEXER_LABOR_HISTORIES_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  INDEXER_LABOR_HISTORIES_VARIANCE_POPULATION_CREATE_AT_ASC = 'INDEXER_LABOR_HISTORIES_VARIANCE_POPULATION_CREATE_AT_ASC',
  INDEXER_LABOR_HISTORIES_VARIANCE_POPULATION_CREATE_AT_DESC = 'INDEXER_LABOR_HISTORIES_VARIANCE_POPULATION_CREATE_AT_DESC',
  INDEXER_LABOR_HISTORIES_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC = 'INDEXER_LABOR_HISTORIES_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC',
  INDEXER_LABOR_HISTORIES_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC = 'INDEXER_LABOR_HISTORIES_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC',
  INDEXER_LABOR_HISTORIES_VARIANCE_POPULATION_ERA_IDX_ASC = 'INDEXER_LABOR_HISTORIES_VARIANCE_POPULATION_ERA_IDX_ASC',
  INDEXER_LABOR_HISTORIES_VARIANCE_POPULATION_ERA_IDX_DESC = 'INDEXER_LABOR_HISTORIES_VARIANCE_POPULATION_ERA_IDX_DESC',
  INDEXER_LABOR_HISTORIES_VARIANCE_POPULATION_ID_ASC = 'INDEXER_LABOR_HISTORIES_VARIANCE_POPULATION_ID_ASC',
  INDEXER_LABOR_HISTORIES_VARIANCE_POPULATION_ID_DESC = 'INDEXER_LABOR_HISTORIES_VARIANCE_POPULATION_ID_DESC',
  INDEXER_LABOR_HISTORIES_VARIANCE_POPULATION_INDEXER_ID_ASC = 'INDEXER_LABOR_HISTORIES_VARIANCE_POPULATION_INDEXER_ID_ASC',
  INDEXER_LABOR_HISTORIES_VARIANCE_POPULATION_INDEXER_ID_DESC = 'INDEXER_LABOR_HISTORIES_VARIANCE_POPULATION_INDEXER_ID_DESC',
  INDEXER_LABOR_HISTORIES_VARIANCE_SAMPLE_AMOUNT_ASC = 'INDEXER_LABOR_HISTORIES_VARIANCE_SAMPLE_AMOUNT_ASC',
  INDEXER_LABOR_HISTORIES_VARIANCE_SAMPLE_AMOUNT_DESC = 'INDEXER_LABOR_HISTORIES_VARIANCE_SAMPLE_AMOUNT_DESC',
  INDEXER_LABOR_HISTORIES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC = 'INDEXER_LABOR_HISTORIES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  INDEXER_LABOR_HISTORIES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC = 'INDEXER_LABOR_HISTORIES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  INDEXER_LABOR_HISTORIES_VARIANCE_SAMPLE_CREATE_AT_ASC = 'INDEXER_LABOR_HISTORIES_VARIANCE_SAMPLE_CREATE_AT_ASC',
  INDEXER_LABOR_HISTORIES_VARIANCE_SAMPLE_CREATE_AT_DESC = 'INDEXER_LABOR_HISTORIES_VARIANCE_SAMPLE_CREATE_AT_DESC',
  INDEXER_LABOR_HISTORIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC = 'INDEXER_LABOR_HISTORIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC',
  INDEXER_LABOR_HISTORIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC = 'INDEXER_LABOR_HISTORIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC',
  INDEXER_LABOR_HISTORIES_VARIANCE_SAMPLE_ERA_IDX_ASC = 'INDEXER_LABOR_HISTORIES_VARIANCE_SAMPLE_ERA_IDX_ASC',
  INDEXER_LABOR_HISTORIES_VARIANCE_SAMPLE_ERA_IDX_DESC = 'INDEXER_LABOR_HISTORIES_VARIANCE_SAMPLE_ERA_IDX_DESC',
  INDEXER_LABOR_HISTORIES_VARIANCE_SAMPLE_ID_ASC = 'INDEXER_LABOR_HISTORIES_VARIANCE_SAMPLE_ID_ASC',
  INDEXER_LABOR_HISTORIES_VARIANCE_SAMPLE_ID_DESC = 'INDEXER_LABOR_HISTORIES_VARIANCE_SAMPLE_ID_DESC',
  INDEXER_LABOR_HISTORIES_VARIANCE_SAMPLE_INDEXER_ID_ASC = 'INDEXER_LABOR_HISTORIES_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  INDEXER_LABOR_HISTORIES_VARIANCE_SAMPLE_INDEXER_ID_DESC = 'INDEXER_LABOR_HISTORIES_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  INDEXER_MISSED_LABORS_AVERAGE_BLOCK_RANGE_ASC = 'INDEXER_MISSED_LABORS_AVERAGE_BLOCK_RANGE_ASC',
  INDEXER_MISSED_LABORS_AVERAGE_BLOCK_RANGE_DESC = 'INDEXER_MISSED_LABORS_AVERAGE_BLOCK_RANGE_DESC',
  INDEXER_MISSED_LABORS_AVERAGE_CREATE_AT_ASC = 'INDEXER_MISSED_LABORS_AVERAGE_CREATE_AT_ASC',
  INDEXER_MISSED_LABORS_AVERAGE_CREATE_AT_DESC = 'INDEXER_MISSED_LABORS_AVERAGE_CREATE_AT_DESC',
  INDEXER_MISSED_LABORS_AVERAGE_DEPLOYMENT_ID_ASC = 'INDEXER_MISSED_LABORS_AVERAGE_DEPLOYMENT_ID_ASC',
  INDEXER_MISSED_LABORS_AVERAGE_DEPLOYMENT_ID_DESC = 'INDEXER_MISSED_LABORS_AVERAGE_DEPLOYMENT_ID_DESC',
  INDEXER_MISSED_LABORS_AVERAGE_ERA_IDX_ASC = 'INDEXER_MISSED_LABORS_AVERAGE_ERA_IDX_ASC',
  INDEXER_MISSED_LABORS_AVERAGE_ERA_IDX_DESC = 'INDEXER_MISSED_LABORS_AVERAGE_ERA_IDX_DESC',
  INDEXER_MISSED_LABORS_AVERAGE_ID_ASC = 'INDEXER_MISSED_LABORS_AVERAGE_ID_ASC',
  INDEXER_MISSED_LABORS_AVERAGE_ID_DESC = 'INDEXER_MISSED_LABORS_AVERAGE_ID_DESC',
  INDEXER_MISSED_LABORS_AVERAGE_INDEXER_ID_ASC = 'INDEXER_MISSED_LABORS_AVERAGE_INDEXER_ID_ASC',
  INDEXER_MISSED_LABORS_AVERAGE_INDEXER_ID_DESC = 'INDEXER_MISSED_LABORS_AVERAGE_INDEXER_ID_DESC',
  INDEXER_MISSED_LABORS_AVERAGE_MISSED_LABOR_ASC = 'INDEXER_MISSED_LABORS_AVERAGE_MISSED_LABOR_ASC',
  INDEXER_MISSED_LABORS_AVERAGE_MISSED_LABOR_DESC = 'INDEXER_MISSED_LABORS_AVERAGE_MISSED_LABOR_DESC',
  INDEXER_MISSED_LABORS_BY_INDEXER_ID__COUNT_ASC = 'INDEXER_MISSED_LABORS_BY_INDEXER_ID__COUNT_ASC',
  INDEXER_MISSED_LABORS_BY_INDEXER_ID__COUNT_DESC = 'INDEXER_MISSED_LABORS_BY_INDEXER_ID__COUNT_DESC',
  INDEXER_MISSED_LABORS_COUNT_ASC = 'INDEXER_MISSED_LABORS_COUNT_ASC',
  INDEXER_MISSED_LABORS_COUNT_DESC = 'INDEXER_MISSED_LABORS_COUNT_DESC',
  INDEXER_MISSED_LABORS_DISTINCT_COUNT_BLOCK_RANGE_ASC = 'INDEXER_MISSED_LABORS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  INDEXER_MISSED_LABORS_DISTINCT_COUNT_BLOCK_RANGE_DESC = 'INDEXER_MISSED_LABORS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  INDEXER_MISSED_LABORS_DISTINCT_COUNT_CREATE_AT_ASC = 'INDEXER_MISSED_LABORS_DISTINCT_COUNT_CREATE_AT_ASC',
  INDEXER_MISSED_LABORS_DISTINCT_COUNT_CREATE_AT_DESC = 'INDEXER_MISSED_LABORS_DISTINCT_COUNT_CREATE_AT_DESC',
  INDEXER_MISSED_LABORS_DISTINCT_COUNT_DEPLOYMENT_ID_ASC = 'INDEXER_MISSED_LABORS_DISTINCT_COUNT_DEPLOYMENT_ID_ASC',
  INDEXER_MISSED_LABORS_DISTINCT_COUNT_DEPLOYMENT_ID_DESC = 'INDEXER_MISSED_LABORS_DISTINCT_COUNT_DEPLOYMENT_ID_DESC',
  INDEXER_MISSED_LABORS_DISTINCT_COUNT_ERA_IDX_ASC = 'INDEXER_MISSED_LABORS_DISTINCT_COUNT_ERA_IDX_ASC',
  INDEXER_MISSED_LABORS_DISTINCT_COUNT_ERA_IDX_DESC = 'INDEXER_MISSED_LABORS_DISTINCT_COUNT_ERA_IDX_DESC',
  INDEXER_MISSED_LABORS_DISTINCT_COUNT_ID_ASC = 'INDEXER_MISSED_LABORS_DISTINCT_COUNT_ID_ASC',
  INDEXER_MISSED_LABORS_DISTINCT_COUNT_ID_DESC = 'INDEXER_MISSED_LABORS_DISTINCT_COUNT_ID_DESC',
  INDEXER_MISSED_LABORS_DISTINCT_COUNT_INDEXER_ID_ASC = 'INDEXER_MISSED_LABORS_DISTINCT_COUNT_INDEXER_ID_ASC',
  INDEXER_MISSED_LABORS_DISTINCT_COUNT_INDEXER_ID_DESC = 'INDEXER_MISSED_LABORS_DISTINCT_COUNT_INDEXER_ID_DESC',
  INDEXER_MISSED_LABORS_DISTINCT_COUNT_MISSED_LABOR_ASC = 'INDEXER_MISSED_LABORS_DISTINCT_COUNT_MISSED_LABOR_ASC',
  INDEXER_MISSED_LABORS_DISTINCT_COUNT_MISSED_LABOR_DESC = 'INDEXER_MISSED_LABORS_DISTINCT_COUNT_MISSED_LABOR_DESC',
  INDEXER_MISSED_LABORS_MAX_BLOCK_RANGE_ASC = 'INDEXER_MISSED_LABORS_MAX_BLOCK_RANGE_ASC',
  INDEXER_MISSED_LABORS_MAX_BLOCK_RANGE_DESC = 'INDEXER_MISSED_LABORS_MAX_BLOCK_RANGE_DESC',
  INDEXER_MISSED_LABORS_MAX_CREATE_AT_ASC = 'INDEXER_MISSED_LABORS_MAX_CREATE_AT_ASC',
  INDEXER_MISSED_LABORS_MAX_CREATE_AT_DESC = 'INDEXER_MISSED_LABORS_MAX_CREATE_AT_DESC',
  INDEXER_MISSED_LABORS_MAX_DEPLOYMENT_ID_ASC = 'INDEXER_MISSED_LABORS_MAX_DEPLOYMENT_ID_ASC',
  INDEXER_MISSED_LABORS_MAX_DEPLOYMENT_ID_DESC = 'INDEXER_MISSED_LABORS_MAX_DEPLOYMENT_ID_DESC',
  INDEXER_MISSED_LABORS_MAX_ERA_IDX_ASC = 'INDEXER_MISSED_LABORS_MAX_ERA_IDX_ASC',
  INDEXER_MISSED_LABORS_MAX_ERA_IDX_DESC = 'INDEXER_MISSED_LABORS_MAX_ERA_IDX_DESC',
  INDEXER_MISSED_LABORS_MAX_ID_ASC = 'INDEXER_MISSED_LABORS_MAX_ID_ASC',
  INDEXER_MISSED_LABORS_MAX_ID_DESC = 'INDEXER_MISSED_LABORS_MAX_ID_DESC',
  INDEXER_MISSED_LABORS_MAX_INDEXER_ID_ASC = 'INDEXER_MISSED_LABORS_MAX_INDEXER_ID_ASC',
  INDEXER_MISSED_LABORS_MAX_INDEXER_ID_DESC = 'INDEXER_MISSED_LABORS_MAX_INDEXER_ID_DESC',
  INDEXER_MISSED_LABORS_MAX_MISSED_LABOR_ASC = 'INDEXER_MISSED_LABORS_MAX_MISSED_LABOR_ASC',
  INDEXER_MISSED_LABORS_MAX_MISSED_LABOR_DESC = 'INDEXER_MISSED_LABORS_MAX_MISSED_LABOR_DESC',
  INDEXER_MISSED_LABORS_MIN_BLOCK_RANGE_ASC = 'INDEXER_MISSED_LABORS_MIN_BLOCK_RANGE_ASC',
  INDEXER_MISSED_LABORS_MIN_BLOCK_RANGE_DESC = 'INDEXER_MISSED_LABORS_MIN_BLOCK_RANGE_DESC',
  INDEXER_MISSED_LABORS_MIN_CREATE_AT_ASC = 'INDEXER_MISSED_LABORS_MIN_CREATE_AT_ASC',
  INDEXER_MISSED_LABORS_MIN_CREATE_AT_DESC = 'INDEXER_MISSED_LABORS_MIN_CREATE_AT_DESC',
  INDEXER_MISSED_LABORS_MIN_DEPLOYMENT_ID_ASC = 'INDEXER_MISSED_LABORS_MIN_DEPLOYMENT_ID_ASC',
  INDEXER_MISSED_LABORS_MIN_DEPLOYMENT_ID_DESC = 'INDEXER_MISSED_LABORS_MIN_DEPLOYMENT_ID_DESC',
  INDEXER_MISSED_LABORS_MIN_ERA_IDX_ASC = 'INDEXER_MISSED_LABORS_MIN_ERA_IDX_ASC',
  INDEXER_MISSED_LABORS_MIN_ERA_IDX_DESC = 'INDEXER_MISSED_LABORS_MIN_ERA_IDX_DESC',
  INDEXER_MISSED_LABORS_MIN_ID_ASC = 'INDEXER_MISSED_LABORS_MIN_ID_ASC',
  INDEXER_MISSED_LABORS_MIN_ID_DESC = 'INDEXER_MISSED_LABORS_MIN_ID_DESC',
  INDEXER_MISSED_LABORS_MIN_INDEXER_ID_ASC = 'INDEXER_MISSED_LABORS_MIN_INDEXER_ID_ASC',
  INDEXER_MISSED_LABORS_MIN_INDEXER_ID_DESC = 'INDEXER_MISSED_LABORS_MIN_INDEXER_ID_DESC',
  INDEXER_MISSED_LABORS_MIN_MISSED_LABOR_ASC = 'INDEXER_MISSED_LABORS_MIN_MISSED_LABOR_ASC',
  INDEXER_MISSED_LABORS_MIN_MISSED_LABOR_DESC = 'INDEXER_MISSED_LABORS_MIN_MISSED_LABOR_DESC',
  INDEXER_MISSED_LABORS_STDDEV_POPULATION_BLOCK_RANGE_ASC = 'INDEXER_MISSED_LABORS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  INDEXER_MISSED_LABORS_STDDEV_POPULATION_BLOCK_RANGE_DESC = 'INDEXER_MISSED_LABORS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  INDEXER_MISSED_LABORS_STDDEV_POPULATION_CREATE_AT_ASC = 'INDEXER_MISSED_LABORS_STDDEV_POPULATION_CREATE_AT_ASC',
  INDEXER_MISSED_LABORS_STDDEV_POPULATION_CREATE_AT_DESC = 'INDEXER_MISSED_LABORS_STDDEV_POPULATION_CREATE_AT_DESC',
  INDEXER_MISSED_LABORS_STDDEV_POPULATION_DEPLOYMENT_ID_ASC = 'INDEXER_MISSED_LABORS_STDDEV_POPULATION_DEPLOYMENT_ID_ASC',
  INDEXER_MISSED_LABORS_STDDEV_POPULATION_DEPLOYMENT_ID_DESC = 'INDEXER_MISSED_LABORS_STDDEV_POPULATION_DEPLOYMENT_ID_DESC',
  INDEXER_MISSED_LABORS_STDDEV_POPULATION_ERA_IDX_ASC = 'INDEXER_MISSED_LABORS_STDDEV_POPULATION_ERA_IDX_ASC',
  INDEXER_MISSED_LABORS_STDDEV_POPULATION_ERA_IDX_DESC = 'INDEXER_MISSED_LABORS_STDDEV_POPULATION_ERA_IDX_DESC',
  INDEXER_MISSED_LABORS_STDDEV_POPULATION_ID_ASC = 'INDEXER_MISSED_LABORS_STDDEV_POPULATION_ID_ASC',
  INDEXER_MISSED_LABORS_STDDEV_POPULATION_ID_DESC = 'INDEXER_MISSED_LABORS_STDDEV_POPULATION_ID_DESC',
  INDEXER_MISSED_LABORS_STDDEV_POPULATION_INDEXER_ID_ASC = 'INDEXER_MISSED_LABORS_STDDEV_POPULATION_INDEXER_ID_ASC',
  INDEXER_MISSED_LABORS_STDDEV_POPULATION_INDEXER_ID_DESC = 'INDEXER_MISSED_LABORS_STDDEV_POPULATION_INDEXER_ID_DESC',
  INDEXER_MISSED_LABORS_STDDEV_POPULATION_MISSED_LABOR_ASC = 'INDEXER_MISSED_LABORS_STDDEV_POPULATION_MISSED_LABOR_ASC',
  INDEXER_MISSED_LABORS_STDDEV_POPULATION_MISSED_LABOR_DESC = 'INDEXER_MISSED_LABORS_STDDEV_POPULATION_MISSED_LABOR_DESC',
  INDEXER_MISSED_LABORS_STDDEV_SAMPLE_BLOCK_RANGE_ASC = 'INDEXER_MISSED_LABORS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  INDEXER_MISSED_LABORS_STDDEV_SAMPLE_BLOCK_RANGE_DESC = 'INDEXER_MISSED_LABORS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  INDEXER_MISSED_LABORS_STDDEV_SAMPLE_CREATE_AT_ASC = 'INDEXER_MISSED_LABORS_STDDEV_SAMPLE_CREATE_AT_ASC',
  INDEXER_MISSED_LABORS_STDDEV_SAMPLE_CREATE_AT_DESC = 'INDEXER_MISSED_LABORS_STDDEV_SAMPLE_CREATE_AT_DESC',
  INDEXER_MISSED_LABORS_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC = 'INDEXER_MISSED_LABORS_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC',
  INDEXER_MISSED_LABORS_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC = 'INDEXER_MISSED_LABORS_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC',
  INDEXER_MISSED_LABORS_STDDEV_SAMPLE_ERA_IDX_ASC = 'INDEXER_MISSED_LABORS_STDDEV_SAMPLE_ERA_IDX_ASC',
  INDEXER_MISSED_LABORS_STDDEV_SAMPLE_ERA_IDX_DESC = 'INDEXER_MISSED_LABORS_STDDEV_SAMPLE_ERA_IDX_DESC',
  INDEXER_MISSED_LABORS_STDDEV_SAMPLE_ID_ASC = 'INDEXER_MISSED_LABORS_STDDEV_SAMPLE_ID_ASC',
  INDEXER_MISSED_LABORS_STDDEV_SAMPLE_ID_DESC = 'INDEXER_MISSED_LABORS_STDDEV_SAMPLE_ID_DESC',
  INDEXER_MISSED_LABORS_STDDEV_SAMPLE_INDEXER_ID_ASC = 'INDEXER_MISSED_LABORS_STDDEV_SAMPLE_INDEXER_ID_ASC',
  INDEXER_MISSED_LABORS_STDDEV_SAMPLE_INDEXER_ID_DESC = 'INDEXER_MISSED_LABORS_STDDEV_SAMPLE_INDEXER_ID_DESC',
  INDEXER_MISSED_LABORS_STDDEV_SAMPLE_MISSED_LABOR_ASC = 'INDEXER_MISSED_LABORS_STDDEV_SAMPLE_MISSED_LABOR_ASC',
  INDEXER_MISSED_LABORS_STDDEV_SAMPLE_MISSED_LABOR_DESC = 'INDEXER_MISSED_LABORS_STDDEV_SAMPLE_MISSED_LABOR_DESC',
  INDEXER_MISSED_LABORS_SUM_BLOCK_RANGE_ASC = 'INDEXER_MISSED_LABORS_SUM_BLOCK_RANGE_ASC',
  INDEXER_MISSED_LABORS_SUM_BLOCK_RANGE_DESC = 'INDEXER_MISSED_LABORS_SUM_BLOCK_RANGE_DESC',
  INDEXER_MISSED_LABORS_SUM_CREATE_AT_ASC = 'INDEXER_MISSED_LABORS_SUM_CREATE_AT_ASC',
  INDEXER_MISSED_LABORS_SUM_CREATE_AT_DESC = 'INDEXER_MISSED_LABORS_SUM_CREATE_AT_DESC',
  INDEXER_MISSED_LABORS_SUM_DEPLOYMENT_ID_ASC = 'INDEXER_MISSED_LABORS_SUM_DEPLOYMENT_ID_ASC',
  INDEXER_MISSED_LABORS_SUM_DEPLOYMENT_ID_DESC = 'INDEXER_MISSED_LABORS_SUM_DEPLOYMENT_ID_DESC',
  INDEXER_MISSED_LABORS_SUM_ERA_IDX_ASC = 'INDEXER_MISSED_LABORS_SUM_ERA_IDX_ASC',
  INDEXER_MISSED_LABORS_SUM_ERA_IDX_DESC = 'INDEXER_MISSED_LABORS_SUM_ERA_IDX_DESC',
  INDEXER_MISSED_LABORS_SUM_ID_ASC = 'INDEXER_MISSED_LABORS_SUM_ID_ASC',
  INDEXER_MISSED_LABORS_SUM_ID_DESC = 'INDEXER_MISSED_LABORS_SUM_ID_DESC',
  INDEXER_MISSED_LABORS_SUM_INDEXER_ID_ASC = 'INDEXER_MISSED_LABORS_SUM_INDEXER_ID_ASC',
  INDEXER_MISSED_LABORS_SUM_INDEXER_ID_DESC = 'INDEXER_MISSED_LABORS_SUM_INDEXER_ID_DESC',
  INDEXER_MISSED_LABORS_SUM_MISSED_LABOR_ASC = 'INDEXER_MISSED_LABORS_SUM_MISSED_LABOR_ASC',
  INDEXER_MISSED_LABORS_SUM_MISSED_LABOR_DESC = 'INDEXER_MISSED_LABORS_SUM_MISSED_LABOR_DESC',
  INDEXER_MISSED_LABORS_VARIANCE_POPULATION_BLOCK_RANGE_ASC = 'INDEXER_MISSED_LABORS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  INDEXER_MISSED_LABORS_VARIANCE_POPULATION_BLOCK_RANGE_DESC = 'INDEXER_MISSED_LABORS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  INDEXER_MISSED_LABORS_VARIANCE_POPULATION_CREATE_AT_ASC = 'INDEXER_MISSED_LABORS_VARIANCE_POPULATION_CREATE_AT_ASC',
  INDEXER_MISSED_LABORS_VARIANCE_POPULATION_CREATE_AT_DESC = 'INDEXER_MISSED_LABORS_VARIANCE_POPULATION_CREATE_AT_DESC',
  INDEXER_MISSED_LABORS_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC = 'INDEXER_MISSED_LABORS_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC',
  INDEXER_MISSED_LABORS_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC = 'INDEXER_MISSED_LABORS_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC',
  INDEXER_MISSED_LABORS_VARIANCE_POPULATION_ERA_IDX_ASC = 'INDEXER_MISSED_LABORS_VARIANCE_POPULATION_ERA_IDX_ASC',
  INDEXER_MISSED_LABORS_VARIANCE_POPULATION_ERA_IDX_DESC = 'INDEXER_MISSED_LABORS_VARIANCE_POPULATION_ERA_IDX_DESC',
  INDEXER_MISSED_LABORS_VARIANCE_POPULATION_ID_ASC = 'INDEXER_MISSED_LABORS_VARIANCE_POPULATION_ID_ASC',
  INDEXER_MISSED_LABORS_VARIANCE_POPULATION_ID_DESC = 'INDEXER_MISSED_LABORS_VARIANCE_POPULATION_ID_DESC',
  INDEXER_MISSED_LABORS_VARIANCE_POPULATION_INDEXER_ID_ASC = 'INDEXER_MISSED_LABORS_VARIANCE_POPULATION_INDEXER_ID_ASC',
  INDEXER_MISSED_LABORS_VARIANCE_POPULATION_INDEXER_ID_DESC = 'INDEXER_MISSED_LABORS_VARIANCE_POPULATION_INDEXER_ID_DESC',
  INDEXER_MISSED_LABORS_VARIANCE_POPULATION_MISSED_LABOR_ASC = 'INDEXER_MISSED_LABORS_VARIANCE_POPULATION_MISSED_LABOR_ASC',
  INDEXER_MISSED_LABORS_VARIANCE_POPULATION_MISSED_LABOR_DESC = 'INDEXER_MISSED_LABORS_VARIANCE_POPULATION_MISSED_LABOR_DESC',
  INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC = 'INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC = 'INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_CREATE_AT_ASC = 'INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_CREATE_AT_ASC',
  INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_CREATE_AT_DESC = 'INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_CREATE_AT_DESC',
  INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC = 'INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC',
  INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC = 'INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC',
  INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_ERA_IDX_ASC = 'INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_ERA_IDX_ASC',
  INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_ERA_IDX_DESC = 'INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_ERA_IDX_DESC',
  INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_ID_ASC = 'INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_ID_ASC',
  INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_ID_DESC = 'INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_ID_DESC',
  INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_INDEXER_ID_ASC = 'INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_INDEXER_ID_DESC = 'INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_MISSED_LABOR_ASC = 'INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_MISSED_LABOR_ASC',
  INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_MISSED_LABOR_DESC = 'INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_MISSED_LABOR_DESC',
  INDEXER_REWARDS_BY_INDEXER_ID__COUNT_ASC = 'INDEXER_REWARDS_BY_INDEXER_ID__COUNT_ASC',
  INDEXER_REWARDS_BY_INDEXER_ID__COUNT_DESC = 'INDEXER_REWARDS_BY_INDEXER_ID__COUNT_DESC',
  INDEXER_STAKES_AVERAGE_BLOCK_RANGE_ASC = 'INDEXER_STAKES_AVERAGE_BLOCK_RANGE_ASC',
  INDEXER_STAKES_AVERAGE_BLOCK_RANGE_DESC = 'INDEXER_STAKES_AVERAGE_BLOCK_RANGE_DESC',
  INDEXER_STAKES_AVERAGE_DELEGATOR_STAKE_ASC = 'INDEXER_STAKES_AVERAGE_DELEGATOR_STAKE_ASC',
  INDEXER_STAKES_AVERAGE_DELEGATOR_STAKE_DESC = 'INDEXER_STAKES_AVERAGE_DELEGATOR_STAKE_DESC',
  INDEXER_STAKES_AVERAGE_ERA_IDX_ASC = 'INDEXER_STAKES_AVERAGE_ERA_IDX_ASC',
  INDEXER_STAKES_AVERAGE_ERA_IDX_DESC = 'INDEXER_STAKES_AVERAGE_ERA_IDX_DESC',
  INDEXER_STAKES_AVERAGE_ERA_ID_ASC = 'INDEXER_STAKES_AVERAGE_ERA_ID_ASC',
  INDEXER_STAKES_AVERAGE_ERA_ID_DESC = 'INDEXER_STAKES_AVERAGE_ERA_ID_DESC',
  INDEXER_STAKES_AVERAGE_ID_ASC = 'INDEXER_STAKES_AVERAGE_ID_ASC',
  INDEXER_STAKES_AVERAGE_ID_DESC = 'INDEXER_STAKES_AVERAGE_ID_DESC',
  INDEXER_STAKES_AVERAGE_INDEXER_ID_ASC = 'INDEXER_STAKES_AVERAGE_INDEXER_ID_ASC',
  INDEXER_STAKES_AVERAGE_INDEXER_ID_DESC = 'INDEXER_STAKES_AVERAGE_INDEXER_ID_DESC',
  INDEXER_STAKES_AVERAGE_INDEXER_STAKE_ASC = 'INDEXER_STAKES_AVERAGE_INDEXER_STAKE_ASC',
  INDEXER_STAKES_AVERAGE_INDEXER_STAKE_DESC = 'INDEXER_STAKES_AVERAGE_INDEXER_STAKE_DESC',
  INDEXER_STAKES_AVERAGE_TOTAL_STAKE_ASC = 'INDEXER_STAKES_AVERAGE_TOTAL_STAKE_ASC',
  INDEXER_STAKES_AVERAGE_TOTAL_STAKE_DESC = 'INDEXER_STAKES_AVERAGE_TOTAL_STAKE_DESC',
  INDEXER_STAKES_BY_INDEXER_ID__COUNT_ASC = 'INDEXER_STAKES_BY_INDEXER_ID__COUNT_ASC',
  INDEXER_STAKES_BY_INDEXER_ID__COUNT_DESC = 'INDEXER_STAKES_BY_INDEXER_ID__COUNT_DESC',
  INDEXER_STAKES_COUNT_ASC = 'INDEXER_STAKES_COUNT_ASC',
  INDEXER_STAKES_COUNT_DESC = 'INDEXER_STAKES_COUNT_DESC',
  INDEXER_STAKES_DISTINCT_COUNT_BLOCK_RANGE_ASC = 'INDEXER_STAKES_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  INDEXER_STAKES_DISTINCT_COUNT_BLOCK_RANGE_DESC = 'INDEXER_STAKES_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  INDEXER_STAKES_DISTINCT_COUNT_DELEGATOR_STAKE_ASC = 'INDEXER_STAKES_DISTINCT_COUNT_DELEGATOR_STAKE_ASC',
  INDEXER_STAKES_DISTINCT_COUNT_DELEGATOR_STAKE_DESC = 'INDEXER_STAKES_DISTINCT_COUNT_DELEGATOR_STAKE_DESC',
  INDEXER_STAKES_DISTINCT_COUNT_ERA_IDX_ASC = 'INDEXER_STAKES_DISTINCT_COUNT_ERA_IDX_ASC',
  INDEXER_STAKES_DISTINCT_COUNT_ERA_IDX_DESC = 'INDEXER_STAKES_DISTINCT_COUNT_ERA_IDX_DESC',
  INDEXER_STAKES_DISTINCT_COUNT_ERA_ID_ASC = 'INDEXER_STAKES_DISTINCT_COUNT_ERA_ID_ASC',
  INDEXER_STAKES_DISTINCT_COUNT_ERA_ID_DESC = 'INDEXER_STAKES_DISTINCT_COUNT_ERA_ID_DESC',
  INDEXER_STAKES_DISTINCT_COUNT_ID_ASC = 'INDEXER_STAKES_DISTINCT_COUNT_ID_ASC',
  INDEXER_STAKES_DISTINCT_COUNT_ID_DESC = 'INDEXER_STAKES_DISTINCT_COUNT_ID_DESC',
  INDEXER_STAKES_DISTINCT_COUNT_INDEXER_ID_ASC = 'INDEXER_STAKES_DISTINCT_COUNT_INDEXER_ID_ASC',
  INDEXER_STAKES_DISTINCT_COUNT_INDEXER_ID_DESC = 'INDEXER_STAKES_DISTINCT_COUNT_INDEXER_ID_DESC',
  INDEXER_STAKES_DISTINCT_COUNT_INDEXER_STAKE_ASC = 'INDEXER_STAKES_DISTINCT_COUNT_INDEXER_STAKE_ASC',
  INDEXER_STAKES_DISTINCT_COUNT_INDEXER_STAKE_DESC = 'INDEXER_STAKES_DISTINCT_COUNT_INDEXER_STAKE_DESC',
  INDEXER_STAKES_DISTINCT_COUNT_TOTAL_STAKE_ASC = 'INDEXER_STAKES_DISTINCT_COUNT_TOTAL_STAKE_ASC',
  INDEXER_STAKES_DISTINCT_COUNT_TOTAL_STAKE_DESC = 'INDEXER_STAKES_DISTINCT_COUNT_TOTAL_STAKE_DESC',
  INDEXER_STAKES_MAX_BLOCK_RANGE_ASC = 'INDEXER_STAKES_MAX_BLOCK_RANGE_ASC',
  INDEXER_STAKES_MAX_BLOCK_RANGE_DESC = 'INDEXER_STAKES_MAX_BLOCK_RANGE_DESC',
  INDEXER_STAKES_MAX_DELEGATOR_STAKE_ASC = 'INDEXER_STAKES_MAX_DELEGATOR_STAKE_ASC',
  INDEXER_STAKES_MAX_DELEGATOR_STAKE_DESC = 'INDEXER_STAKES_MAX_DELEGATOR_STAKE_DESC',
  INDEXER_STAKES_MAX_ERA_IDX_ASC = 'INDEXER_STAKES_MAX_ERA_IDX_ASC',
  INDEXER_STAKES_MAX_ERA_IDX_DESC = 'INDEXER_STAKES_MAX_ERA_IDX_DESC',
  INDEXER_STAKES_MAX_ERA_ID_ASC = 'INDEXER_STAKES_MAX_ERA_ID_ASC',
  INDEXER_STAKES_MAX_ERA_ID_DESC = 'INDEXER_STAKES_MAX_ERA_ID_DESC',
  INDEXER_STAKES_MAX_ID_ASC = 'INDEXER_STAKES_MAX_ID_ASC',
  INDEXER_STAKES_MAX_ID_DESC = 'INDEXER_STAKES_MAX_ID_DESC',
  INDEXER_STAKES_MAX_INDEXER_ID_ASC = 'INDEXER_STAKES_MAX_INDEXER_ID_ASC',
  INDEXER_STAKES_MAX_INDEXER_ID_DESC = 'INDEXER_STAKES_MAX_INDEXER_ID_DESC',
  INDEXER_STAKES_MAX_INDEXER_STAKE_ASC = 'INDEXER_STAKES_MAX_INDEXER_STAKE_ASC',
  INDEXER_STAKES_MAX_INDEXER_STAKE_DESC = 'INDEXER_STAKES_MAX_INDEXER_STAKE_DESC',
  INDEXER_STAKES_MAX_TOTAL_STAKE_ASC = 'INDEXER_STAKES_MAX_TOTAL_STAKE_ASC',
  INDEXER_STAKES_MAX_TOTAL_STAKE_DESC = 'INDEXER_STAKES_MAX_TOTAL_STAKE_DESC',
  INDEXER_STAKES_MIN_BLOCK_RANGE_ASC = 'INDEXER_STAKES_MIN_BLOCK_RANGE_ASC',
  INDEXER_STAKES_MIN_BLOCK_RANGE_DESC = 'INDEXER_STAKES_MIN_BLOCK_RANGE_DESC',
  INDEXER_STAKES_MIN_DELEGATOR_STAKE_ASC = 'INDEXER_STAKES_MIN_DELEGATOR_STAKE_ASC',
  INDEXER_STAKES_MIN_DELEGATOR_STAKE_DESC = 'INDEXER_STAKES_MIN_DELEGATOR_STAKE_DESC',
  INDEXER_STAKES_MIN_ERA_IDX_ASC = 'INDEXER_STAKES_MIN_ERA_IDX_ASC',
  INDEXER_STAKES_MIN_ERA_IDX_DESC = 'INDEXER_STAKES_MIN_ERA_IDX_DESC',
  INDEXER_STAKES_MIN_ERA_ID_ASC = 'INDEXER_STAKES_MIN_ERA_ID_ASC',
  INDEXER_STAKES_MIN_ERA_ID_DESC = 'INDEXER_STAKES_MIN_ERA_ID_DESC',
  INDEXER_STAKES_MIN_ID_ASC = 'INDEXER_STAKES_MIN_ID_ASC',
  INDEXER_STAKES_MIN_ID_DESC = 'INDEXER_STAKES_MIN_ID_DESC',
  INDEXER_STAKES_MIN_INDEXER_ID_ASC = 'INDEXER_STAKES_MIN_INDEXER_ID_ASC',
  INDEXER_STAKES_MIN_INDEXER_ID_DESC = 'INDEXER_STAKES_MIN_INDEXER_ID_DESC',
  INDEXER_STAKES_MIN_INDEXER_STAKE_ASC = 'INDEXER_STAKES_MIN_INDEXER_STAKE_ASC',
  INDEXER_STAKES_MIN_INDEXER_STAKE_DESC = 'INDEXER_STAKES_MIN_INDEXER_STAKE_DESC',
  INDEXER_STAKES_MIN_TOTAL_STAKE_ASC = 'INDEXER_STAKES_MIN_TOTAL_STAKE_ASC',
  INDEXER_STAKES_MIN_TOTAL_STAKE_DESC = 'INDEXER_STAKES_MIN_TOTAL_STAKE_DESC',
  INDEXER_STAKES_STDDEV_POPULATION_BLOCK_RANGE_ASC = 'INDEXER_STAKES_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  INDEXER_STAKES_STDDEV_POPULATION_BLOCK_RANGE_DESC = 'INDEXER_STAKES_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  INDEXER_STAKES_STDDEV_POPULATION_DELEGATOR_STAKE_ASC = 'INDEXER_STAKES_STDDEV_POPULATION_DELEGATOR_STAKE_ASC',
  INDEXER_STAKES_STDDEV_POPULATION_DELEGATOR_STAKE_DESC = 'INDEXER_STAKES_STDDEV_POPULATION_DELEGATOR_STAKE_DESC',
  INDEXER_STAKES_STDDEV_POPULATION_ERA_IDX_ASC = 'INDEXER_STAKES_STDDEV_POPULATION_ERA_IDX_ASC',
  INDEXER_STAKES_STDDEV_POPULATION_ERA_IDX_DESC = 'INDEXER_STAKES_STDDEV_POPULATION_ERA_IDX_DESC',
  INDEXER_STAKES_STDDEV_POPULATION_ERA_ID_ASC = 'INDEXER_STAKES_STDDEV_POPULATION_ERA_ID_ASC',
  INDEXER_STAKES_STDDEV_POPULATION_ERA_ID_DESC = 'INDEXER_STAKES_STDDEV_POPULATION_ERA_ID_DESC',
  INDEXER_STAKES_STDDEV_POPULATION_ID_ASC = 'INDEXER_STAKES_STDDEV_POPULATION_ID_ASC',
  INDEXER_STAKES_STDDEV_POPULATION_ID_DESC = 'INDEXER_STAKES_STDDEV_POPULATION_ID_DESC',
  INDEXER_STAKES_STDDEV_POPULATION_INDEXER_ID_ASC = 'INDEXER_STAKES_STDDEV_POPULATION_INDEXER_ID_ASC',
  INDEXER_STAKES_STDDEV_POPULATION_INDEXER_ID_DESC = 'INDEXER_STAKES_STDDEV_POPULATION_INDEXER_ID_DESC',
  INDEXER_STAKES_STDDEV_POPULATION_INDEXER_STAKE_ASC = 'INDEXER_STAKES_STDDEV_POPULATION_INDEXER_STAKE_ASC',
  INDEXER_STAKES_STDDEV_POPULATION_INDEXER_STAKE_DESC = 'INDEXER_STAKES_STDDEV_POPULATION_INDEXER_STAKE_DESC',
  INDEXER_STAKES_STDDEV_POPULATION_TOTAL_STAKE_ASC = 'INDEXER_STAKES_STDDEV_POPULATION_TOTAL_STAKE_ASC',
  INDEXER_STAKES_STDDEV_POPULATION_TOTAL_STAKE_DESC = 'INDEXER_STAKES_STDDEV_POPULATION_TOTAL_STAKE_DESC',
  INDEXER_STAKES_STDDEV_SAMPLE_BLOCK_RANGE_ASC = 'INDEXER_STAKES_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  INDEXER_STAKES_STDDEV_SAMPLE_BLOCK_RANGE_DESC = 'INDEXER_STAKES_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  INDEXER_STAKES_STDDEV_SAMPLE_DELEGATOR_STAKE_ASC = 'INDEXER_STAKES_STDDEV_SAMPLE_DELEGATOR_STAKE_ASC',
  INDEXER_STAKES_STDDEV_SAMPLE_DELEGATOR_STAKE_DESC = 'INDEXER_STAKES_STDDEV_SAMPLE_DELEGATOR_STAKE_DESC',
  INDEXER_STAKES_STDDEV_SAMPLE_ERA_IDX_ASC = 'INDEXER_STAKES_STDDEV_SAMPLE_ERA_IDX_ASC',
  INDEXER_STAKES_STDDEV_SAMPLE_ERA_IDX_DESC = 'INDEXER_STAKES_STDDEV_SAMPLE_ERA_IDX_DESC',
  INDEXER_STAKES_STDDEV_SAMPLE_ERA_ID_ASC = 'INDEXER_STAKES_STDDEV_SAMPLE_ERA_ID_ASC',
  INDEXER_STAKES_STDDEV_SAMPLE_ERA_ID_DESC = 'INDEXER_STAKES_STDDEV_SAMPLE_ERA_ID_DESC',
  INDEXER_STAKES_STDDEV_SAMPLE_ID_ASC = 'INDEXER_STAKES_STDDEV_SAMPLE_ID_ASC',
  INDEXER_STAKES_STDDEV_SAMPLE_ID_DESC = 'INDEXER_STAKES_STDDEV_SAMPLE_ID_DESC',
  INDEXER_STAKES_STDDEV_SAMPLE_INDEXER_ID_ASC = 'INDEXER_STAKES_STDDEV_SAMPLE_INDEXER_ID_ASC',
  INDEXER_STAKES_STDDEV_SAMPLE_INDEXER_ID_DESC = 'INDEXER_STAKES_STDDEV_SAMPLE_INDEXER_ID_DESC',
  INDEXER_STAKES_STDDEV_SAMPLE_INDEXER_STAKE_ASC = 'INDEXER_STAKES_STDDEV_SAMPLE_INDEXER_STAKE_ASC',
  INDEXER_STAKES_STDDEV_SAMPLE_INDEXER_STAKE_DESC = 'INDEXER_STAKES_STDDEV_SAMPLE_INDEXER_STAKE_DESC',
  INDEXER_STAKES_STDDEV_SAMPLE_TOTAL_STAKE_ASC = 'INDEXER_STAKES_STDDEV_SAMPLE_TOTAL_STAKE_ASC',
  INDEXER_STAKES_STDDEV_SAMPLE_TOTAL_STAKE_DESC = 'INDEXER_STAKES_STDDEV_SAMPLE_TOTAL_STAKE_DESC',
  INDEXER_STAKES_SUM_BLOCK_RANGE_ASC = 'INDEXER_STAKES_SUM_BLOCK_RANGE_ASC',
  INDEXER_STAKES_SUM_BLOCK_RANGE_DESC = 'INDEXER_STAKES_SUM_BLOCK_RANGE_DESC',
  INDEXER_STAKES_SUM_DELEGATOR_STAKE_ASC = 'INDEXER_STAKES_SUM_DELEGATOR_STAKE_ASC',
  INDEXER_STAKES_SUM_DELEGATOR_STAKE_DESC = 'INDEXER_STAKES_SUM_DELEGATOR_STAKE_DESC',
  INDEXER_STAKES_SUM_ERA_IDX_ASC = 'INDEXER_STAKES_SUM_ERA_IDX_ASC',
  INDEXER_STAKES_SUM_ERA_IDX_DESC = 'INDEXER_STAKES_SUM_ERA_IDX_DESC',
  INDEXER_STAKES_SUM_ERA_ID_ASC = 'INDEXER_STAKES_SUM_ERA_ID_ASC',
  INDEXER_STAKES_SUM_ERA_ID_DESC = 'INDEXER_STAKES_SUM_ERA_ID_DESC',
  INDEXER_STAKES_SUM_ID_ASC = 'INDEXER_STAKES_SUM_ID_ASC',
  INDEXER_STAKES_SUM_ID_DESC = 'INDEXER_STAKES_SUM_ID_DESC',
  INDEXER_STAKES_SUM_INDEXER_ID_ASC = 'INDEXER_STAKES_SUM_INDEXER_ID_ASC',
  INDEXER_STAKES_SUM_INDEXER_ID_DESC = 'INDEXER_STAKES_SUM_INDEXER_ID_DESC',
  INDEXER_STAKES_SUM_INDEXER_STAKE_ASC = 'INDEXER_STAKES_SUM_INDEXER_STAKE_ASC',
  INDEXER_STAKES_SUM_INDEXER_STAKE_DESC = 'INDEXER_STAKES_SUM_INDEXER_STAKE_DESC',
  INDEXER_STAKES_SUM_TOTAL_STAKE_ASC = 'INDEXER_STAKES_SUM_TOTAL_STAKE_ASC',
  INDEXER_STAKES_SUM_TOTAL_STAKE_DESC = 'INDEXER_STAKES_SUM_TOTAL_STAKE_DESC',
  INDEXER_STAKES_VARIANCE_POPULATION_BLOCK_RANGE_ASC = 'INDEXER_STAKES_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  INDEXER_STAKES_VARIANCE_POPULATION_BLOCK_RANGE_DESC = 'INDEXER_STAKES_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  INDEXER_STAKES_VARIANCE_POPULATION_DELEGATOR_STAKE_ASC = 'INDEXER_STAKES_VARIANCE_POPULATION_DELEGATOR_STAKE_ASC',
  INDEXER_STAKES_VARIANCE_POPULATION_DELEGATOR_STAKE_DESC = 'INDEXER_STAKES_VARIANCE_POPULATION_DELEGATOR_STAKE_DESC',
  INDEXER_STAKES_VARIANCE_POPULATION_ERA_IDX_ASC = 'INDEXER_STAKES_VARIANCE_POPULATION_ERA_IDX_ASC',
  INDEXER_STAKES_VARIANCE_POPULATION_ERA_IDX_DESC = 'INDEXER_STAKES_VARIANCE_POPULATION_ERA_IDX_DESC',
  INDEXER_STAKES_VARIANCE_POPULATION_ERA_ID_ASC = 'INDEXER_STAKES_VARIANCE_POPULATION_ERA_ID_ASC',
  INDEXER_STAKES_VARIANCE_POPULATION_ERA_ID_DESC = 'INDEXER_STAKES_VARIANCE_POPULATION_ERA_ID_DESC',
  INDEXER_STAKES_VARIANCE_POPULATION_ID_ASC = 'INDEXER_STAKES_VARIANCE_POPULATION_ID_ASC',
  INDEXER_STAKES_VARIANCE_POPULATION_ID_DESC = 'INDEXER_STAKES_VARIANCE_POPULATION_ID_DESC',
  INDEXER_STAKES_VARIANCE_POPULATION_INDEXER_ID_ASC = 'INDEXER_STAKES_VARIANCE_POPULATION_INDEXER_ID_ASC',
  INDEXER_STAKES_VARIANCE_POPULATION_INDEXER_ID_DESC = 'INDEXER_STAKES_VARIANCE_POPULATION_INDEXER_ID_DESC',
  INDEXER_STAKES_VARIANCE_POPULATION_INDEXER_STAKE_ASC = 'INDEXER_STAKES_VARIANCE_POPULATION_INDEXER_STAKE_ASC',
  INDEXER_STAKES_VARIANCE_POPULATION_INDEXER_STAKE_DESC = 'INDEXER_STAKES_VARIANCE_POPULATION_INDEXER_STAKE_DESC',
  INDEXER_STAKES_VARIANCE_POPULATION_TOTAL_STAKE_ASC = 'INDEXER_STAKES_VARIANCE_POPULATION_TOTAL_STAKE_ASC',
  INDEXER_STAKES_VARIANCE_POPULATION_TOTAL_STAKE_DESC = 'INDEXER_STAKES_VARIANCE_POPULATION_TOTAL_STAKE_DESC',
  INDEXER_STAKES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC = 'INDEXER_STAKES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  INDEXER_STAKES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC = 'INDEXER_STAKES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  INDEXER_STAKES_VARIANCE_SAMPLE_DELEGATOR_STAKE_ASC = 'INDEXER_STAKES_VARIANCE_SAMPLE_DELEGATOR_STAKE_ASC',
  INDEXER_STAKES_VARIANCE_SAMPLE_DELEGATOR_STAKE_DESC = 'INDEXER_STAKES_VARIANCE_SAMPLE_DELEGATOR_STAKE_DESC',
  INDEXER_STAKES_VARIANCE_SAMPLE_ERA_IDX_ASC = 'INDEXER_STAKES_VARIANCE_SAMPLE_ERA_IDX_ASC',
  INDEXER_STAKES_VARIANCE_SAMPLE_ERA_IDX_DESC = 'INDEXER_STAKES_VARIANCE_SAMPLE_ERA_IDX_DESC',
  INDEXER_STAKES_VARIANCE_SAMPLE_ERA_ID_ASC = 'INDEXER_STAKES_VARIANCE_SAMPLE_ERA_ID_ASC',
  INDEXER_STAKES_VARIANCE_SAMPLE_ERA_ID_DESC = 'INDEXER_STAKES_VARIANCE_SAMPLE_ERA_ID_DESC',
  INDEXER_STAKES_VARIANCE_SAMPLE_ID_ASC = 'INDEXER_STAKES_VARIANCE_SAMPLE_ID_ASC',
  INDEXER_STAKES_VARIANCE_SAMPLE_ID_DESC = 'INDEXER_STAKES_VARIANCE_SAMPLE_ID_DESC',
  INDEXER_STAKES_VARIANCE_SAMPLE_INDEXER_ID_ASC = 'INDEXER_STAKES_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  INDEXER_STAKES_VARIANCE_SAMPLE_INDEXER_ID_DESC = 'INDEXER_STAKES_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  INDEXER_STAKES_VARIANCE_SAMPLE_INDEXER_STAKE_ASC = 'INDEXER_STAKES_VARIANCE_SAMPLE_INDEXER_STAKE_ASC',
  INDEXER_STAKES_VARIANCE_SAMPLE_INDEXER_STAKE_DESC = 'INDEXER_STAKES_VARIANCE_SAMPLE_INDEXER_STAKE_DESC',
  INDEXER_STAKES_VARIANCE_SAMPLE_TOTAL_STAKE_ASC = 'INDEXER_STAKES_VARIANCE_SAMPLE_TOTAL_STAKE_ASC',
  INDEXER_STAKES_VARIANCE_SAMPLE_TOTAL_STAKE_DESC = 'INDEXER_STAKES_VARIANCE_SAMPLE_TOTAL_STAKE_DESC',
  INDEXER_STAKE_WEIGHTS_AVERAGE_BLOCK_RANGE_ASC = 'INDEXER_STAKE_WEIGHTS_AVERAGE_BLOCK_RANGE_ASC',
  INDEXER_STAKE_WEIGHTS_AVERAGE_BLOCK_RANGE_DESC = 'INDEXER_STAKE_WEIGHTS_AVERAGE_BLOCK_RANGE_DESC',
  INDEXER_STAKE_WEIGHTS_AVERAGE_CREATE_AT_ASC = 'INDEXER_STAKE_WEIGHTS_AVERAGE_CREATE_AT_ASC',
  INDEXER_STAKE_WEIGHTS_AVERAGE_CREATE_AT_DESC = 'INDEXER_STAKE_WEIGHTS_AVERAGE_CREATE_AT_DESC',
  INDEXER_STAKE_WEIGHTS_AVERAGE_ERA_IDX_ASC = 'INDEXER_STAKE_WEIGHTS_AVERAGE_ERA_IDX_ASC',
  INDEXER_STAKE_WEIGHTS_AVERAGE_ERA_IDX_DESC = 'INDEXER_STAKE_WEIGHTS_AVERAGE_ERA_IDX_DESC',
  INDEXER_STAKE_WEIGHTS_AVERAGE_ID_ASC = 'INDEXER_STAKE_WEIGHTS_AVERAGE_ID_ASC',
  INDEXER_STAKE_WEIGHTS_AVERAGE_ID_DESC = 'INDEXER_STAKE_WEIGHTS_AVERAGE_ID_DESC',
  INDEXER_STAKE_WEIGHTS_AVERAGE_INDEXER_ID_ASC = 'INDEXER_STAKE_WEIGHTS_AVERAGE_INDEXER_ID_ASC',
  INDEXER_STAKE_WEIGHTS_AVERAGE_INDEXER_ID_DESC = 'INDEXER_STAKE_WEIGHTS_AVERAGE_INDEXER_ID_DESC',
  INDEXER_STAKE_WEIGHTS_AVERAGE_UPDATE_AT_ASC = 'INDEXER_STAKE_WEIGHTS_AVERAGE_UPDATE_AT_ASC',
  INDEXER_STAKE_WEIGHTS_AVERAGE_UPDATE_AT_DESC = 'INDEXER_STAKE_WEIGHTS_AVERAGE_UPDATE_AT_DESC',
  INDEXER_STAKE_WEIGHTS_AVERAGE_WEIGHT_ASC = 'INDEXER_STAKE_WEIGHTS_AVERAGE_WEIGHT_ASC',
  INDEXER_STAKE_WEIGHTS_AVERAGE_WEIGHT_DESC = 'INDEXER_STAKE_WEIGHTS_AVERAGE_WEIGHT_DESC',
  INDEXER_STAKE_WEIGHTS_BY_INDEXER_ID__COUNT_ASC = 'INDEXER_STAKE_WEIGHTS_BY_INDEXER_ID__COUNT_ASC',
  INDEXER_STAKE_WEIGHTS_BY_INDEXER_ID__COUNT_DESC = 'INDEXER_STAKE_WEIGHTS_BY_INDEXER_ID__COUNT_DESC',
  INDEXER_STAKE_WEIGHTS_COUNT_ASC = 'INDEXER_STAKE_WEIGHTS_COUNT_ASC',
  INDEXER_STAKE_WEIGHTS_COUNT_DESC = 'INDEXER_STAKE_WEIGHTS_COUNT_DESC',
  INDEXER_STAKE_WEIGHTS_DISTINCT_COUNT_BLOCK_RANGE_ASC = 'INDEXER_STAKE_WEIGHTS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  INDEXER_STAKE_WEIGHTS_DISTINCT_COUNT_BLOCK_RANGE_DESC = 'INDEXER_STAKE_WEIGHTS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  INDEXER_STAKE_WEIGHTS_DISTINCT_COUNT_CREATE_AT_ASC = 'INDEXER_STAKE_WEIGHTS_DISTINCT_COUNT_CREATE_AT_ASC',
  INDEXER_STAKE_WEIGHTS_DISTINCT_COUNT_CREATE_AT_DESC = 'INDEXER_STAKE_WEIGHTS_DISTINCT_COUNT_CREATE_AT_DESC',
  INDEXER_STAKE_WEIGHTS_DISTINCT_COUNT_ERA_IDX_ASC = 'INDEXER_STAKE_WEIGHTS_DISTINCT_COUNT_ERA_IDX_ASC',
  INDEXER_STAKE_WEIGHTS_DISTINCT_COUNT_ERA_IDX_DESC = 'INDEXER_STAKE_WEIGHTS_DISTINCT_COUNT_ERA_IDX_DESC',
  INDEXER_STAKE_WEIGHTS_DISTINCT_COUNT_ID_ASC = 'INDEXER_STAKE_WEIGHTS_DISTINCT_COUNT_ID_ASC',
  INDEXER_STAKE_WEIGHTS_DISTINCT_COUNT_ID_DESC = 'INDEXER_STAKE_WEIGHTS_DISTINCT_COUNT_ID_DESC',
  INDEXER_STAKE_WEIGHTS_DISTINCT_COUNT_INDEXER_ID_ASC = 'INDEXER_STAKE_WEIGHTS_DISTINCT_COUNT_INDEXER_ID_ASC',
  INDEXER_STAKE_WEIGHTS_DISTINCT_COUNT_INDEXER_ID_DESC = 'INDEXER_STAKE_WEIGHTS_DISTINCT_COUNT_INDEXER_ID_DESC',
  INDEXER_STAKE_WEIGHTS_DISTINCT_COUNT_UPDATE_AT_ASC = 'INDEXER_STAKE_WEIGHTS_DISTINCT_COUNT_UPDATE_AT_ASC',
  INDEXER_STAKE_WEIGHTS_DISTINCT_COUNT_UPDATE_AT_DESC = 'INDEXER_STAKE_WEIGHTS_DISTINCT_COUNT_UPDATE_AT_DESC',
  INDEXER_STAKE_WEIGHTS_DISTINCT_COUNT_WEIGHT_ASC = 'INDEXER_STAKE_WEIGHTS_DISTINCT_COUNT_WEIGHT_ASC',
  INDEXER_STAKE_WEIGHTS_DISTINCT_COUNT_WEIGHT_DESC = 'INDEXER_STAKE_WEIGHTS_DISTINCT_COUNT_WEIGHT_DESC',
  INDEXER_STAKE_WEIGHTS_MAX_BLOCK_RANGE_ASC = 'INDEXER_STAKE_WEIGHTS_MAX_BLOCK_RANGE_ASC',
  INDEXER_STAKE_WEIGHTS_MAX_BLOCK_RANGE_DESC = 'INDEXER_STAKE_WEIGHTS_MAX_BLOCK_RANGE_DESC',
  INDEXER_STAKE_WEIGHTS_MAX_CREATE_AT_ASC = 'INDEXER_STAKE_WEIGHTS_MAX_CREATE_AT_ASC',
  INDEXER_STAKE_WEIGHTS_MAX_CREATE_AT_DESC = 'INDEXER_STAKE_WEIGHTS_MAX_CREATE_AT_DESC',
  INDEXER_STAKE_WEIGHTS_MAX_ERA_IDX_ASC = 'INDEXER_STAKE_WEIGHTS_MAX_ERA_IDX_ASC',
  INDEXER_STAKE_WEIGHTS_MAX_ERA_IDX_DESC = 'INDEXER_STAKE_WEIGHTS_MAX_ERA_IDX_DESC',
  INDEXER_STAKE_WEIGHTS_MAX_ID_ASC = 'INDEXER_STAKE_WEIGHTS_MAX_ID_ASC',
  INDEXER_STAKE_WEIGHTS_MAX_ID_DESC = 'INDEXER_STAKE_WEIGHTS_MAX_ID_DESC',
  INDEXER_STAKE_WEIGHTS_MAX_INDEXER_ID_ASC = 'INDEXER_STAKE_WEIGHTS_MAX_INDEXER_ID_ASC',
  INDEXER_STAKE_WEIGHTS_MAX_INDEXER_ID_DESC = 'INDEXER_STAKE_WEIGHTS_MAX_INDEXER_ID_DESC',
  INDEXER_STAKE_WEIGHTS_MAX_UPDATE_AT_ASC = 'INDEXER_STAKE_WEIGHTS_MAX_UPDATE_AT_ASC',
  INDEXER_STAKE_WEIGHTS_MAX_UPDATE_AT_DESC = 'INDEXER_STAKE_WEIGHTS_MAX_UPDATE_AT_DESC',
  INDEXER_STAKE_WEIGHTS_MAX_WEIGHT_ASC = 'INDEXER_STAKE_WEIGHTS_MAX_WEIGHT_ASC',
  INDEXER_STAKE_WEIGHTS_MAX_WEIGHT_DESC = 'INDEXER_STAKE_WEIGHTS_MAX_WEIGHT_DESC',
  INDEXER_STAKE_WEIGHTS_MIN_BLOCK_RANGE_ASC = 'INDEXER_STAKE_WEIGHTS_MIN_BLOCK_RANGE_ASC',
  INDEXER_STAKE_WEIGHTS_MIN_BLOCK_RANGE_DESC = 'INDEXER_STAKE_WEIGHTS_MIN_BLOCK_RANGE_DESC',
  INDEXER_STAKE_WEIGHTS_MIN_CREATE_AT_ASC = 'INDEXER_STAKE_WEIGHTS_MIN_CREATE_AT_ASC',
  INDEXER_STAKE_WEIGHTS_MIN_CREATE_AT_DESC = 'INDEXER_STAKE_WEIGHTS_MIN_CREATE_AT_DESC',
  INDEXER_STAKE_WEIGHTS_MIN_ERA_IDX_ASC = 'INDEXER_STAKE_WEIGHTS_MIN_ERA_IDX_ASC',
  INDEXER_STAKE_WEIGHTS_MIN_ERA_IDX_DESC = 'INDEXER_STAKE_WEIGHTS_MIN_ERA_IDX_DESC',
  INDEXER_STAKE_WEIGHTS_MIN_ID_ASC = 'INDEXER_STAKE_WEIGHTS_MIN_ID_ASC',
  INDEXER_STAKE_WEIGHTS_MIN_ID_DESC = 'INDEXER_STAKE_WEIGHTS_MIN_ID_DESC',
  INDEXER_STAKE_WEIGHTS_MIN_INDEXER_ID_ASC = 'INDEXER_STAKE_WEIGHTS_MIN_INDEXER_ID_ASC',
  INDEXER_STAKE_WEIGHTS_MIN_INDEXER_ID_DESC = 'INDEXER_STAKE_WEIGHTS_MIN_INDEXER_ID_DESC',
  INDEXER_STAKE_WEIGHTS_MIN_UPDATE_AT_ASC = 'INDEXER_STAKE_WEIGHTS_MIN_UPDATE_AT_ASC',
  INDEXER_STAKE_WEIGHTS_MIN_UPDATE_AT_DESC = 'INDEXER_STAKE_WEIGHTS_MIN_UPDATE_AT_DESC',
  INDEXER_STAKE_WEIGHTS_MIN_WEIGHT_ASC = 'INDEXER_STAKE_WEIGHTS_MIN_WEIGHT_ASC',
  INDEXER_STAKE_WEIGHTS_MIN_WEIGHT_DESC = 'INDEXER_STAKE_WEIGHTS_MIN_WEIGHT_DESC',
  INDEXER_STAKE_WEIGHTS_STDDEV_POPULATION_BLOCK_RANGE_ASC = 'INDEXER_STAKE_WEIGHTS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  INDEXER_STAKE_WEIGHTS_STDDEV_POPULATION_BLOCK_RANGE_DESC = 'INDEXER_STAKE_WEIGHTS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  INDEXER_STAKE_WEIGHTS_STDDEV_POPULATION_CREATE_AT_ASC = 'INDEXER_STAKE_WEIGHTS_STDDEV_POPULATION_CREATE_AT_ASC',
  INDEXER_STAKE_WEIGHTS_STDDEV_POPULATION_CREATE_AT_DESC = 'INDEXER_STAKE_WEIGHTS_STDDEV_POPULATION_CREATE_AT_DESC',
  INDEXER_STAKE_WEIGHTS_STDDEV_POPULATION_ERA_IDX_ASC = 'INDEXER_STAKE_WEIGHTS_STDDEV_POPULATION_ERA_IDX_ASC',
  INDEXER_STAKE_WEIGHTS_STDDEV_POPULATION_ERA_IDX_DESC = 'INDEXER_STAKE_WEIGHTS_STDDEV_POPULATION_ERA_IDX_DESC',
  INDEXER_STAKE_WEIGHTS_STDDEV_POPULATION_ID_ASC = 'INDEXER_STAKE_WEIGHTS_STDDEV_POPULATION_ID_ASC',
  INDEXER_STAKE_WEIGHTS_STDDEV_POPULATION_ID_DESC = 'INDEXER_STAKE_WEIGHTS_STDDEV_POPULATION_ID_DESC',
  INDEXER_STAKE_WEIGHTS_STDDEV_POPULATION_INDEXER_ID_ASC = 'INDEXER_STAKE_WEIGHTS_STDDEV_POPULATION_INDEXER_ID_ASC',
  INDEXER_STAKE_WEIGHTS_STDDEV_POPULATION_INDEXER_ID_DESC = 'INDEXER_STAKE_WEIGHTS_STDDEV_POPULATION_INDEXER_ID_DESC',
  INDEXER_STAKE_WEIGHTS_STDDEV_POPULATION_UPDATE_AT_ASC = 'INDEXER_STAKE_WEIGHTS_STDDEV_POPULATION_UPDATE_AT_ASC',
  INDEXER_STAKE_WEIGHTS_STDDEV_POPULATION_UPDATE_AT_DESC = 'INDEXER_STAKE_WEIGHTS_STDDEV_POPULATION_UPDATE_AT_DESC',
  INDEXER_STAKE_WEIGHTS_STDDEV_POPULATION_WEIGHT_ASC = 'INDEXER_STAKE_WEIGHTS_STDDEV_POPULATION_WEIGHT_ASC',
  INDEXER_STAKE_WEIGHTS_STDDEV_POPULATION_WEIGHT_DESC = 'INDEXER_STAKE_WEIGHTS_STDDEV_POPULATION_WEIGHT_DESC',
  INDEXER_STAKE_WEIGHTS_STDDEV_SAMPLE_BLOCK_RANGE_ASC = 'INDEXER_STAKE_WEIGHTS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  INDEXER_STAKE_WEIGHTS_STDDEV_SAMPLE_BLOCK_RANGE_DESC = 'INDEXER_STAKE_WEIGHTS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  INDEXER_STAKE_WEIGHTS_STDDEV_SAMPLE_CREATE_AT_ASC = 'INDEXER_STAKE_WEIGHTS_STDDEV_SAMPLE_CREATE_AT_ASC',
  INDEXER_STAKE_WEIGHTS_STDDEV_SAMPLE_CREATE_AT_DESC = 'INDEXER_STAKE_WEIGHTS_STDDEV_SAMPLE_CREATE_AT_DESC',
  INDEXER_STAKE_WEIGHTS_STDDEV_SAMPLE_ERA_IDX_ASC = 'INDEXER_STAKE_WEIGHTS_STDDEV_SAMPLE_ERA_IDX_ASC',
  INDEXER_STAKE_WEIGHTS_STDDEV_SAMPLE_ERA_IDX_DESC = 'INDEXER_STAKE_WEIGHTS_STDDEV_SAMPLE_ERA_IDX_DESC',
  INDEXER_STAKE_WEIGHTS_STDDEV_SAMPLE_ID_ASC = 'INDEXER_STAKE_WEIGHTS_STDDEV_SAMPLE_ID_ASC',
  INDEXER_STAKE_WEIGHTS_STDDEV_SAMPLE_ID_DESC = 'INDEXER_STAKE_WEIGHTS_STDDEV_SAMPLE_ID_DESC',
  INDEXER_STAKE_WEIGHTS_STDDEV_SAMPLE_INDEXER_ID_ASC = 'INDEXER_STAKE_WEIGHTS_STDDEV_SAMPLE_INDEXER_ID_ASC',
  INDEXER_STAKE_WEIGHTS_STDDEV_SAMPLE_INDEXER_ID_DESC = 'INDEXER_STAKE_WEIGHTS_STDDEV_SAMPLE_INDEXER_ID_DESC',
  INDEXER_STAKE_WEIGHTS_STDDEV_SAMPLE_UPDATE_AT_ASC = 'INDEXER_STAKE_WEIGHTS_STDDEV_SAMPLE_UPDATE_AT_ASC',
  INDEXER_STAKE_WEIGHTS_STDDEV_SAMPLE_UPDATE_AT_DESC = 'INDEXER_STAKE_WEIGHTS_STDDEV_SAMPLE_UPDATE_AT_DESC',
  INDEXER_STAKE_WEIGHTS_STDDEV_SAMPLE_WEIGHT_ASC = 'INDEXER_STAKE_WEIGHTS_STDDEV_SAMPLE_WEIGHT_ASC',
  INDEXER_STAKE_WEIGHTS_STDDEV_SAMPLE_WEIGHT_DESC = 'INDEXER_STAKE_WEIGHTS_STDDEV_SAMPLE_WEIGHT_DESC',
  INDEXER_STAKE_WEIGHTS_SUM_BLOCK_RANGE_ASC = 'INDEXER_STAKE_WEIGHTS_SUM_BLOCK_RANGE_ASC',
  INDEXER_STAKE_WEIGHTS_SUM_BLOCK_RANGE_DESC = 'INDEXER_STAKE_WEIGHTS_SUM_BLOCK_RANGE_DESC',
  INDEXER_STAKE_WEIGHTS_SUM_CREATE_AT_ASC = 'INDEXER_STAKE_WEIGHTS_SUM_CREATE_AT_ASC',
  INDEXER_STAKE_WEIGHTS_SUM_CREATE_AT_DESC = 'INDEXER_STAKE_WEIGHTS_SUM_CREATE_AT_DESC',
  INDEXER_STAKE_WEIGHTS_SUM_ERA_IDX_ASC = 'INDEXER_STAKE_WEIGHTS_SUM_ERA_IDX_ASC',
  INDEXER_STAKE_WEIGHTS_SUM_ERA_IDX_DESC = 'INDEXER_STAKE_WEIGHTS_SUM_ERA_IDX_DESC',
  INDEXER_STAKE_WEIGHTS_SUM_ID_ASC = 'INDEXER_STAKE_WEIGHTS_SUM_ID_ASC',
  INDEXER_STAKE_WEIGHTS_SUM_ID_DESC = 'INDEXER_STAKE_WEIGHTS_SUM_ID_DESC',
  INDEXER_STAKE_WEIGHTS_SUM_INDEXER_ID_ASC = 'INDEXER_STAKE_WEIGHTS_SUM_INDEXER_ID_ASC',
  INDEXER_STAKE_WEIGHTS_SUM_INDEXER_ID_DESC = 'INDEXER_STAKE_WEIGHTS_SUM_INDEXER_ID_DESC',
  INDEXER_STAKE_WEIGHTS_SUM_UPDATE_AT_ASC = 'INDEXER_STAKE_WEIGHTS_SUM_UPDATE_AT_ASC',
  INDEXER_STAKE_WEIGHTS_SUM_UPDATE_AT_DESC = 'INDEXER_STAKE_WEIGHTS_SUM_UPDATE_AT_DESC',
  INDEXER_STAKE_WEIGHTS_SUM_WEIGHT_ASC = 'INDEXER_STAKE_WEIGHTS_SUM_WEIGHT_ASC',
  INDEXER_STAKE_WEIGHTS_SUM_WEIGHT_DESC = 'INDEXER_STAKE_WEIGHTS_SUM_WEIGHT_DESC',
  INDEXER_STAKE_WEIGHTS_VARIANCE_POPULATION_BLOCK_RANGE_ASC = 'INDEXER_STAKE_WEIGHTS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  INDEXER_STAKE_WEIGHTS_VARIANCE_POPULATION_BLOCK_RANGE_DESC = 'INDEXER_STAKE_WEIGHTS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  INDEXER_STAKE_WEIGHTS_VARIANCE_POPULATION_CREATE_AT_ASC = 'INDEXER_STAKE_WEIGHTS_VARIANCE_POPULATION_CREATE_AT_ASC',
  INDEXER_STAKE_WEIGHTS_VARIANCE_POPULATION_CREATE_AT_DESC = 'INDEXER_STAKE_WEIGHTS_VARIANCE_POPULATION_CREATE_AT_DESC',
  INDEXER_STAKE_WEIGHTS_VARIANCE_POPULATION_ERA_IDX_ASC = 'INDEXER_STAKE_WEIGHTS_VARIANCE_POPULATION_ERA_IDX_ASC',
  INDEXER_STAKE_WEIGHTS_VARIANCE_POPULATION_ERA_IDX_DESC = 'INDEXER_STAKE_WEIGHTS_VARIANCE_POPULATION_ERA_IDX_DESC',
  INDEXER_STAKE_WEIGHTS_VARIANCE_POPULATION_ID_ASC = 'INDEXER_STAKE_WEIGHTS_VARIANCE_POPULATION_ID_ASC',
  INDEXER_STAKE_WEIGHTS_VARIANCE_POPULATION_ID_DESC = 'INDEXER_STAKE_WEIGHTS_VARIANCE_POPULATION_ID_DESC',
  INDEXER_STAKE_WEIGHTS_VARIANCE_POPULATION_INDEXER_ID_ASC = 'INDEXER_STAKE_WEIGHTS_VARIANCE_POPULATION_INDEXER_ID_ASC',
  INDEXER_STAKE_WEIGHTS_VARIANCE_POPULATION_INDEXER_ID_DESC = 'INDEXER_STAKE_WEIGHTS_VARIANCE_POPULATION_INDEXER_ID_DESC',
  INDEXER_STAKE_WEIGHTS_VARIANCE_POPULATION_UPDATE_AT_ASC = 'INDEXER_STAKE_WEIGHTS_VARIANCE_POPULATION_UPDATE_AT_ASC',
  INDEXER_STAKE_WEIGHTS_VARIANCE_POPULATION_UPDATE_AT_DESC = 'INDEXER_STAKE_WEIGHTS_VARIANCE_POPULATION_UPDATE_AT_DESC',
  INDEXER_STAKE_WEIGHTS_VARIANCE_POPULATION_WEIGHT_ASC = 'INDEXER_STAKE_WEIGHTS_VARIANCE_POPULATION_WEIGHT_ASC',
  INDEXER_STAKE_WEIGHTS_VARIANCE_POPULATION_WEIGHT_DESC = 'INDEXER_STAKE_WEIGHTS_VARIANCE_POPULATION_WEIGHT_DESC',
  INDEXER_STAKE_WEIGHTS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC = 'INDEXER_STAKE_WEIGHTS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  INDEXER_STAKE_WEIGHTS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC = 'INDEXER_STAKE_WEIGHTS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  INDEXER_STAKE_WEIGHTS_VARIANCE_SAMPLE_CREATE_AT_ASC = 'INDEXER_STAKE_WEIGHTS_VARIANCE_SAMPLE_CREATE_AT_ASC',
  INDEXER_STAKE_WEIGHTS_VARIANCE_SAMPLE_CREATE_AT_DESC = 'INDEXER_STAKE_WEIGHTS_VARIANCE_SAMPLE_CREATE_AT_DESC',
  INDEXER_STAKE_WEIGHTS_VARIANCE_SAMPLE_ERA_IDX_ASC = 'INDEXER_STAKE_WEIGHTS_VARIANCE_SAMPLE_ERA_IDX_ASC',
  INDEXER_STAKE_WEIGHTS_VARIANCE_SAMPLE_ERA_IDX_DESC = 'INDEXER_STAKE_WEIGHTS_VARIANCE_SAMPLE_ERA_IDX_DESC',
  INDEXER_STAKE_WEIGHTS_VARIANCE_SAMPLE_ID_ASC = 'INDEXER_STAKE_WEIGHTS_VARIANCE_SAMPLE_ID_ASC',
  INDEXER_STAKE_WEIGHTS_VARIANCE_SAMPLE_ID_DESC = 'INDEXER_STAKE_WEIGHTS_VARIANCE_SAMPLE_ID_DESC',
  INDEXER_STAKE_WEIGHTS_VARIANCE_SAMPLE_INDEXER_ID_ASC = 'INDEXER_STAKE_WEIGHTS_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  INDEXER_STAKE_WEIGHTS_VARIANCE_SAMPLE_INDEXER_ID_DESC = 'INDEXER_STAKE_WEIGHTS_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  INDEXER_STAKE_WEIGHTS_VARIANCE_SAMPLE_UPDATE_AT_ASC = 'INDEXER_STAKE_WEIGHTS_VARIANCE_SAMPLE_UPDATE_AT_ASC',
  INDEXER_STAKE_WEIGHTS_VARIANCE_SAMPLE_UPDATE_AT_DESC = 'INDEXER_STAKE_WEIGHTS_VARIANCE_SAMPLE_UPDATE_AT_DESC',
  INDEXER_STAKE_WEIGHTS_VARIANCE_SAMPLE_WEIGHT_ASC = 'INDEXER_STAKE_WEIGHTS_VARIANCE_SAMPLE_WEIGHT_ASC',
  INDEXER_STAKE_WEIGHTS_VARIANCE_SAMPLE_WEIGHT_DESC = 'INDEXER_STAKE_WEIGHTS_VARIANCE_SAMPLE_WEIGHT_DESC',
  LAST_CLAIM_ERA_ASC = 'LAST_CLAIM_ERA_ASC',
  LAST_CLAIM_ERA_DESC = 'LAST_CLAIM_ERA_DESC',
  LAST_EVENT_ASC = 'LAST_EVENT_ASC',
  LAST_EVENT_DESC = 'LAST_EVENT_DESC',
  LAST_SETTLED_ERA_ASC = 'LAST_SETTLED_ERA_ASC',
  LAST_SETTLED_ERA_DESC = 'LAST_SETTLED_ERA_DESC',
  MAX_UNSTAKE_AMOUNT_ASC = 'MAX_UNSTAKE_AMOUNT_ASC',
  MAX_UNSTAKE_AMOUNT_DESC = 'MAX_UNSTAKE_AMOUNT_DESC',
  METADATA_ASC = 'METADATA_ASC',
  METADATA_DESC = 'METADATA_DESC',
  NATURAL = 'NATURAL',
  PRIMARY_KEY_ASC = 'PRIMARY_KEY_ASC',
  PRIMARY_KEY_DESC = 'PRIMARY_KEY_DESC',
  PROJECTS_AVERAGE_BLOCK_RANGE_ASC = 'PROJECTS_AVERAGE_BLOCK_RANGE_ASC',
  PROJECTS_AVERAGE_BLOCK_RANGE_DESC = 'PROJECTS_AVERAGE_BLOCK_RANGE_DESC',
  PROJECTS_AVERAGE_CREATED_BLOCK_ASC = 'PROJECTS_AVERAGE_CREATED_BLOCK_ASC',
  PROJECTS_AVERAGE_CREATED_BLOCK_DESC = 'PROJECTS_AVERAGE_CREATED_BLOCK_DESC',
  PROJECTS_AVERAGE_DEPLOYMENT_ID_ASC = 'PROJECTS_AVERAGE_DEPLOYMENT_ID_ASC',
  PROJECTS_AVERAGE_DEPLOYMENT_ID_DESC = 'PROJECTS_AVERAGE_DEPLOYMENT_ID_DESC',
  PROJECTS_AVERAGE_ID_ASC = 'PROJECTS_AVERAGE_ID_ASC',
  PROJECTS_AVERAGE_ID_DESC = 'PROJECTS_AVERAGE_ID_DESC',
  PROJECTS_AVERAGE_INDEXER_ID_ASC = 'PROJECTS_AVERAGE_INDEXER_ID_ASC',
  PROJECTS_AVERAGE_INDEXER_ID_DESC = 'PROJECTS_AVERAGE_INDEXER_ID_DESC',
  PROJECTS_AVERAGE_LAST_EVENT_ASC = 'PROJECTS_AVERAGE_LAST_EVENT_ASC',
  PROJECTS_AVERAGE_LAST_EVENT_DESC = 'PROJECTS_AVERAGE_LAST_EVENT_DESC',
  PROJECTS_AVERAGE_STATUS_ASC = 'PROJECTS_AVERAGE_STATUS_ASC',
  PROJECTS_AVERAGE_STATUS_DESC = 'PROJECTS_AVERAGE_STATUS_DESC',
  PROJECTS_AVERAGE_TIMESTAMP_ASC = 'PROJECTS_AVERAGE_TIMESTAMP_ASC',
  PROJECTS_AVERAGE_TIMESTAMP_DESC = 'PROJECTS_AVERAGE_TIMESTAMP_DESC',
  PROJECTS_COUNT_ASC = 'PROJECTS_COUNT_ASC',
  PROJECTS_COUNT_DESC = 'PROJECTS_COUNT_DESC',
  PROJECTS_DISTINCT_COUNT_BLOCK_RANGE_ASC = 'PROJECTS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  PROJECTS_DISTINCT_COUNT_BLOCK_RANGE_DESC = 'PROJECTS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  PROJECTS_DISTINCT_COUNT_CREATED_BLOCK_ASC = 'PROJECTS_DISTINCT_COUNT_CREATED_BLOCK_ASC',
  PROJECTS_DISTINCT_COUNT_CREATED_BLOCK_DESC = 'PROJECTS_DISTINCT_COUNT_CREATED_BLOCK_DESC',
  PROJECTS_DISTINCT_COUNT_DEPLOYMENT_ID_ASC = 'PROJECTS_DISTINCT_COUNT_DEPLOYMENT_ID_ASC',
  PROJECTS_DISTINCT_COUNT_DEPLOYMENT_ID_DESC = 'PROJECTS_DISTINCT_COUNT_DEPLOYMENT_ID_DESC',
  PROJECTS_DISTINCT_COUNT_ID_ASC = 'PROJECTS_DISTINCT_COUNT_ID_ASC',
  PROJECTS_DISTINCT_COUNT_ID_DESC = 'PROJECTS_DISTINCT_COUNT_ID_DESC',
  PROJECTS_DISTINCT_COUNT_INDEXER_ID_ASC = 'PROJECTS_DISTINCT_COUNT_INDEXER_ID_ASC',
  PROJECTS_DISTINCT_COUNT_INDEXER_ID_DESC = 'PROJECTS_DISTINCT_COUNT_INDEXER_ID_DESC',
  PROJECTS_DISTINCT_COUNT_LAST_EVENT_ASC = 'PROJECTS_DISTINCT_COUNT_LAST_EVENT_ASC',
  PROJECTS_DISTINCT_COUNT_LAST_EVENT_DESC = 'PROJECTS_DISTINCT_COUNT_LAST_EVENT_DESC',
  PROJECTS_DISTINCT_COUNT_STATUS_ASC = 'PROJECTS_DISTINCT_COUNT_STATUS_ASC',
  PROJECTS_DISTINCT_COUNT_STATUS_DESC = 'PROJECTS_DISTINCT_COUNT_STATUS_DESC',
  PROJECTS_DISTINCT_COUNT_TIMESTAMP_ASC = 'PROJECTS_DISTINCT_COUNT_TIMESTAMP_ASC',
  PROJECTS_DISTINCT_COUNT_TIMESTAMP_DESC = 'PROJECTS_DISTINCT_COUNT_TIMESTAMP_DESC',
  PROJECTS_MAX_BLOCK_RANGE_ASC = 'PROJECTS_MAX_BLOCK_RANGE_ASC',
  PROJECTS_MAX_BLOCK_RANGE_DESC = 'PROJECTS_MAX_BLOCK_RANGE_DESC',
  PROJECTS_MAX_CREATED_BLOCK_ASC = 'PROJECTS_MAX_CREATED_BLOCK_ASC',
  PROJECTS_MAX_CREATED_BLOCK_DESC = 'PROJECTS_MAX_CREATED_BLOCK_DESC',
  PROJECTS_MAX_DEPLOYMENT_ID_ASC = 'PROJECTS_MAX_DEPLOYMENT_ID_ASC',
  PROJECTS_MAX_DEPLOYMENT_ID_DESC = 'PROJECTS_MAX_DEPLOYMENT_ID_DESC',
  PROJECTS_MAX_ID_ASC = 'PROJECTS_MAX_ID_ASC',
  PROJECTS_MAX_ID_DESC = 'PROJECTS_MAX_ID_DESC',
  PROJECTS_MAX_INDEXER_ID_ASC = 'PROJECTS_MAX_INDEXER_ID_ASC',
  PROJECTS_MAX_INDEXER_ID_DESC = 'PROJECTS_MAX_INDEXER_ID_DESC',
  PROJECTS_MAX_LAST_EVENT_ASC = 'PROJECTS_MAX_LAST_EVENT_ASC',
  PROJECTS_MAX_LAST_EVENT_DESC = 'PROJECTS_MAX_LAST_EVENT_DESC',
  PROJECTS_MAX_STATUS_ASC = 'PROJECTS_MAX_STATUS_ASC',
  PROJECTS_MAX_STATUS_DESC = 'PROJECTS_MAX_STATUS_DESC',
  PROJECTS_MAX_TIMESTAMP_ASC = 'PROJECTS_MAX_TIMESTAMP_ASC',
  PROJECTS_MAX_TIMESTAMP_DESC = 'PROJECTS_MAX_TIMESTAMP_DESC',
  PROJECTS_MIN_BLOCK_RANGE_ASC = 'PROJECTS_MIN_BLOCK_RANGE_ASC',
  PROJECTS_MIN_BLOCK_RANGE_DESC = 'PROJECTS_MIN_BLOCK_RANGE_DESC',
  PROJECTS_MIN_CREATED_BLOCK_ASC = 'PROJECTS_MIN_CREATED_BLOCK_ASC',
  PROJECTS_MIN_CREATED_BLOCK_DESC = 'PROJECTS_MIN_CREATED_BLOCK_DESC',
  PROJECTS_MIN_DEPLOYMENT_ID_ASC = 'PROJECTS_MIN_DEPLOYMENT_ID_ASC',
  PROJECTS_MIN_DEPLOYMENT_ID_DESC = 'PROJECTS_MIN_DEPLOYMENT_ID_DESC',
  PROJECTS_MIN_ID_ASC = 'PROJECTS_MIN_ID_ASC',
  PROJECTS_MIN_ID_DESC = 'PROJECTS_MIN_ID_DESC',
  PROJECTS_MIN_INDEXER_ID_ASC = 'PROJECTS_MIN_INDEXER_ID_ASC',
  PROJECTS_MIN_INDEXER_ID_DESC = 'PROJECTS_MIN_INDEXER_ID_DESC',
  PROJECTS_MIN_LAST_EVENT_ASC = 'PROJECTS_MIN_LAST_EVENT_ASC',
  PROJECTS_MIN_LAST_EVENT_DESC = 'PROJECTS_MIN_LAST_EVENT_DESC',
  PROJECTS_MIN_STATUS_ASC = 'PROJECTS_MIN_STATUS_ASC',
  PROJECTS_MIN_STATUS_DESC = 'PROJECTS_MIN_STATUS_DESC',
  PROJECTS_MIN_TIMESTAMP_ASC = 'PROJECTS_MIN_TIMESTAMP_ASC',
  PROJECTS_MIN_TIMESTAMP_DESC = 'PROJECTS_MIN_TIMESTAMP_DESC',
  PROJECTS_STDDEV_POPULATION_BLOCK_RANGE_ASC = 'PROJECTS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  PROJECTS_STDDEV_POPULATION_BLOCK_RANGE_DESC = 'PROJECTS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  PROJECTS_STDDEV_POPULATION_CREATED_BLOCK_ASC = 'PROJECTS_STDDEV_POPULATION_CREATED_BLOCK_ASC',
  PROJECTS_STDDEV_POPULATION_CREATED_BLOCK_DESC = 'PROJECTS_STDDEV_POPULATION_CREATED_BLOCK_DESC',
  PROJECTS_STDDEV_POPULATION_DEPLOYMENT_ID_ASC = 'PROJECTS_STDDEV_POPULATION_DEPLOYMENT_ID_ASC',
  PROJECTS_STDDEV_POPULATION_DEPLOYMENT_ID_DESC = 'PROJECTS_STDDEV_POPULATION_DEPLOYMENT_ID_DESC',
  PROJECTS_STDDEV_POPULATION_ID_ASC = 'PROJECTS_STDDEV_POPULATION_ID_ASC',
  PROJECTS_STDDEV_POPULATION_ID_DESC = 'PROJECTS_STDDEV_POPULATION_ID_DESC',
  PROJECTS_STDDEV_POPULATION_INDEXER_ID_ASC = 'PROJECTS_STDDEV_POPULATION_INDEXER_ID_ASC',
  PROJECTS_STDDEV_POPULATION_INDEXER_ID_DESC = 'PROJECTS_STDDEV_POPULATION_INDEXER_ID_DESC',
  PROJECTS_STDDEV_POPULATION_LAST_EVENT_ASC = 'PROJECTS_STDDEV_POPULATION_LAST_EVENT_ASC',
  PROJECTS_STDDEV_POPULATION_LAST_EVENT_DESC = 'PROJECTS_STDDEV_POPULATION_LAST_EVENT_DESC',
  PROJECTS_STDDEV_POPULATION_STATUS_ASC = 'PROJECTS_STDDEV_POPULATION_STATUS_ASC',
  PROJECTS_STDDEV_POPULATION_STATUS_DESC = 'PROJECTS_STDDEV_POPULATION_STATUS_DESC',
  PROJECTS_STDDEV_POPULATION_TIMESTAMP_ASC = 'PROJECTS_STDDEV_POPULATION_TIMESTAMP_ASC',
  PROJECTS_STDDEV_POPULATION_TIMESTAMP_DESC = 'PROJECTS_STDDEV_POPULATION_TIMESTAMP_DESC',
  PROJECTS_STDDEV_SAMPLE_BLOCK_RANGE_ASC = 'PROJECTS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  PROJECTS_STDDEV_SAMPLE_BLOCK_RANGE_DESC = 'PROJECTS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  PROJECTS_STDDEV_SAMPLE_CREATED_BLOCK_ASC = 'PROJECTS_STDDEV_SAMPLE_CREATED_BLOCK_ASC',
  PROJECTS_STDDEV_SAMPLE_CREATED_BLOCK_DESC = 'PROJECTS_STDDEV_SAMPLE_CREATED_BLOCK_DESC',
  PROJECTS_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC = 'PROJECTS_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC',
  PROJECTS_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC = 'PROJECTS_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC',
  PROJECTS_STDDEV_SAMPLE_ID_ASC = 'PROJECTS_STDDEV_SAMPLE_ID_ASC',
  PROJECTS_STDDEV_SAMPLE_ID_DESC = 'PROJECTS_STDDEV_SAMPLE_ID_DESC',
  PROJECTS_STDDEV_SAMPLE_INDEXER_ID_ASC = 'PROJECTS_STDDEV_SAMPLE_INDEXER_ID_ASC',
  PROJECTS_STDDEV_SAMPLE_INDEXER_ID_DESC = 'PROJECTS_STDDEV_SAMPLE_INDEXER_ID_DESC',
  PROJECTS_STDDEV_SAMPLE_LAST_EVENT_ASC = 'PROJECTS_STDDEV_SAMPLE_LAST_EVENT_ASC',
  PROJECTS_STDDEV_SAMPLE_LAST_EVENT_DESC = 'PROJECTS_STDDEV_SAMPLE_LAST_EVENT_DESC',
  PROJECTS_STDDEV_SAMPLE_STATUS_ASC = 'PROJECTS_STDDEV_SAMPLE_STATUS_ASC',
  PROJECTS_STDDEV_SAMPLE_STATUS_DESC = 'PROJECTS_STDDEV_SAMPLE_STATUS_DESC',
  PROJECTS_STDDEV_SAMPLE_TIMESTAMP_ASC = 'PROJECTS_STDDEV_SAMPLE_TIMESTAMP_ASC',
  PROJECTS_STDDEV_SAMPLE_TIMESTAMP_DESC = 'PROJECTS_STDDEV_SAMPLE_TIMESTAMP_DESC',
  PROJECTS_SUM_BLOCK_RANGE_ASC = 'PROJECTS_SUM_BLOCK_RANGE_ASC',
  PROJECTS_SUM_BLOCK_RANGE_DESC = 'PROJECTS_SUM_BLOCK_RANGE_DESC',
  PROJECTS_SUM_CREATED_BLOCK_ASC = 'PROJECTS_SUM_CREATED_BLOCK_ASC',
  PROJECTS_SUM_CREATED_BLOCK_DESC = 'PROJECTS_SUM_CREATED_BLOCK_DESC',
  PROJECTS_SUM_DEPLOYMENT_ID_ASC = 'PROJECTS_SUM_DEPLOYMENT_ID_ASC',
  PROJECTS_SUM_DEPLOYMENT_ID_DESC = 'PROJECTS_SUM_DEPLOYMENT_ID_DESC',
  PROJECTS_SUM_ID_ASC = 'PROJECTS_SUM_ID_ASC',
  PROJECTS_SUM_ID_DESC = 'PROJECTS_SUM_ID_DESC',
  PROJECTS_SUM_INDEXER_ID_ASC = 'PROJECTS_SUM_INDEXER_ID_ASC',
  PROJECTS_SUM_INDEXER_ID_DESC = 'PROJECTS_SUM_INDEXER_ID_DESC',
  PROJECTS_SUM_LAST_EVENT_ASC = 'PROJECTS_SUM_LAST_EVENT_ASC',
  PROJECTS_SUM_LAST_EVENT_DESC = 'PROJECTS_SUM_LAST_EVENT_DESC',
  PROJECTS_SUM_STATUS_ASC = 'PROJECTS_SUM_STATUS_ASC',
  PROJECTS_SUM_STATUS_DESC = 'PROJECTS_SUM_STATUS_DESC',
  PROJECTS_SUM_TIMESTAMP_ASC = 'PROJECTS_SUM_TIMESTAMP_ASC',
  PROJECTS_SUM_TIMESTAMP_DESC = 'PROJECTS_SUM_TIMESTAMP_DESC',
  PROJECTS_VARIANCE_POPULATION_BLOCK_RANGE_ASC = 'PROJECTS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  PROJECTS_VARIANCE_POPULATION_BLOCK_RANGE_DESC = 'PROJECTS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  PROJECTS_VARIANCE_POPULATION_CREATED_BLOCK_ASC = 'PROJECTS_VARIANCE_POPULATION_CREATED_BLOCK_ASC',
  PROJECTS_VARIANCE_POPULATION_CREATED_BLOCK_DESC = 'PROJECTS_VARIANCE_POPULATION_CREATED_BLOCK_DESC',
  PROJECTS_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC = 'PROJECTS_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC',
  PROJECTS_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC = 'PROJECTS_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC',
  PROJECTS_VARIANCE_POPULATION_ID_ASC = 'PROJECTS_VARIANCE_POPULATION_ID_ASC',
  PROJECTS_VARIANCE_POPULATION_ID_DESC = 'PROJECTS_VARIANCE_POPULATION_ID_DESC',
  PROJECTS_VARIANCE_POPULATION_INDEXER_ID_ASC = 'PROJECTS_VARIANCE_POPULATION_INDEXER_ID_ASC',
  PROJECTS_VARIANCE_POPULATION_INDEXER_ID_DESC = 'PROJECTS_VARIANCE_POPULATION_INDEXER_ID_DESC',
  PROJECTS_VARIANCE_POPULATION_LAST_EVENT_ASC = 'PROJECTS_VARIANCE_POPULATION_LAST_EVENT_ASC',
  PROJECTS_VARIANCE_POPULATION_LAST_EVENT_DESC = 'PROJECTS_VARIANCE_POPULATION_LAST_EVENT_DESC',
  PROJECTS_VARIANCE_POPULATION_STATUS_ASC = 'PROJECTS_VARIANCE_POPULATION_STATUS_ASC',
  PROJECTS_VARIANCE_POPULATION_STATUS_DESC = 'PROJECTS_VARIANCE_POPULATION_STATUS_DESC',
  PROJECTS_VARIANCE_POPULATION_TIMESTAMP_ASC = 'PROJECTS_VARIANCE_POPULATION_TIMESTAMP_ASC',
  PROJECTS_VARIANCE_POPULATION_TIMESTAMP_DESC = 'PROJECTS_VARIANCE_POPULATION_TIMESTAMP_DESC',
  PROJECTS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC = 'PROJECTS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  PROJECTS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC = 'PROJECTS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  PROJECTS_VARIANCE_SAMPLE_CREATED_BLOCK_ASC = 'PROJECTS_VARIANCE_SAMPLE_CREATED_BLOCK_ASC',
  PROJECTS_VARIANCE_SAMPLE_CREATED_BLOCK_DESC = 'PROJECTS_VARIANCE_SAMPLE_CREATED_BLOCK_DESC',
  PROJECTS_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC = 'PROJECTS_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC',
  PROJECTS_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC = 'PROJECTS_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC',
  PROJECTS_VARIANCE_SAMPLE_ID_ASC = 'PROJECTS_VARIANCE_SAMPLE_ID_ASC',
  PROJECTS_VARIANCE_SAMPLE_ID_DESC = 'PROJECTS_VARIANCE_SAMPLE_ID_DESC',
  PROJECTS_VARIANCE_SAMPLE_INDEXER_ID_ASC = 'PROJECTS_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  PROJECTS_VARIANCE_SAMPLE_INDEXER_ID_DESC = 'PROJECTS_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  PROJECTS_VARIANCE_SAMPLE_LAST_EVENT_ASC = 'PROJECTS_VARIANCE_SAMPLE_LAST_EVENT_ASC',
  PROJECTS_VARIANCE_SAMPLE_LAST_EVENT_DESC = 'PROJECTS_VARIANCE_SAMPLE_LAST_EVENT_DESC',
  PROJECTS_VARIANCE_SAMPLE_STATUS_ASC = 'PROJECTS_VARIANCE_SAMPLE_STATUS_ASC',
  PROJECTS_VARIANCE_SAMPLE_STATUS_DESC = 'PROJECTS_VARIANCE_SAMPLE_STATUS_DESC',
  PROJECTS_VARIANCE_SAMPLE_TIMESTAMP_ASC = 'PROJECTS_VARIANCE_SAMPLE_TIMESTAMP_ASC',
  PROJECTS_VARIANCE_SAMPLE_TIMESTAMP_DESC = 'PROJECTS_VARIANCE_SAMPLE_TIMESTAMP_DESC',
  REWARDS_AVERAGE_AMOUNT_ASC = 'REWARDS_AVERAGE_AMOUNT_ASC',
  REWARDS_AVERAGE_AMOUNT_DESC = 'REWARDS_AVERAGE_AMOUNT_DESC',
  REWARDS_AVERAGE_BLOCK_RANGE_ASC = 'REWARDS_AVERAGE_BLOCK_RANGE_ASC',
  REWARDS_AVERAGE_BLOCK_RANGE_DESC = 'REWARDS_AVERAGE_BLOCK_RANGE_DESC',
  REWARDS_AVERAGE_CREATED_BLOCK_ASC = 'REWARDS_AVERAGE_CREATED_BLOCK_ASC',
  REWARDS_AVERAGE_CREATED_BLOCK_DESC = 'REWARDS_AVERAGE_CREATED_BLOCK_DESC',
  REWARDS_AVERAGE_ERA_IDX_ASC = 'REWARDS_AVERAGE_ERA_IDX_ASC',
  REWARDS_AVERAGE_ERA_IDX_DESC = 'REWARDS_AVERAGE_ERA_IDX_DESC',
  REWARDS_AVERAGE_ERA_ID_ASC = 'REWARDS_AVERAGE_ERA_ID_ASC',
  REWARDS_AVERAGE_ERA_ID_DESC = 'REWARDS_AVERAGE_ERA_ID_DESC',
  REWARDS_AVERAGE_ID_ASC = 'REWARDS_AVERAGE_ID_ASC',
  REWARDS_AVERAGE_ID_DESC = 'REWARDS_AVERAGE_ID_DESC',
  REWARDS_AVERAGE_INDEXER_ID_ASC = 'REWARDS_AVERAGE_INDEXER_ID_ASC',
  REWARDS_AVERAGE_INDEXER_ID_DESC = 'REWARDS_AVERAGE_INDEXER_ID_DESC',
  REWARDS_AVERAGE_LAST_EVENT_ASC = 'REWARDS_AVERAGE_LAST_EVENT_ASC',
  REWARDS_AVERAGE_LAST_EVENT_DESC = 'REWARDS_AVERAGE_LAST_EVENT_DESC',
  REWARDS_COUNT_ASC = 'REWARDS_COUNT_ASC',
  REWARDS_COUNT_DESC = 'REWARDS_COUNT_DESC',
  REWARDS_DISTINCT_COUNT_AMOUNT_ASC = 'REWARDS_DISTINCT_COUNT_AMOUNT_ASC',
  REWARDS_DISTINCT_COUNT_AMOUNT_DESC = 'REWARDS_DISTINCT_COUNT_AMOUNT_DESC',
  REWARDS_DISTINCT_COUNT_BLOCK_RANGE_ASC = 'REWARDS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  REWARDS_DISTINCT_COUNT_BLOCK_RANGE_DESC = 'REWARDS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  REWARDS_DISTINCT_COUNT_CREATED_BLOCK_ASC = 'REWARDS_DISTINCT_COUNT_CREATED_BLOCK_ASC',
  REWARDS_DISTINCT_COUNT_CREATED_BLOCK_DESC = 'REWARDS_DISTINCT_COUNT_CREATED_BLOCK_DESC',
  REWARDS_DISTINCT_COUNT_ERA_IDX_ASC = 'REWARDS_DISTINCT_COUNT_ERA_IDX_ASC',
  REWARDS_DISTINCT_COUNT_ERA_IDX_DESC = 'REWARDS_DISTINCT_COUNT_ERA_IDX_DESC',
  REWARDS_DISTINCT_COUNT_ERA_ID_ASC = 'REWARDS_DISTINCT_COUNT_ERA_ID_ASC',
  REWARDS_DISTINCT_COUNT_ERA_ID_DESC = 'REWARDS_DISTINCT_COUNT_ERA_ID_DESC',
  REWARDS_DISTINCT_COUNT_ID_ASC = 'REWARDS_DISTINCT_COUNT_ID_ASC',
  REWARDS_DISTINCT_COUNT_ID_DESC = 'REWARDS_DISTINCT_COUNT_ID_DESC',
  REWARDS_DISTINCT_COUNT_INDEXER_ID_ASC = 'REWARDS_DISTINCT_COUNT_INDEXER_ID_ASC',
  REWARDS_DISTINCT_COUNT_INDEXER_ID_DESC = 'REWARDS_DISTINCT_COUNT_INDEXER_ID_DESC',
  REWARDS_DISTINCT_COUNT_LAST_EVENT_ASC = 'REWARDS_DISTINCT_COUNT_LAST_EVENT_ASC',
  REWARDS_DISTINCT_COUNT_LAST_EVENT_DESC = 'REWARDS_DISTINCT_COUNT_LAST_EVENT_DESC',
  REWARDS_MAX_AMOUNT_ASC = 'REWARDS_MAX_AMOUNT_ASC',
  REWARDS_MAX_AMOUNT_DESC = 'REWARDS_MAX_AMOUNT_DESC',
  REWARDS_MAX_BLOCK_RANGE_ASC = 'REWARDS_MAX_BLOCK_RANGE_ASC',
  REWARDS_MAX_BLOCK_RANGE_DESC = 'REWARDS_MAX_BLOCK_RANGE_DESC',
  REWARDS_MAX_CREATED_BLOCK_ASC = 'REWARDS_MAX_CREATED_BLOCK_ASC',
  REWARDS_MAX_CREATED_BLOCK_DESC = 'REWARDS_MAX_CREATED_BLOCK_DESC',
  REWARDS_MAX_ERA_IDX_ASC = 'REWARDS_MAX_ERA_IDX_ASC',
  REWARDS_MAX_ERA_IDX_DESC = 'REWARDS_MAX_ERA_IDX_DESC',
  REWARDS_MAX_ERA_ID_ASC = 'REWARDS_MAX_ERA_ID_ASC',
  REWARDS_MAX_ERA_ID_DESC = 'REWARDS_MAX_ERA_ID_DESC',
  REWARDS_MAX_ID_ASC = 'REWARDS_MAX_ID_ASC',
  REWARDS_MAX_ID_DESC = 'REWARDS_MAX_ID_DESC',
  REWARDS_MAX_INDEXER_ID_ASC = 'REWARDS_MAX_INDEXER_ID_ASC',
  REWARDS_MAX_INDEXER_ID_DESC = 'REWARDS_MAX_INDEXER_ID_DESC',
  REWARDS_MAX_LAST_EVENT_ASC = 'REWARDS_MAX_LAST_EVENT_ASC',
  REWARDS_MAX_LAST_EVENT_DESC = 'REWARDS_MAX_LAST_EVENT_DESC',
  REWARDS_MIN_AMOUNT_ASC = 'REWARDS_MIN_AMOUNT_ASC',
  REWARDS_MIN_AMOUNT_DESC = 'REWARDS_MIN_AMOUNT_DESC',
  REWARDS_MIN_BLOCK_RANGE_ASC = 'REWARDS_MIN_BLOCK_RANGE_ASC',
  REWARDS_MIN_BLOCK_RANGE_DESC = 'REWARDS_MIN_BLOCK_RANGE_DESC',
  REWARDS_MIN_CREATED_BLOCK_ASC = 'REWARDS_MIN_CREATED_BLOCK_ASC',
  REWARDS_MIN_CREATED_BLOCK_DESC = 'REWARDS_MIN_CREATED_BLOCK_DESC',
  REWARDS_MIN_ERA_IDX_ASC = 'REWARDS_MIN_ERA_IDX_ASC',
  REWARDS_MIN_ERA_IDX_DESC = 'REWARDS_MIN_ERA_IDX_DESC',
  REWARDS_MIN_ERA_ID_ASC = 'REWARDS_MIN_ERA_ID_ASC',
  REWARDS_MIN_ERA_ID_DESC = 'REWARDS_MIN_ERA_ID_DESC',
  REWARDS_MIN_ID_ASC = 'REWARDS_MIN_ID_ASC',
  REWARDS_MIN_ID_DESC = 'REWARDS_MIN_ID_DESC',
  REWARDS_MIN_INDEXER_ID_ASC = 'REWARDS_MIN_INDEXER_ID_ASC',
  REWARDS_MIN_INDEXER_ID_DESC = 'REWARDS_MIN_INDEXER_ID_DESC',
  REWARDS_MIN_LAST_EVENT_ASC = 'REWARDS_MIN_LAST_EVENT_ASC',
  REWARDS_MIN_LAST_EVENT_DESC = 'REWARDS_MIN_LAST_EVENT_DESC',
  REWARDS_STDDEV_POPULATION_AMOUNT_ASC = 'REWARDS_STDDEV_POPULATION_AMOUNT_ASC',
  REWARDS_STDDEV_POPULATION_AMOUNT_DESC = 'REWARDS_STDDEV_POPULATION_AMOUNT_DESC',
  REWARDS_STDDEV_POPULATION_BLOCK_RANGE_ASC = 'REWARDS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  REWARDS_STDDEV_POPULATION_BLOCK_RANGE_DESC = 'REWARDS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  REWARDS_STDDEV_POPULATION_CREATED_BLOCK_ASC = 'REWARDS_STDDEV_POPULATION_CREATED_BLOCK_ASC',
  REWARDS_STDDEV_POPULATION_CREATED_BLOCK_DESC = 'REWARDS_STDDEV_POPULATION_CREATED_BLOCK_DESC',
  REWARDS_STDDEV_POPULATION_ERA_IDX_ASC = 'REWARDS_STDDEV_POPULATION_ERA_IDX_ASC',
  REWARDS_STDDEV_POPULATION_ERA_IDX_DESC = 'REWARDS_STDDEV_POPULATION_ERA_IDX_DESC',
  REWARDS_STDDEV_POPULATION_ERA_ID_ASC = 'REWARDS_STDDEV_POPULATION_ERA_ID_ASC',
  REWARDS_STDDEV_POPULATION_ERA_ID_DESC = 'REWARDS_STDDEV_POPULATION_ERA_ID_DESC',
  REWARDS_STDDEV_POPULATION_ID_ASC = 'REWARDS_STDDEV_POPULATION_ID_ASC',
  REWARDS_STDDEV_POPULATION_ID_DESC = 'REWARDS_STDDEV_POPULATION_ID_DESC',
  REWARDS_STDDEV_POPULATION_INDEXER_ID_ASC = 'REWARDS_STDDEV_POPULATION_INDEXER_ID_ASC',
  REWARDS_STDDEV_POPULATION_INDEXER_ID_DESC = 'REWARDS_STDDEV_POPULATION_INDEXER_ID_DESC',
  REWARDS_STDDEV_POPULATION_LAST_EVENT_ASC = 'REWARDS_STDDEV_POPULATION_LAST_EVENT_ASC',
  REWARDS_STDDEV_POPULATION_LAST_EVENT_DESC = 'REWARDS_STDDEV_POPULATION_LAST_EVENT_DESC',
  REWARDS_STDDEV_SAMPLE_AMOUNT_ASC = 'REWARDS_STDDEV_SAMPLE_AMOUNT_ASC',
  REWARDS_STDDEV_SAMPLE_AMOUNT_DESC = 'REWARDS_STDDEV_SAMPLE_AMOUNT_DESC',
  REWARDS_STDDEV_SAMPLE_BLOCK_RANGE_ASC = 'REWARDS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  REWARDS_STDDEV_SAMPLE_BLOCK_RANGE_DESC = 'REWARDS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  REWARDS_STDDEV_SAMPLE_CREATED_BLOCK_ASC = 'REWARDS_STDDEV_SAMPLE_CREATED_BLOCK_ASC',
  REWARDS_STDDEV_SAMPLE_CREATED_BLOCK_DESC = 'REWARDS_STDDEV_SAMPLE_CREATED_BLOCK_DESC',
  REWARDS_STDDEV_SAMPLE_ERA_IDX_ASC = 'REWARDS_STDDEV_SAMPLE_ERA_IDX_ASC',
  REWARDS_STDDEV_SAMPLE_ERA_IDX_DESC = 'REWARDS_STDDEV_SAMPLE_ERA_IDX_DESC',
  REWARDS_STDDEV_SAMPLE_ERA_ID_ASC = 'REWARDS_STDDEV_SAMPLE_ERA_ID_ASC',
  REWARDS_STDDEV_SAMPLE_ERA_ID_DESC = 'REWARDS_STDDEV_SAMPLE_ERA_ID_DESC',
  REWARDS_STDDEV_SAMPLE_ID_ASC = 'REWARDS_STDDEV_SAMPLE_ID_ASC',
  REWARDS_STDDEV_SAMPLE_ID_DESC = 'REWARDS_STDDEV_SAMPLE_ID_DESC',
  REWARDS_STDDEV_SAMPLE_INDEXER_ID_ASC = 'REWARDS_STDDEV_SAMPLE_INDEXER_ID_ASC',
  REWARDS_STDDEV_SAMPLE_INDEXER_ID_DESC = 'REWARDS_STDDEV_SAMPLE_INDEXER_ID_DESC',
  REWARDS_STDDEV_SAMPLE_LAST_EVENT_ASC = 'REWARDS_STDDEV_SAMPLE_LAST_EVENT_ASC',
  REWARDS_STDDEV_SAMPLE_LAST_EVENT_DESC = 'REWARDS_STDDEV_SAMPLE_LAST_EVENT_DESC',
  REWARDS_SUM_AMOUNT_ASC = 'REWARDS_SUM_AMOUNT_ASC',
  REWARDS_SUM_AMOUNT_DESC = 'REWARDS_SUM_AMOUNT_DESC',
  REWARDS_SUM_BLOCK_RANGE_ASC = 'REWARDS_SUM_BLOCK_RANGE_ASC',
  REWARDS_SUM_BLOCK_RANGE_DESC = 'REWARDS_SUM_BLOCK_RANGE_DESC',
  REWARDS_SUM_CREATED_BLOCK_ASC = 'REWARDS_SUM_CREATED_BLOCK_ASC',
  REWARDS_SUM_CREATED_BLOCK_DESC = 'REWARDS_SUM_CREATED_BLOCK_DESC',
  REWARDS_SUM_ERA_IDX_ASC = 'REWARDS_SUM_ERA_IDX_ASC',
  REWARDS_SUM_ERA_IDX_DESC = 'REWARDS_SUM_ERA_IDX_DESC',
  REWARDS_SUM_ERA_ID_ASC = 'REWARDS_SUM_ERA_ID_ASC',
  REWARDS_SUM_ERA_ID_DESC = 'REWARDS_SUM_ERA_ID_DESC',
  REWARDS_SUM_ID_ASC = 'REWARDS_SUM_ID_ASC',
  REWARDS_SUM_ID_DESC = 'REWARDS_SUM_ID_DESC',
  REWARDS_SUM_INDEXER_ID_ASC = 'REWARDS_SUM_INDEXER_ID_ASC',
  REWARDS_SUM_INDEXER_ID_DESC = 'REWARDS_SUM_INDEXER_ID_DESC',
  REWARDS_SUM_LAST_EVENT_ASC = 'REWARDS_SUM_LAST_EVENT_ASC',
  REWARDS_SUM_LAST_EVENT_DESC = 'REWARDS_SUM_LAST_EVENT_DESC',
  REWARDS_VARIANCE_POPULATION_AMOUNT_ASC = 'REWARDS_VARIANCE_POPULATION_AMOUNT_ASC',
  REWARDS_VARIANCE_POPULATION_AMOUNT_DESC = 'REWARDS_VARIANCE_POPULATION_AMOUNT_DESC',
  REWARDS_VARIANCE_POPULATION_BLOCK_RANGE_ASC = 'REWARDS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  REWARDS_VARIANCE_POPULATION_BLOCK_RANGE_DESC = 'REWARDS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  REWARDS_VARIANCE_POPULATION_CREATED_BLOCK_ASC = 'REWARDS_VARIANCE_POPULATION_CREATED_BLOCK_ASC',
  REWARDS_VARIANCE_POPULATION_CREATED_BLOCK_DESC = 'REWARDS_VARIANCE_POPULATION_CREATED_BLOCK_DESC',
  REWARDS_VARIANCE_POPULATION_ERA_IDX_ASC = 'REWARDS_VARIANCE_POPULATION_ERA_IDX_ASC',
  REWARDS_VARIANCE_POPULATION_ERA_IDX_DESC = 'REWARDS_VARIANCE_POPULATION_ERA_IDX_DESC',
  REWARDS_VARIANCE_POPULATION_ERA_ID_ASC = 'REWARDS_VARIANCE_POPULATION_ERA_ID_ASC',
  REWARDS_VARIANCE_POPULATION_ERA_ID_DESC = 'REWARDS_VARIANCE_POPULATION_ERA_ID_DESC',
  REWARDS_VARIANCE_POPULATION_ID_ASC = 'REWARDS_VARIANCE_POPULATION_ID_ASC',
  REWARDS_VARIANCE_POPULATION_ID_DESC = 'REWARDS_VARIANCE_POPULATION_ID_DESC',
  REWARDS_VARIANCE_POPULATION_INDEXER_ID_ASC = 'REWARDS_VARIANCE_POPULATION_INDEXER_ID_ASC',
  REWARDS_VARIANCE_POPULATION_INDEXER_ID_DESC = 'REWARDS_VARIANCE_POPULATION_INDEXER_ID_DESC',
  REWARDS_VARIANCE_POPULATION_LAST_EVENT_ASC = 'REWARDS_VARIANCE_POPULATION_LAST_EVENT_ASC',
  REWARDS_VARIANCE_POPULATION_LAST_EVENT_DESC = 'REWARDS_VARIANCE_POPULATION_LAST_EVENT_DESC',
  REWARDS_VARIANCE_SAMPLE_AMOUNT_ASC = 'REWARDS_VARIANCE_SAMPLE_AMOUNT_ASC',
  REWARDS_VARIANCE_SAMPLE_AMOUNT_DESC = 'REWARDS_VARIANCE_SAMPLE_AMOUNT_DESC',
  REWARDS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC = 'REWARDS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  REWARDS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC = 'REWARDS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  REWARDS_VARIANCE_SAMPLE_CREATED_BLOCK_ASC = 'REWARDS_VARIANCE_SAMPLE_CREATED_BLOCK_ASC',
  REWARDS_VARIANCE_SAMPLE_CREATED_BLOCK_DESC = 'REWARDS_VARIANCE_SAMPLE_CREATED_BLOCK_DESC',
  REWARDS_VARIANCE_SAMPLE_ERA_IDX_ASC = 'REWARDS_VARIANCE_SAMPLE_ERA_IDX_ASC',
  REWARDS_VARIANCE_SAMPLE_ERA_IDX_DESC = 'REWARDS_VARIANCE_SAMPLE_ERA_IDX_DESC',
  REWARDS_VARIANCE_SAMPLE_ERA_ID_ASC = 'REWARDS_VARIANCE_SAMPLE_ERA_ID_ASC',
  REWARDS_VARIANCE_SAMPLE_ERA_ID_DESC = 'REWARDS_VARIANCE_SAMPLE_ERA_ID_DESC',
  REWARDS_VARIANCE_SAMPLE_ID_ASC = 'REWARDS_VARIANCE_SAMPLE_ID_ASC',
  REWARDS_VARIANCE_SAMPLE_ID_DESC = 'REWARDS_VARIANCE_SAMPLE_ID_DESC',
  REWARDS_VARIANCE_SAMPLE_INDEXER_ID_ASC = 'REWARDS_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  REWARDS_VARIANCE_SAMPLE_INDEXER_ID_DESC = 'REWARDS_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  REWARDS_VARIANCE_SAMPLE_LAST_EVENT_ASC = 'REWARDS_VARIANCE_SAMPLE_LAST_EVENT_ASC',
  REWARDS_VARIANCE_SAMPLE_LAST_EVENT_DESC = 'REWARDS_VARIANCE_SAMPLE_LAST_EVENT_DESC',
  SELF_STAKE_ASC = 'SELF_STAKE_ASC',
  SELF_STAKE_DESC = 'SELF_STAKE_DESC',
  TOTAL_STAKE_ASC = 'TOTAL_STAKE_ASC',
  TOTAL_STAKE_DESC = 'TOTAL_STAKE_DESC',
}

/** A filter to be used against Int fields. All fields are combined with a logical ‘and.’ */
export type IntFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  readonly distinctFrom: InputMaybe<Scalars['Int']['input']>;
  /** Equal to the specified value. */
  readonly equalTo: InputMaybe<Scalars['Int']['input']>;
  /** Greater than the specified value. */
  readonly greaterThan: InputMaybe<Scalars['Int']['input']>;
  /** Greater than or equal to the specified value. */
  readonly greaterThanOrEqualTo: InputMaybe<Scalars['Int']['input']>;
  /** Included in the specified list. */
  readonly in: InputMaybe<ReadonlyArray<Scalars['Int']['input']>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  readonly isNull: InputMaybe<Scalars['Boolean']['input']>;
  /** Less than the specified value. */
  readonly lessThan: InputMaybe<Scalars['Int']['input']>;
  /** Less than or equal to the specified value. */
  readonly lessThanOrEqualTo: InputMaybe<Scalars['Int']['input']>;
  /** Equal to the specified value, treating null like an ordinary value. */
  readonly notDistinctFrom: InputMaybe<Scalars['Int']['input']>;
  /** Not equal to the specified value. */
  readonly notEqualTo: InputMaybe<Scalars['Int']['input']>;
  /** Not included in the specified list. */
  readonly notIn: InputMaybe<ReadonlyArray<Scalars['Int']['input']>>;
};

/** A filter to be used against JSON fields. All fields are combined with a logical ‘and.’ */
export type JsonFilter = {
  /** Contained by the specified JSON. */
  readonly containedBy: InputMaybe<Scalars['JSON']['input']>;
  /** Contains the specified JSON. */
  readonly contains: InputMaybe<Scalars['JSON']['input']>;
  /** Contains all of the specified keys. */
  readonly containsAllKeys: InputMaybe<ReadonlyArray<Scalars['String']['input']>>;
  /** Contains any of the specified keys. */
  readonly containsAnyKeys: InputMaybe<ReadonlyArray<Scalars['String']['input']>>;
  /** Contains the specified key. */
  readonly containsKey: InputMaybe<Scalars['String']['input']>;
  /** Not equal to the specified value, treating null like an ordinary value. */
  readonly distinctFrom: InputMaybe<Scalars['JSON']['input']>;
  /** Equal to the specified value. */
  readonly equalTo: InputMaybe<Scalars['JSON']['input']>;
  /** Greater than the specified value. */
  readonly greaterThan: InputMaybe<Scalars['JSON']['input']>;
  /** Greater than or equal to the specified value. */
  readonly greaterThanOrEqualTo: InputMaybe<Scalars['JSON']['input']>;
  /** Included in the specified list. */
  readonly in: InputMaybe<ReadonlyArray<Scalars['JSON']['input']>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  readonly isNull: InputMaybe<Scalars['Boolean']['input']>;
  /** Less than the specified value. */
  readonly lessThan: InputMaybe<Scalars['JSON']['input']>;
  /** Less than or equal to the specified value. */
  readonly lessThanOrEqualTo: InputMaybe<Scalars['JSON']['input']>;
  /** Equal to the specified value, treating null like an ordinary value. */
  readonly notDistinctFrom: InputMaybe<Scalars['JSON']['input']>;
  /** Not equal to the specified value. */
  readonly notEqualTo: InputMaybe<Scalars['JSON']['input']>;
  /** Not included in the specified list. */
  readonly notIn: InputMaybe<ReadonlyArray<Scalars['JSON']['input']>>;
};

/** An object with a globally unique `ID`. */
export type Node = {
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  readonly nodeId: Scalars['ID']['output'];
};

/** Options for ordering null values in a specific direction. */
export enum NullOrder {
  /** Order null values first. */
  NULLS_FIRST = 'NULLS_FIRST',
  /** Order null values last. */
  NULLS_LAST = 'NULLS_LAST',
}

export type Offer = Node & {
  readonly __typename: 'Offer';
  readonly accepted: Scalars['Int']['output'];
  /** Reads and enables pagination through a set of `AcceptedOffer`. */
  readonly acceptedOffers: AcceptedOffersConnection;
  readonly consumer: Scalars['String']['output'];
  readonly createdBlock: Maybe<Scalars['Int']['output']>;
  /** Reads a single `Deployment` that is related to this `Offer`. */
  readonly deployment: Maybe<Deployment>;
  readonly deploymentId: Scalars['String']['output'];
  readonly deposit: Scalars['BigFloat']['output'];
  readonly expireDate: Scalars['Datetime']['output'];
  readonly id: Scalars['String']['output'];
  /** Reads and enables pagination through a set of `Indexer`. */
  readonly indexersByAcceptedOfferOfferIdAndIndexerId: OfferIndexersByAcceptedOfferOfferIdAndIndexerIdManyToManyConnection;
  readonly lastEvent: Maybe<Scalars['String']['output']>;
  readonly limit: Scalars['Int']['output'];
  readonly minimumAcceptHeight: Scalars['BigFloat']['output'];
  readonly minimumStakingAmount: Scalars['BigFloat']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  readonly nodeId: Scalars['ID']['output'];
  /** Reads a single `PlanTemplate` that is related to this `Offer`. */
  readonly planTemplate: Maybe<PlanTemplate>;
  readonly planTemplateId: Scalars['String']['output'];
  readonly reachLimit: Scalars['Boolean']['output'];
  /** Reads and enables pagination through a set of `ServiceAgreement`. */
  readonly serviceAgreementsByAcceptedOfferOfferIdAndServiceAgreementId: OfferServiceAgreementsByAcceptedOfferOfferIdAndServiceAgreementIdManyToManyConnection;
  readonly withdrawPenalty: Maybe<Scalars['BigFloat']['output']>;
  readonly withdrawn: Scalars['Boolean']['output'];
};

export type OfferAcceptedOffersArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Accepted_Offers_Distinct_Enum>>>;
  filter: InputMaybe<AcceptedOfferFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<AcceptedOffersOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type OfferIndexersByAcceptedOfferOfferIdAndIndexerIdArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexers_Distinct_Enum>>>;
  filter: InputMaybe<IndexerFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexersOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type OfferServiceAgreementsByAcceptedOfferOfferIdAndServiceAgreementIdArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Service_Agreements_Distinct_Enum>>>;
  filter: InputMaybe<ServiceAgreementFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<ServiceAgreementsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type OfferAggregates = {
  readonly __typename: 'OfferAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly average: Maybe<OfferAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly distinctCount: Maybe<OfferDistinctCountAggregates>;
  readonly keys: Maybe<ReadonlyArray<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly max: Maybe<OfferMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly min: Maybe<OfferMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevPopulation: Maybe<OfferStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevSample: Maybe<OfferStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly sum: Maybe<OfferSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly variancePopulation: Maybe<OfferVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly varianceSample: Maybe<OfferVarianceSampleAggregates>;
};

/** A filter to be used against aggregates of `Offer` object types. */
export type OfferAggregatesFilter = {
  /** Mean average aggregate over matching `Offer` objects. */
  readonly average: InputMaybe<OfferAverageAggregateFilter>;
  /** Distinct count aggregate over matching `Offer` objects. */
  readonly distinctCount: InputMaybe<OfferDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `Offer` object to be included within the aggregate. */
  readonly filter: InputMaybe<OfferFilter>;
  /** Maximum aggregate over matching `Offer` objects. */
  readonly max: InputMaybe<OfferMaxAggregateFilter>;
  /** Minimum aggregate over matching `Offer` objects. */
  readonly min: InputMaybe<OfferMinAggregateFilter>;
  /** Population standard deviation aggregate over matching `Offer` objects. */
  readonly stddevPopulation: InputMaybe<OfferStddevPopulationAggregateFilter>;
  /** Sample standard deviation aggregate over matching `Offer` objects. */
  readonly stddevSample: InputMaybe<OfferStddevSampleAggregateFilter>;
  /** Sum aggregate over matching `Offer` objects. */
  readonly sum: InputMaybe<OfferSumAggregateFilter>;
  /** Population variance aggregate over matching `Offer` objects. */
  readonly variancePopulation: InputMaybe<OfferVariancePopulationAggregateFilter>;
  /** Sample variance aggregate over matching `Offer` objects. */
  readonly varianceSample: InputMaybe<OfferVarianceSampleAggregateFilter>;
};

export type OfferAverageAggregateFilter = {
  readonly accepted: InputMaybe<BigFloatFilter>;
  readonly createdBlock: InputMaybe<BigFloatFilter>;
  readonly deposit: InputMaybe<BigFloatFilter>;
  readonly limit: InputMaybe<BigFloatFilter>;
  readonly minimumAcceptHeight: InputMaybe<BigFloatFilter>;
  readonly minimumStakingAmount: InputMaybe<BigFloatFilter>;
  readonly withdrawPenalty: InputMaybe<BigFloatFilter>;
};

export type OfferAverageAggregates = {
  readonly __typename: 'OfferAverageAggregates';
  /** Mean average of accepted across the matching connection */
  readonly accepted: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of deposit across the matching connection */
  readonly deposit: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of limit across the matching connection */
  readonly limit: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of minimumAcceptHeight across the matching connection */
  readonly minimumAcceptHeight: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of minimumStakingAmount across the matching connection */
  readonly minimumStakingAmount: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of withdrawPenalty across the matching connection */
  readonly withdrawPenalty: Maybe<Scalars['BigFloat']['output']>;
};

export type OfferDistinctCountAggregateFilter = {
  readonly _blockRange: InputMaybe<BigIntFilter>;
  readonly _id: InputMaybe<BigIntFilter>;
  readonly accepted: InputMaybe<BigIntFilter>;
  readonly consumer: InputMaybe<BigIntFilter>;
  readonly createdBlock: InputMaybe<BigIntFilter>;
  readonly deploymentId: InputMaybe<BigIntFilter>;
  readonly deposit: InputMaybe<BigIntFilter>;
  readonly expireDate: InputMaybe<BigIntFilter>;
  readonly id: InputMaybe<BigIntFilter>;
  readonly lastEvent: InputMaybe<BigIntFilter>;
  readonly limit: InputMaybe<BigIntFilter>;
  readonly minimumAcceptHeight: InputMaybe<BigIntFilter>;
  readonly minimumStakingAmount: InputMaybe<BigIntFilter>;
  readonly planTemplateId: InputMaybe<BigIntFilter>;
  readonly reachLimit: InputMaybe<BigIntFilter>;
  readonly withdrawPenalty: InputMaybe<BigIntFilter>;
  readonly withdrawn: InputMaybe<BigIntFilter>;
};

export type OfferDistinctCountAggregates = {
  readonly __typename: 'OfferDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  readonly _blockRange: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  readonly _id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of accepted across the matching connection */
  readonly accepted: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of consumer across the matching connection */
  readonly consumer: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of deploymentId across the matching connection */
  readonly deploymentId: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of deposit across the matching connection */
  readonly deposit: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of expireDate across the matching connection */
  readonly expireDate: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  readonly id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of lastEvent across the matching connection */
  readonly lastEvent: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of limit across the matching connection */
  readonly limit: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of minimumAcceptHeight across the matching connection */
  readonly minimumAcceptHeight: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of minimumStakingAmount across the matching connection */
  readonly minimumStakingAmount: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of planTemplateId across the matching connection */
  readonly planTemplateId: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of reachLimit across the matching connection */
  readonly reachLimit: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of withdrawPenalty across the matching connection */
  readonly withdrawPenalty: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of withdrawn across the matching connection */
  readonly withdrawn: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `Offer` object types. All fields are combined with a logical ‘and.’ */
export type OfferFilter = {
  /** Filter by the object’s `accepted` field. */
  readonly accepted: InputMaybe<IntFilter>;
  /** Filter by the object’s `acceptedOffers` relation. */
  readonly acceptedOffers: InputMaybe<OfferToManyAcceptedOfferFilter>;
  /** Some related `acceptedOffers` exist. */
  readonly acceptedOffersExist: InputMaybe<Scalars['Boolean']['input']>;
  /** Checks for all expressions in this list. */
  readonly and: InputMaybe<ReadonlyArray<OfferFilter>>;
  /** Filter by the object’s `consumer` field. */
  readonly consumer: InputMaybe<StringFilter>;
  /** Filter by the object’s `createdBlock` field. */
  readonly createdBlock: InputMaybe<IntFilter>;
  /** Filter by the object’s `deployment` relation. */
  readonly deployment: InputMaybe<DeploymentFilter>;
  /** Filter by the object’s `deploymentId` field. */
  readonly deploymentId: InputMaybe<StringFilter>;
  /** Filter by the object’s `deposit` field. */
  readonly deposit: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `expireDate` field. */
  readonly expireDate: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `id` field. */
  readonly id: InputMaybe<StringFilter>;
  /** Filter by the object’s `lastEvent` field. */
  readonly lastEvent: InputMaybe<StringFilter>;
  /** Filter by the object’s `limit` field. */
  readonly limit: InputMaybe<IntFilter>;
  /** Filter by the object’s `minimumAcceptHeight` field. */
  readonly minimumAcceptHeight: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `minimumStakingAmount` field. */
  readonly minimumStakingAmount: InputMaybe<BigFloatFilter>;
  /** Negates the expression. */
  readonly not: InputMaybe<OfferFilter>;
  /** Checks for any expressions in this list. */
  readonly or: InputMaybe<ReadonlyArray<OfferFilter>>;
  /** Filter by the object’s `planTemplate` relation. */
  readonly planTemplate: InputMaybe<PlanTemplateFilter>;
  /** Filter by the object’s `planTemplateId` field. */
  readonly planTemplateId: InputMaybe<StringFilter>;
  /** Filter by the object’s `reachLimit` field. */
  readonly reachLimit: InputMaybe<BooleanFilter>;
  /** Filter by the object’s `withdrawPenalty` field. */
  readonly withdrawPenalty: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `withdrawn` field. */
  readonly withdrawn: InputMaybe<BooleanFilter>;
};

/** A connection to a list of `Indexer` values, with data from `AcceptedOffer`. */
export type OfferIndexersByAcceptedOfferOfferIdAndIndexerIdManyToManyConnection = {
  readonly __typename: 'OfferIndexersByAcceptedOfferOfferIdAndIndexerIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<IndexerAggregates>;
  /** A list of edges which contains the `Indexer`, info from the `AcceptedOffer`, and the cursor to aid in pagination. */
  readonly edges: ReadonlyArray<OfferIndexersByAcceptedOfferOfferIdAndIndexerIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<IndexerAggregates>>;
  /** A list of `Indexer` objects. */
  readonly nodes: ReadonlyArray<Maybe<Indexer>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Indexer` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Indexer` values, with data from `AcceptedOffer`. */
export type OfferIndexersByAcceptedOfferOfferIdAndIndexerIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<IndexersGroupBy>;
  having: InputMaybe<IndexersHavingInput>;
};

/** A `Indexer` edge in the connection, with data from `AcceptedOffer`. */
export type OfferIndexersByAcceptedOfferOfferIdAndIndexerIdManyToManyEdge = {
  readonly __typename: 'OfferIndexersByAcceptedOfferOfferIdAndIndexerIdManyToManyEdge';
  /** Reads and enables pagination through a set of `AcceptedOffer`. */
  readonly acceptedOffers: AcceptedOffersConnection;
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `Indexer` at the end of the edge. */
  readonly node: Maybe<Indexer>;
};

/** A `Indexer` edge in the connection, with data from `AcceptedOffer`. */
export type OfferIndexersByAcceptedOfferOfferIdAndIndexerIdManyToManyEdgeAcceptedOffersArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Accepted_Offers_Distinct_Enum>>>;
  filter: InputMaybe<AcceptedOfferFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<AcceptedOffersOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type OfferMaxAggregateFilter = {
  readonly accepted: InputMaybe<IntFilter>;
  readonly createdBlock: InputMaybe<IntFilter>;
  readonly deposit: InputMaybe<BigFloatFilter>;
  readonly limit: InputMaybe<IntFilter>;
  readonly minimumAcceptHeight: InputMaybe<BigFloatFilter>;
  readonly minimumStakingAmount: InputMaybe<BigFloatFilter>;
  readonly withdrawPenalty: InputMaybe<BigFloatFilter>;
};

export type OfferMaxAggregates = {
  readonly __typename: 'OfferMaxAggregates';
  /** Maximum of accepted across the matching connection */
  readonly accepted: Maybe<Scalars['Int']['output']>;
  /** Maximum of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['Int']['output']>;
  /** Maximum of deposit across the matching connection */
  readonly deposit: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of limit across the matching connection */
  readonly limit: Maybe<Scalars['Int']['output']>;
  /** Maximum of minimumAcceptHeight across the matching connection */
  readonly minimumAcceptHeight: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of minimumStakingAmount across the matching connection */
  readonly minimumStakingAmount: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of withdrawPenalty across the matching connection */
  readonly withdrawPenalty: Maybe<Scalars['BigFloat']['output']>;
};

export type OfferMinAggregateFilter = {
  readonly accepted: InputMaybe<IntFilter>;
  readonly createdBlock: InputMaybe<IntFilter>;
  readonly deposit: InputMaybe<BigFloatFilter>;
  readonly limit: InputMaybe<IntFilter>;
  readonly minimumAcceptHeight: InputMaybe<BigFloatFilter>;
  readonly minimumStakingAmount: InputMaybe<BigFloatFilter>;
  readonly withdrawPenalty: InputMaybe<BigFloatFilter>;
};

export type OfferMinAggregates = {
  readonly __typename: 'OfferMinAggregates';
  /** Minimum of accepted across the matching connection */
  readonly accepted: Maybe<Scalars['Int']['output']>;
  /** Minimum of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['Int']['output']>;
  /** Minimum of deposit across the matching connection */
  readonly deposit: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of limit across the matching connection */
  readonly limit: Maybe<Scalars['Int']['output']>;
  /** Minimum of minimumAcceptHeight across the matching connection */
  readonly minimumAcceptHeight: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of minimumStakingAmount across the matching connection */
  readonly minimumStakingAmount: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of withdrawPenalty across the matching connection */
  readonly withdrawPenalty: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `ServiceAgreement` values, with data from `AcceptedOffer`. */
export type OfferServiceAgreementsByAcceptedOfferOfferIdAndServiceAgreementIdManyToManyConnection = {
  readonly __typename: 'OfferServiceAgreementsByAcceptedOfferOfferIdAndServiceAgreementIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<ServiceAgreementAggregates>;
  /** A list of edges which contains the `ServiceAgreement`, info from the `AcceptedOffer`, and the cursor to aid in pagination. */
  readonly edges: ReadonlyArray<OfferServiceAgreementsByAcceptedOfferOfferIdAndServiceAgreementIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<ServiceAgreementAggregates>>;
  /** A list of `ServiceAgreement` objects. */
  readonly nodes: ReadonlyArray<Maybe<ServiceAgreement>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `ServiceAgreement` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `ServiceAgreement` values, with data from `AcceptedOffer`. */
export type OfferServiceAgreementsByAcceptedOfferOfferIdAndServiceAgreementIdManyToManyConnectionGroupedAggregatesArgs =
  {
    groupBy: ReadonlyArray<ServiceAgreementsGroupBy>;
    having: InputMaybe<ServiceAgreementsHavingInput>;
  };

/** A `ServiceAgreement` edge in the connection, with data from `AcceptedOffer`. */
export type OfferServiceAgreementsByAcceptedOfferOfferIdAndServiceAgreementIdManyToManyEdge = {
  readonly __typename: 'OfferServiceAgreementsByAcceptedOfferOfferIdAndServiceAgreementIdManyToManyEdge';
  /** Reads and enables pagination through a set of `AcceptedOffer`. */
  readonly acceptedOffers: AcceptedOffersConnection;
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `ServiceAgreement` at the end of the edge. */
  readonly node: Maybe<ServiceAgreement>;
};

/** A `ServiceAgreement` edge in the connection, with data from `AcceptedOffer`. */
export type OfferServiceAgreementsByAcceptedOfferOfferIdAndServiceAgreementIdManyToManyEdgeAcceptedOffersArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Accepted_Offers_Distinct_Enum>>>;
  filter: InputMaybe<AcceptedOfferFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<AcceptedOffersOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type OfferStddevPopulationAggregateFilter = {
  readonly accepted: InputMaybe<BigFloatFilter>;
  readonly createdBlock: InputMaybe<BigFloatFilter>;
  readonly deposit: InputMaybe<BigFloatFilter>;
  readonly limit: InputMaybe<BigFloatFilter>;
  readonly minimumAcceptHeight: InputMaybe<BigFloatFilter>;
  readonly minimumStakingAmount: InputMaybe<BigFloatFilter>;
  readonly withdrawPenalty: InputMaybe<BigFloatFilter>;
};

export type OfferStddevPopulationAggregates = {
  readonly __typename: 'OfferStddevPopulationAggregates';
  /** Population standard deviation of accepted across the matching connection */
  readonly accepted: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of deposit across the matching connection */
  readonly deposit: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of limit across the matching connection */
  readonly limit: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of minimumAcceptHeight across the matching connection */
  readonly minimumAcceptHeight: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of minimumStakingAmount across the matching connection */
  readonly minimumStakingAmount: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of withdrawPenalty across the matching connection */
  readonly withdrawPenalty: Maybe<Scalars['BigFloat']['output']>;
};

export type OfferStddevSampleAggregateFilter = {
  readonly accepted: InputMaybe<BigFloatFilter>;
  readonly createdBlock: InputMaybe<BigFloatFilter>;
  readonly deposit: InputMaybe<BigFloatFilter>;
  readonly limit: InputMaybe<BigFloatFilter>;
  readonly minimumAcceptHeight: InputMaybe<BigFloatFilter>;
  readonly minimumStakingAmount: InputMaybe<BigFloatFilter>;
  readonly withdrawPenalty: InputMaybe<BigFloatFilter>;
};

export type OfferStddevSampleAggregates = {
  readonly __typename: 'OfferStddevSampleAggregates';
  /** Sample standard deviation of accepted across the matching connection */
  readonly accepted: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of deposit across the matching connection */
  readonly deposit: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of limit across the matching connection */
  readonly limit: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of minimumAcceptHeight across the matching connection */
  readonly minimumAcceptHeight: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of minimumStakingAmount across the matching connection */
  readonly minimumStakingAmount: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of withdrawPenalty across the matching connection */
  readonly withdrawPenalty: Maybe<Scalars['BigFloat']['output']>;
};

export type OfferSumAggregateFilter = {
  readonly accepted: InputMaybe<BigIntFilter>;
  readonly createdBlock: InputMaybe<BigIntFilter>;
  readonly deposit: InputMaybe<BigFloatFilter>;
  readonly limit: InputMaybe<BigIntFilter>;
  readonly minimumAcceptHeight: InputMaybe<BigFloatFilter>;
  readonly minimumStakingAmount: InputMaybe<BigFloatFilter>;
  readonly withdrawPenalty: InputMaybe<BigFloatFilter>;
};

export type OfferSumAggregates = {
  readonly __typename: 'OfferSumAggregates';
  /** Sum of accepted across the matching connection */
  readonly accepted: Scalars['BigInt']['output'];
  /** Sum of createdBlock across the matching connection */
  readonly createdBlock: Scalars['BigInt']['output'];
  /** Sum of deposit across the matching connection */
  readonly deposit: Scalars['BigFloat']['output'];
  /** Sum of limit across the matching connection */
  readonly limit: Scalars['BigInt']['output'];
  /** Sum of minimumAcceptHeight across the matching connection */
  readonly minimumAcceptHeight: Scalars['BigFloat']['output'];
  /** Sum of minimumStakingAmount across the matching connection */
  readonly minimumStakingAmount: Scalars['BigFloat']['output'];
  /** Sum of withdrawPenalty across the matching connection */
  readonly withdrawPenalty: Scalars['BigFloat']['output'];
};

/** A filter to be used against many `AcceptedOffer` object types. All fields are combined with a logical ‘and.’ */
export type OfferToManyAcceptedOfferFilter = {
  /** Aggregates across related `AcceptedOffer` match the filter criteria. */
  readonly aggregates: InputMaybe<AcceptedOfferAggregatesFilter>;
  /** Every related `AcceptedOffer` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly every: InputMaybe<AcceptedOfferFilter>;
  /** No related `AcceptedOffer` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly none: InputMaybe<AcceptedOfferFilter>;
  /** Some related `AcceptedOffer` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly some: InputMaybe<AcceptedOfferFilter>;
};

export type OfferVariancePopulationAggregateFilter = {
  readonly accepted: InputMaybe<BigFloatFilter>;
  readonly createdBlock: InputMaybe<BigFloatFilter>;
  readonly deposit: InputMaybe<BigFloatFilter>;
  readonly limit: InputMaybe<BigFloatFilter>;
  readonly minimumAcceptHeight: InputMaybe<BigFloatFilter>;
  readonly minimumStakingAmount: InputMaybe<BigFloatFilter>;
  readonly withdrawPenalty: InputMaybe<BigFloatFilter>;
};

export type OfferVariancePopulationAggregates = {
  readonly __typename: 'OfferVariancePopulationAggregates';
  /** Population variance of accepted across the matching connection */
  readonly accepted: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of deposit across the matching connection */
  readonly deposit: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of limit across the matching connection */
  readonly limit: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of minimumAcceptHeight across the matching connection */
  readonly minimumAcceptHeight: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of minimumStakingAmount across the matching connection */
  readonly minimumStakingAmount: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of withdrawPenalty across the matching connection */
  readonly withdrawPenalty: Maybe<Scalars['BigFloat']['output']>;
};

export type OfferVarianceSampleAggregateFilter = {
  readonly accepted: InputMaybe<BigFloatFilter>;
  readonly createdBlock: InputMaybe<BigFloatFilter>;
  readonly deposit: InputMaybe<BigFloatFilter>;
  readonly limit: InputMaybe<BigFloatFilter>;
  readonly minimumAcceptHeight: InputMaybe<BigFloatFilter>;
  readonly minimumStakingAmount: InputMaybe<BigFloatFilter>;
  readonly withdrawPenalty: InputMaybe<BigFloatFilter>;
};

export type OfferVarianceSampleAggregates = {
  readonly __typename: 'OfferVarianceSampleAggregates';
  /** Sample variance of accepted across the matching connection */
  readonly accepted: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of deposit across the matching connection */
  readonly deposit: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of limit across the matching connection */
  readonly limit: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of minimumAcceptHeight across the matching connection */
  readonly minimumAcceptHeight: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of minimumStakingAmount across the matching connection */
  readonly minimumStakingAmount: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of withdrawPenalty across the matching connection */
  readonly withdrawPenalty: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `Offer` values. */
export type OffersConnection = {
  readonly __typename: 'OffersConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<OfferAggregates>;
  /** A list of edges which contains the `Offer` and cursor to aid in pagination. */
  readonly edges: ReadonlyArray<OffersEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<OfferAggregates>>;
  /** A list of `Offer` objects. */
  readonly nodes: ReadonlyArray<Maybe<Offer>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Offer` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Offer` values. */
export type OffersConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<OffersGroupBy>;
  having: InputMaybe<OffersHavingInput>;
};

/** A `Offer` edge in the connection. */
export type OffersEdge = {
  readonly __typename: 'OffersEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `Offer` at the end of the edge. */
  readonly node: Maybe<Offer>;
};

/** Grouping methods for `Offer` for usage during aggregation. */
export enum OffersGroupBy {
  ACCEPTED = 'ACCEPTED',
  CONSUMER = 'CONSUMER',
  CREATED_BLOCK = 'CREATED_BLOCK',
  DEPLOYMENT_ID = 'DEPLOYMENT_ID',
  DEPOSIT = 'DEPOSIT',
  EXPIRE_DATE = 'EXPIRE_DATE',
  EXPIRE_DATE_TRUNCATED_TO_DAY = 'EXPIRE_DATE_TRUNCATED_TO_DAY',
  EXPIRE_DATE_TRUNCATED_TO_HOUR = 'EXPIRE_DATE_TRUNCATED_TO_HOUR',
  ID = 'ID',
  LAST_EVENT = 'LAST_EVENT',
  LIMIT = 'LIMIT',
  MINIMUM_ACCEPT_HEIGHT = 'MINIMUM_ACCEPT_HEIGHT',
  MINIMUM_STAKING_AMOUNT = 'MINIMUM_STAKING_AMOUNT',
  PLAN_TEMPLATE_ID = 'PLAN_TEMPLATE_ID',
  REACH_LIMIT = 'REACH_LIMIT',
  WITHDRAWN = 'WITHDRAWN',
  WITHDRAW_PENALTY = 'WITHDRAW_PENALTY',
}

export type OffersHavingAverageInput = {
  readonly accepted: InputMaybe<HavingIntFilter>;
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly deposit: InputMaybe<HavingBigfloatFilter>;
  readonly expireDate: InputMaybe<HavingDatetimeFilter>;
  readonly limit: InputMaybe<HavingIntFilter>;
  readonly minimumAcceptHeight: InputMaybe<HavingBigfloatFilter>;
  readonly minimumStakingAmount: InputMaybe<HavingBigfloatFilter>;
  readonly withdrawPenalty: InputMaybe<HavingBigfloatFilter>;
};

export type OffersHavingDistinctCountInput = {
  readonly accepted: InputMaybe<HavingIntFilter>;
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly deposit: InputMaybe<HavingBigfloatFilter>;
  readonly expireDate: InputMaybe<HavingDatetimeFilter>;
  readonly limit: InputMaybe<HavingIntFilter>;
  readonly minimumAcceptHeight: InputMaybe<HavingBigfloatFilter>;
  readonly minimumStakingAmount: InputMaybe<HavingBigfloatFilter>;
  readonly withdrawPenalty: InputMaybe<HavingBigfloatFilter>;
};

/** Conditions for `Offer` aggregates. */
export type OffersHavingInput = {
  readonly AND: InputMaybe<ReadonlyArray<OffersHavingInput>>;
  readonly OR: InputMaybe<ReadonlyArray<OffersHavingInput>>;
  readonly average: InputMaybe<OffersHavingAverageInput>;
  readonly distinctCount: InputMaybe<OffersHavingDistinctCountInput>;
  readonly max: InputMaybe<OffersHavingMaxInput>;
  readonly min: InputMaybe<OffersHavingMinInput>;
  readonly stddevPopulation: InputMaybe<OffersHavingStddevPopulationInput>;
  readonly stddevSample: InputMaybe<OffersHavingStddevSampleInput>;
  readonly sum: InputMaybe<OffersHavingSumInput>;
  readonly variancePopulation: InputMaybe<OffersHavingVariancePopulationInput>;
  readonly varianceSample: InputMaybe<OffersHavingVarianceSampleInput>;
};

export type OffersHavingMaxInput = {
  readonly accepted: InputMaybe<HavingIntFilter>;
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly deposit: InputMaybe<HavingBigfloatFilter>;
  readonly expireDate: InputMaybe<HavingDatetimeFilter>;
  readonly limit: InputMaybe<HavingIntFilter>;
  readonly minimumAcceptHeight: InputMaybe<HavingBigfloatFilter>;
  readonly minimumStakingAmount: InputMaybe<HavingBigfloatFilter>;
  readonly withdrawPenalty: InputMaybe<HavingBigfloatFilter>;
};

export type OffersHavingMinInput = {
  readonly accepted: InputMaybe<HavingIntFilter>;
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly deposit: InputMaybe<HavingBigfloatFilter>;
  readonly expireDate: InputMaybe<HavingDatetimeFilter>;
  readonly limit: InputMaybe<HavingIntFilter>;
  readonly minimumAcceptHeight: InputMaybe<HavingBigfloatFilter>;
  readonly minimumStakingAmount: InputMaybe<HavingBigfloatFilter>;
  readonly withdrawPenalty: InputMaybe<HavingBigfloatFilter>;
};

export type OffersHavingStddevPopulationInput = {
  readonly accepted: InputMaybe<HavingIntFilter>;
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly deposit: InputMaybe<HavingBigfloatFilter>;
  readonly expireDate: InputMaybe<HavingDatetimeFilter>;
  readonly limit: InputMaybe<HavingIntFilter>;
  readonly minimumAcceptHeight: InputMaybe<HavingBigfloatFilter>;
  readonly minimumStakingAmount: InputMaybe<HavingBigfloatFilter>;
  readonly withdrawPenalty: InputMaybe<HavingBigfloatFilter>;
};

export type OffersHavingStddevSampleInput = {
  readonly accepted: InputMaybe<HavingIntFilter>;
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly deposit: InputMaybe<HavingBigfloatFilter>;
  readonly expireDate: InputMaybe<HavingDatetimeFilter>;
  readonly limit: InputMaybe<HavingIntFilter>;
  readonly minimumAcceptHeight: InputMaybe<HavingBigfloatFilter>;
  readonly minimumStakingAmount: InputMaybe<HavingBigfloatFilter>;
  readonly withdrawPenalty: InputMaybe<HavingBigfloatFilter>;
};

export type OffersHavingSumInput = {
  readonly accepted: InputMaybe<HavingIntFilter>;
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly deposit: InputMaybe<HavingBigfloatFilter>;
  readonly expireDate: InputMaybe<HavingDatetimeFilter>;
  readonly limit: InputMaybe<HavingIntFilter>;
  readonly minimumAcceptHeight: InputMaybe<HavingBigfloatFilter>;
  readonly minimumStakingAmount: InputMaybe<HavingBigfloatFilter>;
  readonly withdrawPenalty: InputMaybe<HavingBigfloatFilter>;
};

export type OffersHavingVariancePopulationInput = {
  readonly accepted: InputMaybe<HavingIntFilter>;
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly deposit: InputMaybe<HavingBigfloatFilter>;
  readonly expireDate: InputMaybe<HavingDatetimeFilter>;
  readonly limit: InputMaybe<HavingIntFilter>;
  readonly minimumAcceptHeight: InputMaybe<HavingBigfloatFilter>;
  readonly minimumStakingAmount: InputMaybe<HavingBigfloatFilter>;
  readonly withdrawPenalty: InputMaybe<HavingBigfloatFilter>;
};

export type OffersHavingVarianceSampleInput = {
  readonly accepted: InputMaybe<HavingIntFilter>;
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly deposit: InputMaybe<HavingBigfloatFilter>;
  readonly expireDate: InputMaybe<HavingDatetimeFilter>;
  readonly limit: InputMaybe<HavingIntFilter>;
  readonly minimumAcceptHeight: InputMaybe<HavingBigfloatFilter>;
  readonly minimumStakingAmount: InputMaybe<HavingBigfloatFilter>;
  readonly withdrawPenalty: InputMaybe<HavingBigfloatFilter>;
};

/** Methods to use when ordering `Offer`. */
export enum OffersOrderBy {
  ACCEPTED_ASC = 'ACCEPTED_ASC',
  ACCEPTED_DESC = 'ACCEPTED_DESC',
  ACCEPTED_OFFERS_AVERAGE_BLOCK_RANGE_ASC = 'ACCEPTED_OFFERS_AVERAGE_BLOCK_RANGE_ASC',
  ACCEPTED_OFFERS_AVERAGE_BLOCK_RANGE_DESC = 'ACCEPTED_OFFERS_AVERAGE_BLOCK_RANGE_DESC',
  ACCEPTED_OFFERS_AVERAGE_CREATED_BLOCK_ASC = 'ACCEPTED_OFFERS_AVERAGE_CREATED_BLOCK_ASC',
  ACCEPTED_OFFERS_AVERAGE_CREATED_BLOCK_DESC = 'ACCEPTED_OFFERS_AVERAGE_CREATED_BLOCK_DESC',
  ACCEPTED_OFFERS_AVERAGE_ID_ASC = 'ACCEPTED_OFFERS_AVERAGE_ID_ASC',
  ACCEPTED_OFFERS_AVERAGE_ID_DESC = 'ACCEPTED_OFFERS_AVERAGE_ID_DESC',
  ACCEPTED_OFFERS_AVERAGE_INDEXER_ID_ASC = 'ACCEPTED_OFFERS_AVERAGE_INDEXER_ID_ASC',
  ACCEPTED_OFFERS_AVERAGE_INDEXER_ID_DESC = 'ACCEPTED_OFFERS_AVERAGE_INDEXER_ID_DESC',
  ACCEPTED_OFFERS_AVERAGE_LAST_EVENT_ASC = 'ACCEPTED_OFFERS_AVERAGE_LAST_EVENT_ASC',
  ACCEPTED_OFFERS_AVERAGE_LAST_EVENT_DESC = 'ACCEPTED_OFFERS_AVERAGE_LAST_EVENT_DESC',
  ACCEPTED_OFFERS_AVERAGE_OFFER_ID_ASC = 'ACCEPTED_OFFERS_AVERAGE_OFFER_ID_ASC',
  ACCEPTED_OFFERS_AVERAGE_OFFER_ID_DESC = 'ACCEPTED_OFFERS_AVERAGE_OFFER_ID_DESC',
  ACCEPTED_OFFERS_AVERAGE_SERVICE_AGREEMENT_ID_ASC = 'ACCEPTED_OFFERS_AVERAGE_SERVICE_AGREEMENT_ID_ASC',
  ACCEPTED_OFFERS_AVERAGE_SERVICE_AGREEMENT_ID_DESC = 'ACCEPTED_OFFERS_AVERAGE_SERVICE_AGREEMENT_ID_DESC',
  ACCEPTED_OFFERS_BY_OFFER_ID__COUNT_ASC = 'ACCEPTED_OFFERS_BY_OFFER_ID__COUNT_ASC',
  ACCEPTED_OFFERS_BY_OFFER_ID__COUNT_DESC = 'ACCEPTED_OFFERS_BY_OFFER_ID__COUNT_DESC',
  ACCEPTED_OFFERS_COUNT_ASC = 'ACCEPTED_OFFERS_COUNT_ASC',
  ACCEPTED_OFFERS_COUNT_DESC = 'ACCEPTED_OFFERS_COUNT_DESC',
  ACCEPTED_OFFERS_DISTINCT_COUNT_BLOCK_RANGE_ASC = 'ACCEPTED_OFFERS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  ACCEPTED_OFFERS_DISTINCT_COUNT_BLOCK_RANGE_DESC = 'ACCEPTED_OFFERS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  ACCEPTED_OFFERS_DISTINCT_COUNT_CREATED_BLOCK_ASC = 'ACCEPTED_OFFERS_DISTINCT_COUNT_CREATED_BLOCK_ASC',
  ACCEPTED_OFFERS_DISTINCT_COUNT_CREATED_BLOCK_DESC = 'ACCEPTED_OFFERS_DISTINCT_COUNT_CREATED_BLOCK_DESC',
  ACCEPTED_OFFERS_DISTINCT_COUNT_ID_ASC = 'ACCEPTED_OFFERS_DISTINCT_COUNT_ID_ASC',
  ACCEPTED_OFFERS_DISTINCT_COUNT_ID_DESC = 'ACCEPTED_OFFERS_DISTINCT_COUNT_ID_DESC',
  ACCEPTED_OFFERS_DISTINCT_COUNT_INDEXER_ID_ASC = 'ACCEPTED_OFFERS_DISTINCT_COUNT_INDEXER_ID_ASC',
  ACCEPTED_OFFERS_DISTINCT_COUNT_INDEXER_ID_DESC = 'ACCEPTED_OFFERS_DISTINCT_COUNT_INDEXER_ID_DESC',
  ACCEPTED_OFFERS_DISTINCT_COUNT_LAST_EVENT_ASC = 'ACCEPTED_OFFERS_DISTINCT_COUNT_LAST_EVENT_ASC',
  ACCEPTED_OFFERS_DISTINCT_COUNT_LAST_EVENT_DESC = 'ACCEPTED_OFFERS_DISTINCT_COUNT_LAST_EVENT_DESC',
  ACCEPTED_OFFERS_DISTINCT_COUNT_OFFER_ID_ASC = 'ACCEPTED_OFFERS_DISTINCT_COUNT_OFFER_ID_ASC',
  ACCEPTED_OFFERS_DISTINCT_COUNT_OFFER_ID_DESC = 'ACCEPTED_OFFERS_DISTINCT_COUNT_OFFER_ID_DESC',
  ACCEPTED_OFFERS_DISTINCT_COUNT_SERVICE_AGREEMENT_ID_ASC = 'ACCEPTED_OFFERS_DISTINCT_COUNT_SERVICE_AGREEMENT_ID_ASC',
  ACCEPTED_OFFERS_DISTINCT_COUNT_SERVICE_AGREEMENT_ID_DESC = 'ACCEPTED_OFFERS_DISTINCT_COUNT_SERVICE_AGREEMENT_ID_DESC',
  ACCEPTED_OFFERS_MAX_BLOCK_RANGE_ASC = 'ACCEPTED_OFFERS_MAX_BLOCK_RANGE_ASC',
  ACCEPTED_OFFERS_MAX_BLOCK_RANGE_DESC = 'ACCEPTED_OFFERS_MAX_BLOCK_RANGE_DESC',
  ACCEPTED_OFFERS_MAX_CREATED_BLOCK_ASC = 'ACCEPTED_OFFERS_MAX_CREATED_BLOCK_ASC',
  ACCEPTED_OFFERS_MAX_CREATED_BLOCK_DESC = 'ACCEPTED_OFFERS_MAX_CREATED_BLOCK_DESC',
  ACCEPTED_OFFERS_MAX_ID_ASC = 'ACCEPTED_OFFERS_MAX_ID_ASC',
  ACCEPTED_OFFERS_MAX_ID_DESC = 'ACCEPTED_OFFERS_MAX_ID_DESC',
  ACCEPTED_OFFERS_MAX_INDEXER_ID_ASC = 'ACCEPTED_OFFERS_MAX_INDEXER_ID_ASC',
  ACCEPTED_OFFERS_MAX_INDEXER_ID_DESC = 'ACCEPTED_OFFERS_MAX_INDEXER_ID_DESC',
  ACCEPTED_OFFERS_MAX_LAST_EVENT_ASC = 'ACCEPTED_OFFERS_MAX_LAST_EVENT_ASC',
  ACCEPTED_OFFERS_MAX_LAST_EVENT_DESC = 'ACCEPTED_OFFERS_MAX_LAST_EVENT_DESC',
  ACCEPTED_OFFERS_MAX_OFFER_ID_ASC = 'ACCEPTED_OFFERS_MAX_OFFER_ID_ASC',
  ACCEPTED_OFFERS_MAX_OFFER_ID_DESC = 'ACCEPTED_OFFERS_MAX_OFFER_ID_DESC',
  ACCEPTED_OFFERS_MAX_SERVICE_AGREEMENT_ID_ASC = 'ACCEPTED_OFFERS_MAX_SERVICE_AGREEMENT_ID_ASC',
  ACCEPTED_OFFERS_MAX_SERVICE_AGREEMENT_ID_DESC = 'ACCEPTED_OFFERS_MAX_SERVICE_AGREEMENT_ID_DESC',
  ACCEPTED_OFFERS_MIN_BLOCK_RANGE_ASC = 'ACCEPTED_OFFERS_MIN_BLOCK_RANGE_ASC',
  ACCEPTED_OFFERS_MIN_BLOCK_RANGE_DESC = 'ACCEPTED_OFFERS_MIN_BLOCK_RANGE_DESC',
  ACCEPTED_OFFERS_MIN_CREATED_BLOCK_ASC = 'ACCEPTED_OFFERS_MIN_CREATED_BLOCK_ASC',
  ACCEPTED_OFFERS_MIN_CREATED_BLOCK_DESC = 'ACCEPTED_OFFERS_MIN_CREATED_BLOCK_DESC',
  ACCEPTED_OFFERS_MIN_ID_ASC = 'ACCEPTED_OFFERS_MIN_ID_ASC',
  ACCEPTED_OFFERS_MIN_ID_DESC = 'ACCEPTED_OFFERS_MIN_ID_DESC',
  ACCEPTED_OFFERS_MIN_INDEXER_ID_ASC = 'ACCEPTED_OFFERS_MIN_INDEXER_ID_ASC',
  ACCEPTED_OFFERS_MIN_INDEXER_ID_DESC = 'ACCEPTED_OFFERS_MIN_INDEXER_ID_DESC',
  ACCEPTED_OFFERS_MIN_LAST_EVENT_ASC = 'ACCEPTED_OFFERS_MIN_LAST_EVENT_ASC',
  ACCEPTED_OFFERS_MIN_LAST_EVENT_DESC = 'ACCEPTED_OFFERS_MIN_LAST_EVENT_DESC',
  ACCEPTED_OFFERS_MIN_OFFER_ID_ASC = 'ACCEPTED_OFFERS_MIN_OFFER_ID_ASC',
  ACCEPTED_OFFERS_MIN_OFFER_ID_DESC = 'ACCEPTED_OFFERS_MIN_OFFER_ID_DESC',
  ACCEPTED_OFFERS_MIN_SERVICE_AGREEMENT_ID_ASC = 'ACCEPTED_OFFERS_MIN_SERVICE_AGREEMENT_ID_ASC',
  ACCEPTED_OFFERS_MIN_SERVICE_AGREEMENT_ID_DESC = 'ACCEPTED_OFFERS_MIN_SERVICE_AGREEMENT_ID_DESC',
  ACCEPTED_OFFERS_STDDEV_POPULATION_BLOCK_RANGE_ASC = 'ACCEPTED_OFFERS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  ACCEPTED_OFFERS_STDDEV_POPULATION_BLOCK_RANGE_DESC = 'ACCEPTED_OFFERS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  ACCEPTED_OFFERS_STDDEV_POPULATION_CREATED_BLOCK_ASC = 'ACCEPTED_OFFERS_STDDEV_POPULATION_CREATED_BLOCK_ASC',
  ACCEPTED_OFFERS_STDDEV_POPULATION_CREATED_BLOCK_DESC = 'ACCEPTED_OFFERS_STDDEV_POPULATION_CREATED_BLOCK_DESC',
  ACCEPTED_OFFERS_STDDEV_POPULATION_ID_ASC = 'ACCEPTED_OFFERS_STDDEV_POPULATION_ID_ASC',
  ACCEPTED_OFFERS_STDDEV_POPULATION_ID_DESC = 'ACCEPTED_OFFERS_STDDEV_POPULATION_ID_DESC',
  ACCEPTED_OFFERS_STDDEV_POPULATION_INDEXER_ID_ASC = 'ACCEPTED_OFFERS_STDDEV_POPULATION_INDEXER_ID_ASC',
  ACCEPTED_OFFERS_STDDEV_POPULATION_INDEXER_ID_DESC = 'ACCEPTED_OFFERS_STDDEV_POPULATION_INDEXER_ID_DESC',
  ACCEPTED_OFFERS_STDDEV_POPULATION_LAST_EVENT_ASC = 'ACCEPTED_OFFERS_STDDEV_POPULATION_LAST_EVENT_ASC',
  ACCEPTED_OFFERS_STDDEV_POPULATION_LAST_EVENT_DESC = 'ACCEPTED_OFFERS_STDDEV_POPULATION_LAST_EVENT_DESC',
  ACCEPTED_OFFERS_STDDEV_POPULATION_OFFER_ID_ASC = 'ACCEPTED_OFFERS_STDDEV_POPULATION_OFFER_ID_ASC',
  ACCEPTED_OFFERS_STDDEV_POPULATION_OFFER_ID_DESC = 'ACCEPTED_OFFERS_STDDEV_POPULATION_OFFER_ID_DESC',
  ACCEPTED_OFFERS_STDDEV_POPULATION_SERVICE_AGREEMENT_ID_ASC = 'ACCEPTED_OFFERS_STDDEV_POPULATION_SERVICE_AGREEMENT_ID_ASC',
  ACCEPTED_OFFERS_STDDEV_POPULATION_SERVICE_AGREEMENT_ID_DESC = 'ACCEPTED_OFFERS_STDDEV_POPULATION_SERVICE_AGREEMENT_ID_DESC',
  ACCEPTED_OFFERS_STDDEV_SAMPLE_BLOCK_RANGE_ASC = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  ACCEPTED_OFFERS_STDDEV_SAMPLE_BLOCK_RANGE_DESC = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  ACCEPTED_OFFERS_STDDEV_SAMPLE_CREATED_BLOCK_ASC = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_CREATED_BLOCK_ASC',
  ACCEPTED_OFFERS_STDDEV_SAMPLE_CREATED_BLOCK_DESC = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_CREATED_BLOCK_DESC',
  ACCEPTED_OFFERS_STDDEV_SAMPLE_ID_ASC = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_ID_ASC',
  ACCEPTED_OFFERS_STDDEV_SAMPLE_ID_DESC = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_ID_DESC',
  ACCEPTED_OFFERS_STDDEV_SAMPLE_INDEXER_ID_ASC = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_INDEXER_ID_ASC',
  ACCEPTED_OFFERS_STDDEV_SAMPLE_INDEXER_ID_DESC = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_INDEXER_ID_DESC',
  ACCEPTED_OFFERS_STDDEV_SAMPLE_LAST_EVENT_ASC = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_LAST_EVENT_ASC',
  ACCEPTED_OFFERS_STDDEV_SAMPLE_LAST_EVENT_DESC = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_LAST_EVENT_DESC',
  ACCEPTED_OFFERS_STDDEV_SAMPLE_OFFER_ID_ASC = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_OFFER_ID_ASC',
  ACCEPTED_OFFERS_STDDEV_SAMPLE_OFFER_ID_DESC = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_OFFER_ID_DESC',
  ACCEPTED_OFFERS_STDDEV_SAMPLE_SERVICE_AGREEMENT_ID_ASC = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_SERVICE_AGREEMENT_ID_ASC',
  ACCEPTED_OFFERS_STDDEV_SAMPLE_SERVICE_AGREEMENT_ID_DESC = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_SERVICE_AGREEMENT_ID_DESC',
  ACCEPTED_OFFERS_SUM_BLOCK_RANGE_ASC = 'ACCEPTED_OFFERS_SUM_BLOCK_RANGE_ASC',
  ACCEPTED_OFFERS_SUM_BLOCK_RANGE_DESC = 'ACCEPTED_OFFERS_SUM_BLOCK_RANGE_DESC',
  ACCEPTED_OFFERS_SUM_CREATED_BLOCK_ASC = 'ACCEPTED_OFFERS_SUM_CREATED_BLOCK_ASC',
  ACCEPTED_OFFERS_SUM_CREATED_BLOCK_DESC = 'ACCEPTED_OFFERS_SUM_CREATED_BLOCK_DESC',
  ACCEPTED_OFFERS_SUM_ID_ASC = 'ACCEPTED_OFFERS_SUM_ID_ASC',
  ACCEPTED_OFFERS_SUM_ID_DESC = 'ACCEPTED_OFFERS_SUM_ID_DESC',
  ACCEPTED_OFFERS_SUM_INDEXER_ID_ASC = 'ACCEPTED_OFFERS_SUM_INDEXER_ID_ASC',
  ACCEPTED_OFFERS_SUM_INDEXER_ID_DESC = 'ACCEPTED_OFFERS_SUM_INDEXER_ID_DESC',
  ACCEPTED_OFFERS_SUM_LAST_EVENT_ASC = 'ACCEPTED_OFFERS_SUM_LAST_EVENT_ASC',
  ACCEPTED_OFFERS_SUM_LAST_EVENT_DESC = 'ACCEPTED_OFFERS_SUM_LAST_EVENT_DESC',
  ACCEPTED_OFFERS_SUM_OFFER_ID_ASC = 'ACCEPTED_OFFERS_SUM_OFFER_ID_ASC',
  ACCEPTED_OFFERS_SUM_OFFER_ID_DESC = 'ACCEPTED_OFFERS_SUM_OFFER_ID_DESC',
  ACCEPTED_OFFERS_SUM_SERVICE_AGREEMENT_ID_ASC = 'ACCEPTED_OFFERS_SUM_SERVICE_AGREEMENT_ID_ASC',
  ACCEPTED_OFFERS_SUM_SERVICE_AGREEMENT_ID_DESC = 'ACCEPTED_OFFERS_SUM_SERVICE_AGREEMENT_ID_DESC',
  ACCEPTED_OFFERS_VARIANCE_POPULATION_BLOCK_RANGE_ASC = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  ACCEPTED_OFFERS_VARIANCE_POPULATION_BLOCK_RANGE_DESC = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  ACCEPTED_OFFERS_VARIANCE_POPULATION_CREATED_BLOCK_ASC = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_CREATED_BLOCK_ASC',
  ACCEPTED_OFFERS_VARIANCE_POPULATION_CREATED_BLOCK_DESC = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_CREATED_BLOCK_DESC',
  ACCEPTED_OFFERS_VARIANCE_POPULATION_ID_ASC = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_ID_ASC',
  ACCEPTED_OFFERS_VARIANCE_POPULATION_ID_DESC = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_ID_DESC',
  ACCEPTED_OFFERS_VARIANCE_POPULATION_INDEXER_ID_ASC = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_INDEXER_ID_ASC',
  ACCEPTED_OFFERS_VARIANCE_POPULATION_INDEXER_ID_DESC = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_INDEXER_ID_DESC',
  ACCEPTED_OFFERS_VARIANCE_POPULATION_LAST_EVENT_ASC = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_LAST_EVENT_ASC',
  ACCEPTED_OFFERS_VARIANCE_POPULATION_LAST_EVENT_DESC = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_LAST_EVENT_DESC',
  ACCEPTED_OFFERS_VARIANCE_POPULATION_OFFER_ID_ASC = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_OFFER_ID_ASC',
  ACCEPTED_OFFERS_VARIANCE_POPULATION_OFFER_ID_DESC = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_OFFER_ID_DESC',
  ACCEPTED_OFFERS_VARIANCE_POPULATION_SERVICE_AGREEMENT_ID_ASC = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_SERVICE_AGREEMENT_ID_ASC',
  ACCEPTED_OFFERS_VARIANCE_POPULATION_SERVICE_AGREEMENT_ID_DESC = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_SERVICE_AGREEMENT_ID_DESC',
  ACCEPTED_OFFERS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  ACCEPTED_OFFERS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  ACCEPTED_OFFERS_VARIANCE_SAMPLE_CREATED_BLOCK_ASC = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_CREATED_BLOCK_ASC',
  ACCEPTED_OFFERS_VARIANCE_SAMPLE_CREATED_BLOCK_DESC = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_CREATED_BLOCK_DESC',
  ACCEPTED_OFFERS_VARIANCE_SAMPLE_ID_ASC = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_ID_ASC',
  ACCEPTED_OFFERS_VARIANCE_SAMPLE_ID_DESC = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_ID_DESC',
  ACCEPTED_OFFERS_VARIANCE_SAMPLE_INDEXER_ID_ASC = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  ACCEPTED_OFFERS_VARIANCE_SAMPLE_INDEXER_ID_DESC = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  ACCEPTED_OFFERS_VARIANCE_SAMPLE_LAST_EVENT_ASC = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_LAST_EVENT_ASC',
  ACCEPTED_OFFERS_VARIANCE_SAMPLE_LAST_EVENT_DESC = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_LAST_EVENT_DESC',
  ACCEPTED_OFFERS_VARIANCE_SAMPLE_OFFER_ID_ASC = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_OFFER_ID_ASC',
  ACCEPTED_OFFERS_VARIANCE_SAMPLE_OFFER_ID_DESC = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_OFFER_ID_DESC',
  ACCEPTED_OFFERS_VARIANCE_SAMPLE_SERVICE_AGREEMENT_ID_ASC = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_SERVICE_AGREEMENT_ID_ASC',
  ACCEPTED_OFFERS_VARIANCE_SAMPLE_SERVICE_AGREEMENT_ID_DESC = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_SERVICE_AGREEMENT_ID_DESC',
  CONSUMER_ASC = 'CONSUMER_ASC',
  CONSUMER_DESC = 'CONSUMER_DESC',
  CREATED_BLOCK_ASC = 'CREATED_BLOCK_ASC',
  CREATED_BLOCK_DESC = 'CREATED_BLOCK_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__ID_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__ID_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__ID_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__ID_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_DESC',
  DEPLOYMENT_ID_ASC = 'DEPLOYMENT_ID_ASC',
  DEPLOYMENT_ID_DESC = 'DEPLOYMENT_ID_DESC',
  DEPOSIT_ASC = 'DEPOSIT_ASC',
  DEPOSIT_DESC = 'DEPOSIT_DESC',
  EXPIRE_DATE_ASC = 'EXPIRE_DATE_ASC',
  EXPIRE_DATE_DESC = 'EXPIRE_DATE_DESC',
  ID_ASC = 'ID_ASC',
  ID_DESC = 'ID_DESC',
  LAST_EVENT_ASC = 'LAST_EVENT_ASC',
  LAST_EVENT_DESC = 'LAST_EVENT_DESC',
  LIMIT_ASC = 'LIMIT_ASC',
  LIMIT_DESC = 'LIMIT_DESC',
  MINIMUM_ACCEPT_HEIGHT_ASC = 'MINIMUM_ACCEPT_HEIGHT_ASC',
  MINIMUM_ACCEPT_HEIGHT_DESC = 'MINIMUM_ACCEPT_HEIGHT_DESC',
  MINIMUM_STAKING_AMOUNT_ASC = 'MINIMUM_STAKING_AMOUNT_ASC',
  MINIMUM_STAKING_AMOUNT_DESC = 'MINIMUM_STAKING_AMOUNT_DESC',
  NATURAL = 'NATURAL',
  PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__ACTIVE_ASC = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__ACTIVE_ASC',
  PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__ACTIVE_DESC = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__ACTIVE_DESC',
  PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__CREATED_BLOCK_ASC = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__CREATED_BLOCK_ASC',
  PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__CREATED_BLOCK_DESC = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__CREATED_BLOCK_DESC',
  PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__DAILY_REQ_CAP_ASC = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__DAILY_REQ_CAP_ASC',
  PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__DAILY_REQ_CAP_DESC = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__DAILY_REQ_CAP_DESC',
  PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__ID_ASC = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__ID_ASC',
  PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__ID_DESC = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__ID_DESC',
  PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__LAST_EVENT_ASC = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__LAST_EVENT_ASC',
  PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__LAST_EVENT_DESC = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__LAST_EVENT_DESC',
  PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__METADATA_ASC = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__METADATA_ASC',
  PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__METADATA_DESC = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__METADATA_DESC',
  PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__PERIOD_ASC = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__PERIOD_ASC',
  PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__PERIOD_DESC = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__PERIOD_DESC',
  PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__PRICE_TOKEN_ASC = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__PRICE_TOKEN_ASC',
  PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__PRICE_TOKEN_DESC = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__PRICE_TOKEN_DESC',
  PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__RATE_LIMIT_ASC = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__RATE_LIMIT_ASC',
  PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__RATE_LIMIT_DESC = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__RATE_LIMIT_DESC',
  PLAN_TEMPLATE_ID_ASC = 'PLAN_TEMPLATE_ID_ASC',
  PLAN_TEMPLATE_ID_DESC = 'PLAN_TEMPLATE_ID_DESC',
  PRIMARY_KEY_ASC = 'PRIMARY_KEY_ASC',
  PRIMARY_KEY_DESC = 'PRIMARY_KEY_DESC',
  REACH_LIMIT_ASC = 'REACH_LIMIT_ASC',
  REACH_LIMIT_DESC = 'REACH_LIMIT_DESC',
  WITHDRAWN_ASC = 'WITHDRAWN_ASC',
  WITHDRAWN_DESC = 'WITHDRAWN_DESC',
  WITHDRAW_PENALTY_ASC = 'WITHDRAW_PENALTY_ASC',
  WITHDRAW_PENALTY_DESC = 'WITHDRAW_PENALTY_DESC',
}

export type Order = Node & {
  readonly __typename: 'Order';
  readonly amountGet: Scalars['BigFloat']['output'];
  readonly amountGive: Scalars['BigFloat']['output'];
  readonly createAt: Scalars['Datetime']['output'];
  readonly id: Scalars['String']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  readonly nodeId: Scalars['ID']['output'];
  readonly sender: Scalars['String']['output'];
  readonly status: OrderStatus;
  readonly tokenGet: Scalars['String']['output'];
  readonly tokenGive: Scalars['String']['output'];
  readonly tokenGiveBalance: Scalars['BigFloat']['output'];
  readonly updateAt: Scalars['Datetime']['output'];
};

export type OrderAggregates = {
  readonly __typename: 'OrderAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly average: Maybe<OrderAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly distinctCount: Maybe<OrderDistinctCountAggregates>;
  readonly keys: Maybe<ReadonlyArray<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly max: Maybe<OrderMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly min: Maybe<OrderMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevPopulation: Maybe<OrderStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevSample: Maybe<OrderStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly sum: Maybe<OrderSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly variancePopulation: Maybe<OrderVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly varianceSample: Maybe<OrderVarianceSampleAggregates>;
};

export type OrderAverageAggregates = {
  readonly __typename: 'OrderAverageAggregates';
  /** Mean average of amountGet across the matching connection */
  readonly amountGet: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of amountGive across the matching connection */
  readonly amountGive: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of tokenGiveBalance across the matching connection */
  readonly tokenGiveBalance: Maybe<Scalars['BigFloat']['output']>;
};

export type OrderDistinctCountAggregates = {
  readonly __typename: 'OrderDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  readonly _blockRange: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  readonly _id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of amountGet across the matching connection */
  readonly amountGet: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of amountGive across the matching connection */
  readonly amountGive: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createAt across the matching connection */
  readonly createAt: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  readonly id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of sender across the matching connection */
  readonly sender: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of status across the matching connection */
  readonly status: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of tokenGet across the matching connection */
  readonly tokenGet: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of tokenGive across the matching connection */
  readonly tokenGive: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of tokenGiveBalance across the matching connection */
  readonly tokenGiveBalance: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of updateAt across the matching connection */
  readonly updateAt: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `Order` object types. All fields are combined with a logical ‘and.’ */
export type OrderFilter = {
  /** Filter by the object’s `amountGet` field. */
  readonly amountGet: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `amountGive` field. */
  readonly amountGive: InputMaybe<BigFloatFilter>;
  /** Checks for all expressions in this list. */
  readonly and: InputMaybe<ReadonlyArray<OrderFilter>>;
  /** Filter by the object’s `createAt` field. */
  readonly createAt: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `id` field. */
  readonly id: InputMaybe<StringFilter>;
  /** Negates the expression. */
  readonly not: InputMaybe<OrderFilter>;
  /** Checks for any expressions in this list. */
  readonly or: InputMaybe<ReadonlyArray<OrderFilter>>;
  /** Filter by the object’s `sender` field. */
  readonly sender: InputMaybe<StringFilter>;
  /** Filter by the object’s `status` field. */
  readonly status: InputMaybe<OrderStatusFilter>;
  /** Filter by the object’s `tokenGet` field. */
  readonly tokenGet: InputMaybe<StringFilter>;
  /** Filter by the object’s `tokenGive` field. */
  readonly tokenGive: InputMaybe<StringFilter>;
  /** Filter by the object’s `tokenGiveBalance` field. */
  readonly tokenGiveBalance: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `updateAt` field. */
  readonly updateAt: InputMaybe<DatetimeFilter>;
};

export type OrderMaxAggregates = {
  readonly __typename: 'OrderMaxAggregates';
  /** Maximum of amountGet across the matching connection */
  readonly amountGet: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of amountGive across the matching connection */
  readonly amountGive: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of tokenGiveBalance across the matching connection */
  readonly tokenGiveBalance: Maybe<Scalars['BigFloat']['output']>;
};

export type OrderMinAggregates = {
  readonly __typename: 'OrderMinAggregates';
  /** Minimum of amountGet across the matching connection */
  readonly amountGet: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of amountGive across the matching connection */
  readonly amountGive: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of tokenGiveBalance across the matching connection */
  readonly tokenGiveBalance: Maybe<Scalars['BigFloat']['output']>;
};

export enum OrderStatus {
  ACTIVE = 'ACTIVE',
  INACTIVE = 'INACTIVE',
}

/** A filter to be used against OrderStatus fields. All fields are combined with a logical ‘and.’ */
export type OrderStatusFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  readonly distinctFrom: InputMaybe<OrderStatus>;
  /** Equal to the specified value. */
  readonly equalTo: InputMaybe<OrderStatus>;
  /** Greater than the specified value. */
  readonly greaterThan: InputMaybe<OrderStatus>;
  /** Greater than or equal to the specified value. */
  readonly greaterThanOrEqualTo: InputMaybe<OrderStatus>;
  /** Included in the specified list. */
  readonly in: InputMaybe<ReadonlyArray<OrderStatus>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  readonly isNull: InputMaybe<Scalars['Boolean']['input']>;
  /** Less than the specified value. */
  readonly lessThan: InputMaybe<OrderStatus>;
  /** Less than or equal to the specified value. */
  readonly lessThanOrEqualTo: InputMaybe<OrderStatus>;
  /** Equal to the specified value, treating null like an ordinary value. */
  readonly notDistinctFrom: InputMaybe<OrderStatus>;
  /** Not equal to the specified value. */
  readonly notEqualTo: InputMaybe<OrderStatus>;
  /** Not included in the specified list. */
  readonly notIn: InputMaybe<ReadonlyArray<OrderStatus>>;
};

export type OrderStddevPopulationAggregates = {
  readonly __typename: 'OrderStddevPopulationAggregates';
  /** Population standard deviation of amountGet across the matching connection */
  readonly amountGet: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of amountGive across the matching connection */
  readonly amountGive: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of tokenGiveBalance across the matching connection */
  readonly tokenGiveBalance: Maybe<Scalars['BigFloat']['output']>;
};

export type OrderStddevSampleAggregates = {
  readonly __typename: 'OrderStddevSampleAggregates';
  /** Sample standard deviation of amountGet across the matching connection */
  readonly amountGet: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of amountGive across the matching connection */
  readonly amountGive: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of tokenGiveBalance across the matching connection */
  readonly tokenGiveBalance: Maybe<Scalars['BigFloat']['output']>;
};

export type OrderSumAggregates = {
  readonly __typename: 'OrderSumAggregates';
  /** Sum of amountGet across the matching connection */
  readonly amountGet: Scalars['BigFloat']['output'];
  /** Sum of amountGive across the matching connection */
  readonly amountGive: Scalars['BigFloat']['output'];
  /** Sum of tokenGiveBalance across the matching connection */
  readonly tokenGiveBalance: Scalars['BigFloat']['output'];
};

export enum OrderType {
  SERVICE_AGREEMENT = 'SERVICE_AGREEMENT',
  STATE_CHANNEL = 'STATE_CHANNEL',
  UNKNOWN = 'UNKNOWN',
}

/** A filter to be used against OrderType fields. All fields are combined with a logical ‘and.’ */
export type OrderTypeFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  readonly distinctFrom: InputMaybe<OrderType>;
  /** Equal to the specified value. */
  readonly equalTo: InputMaybe<OrderType>;
  /** Greater than the specified value. */
  readonly greaterThan: InputMaybe<OrderType>;
  /** Greater than or equal to the specified value. */
  readonly greaterThanOrEqualTo: InputMaybe<OrderType>;
  /** Included in the specified list. */
  readonly in: InputMaybe<ReadonlyArray<OrderType>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  readonly isNull: InputMaybe<Scalars['Boolean']['input']>;
  /** Less than the specified value. */
  readonly lessThan: InputMaybe<OrderType>;
  /** Less than or equal to the specified value. */
  readonly lessThanOrEqualTo: InputMaybe<OrderType>;
  /** Equal to the specified value, treating null like an ordinary value. */
  readonly notDistinctFrom: InputMaybe<OrderType>;
  /** Not equal to the specified value. */
  readonly notEqualTo: InputMaybe<OrderType>;
  /** Not included in the specified list. */
  readonly notIn: InputMaybe<ReadonlyArray<OrderType>>;
};

export type OrderVariancePopulationAggregates = {
  readonly __typename: 'OrderVariancePopulationAggregates';
  /** Population variance of amountGet across the matching connection */
  readonly amountGet: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of amountGive across the matching connection */
  readonly amountGive: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of tokenGiveBalance across the matching connection */
  readonly tokenGiveBalance: Maybe<Scalars['BigFloat']['output']>;
};

export type OrderVarianceSampleAggregates = {
  readonly __typename: 'OrderVarianceSampleAggregates';
  /** Sample variance of amountGet across the matching connection */
  readonly amountGet: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of amountGive across the matching connection */
  readonly amountGive: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of tokenGiveBalance across the matching connection */
  readonly tokenGiveBalance: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `Order` values. */
export type OrdersConnection = {
  readonly __typename: 'OrdersConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<OrderAggregates>;
  /** A list of edges which contains the `Order` and cursor to aid in pagination. */
  readonly edges: ReadonlyArray<OrdersEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<OrderAggregates>>;
  /** A list of `Order` objects. */
  readonly nodes: ReadonlyArray<Maybe<Order>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Order` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Order` values. */
export type OrdersConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<OrdersGroupBy>;
  having: InputMaybe<OrdersHavingInput>;
};

/** A `Order` edge in the connection. */
export type OrdersEdge = {
  readonly __typename: 'OrdersEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `Order` at the end of the edge. */
  readonly node: Maybe<Order>;
};

/** Grouping methods for `Order` for usage during aggregation. */
export enum OrdersGroupBy {
  AMOUNT_GET = 'AMOUNT_GET',
  AMOUNT_GIVE = 'AMOUNT_GIVE',
  CREATE_AT = 'CREATE_AT',
  CREATE_AT_TRUNCATED_TO_DAY = 'CREATE_AT_TRUNCATED_TO_DAY',
  CREATE_AT_TRUNCATED_TO_HOUR = 'CREATE_AT_TRUNCATED_TO_HOUR',
  ID = 'ID',
  SENDER = 'SENDER',
  STATUS = 'STATUS',
  TOKEN_GET = 'TOKEN_GET',
  TOKEN_GIVE = 'TOKEN_GIVE',
  TOKEN_GIVE_BALANCE = 'TOKEN_GIVE_BALANCE',
  UPDATE_AT = 'UPDATE_AT',
  UPDATE_AT_TRUNCATED_TO_DAY = 'UPDATE_AT_TRUNCATED_TO_DAY',
  UPDATE_AT_TRUNCATED_TO_HOUR = 'UPDATE_AT_TRUNCATED_TO_HOUR',
}

export type OrdersHavingAverageInput = {
  readonly amountGet: InputMaybe<HavingBigfloatFilter>;
  readonly amountGive: InputMaybe<HavingBigfloatFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly tokenGiveBalance: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type OrdersHavingDistinctCountInput = {
  readonly amountGet: InputMaybe<HavingBigfloatFilter>;
  readonly amountGive: InputMaybe<HavingBigfloatFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly tokenGiveBalance: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

/** Conditions for `Order` aggregates. */
export type OrdersHavingInput = {
  readonly AND: InputMaybe<ReadonlyArray<OrdersHavingInput>>;
  readonly OR: InputMaybe<ReadonlyArray<OrdersHavingInput>>;
  readonly average: InputMaybe<OrdersHavingAverageInput>;
  readonly distinctCount: InputMaybe<OrdersHavingDistinctCountInput>;
  readonly max: InputMaybe<OrdersHavingMaxInput>;
  readonly min: InputMaybe<OrdersHavingMinInput>;
  readonly stddevPopulation: InputMaybe<OrdersHavingStddevPopulationInput>;
  readonly stddevSample: InputMaybe<OrdersHavingStddevSampleInput>;
  readonly sum: InputMaybe<OrdersHavingSumInput>;
  readonly variancePopulation: InputMaybe<OrdersHavingVariancePopulationInput>;
  readonly varianceSample: InputMaybe<OrdersHavingVarianceSampleInput>;
};

export type OrdersHavingMaxInput = {
  readonly amountGet: InputMaybe<HavingBigfloatFilter>;
  readonly amountGive: InputMaybe<HavingBigfloatFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly tokenGiveBalance: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type OrdersHavingMinInput = {
  readonly amountGet: InputMaybe<HavingBigfloatFilter>;
  readonly amountGive: InputMaybe<HavingBigfloatFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly tokenGiveBalance: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type OrdersHavingStddevPopulationInput = {
  readonly amountGet: InputMaybe<HavingBigfloatFilter>;
  readonly amountGive: InputMaybe<HavingBigfloatFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly tokenGiveBalance: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type OrdersHavingStddevSampleInput = {
  readonly amountGet: InputMaybe<HavingBigfloatFilter>;
  readonly amountGive: InputMaybe<HavingBigfloatFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly tokenGiveBalance: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type OrdersHavingSumInput = {
  readonly amountGet: InputMaybe<HavingBigfloatFilter>;
  readonly amountGive: InputMaybe<HavingBigfloatFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly tokenGiveBalance: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type OrdersHavingVariancePopulationInput = {
  readonly amountGet: InputMaybe<HavingBigfloatFilter>;
  readonly amountGive: InputMaybe<HavingBigfloatFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly tokenGiveBalance: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

export type OrdersHavingVarianceSampleInput = {
  readonly amountGet: InputMaybe<HavingBigfloatFilter>;
  readonly amountGive: InputMaybe<HavingBigfloatFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
  readonly tokenGiveBalance: InputMaybe<HavingBigfloatFilter>;
  readonly updateAt: InputMaybe<HavingDatetimeFilter>;
};

/** Methods to use when ordering `Order`. */
export enum OrdersOrderBy {
  AMOUNT_GET_ASC = 'AMOUNT_GET_ASC',
  AMOUNT_GET_DESC = 'AMOUNT_GET_DESC',
  AMOUNT_GIVE_ASC = 'AMOUNT_GIVE_ASC',
  AMOUNT_GIVE_DESC = 'AMOUNT_GIVE_DESC',
  CREATE_AT_ASC = 'CREATE_AT_ASC',
  CREATE_AT_DESC = 'CREATE_AT_DESC',
  ID_ASC = 'ID_ASC',
  ID_DESC = 'ID_DESC',
  NATURAL = 'NATURAL',
  PRIMARY_KEY_ASC = 'PRIMARY_KEY_ASC',
  PRIMARY_KEY_DESC = 'PRIMARY_KEY_DESC',
  SENDER_ASC = 'SENDER_ASC',
  SENDER_DESC = 'SENDER_DESC',
  STATUS_ASC = 'STATUS_ASC',
  STATUS_DESC = 'STATUS_DESC',
  TOKEN_GET_ASC = 'TOKEN_GET_ASC',
  TOKEN_GET_DESC = 'TOKEN_GET_DESC',
  TOKEN_GIVE_ASC = 'TOKEN_GIVE_ASC',
  TOKEN_GIVE_BALANCE_ASC = 'TOKEN_GIVE_BALANCE_ASC',
  TOKEN_GIVE_BALANCE_DESC = 'TOKEN_GIVE_BALANCE_DESC',
  TOKEN_GIVE_DESC = 'TOKEN_GIVE_DESC',
  UPDATE_AT_ASC = 'UPDATE_AT_ASC',
  UPDATE_AT_DESC = 'UPDATE_AT_DESC',
}

/** Information about pagination in a connection. */
export type PageInfo = {
  readonly __typename: 'PageInfo';
  /** When paginating forwards, the cursor to continue. */
  readonly endCursor: Maybe<Scalars['Cursor']['output']>;
  /** When paginating forwards, are there more items? */
  readonly hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  readonly hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  readonly startCursor: Maybe<Scalars['Cursor']['output']>;
};

export type Plan = Node & {
  readonly __typename: 'Plan';
  readonly active: Scalars['Boolean']['output'];
  readonly createdBlock: Maybe<Scalars['Int']['output']>;
  readonly creator: Scalars['String']['output'];
  /** Reads a single `Deployment` that is related to this `Plan`. */
  readonly deployment: Maybe<Deployment>;
  readonly deploymentId: Maybe<Scalars['String']['output']>;
  readonly id: Scalars['String']['output'];
  readonly lastEvent: Maybe<Scalars['String']['output']>;
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  readonly nodeId: Scalars['ID']['output'];
  /** Reads a single `PlanTemplate` that is related to this `Plan`. */
  readonly planTemplate: Maybe<PlanTemplate>;
  readonly planTemplateId: Scalars['String']['output'];
  readonly price: Scalars['BigFloat']['output'];
};

export type PlanAggregates = {
  readonly __typename: 'PlanAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly average: Maybe<PlanAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly distinctCount: Maybe<PlanDistinctCountAggregates>;
  readonly keys: Maybe<ReadonlyArray<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly max: Maybe<PlanMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly min: Maybe<PlanMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevPopulation: Maybe<PlanStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevSample: Maybe<PlanStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly sum: Maybe<PlanSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly variancePopulation: Maybe<PlanVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly varianceSample: Maybe<PlanVarianceSampleAggregates>;
};

/** A filter to be used against aggregates of `Plan` object types. */
export type PlanAggregatesFilter = {
  /** Mean average aggregate over matching `Plan` objects. */
  readonly average: InputMaybe<PlanAverageAggregateFilter>;
  /** Distinct count aggregate over matching `Plan` objects. */
  readonly distinctCount: InputMaybe<PlanDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `Plan` object to be included within the aggregate. */
  readonly filter: InputMaybe<PlanFilter>;
  /** Maximum aggregate over matching `Plan` objects. */
  readonly max: InputMaybe<PlanMaxAggregateFilter>;
  /** Minimum aggregate over matching `Plan` objects. */
  readonly min: InputMaybe<PlanMinAggregateFilter>;
  /** Population standard deviation aggregate over matching `Plan` objects. */
  readonly stddevPopulation: InputMaybe<PlanStddevPopulationAggregateFilter>;
  /** Sample standard deviation aggregate over matching `Plan` objects. */
  readonly stddevSample: InputMaybe<PlanStddevSampleAggregateFilter>;
  /** Sum aggregate over matching `Plan` objects. */
  readonly sum: InputMaybe<PlanSumAggregateFilter>;
  /** Population variance aggregate over matching `Plan` objects. */
  readonly variancePopulation: InputMaybe<PlanVariancePopulationAggregateFilter>;
  /** Sample variance aggregate over matching `Plan` objects. */
  readonly varianceSample: InputMaybe<PlanVarianceSampleAggregateFilter>;
};

export type PlanAverageAggregateFilter = {
  readonly createdBlock: InputMaybe<BigFloatFilter>;
  readonly price: InputMaybe<BigFloatFilter>;
};

export type PlanAverageAggregates = {
  readonly __typename: 'PlanAverageAggregates';
  /** Mean average of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of price across the matching connection */
  readonly price: Maybe<Scalars['BigFloat']['output']>;
};

export type PlanDistinctCountAggregateFilter = {
  readonly _blockRange: InputMaybe<BigIntFilter>;
  readonly _id: InputMaybe<BigIntFilter>;
  readonly active: InputMaybe<BigIntFilter>;
  readonly createdBlock: InputMaybe<BigIntFilter>;
  readonly creator: InputMaybe<BigIntFilter>;
  readonly deploymentId: InputMaybe<BigIntFilter>;
  readonly id: InputMaybe<BigIntFilter>;
  readonly lastEvent: InputMaybe<BigIntFilter>;
  readonly planTemplateId: InputMaybe<BigIntFilter>;
  readonly price: InputMaybe<BigIntFilter>;
};

export type PlanDistinctCountAggregates = {
  readonly __typename: 'PlanDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  readonly _blockRange: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  readonly _id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of active across the matching connection */
  readonly active: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of creator across the matching connection */
  readonly creator: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of deploymentId across the matching connection */
  readonly deploymentId: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  readonly id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of lastEvent across the matching connection */
  readonly lastEvent: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of planTemplateId across the matching connection */
  readonly planTemplateId: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of price across the matching connection */
  readonly price: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `Plan` object types. All fields are combined with a logical ‘and.’ */
export type PlanFilter = {
  /** Filter by the object’s `active` field. */
  readonly active: InputMaybe<BooleanFilter>;
  /** Checks for all expressions in this list. */
  readonly and: InputMaybe<ReadonlyArray<PlanFilter>>;
  /** Filter by the object’s `createdBlock` field. */
  readonly createdBlock: InputMaybe<IntFilter>;
  /** Filter by the object’s `creator` field. */
  readonly creator: InputMaybe<StringFilter>;
  /** Filter by the object’s `deployment` relation. */
  readonly deployment: InputMaybe<DeploymentFilter>;
  /** A related `deployment` exists. */
  readonly deploymentExists: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `deploymentId` field. */
  readonly deploymentId: InputMaybe<StringFilter>;
  /** Filter by the object’s `id` field. */
  readonly id: InputMaybe<StringFilter>;
  /** Filter by the object’s `lastEvent` field. */
  readonly lastEvent: InputMaybe<StringFilter>;
  /** Negates the expression. */
  readonly not: InputMaybe<PlanFilter>;
  /** Checks for any expressions in this list. */
  readonly or: InputMaybe<ReadonlyArray<PlanFilter>>;
  /** Filter by the object’s `planTemplate` relation. */
  readonly planTemplate: InputMaybe<PlanTemplateFilter>;
  /** Filter by the object’s `planTemplateId` field. */
  readonly planTemplateId: InputMaybe<StringFilter>;
  /** Filter by the object’s `price` field. */
  readonly price: InputMaybe<BigFloatFilter>;
};

export type PlanMaxAggregateFilter = {
  readonly createdBlock: InputMaybe<IntFilter>;
  readonly price: InputMaybe<BigFloatFilter>;
};

export type PlanMaxAggregates = {
  readonly __typename: 'PlanMaxAggregates';
  /** Maximum of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['Int']['output']>;
  /** Maximum of price across the matching connection */
  readonly price: Maybe<Scalars['BigFloat']['output']>;
};

export type PlanMinAggregateFilter = {
  readonly createdBlock: InputMaybe<IntFilter>;
  readonly price: InputMaybe<BigFloatFilter>;
};

export type PlanMinAggregates = {
  readonly __typename: 'PlanMinAggregates';
  /** Minimum of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['Int']['output']>;
  /** Minimum of price across the matching connection */
  readonly price: Maybe<Scalars['BigFloat']['output']>;
};

export type PlanStddevPopulationAggregateFilter = {
  readonly createdBlock: InputMaybe<BigFloatFilter>;
  readonly price: InputMaybe<BigFloatFilter>;
};

export type PlanStddevPopulationAggregates = {
  readonly __typename: 'PlanStddevPopulationAggregates';
  /** Population standard deviation of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of price across the matching connection */
  readonly price: Maybe<Scalars['BigFloat']['output']>;
};

export type PlanStddevSampleAggregateFilter = {
  readonly createdBlock: InputMaybe<BigFloatFilter>;
  readonly price: InputMaybe<BigFloatFilter>;
};

export type PlanStddevSampleAggregates = {
  readonly __typename: 'PlanStddevSampleAggregates';
  /** Sample standard deviation of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of price across the matching connection */
  readonly price: Maybe<Scalars['BigFloat']['output']>;
};

export type PlanSumAggregateFilter = {
  readonly createdBlock: InputMaybe<BigIntFilter>;
  readonly price: InputMaybe<BigFloatFilter>;
};

export type PlanSumAggregates = {
  readonly __typename: 'PlanSumAggregates';
  /** Sum of createdBlock across the matching connection */
  readonly createdBlock: Scalars['BigInt']['output'];
  /** Sum of price across the matching connection */
  readonly price: Scalars['BigFloat']['output'];
};

export type PlanTemplate = Node & {
  readonly __typename: 'PlanTemplate';
  readonly active: Scalars['Boolean']['output'];
  readonly createdBlock: Maybe<Scalars['Int']['output']>;
  readonly dailyReqCap: Scalars['BigFloat']['output'];
  /** Reads and enables pagination through a set of `Deployment`. */
  readonly deploymentsByOfferPlanTemplateIdAndDeploymentId: PlanTemplateDeploymentsByOfferPlanTemplateIdAndDeploymentIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Deployment`. */
  readonly deploymentsByPlanPlanTemplateIdAndDeploymentId: PlanTemplateDeploymentsByPlanPlanTemplateIdAndDeploymentIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Deployment`. */
  readonly deploymentsByServiceAgreementPlanTemplateIdAndDeploymentId: PlanTemplateDeploymentsByServiceAgreementPlanTemplateIdAndDeploymentIdManyToManyConnection;
  readonly id: Scalars['String']['output'];
  readonly lastEvent: Maybe<Scalars['String']['output']>;
  readonly metadata: Maybe<Scalars['String']['output']>;
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  readonly nodeId: Scalars['ID']['output'];
  /** Reads and enables pagination through a set of `Offer`. */
  readonly offers: OffersConnection;
  readonly period: Scalars['BigFloat']['output'];
  /** Reads and enables pagination through a set of `Plan`. */
  readonly plans: PlansConnection;
  readonly priceToken: Scalars['String']['output'];
  readonly rateLimit: Scalars['BigFloat']['output'];
  /** Reads and enables pagination through a set of `ServiceAgreement`. */
  readonly serviceAgreements: ServiceAgreementsConnection;
};

export type PlanTemplateDeploymentsByOfferPlanTemplateIdAndDeploymentIdArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Deployments_Distinct_Enum>>>;
  filter: InputMaybe<DeploymentFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<DeploymentsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type PlanTemplateDeploymentsByPlanPlanTemplateIdAndDeploymentIdArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Deployments_Distinct_Enum>>>;
  filter: InputMaybe<DeploymentFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<DeploymentsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type PlanTemplateDeploymentsByServiceAgreementPlanTemplateIdAndDeploymentIdArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Deployments_Distinct_Enum>>>;
  filter: InputMaybe<DeploymentFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<DeploymentsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type PlanTemplateOffersArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Offers_Distinct_Enum>>>;
  filter: InputMaybe<OfferFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<OffersOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type PlanTemplatePlansArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Plans_Distinct_Enum>>>;
  filter: InputMaybe<PlanFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<PlansOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type PlanTemplateServiceAgreementsArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Service_Agreements_Distinct_Enum>>>;
  filter: InputMaybe<ServiceAgreementFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<ServiceAgreementsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type PlanTemplateAggregates = {
  readonly __typename: 'PlanTemplateAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly average: Maybe<PlanTemplateAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly distinctCount: Maybe<PlanTemplateDistinctCountAggregates>;
  readonly keys: Maybe<ReadonlyArray<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly max: Maybe<PlanTemplateMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly min: Maybe<PlanTemplateMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevPopulation: Maybe<PlanTemplateStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevSample: Maybe<PlanTemplateStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly sum: Maybe<PlanTemplateSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly variancePopulation: Maybe<PlanTemplateVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly varianceSample: Maybe<PlanTemplateVarianceSampleAggregates>;
};

export type PlanTemplateAverageAggregates = {
  readonly __typename: 'PlanTemplateAverageAggregates';
  /** Mean average of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of dailyReqCap across the matching connection */
  readonly dailyReqCap: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of period across the matching connection */
  readonly period: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of rateLimit across the matching connection */
  readonly rateLimit: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `Deployment` values, with data from `Offer`. */
export type PlanTemplateDeploymentsByOfferPlanTemplateIdAndDeploymentIdManyToManyConnection = {
  readonly __typename: 'PlanTemplateDeploymentsByOfferPlanTemplateIdAndDeploymentIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<DeploymentAggregates>;
  /** A list of edges which contains the `Deployment`, info from the `Offer`, and the cursor to aid in pagination. */
  readonly edges: ReadonlyArray<PlanTemplateDeploymentsByOfferPlanTemplateIdAndDeploymentIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<DeploymentAggregates>>;
  /** A list of `Deployment` objects. */
  readonly nodes: ReadonlyArray<Maybe<Deployment>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Deployment` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Deployment` values, with data from `Offer`. */
export type PlanTemplateDeploymentsByOfferPlanTemplateIdAndDeploymentIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<DeploymentsGroupBy>;
  having: InputMaybe<DeploymentsHavingInput>;
};

/** A `Deployment` edge in the connection, with data from `Offer`. */
export type PlanTemplateDeploymentsByOfferPlanTemplateIdAndDeploymentIdManyToManyEdge = {
  readonly __typename: 'PlanTemplateDeploymentsByOfferPlanTemplateIdAndDeploymentIdManyToManyEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `Deployment` at the end of the edge. */
  readonly node: Maybe<Deployment>;
  /** Reads and enables pagination through a set of `Offer`. */
  readonly offers: OffersConnection;
};

/** A `Deployment` edge in the connection, with data from `Offer`. */
export type PlanTemplateDeploymentsByOfferPlanTemplateIdAndDeploymentIdManyToManyEdgeOffersArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Offers_Distinct_Enum>>>;
  filter: InputMaybe<OfferFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<OffersOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** A connection to a list of `Deployment` values, with data from `Plan`. */
export type PlanTemplateDeploymentsByPlanPlanTemplateIdAndDeploymentIdManyToManyConnection = {
  readonly __typename: 'PlanTemplateDeploymentsByPlanPlanTemplateIdAndDeploymentIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<DeploymentAggregates>;
  /** A list of edges which contains the `Deployment`, info from the `Plan`, and the cursor to aid in pagination. */
  readonly edges: ReadonlyArray<PlanTemplateDeploymentsByPlanPlanTemplateIdAndDeploymentIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<DeploymentAggregates>>;
  /** A list of `Deployment` objects. */
  readonly nodes: ReadonlyArray<Maybe<Deployment>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Deployment` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Deployment` values, with data from `Plan`. */
export type PlanTemplateDeploymentsByPlanPlanTemplateIdAndDeploymentIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<DeploymentsGroupBy>;
  having: InputMaybe<DeploymentsHavingInput>;
};

/** A `Deployment` edge in the connection, with data from `Plan`. */
export type PlanTemplateDeploymentsByPlanPlanTemplateIdAndDeploymentIdManyToManyEdge = {
  readonly __typename: 'PlanTemplateDeploymentsByPlanPlanTemplateIdAndDeploymentIdManyToManyEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `Deployment` at the end of the edge. */
  readonly node: Maybe<Deployment>;
  /** Reads and enables pagination through a set of `Plan`. */
  readonly plans: PlansConnection;
};

/** A `Deployment` edge in the connection, with data from `Plan`. */
export type PlanTemplateDeploymentsByPlanPlanTemplateIdAndDeploymentIdManyToManyEdgePlansArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Plans_Distinct_Enum>>>;
  filter: InputMaybe<PlanFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<PlansOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** A connection to a list of `Deployment` values, with data from `ServiceAgreement`. */
export type PlanTemplateDeploymentsByServiceAgreementPlanTemplateIdAndDeploymentIdManyToManyConnection = {
  readonly __typename: 'PlanTemplateDeploymentsByServiceAgreementPlanTemplateIdAndDeploymentIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<DeploymentAggregates>;
  /** A list of edges which contains the `Deployment`, info from the `ServiceAgreement`, and the cursor to aid in pagination. */
  readonly edges: ReadonlyArray<PlanTemplateDeploymentsByServiceAgreementPlanTemplateIdAndDeploymentIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<DeploymentAggregates>>;
  /** A list of `Deployment` objects. */
  readonly nodes: ReadonlyArray<Maybe<Deployment>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Deployment` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Deployment` values, with data from `ServiceAgreement`. */
export type PlanTemplateDeploymentsByServiceAgreementPlanTemplateIdAndDeploymentIdManyToManyConnectionGroupedAggregatesArgs =
  {
    groupBy: ReadonlyArray<DeploymentsGroupBy>;
    having: InputMaybe<DeploymentsHavingInput>;
  };

/** A `Deployment` edge in the connection, with data from `ServiceAgreement`. */
export type PlanTemplateDeploymentsByServiceAgreementPlanTemplateIdAndDeploymentIdManyToManyEdge = {
  readonly __typename: 'PlanTemplateDeploymentsByServiceAgreementPlanTemplateIdAndDeploymentIdManyToManyEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `Deployment` at the end of the edge. */
  readonly node: Maybe<Deployment>;
  /** Reads and enables pagination through a set of `ServiceAgreement`. */
  readonly serviceAgreements: ServiceAgreementsConnection;
};

/** A `Deployment` edge in the connection, with data from `ServiceAgreement`. */
export type PlanTemplateDeploymentsByServiceAgreementPlanTemplateIdAndDeploymentIdManyToManyEdgeServiceAgreementsArgs =
  {
    after: InputMaybe<Scalars['Cursor']['input']>;
    before: InputMaybe<Scalars['Cursor']['input']>;
    blockHeight?: InputMaybe<Scalars['String']['input']>;
    distinct?: InputMaybe<ReadonlyArray<InputMaybe<Service_Agreements_Distinct_Enum>>>;
    filter: InputMaybe<ServiceAgreementFilter>;
    first: InputMaybe<Scalars['Int']['input']>;
    last: InputMaybe<Scalars['Int']['input']>;
    offset: InputMaybe<Scalars['Int']['input']>;
    orderBy: InputMaybe<ReadonlyArray<ServiceAgreementsOrderBy>>;
    orderByNull: InputMaybe<NullOrder>;
  };

export type PlanTemplateDistinctCountAggregates = {
  readonly __typename: 'PlanTemplateDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  readonly _blockRange: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  readonly _id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of active across the matching connection */
  readonly active: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of dailyReqCap across the matching connection */
  readonly dailyReqCap: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  readonly id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of lastEvent across the matching connection */
  readonly lastEvent: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of metadata across the matching connection */
  readonly metadata: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of period across the matching connection */
  readonly period: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of priceToken across the matching connection */
  readonly priceToken: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of rateLimit across the matching connection */
  readonly rateLimit: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `PlanTemplate` object types. All fields are combined with a logical ‘and.’ */
export type PlanTemplateFilter = {
  /** Filter by the object’s `active` field. */
  readonly active: InputMaybe<BooleanFilter>;
  /** Checks for all expressions in this list. */
  readonly and: InputMaybe<ReadonlyArray<PlanTemplateFilter>>;
  /** Filter by the object’s `createdBlock` field. */
  readonly createdBlock: InputMaybe<IntFilter>;
  /** Filter by the object’s `dailyReqCap` field. */
  readonly dailyReqCap: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `id` field. */
  readonly id: InputMaybe<StringFilter>;
  /** Filter by the object’s `lastEvent` field. */
  readonly lastEvent: InputMaybe<StringFilter>;
  /** Filter by the object’s `metadata` field. */
  readonly metadata: InputMaybe<StringFilter>;
  /** Negates the expression. */
  readonly not: InputMaybe<PlanTemplateFilter>;
  /** Filter by the object’s `offers` relation. */
  readonly offers: InputMaybe<PlanTemplateToManyOfferFilter>;
  /** Some related `offers` exist. */
  readonly offersExist: InputMaybe<Scalars['Boolean']['input']>;
  /** Checks for any expressions in this list. */
  readonly or: InputMaybe<ReadonlyArray<PlanTemplateFilter>>;
  /** Filter by the object’s `period` field. */
  readonly period: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `plans` relation. */
  readonly plans: InputMaybe<PlanTemplateToManyPlanFilter>;
  /** Some related `plans` exist. */
  readonly plansExist: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `priceToken` field. */
  readonly priceToken: InputMaybe<StringFilter>;
  /** Filter by the object’s `rateLimit` field. */
  readonly rateLimit: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `serviceAgreements` relation. */
  readonly serviceAgreements: InputMaybe<PlanTemplateToManyServiceAgreementFilter>;
  /** Some related `serviceAgreements` exist. */
  readonly serviceAgreementsExist: InputMaybe<Scalars['Boolean']['input']>;
};

export type PlanTemplateMaxAggregates = {
  readonly __typename: 'PlanTemplateMaxAggregates';
  /** Maximum of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['Int']['output']>;
  /** Maximum of dailyReqCap across the matching connection */
  readonly dailyReqCap: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of period across the matching connection */
  readonly period: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of rateLimit across the matching connection */
  readonly rateLimit: Maybe<Scalars['BigFloat']['output']>;
};

export type PlanTemplateMinAggregates = {
  readonly __typename: 'PlanTemplateMinAggregates';
  /** Minimum of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['Int']['output']>;
  /** Minimum of dailyReqCap across the matching connection */
  readonly dailyReqCap: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of period across the matching connection */
  readonly period: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of rateLimit across the matching connection */
  readonly rateLimit: Maybe<Scalars['BigFloat']['output']>;
};

export type PlanTemplateStddevPopulationAggregates = {
  readonly __typename: 'PlanTemplateStddevPopulationAggregates';
  /** Population standard deviation of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of dailyReqCap across the matching connection */
  readonly dailyReqCap: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of period across the matching connection */
  readonly period: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of rateLimit across the matching connection */
  readonly rateLimit: Maybe<Scalars['BigFloat']['output']>;
};

export type PlanTemplateStddevSampleAggregates = {
  readonly __typename: 'PlanTemplateStddevSampleAggregates';
  /** Sample standard deviation of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of dailyReqCap across the matching connection */
  readonly dailyReqCap: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of period across the matching connection */
  readonly period: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of rateLimit across the matching connection */
  readonly rateLimit: Maybe<Scalars['BigFloat']['output']>;
};

export type PlanTemplateSumAggregates = {
  readonly __typename: 'PlanTemplateSumAggregates';
  /** Sum of createdBlock across the matching connection */
  readonly createdBlock: Scalars['BigInt']['output'];
  /** Sum of dailyReqCap across the matching connection */
  readonly dailyReqCap: Scalars['BigFloat']['output'];
  /** Sum of period across the matching connection */
  readonly period: Scalars['BigFloat']['output'];
  /** Sum of rateLimit across the matching connection */
  readonly rateLimit: Scalars['BigFloat']['output'];
};

/** A filter to be used against many `Offer` object types. All fields are combined with a logical ‘and.’ */
export type PlanTemplateToManyOfferFilter = {
  /** Aggregates across related `Offer` match the filter criteria. */
  readonly aggregates: InputMaybe<OfferAggregatesFilter>;
  /** Every related `Offer` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly every: InputMaybe<OfferFilter>;
  /** No related `Offer` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly none: InputMaybe<OfferFilter>;
  /** Some related `Offer` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly some: InputMaybe<OfferFilter>;
};

/** A filter to be used against many `Plan` object types. All fields are combined with a logical ‘and.’ */
export type PlanTemplateToManyPlanFilter = {
  /** Aggregates across related `Plan` match the filter criteria. */
  readonly aggregates: InputMaybe<PlanAggregatesFilter>;
  /** Every related `Plan` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly every: InputMaybe<PlanFilter>;
  /** No related `Plan` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly none: InputMaybe<PlanFilter>;
  /** Some related `Plan` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly some: InputMaybe<PlanFilter>;
};

/** A filter to be used against many `ServiceAgreement` object types. All fields are combined with a logical ‘and.’ */
export type PlanTemplateToManyServiceAgreementFilter = {
  /** Aggregates across related `ServiceAgreement` match the filter criteria. */
  readonly aggregates: InputMaybe<ServiceAgreementAggregatesFilter>;
  /** Every related `ServiceAgreement` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly every: InputMaybe<ServiceAgreementFilter>;
  /** No related `ServiceAgreement` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly none: InputMaybe<ServiceAgreementFilter>;
  /** Some related `ServiceAgreement` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly some: InputMaybe<ServiceAgreementFilter>;
};

export type PlanTemplateVariancePopulationAggregates = {
  readonly __typename: 'PlanTemplateVariancePopulationAggregates';
  /** Population variance of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of dailyReqCap across the matching connection */
  readonly dailyReqCap: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of period across the matching connection */
  readonly period: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of rateLimit across the matching connection */
  readonly rateLimit: Maybe<Scalars['BigFloat']['output']>;
};

export type PlanTemplateVarianceSampleAggregates = {
  readonly __typename: 'PlanTemplateVarianceSampleAggregates';
  /** Sample variance of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of dailyReqCap across the matching connection */
  readonly dailyReqCap: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of period across the matching connection */
  readonly period: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of rateLimit across the matching connection */
  readonly rateLimit: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `PlanTemplate` values. */
export type PlanTemplatesConnection = {
  readonly __typename: 'PlanTemplatesConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<PlanTemplateAggregates>;
  /** A list of edges which contains the `PlanTemplate` and cursor to aid in pagination. */
  readonly edges: ReadonlyArray<PlanTemplatesEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<PlanTemplateAggregates>>;
  /** A list of `PlanTemplate` objects. */
  readonly nodes: ReadonlyArray<Maybe<PlanTemplate>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `PlanTemplate` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `PlanTemplate` values. */
export type PlanTemplatesConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<PlanTemplatesGroupBy>;
  having: InputMaybe<PlanTemplatesHavingInput>;
};

/** A `PlanTemplate` edge in the connection. */
export type PlanTemplatesEdge = {
  readonly __typename: 'PlanTemplatesEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `PlanTemplate` at the end of the edge. */
  readonly node: Maybe<PlanTemplate>;
};

/** Grouping methods for `PlanTemplate` for usage during aggregation. */
export enum PlanTemplatesGroupBy {
  ACTIVE = 'ACTIVE',
  CREATED_BLOCK = 'CREATED_BLOCK',
  DAILY_REQ_CAP = 'DAILY_REQ_CAP',
  ID = 'ID',
  LAST_EVENT = 'LAST_EVENT',
  METADATA = 'METADATA',
  PERIOD = 'PERIOD',
  PRICE_TOKEN = 'PRICE_TOKEN',
  RATE_LIMIT = 'RATE_LIMIT',
}

export type PlanTemplatesHavingAverageInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly dailyReqCap: InputMaybe<HavingBigfloatFilter>;
  readonly period: InputMaybe<HavingBigfloatFilter>;
  readonly rateLimit: InputMaybe<HavingBigfloatFilter>;
};

export type PlanTemplatesHavingDistinctCountInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly dailyReqCap: InputMaybe<HavingBigfloatFilter>;
  readonly period: InputMaybe<HavingBigfloatFilter>;
  readonly rateLimit: InputMaybe<HavingBigfloatFilter>;
};

/** Conditions for `PlanTemplate` aggregates. */
export type PlanTemplatesHavingInput = {
  readonly AND: InputMaybe<ReadonlyArray<PlanTemplatesHavingInput>>;
  readonly OR: InputMaybe<ReadonlyArray<PlanTemplatesHavingInput>>;
  readonly average: InputMaybe<PlanTemplatesHavingAverageInput>;
  readonly distinctCount: InputMaybe<PlanTemplatesHavingDistinctCountInput>;
  readonly max: InputMaybe<PlanTemplatesHavingMaxInput>;
  readonly min: InputMaybe<PlanTemplatesHavingMinInput>;
  readonly stddevPopulation: InputMaybe<PlanTemplatesHavingStddevPopulationInput>;
  readonly stddevSample: InputMaybe<PlanTemplatesHavingStddevSampleInput>;
  readonly sum: InputMaybe<PlanTemplatesHavingSumInput>;
  readonly variancePopulation: InputMaybe<PlanTemplatesHavingVariancePopulationInput>;
  readonly varianceSample: InputMaybe<PlanTemplatesHavingVarianceSampleInput>;
};

export type PlanTemplatesHavingMaxInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly dailyReqCap: InputMaybe<HavingBigfloatFilter>;
  readonly period: InputMaybe<HavingBigfloatFilter>;
  readonly rateLimit: InputMaybe<HavingBigfloatFilter>;
};

export type PlanTemplatesHavingMinInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly dailyReqCap: InputMaybe<HavingBigfloatFilter>;
  readonly period: InputMaybe<HavingBigfloatFilter>;
  readonly rateLimit: InputMaybe<HavingBigfloatFilter>;
};

export type PlanTemplatesHavingStddevPopulationInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly dailyReqCap: InputMaybe<HavingBigfloatFilter>;
  readonly period: InputMaybe<HavingBigfloatFilter>;
  readonly rateLimit: InputMaybe<HavingBigfloatFilter>;
};

export type PlanTemplatesHavingStddevSampleInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly dailyReqCap: InputMaybe<HavingBigfloatFilter>;
  readonly period: InputMaybe<HavingBigfloatFilter>;
  readonly rateLimit: InputMaybe<HavingBigfloatFilter>;
};

export type PlanTemplatesHavingSumInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly dailyReqCap: InputMaybe<HavingBigfloatFilter>;
  readonly period: InputMaybe<HavingBigfloatFilter>;
  readonly rateLimit: InputMaybe<HavingBigfloatFilter>;
};

export type PlanTemplatesHavingVariancePopulationInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly dailyReqCap: InputMaybe<HavingBigfloatFilter>;
  readonly period: InputMaybe<HavingBigfloatFilter>;
  readonly rateLimit: InputMaybe<HavingBigfloatFilter>;
};

export type PlanTemplatesHavingVarianceSampleInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly dailyReqCap: InputMaybe<HavingBigfloatFilter>;
  readonly period: InputMaybe<HavingBigfloatFilter>;
  readonly rateLimit: InputMaybe<HavingBigfloatFilter>;
};

/** Methods to use when ordering `PlanTemplate`. */
export enum PlanTemplatesOrderBy {
  ACTIVE_ASC = 'ACTIVE_ASC',
  ACTIVE_DESC = 'ACTIVE_DESC',
  CREATED_BLOCK_ASC = 'CREATED_BLOCK_ASC',
  CREATED_BLOCK_DESC = 'CREATED_BLOCK_DESC',
  DAILY_REQ_CAP_ASC = 'DAILY_REQ_CAP_ASC',
  DAILY_REQ_CAP_DESC = 'DAILY_REQ_CAP_DESC',
  ID_ASC = 'ID_ASC',
  ID_DESC = 'ID_DESC',
  LAST_EVENT_ASC = 'LAST_EVENT_ASC',
  LAST_EVENT_DESC = 'LAST_EVENT_DESC',
  METADATA_ASC = 'METADATA_ASC',
  METADATA_DESC = 'METADATA_DESC',
  NATURAL = 'NATURAL',
  OFFERS_AVERAGE_ACCEPTED_ASC = 'OFFERS_AVERAGE_ACCEPTED_ASC',
  OFFERS_AVERAGE_ACCEPTED_DESC = 'OFFERS_AVERAGE_ACCEPTED_DESC',
  OFFERS_AVERAGE_BLOCK_RANGE_ASC = 'OFFERS_AVERAGE_BLOCK_RANGE_ASC',
  OFFERS_AVERAGE_BLOCK_RANGE_DESC = 'OFFERS_AVERAGE_BLOCK_RANGE_DESC',
  OFFERS_AVERAGE_CONSUMER_ASC = 'OFFERS_AVERAGE_CONSUMER_ASC',
  OFFERS_AVERAGE_CONSUMER_DESC = 'OFFERS_AVERAGE_CONSUMER_DESC',
  OFFERS_AVERAGE_CREATED_BLOCK_ASC = 'OFFERS_AVERAGE_CREATED_BLOCK_ASC',
  OFFERS_AVERAGE_CREATED_BLOCK_DESC = 'OFFERS_AVERAGE_CREATED_BLOCK_DESC',
  OFFERS_AVERAGE_DEPLOYMENT_ID_ASC = 'OFFERS_AVERAGE_DEPLOYMENT_ID_ASC',
  OFFERS_AVERAGE_DEPLOYMENT_ID_DESC = 'OFFERS_AVERAGE_DEPLOYMENT_ID_DESC',
  OFFERS_AVERAGE_DEPOSIT_ASC = 'OFFERS_AVERAGE_DEPOSIT_ASC',
  OFFERS_AVERAGE_DEPOSIT_DESC = 'OFFERS_AVERAGE_DEPOSIT_DESC',
  OFFERS_AVERAGE_EXPIRE_DATE_ASC = 'OFFERS_AVERAGE_EXPIRE_DATE_ASC',
  OFFERS_AVERAGE_EXPIRE_DATE_DESC = 'OFFERS_AVERAGE_EXPIRE_DATE_DESC',
  OFFERS_AVERAGE_ID_ASC = 'OFFERS_AVERAGE_ID_ASC',
  OFFERS_AVERAGE_ID_DESC = 'OFFERS_AVERAGE_ID_DESC',
  OFFERS_AVERAGE_LAST_EVENT_ASC = 'OFFERS_AVERAGE_LAST_EVENT_ASC',
  OFFERS_AVERAGE_LAST_EVENT_DESC = 'OFFERS_AVERAGE_LAST_EVENT_DESC',
  OFFERS_AVERAGE_LIMIT_ASC = 'OFFERS_AVERAGE_LIMIT_ASC',
  OFFERS_AVERAGE_LIMIT_DESC = 'OFFERS_AVERAGE_LIMIT_DESC',
  OFFERS_AVERAGE_MINIMUM_ACCEPT_HEIGHT_ASC = 'OFFERS_AVERAGE_MINIMUM_ACCEPT_HEIGHT_ASC',
  OFFERS_AVERAGE_MINIMUM_ACCEPT_HEIGHT_DESC = 'OFFERS_AVERAGE_MINIMUM_ACCEPT_HEIGHT_DESC',
  OFFERS_AVERAGE_MINIMUM_STAKING_AMOUNT_ASC = 'OFFERS_AVERAGE_MINIMUM_STAKING_AMOUNT_ASC',
  OFFERS_AVERAGE_MINIMUM_STAKING_AMOUNT_DESC = 'OFFERS_AVERAGE_MINIMUM_STAKING_AMOUNT_DESC',
  OFFERS_AVERAGE_PLAN_TEMPLATE_ID_ASC = 'OFFERS_AVERAGE_PLAN_TEMPLATE_ID_ASC',
  OFFERS_AVERAGE_PLAN_TEMPLATE_ID_DESC = 'OFFERS_AVERAGE_PLAN_TEMPLATE_ID_DESC',
  OFFERS_AVERAGE_REACH_LIMIT_ASC = 'OFFERS_AVERAGE_REACH_LIMIT_ASC',
  OFFERS_AVERAGE_REACH_LIMIT_DESC = 'OFFERS_AVERAGE_REACH_LIMIT_DESC',
  OFFERS_AVERAGE_WITHDRAWN_ASC = 'OFFERS_AVERAGE_WITHDRAWN_ASC',
  OFFERS_AVERAGE_WITHDRAWN_DESC = 'OFFERS_AVERAGE_WITHDRAWN_DESC',
  OFFERS_AVERAGE_WITHDRAW_PENALTY_ASC = 'OFFERS_AVERAGE_WITHDRAW_PENALTY_ASC',
  OFFERS_AVERAGE_WITHDRAW_PENALTY_DESC = 'OFFERS_AVERAGE_WITHDRAW_PENALTY_DESC',
  OFFERS_BY_PLAN_TEMPLATE_ID__COUNT_ASC = 'OFFERS_BY_PLAN_TEMPLATE_ID__COUNT_ASC',
  OFFERS_BY_PLAN_TEMPLATE_ID__COUNT_DESC = 'OFFERS_BY_PLAN_TEMPLATE_ID__COUNT_DESC',
  OFFERS_COUNT_ASC = 'OFFERS_COUNT_ASC',
  OFFERS_COUNT_DESC = 'OFFERS_COUNT_DESC',
  OFFERS_DISTINCT_COUNT_ACCEPTED_ASC = 'OFFERS_DISTINCT_COUNT_ACCEPTED_ASC',
  OFFERS_DISTINCT_COUNT_ACCEPTED_DESC = 'OFFERS_DISTINCT_COUNT_ACCEPTED_DESC',
  OFFERS_DISTINCT_COUNT_BLOCK_RANGE_ASC = 'OFFERS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  OFFERS_DISTINCT_COUNT_BLOCK_RANGE_DESC = 'OFFERS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  OFFERS_DISTINCT_COUNT_CONSUMER_ASC = 'OFFERS_DISTINCT_COUNT_CONSUMER_ASC',
  OFFERS_DISTINCT_COUNT_CONSUMER_DESC = 'OFFERS_DISTINCT_COUNT_CONSUMER_DESC',
  OFFERS_DISTINCT_COUNT_CREATED_BLOCK_ASC = 'OFFERS_DISTINCT_COUNT_CREATED_BLOCK_ASC',
  OFFERS_DISTINCT_COUNT_CREATED_BLOCK_DESC = 'OFFERS_DISTINCT_COUNT_CREATED_BLOCK_DESC',
  OFFERS_DISTINCT_COUNT_DEPLOYMENT_ID_ASC = 'OFFERS_DISTINCT_COUNT_DEPLOYMENT_ID_ASC',
  OFFERS_DISTINCT_COUNT_DEPLOYMENT_ID_DESC = 'OFFERS_DISTINCT_COUNT_DEPLOYMENT_ID_DESC',
  OFFERS_DISTINCT_COUNT_DEPOSIT_ASC = 'OFFERS_DISTINCT_COUNT_DEPOSIT_ASC',
  OFFERS_DISTINCT_COUNT_DEPOSIT_DESC = 'OFFERS_DISTINCT_COUNT_DEPOSIT_DESC',
  OFFERS_DISTINCT_COUNT_EXPIRE_DATE_ASC = 'OFFERS_DISTINCT_COUNT_EXPIRE_DATE_ASC',
  OFFERS_DISTINCT_COUNT_EXPIRE_DATE_DESC = 'OFFERS_DISTINCT_COUNT_EXPIRE_DATE_DESC',
  OFFERS_DISTINCT_COUNT_ID_ASC = 'OFFERS_DISTINCT_COUNT_ID_ASC',
  OFFERS_DISTINCT_COUNT_ID_DESC = 'OFFERS_DISTINCT_COUNT_ID_DESC',
  OFFERS_DISTINCT_COUNT_LAST_EVENT_ASC = 'OFFERS_DISTINCT_COUNT_LAST_EVENT_ASC',
  OFFERS_DISTINCT_COUNT_LAST_EVENT_DESC = 'OFFERS_DISTINCT_COUNT_LAST_EVENT_DESC',
  OFFERS_DISTINCT_COUNT_LIMIT_ASC = 'OFFERS_DISTINCT_COUNT_LIMIT_ASC',
  OFFERS_DISTINCT_COUNT_LIMIT_DESC = 'OFFERS_DISTINCT_COUNT_LIMIT_DESC',
  OFFERS_DISTINCT_COUNT_MINIMUM_ACCEPT_HEIGHT_ASC = 'OFFERS_DISTINCT_COUNT_MINIMUM_ACCEPT_HEIGHT_ASC',
  OFFERS_DISTINCT_COUNT_MINIMUM_ACCEPT_HEIGHT_DESC = 'OFFERS_DISTINCT_COUNT_MINIMUM_ACCEPT_HEIGHT_DESC',
  OFFERS_DISTINCT_COUNT_MINIMUM_STAKING_AMOUNT_ASC = 'OFFERS_DISTINCT_COUNT_MINIMUM_STAKING_AMOUNT_ASC',
  OFFERS_DISTINCT_COUNT_MINIMUM_STAKING_AMOUNT_DESC = 'OFFERS_DISTINCT_COUNT_MINIMUM_STAKING_AMOUNT_DESC',
  OFFERS_DISTINCT_COUNT_PLAN_TEMPLATE_ID_ASC = 'OFFERS_DISTINCT_COUNT_PLAN_TEMPLATE_ID_ASC',
  OFFERS_DISTINCT_COUNT_PLAN_TEMPLATE_ID_DESC = 'OFFERS_DISTINCT_COUNT_PLAN_TEMPLATE_ID_DESC',
  OFFERS_DISTINCT_COUNT_REACH_LIMIT_ASC = 'OFFERS_DISTINCT_COUNT_REACH_LIMIT_ASC',
  OFFERS_DISTINCT_COUNT_REACH_LIMIT_DESC = 'OFFERS_DISTINCT_COUNT_REACH_LIMIT_DESC',
  OFFERS_DISTINCT_COUNT_WITHDRAWN_ASC = 'OFFERS_DISTINCT_COUNT_WITHDRAWN_ASC',
  OFFERS_DISTINCT_COUNT_WITHDRAWN_DESC = 'OFFERS_DISTINCT_COUNT_WITHDRAWN_DESC',
  OFFERS_DISTINCT_COUNT_WITHDRAW_PENALTY_ASC = 'OFFERS_DISTINCT_COUNT_WITHDRAW_PENALTY_ASC',
  OFFERS_DISTINCT_COUNT_WITHDRAW_PENALTY_DESC = 'OFFERS_DISTINCT_COUNT_WITHDRAW_PENALTY_DESC',
  OFFERS_MAX_ACCEPTED_ASC = 'OFFERS_MAX_ACCEPTED_ASC',
  OFFERS_MAX_ACCEPTED_DESC = 'OFFERS_MAX_ACCEPTED_DESC',
  OFFERS_MAX_BLOCK_RANGE_ASC = 'OFFERS_MAX_BLOCK_RANGE_ASC',
  OFFERS_MAX_BLOCK_RANGE_DESC = 'OFFERS_MAX_BLOCK_RANGE_DESC',
  OFFERS_MAX_CONSUMER_ASC = 'OFFERS_MAX_CONSUMER_ASC',
  OFFERS_MAX_CONSUMER_DESC = 'OFFERS_MAX_CONSUMER_DESC',
  OFFERS_MAX_CREATED_BLOCK_ASC = 'OFFERS_MAX_CREATED_BLOCK_ASC',
  OFFERS_MAX_CREATED_BLOCK_DESC = 'OFFERS_MAX_CREATED_BLOCK_DESC',
  OFFERS_MAX_DEPLOYMENT_ID_ASC = 'OFFERS_MAX_DEPLOYMENT_ID_ASC',
  OFFERS_MAX_DEPLOYMENT_ID_DESC = 'OFFERS_MAX_DEPLOYMENT_ID_DESC',
  OFFERS_MAX_DEPOSIT_ASC = 'OFFERS_MAX_DEPOSIT_ASC',
  OFFERS_MAX_DEPOSIT_DESC = 'OFFERS_MAX_DEPOSIT_DESC',
  OFFERS_MAX_EXPIRE_DATE_ASC = 'OFFERS_MAX_EXPIRE_DATE_ASC',
  OFFERS_MAX_EXPIRE_DATE_DESC = 'OFFERS_MAX_EXPIRE_DATE_DESC',
  OFFERS_MAX_ID_ASC = 'OFFERS_MAX_ID_ASC',
  OFFERS_MAX_ID_DESC = 'OFFERS_MAX_ID_DESC',
  OFFERS_MAX_LAST_EVENT_ASC = 'OFFERS_MAX_LAST_EVENT_ASC',
  OFFERS_MAX_LAST_EVENT_DESC = 'OFFERS_MAX_LAST_EVENT_DESC',
  OFFERS_MAX_LIMIT_ASC = 'OFFERS_MAX_LIMIT_ASC',
  OFFERS_MAX_LIMIT_DESC = 'OFFERS_MAX_LIMIT_DESC',
  OFFERS_MAX_MINIMUM_ACCEPT_HEIGHT_ASC = 'OFFERS_MAX_MINIMUM_ACCEPT_HEIGHT_ASC',
  OFFERS_MAX_MINIMUM_ACCEPT_HEIGHT_DESC = 'OFFERS_MAX_MINIMUM_ACCEPT_HEIGHT_DESC',
  OFFERS_MAX_MINIMUM_STAKING_AMOUNT_ASC = 'OFFERS_MAX_MINIMUM_STAKING_AMOUNT_ASC',
  OFFERS_MAX_MINIMUM_STAKING_AMOUNT_DESC = 'OFFERS_MAX_MINIMUM_STAKING_AMOUNT_DESC',
  OFFERS_MAX_PLAN_TEMPLATE_ID_ASC = 'OFFERS_MAX_PLAN_TEMPLATE_ID_ASC',
  OFFERS_MAX_PLAN_TEMPLATE_ID_DESC = 'OFFERS_MAX_PLAN_TEMPLATE_ID_DESC',
  OFFERS_MAX_REACH_LIMIT_ASC = 'OFFERS_MAX_REACH_LIMIT_ASC',
  OFFERS_MAX_REACH_LIMIT_DESC = 'OFFERS_MAX_REACH_LIMIT_DESC',
  OFFERS_MAX_WITHDRAWN_ASC = 'OFFERS_MAX_WITHDRAWN_ASC',
  OFFERS_MAX_WITHDRAWN_DESC = 'OFFERS_MAX_WITHDRAWN_DESC',
  OFFERS_MAX_WITHDRAW_PENALTY_ASC = 'OFFERS_MAX_WITHDRAW_PENALTY_ASC',
  OFFERS_MAX_WITHDRAW_PENALTY_DESC = 'OFFERS_MAX_WITHDRAW_PENALTY_DESC',
  OFFERS_MIN_ACCEPTED_ASC = 'OFFERS_MIN_ACCEPTED_ASC',
  OFFERS_MIN_ACCEPTED_DESC = 'OFFERS_MIN_ACCEPTED_DESC',
  OFFERS_MIN_BLOCK_RANGE_ASC = 'OFFERS_MIN_BLOCK_RANGE_ASC',
  OFFERS_MIN_BLOCK_RANGE_DESC = 'OFFERS_MIN_BLOCK_RANGE_DESC',
  OFFERS_MIN_CONSUMER_ASC = 'OFFERS_MIN_CONSUMER_ASC',
  OFFERS_MIN_CONSUMER_DESC = 'OFFERS_MIN_CONSUMER_DESC',
  OFFERS_MIN_CREATED_BLOCK_ASC = 'OFFERS_MIN_CREATED_BLOCK_ASC',
  OFFERS_MIN_CREATED_BLOCK_DESC = 'OFFERS_MIN_CREATED_BLOCK_DESC',
  OFFERS_MIN_DEPLOYMENT_ID_ASC = 'OFFERS_MIN_DEPLOYMENT_ID_ASC',
  OFFERS_MIN_DEPLOYMENT_ID_DESC = 'OFFERS_MIN_DEPLOYMENT_ID_DESC',
  OFFERS_MIN_DEPOSIT_ASC = 'OFFERS_MIN_DEPOSIT_ASC',
  OFFERS_MIN_DEPOSIT_DESC = 'OFFERS_MIN_DEPOSIT_DESC',
  OFFERS_MIN_EXPIRE_DATE_ASC = 'OFFERS_MIN_EXPIRE_DATE_ASC',
  OFFERS_MIN_EXPIRE_DATE_DESC = 'OFFERS_MIN_EXPIRE_DATE_DESC',
  OFFERS_MIN_ID_ASC = 'OFFERS_MIN_ID_ASC',
  OFFERS_MIN_ID_DESC = 'OFFERS_MIN_ID_DESC',
  OFFERS_MIN_LAST_EVENT_ASC = 'OFFERS_MIN_LAST_EVENT_ASC',
  OFFERS_MIN_LAST_EVENT_DESC = 'OFFERS_MIN_LAST_EVENT_DESC',
  OFFERS_MIN_LIMIT_ASC = 'OFFERS_MIN_LIMIT_ASC',
  OFFERS_MIN_LIMIT_DESC = 'OFFERS_MIN_LIMIT_DESC',
  OFFERS_MIN_MINIMUM_ACCEPT_HEIGHT_ASC = 'OFFERS_MIN_MINIMUM_ACCEPT_HEIGHT_ASC',
  OFFERS_MIN_MINIMUM_ACCEPT_HEIGHT_DESC = 'OFFERS_MIN_MINIMUM_ACCEPT_HEIGHT_DESC',
  OFFERS_MIN_MINIMUM_STAKING_AMOUNT_ASC = 'OFFERS_MIN_MINIMUM_STAKING_AMOUNT_ASC',
  OFFERS_MIN_MINIMUM_STAKING_AMOUNT_DESC = 'OFFERS_MIN_MINIMUM_STAKING_AMOUNT_DESC',
  OFFERS_MIN_PLAN_TEMPLATE_ID_ASC = 'OFFERS_MIN_PLAN_TEMPLATE_ID_ASC',
  OFFERS_MIN_PLAN_TEMPLATE_ID_DESC = 'OFFERS_MIN_PLAN_TEMPLATE_ID_DESC',
  OFFERS_MIN_REACH_LIMIT_ASC = 'OFFERS_MIN_REACH_LIMIT_ASC',
  OFFERS_MIN_REACH_LIMIT_DESC = 'OFFERS_MIN_REACH_LIMIT_DESC',
  OFFERS_MIN_WITHDRAWN_ASC = 'OFFERS_MIN_WITHDRAWN_ASC',
  OFFERS_MIN_WITHDRAWN_DESC = 'OFFERS_MIN_WITHDRAWN_DESC',
  OFFERS_MIN_WITHDRAW_PENALTY_ASC = 'OFFERS_MIN_WITHDRAW_PENALTY_ASC',
  OFFERS_MIN_WITHDRAW_PENALTY_DESC = 'OFFERS_MIN_WITHDRAW_PENALTY_DESC',
  OFFERS_STDDEV_POPULATION_ACCEPTED_ASC = 'OFFERS_STDDEV_POPULATION_ACCEPTED_ASC',
  OFFERS_STDDEV_POPULATION_ACCEPTED_DESC = 'OFFERS_STDDEV_POPULATION_ACCEPTED_DESC',
  OFFERS_STDDEV_POPULATION_BLOCK_RANGE_ASC = 'OFFERS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  OFFERS_STDDEV_POPULATION_BLOCK_RANGE_DESC = 'OFFERS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  OFFERS_STDDEV_POPULATION_CONSUMER_ASC = 'OFFERS_STDDEV_POPULATION_CONSUMER_ASC',
  OFFERS_STDDEV_POPULATION_CONSUMER_DESC = 'OFFERS_STDDEV_POPULATION_CONSUMER_DESC',
  OFFERS_STDDEV_POPULATION_CREATED_BLOCK_ASC = 'OFFERS_STDDEV_POPULATION_CREATED_BLOCK_ASC',
  OFFERS_STDDEV_POPULATION_CREATED_BLOCK_DESC = 'OFFERS_STDDEV_POPULATION_CREATED_BLOCK_DESC',
  OFFERS_STDDEV_POPULATION_DEPLOYMENT_ID_ASC = 'OFFERS_STDDEV_POPULATION_DEPLOYMENT_ID_ASC',
  OFFERS_STDDEV_POPULATION_DEPLOYMENT_ID_DESC = 'OFFERS_STDDEV_POPULATION_DEPLOYMENT_ID_DESC',
  OFFERS_STDDEV_POPULATION_DEPOSIT_ASC = 'OFFERS_STDDEV_POPULATION_DEPOSIT_ASC',
  OFFERS_STDDEV_POPULATION_DEPOSIT_DESC = 'OFFERS_STDDEV_POPULATION_DEPOSIT_DESC',
  OFFERS_STDDEV_POPULATION_EXPIRE_DATE_ASC = 'OFFERS_STDDEV_POPULATION_EXPIRE_DATE_ASC',
  OFFERS_STDDEV_POPULATION_EXPIRE_DATE_DESC = 'OFFERS_STDDEV_POPULATION_EXPIRE_DATE_DESC',
  OFFERS_STDDEV_POPULATION_ID_ASC = 'OFFERS_STDDEV_POPULATION_ID_ASC',
  OFFERS_STDDEV_POPULATION_ID_DESC = 'OFFERS_STDDEV_POPULATION_ID_DESC',
  OFFERS_STDDEV_POPULATION_LAST_EVENT_ASC = 'OFFERS_STDDEV_POPULATION_LAST_EVENT_ASC',
  OFFERS_STDDEV_POPULATION_LAST_EVENT_DESC = 'OFFERS_STDDEV_POPULATION_LAST_EVENT_DESC',
  OFFERS_STDDEV_POPULATION_LIMIT_ASC = 'OFFERS_STDDEV_POPULATION_LIMIT_ASC',
  OFFERS_STDDEV_POPULATION_LIMIT_DESC = 'OFFERS_STDDEV_POPULATION_LIMIT_DESC',
  OFFERS_STDDEV_POPULATION_MINIMUM_ACCEPT_HEIGHT_ASC = 'OFFERS_STDDEV_POPULATION_MINIMUM_ACCEPT_HEIGHT_ASC',
  OFFERS_STDDEV_POPULATION_MINIMUM_ACCEPT_HEIGHT_DESC = 'OFFERS_STDDEV_POPULATION_MINIMUM_ACCEPT_HEIGHT_DESC',
  OFFERS_STDDEV_POPULATION_MINIMUM_STAKING_AMOUNT_ASC = 'OFFERS_STDDEV_POPULATION_MINIMUM_STAKING_AMOUNT_ASC',
  OFFERS_STDDEV_POPULATION_MINIMUM_STAKING_AMOUNT_DESC = 'OFFERS_STDDEV_POPULATION_MINIMUM_STAKING_AMOUNT_DESC',
  OFFERS_STDDEV_POPULATION_PLAN_TEMPLATE_ID_ASC = 'OFFERS_STDDEV_POPULATION_PLAN_TEMPLATE_ID_ASC',
  OFFERS_STDDEV_POPULATION_PLAN_TEMPLATE_ID_DESC = 'OFFERS_STDDEV_POPULATION_PLAN_TEMPLATE_ID_DESC',
  OFFERS_STDDEV_POPULATION_REACH_LIMIT_ASC = 'OFFERS_STDDEV_POPULATION_REACH_LIMIT_ASC',
  OFFERS_STDDEV_POPULATION_REACH_LIMIT_DESC = 'OFFERS_STDDEV_POPULATION_REACH_LIMIT_DESC',
  OFFERS_STDDEV_POPULATION_WITHDRAWN_ASC = 'OFFERS_STDDEV_POPULATION_WITHDRAWN_ASC',
  OFFERS_STDDEV_POPULATION_WITHDRAWN_DESC = 'OFFERS_STDDEV_POPULATION_WITHDRAWN_DESC',
  OFFERS_STDDEV_POPULATION_WITHDRAW_PENALTY_ASC = 'OFFERS_STDDEV_POPULATION_WITHDRAW_PENALTY_ASC',
  OFFERS_STDDEV_POPULATION_WITHDRAW_PENALTY_DESC = 'OFFERS_STDDEV_POPULATION_WITHDRAW_PENALTY_DESC',
  OFFERS_STDDEV_SAMPLE_ACCEPTED_ASC = 'OFFERS_STDDEV_SAMPLE_ACCEPTED_ASC',
  OFFERS_STDDEV_SAMPLE_ACCEPTED_DESC = 'OFFERS_STDDEV_SAMPLE_ACCEPTED_DESC',
  OFFERS_STDDEV_SAMPLE_BLOCK_RANGE_ASC = 'OFFERS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  OFFERS_STDDEV_SAMPLE_BLOCK_RANGE_DESC = 'OFFERS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  OFFERS_STDDEV_SAMPLE_CONSUMER_ASC = 'OFFERS_STDDEV_SAMPLE_CONSUMER_ASC',
  OFFERS_STDDEV_SAMPLE_CONSUMER_DESC = 'OFFERS_STDDEV_SAMPLE_CONSUMER_DESC',
  OFFERS_STDDEV_SAMPLE_CREATED_BLOCK_ASC = 'OFFERS_STDDEV_SAMPLE_CREATED_BLOCK_ASC',
  OFFERS_STDDEV_SAMPLE_CREATED_BLOCK_DESC = 'OFFERS_STDDEV_SAMPLE_CREATED_BLOCK_DESC',
  OFFERS_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC = 'OFFERS_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC',
  OFFERS_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC = 'OFFERS_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC',
  OFFERS_STDDEV_SAMPLE_DEPOSIT_ASC = 'OFFERS_STDDEV_SAMPLE_DEPOSIT_ASC',
  OFFERS_STDDEV_SAMPLE_DEPOSIT_DESC = 'OFFERS_STDDEV_SAMPLE_DEPOSIT_DESC',
  OFFERS_STDDEV_SAMPLE_EXPIRE_DATE_ASC = 'OFFERS_STDDEV_SAMPLE_EXPIRE_DATE_ASC',
  OFFERS_STDDEV_SAMPLE_EXPIRE_DATE_DESC = 'OFFERS_STDDEV_SAMPLE_EXPIRE_DATE_DESC',
  OFFERS_STDDEV_SAMPLE_ID_ASC = 'OFFERS_STDDEV_SAMPLE_ID_ASC',
  OFFERS_STDDEV_SAMPLE_ID_DESC = 'OFFERS_STDDEV_SAMPLE_ID_DESC',
  OFFERS_STDDEV_SAMPLE_LAST_EVENT_ASC = 'OFFERS_STDDEV_SAMPLE_LAST_EVENT_ASC',
  OFFERS_STDDEV_SAMPLE_LAST_EVENT_DESC = 'OFFERS_STDDEV_SAMPLE_LAST_EVENT_DESC',
  OFFERS_STDDEV_SAMPLE_LIMIT_ASC = 'OFFERS_STDDEV_SAMPLE_LIMIT_ASC',
  OFFERS_STDDEV_SAMPLE_LIMIT_DESC = 'OFFERS_STDDEV_SAMPLE_LIMIT_DESC',
  OFFERS_STDDEV_SAMPLE_MINIMUM_ACCEPT_HEIGHT_ASC = 'OFFERS_STDDEV_SAMPLE_MINIMUM_ACCEPT_HEIGHT_ASC',
  OFFERS_STDDEV_SAMPLE_MINIMUM_ACCEPT_HEIGHT_DESC = 'OFFERS_STDDEV_SAMPLE_MINIMUM_ACCEPT_HEIGHT_DESC',
  OFFERS_STDDEV_SAMPLE_MINIMUM_STAKING_AMOUNT_ASC = 'OFFERS_STDDEV_SAMPLE_MINIMUM_STAKING_AMOUNT_ASC',
  OFFERS_STDDEV_SAMPLE_MINIMUM_STAKING_AMOUNT_DESC = 'OFFERS_STDDEV_SAMPLE_MINIMUM_STAKING_AMOUNT_DESC',
  OFFERS_STDDEV_SAMPLE_PLAN_TEMPLATE_ID_ASC = 'OFFERS_STDDEV_SAMPLE_PLAN_TEMPLATE_ID_ASC',
  OFFERS_STDDEV_SAMPLE_PLAN_TEMPLATE_ID_DESC = 'OFFERS_STDDEV_SAMPLE_PLAN_TEMPLATE_ID_DESC',
  OFFERS_STDDEV_SAMPLE_REACH_LIMIT_ASC = 'OFFERS_STDDEV_SAMPLE_REACH_LIMIT_ASC',
  OFFERS_STDDEV_SAMPLE_REACH_LIMIT_DESC = 'OFFERS_STDDEV_SAMPLE_REACH_LIMIT_DESC',
  OFFERS_STDDEV_SAMPLE_WITHDRAWN_ASC = 'OFFERS_STDDEV_SAMPLE_WITHDRAWN_ASC',
  OFFERS_STDDEV_SAMPLE_WITHDRAWN_DESC = 'OFFERS_STDDEV_SAMPLE_WITHDRAWN_DESC',
  OFFERS_STDDEV_SAMPLE_WITHDRAW_PENALTY_ASC = 'OFFERS_STDDEV_SAMPLE_WITHDRAW_PENALTY_ASC',
  OFFERS_STDDEV_SAMPLE_WITHDRAW_PENALTY_DESC = 'OFFERS_STDDEV_SAMPLE_WITHDRAW_PENALTY_DESC',
  OFFERS_SUM_ACCEPTED_ASC = 'OFFERS_SUM_ACCEPTED_ASC',
  OFFERS_SUM_ACCEPTED_DESC = 'OFFERS_SUM_ACCEPTED_DESC',
  OFFERS_SUM_BLOCK_RANGE_ASC = 'OFFERS_SUM_BLOCK_RANGE_ASC',
  OFFERS_SUM_BLOCK_RANGE_DESC = 'OFFERS_SUM_BLOCK_RANGE_DESC',
  OFFERS_SUM_CONSUMER_ASC = 'OFFERS_SUM_CONSUMER_ASC',
  OFFERS_SUM_CONSUMER_DESC = 'OFFERS_SUM_CONSUMER_DESC',
  OFFERS_SUM_CREATED_BLOCK_ASC = 'OFFERS_SUM_CREATED_BLOCK_ASC',
  OFFERS_SUM_CREATED_BLOCK_DESC = 'OFFERS_SUM_CREATED_BLOCK_DESC',
  OFFERS_SUM_DEPLOYMENT_ID_ASC = 'OFFERS_SUM_DEPLOYMENT_ID_ASC',
  OFFERS_SUM_DEPLOYMENT_ID_DESC = 'OFFERS_SUM_DEPLOYMENT_ID_DESC',
  OFFERS_SUM_DEPOSIT_ASC = 'OFFERS_SUM_DEPOSIT_ASC',
  OFFERS_SUM_DEPOSIT_DESC = 'OFFERS_SUM_DEPOSIT_DESC',
  OFFERS_SUM_EXPIRE_DATE_ASC = 'OFFERS_SUM_EXPIRE_DATE_ASC',
  OFFERS_SUM_EXPIRE_DATE_DESC = 'OFFERS_SUM_EXPIRE_DATE_DESC',
  OFFERS_SUM_ID_ASC = 'OFFERS_SUM_ID_ASC',
  OFFERS_SUM_ID_DESC = 'OFFERS_SUM_ID_DESC',
  OFFERS_SUM_LAST_EVENT_ASC = 'OFFERS_SUM_LAST_EVENT_ASC',
  OFFERS_SUM_LAST_EVENT_DESC = 'OFFERS_SUM_LAST_EVENT_DESC',
  OFFERS_SUM_LIMIT_ASC = 'OFFERS_SUM_LIMIT_ASC',
  OFFERS_SUM_LIMIT_DESC = 'OFFERS_SUM_LIMIT_DESC',
  OFFERS_SUM_MINIMUM_ACCEPT_HEIGHT_ASC = 'OFFERS_SUM_MINIMUM_ACCEPT_HEIGHT_ASC',
  OFFERS_SUM_MINIMUM_ACCEPT_HEIGHT_DESC = 'OFFERS_SUM_MINIMUM_ACCEPT_HEIGHT_DESC',
  OFFERS_SUM_MINIMUM_STAKING_AMOUNT_ASC = 'OFFERS_SUM_MINIMUM_STAKING_AMOUNT_ASC',
  OFFERS_SUM_MINIMUM_STAKING_AMOUNT_DESC = 'OFFERS_SUM_MINIMUM_STAKING_AMOUNT_DESC',
  OFFERS_SUM_PLAN_TEMPLATE_ID_ASC = 'OFFERS_SUM_PLAN_TEMPLATE_ID_ASC',
  OFFERS_SUM_PLAN_TEMPLATE_ID_DESC = 'OFFERS_SUM_PLAN_TEMPLATE_ID_DESC',
  OFFERS_SUM_REACH_LIMIT_ASC = 'OFFERS_SUM_REACH_LIMIT_ASC',
  OFFERS_SUM_REACH_LIMIT_DESC = 'OFFERS_SUM_REACH_LIMIT_DESC',
  OFFERS_SUM_WITHDRAWN_ASC = 'OFFERS_SUM_WITHDRAWN_ASC',
  OFFERS_SUM_WITHDRAWN_DESC = 'OFFERS_SUM_WITHDRAWN_DESC',
  OFFERS_SUM_WITHDRAW_PENALTY_ASC = 'OFFERS_SUM_WITHDRAW_PENALTY_ASC',
  OFFERS_SUM_WITHDRAW_PENALTY_DESC = 'OFFERS_SUM_WITHDRAW_PENALTY_DESC',
  OFFERS_VARIANCE_POPULATION_ACCEPTED_ASC = 'OFFERS_VARIANCE_POPULATION_ACCEPTED_ASC',
  OFFERS_VARIANCE_POPULATION_ACCEPTED_DESC = 'OFFERS_VARIANCE_POPULATION_ACCEPTED_DESC',
  OFFERS_VARIANCE_POPULATION_BLOCK_RANGE_ASC = 'OFFERS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  OFFERS_VARIANCE_POPULATION_BLOCK_RANGE_DESC = 'OFFERS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  OFFERS_VARIANCE_POPULATION_CONSUMER_ASC = 'OFFERS_VARIANCE_POPULATION_CONSUMER_ASC',
  OFFERS_VARIANCE_POPULATION_CONSUMER_DESC = 'OFFERS_VARIANCE_POPULATION_CONSUMER_DESC',
  OFFERS_VARIANCE_POPULATION_CREATED_BLOCK_ASC = 'OFFERS_VARIANCE_POPULATION_CREATED_BLOCK_ASC',
  OFFERS_VARIANCE_POPULATION_CREATED_BLOCK_DESC = 'OFFERS_VARIANCE_POPULATION_CREATED_BLOCK_DESC',
  OFFERS_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC = 'OFFERS_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC',
  OFFERS_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC = 'OFFERS_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC',
  OFFERS_VARIANCE_POPULATION_DEPOSIT_ASC = 'OFFERS_VARIANCE_POPULATION_DEPOSIT_ASC',
  OFFERS_VARIANCE_POPULATION_DEPOSIT_DESC = 'OFFERS_VARIANCE_POPULATION_DEPOSIT_DESC',
  OFFERS_VARIANCE_POPULATION_EXPIRE_DATE_ASC = 'OFFERS_VARIANCE_POPULATION_EXPIRE_DATE_ASC',
  OFFERS_VARIANCE_POPULATION_EXPIRE_DATE_DESC = 'OFFERS_VARIANCE_POPULATION_EXPIRE_DATE_DESC',
  OFFERS_VARIANCE_POPULATION_ID_ASC = 'OFFERS_VARIANCE_POPULATION_ID_ASC',
  OFFERS_VARIANCE_POPULATION_ID_DESC = 'OFFERS_VARIANCE_POPULATION_ID_DESC',
  OFFERS_VARIANCE_POPULATION_LAST_EVENT_ASC = 'OFFERS_VARIANCE_POPULATION_LAST_EVENT_ASC',
  OFFERS_VARIANCE_POPULATION_LAST_EVENT_DESC = 'OFFERS_VARIANCE_POPULATION_LAST_EVENT_DESC',
  OFFERS_VARIANCE_POPULATION_LIMIT_ASC = 'OFFERS_VARIANCE_POPULATION_LIMIT_ASC',
  OFFERS_VARIANCE_POPULATION_LIMIT_DESC = 'OFFERS_VARIANCE_POPULATION_LIMIT_DESC',
  OFFERS_VARIANCE_POPULATION_MINIMUM_ACCEPT_HEIGHT_ASC = 'OFFERS_VARIANCE_POPULATION_MINIMUM_ACCEPT_HEIGHT_ASC',
  OFFERS_VARIANCE_POPULATION_MINIMUM_ACCEPT_HEIGHT_DESC = 'OFFERS_VARIANCE_POPULATION_MINIMUM_ACCEPT_HEIGHT_DESC',
  OFFERS_VARIANCE_POPULATION_MINIMUM_STAKING_AMOUNT_ASC = 'OFFERS_VARIANCE_POPULATION_MINIMUM_STAKING_AMOUNT_ASC',
  OFFERS_VARIANCE_POPULATION_MINIMUM_STAKING_AMOUNT_DESC = 'OFFERS_VARIANCE_POPULATION_MINIMUM_STAKING_AMOUNT_DESC',
  OFFERS_VARIANCE_POPULATION_PLAN_TEMPLATE_ID_ASC = 'OFFERS_VARIANCE_POPULATION_PLAN_TEMPLATE_ID_ASC',
  OFFERS_VARIANCE_POPULATION_PLAN_TEMPLATE_ID_DESC = 'OFFERS_VARIANCE_POPULATION_PLAN_TEMPLATE_ID_DESC',
  OFFERS_VARIANCE_POPULATION_REACH_LIMIT_ASC = 'OFFERS_VARIANCE_POPULATION_REACH_LIMIT_ASC',
  OFFERS_VARIANCE_POPULATION_REACH_LIMIT_DESC = 'OFFERS_VARIANCE_POPULATION_REACH_LIMIT_DESC',
  OFFERS_VARIANCE_POPULATION_WITHDRAWN_ASC = 'OFFERS_VARIANCE_POPULATION_WITHDRAWN_ASC',
  OFFERS_VARIANCE_POPULATION_WITHDRAWN_DESC = 'OFFERS_VARIANCE_POPULATION_WITHDRAWN_DESC',
  OFFERS_VARIANCE_POPULATION_WITHDRAW_PENALTY_ASC = 'OFFERS_VARIANCE_POPULATION_WITHDRAW_PENALTY_ASC',
  OFFERS_VARIANCE_POPULATION_WITHDRAW_PENALTY_DESC = 'OFFERS_VARIANCE_POPULATION_WITHDRAW_PENALTY_DESC',
  OFFERS_VARIANCE_SAMPLE_ACCEPTED_ASC = 'OFFERS_VARIANCE_SAMPLE_ACCEPTED_ASC',
  OFFERS_VARIANCE_SAMPLE_ACCEPTED_DESC = 'OFFERS_VARIANCE_SAMPLE_ACCEPTED_DESC',
  OFFERS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC = 'OFFERS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  OFFERS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC = 'OFFERS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  OFFERS_VARIANCE_SAMPLE_CONSUMER_ASC = 'OFFERS_VARIANCE_SAMPLE_CONSUMER_ASC',
  OFFERS_VARIANCE_SAMPLE_CONSUMER_DESC = 'OFFERS_VARIANCE_SAMPLE_CONSUMER_DESC',
  OFFERS_VARIANCE_SAMPLE_CREATED_BLOCK_ASC = 'OFFERS_VARIANCE_SAMPLE_CREATED_BLOCK_ASC',
  OFFERS_VARIANCE_SAMPLE_CREATED_BLOCK_DESC = 'OFFERS_VARIANCE_SAMPLE_CREATED_BLOCK_DESC',
  OFFERS_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC = 'OFFERS_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC',
  OFFERS_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC = 'OFFERS_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC',
  OFFERS_VARIANCE_SAMPLE_DEPOSIT_ASC = 'OFFERS_VARIANCE_SAMPLE_DEPOSIT_ASC',
  OFFERS_VARIANCE_SAMPLE_DEPOSIT_DESC = 'OFFERS_VARIANCE_SAMPLE_DEPOSIT_DESC',
  OFFERS_VARIANCE_SAMPLE_EXPIRE_DATE_ASC = 'OFFERS_VARIANCE_SAMPLE_EXPIRE_DATE_ASC',
  OFFERS_VARIANCE_SAMPLE_EXPIRE_DATE_DESC = 'OFFERS_VARIANCE_SAMPLE_EXPIRE_DATE_DESC',
  OFFERS_VARIANCE_SAMPLE_ID_ASC = 'OFFERS_VARIANCE_SAMPLE_ID_ASC',
  OFFERS_VARIANCE_SAMPLE_ID_DESC = 'OFFERS_VARIANCE_SAMPLE_ID_DESC',
  OFFERS_VARIANCE_SAMPLE_LAST_EVENT_ASC = 'OFFERS_VARIANCE_SAMPLE_LAST_EVENT_ASC',
  OFFERS_VARIANCE_SAMPLE_LAST_EVENT_DESC = 'OFFERS_VARIANCE_SAMPLE_LAST_EVENT_DESC',
  OFFERS_VARIANCE_SAMPLE_LIMIT_ASC = 'OFFERS_VARIANCE_SAMPLE_LIMIT_ASC',
  OFFERS_VARIANCE_SAMPLE_LIMIT_DESC = 'OFFERS_VARIANCE_SAMPLE_LIMIT_DESC',
  OFFERS_VARIANCE_SAMPLE_MINIMUM_ACCEPT_HEIGHT_ASC = 'OFFERS_VARIANCE_SAMPLE_MINIMUM_ACCEPT_HEIGHT_ASC',
  OFFERS_VARIANCE_SAMPLE_MINIMUM_ACCEPT_HEIGHT_DESC = 'OFFERS_VARIANCE_SAMPLE_MINIMUM_ACCEPT_HEIGHT_DESC',
  OFFERS_VARIANCE_SAMPLE_MINIMUM_STAKING_AMOUNT_ASC = 'OFFERS_VARIANCE_SAMPLE_MINIMUM_STAKING_AMOUNT_ASC',
  OFFERS_VARIANCE_SAMPLE_MINIMUM_STAKING_AMOUNT_DESC = 'OFFERS_VARIANCE_SAMPLE_MINIMUM_STAKING_AMOUNT_DESC',
  OFFERS_VARIANCE_SAMPLE_PLAN_TEMPLATE_ID_ASC = 'OFFERS_VARIANCE_SAMPLE_PLAN_TEMPLATE_ID_ASC',
  OFFERS_VARIANCE_SAMPLE_PLAN_TEMPLATE_ID_DESC = 'OFFERS_VARIANCE_SAMPLE_PLAN_TEMPLATE_ID_DESC',
  OFFERS_VARIANCE_SAMPLE_REACH_LIMIT_ASC = 'OFFERS_VARIANCE_SAMPLE_REACH_LIMIT_ASC',
  OFFERS_VARIANCE_SAMPLE_REACH_LIMIT_DESC = 'OFFERS_VARIANCE_SAMPLE_REACH_LIMIT_DESC',
  OFFERS_VARIANCE_SAMPLE_WITHDRAWN_ASC = 'OFFERS_VARIANCE_SAMPLE_WITHDRAWN_ASC',
  OFFERS_VARIANCE_SAMPLE_WITHDRAWN_DESC = 'OFFERS_VARIANCE_SAMPLE_WITHDRAWN_DESC',
  OFFERS_VARIANCE_SAMPLE_WITHDRAW_PENALTY_ASC = 'OFFERS_VARIANCE_SAMPLE_WITHDRAW_PENALTY_ASC',
  OFFERS_VARIANCE_SAMPLE_WITHDRAW_PENALTY_DESC = 'OFFERS_VARIANCE_SAMPLE_WITHDRAW_PENALTY_DESC',
  PERIOD_ASC = 'PERIOD_ASC',
  PERIOD_DESC = 'PERIOD_DESC',
  PLANS_AVERAGE_ACTIVE_ASC = 'PLANS_AVERAGE_ACTIVE_ASC',
  PLANS_AVERAGE_ACTIVE_DESC = 'PLANS_AVERAGE_ACTIVE_DESC',
  PLANS_AVERAGE_BLOCK_RANGE_ASC = 'PLANS_AVERAGE_BLOCK_RANGE_ASC',
  PLANS_AVERAGE_BLOCK_RANGE_DESC = 'PLANS_AVERAGE_BLOCK_RANGE_DESC',
  PLANS_AVERAGE_CREATED_BLOCK_ASC = 'PLANS_AVERAGE_CREATED_BLOCK_ASC',
  PLANS_AVERAGE_CREATED_BLOCK_DESC = 'PLANS_AVERAGE_CREATED_BLOCK_DESC',
  PLANS_AVERAGE_CREATOR_ASC = 'PLANS_AVERAGE_CREATOR_ASC',
  PLANS_AVERAGE_CREATOR_DESC = 'PLANS_AVERAGE_CREATOR_DESC',
  PLANS_AVERAGE_DEPLOYMENT_ID_ASC = 'PLANS_AVERAGE_DEPLOYMENT_ID_ASC',
  PLANS_AVERAGE_DEPLOYMENT_ID_DESC = 'PLANS_AVERAGE_DEPLOYMENT_ID_DESC',
  PLANS_AVERAGE_ID_ASC = 'PLANS_AVERAGE_ID_ASC',
  PLANS_AVERAGE_ID_DESC = 'PLANS_AVERAGE_ID_DESC',
  PLANS_AVERAGE_LAST_EVENT_ASC = 'PLANS_AVERAGE_LAST_EVENT_ASC',
  PLANS_AVERAGE_LAST_EVENT_DESC = 'PLANS_AVERAGE_LAST_EVENT_DESC',
  PLANS_AVERAGE_PLAN_TEMPLATE_ID_ASC = 'PLANS_AVERAGE_PLAN_TEMPLATE_ID_ASC',
  PLANS_AVERAGE_PLAN_TEMPLATE_ID_DESC = 'PLANS_AVERAGE_PLAN_TEMPLATE_ID_DESC',
  PLANS_AVERAGE_PRICE_ASC = 'PLANS_AVERAGE_PRICE_ASC',
  PLANS_AVERAGE_PRICE_DESC = 'PLANS_AVERAGE_PRICE_DESC',
  PLANS_BY_PLAN_TEMPLATE_ID__COUNT_ASC = 'PLANS_BY_PLAN_TEMPLATE_ID__COUNT_ASC',
  PLANS_BY_PLAN_TEMPLATE_ID__COUNT_DESC = 'PLANS_BY_PLAN_TEMPLATE_ID__COUNT_DESC',
  PLANS_COUNT_ASC = 'PLANS_COUNT_ASC',
  PLANS_COUNT_DESC = 'PLANS_COUNT_DESC',
  PLANS_DISTINCT_COUNT_ACTIVE_ASC = 'PLANS_DISTINCT_COUNT_ACTIVE_ASC',
  PLANS_DISTINCT_COUNT_ACTIVE_DESC = 'PLANS_DISTINCT_COUNT_ACTIVE_DESC',
  PLANS_DISTINCT_COUNT_BLOCK_RANGE_ASC = 'PLANS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  PLANS_DISTINCT_COUNT_BLOCK_RANGE_DESC = 'PLANS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  PLANS_DISTINCT_COUNT_CREATED_BLOCK_ASC = 'PLANS_DISTINCT_COUNT_CREATED_BLOCK_ASC',
  PLANS_DISTINCT_COUNT_CREATED_BLOCK_DESC = 'PLANS_DISTINCT_COUNT_CREATED_BLOCK_DESC',
  PLANS_DISTINCT_COUNT_CREATOR_ASC = 'PLANS_DISTINCT_COUNT_CREATOR_ASC',
  PLANS_DISTINCT_COUNT_CREATOR_DESC = 'PLANS_DISTINCT_COUNT_CREATOR_DESC',
  PLANS_DISTINCT_COUNT_DEPLOYMENT_ID_ASC = 'PLANS_DISTINCT_COUNT_DEPLOYMENT_ID_ASC',
  PLANS_DISTINCT_COUNT_DEPLOYMENT_ID_DESC = 'PLANS_DISTINCT_COUNT_DEPLOYMENT_ID_DESC',
  PLANS_DISTINCT_COUNT_ID_ASC = 'PLANS_DISTINCT_COUNT_ID_ASC',
  PLANS_DISTINCT_COUNT_ID_DESC = 'PLANS_DISTINCT_COUNT_ID_DESC',
  PLANS_DISTINCT_COUNT_LAST_EVENT_ASC = 'PLANS_DISTINCT_COUNT_LAST_EVENT_ASC',
  PLANS_DISTINCT_COUNT_LAST_EVENT_DESC = 'PLANS_DISTINCT_COUNT_LAST_EVENT_DESC',
  PLANS_DISTINCT_COUNT_PLAN_TEMPLATE_ID_ASC = 'PLANS_DISTINCT_COUNT_PLAN_TEMPLATE_ID_ASC',
  PLANS_DISTINCT_COUNT_PLAN_TEMPLATE_ID_DESC = 'PLANS_DISTINCT_COUNT_PLAN_TEMPLATE_ID_DESC',
  PLANS_DISTINCT_COUNT_PRICE_ASC = 'PLANS_DISTINCT_COUNT_PRICE_ASC',
  PLANS_DISTINCT_COUNT_PRICE_DESC = 'PLANS_DISTINCT_COUNT_PRICE_DESC',
  PLANS_MAX_ACTIVE_ASC = 'PLANS_MAX_ACTIVE_ASC',
  PLANS_MAX_ACTIVE_DESC = 'PLANS_MAX_ACTIVE_DESC',
  PLANS_MAX_BLOCK_RANGE_ASC = 'PLANS_MAX_BLOCK_RANGE_ASC',
  PLANS_MAX_BLOCK_RANGE_DESC = 'PLANS_MAX_BLOCK_RANGE_DESC',
  PLANS_MAX_CREATED_BLOCK_ASC = 'PLANS_MAX_CREATED_BLOCK_ASC',
  PLANS_MAX_CREATED_BLOCK_DESC = 'PLANS_MAX_CREATED_BLOCK_DESC',
  PLANS_MAX_CREATOR_ASC = 'PLANS_MAX_CREATOR_ASC',
  PLANS_MAX_CREATOR_DESC = 'PLANS_MAX_CREATOR_DESC',
  PLANS_MAX_DEPLOYMENT_ID_ASC = 'PLANS_MAX_DEPLOYMENT_ID_ASC',
  PLANS_MAX_DEPLOYMENT_ID_DESC = 'PLANS_MAX_DEPLOYMENT_ID_DESC',
  PLANS_MAX_ID_ASC = 'PLANS_MAX_ID_ASC',
  PLANS_MAX_ID_DESC = 'PLANS_MAX_ID_DESC',
  PLANS_MAX_LAST_EVENT_ASC = 'PLANS_MAX_LAST_EVENT_ASC',
  PLANS_MAX_LAST_EVENT_DESC = 'PLANS_MAX_LAST_EVENT_DESC',
  PLANS_MAX_PLAN_TEMPLATE_ID_ASC = 'PLANS_MAX_PLAN_TEMPLATE_ID_ASC',
  PLANS_MAX_PLAN_TEMPLATE_ID_DESC = 'PLANS_MAX_PLAN_TEMPLATE_ID_DESC',
  PLANS_MAX_PRICE_ASC = 'PLANS_MAX_PRICE_ASC',
  PLANS_MAX_PRICE_DESC = 'PLANS_MAX_PRICE_DESC',
  PLANS_MIN_ACTIVE_ASC = 'PLANS_MIN_ACTIVE_ASC',
  PLANS_MIN_ACTIVE_DESC = 'PLANS_MIN_ACTIVE_DESC',
  PLANS_MIN_BLOCK_RANGE_ASC = 'PLANS_MIN_BLOCK_RANGE_ASC',
  PLANS_MIN_BLOCK_RANGE_DESC = 'PLANS_MIN_BLOCK_RANGE_DESC',
  PLANS_MIN_CREATED_BLOCK_ASC = 'PLANS_MIN_CREATED_BLOCK_ASC',
  PLANS_MIN_CREATED_BLOCK_DESC = 'PLANS_MIN_CREATED_BLOCK_DESC',
  PLANS_MIN_CREATOR_ASC = 'PLANS_MIN_CREATOR_ASC',
  PLANS_MIN_CREATOR_DESC = 'PLANS_MIN_CREATOR_DESC',
  PLANS_MIN_DEPLOYMENT_ID_ASC = 'PLANS_MIN_DEPLOYMENT_ID_ASC',
  PLANS_MIN_DEPLOYMENT_ID_DESC = 'PLANS_MIN_DEPLOYMENT_ID_DESC',
  PLANS_MIN_ID_ASC = 'PLANS_MIN_ID_ASC',
  PLANS_MIN_ID_DESC = 'PLANS_MIN_ID_DESC',
  PLANS_MIN_LAST_EVENT_ASC = 'PLANS_MIN_LAST_EVENT_ASC',
  PLANS_MIN_LAST_EVENT_DESC = 'PLANS_MIN_LAST_EVENT_DESC',
  PLANS_MIN_PLAN_TEMPLATE_ID_ASC = 'PLANS_MIN_PLAN_TEMPLATE_ID_ASC',
  PLANS_MIN_PLAN_TEMPLATE_ID_DESC = 'PLANS_MIN_PLAN_TEMPLATE_ID_DESC',
  PLANS_MIN_PRICE_ASC = 'PLANS_MIN_PRICE_ASC',
  PLANS_MIN_PRICE_DESC = 'PLANS_MIN_PRICE_DESC',
  PLANS_STDDEV_POPULATION_ACTIVE_ASC = 'PLANS_STDDEV_POPULATION_ACTIVE_ASC',
  PLANS_STDDEV_POPULATION_ACTIVE_DESC = 'PLANS_STDDEV_POPULATION_ACTIVE_DESC',
  PLANS_STDDEV_POPULATION_BLOCK_RANGE_ASC = 'PLANS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  PLANS_STDDEV_POPULATION_BLOCK_RANGE_DESC = 'PLANS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  PLANS_STDDEV_POPULATION_CREATED_BLOCK_ASC = 'PLANS_STDDEV_POPULATION_CREATED_BLOCK_ASC',
  PLANS_STDDEV_POPULATION_CREATED_BLOCK_DESC = 'PLANS_STDDEV_POPULATION_CREATED_BLOCK_DESC',
  PLANS_STDDEV_POPULATION_CREATOR_ASC = 'PLANS_STDDEV_POPULATION_CREATOR_ASC',
  PLANS_STDDEV_POPULATION_CREATOR_DESC = 'PLANS_STDDEV_POPULATION_CREATOR_DESC',
  PLANS_STDDEV_POPULATION_DEPLOYMENT_ID_ASC = 'PLANS_STDDEV_POPULATION_DEPLOYMENT_ID_ASC',
  PLANS_STDDEV_POPULATION_DEPLOYMENT_ID_DESC = 'PLANS_STDDEV_POPULATION_DEPLOYMENT_ID_DESC',
  PLANS_STDDEV_POPULATION_ID_ASC = 'PLANS_STDDEV_POPULATION_ID_ASC',
  PLANS_STDDEV_POPULATION_ID_DESC = 'PLANS_STDDEV_POPULATION_ID_DESC',
  PLANS_STDDEV_POPULATION_LAST_EVENT_ASC = 'PLANS_STDDEV_POPULATION_LAST_EVENT_ASC',
  PLANS_STDDEV_POPULATION_LAST_EVENT_DESC = 'PLANS_STDDEV_POPULATION_LAST_EVENT_DESC',
  PLANS_STDDEV_POPULATION_PLAN_TEMPLATE_ID_ASC = 'PLANS_STDDEV_POPULATION_PLAN_TEMPLATE_ID_ASC',
  PLANS_STDDEV_POPULATION_PLAN_TEMPLATE_ID_DESC = 'PLANS_STDDEV_POPULATION_PLAN_TEMPLATE_ID_DESC',
  PLANS_STDDEV_POPULATION_PRICE_ASC = 'PLANS_STDDEV_POPULATION_PRICE_ASC',
  PLANS_STDDEV_POPULATION_PRICE_DESC = 'PLANS_STDDEV_POPULATION_PRICE_DESC',
  PLANS_STDDEV_SAMPLE_ACTIVE_ASC = 'PLANS_STDDEV_SAMPLE_ACTIVE_ASC',
  PLANS_STDDEV_SAMPLE_ACTIVE_DESC = 'PLANS_STDDEV_SAMPLE_ACTIVE_DESC',
  PLANS_STDDEV_SAMPLE_BLOCK_RANGE_ASC = 'PLANS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  PLANS_STDDEV_SAMPLE_BLOCK_RANGE_DESC = 'PLANS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  PLANS_STDDEV_SAMPLE_CREATED_BLOCK_ASC = 'PLANS_STDDEV_SAMPLE_CREATED_BLOCK_ASC',
  PLANS_STDDEV_SAMPLE_CREATED_BLOCK_DESC = 'PLANS_STDDEV_SAMPLE_CREATED_BLOCK_DESC',
  PLANS_STDDEV_SAMPLE_CREATOR_ASC = 'PLANS_STDDEV_SAMPLE_CREATOR_ASC',
  PLANS_STDDEV_SAMPLE_CREATOR_DESC = 'PLANS_STDDEV_SAMPLE_CREATOR_DESC',
  PLANS_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC = 'PLANS_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC',
  PLANS_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC = 'PLANS_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC',
  PLANS_STDDEV_SAMPLE_ID_ASC = 'PLANS_STDDEV_SAMPLE_ID_ASC',
  PLANS_STDDEV_SAMPLE_ID_DESC = 'PLANS_STDDEV_SAMPLE_ID_DESC',
  PLANS_STDDEV_SAMPLE_LAST_EVENT_ASC = 'PLANS_STDDEV_SAMPLE_LAST_EVENT_ASC',
  PLANS_STDDEV_SAMPLE_LAST_EVENT_DESC = 'PLANS_STDDEV_SAMPLE_LAST_EVENT_DESC',
  PLANS_STDDEV_SAMPLE_PLAN_TEMPLATE_ID_ASC = 'PLANS_STDDEV_SAMPLE_PLAN_TEMPLATE_ID_ASC',
  PLANS_STDDEV_SAMPLE_PLAN_TEMPLATE_ID_DESC = 'PLANS_STDDEV_SAMPLE_PLAN_TEMPLATE_ID_DESC',
  PLANS_STDDEV_SAMPLE_PRICE_ASC = 'PLANS_STDDEV_SAMPLE_PRICE_ASC',
  PLANS_STDDEV_SAMPLE_PRICE_DESC = 'PLANS_STDDEV_SAMPLE_PRICE_DESC',
  PLANS_SUM_ACTIVE_ASC = 'PLANS_SUM_ACTIVE_ASC',
  PLANS_SUM_ACTIVE_DESC = 'PLANS_SUM_ACTIVE_DESC',
  PLANS_SUM_BLOCK_RANGE_ASC = 'PLANS_SUM_BLOCK_RANGE_ASC',
  PLANS_SUM_BLOCK_RANGE_DESC = 'PLANS_SUM_BLOCK_RANGE_DESC',
  PLANS_SUM_CREATED_BLOCK_ASC = 'PLANS_SUM_CREATED_BLOCK_ASC',
  PLANS_SUM_CREATED_BLOCK_DESC = 'PLANS_SUM_CREATED_BLOCK_DESC',
  PLANS_SUM_CREATOR_ASC = 'PLANS_SUM_CREATOR_ASC',
  PLANS_SUM_CREATOR_DESC = 'PLANS_SUM_CREATOR_DESC',
  PLANS_SUM_DEPLOYMENT_ID_ASC = 'PLANS_SUM_DEPLOYMENT_ID_ASC',
  PLANS_SUM_DEPLOYMENT_ID_DESC = 'PLANS_SUM_DEPLOYMENT_ID_DESC',
  PLANS_SUM_ID_ASC = 'PLANS_SUM_ID_ASC',
  PLANS_SUM_ID_DESC = 'PLANS_SUM_ID_DESC',
  PLANS_SUM_LAST_EVENT_ASC = 'PLANS_SUM_LAST_EVENT_ASC',
  PLANS_SUM_LAST_EVENT_DESC = 'PLANS_SUM_LAST_EVENT_DESC',
  PLANS_SUM_PLAN_TEMPLATE_ID_ASC = 'PLANS_SUM_PLAN_TEMPLATE_ID_ASC',
  PLANS_SUM_PLAN_TEMPLATE_ID_DESC = 'PLANS_SUM_PLAN_TEMPLATE_ID_DESC',
  PLANS_SUM_PRICE_ASC = 'PLANS_SUM_PRICE_ASC',
  PLANS_SUM_PRICE_DESC = 'PLANS_SUM_PRICE_DESC',
  PLANS_VARIANCE_POPULATION_ACTIVE_ASC = 'PLANS_VARIANCE_POPULATION_ACTIVE_ASC',
  PLANS_VARIANCE_POPULATION_ACTIVE_DESC = 'PLANS_VARIANCE_POPULATION_ACTIVE_DESC',
  PLANS_VARIANCE_POPULATION_BLOCK_RANGE_ASC = 'PLANS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  PLANS_VARIANCE_POPULATION_BLOCK_RANGE_DESC = 'PLANS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  PLANS_VARIANCE_POPULATION_CREATED_BLOCK_ASC = 'PLANS_VARIANCE_POPULATION_CREATED_BLOCK_ASC',
  PLANS_VARIANCE_POPULATION_CREATED_BLOCK_DESC = 'PLANS_VARIANCE_POPULATION_CREATED_BLOCK_DESC',
  PLANS_VARIANCE_POPULATION_CREATOR_ASC = 'PLANS_VARIANCE_POPULATION_CREATOR_ASC',
  PLANS_VARIANCE_POPULATION_CREATOR_DESC = 'PLANS_VARIANCE_POPULATION_CREATOR_DESC',
  PLANS_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC = 'PLANS_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC',
  PLANS_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC = 'PLANS_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC',
  PLANS_VARIANCE_POPULATION_ID_ASC = 'PLANS_VARIANCE_POPULATION_ID_ASC',
  PLANS_VARIANCE_POPULATION_ID_DESC = 'PLANS_VARIANCE_POPULATION_ID_DESC',
  PLANS_VARIANCE_POPULATION_LAST_EVENT_ASC = 'PLANS_VARIANCE_POPULATION_LAST_EVENT_ASC',
  PLANS_VARIANCE_POPULATION_LAST_EVENT_DESC = 'PLANS_VARIANCE_POPULATION_LAST_EVENT_DESC',
  PLANS_VARIANCE_POPULATION_PLAN_TEMPLATE_ID_ASC = 'PLANS_VARIANCE_POPULATION_PLAN_TEMPLATE_ID_ASC',
  PLANS_VARIANCE_POPULATION_PLAN_TEMPLATE_ID_DESC = 'PLANS_VARIANCE_POPULATION_PLAN_TEMPLATE_ID_DESC',
  PLANS_VARIANCE_POPULATION_PRICE_ASC = 'PLANS_VARIANCE_POPULATION_PRICE_ASC',
  PLANS_VARIANCE_POPULATION_PRICE_DESC = 'PLANS_VARIANCE_POPULATION_PRICE_DESC',
  PLANS_VARIANCE_SAMPLE_ACTIVE_ASC = 'PLANS_VARIANCE_SAMPLE_ACTIVE_ASC',
  PLANS_VARIANCE_SAMPLE_ACTIVE_DESC = 'PLANS_VARIANCE_SAMPLE_ACTIVE_DESC',
  PLANS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC = 'PLANS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  PLANS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC = 'PLANS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  PLANS_VARIANCE_SAMPLE_CREATED_BLOCK_ASC = 'PLANS_VARIANCE_SAMPLE_CREATED_BLOCK_ASC',
  PLANS_VARIANCE_SAMPLE_CREATED_BLOCK_DESC = 'PLANS_VARIANCE_SAMPLE_CREATED_BLOCK_DESC',
  PLANS_VARIANCE_SAMPLE_CREATOR_ASC = 'PLANS_VARIANCE_SAMPLE_CREATOR_ASC',
  PLANS_VARIANCE_SAMPLE_CREATOR_DESC = 'PLANS_VARIANCE_SAMPLE_CREATOR_DESC',
  PLANS_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC = 'PLANS_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC',
  PLANS_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC = 'PLANS_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC',
  PLANS_VARIANCE_SAMPLE_ID_ASC = 'PLANS_VARIANCE_SAMPLE_ID_ASC',
  PLANS_VARIANCE_SAMPLE_ID_DESC = 'PLANS_VARIANCE_SAMPLE_ID_DESC',
  PLANS_VARIANCE_SAMPLE_LAST_EVENT_ASC = 'PLANS_VARIANCE_SAMPLE_LAST_EVENT_ASC',
  PLANS_VARIANCE_SAMPLE_LAST_EVENT_DESC = 'PLANS_VARIANCE_SAMPLE_LAST_EVENT_DESC',
  PLANS_VARIANCE_SAMPLE_PLAN_TEMPLATE_ID_ASC = 'PLANS_VARIANCE_SAMPLE_PLAN_TEMPLATE_ID_ASC',
  PLANS_VARIANCE_SAMPLE_PLAN_TEMPLATE_ID_DESC = 'PLANS_VARIANCE_SAMPLE_PLAN_TEMPLATE_ID_DESC',
  PLANS_VARIANCE_SAMPLE_PRICE_ASC = 'PLANS_VARIANCE_SAMPLE_PRICE_ASC',
  PLANS_VARIANCE_SAMPLE_PRICE_DESC = 'PLANS_VARIANCE_SAMPLE_PRICE_DESC',
  PRICE_TOKEN_ASC = 'PRICE_TOKEN_ASC',
  PRICE_TOKEN_DESC = 'PRICE_TOKEN_DESC',
  PRIMARY_KEY_ASC = 'PRIMARY_KEY_ASC',
  PRIMARY_KEY_DESC = 'PRIMARY_KEY_DESC',
  RATE_LIMIT_ASC = 'RATE_LIMIT_ASC',
  RATE_LIMIT_DESC = 'RATE_LIMIT_DESC',
  SERVICE_AGREEMENTS_AVERAGE_BLOCK_RANGE_ASC = 'SERVICE_AGREEMENTS_AVERAGE_BLOCK_RANGE_ASC',
  SERVICE_AGREEMENTS_AVERAGE_BLOCK_RANGE_DESC = 'SERVICE_AGREEMENTS_AVERAGE_BLOCK_RANGE_DESC',
  SERVICE_AGREEMENTS_AVERAGE_CONSUMER_ADDRESS_ASC = 'SERVICE_AGREEMENTS_AVERAGE_CONSUMER_ADDRESS_ASC',
  SERVICE_AGREEMENTS_AVERAGE_CONSUMER_ADDRESS_DESC = 'SERVICE_AGREEMENTS_AVERAGE_CONSUMER_ADDRESS_DESC',
  SERVICE_AGREEMENTS_AVERAGE_CREATED_BLOCK_ASC = 'SERVICE_AGREEMENTS_AVERAGE_CREATED_BLOCK_ASC',
  SERVICE_AGREEMENTS_AVERAGE_CREATED_BLOCK_DESC = 'SERVICE_AGREEMENTS_AVERAGE_CREATED_BLOCK_DESC',
  SERVICE_AGREEMENTS_AVERAGE_DEPLOYMENT_ID_ASC = 'SERVICE_AGREEMENTS_AVERAGE_DEPLOYMENT_ID_ASC',
  SERVICE_AGREEMENTS_AVERAGE_DEPLOYMENT_ID_DESC = 'SERVICE_AGREEMENTS_AVERAGE_DEPLOYMENT_ID_DESC',
  SERVICE_AGREEMENTS_AVERAGE_END_TIME_ASC = 'SERVICE_AGREEMENTS_AVERAGE_END_TIME_ASC',
  SERVICE_AGREEMENTS_AVERAGE_END_TIME_DESC = 'SERVICE_AGREEMENTS_AVERAGE_END_TIME_DESC',
  SERVICE_AGREEMENTS_AVERAGE_ID_ASC = 'SERVICE_AGREEMENTS_AVERAGE_ID_ASC',
  SERVICE_AGREEMENTS_AVERAGE_ID_DESC = 'SERVICE_AGREEMENTS_AVERAGE_ID_DESC',
  SERVICE_AGREEMENTS_AVERAGE_INDEXER_ADDRESS_ASC = 'SERVICE_AGREEMENTS_AVERAGE_INDEXER_ADDRESS_ASC',
  SERVICE_AGREEMENTS_AVERAGE_INDEXER_ADDRESS_DESC = 'SERVICE_AGREEMENTS_AVERAGE_INDEXER_ADDRESS_DESC',
  SERVICE_AGREEMENTS_AVERAGE_LAST_EVENT_ASC = 'SERVICE_AGREEMENTS_AVERAGE_LAST_EVENT_ASC',
  SERVICE_AGREEMENTS_AVERAGE_LAST_EVENT_DESC = 'SERVICE_AGREEMENTS_AVERAGE_LAST_EVENT_DESC',
  SERVICE_AGREEMENTS_AVERAGE_LOCKED_AMOUNT_ASC = 'SERVICE_AGREEMENTS_AVERAGE_LOCKED_AMOUNT_ASC',
  SERVICE_AGREEMENTS_AVERAGE_LOCKED_AMOUNT_DESC = 'SERVICE_AGREEMENTS_AVERAGE_LOCKED_AMOUNT_DESC',
  SERVICE_AGREEMENTS_AVERAGE_PERIOD_ASC = 'SERVICE_AGREEMENTS_AVERAGE_PERIOD_ASC',
  SERVICE_AGREEMENTS_AVERAGE_PERIOD_DESC = 'SERVICE_AGREEMENTS_AVERAGE_PERIOD_DESC',
  SERVICE_AGREEMENTS_AVERAGE_PLAN_TEMPLATE_ID_ASC = 'SERVICE_AGREEMENTS_AVERAGE_PLAN_TEMPLATE_ID_ASC',
  SERVICE_AGREEMENTS_AVERAGE_PLAN_TEMPLATE_ID_DESC = 'SERVICE_AGREEMENTS_AVERAGE_PLAN_TEMPLATE_ID_DESC',
  SERVICE_AGREEMENTS_AVERAGE_START_TIME_ASC = 'SERVICE_AGREEMENTS_AVERAGE_START_TIME_ASC',
  SERVICE_AGREEMENTS_AVERAGE_START_TIME_DESC = 'SERVICE_AGREEMENTS_AVERAGE_START_TIME_DESC',
  SERVICE_AGREEMENTS_BY_PLAN_TEMPLATE_ID__COUNT_ASC = 'SERVICE_AGREEMENTS_BY_PLAN_TEMPLATE_ID__COUNT_ASC',
  SERVICE_AGREEMENTS_BY_PLAN_TEMPLATE_ID__COUNT_DESC = 'SERVICE_AGREEMENTS_BY_PLAN_TEMPLATE_ID__COUNT_DESC',
  SERVICE_AGREEMENTS_COUNT_ASC = 'SERVICE_AGREEMENTS_COUNT_ASC',
  SERVICE_AGREEMENTS_COUNT_DESC = 'SERVICE_AGREEMENTS_COUNT_DESC',
  SERVICE_AGREEMENTS_DISTINCT_COUNT_BLOCK_RANGE_ASC = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  SERVICE_AGREEMENTS_DISTINCT_COUNT_BLOCK_RANGE_DESC = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  SERVICE_AGREEMENTS_DISTINCT_COUNT_CONSUMER_ADDRESS_ASC = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_CONSUMER_ADDRESS_ASC',
  SERVICE_AGREEMENTS_DISTINCT_COUNT_CONSUMER_ADDRESS_DESC = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_CONSUMER_ADDRESS_DESC',
  SERVICE_AGREEMENTS_DISTINCT_COUNT_CREATED_BLOCK_ASC = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_CREATED_BLOCK_ASC',
  SERVICE_AGREEMENTS_DISTINCT_COUNT_CREATED_BLOCK_DESC = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_CREATED_BLOCK_DESC',
  SERVICE_AGREEMENTS_DISTINCT_COUNT_DEPLOYMENT_ID_ASC = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_DEPLOYMENT_ID_ASC',
  SERVICE_AGREEMENTS_DISTINCT_COUNT_DEPLOYMENT_ID_DESC = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_DEPLOYMENT_ID_DESC',
  SERVICE_AGREEMENTS_DISTINCT_COUNT_END_TIME_ASC = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_END_TIME_ASC',
  SERVICE_AGREEMENTS_DISTINCT_COUNT_END_TIME_DESC = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_END_TIME_DESC',
  SERVICE_AGREEMENTS_DISTINCT_COUNT_ID_ASC = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_ID_ASC',
  SERVICE_AGREEMENTS_DISTINCT_COUNT_ID_DESC = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_ID_DESC',
  SERVICE_AGREEMENTS_DISTINCT_COUNT_INDEXER_ADDRESS_ASC = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_INDEXER_ADDRESS_ASC',
  SERVICE_AGREEMENTS_DISTINCT_COUNT_INDEXER_ADDRESS_DESC = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_INDEXER_ADDRESS_DESC',
  SERVICE_AGREEMENTS_DISTINCT_COUNT_LAST_EVENT_ASC = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_LAST_EVENT_ASC',
  SERVICE_AGREEMENTS_DISTINCT_COUNT_LAST_EVENT_DESC = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_LAST_EVENT_DESC',
  SERVICE_AGREEMENTS_DISTINCT_COUNT_LOCKED_AMOUNT_ASC = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_LOCKED_AMOUNT_ASC',
  SERVICE_AGREEMENTS_DISTINCT_COUNT_LOCKED_AMOUNT_DESC = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_LOCKED_AMOUNT_DESC',
  SERVICE_AGREEMENTS_DISTINCT_COUNT_PERIOD_ASC = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_PERIOD_ASC',
  SERVICE_AGREEMENTS_DISTINCT_COUNT_PERIOD_DESC = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_PERIOD_DESC',
  SERVICE_AGREEMENTS_DISTINCT_COUNT_PLAN_TEMPLATE_ID_ASC = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_PLAN_TEMPLATE_ID_ASC',
  SERVICE_AGREEMENTS_DISTINCT_COUNT_PLAN_TEMPLATE_ID_DESC = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_PLAN_TEMPLATE_ID_DESC',
  SERVICE_AGREEMENTS_DISTINCT_COUNT_START_TIME_ASC = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_START_TIME_ASC',
  SERVICE_AGREEMENTS_DISTINCT_COUNT_START_TIME_DESC = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_START_TIME_DESC',
  SERVICE_AGREEMENTS_MAX_BLOCK_RANGE_ASC = 'SERVICE_AGREEMENTS_MAX_BLOCK_RANGE_ASC',
  SERVICE_AGREEMENTS_MAX_BLOCK_RANGE_DESC = 'SERVICE_AGREEMENTS_MAX_BLOCK_RANGE_DESC',
  SERVICE_AGREEMENTS_MAX_CONSUMER_ADDRESS_ASC = 'SERVICE_AGREEMENTS_MAX_CONSUMER_ADDRESS_ASC',
  SERVICE_AGREEMENTS_MAX_CONSUMER_ADDRESS_DESC = 'SERVICE_AGREEMENTS_MAX_CONSUMER_ADDRESS_DESC',
  SERVICE_AGREEMENTS_MAX_CREATED_BLOCK_ASC = 'SERVICE_AGREEMENTS_MAX_CREATED_BLOCK_ASC',
  SERVICE_AGREEMENTS_MAX_CREATED_BLOCK_DESC = 'SERVICE_AGREEMENTS_MAX_CREATED_BLOCK_DESC',
  SERVICE_AGREEMENTS_MAX_DEPLOYMENT_ID_ASC = 'SERVICE_AGREEMENTS_MAX_DEPLOYMENT_ID_ASC',
  SERVICE_AGREEMENTS_MAX_DEPLOYMENT_ID_DESC = 'SERVICE_AGREEMENTS_MAX_DEPLOYMENT_ID_DESC',
  SERVICE_AGREEMENTS_MAX_END_TIME_ASC = 'SERVICE_AGREEMENTS_MAX_END_TIME_ASC',
  SERVICE_AGREEMENTS_MAX_END_TIME_DESC = 'SERVICE_AGREEMENTS_MAX_END_TIME_DESC',
  SERVICE_AGREEMENTS_MAX_ID_ASC = 'SERVICE_AGREEMENTS_MAX_ID_ASC',
  SERVICE_AGREEMENTS_MAX_ID_DESC = 'SERVICE_AGREEMENTS_MAX_ID_DESC',
  SERVICE_AGREEMENTS_MAX_INDEXER_ADDRESS_ASC = 'SERVICE_AGREEMENTS_MAX_INDEXER_ADDRESS_ASC',
  SERVICE_AGREEMENTS_MAX_INDEXER_ADDRESS_DESC = 'SERVICE_AGREEMENTS_MAX_INDEXER_ADDRESS_DESC',
  SERVICE_AGREEMENTS_MAX_LAST_EVENT_ASC = 'SERVICE_AGREEMENTS_MAX_LAST_EVENT_ASC',
  SERVICE_AGREEMENTS_MAX_LAST_EVENT_DESC = 'SERVICE_AGREEMENTS_MAX_LAST_EVENT_DESC',
  SERVICE_AGREEMENTS_MAX_LOCKED_AMOUNT_ASC = 'SERVICE_AGREEMENTS_MAX_LOCKED_AMOUNT_ASC',
  SERVICE_AGREEMENTS_MAX_LOCKED_AMOUNT_DESC = 'SERVICE_AGREEMENTS_MAX_LOCKED_AMOUNT_DESC',
  SERVICE_AGREEMENTS_MAX_PERIOD_ASC = 'SERVICE_AGREEMENTS_MAX_PERIOD_ASC',
  SERVICE_AGREEMENTS_MAX_PERIOD_DESC = 'SERVICE_AGREEMENTS_MAX_PERIOD_DESC',
  SERVICE_AGREEMENTS_MAX_PLAN_TEMPLATE_ID_ASC = 'SERVICE_AGREEMENTS_MAX_PLAN_TEMPLATE_ID_ASC',
  SERVICE_AGREEMENTS_MAX_PLAN_TEMPLATE_ID_DESC = 'SERVICE_AGREEMENTS_MAX_PLAN_TEMPLATE_ID_DESC',
  SERVICE_AGREEMENTS_MAX_START_TIME_ASC = 'SERVICE_AGREEMENTS_MAX_START_TIME_ASC',
  SERVICE_AGREEMENTS_MAX_START_TIME_DESC = 'SERVICE_AGREEMENTS_MAX_START_TIME_DESC',
  SERVICE_AGREEMENTS_MIN_BLOCK_RANGE_ASC = 'SERVICE_AGREEMENTS_MIN_BLOCK_RANGE_ASC',
  SERVICE_AGREEMENTS_MIN_BLOCK_RANGE_DESC = 'SERVICE_AGREEMENTS_MIN_BLOCK_RANGE_DESC',
  SERVICE_AGREEMENTS_MIN_CONSUMER_ADDRESS_ASC = 'SERVICE_AGREEMENTS_MIN_CONSUMER_ADDRESS_ASC',
  SERVICE_AGREEMENTS_MIN_CONSUMER_ADDRESS_DESC = 'SERVICE_AGREEMENTS_MIN_CONSUMER_ADDRESS_DESC',
  SERVICE_AGREEMENTS_MIN_CREATED_BLOCK_ASC = 'SERVICE_AGREEMENTS_MIN_CREATED_BLOCK_ASC',
  SERVICE_AGREEMENTS_MIN_CREATED_BLOCK_DESC = 'SERVICE_AGREEMENTS_MIN_CREATED_BLOCK_DESC',
  SERVICE_AGREEMENTS_MIN_DEPLOYMENT_ID_ASC = 'SERVICE_AGREEMENTS_MIN_DEPLOYMENT_ID_ASC',
  SERVICE_AGREEMENTS_MIN_DEPLOYMENT_ID_DESC = 'SERVICE_AGREEMENTS_MIN_DEPLOYMENT_ID_DESC',
  SERVICE_AGREEMENTS_MIN_END_TIME_ASC = 'SERVICE_AGREEMENTS_MIN_END_TIME_ASC',
  SERVICE_AGREEMENTS_MIN_END_TIME_DESC = 'SERVICE_AGREEMENTS_MIN_END_TIME_DESC',
  SERVICE_AGREEMENTS_MIN_ID_ASC = 'SERVICE_AGREEMENTS_MIN_ID_ASC',
  SERVICE_AGREEMENTS_MIN_ID_DESC = 'SERVICE_AGREEMENTS_MIN_ID_DESC',
  SERVICE_AGREEMENTS_MIN_INDEXER_ADDRESS_ASC = 'SERVICE_AGREEMENTS_MIN_INDEXER_ADDRESS_ASC',
  SERVICE_AGREEMENTS_MIN_INDEXER_ADDRESS_DESC = 'SERVICE_AGREEMENTS_MIN_INDEXER_ADDRESS_DESC',
  SERVICE_AGREEMENTS_MIN_LAST_EVENT_ASC = 'SERVICE_AGREEMENTS_MIN_LAST_EVENT_ASC',
  SERVICE_AGREEMENTS_MIN_LAST_EVENT_DESC = 'SERVICE_AGREEMENTS_MIN_LAST_EVENT_DESC',
  SERVICE_AGREEMENTS_MIN_LOCKED_AMOUNT_ASC = 'SERVICE_AGREEMENTS_MIN_LOCKED_AMOUNT_ASC',
  SERVICE_AGREEMENTS_MIN_LOCKED_AMOUNT_DESC = 'SERVICE_AGREEMENTS_MIN_LOCKED_AMOUNT_DESC',
  SERVICE_AGREEMENTS_MIN_PERIOD_ASC = 'SERVICE_AGREEMENTS_MIN_PERIOD_ASC',
  SERVICE_AGREEMENTS_MIN_PERIOD_DESC = 'SERVICE_AGREEMENTS_MIN_PERIOD_DESC',
  SERVICE_AGREEMENTS_MIN_PLAN_TEMPLATE_ID_ASC = 'SERVICE_AGREEMENTS_MIN_PLAN_TEMPLATE_ID_ASC',
  SERVICE_AGREEMENTS_MIN_PLAN_TEMPLATE_ID_DESC = 'SERVICE_AGREEMENTS_MIN_PLAN_TEMPLATE_ID_DESC',
  SERVICE_AGREEMENTS_MIN_START_TIME_ASC = 'SERVICE_AGREEMENTS_MIN_START_TIME_ASC',
  SERVICE_AGREEMENTS_MIN_START_TIME_DESC = 'SERVICE_AGREEMENTS_MIN_START_TIME_DESC',
  SERVICE_AGREEMENTS_STDDEV_POPULATION_BLOCK_RANGE_ASC = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  SERVICE_AGREEMENTS_STDDEV_POPULATION_BLOCK_RANGE_DESC = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  SERVICE_AGREEMENTS_STDDEV_POPULATION_CONSUMER_ADDRESS_ASC = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_CONSUMER_ADDRESS_ASC',
  SERVICE_AGREEMENTS_STDDEV_POPULATION_CONSUMER_ADDRESS_DESC = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_CONSUMER_ADDRESS_DESC',
  SERVICE_AGREEMENTS_STDDEV_POPULATION_CREATED_BLOCK_ASC = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_CREATED_BLOCK_ASC',
  SERVICE_AGREEMENTS_STDDEV_POPULATION_CREATED_BLOCK_DESC = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_CREATED_BLOCK_DESC',
  SERVICE_AGREEMENTS_STDDEV_POPULATION_DEPLOYMENT_ID_ASC = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_DEPLOYMENT_ID_ASC',
  SERVICE_AGREEMENTS_STDDEV_POPULATION_DEPLOYMENT_ID_DESC = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_DEPLOYMENT_ID_DESC',
  SERVICE_AGREEMENTS_STDDEV_POPULATION_END_TIME_ASC = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_END_TIME_ASC',
  SERVICE_AGREEMENTS_STDDEV_POPULATION_END_TIME_DESC = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_END_TIME_DESC',
  SERVICE_AGREEMENTS_STDDEV_POPULATION_ID_ASC = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_ID_ASC',
  SERVICE_AGREEMENTS_STDDEV_POPULATION_ID_DESC = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_ID_DESC',
  SERVICE_AGREEMENTS_STDDEV_POPULATION_INDEXER_ADDRESS_ASC = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_INDEXER_ADDRESS_ASC',
  SERVICE_AGREEMENTS_STDDEV_POPULATION_INDEXER_ADDRESS_DESC = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_INDEXER_ADDRESS_DESC',
  SERVICE_AGREEMENTS_STDDEV_POPULATION_LAST_EVENT_ASC = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_LAST_EVENT_ASC',
  SERVICE_AGREEMENTS_STDDEV_POPULATION_LAST_EVENT_DESC = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_LAST_EVENT_DESC',
  SERVICE_AGREEMENTS_STDDEV_POPULATION_LOCKED_AMOUNT_ASC = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_LOCKED_AMOUNT_ASC',
  SERVICE_AGREEMENTS_STDDEV_POPULATION_LOCKED_AMOUNT_DESC = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_LOCKED_AMOUNT_DESC',
  SERVICE_AGREEMENTS_STDDEV_POPULATION_PERIOD_ASC = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_PERIOD_ASC',
  SERVICE_AGREEMENTS_STDDEV_POPULATION_PERIOD_DESC = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_PERIOD_DESC',
  SERVICE_AGREEMENTS_STDDEV_POPULATION_PLAN_TEMPLATE_ID_ASC = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_PLAN_TEMPLATE_ID_ASC',
  SERVICE_AGREEMENTS_STDDEV_POPULATION_PLAN_TEMPLATE_ID_DESC = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_PLAN_TEMPLATE_ID_DESC',
  SERVICE_AGREEMENTS_STDDEV_POPULATION_START_TIME_ASC = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_START_TIME_ASC',
  SERVICE_AGREEMENTS_STDDEV_POPULATION_START_TIME_DESC = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_START_TIME_DESC',
  SERVICE_AGREEMENTS_STDDEV_SAMPLE_BLOCK_RANGE_ASC = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  SERVICE_AGREEMENTS_STDDEV_SAMPLE_BLOCK_RANGE_DESC = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  SERVICE_AGREEMENTS_STDDEV_SAMPLE_CONSUMER_ADDRESS_ASC = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_CONSUMER_ADDRESS_ASC',
  SERVICE_AGREEMENTS_STDDEV_SAMPLE_CONSUMER_ADDRESS_DESC = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_CONSUMER_ADDRESS_DESC',
  SERVICE_AGREEMENTS_STDDEV_SAMPLE_CREATED_BLOCK_ASC = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_CREATED_BLOCK_ASC',
  SERVICE_AGREEMENTS_STDDEV_SAMPLE_CREATED_BLOCK_DESC = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_CREATED_BLOCK_DESC',
  SERVICE_AGREEMENTS_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC',
  SERVICE_AGREEMENTS_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC',
  SERVICE_AGREEMENTS_STDDEV_SAMPLE_END_TIME_ASC = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_END_TIME_ASC',
  SERVICE_AGREEMENTS_STDDEV_SAMPLE_END_TIME_DESC = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_END_TIME_DESC',
  SERVICE_AGREEMENTS_STDDEV_SAMPLE_ID_ASC = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_ID_ASC',
  SERVICE_AGREEMENTS_STDDEV_SAMPLE_ID_DESC = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_ID_DESC',
  SERVICE_AGREEMENTS_STDDEV_SAMPLE_INDEXER_ADDRESS_ASC = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_INDEXER_ADDRESS_ASC',
  SERVICE_AGREEMENTS_STDDEV_SAMPLE_INDEXER_ADDRESS_DESC = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_INDEXER_ADDRESS_DESC',
  SERVICE_AGREEMENTS_STDDEV_SAMPLE_LAST_EVENT_ASC = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_LAST_EVENT_ASC',
  SERVICE_AGREEMENTS_STDDEV_SAMPLE_LAST_EVENT_DESC = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_LAST_EVENT_DESC',
  SERVICE_AGREEMENTS_STDDEV_SAMPLE_LOCKED_AMOUNT_ASC = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_LOCKED_AMOUNT_ASC',
  SERVICE_AGREEMENTS_STDDEV_SAMPLE_LOCKED_AMOUNT_DESC = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_LOCKED_AMOUNT_DESC',
  SERVICE_AGREEMENTS_STDDEV_SAMPLE_PERIOD_ASC = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_PERIOD_ASC',
  SERVICE_AGREEMENTS_STDDEV_SAMPLE_PERIOD_DESC = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_PERIOD_DESC',
  SERVICE_AGREEMENTS_STDDEV_SAMPLE_PLAN_TEMPLATE_ID_ASC = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_PLAN_TEMPLATE_ID_ASC',
  SERVICE_AGREEMENTS_STDDEV_SAMPLE_PLAN_TEMPLATE_ID_DESC = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_PLAN_TEMPLATE_ID_DESC',
  SERVICE_AGREEMENTS_STDDEV_SAMPLE_START_TIME_ASC = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_START_TIME_ASC',
  SERVICE_AGREEMENTS_STDDEV_SAMPLE_START_TIME_DESC = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_START_TIME_DESC',
  SERVICE_AGREEMENTS_SUM_BLOCK_RANGE_ASC = 'SERVICE_AGREEMENTS_SUM_BLOCK_RANGE_ASC',
  SERVICE_AGREEMENTS_SUM_BLOCK_RANGE_DESC = 'SERVICE_AGREEMENTS_SUM_BLOCK_RANGE_DESC',
  SERVICE_AGREEMENTS_SUM_CONSUMER_ADDRESS_ASC = 'SERVICE_AGREEMENTS_SUM_CONSUMER_ADDRESS_ASC',
  SERVICE_AGREEMENTS_SUM_CONSUMER_ADDRESS_DESC = 'SERVICE_AGREEMENTS_SUM_CONSUMER_ADDRESS_DESC',
  SERVICE_AGREEMENTS_SUM_CREATED_BLOCK_ASC = 'SERVICE_AGREEMENTS_SUM_CREATED_BLOCK_ASC',
  SERVICE_AGREEMENTS_SUM_CREATED_BLOCK_DESC = 'SERVICE_AGREEMENTS_SUM_CREATED_BLOCK_DESC',
  SERVICE_AGREEMENTS_SUM_DEPLOYMENT_ID_ASC = 'SERVICE_AGREEMENTS_SUM_DEPLOYMENT_ID_ASC',
  SERVICE_AGREEMENTS_SUM_DEPLOYMENT_ID_DESC = 'SERVICE_AGREEMENTS_SUM_DEPLOYMENT_ID_DESC',
  SERVICE_AGREEMENTS_SUM_END_TIME_ASC = 'SERVICE_AGREEMENTS_SUM_END_TIME_ASC',
  SERVICE_AGREEMENTS_SUM_END_TIME_DESC = 'SERVICE_AGREEMENTS_SUM_END_TIME_DESC',
  SERVICE_AGREEMENTS_SUM_ID_ASC = 'SERVICE_AGREEMENTS_SUM_ID_ASC',
  SERVICE_AGREEMENTS_SUM_ID_DESC = 'SERVICE_AGREEMENTS_SUM_ID_DESC',
  SERVICE_AGREEMENTS_SUM_INDEXER_ADDRESS_ASC = 'SERVICE_AGREEMENTS_SUM_INDEXER_ADDRESS_ASC',
  SERVICE_AGREEMENTS_SUM_INDEXER_ADDRESS_DESC = 'SERVICE_AGREEMENTS_SUM_INDEXER_ADDRESS_DESC',
  SERVICE_AGREEMENTS_SUM_LAST_EVENT_ASC = 'SERVICE_AGREEMENTS_SUM_LAST_EVENT_ASC',
  SERVICE_AGREEMENTS_SUM_LAST_EVENT_DESC = 'SERVICE_AGREEMENTS_SUM_LAST_EVENT_DESC',
  SERVICE_AGREEMENTS_SUM_LOCKED_AMOUNT_ASC = 'SERVICE_AGREEMENTS_SUM_LOCKED_AMOUNT_ASC',
  SERVICE_AGREEMENTS_SUM_LOCKED_AMOUNT_DESC = 'SERVICE_AGREEMENTS_SUM_LOCKED_AMOUNT_DESC',
  SERVICE_AGREEMENTS_SUM_PERIOD_ASC = 'SERVICE_AGREEMENTS_SUM_PERIOD_ASC',
  SERVICE_AGREEMENTS_SUM_PERIOD_DESC = 'SERVICE_AGREEMENTS_SUM_PERIOD_DESC',
  SERVICE_AGREEMENTS_SUM_PLAN_TEMPLATE_ID_ASC = 'SERVICE_AGREEMENTS_SUM_PLAN_TEMPLATE_ID_ASC',
  SERVICE_AGREEMENTS_SUM_PLAN_TEMPLATE_ID_DESC = 'SERVICE_AGREEMENTS_SUM_PLAN_TEMPLATE_ID_DESC',
  SERVICE_AGREEMENTS_SUM_START_TIME_ASC = 'SERVICE_AGREEMENTS_SUM_START_TIME_ASC',
  SERVICE_AGREEMENTS_SUM_START_TIME_DESC = 'SERVICE_AGREEMENTS_SUM_START_TIME_DESC',
  SERVICE_AGREEMENTS_VARIANCE_POPULATION_BLOCK_RANGE_ASC = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  SERVICE_AGREEMENTS_VARIANCE_POPULATION_BLOCK_RANGE_DESC = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  SERVICE_AGREEMENTS_VARIANCE_POPULATION_CONSUMER_ADDRESS_ASC = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_CONSUMER_ADDRESS_ASC',
  SERVICE_AGREEMENTS_VARIANCE_POPULATION_CONSUMER_ADDRESS_DESC = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_CONSUMER_ADDRESS_DESC',
  SERVICE_AGREEMENTS_VARIANCE_POPULATION_CREATED_BLOCK_ASC = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_CREATED_BLOCK_ASC',
  SERVICE_AGREEMENTS_VARIANCE_POPULATION_CREATED_BLOCK_DESC = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_CREATED_BLOCK_DESC',
  SERVICE_AGREEMENTS_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC',
  SERVICE_AGREEMENTS_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC',
  SERVICE_AGREEMENTS_VARIANCE_POPULATION_END_TIME_ASC = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_END_TIME_ASC',
  SERVICE_AGREEMENTS_VARIANCE_POPULATION_END_TIME_DESC = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_END_TIME_DESC',
  SERVICE_AGREEMENTS_VARIANCE_POPULATION_ID_ASC = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_ID_ASC',
  SERVICE_AGREEMENTS_VARIANCE_POPULATION_ID_DESC = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_ID_DESC',
  SERVICE_AGREEMENTS_VARIANCE_POPULATION_INDEXER_ADDRESS_ASC = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_INDEXER_ADDRESS_ASC',
  SERVICE_AGREEMENTS_VARIANCE_POPULATION_INDEXER_ADDRESS_DESC = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_INDEXER_ADDRESS_DESC',
  SERVICE_AGREEMENTS_VARIANCE_POPULATION_LAST_EVENT_ASC = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_LAST_EVENT_ASC',
  SERVICE_AGREEMENTS_VARIANCE_POPULATION_LAST_EVENT_DESC = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_LAST_EVENT_DESC',
  SERVICE_AGREEMENTS_VARIANCE_POPULATION_LOCKED_AMOUNT_ASC = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_LOCKED_AMOUNT_ASC',
  SERVICE_AGREEMENTS_VARIANCE_POPULATION_LOCKED_AMOUNT_DESC = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_LOCKED_AMOUNT_DESC',
  SERVICE_AGREEMENTS_VARIANCE_POPULATION_PERIOD_ASC = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_PERIOD_ASC',
  SERVICE_AGREEMENTS_VARIANCE_POPULATION_PERIOD_DESC = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_PERIOD_DESC',
  SERVICE_AGREEMENTS_VARIANCE_POPULATION_PLAN_TEMPLATE_ID_ASC = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_PLAN_TEMPLATE_ID_ASC',
  SERVICE_AGREEMENTS_VARIANCE_POPULATION_PLAN_TEMPLATE_ID_DESC = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_PLAN_TEMPLATE_ID_DESC',
  SERVICE_AGREEMENTS_VARIANCE_POPULATION_START_TIME_ASC = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_START_TIME_ASC',
  SERVICE_AGREEMENTS_VARIANCE_POPULATION_START_TIME_DESC = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_START_TIME_DESC',
  SERVICE_AGREEMENTS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  SERVICE_AGREEMENTS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  SERVICE_AGREEMENTS_VARIANCE_SAMPLE_CONSUMER_ADDRESS_ASC = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_CONSUMER_ADDRESS_ASC',
  SERVICE_AGREEMENTS_VARIANCE_SAMPLE_CONSUMER_ADDRESS_DESC = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_CONSUMER_ADDRESS_DESC',
  SERVICE_AGREEMENTS_VARIANCE_SAMPLE_CREATED_BLOCK_ASC = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_CREATED_BLOCK_ASC',
  SERVICE_AGREEMENTS_VARIANCE_SAMPLE_CREATED_BLOCK_DESC = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_CREATED_BLOCK_DESC',
  SERVICE_AGREEMENTS_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC',
  SERVICE_AGREEMENTS_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC',
  SERVICE_AGREEMENTS_VARIANCE_SAMPLE_END_TIME_ASC = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_END_TIME_ASC',
  SERVICE_AGREEMENTS_VARIANCE_SAMPLE_END_TIME_DESC = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_END_TIME_DESC',
  SERVICE_AGREEMENTS_VARIANCE_SAMPLE_ID_ASC = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_ID_ASC',
  SERVICE_AGREEMENTS_VARIANCE_SAMPLE_ID_DESC = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_ID_DESC',
  SERVICE_AGREEMENTS_VARIANCE_SAMPLE_INDEXER_ADDRESS_ASC = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_INDEXER_ADDRESS_ASC',
  SERVICE_AGREEMENTS_VARIANCE_SAMPLE_INDEXER_ADDRESS_DESC = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_INDEXER_ADDRESS_DESC',
  SERVICE_AGREEMENTS_VARIANCE_SAMPLE_LAST_EVENT_ASC = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_LAST_EVENT_ASC',
  SERVICE_AGREEMENTS_VARIANCE_SAMPLE_LAST_EVENT_DESC = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_LAST_EVENT_DESC',
  SERVICE_AGREEMENTS_VARIANCE_SAMPLE_LOCKED_AMOUNT_ASC = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_LOCKED_AMOUNT_ASC',
  SERVICE_AGREEMENTS_VARIANCE_SAMPLE_LOCKED_AMOUNT_DESC = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_LOCKED_AMOUNT_DESC',
  SERVICE_AGREEMENTS_VARIANCE_SAMPLE_PERIOD_ASC = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_PERIOD_ASC',
  SERVICE_AGREEMENTS_VARIANCE_SAMPLE_PERIOD_DESC = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_PERIOD_DESC',
  SERVICE_AGREEMENTS_VARIANCE_SAMPLE_PLAN_TEMPLATE_ID_ASC = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_PLAN_TEMPLATE_ID_ASC',
  SERVICE_AGREEMENTS_VARIANCE_SAMPLE_PLAN_TEMPLATE_ID_DESC = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_PLAN_TEMPLATE_ID_DESC',
  SERVICE_AGREEMENTS_VARIANCE_SAMPLE_START_TIME_ASC = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_START_TIME_ASC',
  SERVICE_AGREEMENTS_VARIANCE_SAMPLE_START_TIME_DESC = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_START_TIME_DESC',
}

export type PlanVariancePopulationAggregateFilter = {
  readonly createdBlock: InputMaybe<BigFloatFilter>;
  readonly price: InputMaybe<BigFloatFilter>;
};

export type PlanVariancePopulationAggregates = {
  readonly __typename: 'PlanVariancePopulationAggregates';
  /** Population variance of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of price across the matching connection */
  readonly price: Maybe<Scalars['BigFloat']['output']>;
};

export type PlanVarianceSampleAggregateFilter = {
  readonly createdBlock: InputMaybe<BigFloatFilter>;
  readonly price: InputMaybe<BigFloatFilter>;
};

export type PlanVarianceSampleAggregates = {
  readonly __typename: 'PlanVarianceSampleAggregates';
  /** Sample variance of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of price across the matching connection */
  readonly price: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `Plan` values. */
export type PlansConnection = {
  readonly __typename: 'PlansConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<PlanAggregates>;
  /** A list of edges which contains the `Plan` and cursor to aid in pagination. */
  readonly edges: ReadonlyArray<PlansEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<PlanAggregates>>;
  /** A list of `Plan` objects. */
  readonly nodes: ReadonlyArray<Maybe<Plan>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Plan` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Plan` values. */
export type PlansConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<PlansGroupBy>;
  having: InputMaybe<PlansHavingInput>;
};

/** A `Plan` edge in the connection. */
export type PlansEdge = {
  readonly __typename: 'PlansEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `Plan` at the end of the edge. */
  readonly node: Maybe<Plan>;
};

/** Grouping methods for `Plan` for usage during aggregation. */
export enum PlansGroupBy {
  ACTIVE = 'ACTIVE',
  CREATED_BLOCK = 'CREATED_BLOCK',
  CREATOR = 'CREATOR',
  DEPLOYMENT_ID = 'DEPLOYMENT_ID',
  ID = 'ID',
  LAST_EVENT = 'LAST_EVENT',
  PLAN_TEMPLATE_ID = 'PLAN_TEMPLATE_ID',
  PRICE = 'PRICE',
}

export type PlansHavingAverageInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly price: InputMaybe<HavingBigfloatFilter>;
};

export type PlansHavingDistinctCountInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly price: InputMaybe<HavingBigfloatFilter>;
};

/** Conditions for `Plan` aggregates. */
export type PlansHavingInput = {
  readonly AND: InputMaybe<ReadonlyArray<PlansHavingInput>>;
  readonly OR: InputMaybe<ReadonlyArray<PlansHavingInput>>;
  readonly average: InputMaybe<PlansHavingAverageInput>;
  readonly distinctCount: InputMaybe<PlansHavingDistinctCountInput>;
  readonly max: InputMaybe<PlansHavingMaxInput>;
  readonly min: InputMaybe<PlansHavingMinInput>;
  readonly stddevPopulation: InputMaybe<PlansHavingStddevPopulationInput>;
  readonly stddevSample: InputMaybe<PlansHavingStddevSampleInput>;
  readonly sum: InputMaybe<PlansHavingSumInput>;
  readonly variancePopulation: InputMaybe<PlansHavingVariancePopulationInput>;
  readonly varianceSample: InputMaybe<PlansHavingVarianceSampleInput>;
};

export type PlansHavingMaxInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly price: InputMaybe<HavingBigfloatFilter>;
};

export type PlansHavingMinInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly price: InputMaybe<HavingBigfloatFilter>;
};

export type PlansHavingStddevPopulationInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly price: InputMaybe<HavingBigfloatFilter>;
};

export type PlansHavingStddevSampleInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly price: InputMaybe<HavingBigfloatFilter>;
};

export type PlansHavingSumInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly price: InputMaybe<HavingBigfloatFilter>;
};

export type PlansHavingVariancePopulationInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly price: InputMaybe<HavingBigfloatFilter>;
};

export type PlansHavingVarianceSampleInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly price: InputMaybe<HavingBigfloatFilter>;
};

/** Methods to use when ordering `Plan`. */
export enum PlansOrderBy {
  ACTIVE_ASC = 'ACTIVE_ASC',
  ACTIVE_DESC = 'ACTIVE_DESC',
  CREATED_BLOCK_ASC = 'CREATED_BLOCK_ASC',
  CREATED_BLOCK_DESC = 'CREATED_BLOCK_DESC',
  CREATOR_ASC = 'CREATOR_ASC',
  CREATOR_DESC = 'CREATOR_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__ID_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__ID_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__ID_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__ID_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_DESC',
  DEPLOYMENT_ID_ASC = 'DEPLOYMENT_ID_ASC',
  DEPLOYMENT_ID_DESC = 'DEPLOYMENT_ID_DESC',
  ID_ASC = 'ID_ASC',
  ID_DESC = 'ID_DESC',
  LAST_EVENT_ASC = 'LAST_EVENT_ASC',
  LAST_EVENT_DESC = 'LAST_EVENT_DESC',
  NATURAL = 'NATURAL',
  PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__ACTIVE_ASC = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__ACTIVE_ASC',
  PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__ACTIVE_DESC = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__ACTIVE_DESC',
  PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__CREATED_BLOCK_ASC = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__CREATED_BLOCK_ASC',
  PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__CREATED_BLOCK_DESC = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__CREATED_BLOCK_DESC',
  PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__DAILY_REQ_CAP_ASC = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__DAILY_REQ_CAP_ASC',
  PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__DAILY_REQ_CAP_DESC = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__DAILY_REQ_CAP_DESC',
  PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__ID_ASC = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__ID_ASC',
  PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__ID_DESC = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__ID_DESC',
  PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__LAST_EVENT_ASC = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__LAST_EVENT_ASC',
  PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__LAST_EVENT_DESC = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__LAST_EVENT_DESC',
  PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__METADATA_ASC = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__METADATA_ASC',
  PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__METADATA_DESC = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__METADATA_DESC',
  PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__PERIOD_ASC = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__PERIOD_ASC',
  PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__PERIOD_DESC = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__PERIOD_DESC',
  PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__PRICE_TOKEN_ASC = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__PRICE_TOKEN_ASC',
  PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__PRICE_TOKEN_DESC = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__PRICE_TOKEN_DESC',
  PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__RATE_LIMIT_ASC = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__RATE_LIMIT_ASC',
  PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__RATE_LIMIT_DESC = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__RATE_LIMIT_DESC',
  PLAN_TEMPLATE_ID_ASC = 'PLAN_TEMPLATE_ID_ASC',
  PLAN_TEMPLATE_ID_DESC = 'PLAN_TEMPLATE_ID_DESC',
  PRICE_ASC = 'PRICE_ASC',
  PRICE_DESC = 'PRICE_DESC',
  PRIMARY_KEY_ASC = 'PRIMARY_KEY_ASC',
  PRIMARY_KEY_DESC = 'PRIMARY_KEY_DESC',
}

export type PriceOracle = Node & {
  readonly __typename: 'PriceOracle';
  readonly afterPrice: Scalars['BigFloat']['output'];
  readonly beforePrice: Scalars['BigFloat']['output'];
  readonly createdBlock: Maybe<Scalars['Int']['output']>;
  readonly fromToken: Scalars['String']['output'];
  readonly id: Scalars['String']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  readonly nodeId: Scalars['ID']['output'];
  readonly toToken: Scalars['String']['output'];
};

export type PriceOracleAggregates = {
  readonly __typename: 'PriceOracleAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly average: Maybe<PriceOracleAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly distinctCount: Maybe<PriceOracleDistinctCountAggregates>;
  readonly keys: Maybe<ReadonlyArray<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly max: Maybe<PriceOracleMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly min: Maybe<PriceOracleMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevPopulation: Maybe<PriceOracleStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevSample: Maybe<PriceOracleStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly sum: Maybe<PriceOracleSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly variancePopulation: Maybe<PriceOracleVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly varianceSample: Maybe<PriceOracleVarianceSampleAggregates>;
};

export type PriceOracleAverageAggregates = {
  readonly __typename: 'PriceOracleAverageAggregates';
  /** Mean average of afterPrice across the matching connection */
  readonly afterPrice: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of beforePrice across the matching connection */
  readonly beforePrice: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
};

export type PriceOracleDistinctCountAggregates = {
  readonly __typename: 'PriceOracleDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  readonly _blockRange: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  readonly _id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of afterPrice across the matching connection */
  readonly afterPrice: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of beforePrice across the matching connection */
  readonly beforePrice: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of fromToken across the matching connection */
  readonly fromToken: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  readonly id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of toToken across the matching connection */
  readonly toToken: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `PriceOracle` object types. All fields are combined with a logical ‘and.’ */
export type PriceOracleFilter = {
  /** Filter by the object’s `afterPrice` field. */
  readonly afterPrice: InputMaybe<BigFloatFilter>;
  /** Checks for all expressions in this list. */
  readonly and: InputMaybe<ReadonlyArray<PriceOracleFilter>>;
  /** Filter by the object’s `beforePrice` field. */
  readonly beforePrice: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `createdBlock` field. */
  readonly createdBlock: InputMaybe<IntFilter>;
  /** Filter by the object’s `fromToken` field. */
  readonly fromToken: InputMaybe<StringFilter>;
  /** Filter by the object’s `id` field. */
  readonly id: InputMaybe<StringFilter>;
  /** Negates the expression. */
  readonly not: InputMaybe<PriceOracleFilter>;
  /** Checks for any expressions in this list. */
  readonly or: InputMaybe<ReadonlyArray<PriceOracleFilter>>;
  /** Filter by the object’s `toToken` field. */
  readonly toToken: InputMaybe<StringFilter>;
};

export type PriceOracleMaxAggregates = {
  readonly __typename: 'PriceOracleMaxAggregates';
  /** Maximum of afterPrice across the matching connection */
  readonly afterPrice: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of beforePrice across the matching connection */
  readonly beforePrice: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['Int']['output']>;
};

export type PriceOracleMinAggregates = {
  readonly __typename: 'PriceOracleMinAggregates';
  /** Minimum of afterPrice across the matching connection */
  readonly afterPrice: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of beforePrice across the matching connection */
  readonly beforePrice: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['Int']['output']>;
};

export type PriceOracleStddevPopulationAggregates = {
  readonly __typename: 'PriceOracleStddevPopulationAggregates';
  /** Population standard deviation of afterPrice across the matching connection */
  readonly afterPrice: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of beforePrice across the matching connection */
  readonly beforePrice: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
};

export type PriceOracleStddevSampleAggregates = {
  readonly __typename: 'PriceOracleStddevSampleAggregates';
  /** Sample standard deviation of afterPrice across the matching connection */
  readonly afterPrice: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of beforePrice across the matching connection */
  readonly beforePrice: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
};

export type PriceOracleSumAggregates = {
  readonly __typename: 'PriceOracleSumAggregates';
  /** Sum of afterPrice across the matching connection */
  readonly afterPrice: Scalars['BigFloat']['output'];
  /** Sum of beforePrice across the matching connection */
  readonly beforePrice: Scalars['BigFloat']['output'];
  /** Sum of createdBlock across the matching connection */
  readonly createdBlock: Scalars['BigInt']['output'];
};

export type PriceOracleVariancePopulationAggregates = {
  readonly __typename: 'PriceOracleVariancePopulationAggregates';
  /** Population variance of afterPrice across the matching connection */
  readonly afterPrice: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of beforePrice across the matching connection */
  readonly beforePrice: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
};

export type PriceOracleVarianceSampleAggregates = {
  readonly __typename: 'PriceOracleVarianceSampleAggregates';
  /** Sample variance of afterPrice across the matching connection */
  readonly afterPrice: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of beforePrice across the matching connection */
  readonly beforePrice: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `PriceOracle` values. */
export type PriceOraclesConnection = {
  readonly __typename: 'PriceOraclesConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<PriceOracleAggregates>;
  /** A list of edges which contains the `PriceOracle` and cursor to aid in pagination. */
  readonly edges: ReadonlyArray<PriceOraclesEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<PriceOracleAggregates>>;
  /** A list of `PriceOracle` objects. */
  readonly nodes: ReadonlyArray<Maybe<PriceOracle>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `PriceOracle` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `PriceOracle` values. */
export type PriceOraclesConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<PriceOraclesGroupBy>;
  having: InputMaybe<PriceOraclesHavingInput>;
};

/** A `PriceOracle` edge in the connection. */
export type PriceOraclesEdge = {
  readonly __typename: 'PriceOraclesEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `PriceOracle` at the end of the edge. */
  readonly node: Maybe<PriceOracle>;
};

/** Grouping methods for `PriceOracle` for usage during aggregation. */
export enum PriceOraclesGroupBy {
  AFTER_PRICE = 'AFTER_PRICE',
  BEFORE_PRICE = 'BEFORE_PRICE',
  CREATED_BLOCK = 'CREATED_BLOCK',
  FROM_TOKEN = 'FROM_TOKEN',
  ID = 'ID',
  TO_TOKEN = 'TO_TOKEN',
}

export type PriceOraclesHavingAverageInput = {
  readonly afterPrice: InputMaybe<HavingBigfloatFilter>;
  readonly beforePrice: InputMaybe<HavingBigfloatFilter>;
  readonly createdBlock: InputMaybe<HavingIntFilter>;
};

export type PriceOraclesHavingDistinctCountInput = {
  readonly afterPrice: InputMaybe<HavingBigfloatFilter>;
  readonly beforePrice: InputMaybe<HavingBigfloatFilter>;
  readonly createdBlock: InputMaybe<HavingIntFilter>;
};

/** Conditions for `PriceOracle` aggregates. */
export type PriceOraclesHavingInput = {
  readonly AND: InputMaybe<ReadonlyArray<PriceOraclesHavingInput>>;
  readonly OR: InputMaybe<ReadonlyArray<PriceOraclesHavingInput>>;
  readonly average: InputMaybe<PriceOraclesHavingAverageInput>;
  readonly distinctCount: InputMaybe<PriceOraclesHavingDistinctCountInput>;
  readonly max: InputMaybe<PriceOraclesHavingMaxInput>;
  readonly min: InputMaybe<PriceOraclesHavingMinInput>;
  readonly stddevPopulation: InputMaybe<PriceOraclesHavingStddevPopulationInput>;
  readonly stddevSample: InputMaybe<PriceOraclesHavingStddevSampleInput>;
  readonly sum: InputMaybe<PriceOraclesHavingSumInput>;
  readonly variancePopulation: InputMaybe<PriceOraclesHavingVariancePopulationInput>;
  readonly varianceSample: InputMaybe<PriceOraclesHavingVarianceSampleInput>;
};

export type PriceOraclesHavingMaxInput = {
  readonly afterPrice: InputMaybe<HavingBigfloatFilter>;
  readonly beforePrice: InputMaybe<HavingBigfloatFilter>;
  readonly createdBlock: InputMaybe<HavingIntFilter>;
};

export type PriceOraclesHavingMinInput = {
  readonly afterPrice: InputMaybe<HavingBigfloatFilter>;
  readonly beforePrice: InputMaybe<HavingBigfloatFilter>;
  readonly createdBlock: InputMaybe<HavingIntFilter>;
};

export type PriceOraclesHavingStddevPopulationInput = {
  readonly afterPrice: InputMaybe<HavingBigfloatFilter>;
  readonly beforePrice: InputMaybe<HavingBigfloatFilter>;
  readonly createdBlock: InputMaybe<HavingIntFilter>;
};

export type PriceOraclesHavingStddevSampleInput = {
  readonly afterPrice: InputMaybe<HavingBigfloatFilter>;
  readonly beforePrice: InputMaybe<HavingBigfloatFilter>;
  readonly createdBlock: InputMaybe<HavingIntFilter>;
};

export type PriceOraclesHavingSumInput = {
  readonly afterPrice: InputMaybe<HavingBigfloatFilter>;
  readonly beforePrice: InputMaybe<HavingBigfloatFilter>;
  readonly createdBlock: InputMaybe<HavingIntFilter>;
};

export type PriceOraclesHavingVariancePopulationInput = {
  readonly afterPrice: InputMaybe<HavingBigfloatFilter>;
  readonly beforePrice: InputMaybe<HavingBigfloatFilter>;
  readonly createdBlock: InputMaybe<HavingIntFilter>;
};

export type PriceOraclesHavingVarianceSampleInput = {
  readonly afterPrice: InputMaybe<HavingBigfloatFilter>;
  readonly beforePrice: InputMaybe<HavingBigfloatFilter>;
  readonly createdBlock: InputMaybe<HavingIntFilter>;
};

/** Methods to use when ordering `PriceOracle`. */
export enum PriceOraclesOrderBy {
  AFTER_PRICE_ASC = 'AFTER_PRICE_ASC',
  AFTER_PRICE_DESC = 'AFTER_PRICE_DESC',
  BEFORE_PRICE_ASC = 'BEFORE_PRICE_ASC',
  BEFORE_PRICE_DESC = 'BEFORE_PRICE_DESC',
  CREATED_BLOCK_ASC = 'CREATED_BLOCK_ASC',
  CREATED_BLOCK_DESC = 'CREATED_BLOCK_DESC',
  FROM_TOKEN_ASC = 'FROM_TOKEN_ASC',
  FROM_TOKEN_DESC = 'FROM_TOKEN_DESC',
  ID_ASC = 'ID_ASC',
  ID_DESC = 'ID_DESC',
  NATURAL = 'NATURAL',
  PRIMARY_KEY_ASC = 'PRIMARY_KEY_ASC',
  PRIMARY_KEY_DESC = 'PRIMARY_KEY_DESC',
  TO_TOKEN_ASC = 'TO_TOKEN_ASC',
  TO_TOKEN_DESC = 'TO_TOKEN_DESC',
}

export type Project = Node & {
  readonly __typename: 'Project';
  readonly boostAllocationRatio: Scalars['BigFloat']['output'];
  /** Reads and enables pagination through a set of `ConsumerQueryRewardSummary`. */
  readonly consumerQueryRewardSummaries: ConsumerQueryRewardSummariesConnection;
  /** Reads and enables pagination through a set of `ConsumerQueryReward`. */
  readonly consumerQueryRewards: ConsumerQueryRewardsConnection;
  readonly createdBlock: Maybe<Scalars['Int']['output']>;
  readonly createdTimestamp: Scalars['Datetime']['output'];
  /** Reads and enables pagination through a set of `DeploymentBoosterSummary`. */
  readonly deploymentBoosterSummaries: DeploymentBoosterSummariesConnection;
  /** Reads and enables pagination through a set of `DeploymentBooster`. */
  readonly deploymentBoosters: DeploymentBoostersConnection;
  readonly deploymentId: Scalars['String']['output'];
  readonly deploymentMetadata: Scalars['String']['output'];
  /** Reads and enables pagination through a set of `Deployment`. */
  readonly deployments: DeploymentsConnection;
  /** Reads and enables pagination through a set of `Deployment`. */
  readonly deploymentsByConsumerQueryRewardProjectIdAndDeploymentId: ProjectDeploymentsByConsumerQueryRewardProjectIdAndDeploymentIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Deployment`. */
  readonly deploymentsByConsumerQueryRewardSummaryProjectIdAndDeploymentId: ProjectDeploymentsByConsumerQueryRewardSummaryProjectIdAndDeploymentIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Deployment`. */
  readonly deploymentsByDeploymentBoosterProjectIdAndDeploymentId: ProjectDeploymentsByDeploymentBoosterProjectIdAndDeploymentIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Deployment`. */
  readonly deploymentsByDeploymentBoosterSummaryProjectIdAndDeploymentId: ProjectDeploymentsByDeploymentBoosterSummaryProjectIdAndDeploymentIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Deployment`. */
  readonly deploymentsByIndexerAllocationProjectIdAndDeploymentId: ProjectDeploymentsByIndexerAllocationProjectIdAndDeploymentIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Deployment`. */
  readonly deploymentsByIndexerAllocationRewardProjectIdAndDeploymentId: ProjectDeploymentsByIndexerAllocationRewardProjectIdAndDeploymentIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Deployment`. */
  readonly deploymentsByIndexerAllocationRewardSummaryProjectIdAndDeploymentId: ProjectDeploymentsByIndexerAllocationRewardSummaryProjectIdAndDeploymentIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Deployment`. */
  readonly deploymentsByIndexerAllocationSummaryProjectIdAndDeploymentId: ProjectDeploymentsByIndexerAllocationSummaryProjectIdAndDeploymentIdManyToManyConnection;
  readonly id: Scalars['String']['output'];
  /** Reads and enables pagination through a set of `IndexerAllocationRewardSummary`. */
  readonly indexerAllocationRewardSummaries: IndexerAllocationRewardSummariesConnection;
  /** Reads and enables pagination through a set of `IndexerAllocationReward`. */
  readonly indexerAllocationRewards: IndexerAllocationRewardsConnection;
  /** Reads and enables pagination through a set of `IndexerAllocationSummary`. */
  readonly indexerAllocationSummaries: IndexerAllocationSummariesConnection;
  /** Reads and enables pagination through a set of `IndexerAllocation`. */
  readonly indexerAllocations: IndexerAllocationsConnection;
  /** Reads and enables pagination through a set of `Indexer`. */
  readonly indexersByIndexerAllocationProjectIdAndIndexerId: ProjectIndexersByIndexerAllocationProjectIdAndIndexerIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Indexer`. */
  readonly indexersByIndexerAllocationRewardProjectIdAndIndexerId: ProjectIndexersByIndexerAllocationRewardProjectIdAndIndexerIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Indexer`. */
  readonly indexersByIndexerAllocationRewardSummaryProjectIdAndIndexerId: ProjectIndexersByIndexerAllocationRewardSummaryProjectIdAndIndexerIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Indexer`. */
  readonly indexersByIndexerAllocationSummaryProjectIdAndIndexerId: ProjectIndexersByIndexerAllocationSummaryProjectIdAndIndexerIdManyToManyConnection;
  readonly lastEvent: Maybe<Scalars['String']['output']>;
  readonly metadata: Scalars['String']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  readonly nodeId: Scalars['ID']['output'];
  readonly owner: Scalars['String']['output'];
  readonly totalAllocation: Scalars['BigFloat']['output'];
  readonly totalBoost: Scalars['BigFloat']['output'];
  readonly totalReward: Scalars['BigFloat']['output'];
  readonly type: ProjectType;
  readonly updatedTimestamp: Scalars['Datetime']['output'];
};

export type ProjectConsumerQueryRewardSummariesArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Consumer_Query_Reward_Summaries_Distinct_Enum>>>;
  filter: InputMaybe<ConsumerQueryRewardSummaryFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<ConsumerQueryRewardSummariesOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type ProjectConsumerQueryRewardsArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Consumer_Query_Rewards_Distinct_Enum>>>;
  filter: InputMaybe<ConsumerQueryRewardFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<ConsumerQueryRewardsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type ProjectDeploymentBoosterSummariesArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Deployment_Booster_Summaries_Distinct_Enum>>>;
  filter: InputMaybe<DeploymentBoosterSummaryFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<DeploymentBoosterSummariesOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type ProjectDeploymentBoostersArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Deployment_Boosters_Distinct_Enum>>>;
  filter: InputMaybe<DeploymentBoosterFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<DeploymentBoostersOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type ProjectDeploymentsArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Deployments_Distinct_Enum>>>;
  filter: InputMaybe<DeploymentFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<DeploymentsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type ProjectDeploymentsByConsumerQueryRewardProjectIdAndDeploymentIdArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Deployments_Distinct_Enum>>>;
  filter: InputMaybe<DeploymentFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<DeploymentsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type ProjectDeploymentsByConsumerQueryRewardSummaryProjectIdAndDeploymentIdArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Deployments_Distinct_Enum>>>;
  filter: InputMaybe<DeploymentFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<DeploymentsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type ProjectDeploymentsByDeploymentBoosterProjectIdAndDeploymentIdArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Deployments_Distinct_Enum>>>;
  filter: InputMaybe<DeploymentFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<DeploymentsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type ProjectDeploymentsByDeploymentBoosterSummaryProjectIdAndDeploymentIdArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Deployments_Distinct_Enum>>>;
  filter: InputMaybe<DeploymentFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<DeploymentsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type ProjectDeploymentsByIndexerAllocationProjectIdAndDeploymentIdArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Deployments_Distinct_Enum>>>;
  filter: InputMaybe<DeploymentFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<DeploymentsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type ProjectDeploymentsByIndexerAllocationRewardProjectIdAndDeploymentIdArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Deployments_Distinct_Enum>>>;
  filter: InputMaybe<DeploymentFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<DeploymentsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type ProjectDeploymentsByIndexerAllocationRewardSummaryProjectIdAndDeploymentIdArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Deployments_Distinct_Enum>>>;
  filter: InputMaybe<DeploymentFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<DeploymentsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type ProjectDeploymentsByIndexerAllocationSummaryProjectIdAndDeploymentIdArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Deployments_Distinct_Enum>>>;
  filter: InputMaybe<DeploymentFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<DeploymentsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type ProjectIndexerAllocationRewardSummariesArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Allocation_Reward_Summaries_Distinct_Enum>>>;
  filter: InputMaybe<IndexerAllocationRewardSummaryFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexerAllocationRewardSummariesOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type ProjectIndexerAllocationRewardsArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Allocation_Rewards_Distinct_Enum>>>;
  filter: InputMaybe<IndexerAllocationRewardFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexerAllocationRewardsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type ProjectIndexerAllocationSummariesArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Allocation_Summaries_Distinct_Enum>>>;
  filter: InputMaybe<IndexerAllocationSummaryFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexerAllocationSummariesOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type ProjectIndexerAllocationsArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Allocations_Distinct_Enum>>>;
  filter: InputMaybe<IndexerAllocationFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexerAllocationsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type ProjectIndexersByIndexerAllocationProjectIdAndIndexerIdArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexers_Distinct_Enum>>>;
  filter: InputMaybe<IndexerFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexersOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type ProjectIndexersByIndexerAllocationRewardProjectIdAndIndexerIdArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexers_Distinct_Enum>>>;
  filter: InputMaybe<IndexerFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexersOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type ProjectIndexersByIndexerAllocationRewardSummaryProjectIdAndIndexerIdArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexers_Distinct_Enum>>>;
  filter: InputMaybe<IndexerFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexersOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type ProjectIndexersByIndexerAllocationSummaryProjectIdAndIndexerIdArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexers_Distinct_Enum>>>;
  filter: InputMaybe<IndexerFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexersOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type ProjectAggregates = {
  readonly __typename: 'ProjectAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly average: Maybe<ProjectAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly distinctCount: Maybe<ProjectDistinctCountAggregates>;
  readonly keys: Maybe<ReadonlyArray<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly max: Maybe<ProjectMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly min: Maybe<ProjectMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevPopulation: Maybe<ProjectStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevSample: Maybe<ProjectStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly sum: Maybe<ProjectSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly variancePopulation: Maybe<ProjectVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly varianceSample: Maybe<ProjectVarianceSampleAggregates>;
};

export type ProjectAverageAggregates = {
  readonly __typename: 'ProjectAverageAggregates';
  /** Mean average of boostAllocationRatio across the matching connection */
  readonly boostAllocationRatio: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of totalAllocation across the matching connection */
  readonly totalAllocation: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of totalBoost across the matching connection */
  readonly totalBoost: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of totalReward across the matching connection */
  readonly totalReward: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `Deployment` values, with data from `ConsumerQueryReward`. */
export type ProjectDeploymentsByConsumerQueryRewardProjectIdAndDeploymentIdManyToManyConnection = {
  readonly __typename: 'ProjectDeploymentsByConsumerQueryRewardProjectIdAndDeploymentIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<DeploymentAggregates>;
  /** A list of edges which contains the `Deployment`, info from the `ConsumerQueryReward`, and the cursor to aid in pagination. */
  readonly edges: ReadonlyArray<ProjectDeploymentsByConsumerQueryRewardProjectIdAndDeploymentIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<DeploymentAggregates>>;
  /** A list of `Deployment` objects. */
  readonly nodes: ReadonlyArray<Maybe<Deployment>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Deployment` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Deployment` values, with data from `ConsumerQueryReward`. */
export type ProjectDeploymentsByConsumerQueryRewardProjectIdAndDeploymentIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<DeploymentsGroupBy>;
  having: InputMaybe<DeploymentsHavingInput>;
};

/** A `Deployment` edge in the connection, with data from `ConsumerQueryReward`. */
export type ProjectDeploymentsByConsumerQueryRewardProjectIdAndDeploymentIdManyToManyEdge = {
  readonly __typename: 'ProjectDeploymentsByConsumerQueryRewardProjectIdAndDeploymentIdManyToManyEdge';
  /** Reads and enables pagination through a set of `ConsumerQueryReward`. */
  readonly consumerQueryRewards: ConsumerQueryRewardsConnection;
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `Deployment` at the end of the edge. */
  readonly node: Maybe<Deployment>;
};

/** A `Deployment` edge in the connection, with data from `ConsumerQueryReward`. */
export type ProjectDeploymentsByConsumerQueryRewardProjectIdAndDeploymentIdManyToManyEdgeConsumerQueryRewardsArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Consumer_Query_Rewards_Distinct_Enum>>>;
  filter: InputMaybe<ConsumerQueryRewardFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<ConsumerQueryRewardsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** A connection to a list of `Deployment` values, with data from `ConsumerQueryRewardSummary`. */
export type ProjectDeploymentsByConsumerQueryRewardSummaryProjectIdAndDeploymentIdManyToManyConnection = {
  readonly __typename: 'ProjectDeploymentsByConsumerQueryRewardSummaryProjectIdAndDeploymentIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<DeploymentAggregates>;
  /** A list of edges which contains the `Deployment`, info from the `ConsumerQueryRewardSummary`, and the cursor to aid in pagination. */
  readonly edges: ReadonlyArray<ProjectDeploymentsByConsumerQueryRewardSummaryProjectIdAndDeploymentIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<DeploymentAggregates>>;
  /** A list of `Deployment` objects. */
  readonly nodes: ReadonlyArray<Maybe<Deployment>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Deployment` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Deployment` values, with data from `ConsumerQueryRewardSummary`. */
export type ProjectDeploymentsByConsumerQueryRewardSummaryProjectIdAndDeploymentIdManyToManyConnectionGroupedAggregatesArgs =
  {
    groupBy: ReadonlyArray<DeploymentsGroupBy>;
    having: InputMaybe<DeploymentsHavingInput>;
  };

/** A `Deployment` edge in the connection, with data from `ConsumerQueryRewardSummary`. */
export type ProjectDeploymentsByConsumerQueryRewardSummaryProjectIdAndDeploymentIdManyToManyEdge = {
  readonly __typename: 'ProjectDeploymentsByConsumerQueryRewardSummaryProjectIdAndDeploymentIdManyToManyEdge';
  /** Reads and enables pagination through a set of `ConsumerQueryRewardSummary`. */
  readonly consumerQueryRewardSummaries: ConsumerQueryRewardSummariesConnection;
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `Deployment` at the end of the edge. */
  readonly node: Maybe<Deployment>;
};

/** A `Deployment` edge in the connection, with data from `ConsumerQueryRewardSummary`. */
export type ProjectDeploymentsByConsumerQueryRewardSummaryProjectIdAndDeploymentIdManyToManyEdgeConsumerQueryRewardSummariesArgs =
  {
    after: InputMaybe<Scalars['Cursor']['input']>;
    before: InputMaybe<Scalars['Cursor']['input']>;
    blockHeight?: InputMaybe<Scalars['String']['input']>;
    distinct?: InputMaybe<ReadonlyArray<InputMaybe<Consumer_Query_Reward_Summaries_Distinct_Enum>>>;
    filter: InputMaybe<ConsumerQueryRewardSummaryFilter>;
    first: InputMaybe<Scalars['Int']['input']>;
    last: InputMaybe<Scalars['Int']['input']>;
    offset: InputMaybe<Scalars['Int']['input']>;
    orderBy: InputMaybe<ReadonlyArray<ConsumerQueryRewardSummariesOrderBy>>;
    orderByNull: InputMaybe<NullOrder>;
  };

/** A connection to a list of `Deployment` values, with data from `DeploymentBooster`. */
export type ProjectDeploymentsByDeploymentBoosterProjectIdAndDeploymentIdManyToManyConnection = {
  readonly __typename: 'ProjectDeploymentsByDeploymentBoosterProjectIdAndDeploymentIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<DeploymentAggregates>;
  /** A list of edges which contains the `Deployment`, info from the `DeploymentBooster`, and the cursor to aid in pagination. */
  readonly edges: ReadonlyArray<ProjectDeploymentsByDeploymentBoosterProjectIdAndDeploymentIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<DeploymentAggregates>>;
  /** A list of `Deployment` objects. */
  readonly nodes: ReadonlyArray<Maybe<Deployment>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Deployment` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Deployment` values, with data from `DeploymentBooster`. */
export type ProjectDeploymentsByDeploymentBoosterProjectIdAndDeploymentIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<DeploymentsGroupBy>;
  having: InputMaybe<DeploymentsHavingInput>;
};

/** A `Deployment` edge in the connection, with data from `DeploymentBooster`. */
export type ProjectDeploymentsByDeploymentBoosterProjectIdAndDeploymentIdManyToManyEdge = {
  readonly __typename: 'ProjectDeploymentsByDeploymentBoosterProjectIdAndDeploymentIdManyToManyEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `DeploymentBooster`. */
  readonly deploymentBoosters: DeploymentBoostersConnection;
  /** The `Deployment` at the end of the edge. */
  readonly node: Maybe<Deployment>;
};

/** A `Deployment` edge in the connection, with data from `DeploymentBooster`. */
export type ProjectDeploymentsByDeploymentBoosterProjectIdAndDeploymentIdManyToManyEdgeDeploymentBoostersArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Deployment_Boosters_Distinct_Enum>>>;
  filter: InputMaybe<DeploymentBoosterFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<DeploymentBoostersOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** A connection to a list of `Deployment` values, with data from `DeploymentBoosterSummary`. */
export type ProjectDeploymentsByDeploymentBoosterSummaryProjectIdAndDeploymentIdManyToManyConnection = {
  readonly __typename: 'ProjectDeploymentsByDeploymentBoosterSummaryProjectIdAndDeploymentIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<DeploymentAggregates>;
  /** A list of edges which contains the `Deployment`, info from the `DeploymentBoosterSummary`, and the cursor to aid in pagination. */
  readonly edges: ReadonlyArray<ProjectDeploymentsByDeploymentBoosterSummaryProjectIdAndDeploymentIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<DeploymentAggregates>>;
  /** A list of `Deployment` objects. */
  readonly nodes: ReadonlyArray<Maybe<Deployment>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Deployment` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Deployment` values, with data from `DeploymentBoosterSummary`. */
export type ProjectDeploymentsByDeploymentBoosterSummaryProjectIdAndDeploymentIdManyToManyConnectionGroupedAggregatesArgs =
  {
    groupBy: ReadonlyArray<DeploymentsGroupBy>;
    having: InputMaybe<DeploymentsHavingInput>;
  };

/** A `Deployment` edge in the connection, with data from `DeploymentBoosterSummary`. */
export type ProjectDeploymentsByDeploymentBoosterSummaryProjectIdAndDeploymentIdManyToManyEdge = {
  readonly __typename: 'ProjectDeploymentsByDeploymentBoosterSummaryProjectIdAndDeploymentIdManyToManyEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `DeploymentBoosterSummary`. */
  readonly deploymentBoosterSummaries: DeploymentBoosterSummariesConnection;
  /** The `Deployment` at the end of the edge. */
  readonly node: Maybe<Deployment>;
};

/** A `Deployment` edge in the connection, with data from `DeploymentBoosterSummary`. */
export type ProjectDeploymentsByDeploymentBoosterSummaryProjectIdAndDeploymentIdManyToManyEdgeDeploymentBoosterSummariesArgs =
  {
    after: InputMaybe<Scalars['Cursor']['input']>;
    before: InputMaybe<Scalars['Cursor']['input']>;
    blockHeight?: InputMaybe<Scalars['String']['input']>;
    distinct?: InputMaybe<ReadonlyArray<InputMaybe<Deployment_Booster_Summaries_Distinct_Enum>>>;
    filter: InputMaybe<DeploymentBoosterSummaryFilter>;
    first: InputMaybe<Scalars['Int']['input']>;
    last: InputMaybe<Scalars['Int']['input']>;
    offset: InputMaybe<Scalars['Int']['input']>;
    orderBy: InputMaybe<ReadonlyArray<DeploymentBoosterSummariesOrderBy>>;
    orderByNull: InputMaybe<NullOrder>;
  };

/** A connection to a list of `Deployment` values, with data from `IndexerAllocation`. */
export type ProjectDeploymentsByIndexerAllocationProjectIdAndDeploymentIdManyToManyConnection = {
  readonly __typename: 'ProjectDeploymentsByIndexerAllocationProjectIdAndDeploymentIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<DeploymentAggregates>;
  /** A list of edges which contains the `Deployment`, info from the `IndexerAllocation`, and the cursor to aid in pagination. */
  readonly edges: ReadonlyArray<ProjectDeploymentsByIndexerAllocationProjectIdAndDeploymentIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<DeploymentAggregates>>;
  /** A list of `Deployment` objects. */
  readonly nodes: ReadonlyArray<Maybe<Deployment>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Deployment` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Deployment` values, with data from `IndexerAllocation`. */
export type ProjectDeploymentsByIndexerAllocationProjectIdAndDeploymentIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<DeploymentsGroupBy>;
  having: InputMaybe<DeploymentsHavingInput>;
};

/** A `Deployment` edge in the connection, with data from `IndexerAllocation`. */
export type ProjectDeploymentsByIndexerAllocationProjectIdAndDeploymentIdManyToManyEdge = {
  readonly __typename: 'ProjectDeploymentsByIndexerAllocationProjectIdAndDeploymentIdManyToManyEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `IndexerAllocation`. */
  readonly indexerAllocations: IndexerAllocationsConnection;
  /** The `Deployment` at the end of the edge. */
  readonly node: Maybe<Deployment>;
};

/** A `Deployment` edge in the connection, with data from `IndexerAllocation`. */
export type ProjectDeploymentsByIndexerAllocationProjectIdAndDeploymentIdManyToManyEdgeIndexerAllocationsArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Allocations_Distinct_Enum>>>;
  filter: InputMaybe<IndexerAllocationFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexerAllocationsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** A connection to a list of `Deployment` values, with data from `IndexerAllocationReward`. */
export type ProjectDeploymentsByIndexerAllocationRewardProjectIdAndDeploymentIdManyToManyConnection = {
  readonly __typename: 'ProjectDeploymentsByIndexerAllocationRewardProjectIdAndDeploymentIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<DeploymentAggregates>;
  /** A list of edges which contains the `Deployment`, info from the `IndexerAllocationReward`, and the cursor to aid in pagination. */
  readonly edges: ReadonlyArray<ProjectDeploymentsByIndexerAllocationRewardProjectIdAndDeploymentIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<DeploymentAggregates>>;
  /** A list of `Deployment` objects. */
  readonly nodes: ReadonlyArray<Maybe<Deployment>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Deployment` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Deployment` values, with data from `IndexerAllocationReward`. */
export type ProjectDeploymentsByIndexerAllocationRewardProjectIdAndDeploymentIdManyToManyConnectionGroupedAggregatesArgs =
  {
    groupBy: ReadonlyArray<DeploymentsGroupBy>;
    having: InputMaybe<DeploymentsHavingInput>;
  };

/** A `Deployment` edge in the connection, with data from `IndexerAllocationReward`. */
export type ProjectDeploymentsByIndexerAllocationRewardProjectIdAndDeploymentIdManyToManyEdge = {
  readonly __typename: 'ProjectDeploymentsByIndexerAllocationRewardProjectIdAndDeploymentIdManyToManyEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `IndexerAllocationReward`. */
  readonly indexerAllocationRewards: IndexerAllocationRewardsConnection;
  /** The `Deployment` at the end of the edge. */
  readonly node: Maybe<Deployment>;
};

/** A `Deployment` edge in the connection, with data from `IndexerAllocationReward`. */
export type ProjectDeploymentsByIndexerAllocationRewardProjectIdAndDeploymentIdManyToManyEdgeIndexerAllocationRewardsArgs =
  {
    after: InputMaybe<Scalars['Cursor']['input']>;
    before: InputMaybe<Scalars['Cursor']['input']>;
    blockHeight?: InputMaybe<Scalars['String']['input']>;
    distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Allocation_Rewards_Distinct_Enum>>>;
    filter: InputMaybe<IndexerAllocationRewardFilter>;
    first: InputMaybe<Scalars['Int']['input']>;
    last: InputMaybe<Scalars['Int']['input']>;
    offset: InputMaybe<Scalars['Int']['input']>;
    orderBy: InputMaybe<ReadonlyArray<IndexerAllocationRewardsOrderBy>>;
    orderByNull: InputMaybe<NullOrder>;
  };

/** A connection to a list of `Deployment` values, with data from `IndexerAllocationRewardSummary`. */
export type ProjectDeploymentsByIndexerAllocationRewardSummaryProjectIdAndDeploymentIdManyToManyConnection = {
  readonly __typename: 'ProjectDeploymentsByIndexerAllocationRewardSummaryProjectIdAndDeploymentIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<DeploymentAggregates>;
  /** A list of edges which contains the `Deployment`, info from the `IndexerAllocationRewardSummary`, and the cursor to aid in pagination. */
  readonly edges: ReadonlyArray<ProjectDeploymentsByIndexerAllocationRewardSummaryProjectIdAndDeploymentIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<DeploymentAggregates>>;
  /** A list of `Deployment` objects. */
  readonly nodes: ReadonlyArray<Maybe<Deployment>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Deployment` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Deployment` values, with data from `IndexerAllocationRewardSummary`. */
export type ProjectDeploymentsByIndexerAllocationRewardSummaryProjectIdAndDeploymentIdManyToManyConnectionGroupedAggregatesArgs =
  {
    groupBy: ReadonlyArray<DeploymentsGroupBy>;
    having: InputMaybe<DeploymentsHavingInput>;
  };

/** A `Deployment` edge in the connection, with data from `IndexerAllocationRewardSummary`. */
export type ProjectDeploymentsByIndexerAllocationRewardSummaryProjectIdAndDeploymentIdManyToManyEdge = {
  readonly __typename: 'ProjectDeploymentsByIndexerAllocationRewardSummaryProjectIdAndDeploymentIdManyToManyEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `IndexerAllocationRewardSummary`. */
  readonly indexerAllocationRewardSummaries: IndexerAllocationRewardSummariesConnection;
  /** The `Deployment` at the end of the edge. */
  readonly node: Maybe<Deployment>;
};

/** A `Deployment` edge in the connection, with data from `IndexerAllocationRewardSummary`. */
export type ProjectDeploymentsByIndexerAllocationRewardSummaryProjectIdAndDeploymentIdManyToManyEdgeIndexerAllocationRewardSummariesArgs =
  {
    after: InputMaybe<Scalars['Cursor']['input']>;
    before: InputMaybe<Scalars['Cursor']['input']>;
    blockHeight?: InputMaybe<Scalars['String']['input']>;
    distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Allocation_Reward_Summaries_Distinct_Enum>>>;
    filter: InputMaybe<IndexerAllocationRewardSummaryFilter>;
    first: InputMaybe<Scalars['Int']['input']>;
    last: InputMaybe<Scalars['Int']['input']>;
    offset: InputMaybe<Scalars['Int']['input']>;
    orderBy: InputMaybe<ReadonlyArray<IndexerAllocationRewardSummariesOrderBy>>;
    orderByNull: InputMaybe<NullOrder>;
  };

/** A connection to a list of `Deployment` values, with data from `IndexerAllocationSummary`. */
export type ProjectDeploymentsByIndexerAllocationSummaryProjectIdAndDeploymentIdManyToManyConnection = {
  readonly __typename: 'ProjectDeploymentsByIndexerAllocationSummaryProjectIdAndDeploymentIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<DeploymentAggregates>;
  /** A list of edges which contains the `Deployment`, info from the `IndexerAllocationSummary`, and the cursor to aid in pagination. */
  readonly edges: ReadonlyArray<ProjectDeploymentsByIndexerAllocationSummaryProjectIdAndDeploymentIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<DeploymentAggregates>>;
  /** A list of `Deployment` objects. */
  readonly nodes: ReadonlyArray<Maybe<Deployment>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Deployment` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Deployment` values, with data from `IndexerAllocationSummary`. */
export type ProjectDeploymentsByIndexerAllocationSummaryProjectIdAndDeploymentIdManyToManyConnectionGroupedAggregatesArgs =
  {
    groupBy: ReadonlyArray<DeploymentsGroupBy>;
    having: InputMaybe<DeploymentsHavingInput>;
  };

/** A `Deployment` edge in the connection, with data from `IndexerAllocationSummary`. */
export type ProjectDeploymentsByIndexerAllocationSummaryProjectIdAndDeploymentIdManyToManyEdge = {
  readonly __typename: 'ProjectDeploymentsByIndexerAllocationSummaryProjectIdAndDeploymentIdManyToManyEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `IndexerAllocationSummary`. */
  readonly indexerAllocationSummaries: IndexerAllocationSummariesConnection;
  /** The `Deployment` at the end of the edge. */
  readonly node: Maybe<Deployment>;
};

/** A `Deployment` edge in the connection, with data from `IndexerAllocationSummary`. */
export type ProjectDeploymentsByIndexerAllocationSummaryProjectIdAndDeploymentIdManyToManyEdgeIndexerAllocationSummariesArgs =
  {
    after: InputMaybe<Scalars['Cursor']['input']>;
    before: InputMaybe<Scalars['Cursor']['input']>;
    blockHeight?: InputMaybe<Scalars['String']['input']>;
    distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Allocation_Summaries_Distinct_Enum>>>;
    filter: InputMaybe<IndexerAllocationSummaryFilter>;
    first: InputMaybe<Scalars['Int']['input']>;
    last: InputMaybe<Scalars['Int']['input']>;
    offset: InputMaybe<Scalars['Int']['input']>;
    orderBy: InputMaybe<ReadonlyArray<IndexerAllocationSummariesOrderBy>>;
    orderByNull: InputMaybe<NullOrder>;
  };

export type ProjectDistinctCountAggregates = {
  readonly __typename: 'ProjectDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  readonly _blockRange: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  readonly _id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of boostAllocationRatio across the matching connection */
  readonly boostAllocationRatio: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createdTimestamp across the matching connection */
  readonly createdTimestamp: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of deploymentId across the matching connection */
  readonly deploymentId: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of deploymentMetadata across the matching connection */
  readonly deploymentMetadata: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  readonly id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of lastEvent across the matching connection */
  readonly lastEvent: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of metadata across the matching connection */
  readonly metadata: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of owner across the matching connection */
  readonly owner: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of totalAllocation across the matching connection */
  readonly totalAllocation: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of totalBoost across the matching connection */
  readonly totalBoost: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of totalReward across the matching connection */
  readonly totalReward: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of type across the matching connection */
  readonly type: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of updatedTimestamp across the matching connection */
  readonly updatedTimestamp: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `Project` object types. All fields are combined with a logical ‘and.’ */
export type ProjectFilter = {
  /** Checks for all expressions in this list. */
  readonly and: InputMaybe<ReadonlyArray<ProjectFilter>>;
  /** Filter by the object’s `boostAllocationRatio` field. */
  readonly boostAllocationRatio: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `consumerQueryRewardSummaries` relation. */
  readonly consumerQueryRewardSummaries: InputMaybe<ProjectToManyConsumerQueryRewardSummaryFilter>;
  /** Some related `consumerQueryRewardSummaries` exist. */
  readonly consumerQueryRewardSummariesExist: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `consumerQueryRewards` relation. */
  readonly consumerQueryRewards: InputMaybe<ProjectToManyConsumerQueryRewardFilter>;
  /** Some related `consumerQueryRewards` exist. */
  readonly consumerQueryRewardsExist: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `createdBlock` field. */
  readonly createdBlock: InputMaybe<IntFilter>;
  /** Filter by the object’s `createdTimestamp` field. */
  readonly createdTimestamp: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `deploymentBoosterSummaries` relation. */
  readonly deploymentBoosterSummaries: InputMaybe<ProjectToManyDeploymentBoosterSummaryFilter>;
  /** Some related `deploymentBoosterSummaries` exist. */
  readonly deploymentBoosterSummariesExist: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `deploymentBoosters` relation. */
  readonly deploymentBoosters: InputMaybe<ProjectToManyDeploymentBoosterFilter>;
  /** Some related `deploymentBoosters` exist. */
  readonly deploymentBoostersExist: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `deploymentId` field. */
  readonly deploymentId: InputMaybe<StringFilter>;
  /** Filter by the object’s `deploymentMetadata` field. */
  readonly deploymentMetadata: InputMaybe<StringFilter>;
  /** Filter by the object’s `deployments` relation. */
  readonly deployments: InputMaybe<ProjectToManyDeploymentFilter>;
  /** Some related `deployments` exist. */
  readonly deploymentsExist: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `id` field. */
  readonly id: InputMaybe<StringFilter>;
  /** Filter by the object’s `indexerAllocationRewardSummaries` relation. */
  readonly indexerAllocationRewardSummaries: InputMaybe<ProjectToManyIndexerAllocationRewardSummaryFilter>;
  /** Some related `indexerAllocationRewardSummaries` exist. */
  readonly indexerAllocationRewardSummariesExist: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `indexerAllocationRewards` relation. */
  readonly indexerAllocationRewards: InputMaybe<ProjectToManyIndexerAllocationRewardFilter>;
  /** Some related `indexerAllocationRewards` exist. */
  readonly indexerAllocationRewardsExist: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `indexerAllocationSummaries` relation. */
  readonly indexerAllocationSummaries: InputMaybe<ProjectToManyIndexerAllocationSummaryFilter>;
  /** Some related `indexerAllocationSummaries` exist. */
  readonly indexerAllocationSummariesExist: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `indexerAllocations` relation. */
  readonly indexerAllocations: InputMaybe<ProjectToManyIndexerAllocationFilter>;
  /** Some related `indexerAllocations` exist. */
  readonly indexerAllocationsExist: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `lastEvent` field. */
  readonly lastEvent: InputMaybe<StringFilter>;
  /** Filter by the object’s `metadata` field. */
  readonly metadata: InputMaybe<StringFilter>;
  /** Negates the expression. */
  readonly not: InputMaybe<ProjectFilter>;
  /** Checks for any expressions in this list. */
  readonly or: InputMaybe<ReadonlyArray<ProjectFilter>>;
  /** Filter by the object’s `owner` field. */
  readonly owner: InputMaybe<StringFilter>;
  /** Filter by the object’s `totalAllocation` field. */
  readonly totalAllocation: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `totalBoost` field. */
  readonly totalBoost: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `totalReward` field. */
  readonly totalReward: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `type` field. */
  readonly type: InputMaybe<ProjectTypeFilter>;
  /** Filter by the object’s `updatedTimestamp` field. */
  readonly updatedTimestamp: InputMaybe<DatetimeFilter>;
};

/** A connection to a list of `Indexer` values, with data from `IndexerAllocation`. */
export type ProjectIndexersByIndexerAllocationProjectIdAndIndexerIdManyToManyConnection = {
  readonly __typename: 'ProjectIndexersByIndexerAllocationProjectIdAndIndexerIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<IndexerAggregates>;
  /** A list of edges which contains the `Indexer`, info from the `IndexerAllocation`, and the cursor to aid in pagination. */
  readonly edges: ReadonlyArray<ProjectIndexersByIndexerAllocationProjectIdAndIndexerIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<IndexerAggregates>>;
  /** A list of `Indexer` objects. */
  readonly nodes: ReadonlyArray<Maybe<Indexer>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Indexer` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Indexer` values, with data from `IndexerAllocation`. */
export type ProjectIndexersByIndexerAllocationProjectIdAndIndexerIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<IndexersGroupBy>;
  having: InputMaybe<IndexersHavingInput>;
};

/** A `Indexer` edge in the connection, with data from `IndexerAllocation`. */
export type ProjectIndexersByIndexerAllocationProjectIdAndIndexerIdManyToManyEdge = {
  readonly __typename: 'ProjectIndexersByIndexerAllocationProjectIdAndIndexerIdManyToManyEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `IndexerAllocation`. */
  readonly indexerAllocations: IndexerAllocationsConnection;
  /** The `Indexer` at the end of the edge. */
  readonly node: Maybe<Indexer>;
};

/** A `Indexer` edge in the connection, with data from `IndexerAllocation`. */
export type ProjectIndexersByIndexerAllocationProjectIdAndIndexerIdManyToManyEdgeIndexerAllocationsArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Allocations_Distinct_Enum>>>;
  filter: InputMaybe<IndexerAllocationFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexerAllocationsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** A connection to a list of `Indexer` values, with data from `IndexerAllocationReward`. */
export type ProjectIndexersByIndexerAllocationRewardProjectIdAndIndexerIdManyToManyConnection = {
  readonly __typename: 'ProjectIndexersByIndexerAllocationRewardProjectIdAndIndexerIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<IndexerAggregates>;
  /** A list of edges which contains the `Indexer`, info from the `IndexerAllocationReward`, and the cursor to aid in pagination. */
  readonly edges: ReadonlyArray<ProjectIndexersByIndexerAllocationRewardProjectIdAndIndexerIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<IndexerAggregates>>;
  /** A list of `Indexer` objects. */
  readonly nodes: ReadonlyArray<Maybe<Indexer>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Indexer` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Indexer` values, with data from `IndexerAllocationReward`. */
export type ProjectIndexersByIndexerAllocationRewardProjectIdAndIndexerIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<IndexersGroupBy>;
  having: InputMaybe<IndexersHavingInput>;
};

/** A `Indexer` edge in the connection, with data from `IndexerAllocationReward`. */
export type ProjectIndexersByIndexerAllocationRewardProjectIdAndIndexerIdManyToManyEdge = {
  readonly __typename: 'ProjectIndexersByIndexerAllocationRewardProjectIdAndIndexerIdManyToManyEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `IndexerAllocationReward`. */
  readonly indexerAllocationRewards: IndexerAllocationRewardsConnection;
  /** The `Indexer` at the end of the edge. */
  readonly node: Maybe<Indexer>;
};

/** A `Indexer` edge in the connection, with data from `IndexerAllocationReward`. */
export type ProjectIndexersByIndexerAllocationRewardProjectIdAndIndexerIdManyToManyEdgeIndexerAllocationRewardsArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Allocation_Rewards_Distinct_Enum>>>;
  filter: InputMaybe<IndexerAllocationRewardFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexerAllocationRewardsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** A connection to a list of `Indexer` values, with data from `IndexerAllocationRewardSummary`. */
export type ProjectIndexersByIndexerAllocationRewardSummaryProjectIdAndIndexerIdManyToManyConnection = {
  readonly __typename: 'ProjectIndexersByIndexerAllocationRewardSummaryProjectIdAndIndexerIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<IndexerAggregates>;
  /** A list of edges which contains the `Indexer`, info from the `IndexerAllocationRewardSummary`, and the cursor to aid in pagination. */
  readonly edges: ReadonlyArray<ProjectIndexersByIndexerAllocationRewardSummaryProjectIdAndIndexerIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<IndexerAggregates>>;
  /** A list of `Indexer` objects. */
  readonly nodes: ReadonlyArray<Maybe<Indexer>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Indexer` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Indexer` values, with data from `IndexerAllocationRewardSummary`. */
export type ProjectIndexersByIndexerAllocationRewardSummaryProjectIdAndIndexerIdManyToManyConnectionGroupedAggregatesArgs =
  {
    groupBy: ReadonlyArray<IndexersGroupBy>;
    having: InputMaybe<IndexersHavingInput>;
  };

/** A `Indexer` edge in the connection, with data from `IndexerAllocationRewardSummary`. */
export type ProjectIndexersByIndexerAllocationRewardSummaryProjectIdAndIndexerIdManyToManyEdge = {
  readonly __typename: 'ProjectIndexersByIndexerAllocationRewardSummaryProjectIdAndIndexerIdManyToManyEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `IndexerAllocationRewardSummary`. */
  readonly indexerAllocationRewardSummaries: IndexerAllocationRewardSummariesConnection;
  /** The `Indexer` at the end of the edge. */
  readonly node: Maybe<Indexer>;
};

/** A `Indexer` edge in the connection, with data from `IndexerAllocationRewardSummary`. */
export type ProjectIndexersByIndexerAllocationRewardSummaryProjectIdAndIndexerIdManyToManyEdgeIndexerAllocationRewardSummariesArgs =
  {
    after: InputMaybe<Scalars['Cursor']['input']>;
    before: InputMaybe<Scalars['Cursor']['input']>;
    blockHeight?: InputMaybe<Scalars['String']['input']>;
    distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Allocation_Reward_Summaries_Distinct_Enum>>>;
    filter: InputMaybe<IndexerAllocationRewardSummaryFilter>;
    first: InputMaybe<Scalars['Int']['input']>;
    last: InputMaybe<Scalars['Int']['input']>;
    offset: InputMaybe<Scalars['Int']['input']>;
    orderBy: InputMaybe<ReadonlyArray<IndexerAllocationRewardSummariesOrderBy>>;
    orderByNull: InputMaybe<NullOrder>;
  };

/** A connection to a list of `Indexer` values, with data from `IndexerAllocationSummary`. */
export type ProjectIndexersByIndexerAllocationSummaryProjectIdAndIndexerIdManyToManyConnection = {
  readonly __typename: 'ProjectIndexersByIndexerAllocationSummaryProjectIdAndIndexerIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<IndexerAggregates>;
  /** A list of edges which contains the `Indexer`, info from the `IndexerAllocationSummary`, and the cursor to aid in pagination. */
  readonly edges: ReadonlyArray<ProjectIndexersByIndexerAllocationSummaryProjectIdAndIndexerIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<IndexerAggregates>>;
  /** A list of `Indexer` objects. */
  readonly nodes: ReadonlyArray<Maybe<Indexer>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Indexer` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Indexer` values, with data from `IndexerAllocationSummary`. */
export type ProjectIndexersByIndexerAllocationSummaryProjectIdAndIndexerIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<IndexersGroupBy>;
  having: InputMaybe<IndexersHavingInput>;
};

/** A `Indexer` edge in the connection, with data from `IndexerAllocationSummary`. */
export type ProjectIndexersByIndexerAllocationSummaryProjectIdAndIndexerIdManyToManyEdge = {
  readonly __typename: 'ProjectIndexersByIndexerAllocationSummaryProjectIdAndIndexerIdManyToManyEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `IndexerAllocationSummary`. */
  readonly indexerAllocationSummaries: IndexerAllocationSummariesConnection;
  /** The `Indexer` at the end of the edge. */
  readonly node: Maybe<Indexer>;
};

/** A `Indexer` edge in the connection, with data from `IndexerAllocationSummary`. */
export type ProjectIndexersByIndexerAllocationSummaryProjectIdAndIndexerIdManyToManyEdgeIndexerAllocationSummariesArgs =
  {
    after: InputMaybe<Scalars['Cursor']['input']>;
    before: InputMaybe<Scalars['Cursor']['input']>;
    blockHeight?: InputMaybe<Scalars['String']['input']>;
    distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Allocation_Summaries_Distinct_Enum>>>;
    filter: InputMaybe<IndexerAllocationSummaryFilter>;
    first: InputMaybe<Scalars['Int']['input']>;
    last: InputMaybe<Scalars['Int']['input']>;
    offset: InputMaybe<Scalars['Int']['input']>;
    orderBy: InputMaybe<ReadonlyArray<IndexerAllocationSummariesOrderBy>>;
    orderByNull: InputMaybe<NullOrder>;
  };

export type ProjectMaxAggregates = {
  readonly __typename: 'ProjectMaxAggregates';
  /** Maximum of boostAllocationRatio across the matching connection */
  readonly boostAllocationRatio: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['Int']['output']>;
  /** Maximum of totalAllocation across the matching connection */
  readonly totalAllocation: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of totalBoost across the matching connection */
  readonly totalBoost: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of totalReward across the matching connection */
  readonly totalReward: Maybe<Scalars['BigFloat']['output']>;
};

export type ProjectMinAggregates = {
  readonly __typename: 'ProjectMinAggregates';
  /** Minimum of boostAllocationRatio across the matching connection */
  readonly boostAllocationRatio: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['Int']['output']>;
  /** Minimum of totalAllocation across the matching connection */
  readonly totalAllocation: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of totalBoost across the matching connection */
  readonly totalBoost: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of totalReward across the matching connection */
  readonly totalReward: Maybe<Scalars['BigFloat']['output']>;
};

export type ProjectStddevPopulationAggregates = {
  readonly __typename: 'ProjectStddevPopulationAggregates';
  /** Population standard deviation of boostAllocationRatio across the matching connection */
  readonly boostAllocationRatio: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of totalAllocation across the matching connection */
  readonly totalAllocation: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of totalBoost across the matching connection */
  readonly totalBoost: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of totalReward across the matching connection */
  readonly totalReward: Maybe<Scalars['BigFloat']['output']>;
};

export type ProjectStddevSampleAggregates = {
  readonly __typename: 'ProjectStddevSampleAggregates';
  /** Sample standard deviation of boostAllocationRatio across the matching connection */
  readonly boostAllocationRatio: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of totalAllocation across the matching connection */
  readonly totalAllocation: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of totalBoost across the matching connection */
  readonly totalBoost: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of totalReward across the matching connection */
  readonly totalReward: Maybe<Scalars['BigFloat']['output']>;
};

export type ProjectSumAggregates = {
  readonly __typename: 'ProjectSumAggregates';
  /** Sum of boostAllocationRatio across the matching connection */
  readonly boostAllocationRatio: Scalars['BigFloat']['output'];
  /** Sum of createdBlock across the matching connection */
  readonly createdBlock: Scalars['BigInt']['output'];
  /** Sum of totalAllocation across the matching connection */
  readonly totalAllocation: Scalars['BigFloat']['output'];
  /** Sum of totalBoost across the matching connection */
  readonly totalBoost: Scalars['BigFloat']['output'];
  /** Sum of totalReward across the matching connection */
  readonly totalReward: Scalars['BigFloat']['output'];
};

/** A filter to be used against many `ConsumerQueryReward` object types. All fields are combined with a logical ‘and.’ */
export type ProjectToManyConsumerQueryRewardFilter = {
  /** Aggregates across related `ConsumerQueryReward` match the filter criteria. */
  readonly aggregates: InputMaybe<ConsumerQueryRewardAggregatesFilter>;
  /** Every related `ConsumerQueryReward` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly every: InputMaybe<ConsumerQueryRewardFilter>;
  /** No related `ConsumerQueryReward` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly none: InputMaybe<ConsumerQueryRewardFilter>;
  /** Some related `ConsumerQueryReward` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly some: InputMaybe<ConsumerQueryRewardFilter>;
};

/** A filter to be used against many `ConsumerQueryRewardSummary` object types. All fields are combined with a logical ‘and.’ */
export type ProjectToManyConsumerQueryRewardSummaryFilter = {
  /** Aggregates across related `ConsumerQueryRewardSummary` match the filter criteria. */
  readonly aggregates: InputMaybe<ConsumerQueryRewardSummaryAggregatesFilter>;
  /** Every related `ConsumerQueryRewardSummary` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly every: InputMaybe<ConsumerQueryRewardSummaryFilter>;
  /** No related `ConsumerQueryRewardSummary` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly none: InputMaybe<ConsumerQueryRewardSummaryFilter>;
  /** Some related `ConsumerQueryRewardSummary` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly some: InputMaybe<ConsumerQueryRewardSummaryFilter>;
};

/** A filter to be used against many `DeploymentBooster` object types. All fields are combined with a logical ‘and.’ */
export type ProjectToManyDeploymentBoosterFilter = {
  /** Aggregates across related `DeploymentBooster` match the filter criteria. */
  readonly aggregates: InputMaybe<DeploymentBoosterAggregatesFilter>;
  /** Every related `DeploymentBooster` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly every: InputMaybe<DeploymentBoosterFilter>;
  /** No related `DeploymentBooster` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly none: InputMaybe<DeploymentBoosterFilter>;
  /** Some related `DeploymentBooster` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly some: InputMaybe<DeploymentBoosterFilter>;
};

/** A filter to be used against many `DeploymentBoosterSummary` object types. All fields are combined with a logical ‘and.’ */
export type ProjectToManyDeploymentBoosterSummaryFilter = {
  /** Aggregates across related `DeploymentBoosterSummary` match the filter criteria. */
  readonly aggregates: InputMaybe<DeploymentBoosterSummaryAggregatesFilter>;
  /** Every related `DeploymentBoosterSummary` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly every: InputMaybe<DeploymentBoosterSummaryFilter>;
  /** No related `DeploymentBoosterSummary` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly none: InputMaybe<DeploymentBoosterSummaryFilter>;
  /** Some related `DeploymentBoosterSummary` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly some: InputMaybe<DeploymentBoosterSummaryFilter>;
};

/** A filter to be used against many `Deployment` object types. All fields are combined with a logical ‘and.’ */
export type ProjectToManyDeploymentFilter = {
  /** Aggregates across related `Deployment` match the filter criteria. */
  readonly aggregates: InputMaybe<DeploymentAggregatesFilter>;
  /** Every related `Deployment` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly every: InputMaybe<DeploymentFilter>;
  /** No related `Deployment` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly none: InputMaybe<DeploymentFilter>;
  /** Some related `Deployment` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly some: InputMaybe<DeploymentFilter>;
};

/** A filter to be used against many `IndexerAllocation` object types. All fields are combined with a logical ‘and.’ */
export type ProjectToManyIndexerAllocationFilter = {
  /** Aggregates across related `IndexerAllocation` match the filter criteria. */
  readonly aggregates: InputMaybe<IndexerAllocationAggregatesFilter>;
  /** Every related `IndexerAllocation` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly every: InputMaybe<IndexerAllocationFilter>;
  /** No related `IndexerAllocation` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly none: InputMaybe<IndexerAllocationFilter>;
  /** Some related `IndexerAllocation` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly some: InputMaybe<IndexerAllocationFilter>;
};

/** A filter to be used against many `IndexerAllocationReward` object types. All fields are combined with a logical ‘and.’ */
export type ProjectToManyIndexerAllocationRewardFilter = {
  /** Aggregates across related `IndexerAllocationReward` match the filter criteria. */
  readonly aggregates: InputMaybe<IndexerAllocationRewardAggregatesFilter>;
  /** Every related `IndexerAllocationReward` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly every: InputMaybe<IndexerAllocationRewardFilter>;
  /** No related `IndexerAllocationReward` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly none: InputMaybe<IndexerAllocationRewardFilter>;
  /** Some related `IndexerAllocationReward` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly some: InputMaybe<IndexerAllocationRewardFilter>;
};

/** A filter to be used against many `IndexerAllocationRewardSummary` object types. All fields are combined with a logical ‘and.’ */
export type ProjectToManyIndexerAllocationRewardSummaryFilter = {
  /** Aggregates across related `IndexerAllocationRewardSummary` match the filter criteria. */
  readonly aggregates: InputMaybe<IndexerAllocationRewardSummaryAggregatesFilter>;
  /** Every related `IndexerAllocationRewardSummary` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly every: InputMaybe<IndexerAllocationRewardSummaryFilter>;
  /** No related `IndexerAllocationRewardSummary` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly none: InputMaybe<IndexerAllocationRewardSummaryFilter>;
  /** Some related `IndexerAllocationRewardSummary` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly some: InputMaybe<IndexerAllocationRewardSummaryFilter>;
};

/** A filter to be used against many `IndexerAllocationSummary` object types. All fields are combined with a logical ‘and.’ */
export type ProjectToManyIndexerAllocationSummaryFilter = {
  /** Aggregates across related `IndexerAllocationSummary` match the filter criteria. */
  readonly aggregates: InputMaybe<IndexerAllocationSummaryAggregatesFilter>;
  /** Every related `IndexerAllocationSummary` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly every: InputMaybe<IndexerAllocationSummaryFilter>;
  /** No related `IndexerAllocationSummary` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly none: InputMaybe<IndexerAllocationSummaryFilter>;
  /** Some related `IndexerAllocationSummary` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly some: InputMaybe<IndexerAllocationSummaryFilter>;
};

export enum ProjectType {
  LLM = 'LLM',
  RPC = 'RPC',
  SQ_DICT = 'SQ_DICT',
  SUBGRAPH = 'SUBGRAPH',
  SUBQUERY = 'SUBQUERY',
}

/** A filter to be used against ProjectType fields. All fields are combined with a logical ‘and.’ */
export type ProjectTypeFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  readonly distinctFrom: InputMaybe<ProjectType>;
  /** Equal to the specified value. */
  readonly equalTo: InputMaybe<ProjectType>;
  /** Greater than the specified value. */
  readonly greaterThan: InputMaybe<ProjectType>;
  /** Greater than or equal to the specified value. */
  readonly greaterThanOrEqualTo: InputMaybe<ProjectType>;
  /** Included in the specified list. */
  readonly in: InputMaybe<ReadonlyArray<ProjectType>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  readonly isNull: InputMaybe<Scalars['Boolean']['input']>;
  /** Less than the specified value. */
  readonly lessThan: InputMaybe<ProjectType>;
  /** Less than or equal to the specified value. */
  readonly lessThanOrEqualTo: InputMaybe<ProjectType>;
  /** Equal to the specified value, treating null like an ordinary value. */
  readonly notDistinctFrom: InputMaybe<ProjectType>;
  /** Not equal to the specified value. */
  readonly notEqualTo: InputMaybe<ProjectType>;
  /** Not included in the specified list. */
  readonly notIn: InputMaybe<ReadonlyArray<ProjectType>>;
};

export type ProjectVariancePopulationAggregates = {
  readonly __typename: 'ProjectVariancePopulationAggregates';
  /** Population variance of boostAllocationRatio across the matching connection */
  readonly boostAllocationRatio: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of totalAllocation across the matching connection */
  readonly totalAllocation: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of totalBoost across the matching connection */
  readonly totalBoost: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of totalReward across the matching connection */
  readonly totalReward: Maybe<Scalars['BigFloat']['output']>;
};

export type ProjectVarianceSampleAggregates = {
  readonly __typename: 'ProjectVarianceSampleAggregates';
  /** Sample variance of boostAllocationRatio across the matching connection */
  readonly boostAllocationRatio: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of totalAllocation across the matching connection */
  readonly totalAllocation: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of totalBoost across the matching connection */
  readonly totalBoost: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of totalReward across the matching connection */
  readonly totalReward: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `Project` values. */
export type ProjectsConnection = {
  readonly __typename: 'ProjectsConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<ProjectAggregates>;
  /** A list of edges which contains the `Project` and cursor to aid in pagination. */
  readonly edges: ReadonlyArray<ProjectsEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<ProjectAggregates>>;
  /** A list of `Project` objects. */
  readonly nodes: ReadonlyArray<Maybe<Project>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Project` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Project` values. */
export type ProjectsConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<ProjectsGroupBy>;
  having: InputMaybe<ProjectsHavingInput>;
};

/** A `Project` edge in the connection. */
export type ProjectsEdge = {
  readonly __typename: 'ProjectsEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `Project` at the end of the edge. */
  readonly node: Maybe<Project>;
};

/** Grouping methods for `Project` for usage during aggregation. */
export enum ProjectsGroupBy {
  BOOST_ALLOCATION_RATIO = 'BOOST_ALLOCATION_RATIO',
  CREATED_BLOCK = 'CREATED_BLOCK',
  CREATED_TIMESTAMP = 'CREATED_TIMESTAMP',
  CREATED_TIMESTAMP_TRUNCATED_TO_DAY = 'CREATED_TIMESTAMP_TRUNCATED_TO_DAY',
  CREATED_TIMESTAMP_TRUNCATED_TO_HOUR = 'CREATED_TIMESTAMP_TRUNCATED_TO_HOUR',
  DEPLOYMENT_ID = 'DEPLOYMENT_ID',
  DEPLOYMENT_METADATA = 'DEPLOYMENT_METADATA',
  ID = 'ID',
  LAST_EVENT = 'LAST_EVENT',
  METADATA = 'METADATA',
  OWNER = 'OWNER',
  TOTAL_ALLOCATION = 'TOTAL_ALLOCATION',
  TOTAL_BOOST = 'TOTAL_BOOST',
  TOTAL_REWARD = 'TOTAL_REWARD',
  TYPE = 'TYPE',
  UPDATED_TIMESTAMP = 'UPDATED_TIMESTAMP',
  UPDATED_TIMESTAMP_TRUNCATED_TO_DAY = 'UPDATED_TIMESTAMP_TRUNCATED_TO_DAY',
  UPDATED_TIMESTAMP_TRUNCATED_TO_HOUR = 'UPDATED_TIMESTAMP_TRUNCATED_TO_HOUR',
}

export type ProjectsHavingAverageInput = {
  readonly boostAllocationRatio: InputMaybe<HavingBigfloatFilter>;
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly createdTimestamp: InputMaybe<HavingDatetimeFilter>;
  readonly totalAllocation: InputMaybe<HavingBigfloatFilter>;
  readonly totalBoost: InputMaybe<HavingBigfloatFilter>;
  readonly totalReward: InputMaybe<HavingBigfloatFilter>;
  readonly updatedTimestamp: InputMaybe<HavingDatetimeFilter>;
};

export type ProjectsHavingDistinctCountInput = {
  readonly boostAllocationRatio: InputMaybe<HavingBigfloatFilter>;
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly createdTimestamp: InputMaybe<HavingDatetimeFilter>;
  readonly totalAllocation: InputMaybe<HavingBigfloatFilter>;
  readonly totalBoost: InputMaybe<HavingBigfloatFilter>;
  readonly totalReward: InputMaybe<HavingBigfloatFilter>;
  readonly updatedTimestamp: InputMaybe<HavingDatetimeFilter>;
};

/** Conditions for `Project` aggregates. */
export type ProjectsHavingInput = {
  readonly AND: InputMaybe<ReadonlyArray<ProjectsHavingInput>>;
  readonly OR: InputMaybe<ReadonlyArray<ProjectsHavingInput>>;
  readonly average: InputMaybe<ProjectsHavingAverageInput>;
  readonly distinctCount: InputMaybe<ProjectsHavingDistinctCountInput>;
  readonly max: InputMaybe<ProjectsHavingMaxInput>;
  readonly min: InputMaybe<ProjectsHavingMinInput>;
  readonly stddevPopulation: InputMaybe<ProjectsHavingStddevPopulationInput>;
  readonly stddevSample: InputMaybe<ProjectsHavingStddevSampleInput>;
  readonly sum: InputMaybe<ProjectsHavingSumInput>;
  readonly variancePopulation: InputMaybe<ProjectsHavingVariancePopulationInput>;
  readonly varianceSample: InputMaybe<ProjectsHavingVarianceSampleInput>;
};

export type ProjectsHavingMaxInput = {
  readonly boostAllocationRatio: InputMaybe<HavingBigfloatFilter>;
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly createdTimestamp: InputMaybe<HavingDatetimeFilter>;
  readonly totalAllocation: InputMaybe<HavingBigfloatFilter>;
  readonly totalBoost: InputMaybe<HavingBigfloatFilter>;
  readonly totalReward: InputMaybe<HavingBigfloatFilter>;
  readonly updatedTimestamp: InputMaybe<HavingDatetimeFilter>;
};

export type ProjectsHavingMinInput = {
  readonly boostAllocationRatio: InputMaybe<HavingBigfloatFilter>;
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly createdTimestamp: InputMaybe<HavingDatetimeFilter>;
  readonly totalAllocation: InputMaybe<HavingBigfloatFilter>;
  readonly totalBoost: InputMaybe<HavingBigfloatFilter>;
  readonly totalReward: InputMaybe<HavingBigfloatFilter>;
  readonly updatedTimestamp: InputMaybe<HavingDatetimeFilter>;
};

export type ProjectsHavingStddevPopulationInput = {
  readonly boostAllocationRatio: InputMaybe<HavingBigfloatFilter>;
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly createdTimestamp: InputMaybe<HavingDatetimeFilter>;
  readonly totalAllocation: InputMaybe<HavingBigfloatFilter>;
  readonly totalBoost: InputMaybe<HavingBigfloatFilter>;
  readonly totalReward: InputMaybe<HavingBigfloatFilter>;
  readonly updatedTimestamp: InputMaybe<HavingDatetimeFilter>;
};

export type ProjectsHavingStddevSampleInput = {
  readonly boostAllocationRatio: InputMaybe<HavingBigfloatFilter>;
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly createdTimestamp: InputMaybe<HavingDatetimeFilter>;
  readonly totalAllocation: InputMaybe<HavingBigfloatFilter>;
  readonly totalBoost: InputMaybe<HavingBigfloatFilter>;
  readonly totalReward: InputMaybe<HavingBigfloatFilter>;
  readonly updatedTimestamp: InputMaybe<HavingDatetimeFilter>;
};

export type ProjectsHavingSumInput = {
  readonly boostAllocationRatio: InputMaybe<HavingBigfloatFilter>;
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly createdTimestamp: InputMaybe<HavingDatetimeFilter>;
  readonly totalAllocation: InputMaybe<HavingBigfloatFilter>;
  readonly totalBoost: InputMaybe<HavingBigfloatFilter>;
  readonly totalReward: InputMaybe<HavingBigfloatFilter>;
  readonly updatedTimestamp: InputMaybe<HavingDatetimeFilter>;
};

export type ProjectsHavingVariancePopulationInput = {
  readonly boostAllocationRatio: InputMaybe<HavingBigfloatFilter>;
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly createdTimestamp: InputMaybe<HavingDatetimeFilter>;
  readonly totalAllocation: InputMaybe<HavingBigfloatFilter>;
  readonly totalBoost: InputMaybe<HavingBigfloatFilter>;
  readonly totalReward: InputMaybe<HavingBigfloatFilter>;
  readonly updatedTimestamp: InputMaybe<HavingDatetimeFilter>;
};

export type ProjectsHavingVarianceSampleInput = {
  readonly boostAllocationRatio: InputMaybe<HavingBigfloatFilter>;
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly createdTimestamp: InputMaybe<HavingDatetimeFilter>;
  readonly totalAllocation: InputMaybe<HavingBigfloatFilter>;
  readonly totalBoost: InputMaybe<HavingBigfloatFilter>;
  readonly totalReward: InputMaybe<HavingBigfloatFilter>;
  readonly updatedTimestamp: InputMaybe<HavingDatetimeFilter>;
};

/** Methods to use when ordering `Project`. */
export enum ProjectsOrderBy {
  BOOST_ALLOCATION_RATIO_ASC = 'BOOST_ALLOCATION_RATIO_ASC',
  BOOST_ALLOCATION_RATIO_DESC = 'BOOST_ALLOCATION_RATIO_DESC',
  CONSUMER_QUERY_REWARDS_AVERAGE_BLOCK_RANGE_ASC = 'CONSUMER_QUERY_REWARDS_AVERAGE_BLOCK_RANGE_ASC',
  CONSUMER_QUERY_REWARDS_AVERAGE_BLOCK_RANGE_DESC = 'CONSUMER_QUERY_REWARDS_AVERAGE_BLOCK_RANGE_DESC',
  CONSUMER_QUERY_REWARDS_AVERAGE_CONSUMER_ASC = 'CONSUMER_QUERY_REWARDS_AVERAGE_CONSUMER_ASC',
  CONSUMER_QUERY_REWARDS_AVERAGE_CONSUMER_DESC = 'CONSUMER_QUERY_REWARDS_AVERAGE_CONSUMER_DESC',
  CONSUMER_QUERY_REWARDS_AVERAGE_CREATE_AT_ASC = 'CONSUMER_QUERY_REWARDS_AVERAGE_CREATE_AT_ASC',
  CONSUMER_QUERY_REWARDS_AVERAGE_CREATE_AT_DESC = 'CONSUMER_QUERY_REWARDS_AVERAGE_CREATE_AT_DESC',
  CONSUMER_QUERY_REWARDS_AVERAGE_DEPLOYMENT_ID_ASC = 'CONSUMER_QUERY_REWARDS_AVERAGE_DEPLOYMENT_ID_ASC',
  CONSUMER_QUERY_REWARDS_AVERAGE_DEPLOYMENT_ID_DESC = 'CONSUMER_QUERY_REWARDS_AVERAGE_DEPLOYMENT_ID_DESC',
  CONSUMER_QUERY_REWARDS_AVERAGE_ID_ASC = 'CONSUMER_QUERY_REWARDS_AVERAGE_ID_ASC',
  CONSUMER_QUERY_REWARDS_AVERAGE_ID_DESC = 'CONSUMER_QUERY_REWARDS_AVERAGE_ID_DESC',
  CONSUMER_QUERY_REWARDS_AVERAGE_ORDER_ID_ASC = 'CONSUMER_QUERY_REWARDS_AVERAGE_ORDER_ID_ASC',
  CONSUMER_QUERY_REWARDS_AVERAGE_ORDER_ID_DESC = 'CONSUMER_QUERY_REWARDS_AVERAGE_ORDER_ID_DESC',
  CONSUMER_QUERY_REWARDS_AVERAGE_ORDER_TYPE_ASC = 'CONSUMER_QUERY_REWARDS_AVERAGE_ORDER_TYPE_ASC',
  CONSUMER_QUERY_REWARDS_AVERAGE_ORDER_TYPE_DESC = 'CONSUMER_QUERY_REWARDS_AVERAGE_ORDER_TYPE_DESC',
  CONSUMER_QUERY_REWARDS_AVERAGE_PROJECT_ID_ASC = 'CONSUMER_QUERY_REWARDS_AVERAGE_PROJECT_ID_ASC',
  CONSUMER_QUERY_REWARDS_AVERAGE_PROJECT_ID_DESC = 'CONSUMER_QUERY_REWARDS_AVERAGE_PROJECT_ID_DESC',
  CONSUMER_QUERY_REWARDS_AVERAGE_REFUNDED_ASC = 'CONSUMER_QUERY_REWARDS_AVERAGE_REFUNDED_ASC',
  CONSUMER_QUERY_REWARDS_AVERAGE_REFUNDED_DESC = 'CONSUMER_QUERY_REWARDS_AVERAGE_REFUNDED_DESC',
  CONSUMER_QUERY_REWARDS_AVERAGE_SPENT_ASC = 'CONSUMER_QUERY_REWARDS_AVERAGE_SPENT_ASC',
  CONSUMER_QUERY_REWARDS_AVERAGE_SPENT_DESC = 'CONSUMER_QUERY_REWARDS_AVERAGE_SPENT_DESC',
  CONSUMER_QUERY_REWARDS_AVERAGE_UPDATE_AT_ASC = 'CONSUMER_QUERY_REWARDS_AVERAGE_UPDATE_AT_ASC',
  CONSUMER_QUERY_REWARDS_AVERAGE_UPDATE_AT_DESC = 'CONSUMER_QUERY_REWARDS_AVERAGE_UPDATE_AT_DESC',
  CONSUMER_QUERY_REWARDS_BY_PROJECT_ID__COUNT_ASC = 'CONSUMER_QUERY_REWARDS_BY_PROJECT_ID__COUNT_ASC',
  CONSUMER_QUERY_REWARDS_BY_PROJECT_ID__COUNT_DESC = 'CONSUMER_QUERY_REWARDS_BY_PROJECT_ID__COUNT_DESC',
  CONSUMER_QUERY_REWARDS_COUNT_ASC = 'CONSUMER_QUERY_REWARDS_COUNT_ASC',
  CONSUMER_QUERY_REWARDS_COUNT_DESC = 'CONSUMER_QUERY_REWARDS_COUNT_DESC',
  CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_BLOCK_RANGE_ASC = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_BLOCK_RANGE_DESC = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_CONSUMER_ASC = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_CONSUMER_ASC',
  CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_CONSUMER_DESC = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_CONSUMER_DESC',
  CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_CREATE_AT_ASC = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_CREATE_AT_ASC',
  CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_CREATE_AT_DESC = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_CREATE_AT_DESC',
  CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_DEPLOYMENT_ID_ASC = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_DEPLOYMENT_ID_ASC',
  CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_DEPLOYMENT_ID_DESC = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_DEPLOYMENT_ID_DESC',
  CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_ID_ASC = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_ID_ASC',
  CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_ID_DESC = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_ID_DESC',
  CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_ORDER_ID_ASC = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_ORDER_ID_ASC',
  CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_ORDER_ID_DESC = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_ORDER_ID_DESC',
  CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_ORDER_TYPE_ASC = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_ORDER_TYPE_ASC',
  CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_ORDER_TYPE_DESC = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_ORDER_TYPE_DESC',
  CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_PROJECT_ID_ASC = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_PROJECT_ID_ASC',
  CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_PROJECT_ID_DESC = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_PROJECT_ID_DESC',
  CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_REFUNDED_ASC = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_REFUNDED_ASC',
  CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_REFUNDED_DESC = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_REFUNDED_DESC',
  CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_SPENT_ASC = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_SPENT_ASC',
  CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_SPENT_DESC = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_SPENT_DESC',
  CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_UPDATE_AT_ASC = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_UPDATE_AT_ASC',
  CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_UPDATE_AT_DESC = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_UPDATE_AT_DESC',
  CONSUMER_QUERY_REWARDS_MAX_BLOCK_RANGE_ASC = 'CONSUMER_QUERY_REWARDS_MAX_BLOCK_RANGE_ASC',
  CONSUMER_QUERY_REWARDS_MAX_BLOCK_RANGE_DESC = 'CONSUMER_QUERY_REWARDS_MAX_BLOCK_RANGE_DESC',
  CONSUMER_QUERY_REWARDS_MAX_CONSUMER_ASC = 'CONSUMER_QUERY_REWARDS_MAX_CONSUMER_ASC',
  CONSUMER_QUERY_REWARDS_MAX_CONSUMER_DESC = 'CONSUMER_QUERY_REWARDS_MAX_CONSUMER_DESC',
  CONSUMER_QUERY_REWARDS_MAX_CREATE_AT_ASC = 'CONSUMER_QUERY_REWARDS_MAX_CREATE_AT_ASC',
  CONSUMER_QUERY_REWARDS_MAX_CREATE_AT_DESC = 'CONSUMER_QUERY_REWARDS_MAX_CREATE_AT_DESC',
  CONSUMER_QUERY_REWARDS_MAX_DEPLOYMENT_ID_ASC = 'CONSUMER_QUERY_REWARDS_MAX_DEPLOYMENT_ID_ASC',
  CONSUMER_QUERY_REWARDS_MAX_DEPLOYMENT_ID_DESC = 'CONSUMER_QUERY_REWARDS_MAX_DEPLOYMENT_ID_DESC',
  CONSUMER_QUERY_REWARDS_MAX_ID_ASC = 'CONSUMER_QUERY_REWARDS_MAX_ID_ASC',
  CONSUMER_QUERY_REWARDS_MAX_ID_DESC = 'CONSUMER_QUERY_REWARDS_MAX_ID_DESC',
  CONSUMER_QUERY_REWARDS_MAX_ORDER_ID_ASC = 'CONSUMER_QUERY_REWARDS_MAX_ORDER_ID_ASC',
  CONSUMER_QUERY_REWARDS_MAX_ORDER_ID_DESC = 'CONSUMER_QUERY_REWARDS_MAX_ORDER_ID_DESC',
  CONSUMER_QUERY_REWARDS_MAX_ORDER_TYPE_ASC = 'CONSUMER_QUERY_REWARDS_MAX_ORDER_TYPE_ASC',
  CONSUMER_QUERY_REWARDS_MAX_ORDER_TYPE_DESC = 'CONSUMER_QUERY_REWARDS_MAX_ORDER_TYPE_DESC',
  CONSUMER_QUERY_REWARDS_MAX_PROJECT_ID_ASC = 'CONSUMER_QUERY_REWARDS_MAX_PROJECT_ID_ASC',
  CONSUMER_QUERY_REWARDS_MAX_PROJECT_ID_DESC = 'CONSUMER_QUERY_REWARDS_MAX_PROJECT_ID_DESC',
  CONSUMER_QUERY_REWARDS_MAX_REFUNDED_ASC = 'CONSUMER_QUERY_REWARDS_MAX_REFUNDED_ASC',
  CONSUMER_QUERY_REWARDS_MAX_REFUNDED_DESC = 'CONSUMER_QUERY_REWARDS_MAX_REFUNDED_DESC',
  CONSUMER_QUERY_REWARDS_MAX_SPENT_ASC = 'CONSUMER_QUERY_REWARDS_MAX_SPENT_ASC',
  CONSUMER_QUERY_REWARDS_MAX_SPENT_DESC = 'CONSUMER_QUERY_REWARDS_MAX_SPENT_DESC',
  CONSUMER_QUERY_REWARDS_MAX_UPDATE_AT_ASC = 'CONSUMER_QUERY_REWARDS_MAX_UPDATE_AT_ASC',
  CONSUMER_QUERY_REWARDS_MAX_UPDATE_AT_DESC = 'CONSUMER_QUERY_REWARDS_MAX_UPDATE_AT_DESC',
  CONSUMER_QUERY_REWARDS_MIN_BLOCK_RANGE_ASC = 'CONSUMER_QUERY_REWARDS_MIN_BLOCK_RANGE_ASC',
  CONSUMER_QUERY_REWARDS_MIN_BLOCK_RANGE_DESC = 'CONSUMER_QUERY_REWARDS_MIN_BLOCK_RANGE_DESC',
  CONSUMER_QUERY_REWARDS_MIN_CONSUMER_ASC = 'CONSUMER_QUERY_REWARDS_MIN_CONSUMER_ASC',
  CONSUMER_QUERY_REWARDS_MIN_CONSUMER_DESC = 'CONSUMER_QUERY_REWARDS_MIN_CONSUMER_DESC',
  CONSUMER_QUERY_REWARDS_MIN_CREATE_AT_ASC = 'CONSUMER_QUERY_REWARDS_MIN_CREATE_AT_ASC',
  CONSUMER_QUERY_REWARDS_MIN_CREATE_AT_DESC = 'CONSUMER_QUERY_REWARDS_MIN_CREATE_AT_DESC',
  CONSUMER_QUERY_REWARDS_MIN_DEPLOYMENT_ID_ASC = 'CONSUMER_QUERY_REWARDS_MIN_DEPLOYMENT_ID_ASC',
  CONSUMER_QUERY_REWARDS_MIN_DEPLOYMENT_ID_DESC = 'CONSUMER_QUERY_REWARDS_MIN_DEPLOYMENT_ID_DESC',
  CONSUMER_QUERY_REWARDS_MIN_ID_ASC = 'CONSUMER_QUERY_REWARDS_MIN_ID_ASC',
  CONSUMER_QUERY_REWARDS_MIN_ID_DESC = 'CONSUMER_QUERY_REWARDS_MIN_ID_DESC',
  CONSUMER_QUERY_REWARDS_MIN_ORDER_ID_ASC = 'CONSUMER_QUERY_REWARDS_MIN_ORDER_ID_ASC',
  CONSUMER_QUERY_REWARDS_MIN_ORDER_ID_DESC = 'CONSUMER_QUERY_REWARDS_MIN_ORDER_ID_DESC',
  CONSUMER_QUERY_REWARDS_MIN_ORDER_TYPE_ASC = 'CONSUMER_QUERY_REWARDS_MIN_ORDER_TYPE_ASC',
  CONSUMER_QUERY_REWARDS_MIN_ORDER_TYPE_DESC = 'CONSUMER_QUERY_REWARDS_MIN_ORDER_TYPE_DESC',
  CONSUMER_QUERY_REWARDS_MIN_PROJECT_ID_ASC = 'CONSUMER_QUERY_REWARDS_MIN_PROJECT_ID_ASC',
  CONSUMER_QUERY_REWARDS_MIN_PROJECT_ID_DESC = 'CONSUMER_QUERY_REWARDS_MIN_PROJECT_ID_DESC',
  CONSUMER_QUERY_REWARDS_MIN_REFUNDED_ASC = 'CONSUMER_QUERY_REWARDS_MIN_REFUNDED_ASC',
  CONSUMER_QUERY_REWARDS_MIN_REFUNDED_DESC = 'CONSUMER_QUERY_REWARDS_MIN_REFUNDED_DESC',
  CONSUMER_QUERY_REWARDS_MIN_SPENT_ASC = 'CONSUMER_QUERY_REWARDS_MIN_SPENT_ASC',
  CONSUMER_QUERY_REWARDS_MIN_SPENT_DESC = 'CONSUMER_QUERY_REWARDS_MIN_SPENT_DESC',
  CONSUMER_QUERY_REWARDS_MIN_UPDATE_AT_ASC = 'CONSUMER_QUERY_REWARDS_MIN_UPDATE_AT_ASC',
  CONSUMER_QUERY_REWARDS_MIN_UPDATE_AT_DESC = 'CONSUMER_QUERY_REWARDS_MIN_UPDATE_AT_DESC',
  CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_BLOCK_RANGE_ASC = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_BLOCK_RANGE_DESC = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_CONSUMER_ASC = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_CONSUMER_ASC',
  CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_CONSUMER_DESC = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_CONSUMER_DESC',
  CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_CREATE_AT_ASC = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_CREATE_AT_ASC',
  CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_CREATE_AT_DESC = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_CREATE_AT_DESC',
  CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_DEPLOYMENT_ID_ASC = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_DEPLOYMENT_ID_ASC',
  CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_DEPLOYMENT_ID_DESC = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_DEPLOYMENT_ID_DESC',
  CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_ID_ASC = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_ID_ASC',
  CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_ID_DESC = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_ID_DESC',
  CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_ORDER_ID_ASC = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_ORDER_ID_ASC',
  CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_ORDER_ID_DESC = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_ORDER_ID_DESC',
  CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_ORDER_TYPE_ASC = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_ORDER_TYPE_ASC',
  CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_ORDER_TYPE_DESC = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_ORDER_TYPE_DESC',
  CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_PROJECT_ID_ASC = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_PROJECT_ID_ASC',
  CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_PROJECT_ID_DESC = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_PROJECT_ID_DESC',
  CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_REFUNDED_ASC = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_REFUNDED_ASC',
  CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_REFUNDED_DESC = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_REFUNDED_DESC',
  CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_SPENT_ASC = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_SPENT_ASC',
  CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_SPENT_DESC = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_SPENT_DESC',
  CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_UPDATE_AT_ASC = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_UPDATE_AT_ASC',
  CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_UPDATE_AT_DESC = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_UPDATE_AT_DESC',
  CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_BLOCK_RANGE_ASC = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_BLOCK_RANGE_DESC = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_CONSUMER_ASC = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_CONSUMER_ASC',
  CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_CONSUMER_DESC = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_CONSUMER_DESC',
  CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_CREATE_AT_ASC = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_CREATE_AT_ASC',
  CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_CREATE_AT_DESC = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_CREATE_AT_DESC',
  CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC',
  CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC',
  CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_ID_ASC = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_ID_ASC',
  CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_ID_DESC = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_ID_DESC',
  CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_ORDER_ID_ASC = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_ORDER_ID_ASC',
  CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_ORDER_ID_DESC = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_ORDER_ID_DESC',
  CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_ORDER_TYPE_ASC = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_ORDER_TYPE_ASC',
  CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_ORDER_TYPE_DESC = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_ORDER_TYPE_DESC',
  CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_PROJECT_ID_ASC = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_PROJECT_ID_ASC',
  CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_PROJECT_ID_DESC = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_PROJECT_ID_DESC',
  CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_REFUNDED_ASC = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_REFUNDED_ASC',
  CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_REFUNDED_DESC = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_REFUNDED_DESC',
  CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_SPENT_ASC = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_SPENT_ASC',
  CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_SPENT_DESC = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_SPENT_DESC',
  CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_UPDATE_AT_ASC = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_UPDATE_AT_ASC',
  CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_UPDATE_AT_DESC = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_UPDATE_AT_DESC',
  CONSUMER_QUERY_REWARDS_SUM_BLOCK_RANGE_ASC = 'CONSUMER_QUERY_REWARDS_SUM_BLOCK_RANGE_ASC',
  CONSUMER_QUERY_REWARDS_SUM_BLOCK_RANGE_DESC = 'CONSUMER_QUERY_REWARDS_SUM_BLOCK_RANGE_DESC',
  CONSUMER_QUERY_REWARDS_SUM_CONSUMER_ASC = 'CONSUMER_QUERY_REWARDS_SUM_CONSUMER_ASC',
  CONSUMER_QUERY_REWARDS_SUM_CONSUMER_DESC = 'CONSUMER_QUERY_REWARDS_SUM_CONSUMER_DESC',
  CONSUMER_QUERY_REWARDS_SUM_CREATE_AT_ASC = 'CONSUMER_QUERY_REWARDS_SUM_CREATE_AT_ASC',
  CONSUMER_QUERY_REWARDS_SUM_CREATE_AT_DESC = 'CONSUMER_QUERY_REWARDS_SUM_CREATE_AT_DESC',
  CONSUMER_QUERY_REWARDS_SUM_DEPLOYMENT_ID_ASC = 'CONSUMER_QUERY_REWARDS_SUM_DEPLOYMENT_ID_ASC',
  CONSUMER_QUERY_REWARDS_SUM_DEPLOYMENT_ID_DESC = 'CONSUMER_QUERY_REWARDS_SUM_DEPLOYMENT_ID_DESC',
  CONSUMER_QUERY_REWARDS_SUM_ID_ASC = 'CONSUMER_QUERY_REWARDS_SUM_ID_ASC',
  CONSUMER_QUERY_REWARDS_SUM_ID_DESC = 'CONSUMER_QUERY_REWARDS_SUM_ID_DESC',
  CONSUMER_QUERY_REWARDS_SUM_ORDER_ID_ASC = 'CONSUMER_QUERY_REWARDS_SUM_ORDER_ID_ASC',
  CONSUMER_QUERY_REWARDS_SUM_ORDER_ID_DESC = 'CONSUMER_QUERY_REWARDS_SUM_ORDER_ID_DESC',
  CONSUMER_QUERY_REWARDS_SUM_ORDER_TYPE_ASC = 'CONSUMER_QUERY_REWARDS_SUM_ORDER_TYPE_ASC',
  CONSUMER_QUERY_REWARDS_SUM_ORDER_TYPE_DESC = 'CONSUMER_QUERY_REWARDS_SUM_ORDER_TYPE_DESC',
  CONSUMER_QUERY_REWARDS_SUM_PROJECT_ID_ASC = 'CONSUMER_QUERY_REWARDS_SUM_PROJECT_ID_ASC',
  CONSUMER_QUERY_REWARDS_SUM_PROJECT_ID_DESC = 'CONSUMER_QUERY_REWARDS_SUM_PROJECT_ID_DESC',
  CONSUMER_QUERY_REWARDS_SUM_REFUNDED_ASC = 'CONSUMER_QUERY_REWARDS_SUM_REFUNDED_ASC',
  CONSUMER_QUERY_REWARDS_SUM_REFUNDED_DESC = 'CONSUMER_QUERY_REWARDS_SUM_REFUNDED_DESC',
  CONSUMER_QUERY_REWARDS_SUM_SPENT_ASC = 'CONSUMER_QUERY_REWARDS_SUM_SPENT_ASC',
  CONSUMER_QUERY_REWARDS_SUM_SPENT_DESC = 'CONSUMER_QUERY_REWARDS_SUM_SPENT_DESC',
  CONSUMER_QUERY_REWARDS_SUM_UPDATE_AT_ASC = 'CONSUMER_QUERY_REWARDS_SUM_UPDATE_AT_ASC',
  CONSUMER_QUERY_REWARDS_SUM_UPDATE_AT_DESC = 'CONSUMER_QUERY_REWARDS_SUM_UPDATE_AT_DESC',
  CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_BLOCK_RANGE_ASC = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_BLOCK_RANGE_DESC = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_CONSUMER_ASC = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_CONSUMER_ASC',
  CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_CONSUMER_DESC = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_CONSUMER_DESC',
  CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_CREATE_AT_ASC = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_CREATE_AT_ASC',
  CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_CREATE_AT_DESC = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_CREATE_AT_DESC',
  CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC',
  CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC',
  CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_ID_ASC = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_ID_ASC',
  CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_ID_DESC = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_ID_DESC',
  CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_ORDER_ID_ASC = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_ORDER_ID_ASC',
  CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_ORDER_ID_DESC = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_ORDER_ID_DESC',
  CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_ORDER_TYPE_ASC = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_ORDER_TYPE_ASC',
  CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_ORDER_TYPE_DESC = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_ORDER_TYPE_DESC',
  CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_PROJECT_ID_ASC = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_PROJECT_ID_ASC',
  CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_PROJECT_ID_DESC = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_PROJECT_ID_DESC',
  CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_REFUNDED_ASC = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_REFUNDED_ASC',
  CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_REFUNDED_DESC = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_REFUNDED_DESC',
  CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_SPENT_ASC = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_SPENT_ASC',
  CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_SPENT_DESC = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_SPENT_DESC',
  CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_UPDATE_AT_ASC = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_UPDATE_AT_ASC',
  CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_UPDATE_AT_DESC = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_UPDATE_AT_DESC',
  CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_CONSUMER_ASC = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_CONSUMER_ASC',
  CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_CONSUMER_DESC = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_CONSUMER_DESC',
  CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_CREATE_AT_ASC = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_CREATE_AT_ASC',
  CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_CREATE_AT_DESC = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_CREATE_AT_DESC',
  CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC',
  CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC',
  CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_ID_ASC = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_ID_ASC',
  CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_ID_DESC = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_ID_DESC',
  CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_ORDER_ID_ASC = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_ORDER_ID_ASC',
  CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_ORDER_ID_DESC = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_ORDER_ID_DESC',
  CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_ORDER_TYPE_ASC = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_ORDER_TYPE_ASC',
  CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_ORDER_TYPE_DESC = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_ORDER_TYPE_DESC',
  CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_PROJECT_ID_ASC = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_PROJECT_ID_ASC',
  CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_PROJECT_ID_DESC = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_PROJECT_ID_DESC',
  CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_REFUNDED_ASC = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_REFUNDED_ASC',
  CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_REFUNDED_DESC = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_REFUNDED_DESC',
  CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_SPENT_ASC = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_SPENT_ASC',
  CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_SPENT_DESC = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_SPENT_DESC',
  CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_UPDATE_AT_ASC = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_UPDATE_AT_ASC',
  CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_UPDATE_AT_DESC = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_UPDATE_AT_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_BLOCK_RANGE_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_BLOCK_RANGE_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_BLOCK_RANGE_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_BLOCK_RANGE_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_CONSUMER_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_CONSUMER_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_CONSUMER_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_CONSUMER_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_CREATE_AT_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_CREATE_AT_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_CREATE_AT_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_CREATE_AT_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_DEPLOYMENT_ID_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_DEPLOYMENT_ID_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_DEPLOYMENT_ID_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_DEPLOYMENT_ID_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_ID_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_ID_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_ID_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_ID_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_ORDER_TYPE_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_ORDER_TYPE_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_ORDER_TYPE_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_ORDER_TYPE_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_PROJECT_ID_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_PROJECT_ID_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_PROJECT_ID_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_PROJECT_ID_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_TOTAL_REFUNDED_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_TOTAL_REFUNDED_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_TOTAL_REFUNDED_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_TOTAL_REFUNDED_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_TOTAL_SPENT_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_TOTAL_SPENT_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_TOTAL_SPENT_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_TOTAL_SPENT_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_UPDATE_AT_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_UPDATE_AT_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_UPDATE_AT_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_UPDATE_AT_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_BY_PROJECT_ID__COUNT_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_BY_PROJECT_ID__COUNT_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_BY_PROJECT_ID__COUNT_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_BY_PROJECT_ID__COUNT_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_COUNT_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_COUNT_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_COUNT_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_COUNT_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_BLOCK_RANGE_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_BLOCK_RANGE_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_CONSUMER_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_CONSUMER_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_CONSUMER_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_CONSUMER_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_CREATE_AT_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_CREATE_AT_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_CREATE_AT_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_CREATE_AT_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_DEPLOYMENT_ID_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_DEPLOYMENT_ID_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_DEPLOYMENT_ID_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_DEPLOYMENT_ID_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_ID_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_ID_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_ID_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_ID_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_ORDER_TYPE_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_ORDER_TYPE_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_ORDER_TYPE_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_ORDER_TYPE_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_PROJECT_ID_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_PROJECT_ID_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_PROJECT_ID_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_PROJECT_ID_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_TOTAL_REFUNDED_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_TOTAL_REFUNDED_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_TOTAL_REFUNDED_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_TOTAL_REFUNDED_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_TOTAL_SPENT_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_TOTAL_SPENT_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_TOTAL_SPENT_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_TOTAL_SPENT_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_UPDATE_AT_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_UPDATE_AT_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_UPDATE_AT_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_UPDATE_AT_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MAX_BLOCK_RANGE_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_BLOCK_RANGE_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MAX_BLOCK_RANGE_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_BLOCK_RANGE_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MAX_CONSUMER_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_CONSUMER_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MAX_CONSUMER_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_CONSUMER_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MAX_CREATE_AT_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_CREATE_AT_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MAX_CREATE_AT_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_CREATE_AT_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MAX_DEPLOYMENT_ID_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_DEPLOYMENT_ID_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MAX_DEPLOYMENT_ID_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_DEPLOYMENT_ID_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MAX_ID_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_ID_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MAX_ID_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_ID_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MAX_ORDER_TYPE_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_ORDER_TYPE_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MAX_ORDER_TYPE_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_ORDER_TYPE_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MAX_PROJECT_ID_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_PROJECT_ID_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MAX_PROJECT_ID_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_PROJECT_ID_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MAX_TOTAL_REFUNDED_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_TOTAL_REFUNDED_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MAX_TOTAL_REFUNDED_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_TOTAL_REFUNDED_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MAX_TOTAL_SPENT_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_TOTAL_SPENT_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MAX_TOTAL_SPENT_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_TOTAL_SPENT_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MAX_UPDATE_AT_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_UPDATE_AT_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MAX_UPDATE_AT_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_UPDATE_AT_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MIN_BLOCK_RANGE_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_BLOCK_RANGE_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MIN_BLOCK_RANGE_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_BLOCK_RANGE_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MIN_CONSUMER_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_CONSUMER_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MIN_CONSUMER_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_CONSUMER_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MIN_CREATE_AT_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_CREATE_AT_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MIN_CREATE_AT_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_CREATE_AT_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MIN_DEPLOYMENT_ID_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_DEPLOYMENT_ID_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MIN_DEPLOYMENT_ID_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_DEPLOYMENT_ID_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MIN_ID_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_ID_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MIN_ID_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_ID_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MIN_ORDER_TYPE_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_ORDER_TYPE_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MIN_ORDER_TYPE_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_ORDER_TYPE_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MIN_PROJECT_ID_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_PROJECT_ID_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MIN_PROJECT_ID_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_PROJECT_ID_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MIN_TOTAL_REFUNDED_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_TOTAL_REFUNDED_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MIN_TOTAL_REFUNDED_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_TOTAL_REFUNDED_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MIN_TOTAL_SPENT_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_TOTAL_SPENT_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MIN_TOTAL_SPENT_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_TOTAL_SPENT_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MIN_UPDATE_AT_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_UPDATE_AT_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_MIN_UPDATE_AT_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_UPDATE_AT_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_BLOCK_RANGE_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_BLOCK_RANGE_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_CONSUMER_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_CONSUMER_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_CONSUMER_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_CONSUMER_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_CREATE_AT_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_CREATE_AT_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_CREATE_AT_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_CREATE_AT_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_DEPLOYMENT_ID_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_DEPLOYMENT_ID_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_DEPLOYMENT_ID_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_DEPLOYMENT_ID_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_ID_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_ID_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_ID_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_ID_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_ORDER_TYPE_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_ORDER_TYPE_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_ORDER_TYPE_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_ORDER_TYPE_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_PROJECT_ID_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_PROJECT_ID_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_PROJECT_ID_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_PROJECT_ID_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_TOTAL_REFUNDED_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_TOTAL_REFUNDED_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_TOTAL_REFUNDED_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_TOTAL_REFUNDED_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_TOTAL_SPENT_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_TOTAL_SPENT_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_TOTAL_SPENT_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_TOTAL_SPENT_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_UPDATE_AT_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_UPDATE_AT_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_UPDATE_AT_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_UPDATE_AT_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_BLOCK_RANGE_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_BLOCK_RANGE_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_CONSUMER_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_CONSUMER_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_CONSUMER_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_CONSUMER_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_CREATE_AT_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_CREATE_AT_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_CREATE_AT_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_CREATE_AT_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_ID_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_ID_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_ID_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_ID_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_ORDER_TYPE_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_ORDER_TYPE_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_ORDER_TYPE_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_ORDER_TYPE_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_PROJECT_ID_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_PROJECT_ID_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_PROJECT_ID_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_PROJECT_ID_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_TOTAL_REFUNDED_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_TOTAL_REFUNDED_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_TOTAL_REFUNDED_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_TOTAL_REFUNDED_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_TOTAL_SPENT_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_TOTAL_SPENT_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_TOTAL_SPENT_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_TOTAL_SPENT_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_UPDATE_AT_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_UPDATE_AT_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_UPDATE_AT_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_UPDATE_AT_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_SUM_BLOCK_RANGE_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_BLOCK_RANGE_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_SUM_BLOCK_RANGE_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_BLOCK_RANGE_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_SUM_CONSUMER_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_CONSUMER_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_SUM_CONSUMER_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_CONSUMER_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_SUM_CREATE_AT_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_CREATE_AT_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_SUM_CREATE_AT_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_CREATE_AT_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_SUM_DEPLOYMENT_ID_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_DEPLOYMENT_ID_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_SUM_DEPLOYMENT_ID_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_DEPLOYMENT_ID_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_SUM_ID_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_ID_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_SUM_ID_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_ID_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_SUM_ORDER_TYPE_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_ORDER_TYPE_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_SUM_ORDER_TYPE_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_ORDER_TYPE_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_SUM_PROJECT_ID_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_PROJECT_ID_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_SUM_PROJECT_ID_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_PROJECT_ID_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_SUM_TOTAL_REFUNDED_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_TOTAL_REFUNDED_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_SUM_TOTAL_REFUNDED_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_TOTAL_REFUNDED_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_SUM_TOTAL_SPENT_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_TOTAL_SPENT_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_SUM_TOTAL_SPENT_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_TOTAL_SPENT_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_SUM_UPDATE_AT_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_UPDATE_AT_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_SUM_UPDATE_AT_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_UPDATE_AT_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_BLOCK_RANGE_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_BLOCK_RANGE_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_CONSUMER_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_CONSUMER_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_CONSUMER_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_CONSUMER_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_CREATE_AT_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_CREATE_AT_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_CREATE_AT_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_CREATE_AT_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_ID_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_ID_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_ID_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_ID_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_ORDER_TYPE_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_ORDER_TYPE_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_ORDER_TYPE_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_ORDER_TYPE_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_PROJECT_ID_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_PROJECT_ID_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_PROJECT_ID_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_PROJECT_ID_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_TOTAL_REFUNDED_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_TOTAL_REFUNDED_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_TOTAL_REFUNDED_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_TOTAL_REFUNDED_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_TOTAL_SPENT_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_TOTAL_SPENT_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_TOTAL_SPENT_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_TOTAL_SPENT_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_UPDATE_AT_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_UPDATE_AT_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_UPDATE_AT_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_UPDATE_AT_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_CONSUMER_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_CONSUMER_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_CONSUMER_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_CONSUMER_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_CREATE_AT_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_CREATE_AT_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_CREATE_AT_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_CREATE_AT_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_ID_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_ID_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_ID_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_ID_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_ORDER_TYPE_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_ORDER_TYPE_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_ORDER_TYPE_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_ORDER_TYPE_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_PROJECT_ID_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_PROJECT_ID_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_PROJECT_ID_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_PROJECT_ID_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_TOTAL_REFUNDED_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_TOTAL_REFUNDED_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_TOTAL_REFUNDED_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_TOTAL_REFUNDED_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_TOTAL_SPENT_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_TOTAL_SPENT_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_TOTAL_SPENT_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_TOTAL_SPENT_DESC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_UPDATE_AT_ASC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_UPDATE_AT_ASC',
  CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_UPDATE_AT_DESC = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_UPDATE_AT_DESC',
  CREATED_BLOCK_ASC = 'CREATED_BLOCK_ASC',
  CREATED_BLOCK_DESC = 'CREATED_BLOCK_DESC',
  CREATED_TIMESTAMP_ASC = 'CREATED_TIMESTAMP_ASC',
  CREATED_TIMESTAMP_DESC = 'CREATED_TIMESTAMP_DESC',
  DEPLOYMENTS_AVERAGE_BLOCK_RANGE_ASC = 'DEPLOYMENTS_AVERAGE_BLOCK_RANGE_ASC',
  DEPLOYMENTS_AVERAGE_BLOCK_RANGE_DESC = 'DEPLOYMENTS_AVERAGE_BLOCK_RANGE_DESC',
  DEPLOYMENTS_AVERAGE_CREATED_BLOCK_ASC = 'DEPLOYMENTS_AVERAGE_CREATED_BLOCK_ASC',
  DEPLOYMENTS_AVERAGE_CREATED_BLOCK_DESC = 'DEPLOYMENTS_AVERAGE_CREATED_BLOCK_DESC',
  DEPLOYMENTS_AVERAGE_CREATED_TIMESTAMP_ASC = 'DEPLOYMENTS_AVERAGE_CREATED_TIMESTAMP_ASC',
  DEPLOYMENTS_AVERAGE_CREATED_TIMESTAMP_DESC = 'DEPLOYMENTS_AVERAGE_CREATED_TIMESTAMP_DESC',
  DEPLOYMENTS_AVERAGE_ID_ASC = 'DEPLOYMENTS_AVERAGE_ID_ASC',
  DEPLOYMENTS_AVERAGE_ID_DESC = 'DEPLOYMENTS_AVERAGE_ID_DESC',
  DEPLOYMENTS_AVERAGE_LAST_EVENT_ASC = 'DEPLOYMENTS_AVERAGE_LAST_EVENT_ASC',
  DEPLOYMENTS_AVERAGE_LAST_EVENT_DESC = 'DEPLOYMENTS_AVERAGE_LAST_EVENT_DESC',
  DEPLOYMENTS_AVERAGE_METADATA_ASC = 'DEPLOYMENTS_AVERAGE_METADATA_ASC',
  DEPLOYMENTS_AVERAGE_METADATA_DESC = 'DEPLOYMENTS_AVERAGE_METADATA_DESC',
  DEPLOYMENTS_AVERAGE_PROJECT_ID_ASC = 'DEPLOYMENTS_AVERAGE_PROJECT_ID_ASC',
  DEPLOYMENTS_AVERAGE_PROJECT_ID_DESC = 'DEPLOYMENTS_AVERAGE_PROJECT_ID_DESC',
  DEPLOYMENTS_BY_PROJECT_ID__COUNT_ASC = 'DEPLOYMENTS_BY_PROJECT_ID__COUNT_ASC',
  DEPLOYMENTS_BY_PROJECT_ID__COUNT_DESC = 'DEPLOYMENTS_BY_PROJECT_ID__COUNT_DESC',
  DEPLOYMENTS_COUNT_ASC = 'DEPLOYMENTS_COUNT_ASC',
  DEPLOYMENTS_COUNT_DESC = 'DEPLOYMENTS_COUNT_DESC',
  DEPLOYMENTS_DISTINCT_COUNT_BLOCK_RANGE_ASC = 'DEPLOYMENTS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  DEPLOYMENTS_DISTINCT_COUNT_BLOCK_RANGE_DESC = 'DEPLOYMENTS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  DEPLOYMENTS_DISTINCT_COUNT_CREATED_BLOCK_ASC = 'DEPLOYMENTS_DISTINCT_COUNT_CREATED_BLOCK_ASC',
  DEPLOYMENTS_DISTINCT_COUNT_CREATED_BLOCK_DESC = 'DEPLOYMENTS_DISTINCT_COUNT_CREATED_BLOCK_DESC',
  DEPLOYMENTS_DISTINCT_COUNT_CREATED_TIMESTAMP_ASC = 'DEPLOYMENTS_DISTINCT_COUNT_CREATED_TIMESTAMP_ASC',
  DEPLOYMENTS_DISTINCT_COUNT_CREATED_TIMESTAMP_DESC = 'DEPLOYMENTS_DISTINCT_COUNT_CREATED_TIMESTAMP_DESC',
  DEPLOYMENTS_DISTINCT_COUNT_ID_ASC = 'DEPLOYMENTS_DISTINCT_COUNT_ID_ASC',
  DEPLOYMENTS_DISTINCT_COUNT_ID_DESC = 'DEPLOYMENTS_DISTINCT_COUNT_ID_DESC',
  DEPLOYMENTS_DISTINCT_COUNT_LAST_EVENT_ASC = 'DEPLOYMENTS_DISTINCT_COUNT_LAST_EVENT_ASC',
  DEPLOYMENTS_DISTINCT_COUNT_LAST_EVENT_DESC = 'DEPLOYMENTS_DISTINCT_COUNT_LAST_EVENT_DESC',
  DEPLOYMENTS_DISTINCT_COUNT_METADATA_ASC = 'DEPLOYMENTS_DISTINCT_COUNT_METADATA_ASC',
  DEPLOYMENTS_DISTINCT_COUNT_METADATA_DESC = 'DEPLOYMENTS_DISTINCT_COUNT_METADATA_DESC',
  DEPLOYMENTS_DISTINCT_COUNT_PROJECT_ID_ASC = 'DEPLOYMENTS_DISTINCT_COUNT_PROJECT_ID_ASC',
  DEPLOYMENTS_DISTINCT_COUNT_PROJECT_ID_DESC = 'DEPLOYMENTS_DISTINCT_COUNT_PROJECT_ID_DESC',
  DEPLOYMENTS_MAX_BLOCK_RANGE_ASC = 'DEPLOYMENTS_MAX_BLOCK_RANGE_ASC',
  DEPLOYMENTS_MAX_BLOCK_RANGE_DESC = 'DEPLOYMENTS_MAX_BLOCK_RANGE_DESC',
  DEPLOYMENTS_MAX_CREATED_BLOCK_ASC = 'DEPLOYMENTS_MAX_CREATED_BLOCK_ASC',
  DEPLOYMENTS_MAX_CREATED_BLOCK_DESC = 'DEPLOYMENTS_MAX_CREATED_BLOCK_DESC',
  DEPLOYMENTS_MAX_CREATED_TIMESTAMP_ASC = 'DEPLOYMENTS_MAX_CREATED_TIMESTAMP_ASC',
  DEPLOYMENTS_MAX_CREATED_TIMESTAMP_DESC = 'DEPLOYMENTS_MAX_CREATED_TIMESTAMP_DESC',
  DEPLOYMENTS_MAX_ID_ASC = 'DEPLOYMENTS_MAX_ID_ASC',
  DEPLOYMENTS_MAX_ID_DESC = 'DEPLOYMENTS_MAX_ID_DESC',
  DEPLOYMENTS_MAX_LAST_EVENT_ASC = 'DEPLOYMENTS_MAX_LAST_EVENT_ASC',
  DEPLOYMENTS_MAX_LAST_EVENT_DESC = 'DEPLOYMENTS_MAX_LAST_EVENT_DESC',
  DEPLOYMENTS_MAX_METADATA_ASC = 'DEPLOYMENTS_MAX_METADATA_ASC',
  DEPLOYMENTS_MAX_METADATA_DESC = 'DEPLOYMENTS_MAX_METADATA_DESC',
  DEPLOYMENTS_MAX_PROJECT_ID_ASC = 'DEPLOYMENTS_MAX_PROJECT_ID_ASC',
  DEPLOYMENTS_MAX_PROJECT_ID_DESC = 'DEPLOYMENTS_MAX_PROJECT_ID_DESC',
  DEPLOYMENTS_MIN_BLOCK_RANGE_ASC = 'DEPLOYMENTS_MIN_BLOCK_RANGE_ASC',
  DEPLOYMENTS_MIN_BLOCK_RANGE_DESC = 'DEPLOYMENTS_MIN_BLOCK_RANGE_DESC',
  DEPLOYMENTS_MIN_CREATED_BLOCK_ASC = 'DEPLOYMENTS_MIN_CREATED_BLOCK_ASC',
  DEPLOYMENTS_MIN_CREATED_BLOCK_DESC = 'DEPLOYMENTS_MIN_CREATED_BLOCK_DESC',
  DEPLOYMENTS_MIN_CREATED_TIMESTAMP_ASC = 'DEPLOYMENTS_MIN_CREATED_TIMESTAMP_ASC',
  DEPLOYMENTS_MIN_CREATED_TIMESTAMP_DESC = 'DEPLOYMENTS_MIN_CREATED_TIMESTAMP_DESC',
  DEPLOYMENTS_MIN_ID_ASC = 'DEPLOYMENTS_MIN_ID_ASC',
  DEPLOYMENTS_MIN_ID_DESC = 'DEPLOYMENTS_MIN_ID_DESC',
  DEPLOYMENTS_MIN_LAST_EVENT_ASC = 'DEPLOYMENTS_MIN_LAST_EVENT_ASC',
  DEPLOYMENTS_MIN_LAST_EVENT_DESC = 'DEPLOYMENTS_MIN_LAST_EVENT_DESC',
  DEPLOYMENTS_MIN_METADATA_ASC = 'DEPLOYMENTS_MIN_METADATA_ASC',
  DEPLOYMENTS_MIN_METADATA_DESC = 'DEPLOYMENTS_MIN_METADATA_DESC',
  DEPLOYMENTS_MIN_PROJECT_ID_ASC = 'DEPLOYMENTS_MIN_PROJECT_ID_ASC',
  DEPLOYMENTS_MIN_PROJECT_ID_DESC = 'DEPLOYMENTS_MIN_PROJECT_ID_DESC',
  DEPLOYMENTS_STDDEV_POPULATION_BLOCK_RANGE_ASC = 'DEPLOYMENTS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  DEPLOYMENTS_STDDEV_POPULATION_BLOCK_RANGE_DESC = 'DEPLOYMENTS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  DEPLOYMENTS_STDDEV_POPULATION_CREATED_BLOCK_ASC = 'DEPLOYMENTS_STDDEV_POPULATION_CREATED_BLOCK_ASC',
  DEPLOYMENTS_STDDEV_POPULATION_CREATED_BLOCK_DESC = 'DEPLOYMENTS_STDDEV_POPULATION_CREATED_BLOCK_DESC',
  DEPLOYMENTS_STDDEV_POPULATION_CREATED_TIMESTAMP_ASC = 'DEPLOYMENTS_STDDEV_POPULATION_CREATED_TIMESTAMP_ASC',
  DEPLOYMENTS_STDDEV_POPULATION_CREATED_TIMESTAMP_DESC = 'DEPLOYMENTS_STDDEV_POPULATION_CREATED_TIMESTAMP_DESC',
  DEPLOYMENTS_STDDEV_POPULATION_ID_ASC = 'DEPLOYMENTS_STDDEV_POPULATION_ID_ASC',
  DEPLOYMENTS_STDDEV_POPULATION_ID_DESC = 'DEPLOYMENTS_STDDEV_POPULATION_ID_DESC',
  DEPLOYMENTS_STDDEV_POPULATION_LAST_EVENT_ASC = 'DEPLOYMENTS_STDDEV_POPULATION_LAST_EVENT_ASC',
  DEPLOYMENTS_STDDEV_POPULATION_LAST_EVENT_DESC = 'DEPLOYMENTS_STDDEV_POPULATION_LAST_EVENT_DESC',
  DEPLOYMENTS_STDDEV_POPULATION_METADATA_ASC = 'DEPLOYMENTS_STDDEV_POPULATION_METADATA_ASC',
  DEPLOYMENTS_STDDEV_POPULATION_METADATA_DESC = 'DEPLOYMENTS_STDDEV_POPULATION_METADATA_DESC',
  DEPLOYMENTS_STDDEV_POPULATION_PROJECT_ID_ASC = 'DEPLOYMENTS_STDDEV_POPULATION_PROJECT_ID_ASC',
  DEPLOYMENTS_STDDEV_POPULATION_PROJECT_ID_DESC = 'DEPLOYMENTS_STDDEV_POPULATION_PROJECT_ID_DESC',
  DEPLOYMENTS_STDDEV_SAMPLE_BLOCK_RANGE_ASC = 'DEPLOYMENTS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  DEPLOYMENTS_STDDEV_SAMPLE_BLOCK_RANGE_DESC = 'DEPLOYMENTS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  DEPLOYMENTS_STDDEV_SAMPLE_CREATED_BLOCK_ASC = 'DEPLOYMENTS_STDDEV_SAMPLE_CREATED_BLOCK_ASC',
  DEPLOYMENTS_STDDEV_SAMPLE_CREATED_BLOCK_DESC = 'DEPLOYMENTS_STDDEV_SAMPLE_CREATED_BLOCK_DESC',
  DEPLOYMENTS_STDDEV_SAMPLE_CREATED_TIMESTAMP_ASC = 'DEPLOYMENTS_STDDEV_SAMPLE_CREATED_TIMESTAMP_ASC',
  DEPLOYMENTS_STDDEV_SAMPLE_CREATED_TIMESTAMP_DESC = 'DEPLOYMENTS_STDDEV_SAMPLE_CREATED_TIMESTAMP_DESC',
  DEPLOYMENTS_STDDEV_SAMPLE_ID_ASC = 'DEPLOYMENTS_STDDEV_SAMPLE_ID_ASC',
  DEPLOYMENTS_STDDEV_SAMPLE_ID_DESC = 'DEPLOYMENTS_STDDEV_SAMPLE_ID_DESC',
  DEPLOYMENTS_STDDEV_SAMPLE_LAST_EVENT_ASC = 'DEPLOYMENTS_STDDEV_SAMPLE_LAST_EVENT_ASC',
  DEPLOYMENTS_STDDEV_SAMPLE_LAST_EVENT_DESC = 'DEPLOYMENTS_STDDEV_SAMPLE_LAST_EVENT_DESC',
  DEPLOYMENTS_STDDEV_SAMPLE_METADATA_ASC = 'DEPLOYMENTS_STDDEV_SAMPLE_METADATA_ASC',
  DEPLOYMENTS_STDDEV_SAMPLE_METADATA_DESC = 'DEPLOYMENTS_STDDEV_SAMPLE_METADATA_DESC',
  DEPLOYMENTS_STDDEV_SAMPLE_PROJECT_ID_ASC = 'DEPLOYMENTS_STDDEV_SAMPLE_PROJECT_ID_ASC',
  DEPLOYMENTS_STDDEV_SAMPLE_PROJECT_ID_DESC = 'DEPLOYMENTS_STDDEV_SAMPLE_PROJECT_ID_DESC',
  DEPLOYMENTS_SUM_BLOCK_RANGE_ASC = 'DEPLOYMENTS_SUM_BLOCK_RANGE_ASC',
  DEPLOYMENTS_SUM_BLOCK_RANGE_DESC = 'DEPLOYMENTS_SUM_BLOCK_RANGE_DESC',
  DEPLOYMENTS_SUM_CREATED_BLOCK_ASC = 'DEPLOYMENTS_SUM_CREATED_BLOCK_ASC',
  DEPLOYMENTS_SUM_CREATED_BLOCK_DESC = 'DEPLOYMENTS_SUM_CREATED_BLOCK_DESC',
  DEPLOYMENTS_SUM_CREATED_TIMESTAMP_ASC = 'DEPLOYMENTS_SUM_CREATED_TIMESTAMP_ASC',
  DEPLOYMENTS_SUM_CREATED_TIMESTAMP_DESC = 'DEPLOYMENTS_SUM_CREATED_TIMESTAMP_DESC',
  DEPLOYMENTS_SUM_ID_ASC = 'DEPLOYMENTS_SUM_ID_ASC',
  DEPLOYMENTS_SUM_ID_DESC = 'DEPLOYMENTS_SUM_ID_DESC',
  DEPLOYMENTS_SUM_LAST_EVENT_ASC = 'DEPLOYMENTS_SUM_LAST_EVENT_ASC',
  DEPLOYMENTS_SUM_LAST_EVENT_DESC = 'DEPLOYMENTS_SUM_LAST_EVENT_DESC',
  DEPLOYMENTS_SUM_METADATA_ASC = 'DEPLOYMENTS_SUM_METADATA_ASC',
  DEPLOYMENTS_SUM_METADATA_DESC = 'DEPLOYMENTS_SUM_METADATA_DESC',
  DEPLOYMENTS_SUM_PROJECT_ID_ASC = 'DEPLOYMENTS_SUM_PROJECT_ID_ASC',
  DEPLOYMENTS_SUM_PROJECT_ID_DESC = 'DEPLOYMENTS_SUM_PROJECT_ID_DESC',
  DEPLOYMENTS_VARIANCE_POPULATION_BLOCK_RANGE_ASC = 'DEPLOYMENTS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  DEPLOYMENTS_VARIANCE_POPULATION_BLOCK_RANGE_DESC = 'DEPLOYMENTS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  DEPLOYMENTS_VARIANCE_POPULATION_CREATED_BLOCK_ASC = 'DEPLOYMENTS_VARIANCE_POPULATION_CREATED_BLOCK_ASC',
  DEPLOYMENTS_VARIANCE_POPULATION_CREATED_BLOCK_DESC = 'DEPLOYMENTS_VARIANCE_POPULATION_CREATED_BLOCK_DESC',
  DEPLOYMENTS_VARIANCE_POPULATION_CREATED_TIMESTAMP_ASC = 'DEPLOYMENTS_VARIANCE_POPULATION_CREATED_TIMESTAMP_ASC',
  DEPLOYMENTS_VARIANCE_POPULATION_CREATED_TIMESTAMP_DESC = 'DEPLOYMENTS_VARIANCE_POPULATION_CREATED_TIMESTAMP_DESC',
  DEPLOYMENTS_VARIANCE_POPULATION_ID_ASC = 'DEPLOYMENTS_VARIANCE_POPULATION_ID_ASC',
  DEPLOYMENTS_VARIANCE_POPULATION_ID_DESC = 'DEPLOYMENTS_VARIANCE_POPULATION_ID_DESC',
  DEPLOYMENTS_VARIANCE_POPULATION_LAST_EVENT_ASC = 'DEPLOYMENTS_VARIANCE_POPULATION_LAST_EVENT_ASC',
  DEPLOYMENTS_VARIANCE_POPULATION_LAST_EVENT_DESC = 'DEPLOYMENTS_VARIANCE_POPULATION_LAST_EVENT_DESC',
  DEPLOYMENTS_VARIANCE_POPULATION_METADATA_ASC = 'DEPLOYMENTS_VARIANCE_POPULATION_METADATA_ASC',
  DEPLOYMENTS_VARIANCE_POPULATION_METADATA_DESC = 'DEPLOYMENTS_VARIANCE_POPULATION_METADATA_DESC',
  DEPLOYMENTS_VARIANCE_POPULATION_PROJECT_ID_ASC = 'DEPLOYMENTS_VARIANCE_POPULATION_PROJECT_ID_ASC',
  DEPLOYMENTS_VARIANCE_POPULATION_PROJECT_ID_DESC = 'DEPLOYMENTS_VARIANCE_POPULATION_PROJECT_ID_DESC',
  DEPLOYMENTS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC = 'DEPLOYMENTS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  DEPLOYMENTS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC = 'DEPLOYMENTS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  DEPLOYMENTS_VARIANCE_SAMPLE_CREATED_BLOCK_ASC = 'DEPLOYMENTS_VARIANCE_SAMPLE_CREATED_BLOCK_ASC',
  DEPLOYMENTS_VARIANCE_SAMPLE_CREATED_BLOCK_DESC = 'DEPLOYMENTS_VARIANCE_SAMPLE_CREATED_BLOCK_DESC',
  DEPLOYMENTS_VARIANCE_SAMPLE_CREATED_TIMESTAMP_ASC = 'DEPLOYMENTS_VARIANCE_SAMPLE_CREATED_TIMESTAMP_ASC',
  DEPLOYMENTS_VARIANCE_SAMPLE_CREATED_TIMESTAMP_DESC = 'DEPLOYMENTS_VARIANCE_SAMPLE_CREATED_TIMESTAMP_DESC',
  DEPLOYMENTS_VARIANCE_SAMPLE_ID_ASC = 'DEPLOYMENTS_VARIANCE_SAMPLE_ID_ASC',
  DEPLOYMENTS_VARIANCE_SAMPLE_ID_DESC = 'DEPLOYMENTS_VARIANCE_SAMPLE_ID_DESC',
  DEPLOYMENTS_VARIANCE_SAMPLE_LAST_EVENT_ASC = 'DEPLOYMENTS_VARIANCE_SAMPLE_LAST_EVENT_ASC',
  DEPLOYMENTS_VARIANCE_SAMPLE_LAST_EVENT_DESC = 'DEPLOYMENTS_VARIANCE_SAMPLE_LAST_EVENT_DESC',
  DEPLOYMENTS_VARIANCE_SAMPLE_METADATA_ASC = 'DEPLOYMENTS_VARIANCE_SAMPLE_METADATA_ASC',
  DEPLOYMENTS_VARIANCE_SAMPLE_METADATA_DESC = 'DEPLOYMENTS_VARIANCE_SAMPLE_METADATA_DESC',
  DEPLOYMENTS_VARIANCE_SAMPLE_PROJECT_ID_ASC = 'DEPLOYMENTS_VARIANCE_SAMPLE_PROJECT_ID_ASC',
  DEPLOYMENTS_VARIANCE_SAMPLE_PROJECT_ID_DESC = 'DEPLOYMENTS_VARIANCE_SAMPLE_PROJECT_ID_DESC',
  DEPLOYMENT_BOOSTERS_AVERAGE_AMOUNT_ADDED_ASC = 'DEPLOYMENT_BOOSTERS_AVERAGE_AMOUNT_ADDED_ASC',
  DEPLOYMENT_BOOSTERS_AVERAGE_AMOUNT_ADDED_DESC = 'DEPLOYMENT_BOOSTERS_AVERAGE_AMOUNT_ADDED_DESC',
  DEPLOYMENT_BOOSTERS_AVERAGE_AMOUNT_REMOVED_ASC = 'DEPLOYMENT_BOOSTERS_AVERAGE_AMOUNT_REMOVED_ASC',
  DEPLOYMENT_BOOSTERS_AVERAGE_AMOUNT_REMOVED_DESC = 'DEPLOYMENT_BOOSTERS_AVERAGE_AMOUNT_REMOVED_DESC',
  DEPLOYMENT_BOOSTERS_AVERAGE_BLOCK_RANGE_ASC = 'DEPLOYMENT_BOOSTERS_AVERAGE_BLOCK_RANGE_ASC',
  DEPLOYMENT_BOOSTERS_AVERAGE_BLOCK_RANGE_DESC = 'DEPLOYMENT_BOOSTERS_AVERAGE_BLOCK_RANGE_DESC',
  DEPLOYMENT_BOOSTERS_AVERAGE_CONSUMER_ASC = 'DEPLOYMENT_BOOSTERS_AVERAGE_CONSUMER_ASC',
  DEPLOYMENT_BOOSTERS_AVERAGE_CONSUMER_DESC = 'DEPLOYMENT_BOOSTERS_AVERAGE_CONSUMER_DESC',
  DEPLOYMENT_BOOSTERS_AVERAGE_CREATE_AT_ASC = 'DEPLOYMENT_BOOSTERS_AVERAGE_CREATE_AT_ASC',
  DEPLOYMENT_BOOSTERS_AVERAGE_CREATE_AT_DESC = 'DEPLOYMENT_BOOSTERS_AVERAGE_CREATE_AT_DESC',
  DEPLOYMENT_BOOSTERS_AVERAGE_DEPLOYMENT_ID_ASC = 'DEPLOYMENT_BOOSTERS_AVERAGE_DEPLOYMENT_ID_ASC',
  DEPLOYMENT_BOOSTERS_AVERAGE_DEPLOYMENT_ID_DESC = 'DEPLOYMENT_BOOSTERS_AVERAGE_DEPLOYMENT_ID_DESC',
  DEPLOYMENT_BOOSTERS_AVERAGE_ERA_IDX_ASC = 'DEPLOYMENT_BOOSTERS_AVERAGE_ERA_IDX_ASC',
  DEPLOYMENT_BOOSTERS_AVERAGE_ERA_IDX_DESC = 'DEPLOYMENT_BOOSTERS_AVERAGE_ERA_IDX_DESC',
  DEPLOYMENT_BOOSTERS_AVERAGE_ID_ASC = 'DEPLOYMENT_BOOSTERS_AVERAGE_ID_ASC',
  DEPLOYMENT_BOOSTERS_AVERAGE_ID_DESC = 'DEPLOYMENT_BOOSTERS_AVERAGE_ID_DESC',
  DEPLOYMENT_BOOSTERS_AVERAGE_PROJECT_ID_ASC = 'DEPLOYMENT_BOOSTERS_AVERAGE_PROJECT_ID_ASC',
  DEPLOYMENT_BOOSTERS_AVERAGE_PROJECT_ID_DESC = 'DEPLOYMENT_BOOSTERS_AVERAGE_PROJECT_ID_DESC',
  DEPLOYMENT_BOOSTERS_BY_PROJECT_ID__COUNT_ASC = 'DEPLOYMENT_BOOSTERS_BY_PROJECT_ID__COUNT_ASC',
  DEPLOYMENT_BOOSTERS_BY_PROJECT_ID__COUNT_DESC = 'DEPLOYMENT_BOOSTERS_BY_PROJECT_ID__COUNT_DESC',
  DEPLOYMENT_BOOSTERS_COUNT_ASC = 'DEPLOYMENT_BOOSTERS_COUNT_ASC',
  DEPLOYMENT_BOOSTERS_COUNT_DESC = 'DEPLOYMENT_BOOSTERS_COUNT_DESC',
  DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_AMOUNT_ADDED_ASC = 'DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_AMOUNT_ADDED_ASC',
  DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_AMOUNT_ADDED_DESC = 'DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_AMOUNT_ADDED_DESC',
  DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_AMOUNT_REMOVED_ASC = 'DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_AMOUNT_REMOVED_ASC',
  DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_AMOUNT_REMOVED_DESC = 'DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_AMOUNT_REMOVED_DESC',
  DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_BLOCK_RANGE_ASC = 'DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_BLOCK_RANGE_DESC = 'DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_CONSUMER_ASC = 'DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_CONSUMER_ASC',
  DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_CONSUMER_DESC = 'DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_CONSUMER_DESC',
  DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_CREATE_AT_ASC = 'DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_CREATE_AT_ASC',
  DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_CREATE_AT_DESC = 'DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_CREATE_AT_DESC',
  DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_DEPLOYMENT_ID_ASC = 'DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_DEPLOYMENT_ID_ASC',
  DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_DEPLOYMENT_ID_DESC = 'DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_DEPLOYMENT_ID_DESC',
  DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_ERA_IDX_ASC = 'DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_ERA_IDX_ASC',
  DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_ERA_IDX_DESC = 'DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_ERA_IDX_DESC',
  DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_ID_ASC = 'DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_ID_ASC',
  DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_ID_DESC = 'DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_ID_DESC',
  DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_PROJECT_ID_ASC = 'DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_PROJECT_ID_ASC',
  DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_PROJECT_ID_DESC = 'DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_PROJECT_ID_DESC',
  DEPLOYMENT_BOOSTERS_MAX_AMOUNT_ADDED_ASC = 'DEPLOYMENT_BOOSTERS_MAX_AMOUNT_ADDED_ASC',
  DEPLOYMENT_BOOSTERS_MAX_AMOUNT_ADDED_DESC = 'DEPLOYMENT_BOOSTERS_MAX_AMOUNT_ADDED_DESC',
  DEPLOYMENT_BOOSTERS_MAX_AMOUNT_REMOVED_ASC = 'DEPLOYMENT_BOOSTERS_MAX_AMOUNT_REMOVED_ASC',
  DEPLOYMENT_BOOSTERS_MAX_AMOUNT_REMOVED_DESC = 'DEPLOYMENT_BOOSTERS_MAX_AMOUNT_REMOVED_DESC',
  DEPLOYMENT_BOOSTERS_MAX_BLOCK_RANGE_ASC = 'DEPLOYMENT_BOOSTERS_MAX_BLOCK_RANGE_ASC',
  DEPLOYMENT_BOOSTERS_MAX_BLOCK_RANGE_DESC = 'DEPLOYMENT_BOOSTERS_MAX_BLOCK_RANGE_DESC',
  DEPLOYMENT_BOOSTERS_MAX_CONSUMER_ASC = 'DEPLOYMENT_BOOSTERS_MAX_CONSUMER_ASC',
  DEPLOYMENT_BOOSTERS_MAX_CONSUMER_DESC = 'DEPLOYMENT_BOOSTERS_MAX_CONSUMER_DESC',
  DEPLOYMENT_BOOSTERS_MAX_CREATE_AT_ASC = 'DEPLOYMENT_BOOSTERS_MAX_CREATE_AT_ASC',
  DEPLOYMENT_BOOSTERS_MAX_CREATE_AT_DESC = 'DEPLOYMENT_BOOSTERS_MAX_CREATE_AT_DESC',
  DEPLOYMENT_BOOSTERS_MAX_DEPLOYMENT_ID_ASC = 'DEPLOYMENT_BOOSTERS_MAX_DEPLOYMENT_ID_ASC',
  DEPLOYMENT_BOOSTERS_MAX_DEPLOYMENT_ID_DESC = 'DEPLOYMENT_BOOSTERS_MAX_DEPLOYMENT_ID_DESC',
  DEPLOYMENT_BOOSTERS_MAX_ERA_IDX_ASC = 'DEPLOYMENT_BOOSTERS_MAX_ERA_IDX_ASC',
  DEPLOYMENT_BOOSTERS_MAX_ERA_IDX_DESC = 'DEPLOYMENT_BOOSTERS_MAX_ERA_IDX_DESC',
  DEPLOYMENT_BOOSTERS_MAX_ID_ASC = 'DEPLOYMENT_BOOSTERS_MAX_ID_ASC',
  DEPLOYMENT_BOOSTERS_MAX_ID_DESC = 'DEPLOYMENT_BOOSTERS_MAX_ID_DESC',
  DEPLOYMENT_BOOSTERS_MAX_PROJECT_ID_ASC = 'DEPLOYMENT_BOOSTERS_MAX_PROJECT_ID_ASC',
  DEPLOYMENT_BOOSTERS_MAX_PROJECT_ID_DESC = 'DEPLOYMENT_BOOSTERS_MAX_PROJECT_ID_DESC',
  DEPLOYMENT_BOOSTERS_MIN_AMOUNT_ADDED_ASC = 'DEPLOYMENT_BOOSTERS_MIN_AMOUNT_ADDED_ASC',
  DEPLOYMENT_BOOSTERS_MIN_AMOUNT_ADDED_DESC = 'DEPLOYMENT_BOOSTERS_MIN_AMOUNT_ADDED_DESC',
  DEPLOYMENT_BOOSTERS_MIN_AMOUNT_REMOVED_ASC = 'DEPLOYMENT_BOOSTERS_MIN_AMOUNT_REMOVED_ASC',
  DEPLOYMENT_BOOSTERS_MIN_AMOUNT_REMOVED_DESC = 'DEPLOYMENT_BOOSTERS_MIN_AMOUNT_REMOVED_DESC',
  DEPLOYMENT_BOOSTERS_MIN_BLOCK_RANGE_ASC = 'DEPLOYMENT_BOOSTERS_MIN_BLOCK_RANGE_ASC',
  DEPLOYMENT_BOOSTERS_MIN_BLOCK_RANGE_DESC = 'DEPLOYMENT_BOOSTERS_MIN_BLOCK_RANGE_DESC',
  DEPLOYMENT_BOOSTERS_MIN_CONSUMER_ASC = 'DEPLOYMENT_BOOSTERS_MIN_CONSUMER_ASC',
  DEPLOYMENT_BOOSTERS_MIN_CONSUMER_DESC = 'DEPLOYMENT_BOOSTERS_MIN_CONSUMER_DESC',
  DEPLOYMENT_BOOSTERS_MIN_CREATE_AT_ASC = 'DEPLOYMENT_BOOSTERS_MIN_CREATE_AT_ASC',
  DEPLOYMENT_BOOSTERS_MIN_CREATE_AT_DESC = 'DEPLOYMENT_BOOSTERS_MIN_CREATE_AT_DESC',
  DEPLOYMENT_BOOSTERS_MIN_DEPLOYMENT_ID_ASC = 'DEPLOYMENT_BOOSTERS_MIN_DEPLOYMENT_ID_ASC',
  DEPLOYMENT_BOOSTERS_MIN_DEPLOYMENT_ID_DESC = 'DEPLOYMENT_BOOSTERS_MIN_DEPLOYMENT_ID_DESC',
  DEPLOYMENT_BOOSTERS_MIN_ERA_IDX_ASC = 'DEPLOYMENT_BOOSTERS_MIN_ERA_IDX_ASC',
  DEPLOYMENT_BOOSTERS_MIN_ERA_IDX_DESC = 'DEPLOYMENT_BOOSTERS_MIN_ERA_IDX_DESC',
  DEPLOYMENT_BOOSTERS_MIN_ID_ASC = 'DEPLOYMENT_BOOSTERS_MIN_ID_ASC',
  DEPLOYMENT_BOOSTERS_MIN_ID_DESC = 'DEPLOYMENT_BOOSTERS_MIN_ID_DESC',
  DEPLOYMENT_BOOSTERS_MIN_PROJECT_ID_ASC = 'DEPLOYMENT_BOOSTERS_MIN_PROJECT_ID_ASC',
  DEPLOYMENT_BOOSTERS_MIN_PROJECT_ID_DESC = 'DEPLOYMENT_BOOSTERS_MIN_PROJECT_ID_DESC',
  DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_AMOUNT_ADDED_ASC = 'DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_AMOUNT_ADDED_ASC',
  DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_AMOUNT_ADDED_DESC = 'DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_AMOUNT_ADDED_DESC',
  DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_AMOUNT_REMOVED_ASC = 'DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_AMOUNT_REMOVED_ASC',
  DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_AMOUNT_REMOVED_DESC = 'DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_AMOUNT_REMOVED_DESC',
  DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_BLOCK_RANGE_ASC = 'DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_BLOCK_RANGE_DESC = 'DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_CONSUMER_ASC = 'DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_CONSUMER_ASC',
  DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_CONSUMER_DESC = 'DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_CONSUMER_DESC',
  DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_CREATE_AT_ASC = 'DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_CREATE_AT_ASC',
  DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_CREATE_AT_DESC = 'DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_CREATE_AT_DESC',
  DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_DEPLOYMENT_ID_ASC = 'DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_DEPLOYMENT_ID_ASC',
  DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_DEPLOYMENT_ID_DESC = 'DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_DEPLOYMENT_ID_DESC',
  DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_ERA_IDX_ASC = 'DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_ERA_IDX_ASC',
  DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_ERA_IDX_DESC = 'DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_ERA_IDX_DESC',
  DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_ID_ASC = 'DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_ID_ASC',
  DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_ID_DESC = 'DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_ID_DESC',
  DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_PROJECT_ID_ASC = 'DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_PROJECT_ID_ASC',
  DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_PROJECT_ID_DESC = 'DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_PROJECT_ID_DESC',
  DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_AMOUNT_ADDED_ASC = 'DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_AMOUNT_ADDED_ASC',
  DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_AMOUNT_ADDED_DESC = 'DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_AMOUNT_ADDED_DESC',
  DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_AMOUNT_REMOVED_ASC = 'DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_AMOUNT_REMOVED_ASC',
  DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_AMOUNT_REMOVED_DESC = 'DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_AMOUNT_REMOVED_DESC',
  DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_BLOCK_RANGE_ASC = 'DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_BLOCK_RANGE_DESC = 'DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_CONSUMER_ASC = 'DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_CONSUMER_ASC',
  DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_CONSUMER_DESC = 'DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_CONSUMER_DESC',
  DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_CREATE_AT_ASC = 'DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_CREATE_AT_ASC',
  DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_CREATE_AT_DESC = 'DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_CREATE_AT_DESC',
  DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC = 'DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC',
  DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC = 'DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC',
  DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_ERA_IDX_ASC = 'DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_ERA_IDX_ASC',
  DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_ERA_IDX_DESC = 'DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_ERA_IDX_DESC',
  DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_ID_ASC = 'DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_ID_ASC',
  DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_ID_DESC = 'DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_ID_DESC',
  DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_PROJECT_ID_ASC = 'DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_PROJECT_ID_ASC',
  DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_PROJECT_ID_DESC = 'DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_PROJECT_ID_DESC',
  DEPLOYMENT_BOOSTERS_SUM_AMOUNT_ADDED_ASC = 'DEPLOYMENT_BOOSTERS_SUM_AMOUNT_ADDED_ASC',
  DEPLOYMENT_BOOSTERS_SUM_AMOUNT_ADDED_DESC = 'DEPLOYMENT_BOOSTERS_SUM_AMOUNT_ADDED_DESC',
  DEPLOYMENT_BOOSTERS_SUM_AMOUNT_REMOVED_ASC = 'DEPLOYMENT_BOOSTERS_SUM_AMOUNT_REMOVED_ASC',
  DEPLOYMENT_BOOSTERS_SUM_AMOUNT_REMOVED_DESC = 'DEPLOYMENT_BOOSTERS_SUM_AMOUNT_REMOVED_DESC',
  DEPLOYMENT_BOOSTERS_SUM_BLOCK_RANGE_ASC = 'DEPLOYMENT_BOOSTERS_SUM_BLOCK_RANGE_ASC',
  DEPLOYMENT_BOOSTERS_SUM_BLOCK_RANGE_DESC = 'DEPLOYMENT_BOOSTERS_SUM_BLOCK_RANGE_DESC',
  DEPLOYMENT_BOOSTERS_SUM_CONSUMER_ASC = 'DEPLOYMENT_BOOSTERS_SUM_CONSUMER_ASC',
  DEPLOYMENT_BOOSTERS_SUM_CONSUMER_DESC = 'DEPLOYMENT_BOOSTERS_SUM_CONSUMER_DESC',
  DEPLOYMENT_BOOSTERS_SUM_CREATE_AT_ASC = 'DEPLOYMENT_BOOSTERS_SUM_CREATE_AT_ASC',
  DEPLOYMENT_BOOSTERS_SUM_CREATE_AT_DESC = 'DEPLOYMENT_BOOSTERS_SUM_CREATE_AT_DESC',
  DEPLOYMENT_BOOSTERS_SUM_DEPLOYMENT_ID_ASC = 'DEPLOYMENT_BOOSTERS_SUM_DEPLOYMENT_ID_ASC',
  DEPLOYMENT_BOOSTERS_SUM_DEPLOYMENT_ID_DESC = 'DEPLOYMENT_BOOSTERS_SUM_DEPLOYMENT_ID_DESC',
  DEPLOYMENT_BOOSTERS_SUM_ERA_IDX_ASC = 'DEPLOYMENT_BOOSTERS_SUM_ERA_IDX_ASC',
  DEPLOYMENT_BOOSTERS_SUM_ERA_IDX_DESC = 'DEPLOYMENT_BOOSTERS_SUM_ERA_IDX_DESC',
  DEPLOYMENT_BOOSTERS_SUM_ID_ASC = 'DEPLOYMENT_BOOSTERS_SUM_ID_ASC',
  DEPLOYMENT_BOOSTERS_SUM_ID_DESC = 'DEPLOYMENT_BOOSTERS_SUM_ID_DESC',
  DEPLOYMENT_BOOSTERS_SUM_PROJECT_ID_ASC = 'DEPLOYMENT_BOOSTERS_SUM_PROJECT_ID_ASC',
  DEPLOYMENT_BOOSTERS_SUM_PROJECT_ID_DESC = 'DEPLOYMENT_BOOSTERS_SUM_PROJECT_ID_DESC',
  DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_AMOUNT_ADDED_ASC = 'DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_AMOUNT_ADDED_ASC',
  DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_AMOUNT_ADDED_DESC = 'DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_AMOUNT_ADDED_DESC',
  DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_AMOUNT_REMOVED_ASC = 'DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_AMOUNT_REMOVED_ASC',
  DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_AMOUNT_REMOVED_DESC = 'DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_AMOUNT_REMOVED_DESC',
  DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_BLOCK_RANGE_ASC = 'DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_BLOCK_RANGE_DESC = 'DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_CONSUMER_ASC = 'DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_CONSUMER_ASC',
  DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_CONSUMER_DESC = 'DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_CONSUMER_DESC',
  DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_CREATE_AT_ASC = 'DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_CREATE_AT_ASC',
  DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_CREATE_AT_DESC = 'DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_CREATE_AT_DESC',
  DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC = 'DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC',
  DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC = 'DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC',
  DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_ERA_IDX_ASC = 'DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_ERA_IDX_ASC',
  DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_ERA_IDX_DESC = 'DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_ERA_IDX_DESC',
  DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_ID_ASC = 'DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_ID_ASC',
  DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_ID_DESC = 'DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_ID_DESC',
  DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_PROJECT_ID_ASC = 'DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_PROJECT_ID_ASC',
  DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_PROJECT_ID_DESC = 'DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_PROJECT_ID_DESC',
  DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_AMOUNT_ADDED_ASC = 'DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_AMOUNT_ADDED_ASC',
  DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_AMOUNT_ADDED_DESC = 'DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_AMOUNT_ADDED_DESC',
  DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_AMOUNT_REMOVED_ASC = 'DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_AMOUNT_REMOVED_ASC',
  DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_AMOUNT_REMOVED_DESC = 'DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_AMOUNT_REMOVED_DESC',
  DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC = 'DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC = 'DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_CONSUMER_ASC = 'DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_CONSUMER_ASC',
  DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_CONSUMER_DESC = 'DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_CONSUMER_DESC',
  DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_CREATE_AT_ASC = 'DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_CREATE_AT_ASC',
  DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_CREATE_AT_DESC = 'DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_CREATE_AT_DESC',
  DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC = 'DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC',
  DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC = 'DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC',
  DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_ERA_IDX_ASC = 'DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_ERA_IDX_ASC',
  DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_ERA_IDX_DESC = 'DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_ERA_IDX_DESC',
  DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_ID_ASC = 'DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_ID_ASC',
  DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_ID_DESC = 'DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_ID_DESC',
  DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_PROJECT_ID_ASC = 'DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_PROJECT_ID_ASC',
  DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_PROJECT_ID_DESC = 'DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_PROJECT_ID_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_BLOCK_RANGE_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_BLOCK_RANGE_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_BLOCK_RANGE_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_BLOCK_RANGE_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_CONSUMER_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_CONSUMER_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_CONSUMER_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_CONSUMER_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_CREATE_AT_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_CREATE_AT_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_CREATE_AT_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_CREATE_AT_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_DEPLOYMENT_ID_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_DEPLOYMENT_ID_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_DEPLOYMENT_ID_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_DEPLOYMENT_ID_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_ID_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_ID_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_ID_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_ID_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_PROJECT_ID_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_PROJECT_ID_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_PROJECT_ID_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_PROJECT_ID_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_TOTAL_ADDED_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_TOTAL_ADDED_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_TOTAL_ADDED_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_TOTAL_ADDED_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_TOTAL_AMOUNT_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_TOTAL_AMOUNT_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_TOTAL_AMOUNT_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_TOTAL_AMOUNT_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_TOTAL_REMOVED_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_TOTAL_REMOVED_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_TOTAL_REMOVED_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_TOTAL_REMOVED_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_UPDATE_AT_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_UPDATE_AT_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_UPDATE_AT_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_UPDATE_AT_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_BY_PROJECT_ID__COUNT_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_BY_PROJECT_ID__COUNT_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_BY_PROJECT_ID__COUNT_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_BY_PROJECT_ID__COUNT_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_COUNT_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_COUNT_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_COUNT_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_COUNT_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_BLOCK_RANGE_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_BLOCK_RANGE_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_CONSUMER_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_CONSUMER_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_CONSUMER_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_CONSUMER_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_CREATE_AT_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_CREATE_AT_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_CREATE_AT_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_CREATE_AT_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_DEPLOYMENT_ID_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_DEPLOYMENT_ID_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_DEPLOYMENT_ID_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_DEPLOYMENT_ID_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_ID_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_ID_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_ID_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_ID_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_PROJECT_ID_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_PROJECT_ID_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_PROJECT_ID_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_PROJECT_ID_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_TOTAL_ADDED_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_TOTAL_ADDED_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_TOTAL_ADDED_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_TOTAL_ADDED_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_TOTAL_AMOUNT_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_TOTAL_AMOUNT_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_TOTAL_AMOUNT_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_TOTAL_AMOUNT_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_TOTAL_REMOVED_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_TOTAL_REMOVED_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_TOTAL_REMOVED_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_TOTAL_REMOVED_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_UPDATE_AT_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_UPDATE_AT_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_UPDATE_AT_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_UPDATE_AT_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MAX_BLOCK_RANGE_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_BLOCK_RANGE_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MAX_BLOCK_RANGE_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_BLOCK_RANGE_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MAX_CONSUMER_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_CONSUMER_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MAX_CONSUMER_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_CONSUMER_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MAX_CREATE_AT_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_CREATE_AT_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MAX_CREATE_AT_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_CREATE_AT_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MAX_DEPLOYMENT_ID_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_DEPLOYMENT_ID_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MAX_DEPLOYMENT_ID_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_DEPLOYMENT_ID_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MAX_ID_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_ID_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MAX_ID_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_ID_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MAX_PROJECT_ID_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_PROJECT_ID_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MAX_PROJECT_ID_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_PROJECT_ID_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MAX_TOTAL_ADDED_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_TOTAL_ADDED_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MAX_TOTAL_ADDED_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_TOTAL_ADDED_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MAX_TOTAL_AMOUNT_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_TOTAL_AMOUNT_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MAX_TOTAL_AMOUNT_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_TOTAL_AMOUNT_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MAX_TOTAL_REMOVED_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_TOTAL_REMOVED_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MAX_TOTAL_REMOVED_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_TOTAL_REMOVED_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MAX_UPDATE_AT_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_UPDATE_AT_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MAX_UPDATE_AT_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_UPDATE_AT_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MIN_BLOCK_RANGE_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_BLOCK_RANGE_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MIN_BLOCK_RANGE_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_BLOCK_RANGE_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MIN_CONSUMER_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_CONSUMER_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MIN_CONSUMER_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_CONSUMER_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MIN_CREATE_AT_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_CREATE_AT_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MIN_CREATE_AT_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_CREATE_AT_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MIN_DEPLOYMENT_ID_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_DEPLOYMENT_ID_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MIN_DEPLOYMENT_ID_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_DEPLOYMENT_ID_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MIN_ID_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_ID_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MIN_ID_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_ID_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MIN_PROJECT_ID_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_PROJECT_ID_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MIN_PROJECT_ID_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_PROJECT_ID_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MIN_TOTAL_ADDED_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_TOTAL_ADDED_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MIN_TOTAL_ADDED_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_TOTAL_ADDED_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MIN_TOTAL_AMOUNT_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_TOTAL_AMOUNT_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MIN_TOTAL_AMOUNT_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_TOTAL_AMOUNT_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MIN_TOTAL_REMOVED_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_TOTAL_REMOVED_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MIN_TOTAL_REMOVED_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_TOTAL_REMOVED_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MIN_UPDATE_AT_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_UPDATE_AT_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_MIN_UPDATE_AT_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_UPDATE_AT_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_BLOCK_RANGE_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_BLOCK_RANGE_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_CONSUMER_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_CONSUMER_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_CONSUMER_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_CONSUMER_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_CREATE_AT_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_CREATE_AT_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_CREATE_AT_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_CREATE_AT_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_DEPLOYMENT_ID_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_DEPLOYMENT_ID_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_DEPLOYMENT_ID_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_DEPLOYMENT_ID_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_ID_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_ID_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_ID_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_ID_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_PROJECT_ID_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_PROJECT_ID_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_PROJECT_ID_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_PROJECT_ID_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_TOTAL_ADDED_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_TOTAL_ADDED_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_TOTAL_ADDED_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_TOTAL_ADDED_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_TOTAL_AMOUNT_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_TOTAL_AMOUNT_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_TOTAL_AMOUNT_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_TOTAL_AMOUNT_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_TOTAL_REMOVED_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_TOTAL_REMOVED_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_TOTAL_REMOVED_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_TOTAL_REMOVED_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_UPDATE_AT_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_UPDATE_AT_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_UPDATE_AT_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_UPDATE_AT_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_BLOCK_RANGE_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_BLOCK_RANGE_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_CONSUMER_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_CONSUMER_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_CONSUMER_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_CONSUMER_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_CREATE_AT_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_CREATE_AT_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_CREATE_AT_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_CREATE_AT_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_ID_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_ID_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_ID_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_ID_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_PROJECT_ID_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_PROJECT_ID_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_PROJECT_ID_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_PROJECT_ID_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_TOTAL_ADDED_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_TOTAL_ADDED_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_TOTAL_ADDED_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_TOTAL_ADDED_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_TOTAL_AMOUNT_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_TOTAL_AMOUNT_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_TOTAL_AMOUNT_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_TOTAL_AMOUNT_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_TOTAL_REMOVED_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_TOTAL_REMOVED_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_TOTAL_REMOVED_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_TOTAL_REMOVED_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_UPDATE_AT_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_UPDATE_AT_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_UPDATE_AT_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_UPDATE_AT_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_SUM_BLOCK_RANGE_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_BLOCK_RANGE_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_SUM_BLOCK_RANGE_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_BLOCK_RANGE_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_SUM_CONSUMER_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_CONSUMER_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_SUM_CONSUMER_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_CONSUMER_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_SUM_CREATE_AT_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_CREATE_AT_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_SUM_CREATE_AT_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_CREATE_AT_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_SUM_DEPLOYMENT_ID_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_DEPLOYMENT_ID_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_SUM_DEPLOYMENT_ID_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_DEPLOYMENT_ID_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_SUM_ID_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_ID_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_SUM_ID_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_ID_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_SUM_PROJECT_ID_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_PROJECT_ID_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_SUM_PROJECT_ID_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_PROJECT_ID_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_SUM_TOTAL_ADDED_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_TOTAL_ADDED_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_SUM_TOTAL_ADDED_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_TOTAL_ADDED_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_SUM_TOTAL_AMOUNT_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_TOTAL_AMOUNT_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_SUM_TOTAL_AMOUNT_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_TOTAL_AMOUNT_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_SUM_TOTAL_REMOVED_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_TOTAL_REMOVED_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_SUM_TOTAL_REMOVED_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_TOTAL_REMOVED_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_SUM_UPDATE_AT_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_UPDATE_AT_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_SUM_UPDATE_AT_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_UPDATE_AT_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_BLOCK_RANGE_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_BLOCK_RANGE_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_CONSUMER_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_CONSUMER_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_CONSUMER_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_CONSUMER_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_CREATE_AT_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_CREATE_AT_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_CREATE_AT_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_CREATE_AT_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_ID_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_ID_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_ID_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_ID_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_PROJECT_ID_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_PROJECT_ID_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_PROJECT_ID_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_PROJECT_ID_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_TOTAL_ADDED_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_TOTAL_ADDED_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_TOTAL_ADDED_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_TOTAL_ADDED_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_TOTAL_AMOUNT_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_TOTAL_AMOUNT_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_TOTAL_AMOUNT_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_TOTAL_AMOUNT_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_TOTAL_REMOVED_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_TOTAL_REMOVED_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_TOTAL_REMOVED_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_TOTAL_REMOVED_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_UPDATE_AT_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_UPDATE_AT_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_UPDATE_AT_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_UPDATE_AT_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_CONSUMER_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_CONSUMER_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_CONSUMER_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_CONSUMER_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_CREATE_AT_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_CREATE_AT_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_CREATE_AT_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_CREATE_AT_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_ID_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_ID_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_ID_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_ID_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_PROJECT_ID_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_PROJECT_ID_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_PROJECT_ID_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_PROJECT_ID_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_TOTAL_ADDED_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_TOTAL_ADDED_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_TOTAL_ADDED_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_TOTAL_ADDED_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_TOTAL_AMOUNT_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_TOTAL_AMOUNT_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_TOTAL_AMOUNT_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_TOTAL_AMOUNT_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_TOTAL_REMOVED_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_TOTAL_REMOVED_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_TOTAL_REMOVED_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_TOTAL_REMOVED_DESC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_UPDATE_AT_ASC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_UPDATE_AT_ASC',
  DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_UPDATE_AT_DESC = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_UPDATE_AT_DESC',
  DEPLOYMENT_ID_ASC = 'DEPLOYMENT_ID_ASC',
  DEPLOYMENT_ID_DESC = 'DEPLOYMENT_ID_DESC',
  DEPLOYMENT_METADATA_ASC = 'DEPLOYMENT_METADATA_ASC',
  DEPLOYMENT_METADATA_DESC = 'DEPLOYMENT_METADATA_DESC',
  ID_ASC = 'ID_ASC',
  ID_DESC = 'ID_DESC',
  INDEXER_ALLOCATIONS_AVERAGE_AMOUNT_ADDED_ASC = 'INDEXER_ALLOCATIONS_AVERAGE_AMOUNT_ADDED_ASC',
  INDEXER_ALLOCATIONS_AVERAGE_AMOUNT_ADDED_DESC = 'INDEXER_ALLOCATIONS_AVERAGE_AMOUNT_ADDED_DESC',
  INDEXER_ALLOCATIONS_AVERAGE_AMOUNT_REMOVED_ASC = 'INDEXER_ALLOCATIONS_AVERAGE_AMOUNT_REMOVED_ASC',
  INDEXER_ALLOCATIONS_AVERAGE_AMOUNT_REMOVED_DESC = 'INDEXER_ALLOCATIONS_AVERAGE_AMOUNT_REMOVED_DESC',
  INDEXER_ALLOCATIONS_AVERAGE_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATIONS_AVERAGE_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATIONS_AVERAGE_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATIONS_AVERAGE_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATIONS_AVERAGE_CREATE_AT_ASC = 'INDEXER_ALLOCATIONS_AVERAGE_CREATE_AT_ASC',
  INDEXER_ALLOCATIONS_AVERAGE_CREATE_AT_DESC = 'INDEXER_ALLOCATIONS_AVERAGE_CREATE_AT_DESC',
  INDEXER_ALLOCATIONS_AVERAGE_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATIONS_AVERAGE_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATIONS_AVERAGE_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATIONS_AVERAGE_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATIONS_AVERAGE_ERA_IDX_ASC = 'INDEXER_ALLOCATIONS_AVERAGE_ERA_IDX_ASC',
  INDEXER_ALLOCATIONS_AVERAGE_ERA_IDX_DESC = 'INDEXER_ALLOCATIONS_AVERAGE_ERA_IDX_DESC',
  INDEXER_ALLOCATIONS_AVERAGE_ID_ASC = 'INDEXER_ALLOCATIONS_AVERAGE_ID_ASC',
  INDEXER_ALLOCATIONS_AVERAGE_ID_DESC = 'INDEXER_ALLOCATIONS_AVERAGE_ID_DESC',
  INDEXER_ALLOCATIONS_AVERAGE_INDEXER_ID_ASC = 'INDEXER_ALLOCATIONS_AVERAGE_INDEXER_ID_ASC',
  INDEXER_ALLOCATIONS_AVERAGE_INDEXER_ID_DESC = 'INDEXER_ALLOCATIONS_AVERAGE_INDEXER_ID_DESC',
  INDEXER_ALLOCATIONS_AVERAGE_PROJECT_ID_ASC = 'INDEXER_ALLOCATIONS_AVERAGE_PROJECT_ID_ASC',
  INDEXER_ALLOCATIONS_AVERAGE_PROJECT_ID_DESC = 'INDEXER_ALLOCATIONS_AVERAGE_PROJECT_ID_DESC',
  INDEXER_ALLOCATIONS_BY_PROJECT_ID__COUNT_ASC = 'INDEXER_ALLOCATIONS_BY_PROJECT_ID__COUNT_ASC',
  INDEXER_ALLOCATIONS_BY_PROJECT_ID__COUNT_DESC = 'INDEXER_ALLOCATIONS_BY_PROJECT_ID__COUNT_DESC',
  INDEXER_ALLOCATIONS_COUNT_ASC = 'INDEXER_ALLOCATIONS_COUNT_ASC',
  INDEXER_ALLOCATIONS_COUNT_DESC = 'INDEXER_ALLOCATIONS_COUNT_DESC',
  INDEXER_ALLOCATIONS_DISTINCT_COUNT_AMOUNT_ADDED_ASC = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_AMOUNT_ADDED_ASC',
  INDEXER_ALLOCATIONS_DISTINCT_COUNT_AMOUNT_ADDED_DESC = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_AMOUNT_ADDED_DESC',
  INDEXER_ALLOCATIONS_DISTINCT_COUNT_AMOUNT_REMOVED_ASC = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_AMOUNT_REMOVED_ASC',
  INDEXER_ALLOCATIONS_DISTINCT_COUNT_AMOUNT_REMOVED_DESC = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_AMOUNT_REMOVED_DESC',
  INDEXER_ALLOCATIONS_DISTINCT_COUNT_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATIONS_DISTINCT_COUNT_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATIONS_DISTINCT_COUNT_CREATE_AT_ASC = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_CREATE_AT_ASC',
  INDEXER_ALLOCATIONS_DISTINCT_COUNT_CREATE_AT_DESC = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_CREATE_AT_DESC',
  INDEXER_ALLOCATIONS_DISTINCT_COUNT_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATIONS_DISTINCT_COUNT_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATIONS_DISTINCT_COUNT_ERA_IDX_ASC = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_ERA_IDX_ASC',
  INDEXER_ALLOCATIONS_DISTINCT_COUNT_ERA_IDX_DESC = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_ERA_IDX_DESC',
  INDEXER_ALLOCATIONS_DISTINCT_COUNT_ID_ASC = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_ID_ASC',
  INDEXER_ALLOCATIONS_DISTINCT_COUNT_ID_DESC = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_ID_DESC',
  INDEXER_ALLOCATIONS_DISTINCT_COUNT_INDEXER_ID_ASC = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_INDEXER_ID_ASC',
  INDEXER_ALLOCATIONS_DISTINCT_COUNT_INDEXER_ID_DESC = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_INDEXER_ID_DESC',
  INDEXER_ALLOCATIONS_DISTINCT_COUNT_PROJECT_ID_ASC = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_PROJECT_ID_ASC',
  INDEXER_ALLOCATIONS_DISTINCT_COUNT_PROJECT_ID_DESC = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_PROJECT_ID_DESC',
  INDEXER_ALLOCATIONS_MAX_AMOUNT_ADDED_ASC = 'INDEXER_ALLOCATIONS_MAX_AMOUNT_ADDED_ASC',
  INDEXER_ALLOCATIONS_MAX_AMOUNT_ADDED_DESC = 'INDEXER_ALLOCATIONS_MAX_AMOUNT_ADDED_DESC',
  INDEXER_ALLOCATIONS_MAX_AMOUNT_REMOVED_ASC = 'INDEXER_ALLOCATIONS_MAX_AMOUNT_REMOVED_ASC',
  INDEXER_ALLOCATIONS_MAX_AMOUNT_REMOVED_DESC = 'INDEXER_ALLOCATIONS_MAX_AMOUNT_REMOVED_DESC',
  INDEXER_ALLOCATIONS_MAX_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATIONS_MAX_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATIONS_MAX_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATIONS_MAX_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATIONS_MAX_CREATE_AT_ASC = 'INDEXER_ALLOCATIONS_MAX_CREATE_AT_ASC',
  INDEXER_ALLOCATIONS_MAX_CREATE_AT_DESC = 'INDEXER_ALLOCATIONS_MAX_CREATE_AT_DESC',
  INDEXER_ALLOCATIONS_MAX_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATIONS_MAX_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATIONS_MAX_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATIONS_MAX_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATIONS_MAX_ERA_IDX_ASC = 'INDEXER_ALLOCATIONS_MAX_ERA_IDX_ASC',
  INDEXER_ALLOCATIONS_MAX_ERA_IDX_DESC = 'INDEXER_ALLOCATIONS_MAX_ERA_IDX_DESC',
  INDEXER_ALLOCATIONS_MAX_ID_ASC = 'INDEXER_ALLOCATIONS_MAX_ID_ASC',
  INDEXER_ALLOCATIONS_MAX_ID_DESC = 'INDEXER_ALLOCATIONS_MAX_ID_DESC',
  INDEXER_ALLOCATIONS_MAX_INDEXER_ID_ASC = 'INDEXER_ALLOCATIONS_MAX_INDEXER_ID_ASC',
  INDEXER_ALLOCATIONS_MAX_INDEXER_ID_DESC = 'INDEXER_ALLOCATIONS_MAX_INDEXER_ID_DESC',
  INDEXER_ALLOCATIONS_MAX_PROJECT_ID_ASC = 'INDEXER_ALLOCATIONS_MAX_PROJECT_ID_ASC',
  INDEXER_ALLOCATIONS_MAX_PROJECT_ID_DESC = 'INDEXER_ALLOCATIONS_MAX_PROJECT_ID_DESC',
  INDEXER_ALLOCATIONS_MIN_AMOUNT_ADDED_ASC = 'INDEXER_ALLOCATIONS_MIN_AMOUNT_ADDED_ASC',
  INDEXER_ALLOCATIONS_MIN_AMOUNT_ADDED_DESC = 'INDEXER_ALLOCATIONS_MIN_AMOUNT_ADDED_DESC',
  INDEXER_ALLOCATIONS_MIN_AMOUNT_REMOVED_ASC = 'INDEXER_ALLOCATIONS_MIN_AMOUNT_REMOVED_ASC',
  INDEXER_ALLOCATIONS_MIN_AMOUNT_REMOVED_DESC = 'INDEXER_ALLOCATIONS_MIN_AMOUNT_REMOVED_DESC',
  INDEXER_ALLOCATIONS_MIN_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATIONS_MIN_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATIONS_MIN_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATIONS_MIN_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATIONS_MIN_CREATE_AT_ASC = 'INDEXER_ALLOCATIONS_MIN_CREATE_AT_ASC',
  INDEXER_ALLOCATIONS_MIN_CREATE_AT_DESC = 'INDEXER_ALLOCATIONS_MIN_CREATE_AT_DESC',
  INDEXER_ALLOCATIONS_MIN_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATIONS_MIN_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATIONS_MIN_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATIONS_MIN_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATIONS_MIN_ERA_IDX_ASC = 'INDEXER_ALLOCATIONS_MIN_ERA_IDX_ASC',
  INDEXER_ALLOCATIONS_MIN_ERA_IDX_DESC = 'INDEXER_ALLOCATIONS_MIN_ERA_IDX_DESC',
  INDEXER_ALLOCATIONS_MIN_ID_ASC = 'INDEXER_ALLOCATIONS_MIN_ID_ASC',
  INDEXER_ALLOCATIONS_MIN_ID_DESC = 'INDEXER_ALLOCATIONS_MIN_ID_DESC',
  INDEXER_ALLOCATIONS_MIN_INDEXER_ID_ASC = 'INDEXER_ALLOCATIONS_MIN_INDEXER_ID_ASC',
  INDEXER_ALLOCATIONS_MIN_INDEXER_ID_DESC = 'INDEXER_ALLOCATIONS_MIN_INDEXER_ID_DESC',
  INDEXER_ALLOCATIONS_MIN_PROJECT_ID_ASC = 'INDEXER_ALLOCATIONS_MIN_PROJECT_ID_ASC',
  INDEXER_ALLOCATIONS_MIN_PROJECT_ID_DESC = 'INDEXER_ALLOCATIONS_MIN_PROJECT_ID_DESC',
  INDEXER_ALLOCATIONS_STDDEV_POPULATION_AMOUNT_ADDED_ASC = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_AMOUNT_ADDED_ASC',
  INDEXER_ALLOCATIONS_STDDEV_POPULATION_AMOUNT_ADDED_DESC = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_AMOUNT_ADDED_DESC',
  INDEXER_ALLOCATIONS_STDDEV_POPULATION_AMOUNT_REMOVED_ASC = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_AMOUNT_REMOVED_ASC',
  INDEXER_ALLOCATIONS_STDDEV_POPULATION_AMOUNT_REMOVED_DESC = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_AMOUNT_REMOVED_DESC',
  INDEXER_ALLOCATIONS_STDDEV_POPULATION_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATIONS_STDDEV_POPULATION_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATIONS_STDDEV_POPULATION_CREATE_AT_ASC = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_CREATE_AT_ASC',
  INDEXER_ALLOCATIONS_STDDEV_POPULATION_CREATE_AT_DESC = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_CREATE_AT_DESC',
  INDEXER_ALLOCATIONS_STDDEV_POPULATION_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATIONS_STDDEV_POPULATION_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATIONS_STDDEV_POPULATION_ERA_IDX_ASC = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_ERA_IDX_ASC',
  INDEXER_ALLOCATIONS_STDDEV_POPULATION_ERA_IDX_DESC = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_ERA_IDX_DESC',
  INDEXER_ALLOCATIONS_STDDEV_POPULATION_ID_ASC = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_ID_ASC',
  INDEXER_ALLOCATIONS_STDDEV_POPULATION_ID_DESC = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_ID_DESC',
  INDEXER_ALLOCATIONS_STDDEV_POPULATION_INDEXER_ID_ASC = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_INDEXER_ID_ASC',
  INDEXER_ALLOCATIONS_STDDEV_POPULATION_INDEXER_ID_DESC = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_INDEXER_ID_DESC',
  INDEXER_ALLOCATIONS_STDDEV_POPULATION_PROJECT_ID_ASC = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_PROJECT_ID_ASC',
  INDEXER_ALLOCATIONS_STDDEV_POPULATION_PROJECT_ID_DESC = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_PROJECT_ID_DESC',
  INDEXER_ALLOCATIONS_STDDEV_SAMPLE_AMOUNT_ADDED_ASC = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_AMOUNT_ADDED_ASC',
  INDEXER_ALLOCATIONS_STDDEV_SAMPLE_AMOUNT_ADDED_DESC = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_AMOUNT_ADDED_DESC',
  INDEXER_ALLOCATIONS_STDDEV_SAMPLE_AMOUNT_REMOVED_ASC = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_AMOUNT_REMOVED_ASC',
  INDEXER_ALLOCATIONS_STDDEV_SAMPLE_AMOUNT_REMOVED_DESC = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_AMOUNT_REMOVED_DESC',
  INDEXER_ALLOCATIONS_STDDEV_SAMPLE_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATIONS_STDDEV_SAMPLE_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATIONS_STDDEV_SAMPLE_CREATE_AT_ASC = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_CREATE_AT_ASC',
  INDEXER_ALLOCATIONS_STDDEV_SAMPLE_CREATE_AT_DESC = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_CREATE_AT_DESC',
  INDEXER_ALLOCATIONS_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATIONS_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATIONS_STDDEV_SAMPLE_ERA_IDX_ASC = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_ERA_IDX_ASC',
  INDEXER_ALLOCATIONS_STDDEV_SAMPLE_ERA_IDX_DESC = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_ERA_IDX_DESC',
  INDEXER_ALLOCATIONS_STDDEV_SAMPLE_ID_ASC = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_ID_ASC',
  INDEXER_ALLOCATIONS_STDDEV_SAMPLE_ID_DESC = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_ID_DESC',
  INDEXER_ALLOCATIONS_STDDEV_SAMPLE_INDEXER_ID_ASC = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_INDEXER_ID_ASC',
  INDEXER_ALLOCATIONS_STDDEV_SAMPLE_INDEXER_ID_DESC = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_INDEXER_ID_DESC',
  INDEXER_ALLOCATIONS_STDDEV_SAMPLE_PROJECT_ID_ASC = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_PROJECT_ID_ASC',
  INDEXER_ALLOCATIONS_STDDEV_SAMPLE_PROJECT_ID_DESC = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_PROJECT_ID_DESC',
  INDEXER_ALLOCATIONS_SUM_AMOUNT_ADDED_ASC = 'INDEXER_ALLOCATIONS_SUM_AMOUNT_ADDED_ASC',
  INDEXER_ALLOCATIONS_SUM_AMOUNT_ADDED_DESC = 'INDEXER_ALLOCATIONS_SUM_AMOUNT_ADDED_DESC',
  INDEXER_ALLOCATIONS_SUM_AMOUNT_REMOVED_ASC = 'INDEXER_ALLOCATIONS_SUM_AMOUNT_REMOVED_ASC',
  INDEXER_ALLOCATIONS_SUM_AMOUNT_REMOVED_DESC = 'INDEXER_ALLOCATIONS_SUM_AMOUNT_REMOVED_DESC',
  INDEXER_ALLOCATIONS_SUM_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATIONS_SUM_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATIONS_SUM_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATIONS_SUM_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATIONS_SUM_CREATE_AT_ASC = 'INDEXER_ALLOCATIONS_SUM_CREATE_AT_ASC',
  INDEXER_ALLOCATIONS_SUM_CREATE_AT_DESC = 'INDEXER_ALLOCATIONS_SUM_CREATE_AT_DESC',
  INDEXER_ALLOCATIONS_SUM_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATIONS_SUM_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATIONS_SUM_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATIONS_SUM_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATIONS_SUM_ERA_IDX_ASC = 'INDEXER_ALLOCATIONS_SUM_ERA_IDX_ASC',
  INDEXER_ALLOCATIONS_SUM_ERA_IDX_DESC = 'INDEXER_ALLOCATIONS_SUM_ERA_IDX_DESC',
  INDEXER_ALLOCATIONS_SUM_ID_ASC = 'INDEXER_ALLOCATIONS_SUM_ID_ASC',
  INDEXER_ALLOCATIONS_SUM_ID_DESC = 'INDEXER_ALLOCATIONS_SUM_ID_DESC',
  INDEXER_ALLOCATIONS_SUM_INDEXER_ID_ASC = 'INDEXER_ALLOCATIONS_SUM_INDEXER_ID_ASC',
  INDEXER_ALLOCATIONS_SUM_INDEXER_ID_DESC = 'INDEXER_ALLOCATIONS_SUM_INDEXER_ID_DESC',
  INDEXER_ALLOCATIONS_SUM_PROJECT_ID_ASC = 'INDEXER_ALLOCATIONS_SUM_PROJECT_ID_ASC',
  INDEXER_ALLOCATIONS_SUM_PROJECT_ID_DESC = 'INDEXER_ALLOCATIONS_SUM_PROJECT_ID_DESC',
  INDEXER_ALLOCATIONS_VARIANCE_POPULATION_AMOUNT_ADDED_ASC = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_AMOUNT_ADDED_ASC',
  INDEXER_ALLOCATIONS_VARIANCE_POPULATION_AMOUNT_ADDED_DESC = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_AMOUNT_ADDED_DESC',
  INDEXER_ALLOCATIONS_VARIANCE_POPULATION_AMOUNT_REMOVED_ASC = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_AMOUNT_REMOVED_ASC',
  INDEXER_ALLOCATIONS_VARIANCE_POPULATION_AMOUNT_REMOVED_DESC = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_AMOUNT_REMOVED_DESC',
  INDEXER_ALLOCATIONS_VARIANCE_POPULATION_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATIONS_VARIANCE_POPULATION_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATIONS_VARIANCE_POPULATION_CREATE_AT_ASC = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_CREATE_AT_ASC',
  INDEXER_ALLOCATIONS_VARIANCE_POPULATION_CREATE_AT_DESC = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_CREATE_AT_DESC',
  INDEXER_ALLOCATIONS_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATIONS_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATIONS_VARIANCE_POPULATION_ERA_IDX_ASC = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_ERA_IDX_ASC',
  INDEXER_ALLOCATIONS_VARIANCE_POPULATION_ERA_IDX_DESC = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_ERA_IDX_DESC',
  INDEXER_ALLOCATIONS_VARIANCE_POPULATION_ID_ASC = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_ID_ASC',
  INDEXER_ALLOCATIONS_VARIANCE_POPULATION_ID_DESC = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_ID_DESC',
  INDEXER_ALLOCATIONS_VARIANCE_POPULATION_INDEXER_ID_ASC = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_INDEXER_ID_ASC',
  INDEXER_ALLOCATIONS_VARIANCE_POPULATION_INDEXER_ID_DESC = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_INDEXER_ID_DESC',
  INDEXER_ALLOCATIONS_VARIANCE_POPULATION_PROJECT_ID_ASC = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_PROJECT_ID_ASC',
  INDEXER_ALLOCATIONS_VARIANCE_POPULATION_PROJECT_ID_DESC = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_PROJECT_ID_DESC',
  INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_AMOUNT_ADDED_ASC = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_AMOUNT_ADDED_ASC',
  INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_AMOUNT_ADDED_DESC = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_AMOUNT_ADDED_DESC',
  INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_AMOUNT_REMOVED_ASC = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_AMOUNT_REMOVED_ASC',
  INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_AMOUNT_REMOVED_DESC = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_AMOUNT_REMOVED_DESC',
  INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_CREATE_AT_ASC = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_CREATE_AT_ASC',
  INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_CREATE_AT_DESC = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_CREATE_AT_DESC',
  INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_ERA_IDX_ASC = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_ERA_IDX_ASC',
  INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_ERA_IDX_DESC = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_ERA_IDX_DESC',
  INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_ID_ASC = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_ID_ASC',
  INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_ID_DESC = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_ID_DESC',
  INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_INDEXER_ID_ASC = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_INDEXER_ID_DESC = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_PROJECT_ID_ASC = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_PROJECT_ID_ASC',
  INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_PROJECT_ID_DESC = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_AVERAGE_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_REWARDS_AVERAGE_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_REWARDS_AVERAGE_BURNT_ASC = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_BURNT_ASC',
  INDEXER_ALLOCATION_REWARDS_AVERAGE_BURNT_DESC = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_BURNT_DESC',
  INDEXER_ALLOCATION_REWARDS_AVERAGE_CREATE_AT_ASC = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_CREATE_AT_ASC',
  INDEXER_ALLOCATION_REWARDS_AVERAGE_CREATE_AT_DESC = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_CREATE_AT_DESC',
  INDEXER_ALLOCATION_REWARDS_AVERAGE_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_AVERAGE_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_AVERAGE_ERA_IDX_ASC = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_ERA_IDX_ASC',
  INDEXER_ALLOCATION_REWARDS_AVERAGE_ERA_IDX_DESC = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_ERA_IDX_DESC',
  INDEXER_ALLOCATION_REWARDS_AVERAGE_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_AVERAGE_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_AVERAGE_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_AVERAGE_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_AVERAGE_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_AVERAGE_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_AVERAGE_REWARD_ASC = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_REWARD_ASC',
  INDEXER_ALLOCATION_REWARDS_AVERAGE_REWARD_DESC = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_REWARD_DESC',
  INDEXER_ALLOCATION_REWARDS_BY_PROJECT_ID__COUNT_ASC = 'INDEXER_ALLOCATION_REWARDS_BY_PROJECT_ID__COUNT_ASC',
  INDEXER_ALLOCATION_REWARDS_BY_PROJECT_ID__COUNT_DESC = 'INDEXER_ALLOCATION_REWARDS_BY_PROJECT_ID__COUNT_DESC',
  INDEXER_ALLOCATION_REWARDS_COUNT_ASC = 'INDEXER_ALLOCATION_REWARDS_COUNT_ASC',
  INDEXER_ALLOCATION_REWARDS_COUNT_DESC = 'INDEXER_ALLOCATION_REWARDS_COUNT_DESC',
  INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_BURNT_ASC = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_BURNT_ASC',
  INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_BURNT_DESC = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_BURNT_DESC',
  INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_CREATE_AT_ASC = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_CREATE_AT_ASC',
  INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_CREATE_AT_DESC = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_CREATE_AT_DESC',
  INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_ERA_IDX_ASC = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_ERA_IDX_ASC',
  INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_ERA_IDX_DESC = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_ERA_IDX_DESC',
  INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_REWARD_ASC = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_REWARD_ASC',
  INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_REWARD_DESC = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_REWARD_DESC',
  INDEXER_ALLOCATION_REWARDS_MAX_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_REWARDS_MAX_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_REWARDS_MAX_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_REWARDS_MAX_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_REWARDS_MAX_BURNT_ASC = 'INDEXER_ALLOCATION_REWARDS_MAX_BURNT_ASC',
  INDEXER_ALLOCATION_REWARDS_MAX_BURNT_DESC = 'INDEXER_ALLOCATION_REWARDS_MAX_BURNT_DESC',
  INDEXER_ALLOCATION_REWARDS_MAX_CREATE_AT_ASC = 'INDEXER_ALLOCATION_REWARDS_MAX_CREATE_AT_ASC',
  INDEXER_ALLOCATION_REWARDS_MAX_CREATE_AT_DESC = 'INDEXER_ALLOCATION_REWARDS_MAX_CREATE_AT_DESC',
  INDEXER_ALLOCATION_REWARDS_MAX_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_MAX_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_MAX_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_MAX_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_MAX_ERA_IDX_ASC = 'INDEXER_ALLOCATION_REWARDS_MAX_ERA_IDX_ASC',
  INDEXER_ALLOCATION_REWARDS_MAX_ERA_IDX_DESC = 'INDEXER_ALLOCATION_REWARDS_MAX_ERA_IDX_DESC',
  INDEXER_ALLOCATION_REWARDS_MAX_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_MAX_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_MAX_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_MAX_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_MAX_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_MAX_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_MAX_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_MAX_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_MAX_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_MAX_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_MAX_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_MAX_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_MAX_REWARD_ASC = 'INDEXER_ALLOCATION_REWARDS_MAX_REWARD_ASC',
  INDEXER_ALLOCATION_REWARDS_MAX_REWARD_DESC = 'INDEXER_ALLOCATION_REWARDS_MAX_REWARD_DESC',
  INDEXER_ALLOCATION_REWARDS_MIN_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_REWARDS_MIN_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_REWARDS_MIN_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_REWARDS_MIN_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_REWARDS_MIN_BURNT_ASC = 'INDEXER_ALLOCATION_REWARDS_MIN_BURNT_ASC',
  INDEXER_ALLOCATION_REWARDS_MIN_BURNT_DESC = 'INDEXER_ALLOCATION_REWARDS_MIN_BURNT_DESC',
  INDEXER_ALLOCATION_REWARDS_MIN_CREATE_AT_ASC = 'INDEXER_ALLOCATION_REWARDS_MIN_CREATE_AT_ASC',
  INDEXER_ALLOCATION_REWARDS_MIN_CREATE_AT_DESC = 'INDEXER_ALLOCATION_REWARDS_MIN_CREATE_AT_DESC',
  INDEXER_ALLOCATION_REWARDS_MIN_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_MIN_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_MIN_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_MIN_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_MIN_ERA_IDX_ASC = 'INDEXER_ALLOCATION_REWARDS_MIN_ERA_IDX_ASC',
  INDEXER_ALLOCATION_REWARDS_MIN_ERA_IDX_DESC = 'INDEXER_ALLOCATION_REWARDS_MIN_ERA_IDX_DESC',
  INDEXER_ALLOCATION_REWARDS_MIN_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_MIN_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_MIN_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_MIN_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_MIN_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_MIN_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_MIN_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_MIN_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_MIN_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_MIN_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_MIN_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_MIN_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_MIN_REWARD_ASC = 'INDEXER_ALLOCATION_REWARDS_MIN_REWARD_ASC',
  INDEXER_ALLOCATION_REWARDS_MIN_REWARD_DESC = 'INDEXER_ALLOCATION_REWARDS_MIN_REWARD_DESC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_BURNT_ASC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_BURNT_ASC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_BURNT_DESC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_BURNT_DESC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_CREATE_AT_ASC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_CREATE_AT_ASC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_CREATE_AT_DESC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_CREATE_AT_DESC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_ERA_IDX_ASC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_ERA_IDX_ASC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_ERA_IDX_DESC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_ERA_IDX_DESC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_REWARD_ASC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_REWARD_ASC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_REWARD_DESC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_REWARD_DESC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_BURNT_ASC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_BURNT_ASC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_BURNT_DESC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_BURNT_DESC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_CREATE_AT_ASC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_CREATE_AT_ASC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_CREATE_AT_DESC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_CREATE_AT_DESC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_ERA_IDX_ASC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_ERA_IDX_ASC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_ERA_IDX_DESC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_ERA_IDX_DESC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_REWARD_ASC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_REWARD_ASC',
  INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_REWARD_DESC = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_REWARD_DESC',
  INDEXER_ALLOCATION_REWARDS_SUM_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_REWARDS_SUM_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_REWARDS_SUM_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_REWARDS_SUM_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_REWARDS_SUM_BURNT_ASC = 'INDEXER_ALLOCATION_REWARDS_SUM_BURNT_ASC',
  INDEXER_ALLOCATION_REWARDS_SUM_BURNT_DESC = 'INDEXER_ALLOCATION_REWARDS_SUM_BURNT_DESC',
  INDEXER_ALLOCATION_REWARDS_SUM_CREATE_AT_ASC = 'INDEXER_ALLOCATION_REWARDS_SUM_CREATE_AT_ASC',
  INDEXER_ALLOCATION_REWARDS_SUM_CREATE_AT_DESC = 'INDEXER_ALLOCATION_REWARDS_SUM_CREATE_AT_DESC',
  INDEXER_ALLOCATION_REWARDS_SUM_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_SUM_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_SUM_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_SUM_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_SUM_ERA_IDX_ASC = 'INDEXER_ALLOCATION_REWARDS_SUM_ERA_IDX_ASC',
  INDEXER_ALLOCATION_REWARDS_SUM_ERA_IDX_DESC = 'INDEXER_ALLOCATION_REWARDS_SUM_ERA_IDX_DESC',
  INDEXER_ALLOCATION_REWARDS_SUM_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_SUM_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_SUM_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_SUM_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_SUM_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_SUM_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_SUM_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_SUM_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_SUM_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_SUM_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_SUM_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_SUM_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_SUM_REWARD_ASC = 'INDEXER_ALLOCATION_REWARDS_SUM_REWARD_ASC',
  INDEXER_ALLOCATION_REWARDS_SUM_REWARD_DESC = 'INDEXER_ALLOCATION_REWARDS_SUM_REWARD_DESC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_BURNT_ASC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_BURNT_ASC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_BURNT_DESC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_BURNT_DESC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_CREATE_AT_ASC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_CREATE_AT_ASC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_CREATE_AT_DESC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_CREATE_AT_DESC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_ERA_IDX_ASC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_ERA_IDX_ASC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_ERA_IDX_DESC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_ERA_IDX_DESC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_REWARD_ASC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_REWARD_ASC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_REWARD_DESC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_REWARD_DESC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_BURNT_ASC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_BURNT_ASC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_BURNT_DESC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_BURNT_DESC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_CREATE_AT_ASC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_CREATE_AT_ASC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_CREATE_AT_DESC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_CREATE_AT_DESC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_ERA_IDX_ASC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_ERA_IDX_ASC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_ERA_IDX_DESC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_ERA_IDX_DESC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_REWARD_ASC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_REWARD_ASC',
  INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_REWARD_DESC = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_REWARD_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_CREATE_AT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_CREATE_AT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_CREATE_AT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_CREATE_AT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_TOTAL_BURNT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_TOTAL_BURNT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_TOTAL_BURNT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_TOTAL_BURNT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_TOTAL_REWARD_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_TOTAL_REWARD_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_TOTAL_REWARD_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_TOTAL_REWARD_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_UPDATE_AT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_UPDATE_AT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_UPDATE_AT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_UPDATE_AT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_BY_PROJECT_ID__COUNT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_BY_PROJECT_ID__COUNT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_BY_PROJECT_ID__COUNT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_BY_PROJECT_ID__COUNT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_COUNT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_COUNT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_COUNT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_COUNT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_CREATE_AT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_CREATE_AT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_CREATE_AT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_CREATE_AT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_TOTAL_BURNT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_TOTAL_BURNT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_TOTAL_BURNT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_TOTAL_BURNT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_TOTAL_REWARD_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_TOTAL_REWARD_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_TOTAL_REWARD_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_TOTAL_REWARD_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_UPDATE_AT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_UPDATE_AT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_UPDATE_AT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_UPDATE_AT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_CREATE_AT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_CREATE_AT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_CREATE_AT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_CREATE_AT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_TOTAL_BURNT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_TOTAL_BURNT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_TOTAL_BURNT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_TOTAL_BURNT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_TOTAL_REWARD_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_TOTAL_REWARD_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_TOTAL_REWARD_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_TOTAL_REWARD_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_UPDATE_AT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_UPDATE_AT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_UPDATE_AT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_UPDATE_AT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_CREATE_AT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_CREATE_AT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_CREATE_AT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_CREATE_AT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_TOTAL_BURNT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_TOTAL_BURNT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_TOTAL_BURNT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_TOTAL_BURNT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_TOTAL_REWARD_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_TOTAL_REWARD_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_TOTAL_REWARD_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_TOTAL_REWARD_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_UPDATE_AT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_UPDATE_AT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_UPDATE_AT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_UPDATE_AT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_CREATE_AT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_CREATE_AT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_CREATE_AT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_CREATE_AT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_TOTAL_BURNT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_TOTAL_BURNT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_TOTAL_BURNT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_TOTAL_BURNT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_TOTAL_REWARD_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_TOTAL_REWARD_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_TOTAL_REWARD_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_TOTAL_REWARD_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_UPDATE_AT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_UPDATE_AT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_UPDATE_AT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_UPDATE_AT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_CREATE_AT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_CREATE_AT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_CREATE_AT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_CREATE_AT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_TOTAL_BURNT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_TOTAL_BURNT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_TOTAL_BURNT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_TOTAL_BURNT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_TOTAL_REWARD_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_TOTAL_REWARD_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_TOTAL_REWARD_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_TOTAL_REWARD_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_UPDATE_AT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_UPDATE_AT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_UPDATE_AT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_UPDATE_AT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_CREATE_AT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_CREATE_AT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_CREATE_AT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_CREATE_AT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_TOTAL_BURNT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_TOTAL_BURNT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_TOTAL_BURNT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_TOTAL_BURNT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_TOTAL_REWARD_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_TOTAL_REWARD_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_TOTAL_REWARD_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_TOTAL_REWARD_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_UPDATE_AT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_UPDATE_AT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_UPDATE_AT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_UPDATE_AT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_CREATE_AT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_CREATE_AT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_CREATE_AT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_CREATE_AT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_TOTAL_BURNT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_TOTAL_BURNT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_TOTAL_BURNT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_TOTAL_BURNT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_TOTAL_REWARD_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_TOTAL_REWARD_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_TOTAL_REWARD_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_TOTAL_REWARD_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_UPDATE_AT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_UPDATE_AT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_UPDATE_AT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_UPDATE_AT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_CREATE_AT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_CREATE_AT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_CREATE_AT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_CREATE_AT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_TOTAL_BURNT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_TOTAL_BURNT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_TOTAL_BURNT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_TOTAL_BURNT_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_TOTAL_REWARD_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_TOTAL_REWARD_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_TOTAL_REWARD_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_TOTAL_REWARD_DESC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_UPDATE_AT_ASC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_UPDATE_AT_ASC',
  INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_UPDATE_AT_DESC = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_UPDATE_AT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_AVERAGE_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_SUMMARIES_AVERAGE_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_SUMMARIES_AVERAGE_CREATE_AT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_CREATE_AT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_AVERAGE_CREATE_AT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_CREATE_AT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_AVERAGE_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_AVERAGE_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_AVERAGE_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_AVERAGE_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_AVERAGE_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_AVERAGE_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_AVERAGE_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_AVERAGE_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_AVERAGE_TOTAL_ADDED_ASC = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_TOTAL_ADDED_ASC',
  INDEXER_ALLOCATION_SUMMARIES_AVERAGE_TOTAL_ADDED_DESC = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_TOTAL_ADDED_DESC',
  INDEXER_ALLOCATION_SUMMARIES_AVERAGE_TOTAL_AMOUNT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_TOTAL_AMOUNT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_AVERAGE_TOTAL_AMOUNT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_TOTAL_AMOUNT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_AVERAGE_TOTAL_REMOVED_ASC = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_TOTAL_REMOVED_ASC',
  INDEXER_ALLOCATION_SUMMARIES_AVERAGE_TOTAL_REMOVED_DESC = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_TOTAL_REMOVED_DESC',
  INDEXER_ALLOCATION_SUMMARIES_AVERAGE_UPDATE_AT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_UPDATE_AT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_AVERAGE_UPDATE_AT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_UPDATE_AT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_BY_PROJECT_ID__COUNT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_BY_PROJECT_ID__COUNT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_BY_PROJECT_ID__COUNT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_BY_PROJECT_ID__COUNT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_COUNT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_COUNT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_COUNT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_COUNT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_CREATE_AT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_CREATE_AT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_CREATE_AT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_CREATE_AT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_TOTAL_ADDED_ASC = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_TOTAL_ADDED_ASC',
  INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_TOTAL_ADDED_DESC = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_TOTAL_ADDED_DESC',
  INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_TOTAL_AMOUNT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_TOTAL_AMOUNT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_TOTAL_AMOUNT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_TOTAL_AMOUNT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_TOTAL_REMOVED_ASC = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_TOTAL_REMOVED_ASC',
  INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_TOTAL_REMOVED_DESC = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_TOTAL_REMOVED_DESC',
  INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_UPDATE_AT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_UPDATE_AT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_UPDATE_AT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_UPDATE_AT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_MAX_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_SUMMARIES_MAX_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_SUMMARIES_MAX_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_SUMMARIES_MAX_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_SUMMARIES_MAX_CREATE_AT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_MAX_CREATE_AT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_MAX_CREATE_AT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_MAX_CREATE_AT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_MAX_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_MAX_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_MAX_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_MAX_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_MAX_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_MAX_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_MAX_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_MAX_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_MAX_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_MAX_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_MAX_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_MAX_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_MAX_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_MAX_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_MAX_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_MAX_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_MAX_TOTAL_ADDED_ASC = 'INDEXER_ALLOCATION_SUMMARIES_MAX_TOTAL_ADDED_ASC',
  INDEXER_ALLOCATION_SUMMARIES_MAX_TOTAL_ADDED_DESC = 'INDEXER_ALLOCATION_SUMMARIES_MAX_TOTAL_ADDED_DESC',
  INDEXER_ALLOCATION_SUMMARIES_MAX_TOTAL_AMOUNT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_MAX_TOTAL_AMOUNT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_MAX_TOTAL_AMOUNT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_MAX_TOTAL_AMOUNT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_MAX_TOTAL_REMOVED_ASC = 'INDEXER_ALLOCATION_SUMMARIES_MAX_TOTAL_REMOVED_ASC',
  INDEXER_ALLOCATION_SUMMARIES_MAX_TOTAL_REMOVED_DESC = 'INDEXER_ALLOCATION_SUMMARIES_MAX_TOTAL_REMOVED_DESC',
  INDEXER_ALLOCATION_SUMMARIES_MAX_UPDATE_AT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_MAX_UPDATE_AT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_MAX_UPDATE_AT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_MAX_UPDATE_AT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_MIN_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_SUMMARIES_MIN_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_SUMMARIES_MIN_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_SUMMARIES_MIN_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_SUMMARIES_MIN_CREATE_AT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_MIN_CREATE_AT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_MIN_CREATE_AT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_MIN_CREATE_AT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_MIN_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_MIN_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_MIN_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_MIN_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_MIN_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_MIN_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_MIN_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_MIN_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_MIN_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_MIN_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_MIN_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_MIN_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_MIN_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_MIN_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_MIN_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_MIN_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_MIN_TOTAL_ADDED_ASC = 'INDEXER_ALLOCATION_SUMMARIES_MIN_TOTAL_ADDED_ASC',
  INDEXER_ALLOCATION_SUMMARIES_MIN_TOTAL_ADDED_DESC = 'INDEXER_ALLOCATION_SUMMARIES_MIN_TOTAL_ADDED_DESC',
  INDEXER_ALLOCATION_SUMMARIES_MIN_TOTAL_AMOUNT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_MIN_TOTAL_AMOUNT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_MIN_TOTAL_AMOUNT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_MIN_TOTAL_AMOUNT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_MIN_TOTAL_REMOVED_ASC = 'INDEXER_ALLOCATION_SUMMARIES_MIN_TOTAL_REMOVED_ASC',
  INDEXER_ALLOCATION_SUMMARIES_MIN_TOTAL_REMOVED_DESC = 'INDEXER_ALLOCATION_SUMMARIES_MIN_TOTAL_REMOVED_DESC',
  INDEXER_ALLOCATION_SUMMARIES_MIN_UPDATE_AT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_MIN_UPDATE_AT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_MIN_UPDATE_AT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_MIN_UPDATE_AT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_CREATE_AT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_CREATE_AT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_CREATE_AT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_CREATE_AT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_TOTAL_ADDED_ASC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_TOTAL_ADDED_ASC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_TOTAL_ADDED_DESC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_TOTAL_ADDED_DESC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_TOTAL_AMOUNT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_TOTAL_AMOUNT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_TOTAL_AMOUNT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_TOTAL_AMOUNT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_TOTAL_REMOVED_ASC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_TOTAL_REMOVED_ASC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_TOTAL_REMOVED_DESC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_TOTAL_REMOVED_DESC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_UPDATE_AT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_UPDATE_AT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_UPDATE_AT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_UPDATE_AT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_CREATE_AT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_CREATE_AT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_CREATE_AT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_CREATE_AT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_TOTAL_ADDED_ASC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_TOTAL_ADDED_ASC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_TOTAL_ADDED_DESC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_TOTAL_ADDED_DESC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_TOTAL_AMOUNT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_TOTAL_AMOUNT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_TOTAL_AMOUNT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_TOTAL_AMOUNT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_TOTAL_REMOVED_ASC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_TOTAL_REMOVED_ASC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_TOTAL_REMOVED_DESC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_TOTAL_REMOVED_DESC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_UPDATE_AT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_UPDATE_AT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_UPDATE_AT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_UPDATE_AT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_SUM_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_SUMMARIES_SUM_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_SUMMARIES_SUM_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_SUMMARIES_SUM_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_SUMMARIES_SUM_CREATE_AT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_SUM_CREATE_AT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_SUM_CREATE_AT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_SUM_CREATE_AT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_SUM_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_SUM_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_SUM_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_SUM_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_SUM_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_SUM_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_SUM_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_SUM_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_SUM_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_SUM_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_SUM_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_SUM_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_SUM_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_SUM_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_SUM_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_SUM_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_SUM_TOTAL_ADDED_ASC = 'INDEXER_ALLOCATION_SUMMARIES_SUM_TOTAL_ADDED_ASC',
  INDEXER_ALLOCATION_SUMMARIES_SUM_TOTAL_ADDED_DESC = 'INDEXER_ALLOCATION_SUMMARIES_SUM_TOTAL_ADDED_DESC',
  INDEXER_ALLOCATION_SUMMARIES_SUM_TOTAL_AMOUNT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_SUM_TOTAL_AMOUNT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_SUM_TOTAL_AMOUNT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_SUM_TOTAL_AMOUNT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_SUM_TOTAL_REMOVED_ASC = 'INDEXER_ALLOCATION_SUMMARIES_SUM_TOTAL_REMOVED_ASC',
  INDEXER_ALLOCATION_SUMMARIES_SUM_TOTAL_REMOVED_DESC = 'INDEXER_ALLOCATION_SUMMARIES_SUM_TOTAL_REMOVED_DESC',
  INDEXER_ALLOCATION_SUMMARIES_SUM_UPDATE_AT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_SUM_UPDATE_AT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_SUM_UPDATE_AT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_SUM_UPDATE_AT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_CREATE_AT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_CREATE_AT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_CREATE_AT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_CREATE_AT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_TOTAL_ADDED_ASC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_TOTAL_ADDED_ASC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_TOTAL_ADDED_DESC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_TOTAL_ADDED_DESC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_TOTAL_AMOUNT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_TOTAL_AMOUNT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_TOTAL_AMOUNT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_TOTAL_AMOUNT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_TOTAL_REMOVED_ASC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_TOTAL_REMOVED_ASC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_TOTAL_REMOVED_DESC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_TOTAL_REMOVED_DESC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_UPDATE_AT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_UPDATE_AT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_UPDATE_AT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_UPDATE_AT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_CREATE_AT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_CREATE_AT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_CREATE_AT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_CREATE_AT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_INDEXER_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_INDEXER_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_PROJECT_ID_ASC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_PROJECT_ID_ASC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_PROJECT_ID_DESC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_PROJECT_ID_DESC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_TOTAL_ADDED_ASC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_TOTAL_ADDED_ASC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_TOTAL_ADDED_DESC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_TOTAL_ADDED_DESC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_TOTAL_AMOUNT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_TOTAL_AMOUNT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_TOTAL_AMOUNT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_TOTAL_AMOUNT_DESC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_TOTAL_REMOVED_ASC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_TOTAL_REMOVED_ASC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_TOTAL_REMOVED_DESC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_TOTAL_REMOVED_DESC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_UPDATE_AT_ASC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_UPDATE_AT_ASC',
  INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_UPDATE_AT_DESC = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_UPDATE_AT_DESC',
  LAST_EVENT_ASC = 'LAST_EVENT_ASC',
  LAST_EVENT_DESC = 'LAST_EVENT_DESC',
  METADATA_ASC = 'METADATA_ASC',
  METADATA_DESC = 'METADATA_DESC',
  NATURAL = 'NATURAL',
  OWNER_ASC = 'OWNER_ASC',
  OWNER_DESC = 'OWNER_DESC',
  PRIMARY_KEY_ASC = 'PRIMARY_KEY_ASC',
  PRIMARY_KEY_DESC = 'PRIMARY_KEY_DESC',
  TOTAL_ALLOCATION_ASC = 'TOTAL_ALLOCATION_ASC',
  TOTAL_ALLOCATION_DESC = 'TOTAL_ALLOCATION_DESC',
  TOTAL_BOOST_ASC = 'TOTAL_BOOST_ASC',
  TOTAL_BOOST_DESC = 'TOTAL_BOOST_DESC',
  TOTAL_REWARD_ASC = 'TOTAL_REWARD_ASC',
  TOTAL_REWARD_DESC = 'TOTAL_REWARD_DESC',
  TYPE_ASC = 'TYPE_ASC',
  TYPE_DESC = 'TYPE_DESC',
  UPDATED_TIMESTAMP_ASC = 'UPDATED_TIMESTAMP_ASC',
  UPDATED_TIMESTAMP_DESC = 'UPDATED_TIMESTAMP_DESC',
}

/** The root query type which gives access points into the data universe. */
export type Query = Node & {
  readonly __typename: 'Query';
  readonly _metadata: Maybe<_Metadata>;
  readonly _metadatas: Maybe<_Metadatas>;
  readonly _poi: Maybe<_Poi>;
  readonly _poiByChainBlockHash: Maybe<_Poi>;
  readonly _poiByHash: Maybe<_Poi>;
  /** Reads a single `_Poi` using its globally unique `ID`. */
  readonly _poiByNodeId: Maybe<_Poi>;
  readonly _poiByParentHash: Maybe<_Poi>;
  /** Reads and enables pagination through a set of `_Poi`. */
  readonly _pois: Maybe<_PoisConnection>;
  readonly acceptedOffer: Maybe<AcceptedOffer>;
  /** Reads a single `AcceptedOffer` using its globally unique `ID`. */
  readonly acceptedOfferByNodeId: Maybe<AcceptedOffer>;
  /** Reads and enables pagination through a set of `AcceptedOffer`. */
  readonly acceptedOffers: Maybe<AcceptedOffersConnection>;
  readonly airdrop: Maybe<Airdrop>;
  readonly airdropAmount: Maybe<AirdropAmount>;
  /** Reads a single `AirdropAmount` using its globally unique `ID`. */
  readonly airdropAmountByNodeId: Maybe<AirdropAmount>;
  /** Reads and enables pagination through a set of `AirdropAmount`. */
  readonly airdropAmounts: Maybe<AirdropAmountsConnection>;
  /** Reads a single `Airdrop` using its globally unique `ID`. */
  readonly airdropByNodeId: Maybe<Airdrop>;
  readonly airdropUser: Maybe<AirdropUser>;
  /** Reads a single `AirdropUser` using its globally unique `ID`. */
  readonly airdropUserByNodeId: Maybe<AirdropUser>;
  /** Reads and enables pagination through a set of `AirdropUser`. */
  readonly airdropUsers: Maybe<AirdropUsersConnection>;
  /** Reads and enables pagination through a set of `Airdrop`. */
  readonly airdrops: Maybe<AirdropsConnection>;
  readonly cach: Maybe<Cach>;
  /** Reads a single `Cach` using its globally unique `ID`. */
  readonly cachByNodeId: Maybe<Cach>;
  /** Reads and enables pagination through a set of `Cach`. */
  readonly caches: Maybe<CachesConnection>;
  readonly consumerController: Maybe<ConsumerController>;
  /** Reads a single `ConsumerController` using its globally unique `ID`. */
  readonly consumerControllerByNodeId: Maybe<ConsumerController>;
  /** Reads and enables pagination through a set of `ConsumerController`. */
  readonly consumerControllers: Maybe<ConsumerControllersConnection>;
  readonly consumerQueryReward: Maybe<ConsumerQueryReward>;
  /** Reads a single `ConsumerQueryReward` using its globally unique `ID`. */
  readonly consumerQueryRewardByNodeId: Maybe<ConsumerQueryReward>;
  /** Reads and enables pagination through a set of `ConsumerQueryRewardSummary`. */
  readonly consumerQueryRewardSummaries: Maybe<ConsumerQueryRewardSummariesConnection>;
  readonly consumerQueryRewardSummary: Maybe<ConsumerQueryRewardSummary>;
  /** Reads a single `ConsumerQueryRewardSummary` using its globally unique `ID`. */
  readonly consumerQueryRewardSummaryByNodeId: Maybe<ConsumerQueryRewardSummary>;
  /** Reads and enables pagination through a set of `ConsumerQueryReward`. */
  readonly consumerQueryRewards: Maybe<ConsumerQueryRewardsConnection>;
  readonly controller: Maybe<Controller>;
  /** Reads a single `Controller` using its globally unique `ID`. */
  readonly controllerByNodeId: Maybe<Controller>;
  /** Reads and enables pagination through a set of `Controller`. */
  readonly controllers: Maybe<ControllersConnection>;
  readonly delegation: Maybe<Delegation>;
  /** Reads a single `Delegation` using its globally unique `ID`. */
  readonly delegationByNodeId: Maybe<Delegation>;
  /** Reads and enables pagination through a set of `Delegation`. */
  readonly delegations: Maybe<DelegationsConnection>;
  readonly delegator: Maybe<Delegator>;
  /** Reads a single `Delegator` using its globally unique `ID`. */
  readonly delegatorByNodeId: Maybe<Delegator>;
  /** Reads and enables pagination through a set of `Delegator`. */
  readonly delegators: Maybe<DelegatorsConnection>;
  readonly deployment: Maybe<Deployment>;
  readonly deploymentBooster: Maybe<DeploymentBooster>;
  /** Reads a single `DeploymentBooster` using its globally unique `ID`. */
  readonly deploymentBoosterByNodeId: Maybe<DeploymentBooster>;
  /** Reads and enables pagination through a set of `DeploymentBoosterSummary`. */
  readonly deploymentBoosterSummaries: Maybe<DeploymentBoosterSummariesConnection>;
  readonly deploymentBoosterSummary: Maybe<DeploymentBoosterSummary>;
  /** Reads a single `DeploymentBoosterSummary` using its globally unique `ID`. */
  readonly deploymentBoosterSummaryByNodeId: Maybe<DeploymentBoosterSummary>;
  /** Reads and enables pagination through a set of `DeploymentBooster`. */
  readonly deploymentBoosters: Maybe<DeploymentBoostersConnection>;
  /** Reads a single `Deployment` using its globally unique `ID`. */
  readonly deploymentByNodeId: Maybe<Deployment>;
  /** Reads and enables pagination through a set of `Deployment`. */
  readonly deployments: Maybe<DeploymentsConnection>;
  readonly dispute: Maybe<Dispute>;
  /** Reads a single `Dispute` using its globally unique `ID`. */
  readonly disputeByNodeId: Maybe<Dispute>;
  /** Reads and enables pagination through a set of `Dispute`. */
  readonly disputes: Maybe<DisputesConnection>;
  readonly era: Maybe<Era>;
  /** Reads a single `Era` using its globally unique `ID`. */
  readonly eraByNodeId: Maybe<Era>;
  /** Reads and enables pagination through a set of `EraDelegatorApy`. */
  readonly eraDelegatorApies: Maybe<EraDelegatorApiesConnection>;
  readonly eraDelegatorApy: Maybe<EraDelegatorApy>;
  /** Reads a single `EraDelegatorApy` using its globally unique `ID`. */
  readonly eraDelegatorApyByNodeId: Maybe<EraDelegatorApy>;
  readonly eraDelegatorIndexer: Maybe<EraDelegatorIndexer>;
  /** Reads and enables pagination through a set of `EraDelegatorIndexerApy`. */
  readonly eraDelegatorIndexerApies: Maybe<EraDelegatorIndexerApiesConnection>;
  readonly eraDelegatorIndexerApy: Maybe<EraDelegatorIndexerApy>;
  /** Reads a single `EraDelegatorIndexerApy` using its globally unique `ID`. */
  readonly eraDelegatorIndexerApyByNodeId: Maybe<EraDelegatorIndexerApy>;
  /** Reads a single `EraDelegatorIndexer` using its globally unique `ID`. */
  readonly eraDelegatorIndexerByNodeId: Maybe<EraDelegatorIndexer>;
  /** Reads and enables pagination through a set of `EraDelegatorIndexer`. */
  readonly eraDelegatorIndexers: Maybe<EraDelegatorIndexersConnection>;
  readonly eraDeploymentReward: Maybe<EraDeploymentReward>;
  /** Reads a single `EraDeploymentReward` using its globally unique `ID`. */
  readonly eraDeploymentRewardByNodeId: Maybe<EraDeploymentReward>;
  /** Reads and enables pagination through a set of `EraDeploymentReward`. */
  readonly eraDeploymentRewards: Maybe<EraDeploymentRewardsConnection>;
  /** Reads and enables pagination through a set of `EraIndexerApy`. */
  readonly eraIndexerApies: Maybe<EraIndexerApiesConnection>;
  readonly eraIndexerApy: Maybe<EraIndexerApy>;
  /** Reads a single `EraIndexerApy` using its globally unique `ID`. */
  readonly eraIndexerApyByNodeId: Maybe<EraIndexerApy>;
  readonly eraIndexerDelegator: Maybe<EraIndexerDelegator>;
  /** Reads a single `EraIndexerDelegator` using its globally unique `ID`. */
  readonly eraIndexerDelegatorByNodeId: Maybe<EraIndexerDelegator>;
  /** Reads and enables pagination through a set of `EraIndexerDelegator`. */
  readonly eraIndexerDelegators: Maybe<EraIndexerDelegatorsConnection>;
  /** Reads and enables pagination through a set of `EraIndexerDeploymentApy`. */
  readonly eraIndexerDeploymentApies: Maybe<EraIndexerDeploymentApiesConnection>;
  readonly eraIndexerDeploymentApy: Maybe<EraIndexerDeploymentApy>;
  /** Reads a single `EraIndexerDeploymentApy` using its globally unique `ID`. */
  readonly eraIndexerDeploymentApyByNodeId: Maybe<EraIndexerDeploymentApy>;
  readonly eraReward: Maybe<EraReward>;
  /** Reads a single `EraReward` using its globally unique `ID`. */
  readonly eraRewardByNodeId: Maybe<EraReward>;
  readonly eraRewardClaimed: Maybe<EraRewardClaimed>;
  /** Reads a single `EraRewardClaimed` using its globally unique `ID`. */
  readonly eraRewardClaimedByNodeId: Maybe<EraRewardClaimed>;
  /** Reads and enables pagination through a set of `EraRewardClaimed`. */
  readonly eraRewardClaimeds: Maybe<EraRewardClaimedsConnection>;
  /** Reads and enables pagination through a set of `EraReward`. */
  readonly eraRewards: Maybe<EraRewardsConnection>;
  readonly eraStake: Maybe<EraStake>;
  /** Reads a single `EraStake` using its globally unique `ID`. */
  readonly eraStakeByNodeId: Maybe<EraStake>;
  readonly eraStakeUpdate: Maybe<EraStakeUpdate>;
  /** Reads a single `EraStakeUpdate` using its globally unique `ID`. */
  readonly eraStakeUpdateByNodeId: Maybe<EraStakeUpdate>;
  /** Reads and enables pagination through a set of `EraStakeUpdate`. */
  readonly eraStakeUpdates: Maybe<EraStakeUpdatesConnection>;
  /** Reads and enables pagination through a set of `EraStake`. */
  readonly eraStakes: Maybe<EraStakesConnection>;
  /** Reads and enables pagination through a set of `Era`. */
  readonly eras: Maybe<ErasConnection>;
  readonly exception: Maybe<Exception>;
  /** Reads a single `Exception` using its globally unique `ID`. */
  readonly exceptionByNodeId: Maybe<Exception>;
  /** Reads and enables pagination through a set of `Exception`. */
  readonly exceptions: Maybe<ExceptionsConnection>;
  readonly indexer: Maybe<Indexer>;
  readonly indexerAllocation: Maybe<IndexerAllocation>;
  /** Reads a single `IndexerAllocation` using its globally unique `ID`. */
  readonly indexerAllocationByNodeId: Maybe<IndexerAllocation>;
  readonly indexerAllocationOverflow: Maybe<IndexerAllocationOverflow>;
  /** Reads a single `IndexerAllocationOverflow` using its globally unique `ID`. */
  readonly indexerAllocationOverflowByNodeId: Maybe<IndexerAllocationOverflow>;
  /** Reads and enables pagination through a set of `IndexerAllocationOverflow`. */
  readonly indexerAllocationOverflows: Maybe<IndexerAllocationOverflowsConnection>;
  readonly indexerAllocationReward: Maybe<IndexerAllocationReward>;
  /** Reads a single `IndexerAllocationReward` using its globally unique `ID`. */
  readonly indexerAllocationRewardByNodeId: Maybe<IndexerAllocationReward>;
  /** Reads and enables pagination through a set of `IndexerAllocationRewardSummary`. */
  readonly indexerAllocationRewardSummaries: Maybe<IndexerAllocationRewardSummariesConnection>;
  readonly indexerAllocationRewardSummary: Maybe<IndexerAllocationRewardSummary>;
  /** Reads a single `IndexerAllocationRewardSummary` using its globally unique `ID`. */
  readonly indexerAllocationRewardSummaryByNodeId: Maybe<IndexerAllocationRewardSummary>;
  /** Reads and enables pagination through a set of `IndexerAllocationReward`. */
  readonly indexerAllocationRewards: Maybe<IndexerAllocationRewardsConnection>;
  /** Reads and enables pagination through a set of `IndexerAllocationSummary`. */
  readonly indexerAllocationSummaries: Maybe<IndexerAllocationSummariesConnection>;
  readonly indexerAllocationSummary: Maybe<IndexerAllocationSummary>;
  /** Reads a single `IndexerAllocationSummary` using its globally unique `ID`. */
  readonly indexerAllocationSummaryByNodeId: Maybe<IndexerAllocationSummary>;
  /** Reads and enables pagination through a set of `IndexerAllocation`. */
  readonly indexerAllocations: Maybe<IndexerAllocationsConnection>;
  /** Reads and enables pagination through a set of `IndexerApySummary`. */
  readonly indexerApySummaries: Maybe<IndexerApySummariesConnection>;
  readonly indexerApySummary: Maybe<IndexerApySummary>;
  /** Reads a single `IndexerApySummary` using its globally unique `ID`. */
  readonly indexerApySummaryByNodeId: Maybe<IndexerApySummary>;
  /** Reads a single `Indexer` using its globally unique `ID`. */
  readonly indexerByNodeId: Maybe<Indexer>;
  readonly indexerCommissionRate: Maybe<IndexerCommissionRate>;
  /** Reads a single `IndexerCommissionRate` using its globally unique `ID`. */
  readonly indexerCommissionRateByNodeId: Maybe<IndexerCommissionRate>;
  /** Reads and enables pagination through a set of `IndexerCommissionRate`. */
  readonly indexerCommissionRates: Maybe<IndexerCommissionRatesConnection>;
  readonly indexerDeployment: Maybe<IndexerDeployment>;
  /** Reads a single `IndexerDeployment` using its globally unique `ID`. */
  readonly indexerDeploymentByNodeId: Maybe<IndexerDeployment>;
  /** Reads and enables pagination through a set of `IndexerDeployment`. */
  readonly indexerDeployments: Maybe<IndexerDeploymentsConnection>;
  readonly indexerEraDeploymentReward: Maybe<IndexerEraDeploymentReward>;
  /** Reads a single `IndexerEraDeploymentReward` using its globally unique `ID`. */
  readonly indexerEraDeploymentRewardByNodeId: Maybe<IndexerEraDeploymentReward>;
  /** Reads and enables pagination through a set of `IndexerEraDeploymentReward`. */
  readonly indexerEraDeploymentRewards: Maybe<IndexerEraDeploymentRewardsConnection>;
  /** Reads and enables pagination through a set of `IndexerLaborHistory`. */
  readonly indexerLaborHistories: Maybe<IndexerLaborHistoriesConnection>;
  readonly indexerLaborHistory: Maybe<IndexerLaborHistory>;
  /** Reads a single `IndexerLaborHistory` using its globally unique `ID`. */
  readonly indexerLaborHistoryByNodeId: Maybe<IndexerLaborHistory>;
  readonly indexerLatestAllocationOverflow: Maybe<IndexerLatestAllocationOverflow>;
  /** Reads a single `IndexerLatestAllocationOverflow` using its globally unique `ID`. */
  readonly indexerLatestAllocationOverflowByNodeId: Maybe<IndexerLatestAllocationOverflow>;
  /** Reads and enables pagination through a set of `IndexerLatestAllocationOverflow`. */
  readonly indexerLatestAllocationOverflows: Maybe<IndexerLatestAllocationOverflowsConnection>;
  readonly indexerMissedLabor: Maybe<IndexerMissedLabor>;
  /** Reads a single `IndexerMissedLabor` using its globally unique `ID`. */
  readonly indexerMissedLaborByNodeId: Maybe<IndexerMissedLabor>;
  /** Reads and enables pagination through a set of `IndexerMissedLabor`. */
  readonly indexerMissedLabors: Maybe<IndexerMissedLaborsConnection>;
  readonly indexerReward: Maybe<IndexerReward>;
  /** Reads a single `IndexerReward` using its globally unique `ID`. */
  readonly indexerRewardByNodeId: Maybe<IndexerReward>;
  /** Reads and enables pagination through a set of `IndexerReward`. */
  readonly indexerRewards: Maybe<IndexerRewardsConnection>;
  readonly indexerStake: Maybe<IndexerStake>;
  /** Reads a single `IndexerStake` using its globally unique `ID`. */
  readonly indexerStakeByNodeId: Maybe<IndexerStake>;
  /** Reads and enables pagination through a set of `IndexerStakeSummary`. */
  readonly indexerStakeSummaries: Maybe<IndexerStakeSummariesConnection>;
  readonly indexerStakeSummary: Maybe<IndexerStakeSummary>;
  /** Reads a single `IndexerStakeSummary` using its globally unique `ID`. */
  readonly indexerStakeSummaryByNodeId: Maybe<IndexerStakeSummary>;
  readonly indexerStakeWeight: Maybe<IndexerStakeWeight>;
  /** Reads a single `IndexerStakeWeight` using its globally unique `ID`. */
  readonly indexerStakeWeightByNodeId: Maybe<IndexerStakeWeight>;
  /** Reads and enables pagination through a set of `IndexerStakeWeight`. */
  readonly indexerStakeWeights: Maybe<IndexerStakeWeightsConnection>;
  /** Reads and enables pagination through a set of `IndexerStake`. */
  readonly indexerStakes: Maybe<IndexerStakesConnection>;
  /** Reads and enables pagination through a set of `Indexer`. */
  readonly indexers: Maybe<IndexersConnection>;
  /** Fetches an object given its globally unique `ID`. */
  readonly node: Maybe<Node>;
  /** The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`. */
  readonly nodeId: Scalars['ID']['output'];
  readonly offer: Maybe<Offer>;
  /** Reads a single `Offer` using its globally unique `ID`. */
  readonly offerByNodeId: Maybe<Offer>;
  /** Reads and enables pagination through a set of `Offer`. */
  readonly offers: Maybe<OffersConnection>;
  readonly order: Maybe<Order>;
  /** Reads a single `Order` using its globally unique `ID`. */
  readonly orderByNodeId: Maybe<Order>;
  /** Reads and enables pagination through a set of `Order`. */
  readonly orders: Maybe<OrdersConnection>;
  readonly plan: Maybe<Plan>;
  /** Reads a single `Plan` using its globally unique `ID`. */
  readonly planByNodeId: Maybe<Plan>;
  readonly planTemplate: Maybe<PlanTemplate>;
  /** Reads a single `PlanTemplate` using its globally unique `ID`. */
  readonly planTemplateByNodeId: Maybe<PlanTemplate>;
  /** Reads and enables pagination through a set of `PlanTemplate`. */
  readonly planTemplates: Maybe<PlanTemplatesConnection>;
  /** Reads and enables pagination through a set of `Plan`. */
  readonly plans: Maybe<PlansConnection>;
  readonly priceOracle: Maybe<PriceOracle>;
  /** Reads a single `PriceOracle` using its globally unique `ID`. */
  readonly priceOracleByNodeId: Maybe<PriceOracle>;
  /** Reads and enables pagination through a set of `PriceOracle`. */
  readonly priceOracles: Maybe<PriceOraclesConnection>;
  readonly project: Maybe<Project>;
  /** Reads a single `Project` using its globally unique `ID`. */
  readonly projectByNodeId: Maybe<Project>;
  /** Reads and enables pagination through a set of `Project`. */
  readonly projects: Maybe<ProjectsConnection>;
  /**
   * Exposes the root query type nested one level down. This is helpful for Relay 1
   * which can only query top level fields if they are in a particular form.
   */
  readonly query: Query;
  readonly reward: Maybe<Reward>;
  /** Reads a single `Reward` using its globally unique `ID`. */
  readonly rewardByNodeId: Maybe<Reward>;
  /** Reads and enables pagination through a set of `Reward`. */
  readonly rewards: Maybe<RewardsConnection>;
  readonly serviceAgreement: Maybe<ServiceAgreement>;
  /** Reads a single `ServiceAgreement` using its globally unique `ID`. */
  readonly serviceAgreementByNodeId: Maybe<ServiceAgreement>;
  /** Reads and enables pagination through a set of `ServiceAgreement`. */
  readonly serviceAgreements: Maybe<ServiceAgreementsConnection>;
  readonly sqtoken: Maybe<Sqtoken>;
  /** Reads a single `Sqtoken` using its globally unique `ID`. */
  readonly sqtokenByNodeId: Maybe<Sqtoken>;
  /** Reads and enables pagination through a set of `Sqtoken`. */
  readonly sqtokens: Maybe<SqtokensConnection>;
  readonly stateChannel: Maybe<StateChannel>;
  /** Reads a single `StateChannel` using its globally unique `ID`. */
  readonly stateChannelByNodeId: Maybe<StateChannel>;
  /** Reads and enables pagination through a set of `StateChannel`. */
  readonly stateChannels: Maybe<StateChannelsConnection>;
  readonly tokenHolder: Maybe<TokenHolder>;
  /** Reads a single `TokenHolder` using its globally unique `ID`. */
  readonly tokenHolderByNodeId: Maybe<TokenHolder>;
  /** Reads and enables pagination through a set of `TokenHolder`. */
  readonly tokenHolders: Maybe<TokenHoldersConnection>;
  readonly totalLock: Maybe<TotalLock>;
  /** Reads a single `TotalLock` using its globally unique `ID`. */
  readonly totalLockByNodeId: Maybe<TotalLock>;
  /** Reads and enables pagination through a set of `TotalLock`. */
  readonly totalLocks: Maybe<TotalLocksConnection>;
  readonly transfer: Maybe<Transfer>;
  /** Reads a single `Transfer` using its globally unique `ID`. */
  readonly transferByNodeId: Maybe<Transfer>;
  /** Reads and enables pagination through a set of `Transfer`. */
  readonly transfers: Maybe<TransfersConnection>;
  readonly unclaimedReward: Maybe<UnclaimedReward>;
  /** Reads a single `UnclaimedReward` using its globally unique `ID`. */
  readonly unclaimedRewardByNodeId: Maybe<UnclaimedReward>;
  /** Reads and enables pagination through a set of `UnclaimedReward`. */
  readonly unclaimedRewards: Maybe<UnclaimedRewardsConnection>;
  readonly withdraw: Maybe<Withdraw>;
  /** Reads a single `Withdraw` using its globally unique `ID`. */
  readonly withdrawByNodeId: Maybe<Withdraw>;
  readonly withdrawl: Maybe<Withdrawl>;
  /** Reads a single `Withdrawl` using its globally unique `ID`. */
  readonly withdrawlByNodeId: Maybe<Withdrawl>;
  /** Reads and enables pagination through a set of `Withdrawl`. */
  readonly withdrawls: Maybe<WithdrawlsConnection>;
  /** Reads and enables pagination through a set of `Withdraw`. */
  readonly withdraws: Maybe<WithdrawsConnection>;
};

/** The root query type which gives access points into the data universe. */
export type Query_MetadataArgs = {
  chainId: InputMaybe<Scalars['String']['input']>;
};

/** The root query type which gives access points into the data universe. */
export type Query_MetadatasArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
};

/** The root query type which gives access points into the data universe. */
export type Query_PoiArgs = {
  id: Scalars['Int']['input'];
};

/** The root query type which gives access points into the data universe. */
export type Query_PoiByChainBlockHashArgs = {
  chainBlockHash: Scalars['String']['input'];
};

/** The root query type which gives access points into the data universe. */
export type Query_PoiByHashArgs = {
  hash: Scalars['String']['input'];
};

/** The root query type which gives access points into the data universe. */
export type Query_PoiByNodeIdArgs = {
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<_Poi_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};

/** The root query type which gives access points into the data universe. */
export type Query_PoiByParentHashArgs = {
  parentHash: Scalars['String']['input'];
};

/** The root query type which gives access points into the data universe. */
export type Query_PoisArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<_Poi_Distinct_Enum>>>;
  filter: InputMaybe<_PoiFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<_PoisOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** The root query type which gives access points into the data universe. */
export type QueryAcceptedOfferArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryAcceptedOfferByNodeIdArgs = {
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Accepted_Offers_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryAcceptedOffersArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Accepted_Offers_Distinct_Enum>>>;
  filter: InputMaybe<AcceptedOfferFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<AcceptedOffersOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** The root query type which gives access points into the data universe. */
export type QueryAirdropArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryAirdropAmountArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryAirdropAmountByNodeIdArgs = {
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Airdrop_Amounts_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryAirdropAmountsArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Airdrop_Amounts_Distinct_Enum>>>;
  filter: InputMaybe<AirdropAmountFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<AirdropAmountsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** The root query type which gives access points into the data universe. */
export type QueryAirdropByNodeIdArgs = {
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Airdrops_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryAirdropUserArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryAirdropUserByNodeIdArgs = {
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Airdrop_Users_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryAirdropUsersArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Airdrop_Users_Distinct_Enum>>>;
  filter: InputMaybe<AirdropUserFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<AirdropUsersOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** The root query type which gives access points into the data universe. */
export type QueryAirdropsArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Airdrops_Distinct_Enum>>>;
  filter: InputMaybe<AirdropFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<AirdropsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** The root query type which gives access points into the data universe. */
export type QueryCachArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryCachByNodeIdArgs = {
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Caches_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryCachesArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Caches_Distinct_Enum>>>;
  filter: InputMaybe<CachFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<CachesOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** The root query type which gives access points into the data universe. */
export type QueryConsumerControllerArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryConsumerControllerByNodeIdArgs = {
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Consumer_Controllers_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryConsumerControllersArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Consumer_Controllers_Distinct_Enum>>>;
  filter: InputMaybe<ConsumerControllerFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<ConsumerControllersOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** The root query type which gives access points into the data universe. */
export type QueryConsumerQueryRewardArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryConsumerQueryRewardByNodeIdArgs = {
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Consumer_Query_Rewards_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryConsumerQueryRewardSummariesArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Consumer_Query_Reward_Summaries_Distinct_Enum>>>;
  filter: InputMaybe<ConsumerQueryRewardSummaryFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<ConsumerQueryRewardSummariesOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** The root query type which gives access points into the data universe. */
export type QueryConsumerQueryRewardSummaryArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryConsumerQueryRewardSummaryByNodeIdArgs = {
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Consumer_Query_Reward_Summaries_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryConsumerQueryRewardsArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Consumer_Query_Rewards_Distinct_Enum>>>;
  filter: InputMaybe<ConsumerQueryRewardFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<ConsumerQueryRewardsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** The root query type which gives access points into the data universe. */
export type QueryControllerArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryControllerByNodeIdArgs = {
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Controllers_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryControllersArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Controllers_Distinct_Enum>>>;
  filter: InputMaybe<ControllerFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<ControllersOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** The root query type which gives access points into the data universe. */
export type QueryDelegationArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryDelegationByNodeIdArgs = {
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Delegations_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryDelegationsArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Delegations_Distinct_Enum>>>;
  filter: InputMaybe<DelegationFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<DelegationsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** The root query type which gives access points into the data universe. */
export type QueryDelegatorArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryDelegatorByNodeIdArgs = {
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Delegators_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryDelegatorsArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Delegators_Distinct_Enum>>>;
  filter: InputMaybe<DelegatorFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<DelegatorsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** The root query type which gives access points into the data universe. */
export type QueryDeploymentArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryDeploymentBoosterArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryDeploymentBoosterByNodeIdArgs = {
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Deployment_Boosters_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryDeploymentBoosterSummariesArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Deployment_Booster_Summaries_Distinct_Enum>>>;
  filter: InputMaybe<DeploymentBoosterSummaryFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<DeploymentBoosterSummariesOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** The root query type which gives access points into the data universe. */
export type QueryDeploymentBoosterSummaryArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryDeploymentBoosterSummaryByNodeIdArgs = {
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Deployment_Booster_Summaries_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryDeploymentBoostersArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Deployment_Boosters_Distinct_Enum>>>;
  filter: InputMaybe<DeploymentBoosterFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<DeploymentBoostersOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** The root query type which gives access points into the data universe. */
export type QueryDeploymentByNodeIdArgs = {
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Deployments_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryDeploymentsArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Deployments_Distinct_Enum>>>;
  filter: InputMaybe<DeploymentFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<DeploymentsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** The root query type which gives access points into the data universe. */
export type QueryDisputeArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryDisputeByNodeIdArgs = {
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Disputes_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryDisputesArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Disputes_Distinct_Enum>>>;
  filter: InputMaybe<DisputeFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<DisputesOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** The root query type which gives access points into the data universe. */
export type QueryEraArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryEraByNodeIdArgs = {
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Eras_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryEraDelegatorApiesArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Era_Delegator_Apies_Distinct_Enum>>>;
  filter: InputMaybe<EraDelegatorApyFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<EraDelegatorApiesOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** The root query type which gives access points into the data universe. */
export type QueryEraDelegatorApyArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryEraDelegatorApyByNodeIdArgs = {
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Era_Delegator_Apies_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryEraDelegatorIndexerArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryEraDelegatorIndexerApiesArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Era_Delegator_Indexer_Apies_Distinct_Enum>>>;
  filter: InputMaybe<EraDelegatorIndexerApyFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<EraDelegatorIndexerApiesOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** The root query type which gives access points into the data universe. */
export type QueryEraDelegatorIndexerApyArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryEraDelegatorIndexerApyByNodeIdArgs = {
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Era_Delegator_Indexer_Apies_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryEraDelegatorIndexerByNodeIdArgs = {
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Era_Delegator_Indexers_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryEraDelegatorIndexersArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Era_Delegator_Indexers_Distinct_Enum>>>;
  filter: InputMaybe<EraDelegatorIndexerFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<EraDelegatorIndexersOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** The root query type which gives access points into the data universe. */
export type QueryEraDeploymentRewardArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryEraDeploymentRewardByNodeIdArgs = {
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Era_Deployment_Rewards_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryEraDeploymentRewardsArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Era_Deployment_Rewards_Distinct_Enum>>>;
  filter: InputMaybe<EraDeploymentRewardFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<EraDeploymentRewardsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** The root query type which gives access points into the data universe. */
export type QueryEraIndexerApiesArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Era_Indexer_Apies_Distinct_Enum>>>;
  filter: InputMaybe<EraIndexerApyFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<EraIndexerApiesOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** The root query type which gives access points into the data universe. */
export type QueryEraIndexerApyArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryEraIndexerApyByNodeIdArgs = {
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Era_Indexer_Apies_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryEraIndexerDelegatorArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryEraIndexerDelegatorByNodeIdArgs = {
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Era_Indexer_Delegators_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryEraIndexerDelegatorsArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Era_Indexer_Delegators_Distinct_Enum>>>;
  filter: InputMaybe<EraIndexerDelegatorFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<EraIndexerDelegatorsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** The root query type which gives access points into the data universe. */
export type QueryEraIndexerDeploymentApiesArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Era_Indexer_Deployment_Apies_Distinct_Enum>>>;
  filter: InputMaybe<EraIndexerDeploymentApyFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<EraIndexerDeploymentApiesOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** The root query type which gives access points into the data universe. */
export type QueryEraIndexerDeploymentApyArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryEraIndexerDeploymentApyByNodeIdArgs = {
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Era_Indexer_Deployment_Apies_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryEraRewardArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryEraRewardByNodeIdArgs = {
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Era_Rewards_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryEraRewardClaimedArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryEraRewardClaimedByNodeIdArgs = {
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Era_Reward_Claimeds_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryEraRewardClaimedsArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Era_Reward_Claimeds_Distinct_Enum>>>;
  filter: InputMaybe<EraRewardClaimedFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<EraRewardClaimedsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** The root query type which gives access points into the data universe. */
export type QueryEraRewardsArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Era_Rewards_Distinct_Enum>>>;
  filter: InputMaybe<EraRewardFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<EraRewardsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** The root query type which gives access points into the data universe. */
export type QueryEraStakeArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryEraStakeByNodeIdArgs = {
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Era_Stakes_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryEraStakeUpdateArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryEraStakeUpdateByNodeIdArgs = {
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Era_Stake_Updates_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryEraStakeUpdatesArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Era_Stake_Updates_Distinct_Enum>>>;
  filter: InputMaybe<EraStakeUpdateFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<EraStakeUpdatesOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** The root query type which gives access points into the data universe. */
export type QueryEraStakesArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Era_Stakes_Distinct_Enum>>>;
  filter: InputMaybe<EraStakeFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<EraStakesOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** The root query type which gives access points into the data universe. */
export type QueryErasArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Eras_Distinct_Enum>>>;
  filter: InputMaybe<EraFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<ErasOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** The root query type which gives access points into the data universe. */
export type QueryExceptionArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryExceptionByNodeIdArgs = {
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Exceptions_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryExceptionsArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Exceptions_Distinct_Enum>>>;
  filter: InputMaybe<ExceptionFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<ExceptionsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** The root query type which gives access points into the data universe. */
export type QueryIndexerArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryIndexerAllocationArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryIndexerAllocationByNodeIdArgs = {
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Allocations_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryIndexerAllocationOverflowArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryIndexerAllocationOverflowByNodeIdArgs = {
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Allocation_Overflows_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryIndexerAllocationOverflowsArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Allocation_Overflows_Distinct_Enum>>>;
  filter: InputMaybe<IndexerAllocationOverflowFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexerAllocationOverflowsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** The root query type which gives access points into the data universe. */
export type QueryIndexerAllocationRewardArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryIndexerAllocationRewardByNodeIdArgs = {
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Allocation_Rewards_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryIndexerAllocationRewardSummariesArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Allocation_Reward_Summaries_Distinct_Enum>>>;
  filter: InputMaybe<IndexerAllocationRewardSummaryFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexerAllocationRewardSummariesOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** The root query type which gives access points into the data universe. */
export type QueryIndexerAllocationRewardSummaryArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryIndexerAllocationRewardSummaryByNodeIdArgs = {
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Allocation_Reward_Summaries_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryIndexerAllocationRewardsArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Allocation_Rewards_Distinct_Enum>>>;
  filter: InputMaybe<IndexerAllocationRewardFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexerAllocationRewardsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** The root query type which gives access points into the data universe. */
export type QueryIndexerAllocationSummariesArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Allocation_Summaries_Distinct_Enum>>>;
  filter: InputMaybe<IndexerAllocationSummaryFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexerAllocationSummariesOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** The root query type which gives access points into the data universe. */
export type QueryIndexerAllocationSummaryArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryIndexerAllocationSummaryByNodeIdArgs = {
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Allocation_Summaries_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryIndexerAllocationsArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Allocations_Distinct_Enum>>>;
  filter: InputMaybe<IndexerAllocationFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexerAllocationsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** The root query type which gives access points into the data universe. */
export type QueryIndexerApySummariesArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Apy_Summaries_Distinct_Enum>>>;
  filter: InputMaybe<IndexerApySummaryFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexerApySummariesOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** The root query type which gives access points into the data universe. */
export type QueryIndexerApySummaryArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryIndexerApySummaryByNodeIdArgs = {
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Apy_Summaries_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryIndexerByNodeIdArgs = {
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexers_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryIndexerCommissionRateArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryIndexerCommissionRateByNodeIdArgs = {
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Commission_Rates_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryIndexerCommissionRatesArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Commission_Rates_Distinct_Enum>>>;
  filter: InputMaybe<IndexerCommissionRateFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexerCommissionRatesOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** The root query type which gives access points into the data universe. */
export type QueryIndexerDeploymentArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryIndexerDeploymentByNodeIdArgs = {
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Deployments_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryIndexerDeploymentsArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Deployments_Distinct_Enum>>>;
  filter: InputMaybe<IndexerDeploymentFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexerDeploymentsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** The root query type which gives access points into the data universe. */
export type QueryIndexerEraDeploymentRewardArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryIndexerEraDeploymentRewardByNodeIdArgs = {
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Era_Deployment_Rewards_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryIndexerEraDeploymentRewardsArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Era_Deployment_Rewards_Distinct_Enum>>>;
  filter: InputMaybe<IndexerEraDeploymentRewardFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexerEraDeploymentRewardsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** The root query type which gives access points into the data universe. */
export type QueryIndexerLaborHistoriesArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Labor_Histories_Distinct_Enum>>>;
  filter: InputMaybe<IndexerLaborHistoryFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexerLaborHistoriesOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** The root query type which gives access points into the data universe. */
export type QueryIndexerLaborHistoryArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryIndexerLaborHistoryByNodeIdArgs = {
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Labor_Histories_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryIndexerLatestAllocationOverflowArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryIndexerLatestAllocationOverflowByNodeIdArgs = {
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Latest_Allocation_Overflows_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryIndexerLatestAllocationOverflowsArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Latest_Allocation_Overflows_Distinct_Enum>>>;
  filter: InputMaybe<IndexerLatestAllocationOverflowFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexerLatestAllocationOverflowsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** The root query type which gives access points into the data universe. */
export type QueryIndexerMissedLaborArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryIndexerMissedLaborByNodeIdArgs = {
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Missed_Labors_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryIndexerMissedLaborsArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Missed_Labors_Distinct_Enum>>>;
  filter: InputMaybe<IndexerMissedLaborFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexerMissedLaborsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** The root query type which gives access points into the data universe. */
export type QueryIndexerRewardArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryIndexerRewardByNodeIdArgs = {
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Rewards_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryIndexerRewardsArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Rewards_Distinct_Enum>>>;
  filter: InputMaybe<IndexerRewardFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexerRewardsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** The root query type which gives access points into the data universe. */
export type QueryIndexerStakeArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryIndexerStakeByNodeIdArgs = {
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Stakes_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryIndexerStakeSummariesArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Stake_Summaries_Distinct_Enum>>>;
  filter: InputMaybe<IndexerStakeSummaryFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexerStakeSummariesOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** The root query type which gives access points into the data universe. */
export type QueryIndexerStakeSummaryArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryIndexerStakeSummaryByNodeIdArgs = {
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Stake_Summaries_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryIndexerStakeWeightArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryIndexerStakeWeightByNodeIdArgs = {
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Stake_Weights_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryIndexerStakeWeightsArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Stake_Weights_Distinct_Enum>>>;
  filter: InputMaybe<IndexerStakeWeightFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexerStakeWeightsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** The root query type which gives access points into the data universe. */
export type QueryIndexerStakesArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexer_Stakes_Distinct_Enum>>>;
  filter: InputMaybe<IndexerStakeFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexerStakesOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** The root query type which gives access points into the data universe. */
export type QueryIndexersArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexers_Distinct_Enum>>>;
  filter: InputMaybe<IndexerFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexersOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** The root query type which gives access points into the data universe. */
export type QueryNodeArgs = {
  nodeId: Scalars['ID']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryOfferArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryOfferByNodeIdArgs = {
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Offers_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryOffersArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Offers_Distinct_Enum>>>;
  filter: InputMaybe<OfferFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<OffersOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** The root query type which gives access points into the data universe. */
export type QueryOrderArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryOrderByNodeIdArgs = {
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Orders_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryOrdersArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Orders_Distinct_Enum>>>;
  filter: InputMaybe<OrderFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<OrdersOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** The root query type which gives access points into the data universe. */
export type QueryPlanArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryPlanByNodeIdArgs = {
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Plans_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryPlanTemplateArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryPlanTemplateByNodeIdArgs = {
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Plan_Templates_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryPlanTemplatesArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Plan_Templates_Distinct_Enum>>>;
  filter: InputMaybe<PlanTemplateFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<PlanTemplatesOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** The root query type which gives access points into the data universe. */
export type QueryPlansArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Plans_Distinct_Enum>>>;
  filter: InputMaybe<PlanFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<PlansOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** The root query type which gives access points into the data universe. */
export type QueryPriceOracleArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryPriceOracleByNodeIdArgs = {
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Price_Oracles_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryPriceOraclesArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Price_Oracles_Distinct_Enum>>>;
  filter: InputMaybe<PriceOracleFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<PriceOraclesOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** The root query type which gives access points into the data universe. */
export type QueryProjectArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryProjectByNodeIdArgs = {
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Projects_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryProjectsArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Projects_Distinct_Enum>>>;
  filter: InputMaybe<ProjectFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<ProjectsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** The root query type which gives access points into the data universe. */
export type QueryRewardArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryRewardByNodeIdArgs = {
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Rewards_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryRewardsArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Rewards_Distinct_Enum>>>;
  filter: InputMaybe<RewardFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<RewardsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** The root query type which gives access points into the data universe. */
export type QueryServiceAgreementArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryServiceAgreementByNodeIdArgs = {
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Service_Agreements_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryServiceAgreementsArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Service_Agreements_Distinct_Enum>>>;
  filter: InputMaybe<ServiceAgreementFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<ServiceAgreementsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** The root query type which gives access points into the data universe. */
export type QuerySqtokenArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QuerySqtokenByNodeIdArgs = {
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Sqtokens_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QuerySqtokensArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Sqtokens_Distinct_Enum>>>;
  filter: InputMaybe<SqtokenFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<SqtokensOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** The root query type which gives access points into the data universe. */
export type QueryStateChannelArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryStateChannelByNodeIdArgs = {
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<State_Channels_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryStateChannelsArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<State_Channels_Distinct_Enum>>>;
  filter: InputMaybe<StateChannelFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<StateChannelsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** The root query type which gives access points into the data universe. */
export type QueryTokenHolderArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryTokenHolderByNodeIdArgs = {
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Token_Holders_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryTokenHoldersArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Token_Holders_Distinct_Enum>>>;
  filter: InputMaybe<TokenHolderFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<TokenHoldersOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** The root query type which gives access points into the data universe. */
export type QueryTotalLockArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryTotalLockByNodeIdArgs = {
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Total_Locks_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryTotalLocksArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Total_Locks_Distinct_Enum>>>;
  filter: InputMaybe<TotalLockFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<TotalLocksOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** The root query type which gives access points into the data universe. */
export type QueryTransferArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryTransferByNodeIdArgs = {
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Transfers_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryTransfersArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Transfers_Distinct_Enum>>>;
  filter: InputMaybe<TransferFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<TransfersOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** The root query type which gives access points into the data universe. */
export type QueryUnclaimedRewardArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryUnclaimedRewardByNodeIdArgs = {
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Unclaimed_Rewards_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryUnclaimedRewardsArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Unclaimed_Rewards_Distinct_Enum>>>;
  filter: InputMaybe<UnclaimedRewardFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<UnclaimedRewardsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** The root query type which gives access points into the data universe. */
export type QueryWithdrawArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryWithdrawByNodeIdArgs = {
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Withdraws_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryWithdrawlArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryWithdrawlByNodeIdArgs = {
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Withdrawls_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};

/** The root query type which gives access points into the data universe. */
export type QueryWithdrawlsArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Withdrawls_Distinct_Enum>>>;
  filter: InputMaybe<WithdrawlFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<WithdrawlsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

/** The root query type which gives access points into the data universe. */
export type QueryWithdrawsArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Withdraws_Distinct_Enum>>>;
  filter: InputMaybe<WithdrawFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<WithdrawsOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type Reward = Node & {
  readonly __typename: 'Reward';
  readonly amount: Scalars['BigFloat']['output'];
  readonly claimedTime: Scalars['Datetime']['output'];
  readonly createdBlock: Maybe<Scalars['Int']['output']>;
  /** Reads a single `Delegator` that is related to this `Reward`. */
  readonly delegator: Maybe<Delegator>;
  readonly delegatorAddress: Scalars['String']['output'];
  readonly delegatorId: Maybe<Scalars['String']['output']>;
  readonly id: Scalars['String']['output'];
  readonly indexerAddress: Scalars['String']['output'];
  readonly lastEvent: Maybe<Scalars['String']['output']>;
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  readonly nodeId: Scalars['ID']['output'];
};

export type RewardAggregates = {
  readonly __typename: 'RewardAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly average: Maybe<RewardAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly distinctCount: Maybe<RewardDistinctCountAggregates>;
  readonly keys: Maybe<ReadonlyArray<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly max: Maybe<RewardMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly min: Maybe<RewardMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevPopulation: Maybe<RewardStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevSample: Maybe<RewardStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly sum: Maybe<RewardSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly variancePopulation: Maybe<RewardVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly varianceSample: Maybe<RewardVarianceSampleAggregates>;
};

/** A filter to be used against aggregates of `Reward` object types. */
export type RewardAggregatesFilter = {
  /** Mean average aggregate over matching `Reward` objects. */
  readonly average: InputMaybe<RewardAverageAggregateFilter>;
  /** Distinct count aggregate over matching `Reward` objects. */
  readonly distinctCount: InputMaybe<RewardDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `Reward` object to be included within the aggregate. */
  readonly filter: InputMaybe<RewardFilter>;
  /** Maximum aggregate over matching `Reward` objects. */
  readonly max: InputMaybe<RewardMaxAggregateFilter>;
  /** Minimum aggregate over matching `Reward` objects. */
  readonly min: InputMaybe<RewardMinAggregateFilter>;
  /** Population standard deviation aggregate over matching `Reward` objects. */
  readonly stddevPopulation: InputMaybe<RewardStddevPopulationAggregateFilter>;
  /** Sample standard deviation aggregate over matching `Reward` objects. */
  readonly stddevSample: InputMaybe<RewardStddevSampleAggregateFilter>;
  /** Sum aggregate over matching `Reward` objects. */
  readonly sum: InputMaybe<RewardSumAggregateFilter>;
  /** Population variance aggregate over matching `Reward` objects. */
  readonly variancePopulation: InputMaybe<RewardVariancePopulationAggregateFilter>;
  /** Sample variance aggregate over matching `Reward` objects. */
  readonly varianceSample: InputMaybe<RewardVarianceSampleAggregateFilter>;
};

export type RewardAverageAggregateFilter = {
  readonly amount: InputMaybe<BigFloatFilter>;
  readonly createdBlock: InputMaybe<BigFloatFilter>;
};

export type RewardAverageAggregates = {
  readonly __typename: 'RewardAverageAggregates';
  /** Mean average of amount across the matching connection */
  readonly amount: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
};

export type RewardDistinctCountAggregateFilter = {
  readonly _blockRange: InputMaybe<BigIntFilter>;
  readonly _id: InputMaybe<BigIntFilter>;
  readonly amount: InputMaybe<BigIntFilter>;
  readonly claimedTime: InputMaybe<BigIntFilter>;
  readonly createdBlock: InputMaybe<BigIntFilter>;
  readonly delegatorAddress: InputMaybe<BigIntFilter>;
  readonly delegatorId: InputMaybe<BigIntFilter>;
  readonly id: InputMaybe<BigIntFilter>;
  readonly indexerAddress: InputMaybe<BigIntFilter>;
  readonly lastEvent: InputMaybe<BigIntFilter>;
};

export type RewardDistinctCountAggregates = {
  readonly __typename: 'RewardDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  readonly _blockRange: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  readonly _id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of amount across the matching connection */
  readonly amount: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of claimedTime across the matching connection */
  readonly claimedTime: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of delegatorAddress across the matching connection */
  readonly delegatorAddress: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of delegatorId across the matching connection */
  readonly delegatorId: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  readonly id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of indexerAddress across the matching connection */
  readonly indexerAddress: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of lastEvent across the matching connection */
  readonly lastEvent: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `Reward` object types. All fields are combined with a logical ‘and.’ */
export type RewardFilter = {
  /** Filter by the object’s `amount` field. */
  readonly amount: InputMaybe<BigFloatFilter>;
  /** Checks for all expressions in this list. */
  readonly and: InputMaybe<ReadonlyArray<RewardFilter>>;
  /** Filter by the object’s `claimedTime` field. */
  readonly claimedTime: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `createdBlock` field. */
  readonly createdBlock: InputMaybe<IntFilter>;
  /** Filter by the object’s `delegator` relation. */
  readonly delegator: InputMaybe<DelegatorFilter>;
  /** Filter by the object’s `delegatorAddress` field. */
  readonly delegatorAddress: InputMaybe<StringFilter>;
  /** A related `delegator` exists. */
  readonly delegatorExists: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `delegatorId` field. */
  readonly delegatorId: InputMaybe<StringFilter>;
  /** Filter by the object’s `id` field. */
  readonly id: InputMaybe<StringFilter>;
  /** Filter by the object’s `indexerAddress` field. */
  readonly indexerAddress: InputMaybe<StringFilter>;
  /** Filter by the object’s `lastEvent` field. */
  readonly lastEvent: InputMaybe<StringFilter>;
  /** Negates the expression. */
  readonly not: InputMaybe<RewardFilter>;
  /** Checks for any expressions in this list. */
  readonly or: InputMaybe<ReadonlyArray<RewardFilter>>;
};

export type RewardMaxAggregateFilter = {
  readonly amount: InputMaybe<BigFloatFilter>;
  readonly createdBlock: InputMaybe<IntFilter>;
};

export type RewardMaxAggregates = {
  readonly __typename: 'RewardMaxAggregates';
  /** Maximum of amount across the matching connection */
  readonly amount: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['Int']['output']>;
};

export type RewardMinAggregateFilter = {
  readonly amount: InputMaybe<BigFloatFilter>;
  readonly createdBlock: InputMaybe<IntFilter>;
};

export type RewardMinAggregates = {
  readonly __typename: 'RewardMinAggregates';
  /** Minimum of amount across the matching connection */
  readonly amount: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['Int']['output']>;
};

export type RewardStddevPopulationAggregateFilter = {
  readonly amount: InputMaybe<BigFloatFilter>;
  readonly createdBlock: InputMaybe<BigFloatFilter>;
};

export type RewardStddevPopulationAggregates = {
  readonly __typename: 'RewardStddevPopulationAggregates';
  /** Population standard deviation of amount across the matching connection */
  readonly amount: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
};

export type RewardStddevSampleAggregateFilter = {
  readonly amount: InputMaybe<BigFloatFilter>;
  readonly createdBlock: InputMaybe<BigFloatFilter>;
};

export type RewardStddevSampleAggregates = {
  readonly __typename: 'RewardStddevSampleAggregates';
  /** Sample standard deviation of amount across the matching connection */
  readonly amount: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
};

export type RewardSumAggregateFilter = {
  readonly amount: InputMaybe<BigFloatFilter>;
  readonly createdBlock: InputMaybe<BigIntFilter>;
};

export type RewardSumAggregates = {
  readonly __typename: 'RewardSumAggregates';
  /** Sum of amount across the matching connection */
  readonly amount: Scalars['BigFloat']['output'];
  /** Sum of createdBlock across the matching connection */
  readonly createdBlock: Scalars['BigInt']['output'];
};

export type RewardVariancePopulationAggregateFilter = {
  readonly amount: InputMaybe<BigFloatFilter>;
  readonly createdBlock: InputMaybe<BigFloatFilter>;
};

export type RewardVariancePopulationAggregates = {
  readonly __typename: 'RewardVariancePopulationAggregates';
  /** Population variance of amount across the matching connection */
  readonly amount: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
};

export type RewardVarianceSampleAggregateFilter = {
  readonly amount: InputMaybe<BigFloatFilter>;
  readonly createdBlock: InputMaybe<BigFloatFilter>;
};

export type RewardVarianceSampleAggregates = {
  readonly __typename: 'RewardVarianceSampleAggregates';
  /** Sample variance of amount across the matching connection */
  readonly amount: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `Reward` values. */
export type RewardsConnection = {
  readonly __typename: 'RewardsConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<RewardAggregates>;
  /** A list of edges which contains the `Reward` and cursor to aid in pagination. */
  readonly edges: ReadonlyArray<RewardsEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<RewardAggregates>>;
  /** A list of `Reward` objects. */
  readonly nodes: ReadonlyArray<Maybe<Reward>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Reward` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Reward` values. */
export type RewardsConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<RewardsGroupBy>;
  having: InputMaybe<RewardsHavingInput>;
};

/** A `Reward` edge in the connection. */
export type RewardsEdge = {
  readonly __typename: 'RewardsEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `Reward` at the end of the edge. */
  readonly node: Maybe<Reward>;
};

/** Grouping methods for `Reward` for usage during aggregation. */
export enum RewardsGroupBy {
  AMOUNT = 'AMOUNT',
  CLAIMED_TIME = 'CLAIMED_TIME',
  CLAIMED_TIME_TRUNCATED_TO_DAY = 'CLAIMED_TIME_TRUNCATED_TO_DAY',
  CLAIMED_TIME_TRUNCATED_TO_HOUR = 'CLAIMED_TIME_TRUNCATED_TO_HOUR',
  CREATED_BLOCK = 'CREATED_BLOCK',
  DELEGATOR_ADDRESS = 'DELEGATOR_ADDRESS',
  DELEGATOR_ID = 'DELEGATOR_ID',
  ID = 'ID',
  INDEXER_ADDRESS = 'INDEXER_ADDRESS',
  LAST_EVENT = 'LAST_EVENT',
}

export type RewardsHavingAverageInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
  readonly claimedTime: InputMaybe<HavingDatetimeFilter>;
  readonly createdBlock: InputMaybe<HavingIntFilter>;
};

export type RewardsHavingDistinctCountInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
  readonly claimedTime: InputMaybe<HavingDatetimeFilter>;
  readonly createdBlock: InputMaybe<HavingIntFilter>;
};

/** Conditions for `Reward` aggregates. */
export type RewardsHavingInput = {
  readonly AND: InputMaybe<ReadonlyArray<RewardsHavingInput>>;
  readonly OR: InputMaybe<ReadonlyArray<RewardsHavingInput>>;
  readonly average: InputMaybe<RewardsHavingAverageInput>;
  readonly distinctCount: InputMaybe<RewardsHavingDistinctCountInput>;
  readonly max: InputMaybe<RewardsHavingMaxInput>;
  readonly min: InputMaybe<RewardsHavingMinInput>;
  readonly stddevPopulation: InputMaybe<RewardsHavingStddevPopulationInput>;
  readonly stddevSample: InputMaybe<RewardsHavingStddevSampleInput>;
  readonly sum: InputMaybe<RewardsHavingSumInput>;
  readonly variancePopulation: InputMaybe<RewardsHavingVariancePopulationInput>;
  readonly varianceSample: InputMaybe<RewardsHavingVarianceSampleInput>;
};

export type RewardsHavingMaxInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
  readonly claimedTime: InputMaybe<HavingDatetimeFilter>;
  readonly createdBlock: InputMaybe<HavingIntFilter>;
};

export type RewardsHavingMinInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
  readonly claimedTime: InputMaybe<HavingDatetimeFilter>;
  readonly createdBlock: InputMaybe<HavingIntFilter>;
};

export type RewardsHavingStddevPopulationInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
  readonly claimedTime: InputMaybe<HavingDatetimeFilter>;
  readonly createdBlock: InputMaybe<HavingIntFilter>;
};

export type RewardsHavingStddevSampleInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
  readonly claimedTime: InputMaybe<HavingDatetimeFilter>;
  readonly createdBlock: InputMaybe<HavingIntFilter>;
};

export type RewardsHavingSumInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
  readonly claimedTime: InputMaybe<HavingDatetimeFilter>;
  readonly createdBlock: InputMaybe<HavingIntFilter>;
};

export type RewardsHavingVariancePopulationInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
  readonly claimedTime: InputMaybe<HavingDatetimeFilter>;
  readonly createdBlock: InputMaybe<HavingIntFilter>;
};

export type RewardsHavingVarianceSampleInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
  readonly claimedTime: InputMaybe<HavingDatetimeFilter>;
  readonly createdBlock: InputMaybe<HavingIntFilter>;
};

/** Methods to use when ordering `Reward`. */
export enum RewardsOrderBy {
  AMOUNT_ASC = 'AMOUNT_ASC',
  AMOUNT_DESC = 'AMOUNT_DESC',
  CLAIMED_TIME_ASC = 'CLAIMED_TIME_ASC',
  CLAIMED_TIME_DESC = 'CLAIMED_TIME_DESC',
  CREATED_BLOCK_ASC = 'CREATED_BLOCK_ASC',
  CREATED_BLOCK_DESC = 'CREATED_BLOCK_DESC',
  DELEGATOR_ADDRESS_ASC = 'DELEGATOR_ADDRESS_ASC',
  DELEGATOR_ADDRESS_DESC = 'DELEGATOR_ADDRESS_DESC',
  DELEGATOR_BY_DELEGATOR_ID__CREATED_BLOCK_ASC = 'DELEGATOR_BY_DELEGATOR_ID__CREATED_BLOCK_ASC',
  DELEGATOR_BY_DELEGATOR_ID__CREATED_BLOCK_DESC = 'DELEGATOR_BY_DELEGATOR_ID__CREATED_BLOCK_DESC',
  DELEGATOR_BY_DELEGATOR_ID__EXIT_ERA_ASC = 'DELEGATOR_BY_DELEGATOR_ID__EXIT_ERA_ASC',
  DELEGATOR_BY_DELEGATOR_ID__EXIT_ERA_DESC = 'DELEGATOR_BY_DELEGATOR_ID__EXIT_ERA_DESC',
  DELEGATOR_BY_DELEGATOR_ID__ID_ASC = 'DELEGATOR_BY_DELEGATOR_ID__ID_ASC',
  DELEGATOR_BY_DELEGATOR_ID__ID_DESC = 'DELEGATOR_BY_DELEGATOR_ID__ID_DESC',
  DELEGATOR_BY_DELEGATOR_ID__LAST_EVENT_ASC = 'DELEGATOR_BY_DELEGATOR_ID__LAST_EVENT_ASC',
  DELEGATOR_BY_DELEGATOR_ID__LAST_EVENT_DESC = 'DELEGATOR_BY_DELEGATOR_ID__LAST_EVENT_DESC',
  DELEGATOR_BY_DELEGATOR_ID__START_ERA_ASC = 'DELEGATOR_BY_DELEGATOR_ID__START_ERA_ASC',
  DELEGATOR_BY_DELEGATOR_ID__START_ERA_DESC = 'DELEGATOR_BY_DELEGATOR_ID__START_ERA_DESC',
  DELEGATOR_BY_DELEGATOR_ID__TOTAL_DELEGATIONS_ASC = 'DELEGATOR_BY_DELEGATOR_ID__TOTAL_DELEGATIONS_ASC',
  DELEGATOR_BY_DELEGATOR_ID__TOTAL_DELEGATIONS_DESC = 'DELEGATOR_BY_DELEGATOR_ID__TOTAL_DELEGATIONS_DESC',
  DELEGATOR_ID_ASC = 'DELEGATOR_ID_ASC',
  DELEGATOR_ID_DESC = 'DELEGATOR_ID_DESC',
  ID_ASC = 'ID_ASC',
  ID_DESC = 'ID_DESC',
  INDEXER_ADDRESS_ASC = 'INDEXER_ADDRESS_ASC',
  INDEXER_ADDRESS_DESC = 'INDEXER_ADDRESS_DESC',
  LAST_EVENT_ASC = 'LAST_EVENT_ASC',
  LAST_EVENT_DESC = 'LAST_EVENT_DESC',
  NATURAL = 'NATURAL',
  PRIMARY_KEY_ASC = 'PRIMARY_KEY_ASC',
  PRIMARY_KEY_DESC = 'PRIMARY_KEY_DESC',
}

export type ServiceAgreement = Node & {
  readonly __typename: 'ServiceAgreement';
  /** Reads and enables pagination through a set of `AcceptedOffer`. */
  readonly acceptedOffers: AcceptedOffersConnection;
  readonly consumerAddress: Scalars['String']['output'];
  readonly createdBlock: Maybe<Scalars['Int']['output']>;
  /** Reads a single `Deployment` that is related to this `ServiceAgreement`. */
  readonly deployment: Maybe<Deployment>;
  readonly deploymentId: Scalars['String']['output'];
  readonly endTime: Scalars['Datetime']['output'];
  readonly id: Scalars['String']['output'];
  readonly indexerAddress: Scalars['String']['output'];
  /** Reads and enables pagination through a set of `Indexer`. */
  readonly indexersByAcceptedOfferServiceAgreementIdAndIndexerId: ServiceAgreementIndexersByAcceptedOfferServiceAgreementIdAndIndexerIdManyToManyConnection;
  readonly lastEvent: Maybe<Scalars['String']['output']>;
  readonly lockedAmount: Scalars['BigFloat']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  readonly nodeId: Scalars['ID']['output'];
  /** Reads and enables pagination through a set of `Offer`. */
  readonly offersByAcceptedOfferServiceAgreementIdAndOfferId: ServiceAgreementOffersByAcceptedOfferServiceAgreementIdAndOfferIdManyToManyConnection;
  readonly period: Scalars['BigFloat']['output'];
  /** Reads a single `PlanTemplate` that is related to this `ServiceAgreement`. */
  readonly planTemplate: Maybe<PlanTemplate>;
  readonly planTemplateId: Scalars['String']['output'];
  readonly startTime: Scalars['Datetime']['output'];
};

export type ServiceAgreementAcceptedOffersArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Accepted_Offers_Distinct_Enum>>>;
  filter: InputMaybe<AcceptedOfferFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<AcceptedOffersOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type ServiceAgreementIndexersByAcceptedOfferServiceAgreementIdAndIndexerIdArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Indexers_Distinct_Enum>>>;
  filter: InputMaybe<IndexerFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<IndexersOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type ServiceAgreementOffersByAcceptedOfferServiceAgreementIdAndOfferIdArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Offers_Distinct_Enum>>>;
  filter: InputMaybe<OfferFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<OffersOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type ServiceAgreementAggregates = {
  readonly __typename: 'ServiceAgreementAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly average: Maybe<ServiceAgreementAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly distinctCount: Maybe<ServiceAgreementDistinctCountAggregates>;
  readonly keys: Maybe<ReadonlyArray<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly max: Maybe<ServiceAgreementMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly min: Maybe<ServiceAgreementMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevPopulation: Maybe<ServiceAgreementStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevSample: Maybe<ServiceAgreementStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly sum: Maybe<ServiceAgreementSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly variancePopulation: Maybe<ServiceAgreementVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly varianceSample: Maybe<ServiceAgreementVarianceSampleAggregates>;
};

/** A filter to be used against aggregates of `ServiceAgreement` object types. */
export type ServiceAgreementAggregatesFilter = {
  /** Mean average aggregate over matching `ServiceAgreement` objects. */
  readonly average: InputMaybe<ServiceAgreementAverageAggregateFilter>;
  /** Distinct count aggregate over matching `ServiceAgreement` objects. */
  readonly distinctCount: InputMaybe<ServiceAgreementDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `ServiceAgreement` object to be included within the aggregate. */
  readonly filter: InputMaybe<ServiceAgreementFilter>;
  /** Maximum aggregate over matching `ServiceAgreement` objects. */
  readonly max: InputMaybe<ServiceAgreementMaxAggregateFilter>;
  /** Minimum aggregate over matching `ServiceAgreement` objects. */
  readonly min: InputMaybe<ServiceAgreementMinAggregateFilter>;
  /** Population standard deviation aggregate over matching `ServiceAgreement` objects. */
  readonly stddevPopulation: InputMaybe<ServiceAgreementStddevPopulationAggregateFilter>;
  /** Sample standard deviation aggregate over matching `ServiceAgreement` objects. */
  readonly stddevSample: InputMaybe<ServiceAgreementStddevSampleAggregateFilter>;
  /** Sum aggregate over matching `ServiceAgreement` objects. */
  readonly sum: InputMaybe<ServiceAgreementSumAggregateFilter>;
  /** Population variance aggregate over matching `ServiceAgreement` objects. */
  readonly variancePopulation: InputMaybe<ServiceAgreementVariancePopulationAggregateFilter>;
  /** Sample variance aggregate over matching `ServiceAgreement` objects. */
  readonly varianceSample: InputMaybe<ServiceAgreementVarianceSampleAggregateFilter>;
};

export type ServiceAgreementAverageAggregateFilter = {
  readonly createdBlock: InputMaybe<BigFloatFilter>;
  readonly lockedAmount: InputMaybe<BigFloatFilter>;
  readonly period: InputMaybe<BigFloatFilter>;
};

export type ServiceAgreementAverageAggregates = {
  readonly __typename: 'ServiceAgreementAverageAggregates';
  /** Mean average of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of lockedAmount across the matching connection */
  readonly lockedAmount: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of period across the matching connection */
  readonly period: Maybe<Scalars['BigFloat']['output']>;
};

export type ServiceAgreementDistinctCountAggregateFilter = {
  readonly _blockRange: InputMaybe<BigIntFilter>;
  readonly _id: InputMaybe<BigIntFilter>;
  readonly consumerAddress: InputMaybe<BigIntFilter>;
  readonly createdBlock: InputMaybe<BigIntFilter>;
  readonly deploymentId: InputMaybe<BigIntFilter>;
  readonly endTime: InputMaybe<BigIntFilter>;
  readonly id: InputMaybe<BigIntFilter>;
  readonly indexerAddress: InputMaybe<BigIntFilter>;
  readonly lastEvent: InputMaybe<BigIntFilter>;
  readonly lockedAmount: InputMaybe<BigIntFilter>;
  readonly period: InputMaybe<BigIntFilter>;
  readonly planTemplateId: InputMaybe<BigIntFilter>;
  readonly startTime: InputMaybe<BigIntFilter>;
};

export type ServiceAgreementDistinctCountAggregates = {
  readonly __typename: 'ServiceAgreementDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  readonly _blockRange: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  readonly _id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of consumerAddress across the matching connection */
  readonly consumerAddress: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of deploymentId across the matching connection */
  readonly deploymentId: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of endTime across the matching connection */
  readonly endTime: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  readonly id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of indexerAddress across the matching connection */
  readonly indexerAddress: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of lastEvent across the matching connection */
  readonly lastEvent: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of lockedAmount across the matching connection */
  readonly lockedAmount: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of period across the matching connection */
  readonly period: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of planTemplateId across the matching connection */
  readonly planTemplateId: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of startTime across the matching connection */
  readonly startTime: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `ServiceAgreement` object types. All fields are combined with a logical ‘and.’ */
export type ServiceAgreementFilter = {
  /** Filter by the object’s `acceptedOffers` relation. */
  readonly acceptedOffers: InputMaybe<ServiceAgreementToManyAcceptedOfferFilter>;
  /** Some related `acceptedOffers` exist. */
  readonly acceptedOffersExist: InputMaybe<Scalars['Boolean']['input']>;
  /** Checks for all expressions in this list. */
  readonly and: InputMaybe<ReadonlyArray<ServiceAgreementFilter>>;
  /** Filter by the object’s `consumerAddress` field. */
  readonly consumerAddress: InputMaybe<StringFilter>;
  /** Filter by the object’s `createdBlock` field. */
  readonly createdBlock: InputMaybe<IntFilter>;
  /** Filter by the object’s `deployment` relation. */
  readonly deployment: InputMaybe<DeploymentFilter>;
  /** Filter by the object’s `deploymentId` field. */
  readonly deploymentId: InputMaybe<StringFilter>;
  /** Filter by the object’s `endTime` field. */
  readonly endTime: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `id` field. */
  readonly id: InputMaybe<StringFilter>;
  /** Filter by the object’s `indexerAddress` field. */
  readonly indexerAddress: InputMaybe<StringFilter>;
  /** Filter by the object’s `lastEvent` field. */
  readonly lastEvent: InputMaybe<StringFilter>;
  /** Filter by the object’s `lockedAmount` field. */
  readonly lockedAmount: InputMaybe<BigFloatFilter>;
  /** Negates the expression. */
  readonly not: InputMaybe<ServiceAgreementFilter>;
  /** Checks for any expressions in this list. */
  readonly or: InputMaybe<ReadonlyArray<ServiceAgreementFilter>>;
  /** Filter by the object’s `period` field. */
  readonly period: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `planTemplate` relation. */
  readonly planTemplate: InputMaybe<PlanTemplateFilter>;
  /** Filter by the object’s `planTemplateId` field. */
  readonly planTemplateId: InputMaybe<StringFilter>;
  /** Filter by the object’s `startTime` field. */
  readonly startTime: InputMaybe<DatetimeFilter>;
};

/** A connection to a list of `Indexer` values, with data from `AcceptedOffer`. */
export type ServiceAgreementIndexersByAcceptedOfferServiceAgreementIdAndIndexerIdManyToManyConnection = {
  readonly __typename: 'ServiceAgreementIndexersByAcceptedOfferServiceAgreementIdAndIndexerIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<IndexerAggregates>;
  /** A list of edges which contains the `Indexer`, info from the `AcceptedOffer`, and the cursor to aid in pagination. */
  readonly edges: ReadonlyArray<ServiceAgreementIndexersByAcceptedOfferServiceAgreementIdAndIndexerIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<IndexerAggregates>>;
  /** A list of `Indexer` objects. */
  readonly nodes: ReadonlyArray<Maybe<Indexer>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Indexer` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Indexer` values, with data from `AcceptedOffer`. */
export type ServiceAgreementIndexersByAcceptedOfferServiceAgreementIdAndIndexerIdManyToManyConnectionGroupedAggregatesArgs =
  {
    groupBy: ReadonlyArray<IndexersGroupBy>;
    having: InputMaybe<IndexersHavingInput>;
  };

/** A `Indexer` edge in the connection, with data from `AcceptedOffer`. */
export type ServiceAgreementIndexersByAcceptedOfferServiceAgreementIdAndIndexerIdManyToManyEdge = {
  readonly __typename: 'ServiceAgreementIndexersByAcceptedOfferServiceAgreementIdAndIndexerIdManyToManyEdge';
  /** Reads and enables pagination through a set of `AcceptedOffer`. */
  readonly acceptedOffers: AcceptedOffersConnection;
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `Indexer` at the end of the edge. */
  readonly node: Maybe<Indexer>;
};

/** A `Indexer` edge in the connection, with data from `AcceptedOffer`. */
export type ServiceAgreementIndexersByAcceptedOfferServiceAgreementIdAndIndexerIdManyToManyEdgeAcceptedOffersArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Accepted_Offers_Distinct_Enum>>>;
  filter: InputMaybe<AcceptedOfferFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<AcceptedOffersOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type ServiceAgreementMaxAggregateFilter = {
  readonly createdBlock: InputMaybe<IntFilter>;
  readonly lockedAmount: InputMaybe<BigFloatFilter>;
  readonly period: InputMaybe<BigFloatFilter>;
};

export type ServiceAgreementMaxAggregates = {
  readonly __typename: 'ServiceAgreementMaxAggregates';
  /** Maximum of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['Int']['output']>;
  /** Maximum of lockedAmount across the matching connection */
  readonly lockedAmount: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of period across the matching connection */
  readonly period: Maybe<Scalars['BigFloat']['output']>;
};

export type ServiceAgreementMinAggregateFilter = {
  readonly createdBlock: InputMaybe<IntFilter>;
  readonly lockedAmount: InputMaybe<BigFloatFilter>;
  readonly period: InputMaybe<BigFloatFilter>;
};

export type ServiceAgreementMinAggregates = {
  readonly __typename: 'ServiceAgreementMinAggregates';
  /** Minimum of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['Int']['output']>;
  /** Minimum of lockedAmount across the matching connection */
  readonly lockedAmount: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of period across the matching connection */
  readonly period: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `Offer` values, with data from `AcceptedOffer`. */
export type ServiceAgreementOffersByAcceptedOfferServiceAgreementIdAndOfferIdManyToManyConnection = {
  readonly __typename: 'ServiceAgreementOffersByAcceptedOfferServiceAgreementIdAndOfferIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<OfferAggregates>;
  /** A list of edges which contains the `Offer`, info from the `AcceptedOffer`, and the cursor to aid in pagination. */
  readonly edges: ReadonlyArray<ServiceAgreementOffersByAcceptedOfferServiceAgreementIdAndOfferIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<OfferAggregates>>;
  /** A list of `Offer` objects. */
  readonly nodes: ReadonlyArray<Maybe<Offer>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Offer` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Offer` values, with data from `AcceptedOffer`. */
export type ServiceAgreementOffersByAcceptedOfferServiceAgreementIdAndOfferIdManyToManyConnectionGroupedAggregatesArgs =
  {
    groupBy: ReadonlyArray<OffersGroupBy>;
    having: InputMaybe<OffersHavingInput>;
  };

/** A `Offer` edge in the connection, with data from `AcceptedOffer`. */
export type ServiceAgreementOffersByAcceptedOfferServiceAgreementIdAndOfferIdManyToManyEdge = {
  readonly __typename: 'ServiceAgreementOffersByAcceptedOfferServiceAgreementIdAndOfferIdManyToManyEdge';
  /** Reads and enables pagination through a set of `AcceptedOffer`. */
  readonly acceptedOffers: AcceptedOffersConnection;
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `Offer` at the end of the edge. */
  readonly node: Maybe<Offer>;
};

/** A `Offer` edge in the connection, with data from `AcceptedOffer`. */
export type ServiceAgreementOffersByAcceptedOfferServiceAgreementIdAndOfferIdManyToManyEdgeAcceptedOffersArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Accepted_Offers_Distinct_Enum>>>;
  filter: InputMaybe<AcceptedOfferFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<AcceptedOffersOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type ServiceAgreementStddevPopulationAggregateFilter = {
  readonly createdBlock: InputMaybe<BigFloatFilter>;
  readonly lockedAmount: InputMaybe<BigFloatFilter>;
  readonly period: InputMaybe<BigFloatFilter>;
};

export type ServiceAgreementStddevPopulationAggregates = {
  readonly __typename: 'ServiceAgreementStddevPopulationAggregates';
  /** Population standard deviation of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of lockedAmount across the matching connection */
  readonly lockedAmount: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of period across the matching connection */
  readonly period: Maybe<Scalars['BigFloat']['output']>;
};

export type ServiceAgreementStddevSampleAggregateFilter = {
  readonly createdBlock: InputMaybe<BigFloatFilter>;
  readonly lockedAmount: InputMaybe<BigFloatFilter>;
  readonly period: InputMaybe<BigFloatFilter>;
};

export type ServiceAgreementStddevSampleAggregates = {
  readonly __typename: 'ServiceAgreementStddevSampleAggregates';
  /** Sample standard deviation of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of lockedAmount across the matching connection */
  readonly lockedAmount: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of period across the matching connection */
  readonly period: Maybe<Scalars['BigFloat']['output']>;
};

export type ServiceAgreementSumAggregateFilter = {
  readonly createdBlock: InputMaybe<BigIntFilter>;
  readonly lockedAmount: InputMaybe<BigFloatFilter>;
  readonly period: InputMaybe<BigFloatFilter>;
};

export type ServiceAgreementSumAggregates = {
  readonly __typename: 'ServiceAgreementSumAggregates';
  /** Sum of createdBlock across the matching connection */
  readonly createdBlock: Scalars['BigInt']['output'];
  /** Sum of lockedAmount across the matching connection */
  readonly lockedAmount: Scalars['BigFloat']['output'];
  /** Sum of period across the matching connection */
  readonly period: Scalars['BigFloat']['output'];
};

/** A filter to be used against many `AcceptedOffer` object types. All fields are combined with a logical ‘and.’ */
export type ServiceAgreementToManyAcceptedOfferFilter = {
  /** Aggregates across related `AcceptedOffer` match the filter criteria. */
  readonly aggregates: InputMaybe<AcceptedOfferAggregatesFilter>;
  /** Every related `AcceptedOffer` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly every: InputMaybe<AcceptedOfferFilter>;
  /** No related `AcceptedOffer` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly none: InputMaybe<AcceptedOfferFilter>;
  /** Some related `AcceptedOffer` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly some: InputMaybe<AcceptedOfferFilter>;
};

export type ServiceAgreementVariancePopulationAggregateFilter = {
  readonly createdBlock: InputMaybe<BigFloatFilter>;
  readonly lockedAmount: InputMaybe<BigFloatFilter>;
  readonly period: InputMaybe<BigFloatFilter>;
};

export type ServiceAgreementVariancePopulationAggregates = {
  readonly __typename: 'ServiceAgreementVariancePopulationAggregates';
  /** Population variance of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of lockedAmount across the matching connection */
  readonly lockedAmount: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of period across the matching connection */
  readonly period: Maybe<Scalars['BigFloat']['output']>;
};

export type ServiceAgreementVarianceSampleAggregateFilter = {
  readonly createdBlock: InputMaybe<BigFloatFilter>;
  readonly lockedAmount: InputMaybe<BigFloatFilter>;
  readonly period: InputMaybe<BigFloatFilter>;
};

export type ServiceAgreementVarianceSampleAggregates = {
  readonly __typename: 'ServiceAgreementVarianceSampleAggregates';
  /** Sample variance of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of lockedAmount across the matching connection */
  readonly lockedAmount: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of period across the matching connection */
  readonly period: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `ServiceAgreement` values. */
export type ServiceAgreementsConnection = {
  readonly __typename: 'ServiceAgreementsConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<ServiceAgreementAggregates>;
  /** A list of edges which contains the `ServiceAgreement` and cursor to aid in pagination. */
  readonly edges: ReadonlyArray<ServiceAgreementsEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<ServiceAgreementAggregates>>;
  /** A list of `ServiceAgreement` objects. */
  readonly nodes: ReadonlyArray<Maybe<ServiceAgreement>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `ServiceAgreement` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `ServiceAgreement` values. */
export type ServiceAgreementsConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<ServiceAgreementsGroupBy>;
  having: InputMaybe<ServiceAgreementsHavingInput>;
};

/** A `ServiceAgreement` edge in the connection. */
export type ServiceAgreementsEdge = {
  readonly __typename: 'ServiceAgreementsEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `ServiceAgreement` at the end of the edge. */
  readonly node: Maybe<ServiceAgreement>;
};

/** Grouping methods for `ServiceAgreement` for usage during aggregation. */
export enum ServiceAgreementsGroupBy {
  CONSUMER_ADDRESS = 'CONSUMER_ADDRESS',
  CREATED_BLOCK = 'CREATED_BLOCK',
  DEPLOYMENT_ID = 'DEPLOYMENT_ID',
  END_TIME = 'END_TIME',
  END_TIME_TRUNCATED_TO_DAY = 'END_TIME_TRUNCATED_TO_DAY',
  END_TIME_TRUNCATED_TO_HOUR = 'END_TIME_TRUNCATED_TO_HOUR',
  ID = 'ID',
  INDEXER_ADDRESS = 'INDEXER_ADDRESS',
  LAST_EVENT = 'LAST_EVENT',
  LOCKED_AMOUNT = 'LOCKED_AMOUNT',
  PERIOD = 'PERIOD',
  PLAN_TEMPLATE_ID = 'PLAN_TEMPLATE_ID',
  START_TIME = 'START_TIME',
  START_TIME_TRUNCATED_TO_DAY = 'START_TIME_TRUNCATED_TO_DAY',
  START_TIME_TRUNCATED_TO_HOUR = 'START_TIME_TRUNCATED_TO_HOUR',
}

export type ServiceAgreementsHavingAverageInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly endTime: InputMaybe<HavingDatetimeFilter>;
  readonly lockedAmount: InputMaybe<HavingBigfloatFilter>;
  readonly period: InputMaybe<HavingBigfloatFilter>;
  readonly startTime: InputMaybe<HavingDatetimeFilter>;
};

export type ServiceAgreementsHavingDistinctCountInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly endTime: InputMaybe<HavingDatetimeFilter>;
  readonly lockedAmount: InputMaybe<HavingBigfloatFilter>;
  readonly period: InputMaybe<HavingBigfloatFilter>;
  readonly startTime: InputMaybe<HavingDatetimeFilter>;
};

/** Conditions for `ServiceAgreement` aggregates. */
export type ServiceAgreementsHavingInput = {
  readonly AND: InputMaybe<ReadonlyArray<ServiceAgreementsHavingInput>>;
  readonly OR: InputMaybe<ReadonlyArray<ServiceAgreementsHavingInput>>;
  readonly average: InputMaybe<ServiceAgreementsHavingAverageInput>;
  readonly distinctCount: InputMaybe<ServiceAgreementsHavingDistinctCountInput>;
  readonly max: InputMaybe<ServiceAgreementsHavingMaxInput>;
  readonly min: InputMaybe<ServiceAgreementsHavingMinInput>;
  readonly stddevPopulation: InputMaybe<ServiceAgreementsHavingStddevPopulationInput>;
  readonly stddevSample: InputMaybe<ServiceAgreementsHavingStddevSampleInput>;
  readonly sum: InputMaybe<ServiceAgreementsHavingSumInput>;
  readonly variancePopulation: InputMaybe<ServiceAgreementsHavingVariancePopulationInput>;
  readonly varianceSample: InputMaybe<ServiceAgreementsHavingVarianceSampleInput>;
};

export type ServiceAgreementsHavingMaxInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly endTime: InputMaybe<HavingDatetimeFilter>;
  readonly lockedAmount: InputMaybe<HavingBigfloatFilter>;
  readonly period: InputMaybe<HavingBigfloatFilter>;
  readonly startTime: InputMaybe<HavingDatetimeFilter>;
};

export type ServiceAgreementsHavingMinInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly endTime: InputMaybe<HavingDatetimeFilter>;
  readonly lockedAmount: InputMaybe<HavingBigfloatFilter>;
  readonly period: InputMaybe<HavingBigfloatFilter>;
  readonly startTime: InputMaybe<HavingDatetimeFilter>;
};

export type ServiceAgreementsHavingStddevPopulationInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly endTime: InputMaybe<HavingDatetimeFilter>;
  readonly lockedAmount: InputMaybe<HavingBigfloatFilter>;
  readonly period: InputMaybe<HavingBigfloatFilter>;
  readonly startTime: InputMaybe<HavingDatetimeFilter>;
};

export type ServiceAgreementsHavingStddevSampleInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly endTime: InputMaybe<HavingDatetimeFilter>;
  readonly lockedAmount: InputMaybe<HavingBigfloatFilter>;
  readonly period: InputMaybe<HavingBigfloatFilter>;
  readonly startTime: InputMaybe<HavingDatetimeFilter>;
};

export type ServiceAgreementsHavingSumInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly endTime: InputMaybe<HavingDatetimeFilter>;
  readonly lockedAmount: InputMaybe<HavingBigfloatFilter>;
  readonly period: InputMaybe<HavingBigfloatFilter>;
  readonly startTime: InputMaybe<HavingDatetimeFilter>;
};

export type ServiceAgreementsHavingVariancePopulationInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly endTime: InputMaybe<HavingDatetimeFilter>;
  readonly lockedAmount: InputMaybe<HavingBigfloatFilter>;
  readonly period: InputMaybe<HavingBigfloatFilter>;
  readonly startTime: InputMaybe<HavingDatetimeFilter>;
};

export type ServiceAgreementsHavingVarianceSampleInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly endTime: InputMaybe<HavingDatetimeFilter>;
  readonly lockedAmount: InputMaybe<HavingBigfloatFilter>;
  readonly period: InputMaybe<HavingBigfloatFilter>;
  readonly startTime: InputMaybe<HavingDatetimeFilter>;
};

/** Methods to use when ordering `ServiceAgreement`. */
export enum ServiceAgreementsOrderBy {
  ACCEPTED_OFFERS_AVERAGE_BLOCK_RANGE_ASC = 'ACCEPTED_OFFERS_AVERAGE_BLOCK_RANGE_ASC',
  ACCEPTED_OFFERS_AVERAGE_BLOCK_RANGE_DESC = 'ACCEPTED_OFFERS_AVERAGE_BLOCK_RANGE_DESC',
  ACCEPTED_OFFERS_AVERAGE_CREATED_BLOCK_ASC = 'ACCEPTED_OFFERS_AVERAGE_CREATED_BLOCK_ASC',
  ACCEPTED_OFFERS_AVERAGE_CREATED_BLOCK_DESC = 'ACCEPTED_OFFERS_AVERAGE_CREATED_BLOCK_DESC',
  ACCEPTED_OFFERS_AVERAGE_ID_ASC = 'ACCEPTED_OFFERS_AVERAGE_ID_ASC',
  ACCEPTED_OFFERS_AVERAGE_ID_DESC = 'ACCEPTED_OFFERS_AVERAGE_ID_DESC',
  ACCEPTED_OFFERS_AVERAGE_INDEXER_ID_ASC = 'ACCEPTED_OFFERS_AVERAGE_INDEXER_ID_ASC',
  ACCEPTED_OFFERS_AVERAGE_INDEXER_ID_DESC = 'ACCEPTED_OFFERS_AVERAGE_INDEXER_ID_DESC',
  ACCEPTED_OFFERS_AVERAGE_LAST_EVENT_ASC = 'ACCEPTED_OFFERS_AVERAGE_LAST_EVENT_ASC',
  ACCEPTED_OFFERS_AVERAGE_LAST_EVENT_DESC = 'ACCEPTED_OFFERS_AVERAGE_LAST_EVENT_DESC',
  ACCEPTED_OFFERS_AVERAGE_OFFER_ID_ASC = 'ACCEPTED_OFFERS_AVERAGE_OFFER_ID_ASC',
  ACCEPTED_OFFERS_AVERAGE_OFFER_ID_DESC = 'ACCEPTED_OFFERS_AVERAGE_OFFER_ID_DESC',
  ACCEPTED_OFFERS_AVERAGE_SERVICE_AGREEMENT_ID_ASC = 'ACCEPTED_OFFERS_AVERAGE_SERVICE_AGREEMENT_ID_ASC',
  ACCEPTED_OFFERS_AVERAGE_SERVICE_AGREEMENT_ID_DESC = 'ACCEPTED_OFFERS_AVERAGE_SERVICE_AGREEMENT_ID_DESC',
  ACCEPTED_OFFERS_BY_SERVICE_AGREEMENT_ID__COUNT_ASC = 'ACCEPTED_OFFERS_BY_SERVICE_AGREEMENT_ID__COUNT_ASC',
  ACCEPTED_OFFERS_BY_SERVICE_AGREEMENT_ID__COUNT_DESC = 'ACCEPTED_OFFERS_BY_SERVICE_AGREEMENT_ID__COUNT_DESC',
  ACCEPTED_OFFERS_COUNT_ASC = 'ACCEPTED_OFFERS_COUNT_ASC',
  ACCEPTED_OFFERS_COUNT_DESC = 'ACCEPTED_OFFERS_COUNT_DESC',
  ACCEPTED_OFFERS_DISTINCT_COUNT_BLOCK_RANGE_ASC = 'ACCEPTED_OFFERS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  ACCEPTED_OFFERS_DISTINCT_COUNT_BLOCK_RANGE_DESC = 'ACCEPTED_OFFERS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  ACCEPTED_OFFERS_DISTINCT_COUNT_CREATED_BLOCK_ASC = 'ACCEPTED_OFFERS_DISTINCT_COUNT_CREATED_BLOCK_ASC',
  ACCEPTED_OFFERS_DISTINCT_COUNT_CREATED_BLOCK_DESC = 'ACCEPTED_OFFERS_DISTINCT_COUNT_CREATED_BLOCK_DESC',
  ACCEPTED_OFFERS_DISTINCT_COUNT_ID_ASC = 'ACCEPTED_OFFERS_DISTINCT_COUNT_ID_ASC',
  ACCEPTED_OFFERS_DISTINCT_COUNT_ID_DESC = 'ACCEPTED_OFFERS_DISTINCT_COUNT_ID_DESC',
  ACCEPTED_OFFERS_DISTINCT_COUNT_INDEXER_ID_ASC = 'ACCEPTED_OFFERS_DISTINCT_COUNT_INDEXER_ID_ASC',
  ACCEPTED_OFFERS_DISTINCT_COUNT_INDEXER_ID_DESC = 'ACCEPTED_OFFERS_DISTINCT_COUNT_INDEXER_ID_DESC',
  ACCEPTED_OFFERS_DISTINCT_COUNT_LAST_EVENT_ASC = 'ACCEPTED_OFFERS_DISTINCT_COUNT_LAST_EVENT_ASC',
  ACCEPTED_OFFERS_DISTINCT_COUNT_LAST_EVENT_DESC = 'ACCEPTED_OFFERS_DISTINCT_COUNT_LAST_EVENT_DESC',
  ACCEPTED_OFFERS_DISTINCT_COUNT_OFFER_ID_ASC = 'ACCEPTED_OFFERS_DISTINCT_COUNT_OFFER_ID_ASC',
  ACCEPTED_OFFERS_DISTINCT_COUNT_OFFER_ID_DESC = 'ACCEPTED_OFFERS_DISTINCT_COUNT_OFFER_ID_DESC',
  ACCEPTED_OFFERS_DISTINCT_COUNT_SERVICE_AGREEMENT_ID_ASC = 'ACCEPTED_OFFERS_DISTINCT_COUNT_SERVICE_AGREEMENT_ID_ASC',
  ACCEPTED_OFFERS_DISTINCT_COUNT_SERVICE_AGREEMENT_ID_DESC = 'ACCEPTED_OFFERS_DISTINCT_COUNT_SERVICE_AGREEMENT_ID_DESC',
  ACCEPTED_OFFERS_MAX_BLOCK_RANGE_ASC = 'ACCEPTED_OFFERS_MAX_BLOCK_RANGE_ASC',
  ACCEPTED_OFFERS_MAX_BLOCK_RANGE_DESC = 'ACCEPTED_OFFERS_MAX_BLOCK_RANGE_DESC',
  ACCEPTED_OFFERS_MAX_CREATED_BLOCK_ASC = 'ACCEPTED_OFFERS_MAX_CREATED_BLOCK_ASC',
  ACCEPTED_OFFERS_MAX_CREATED_BLOCK_DESC = 'ACCEPTED_OFFERS_MAX_CREATED_BLOCK_DESC',
  ACCEPTED_OFFERS_MAX_ID_ASC = 'ACCEPTED_OFFERS_MAX_ID_ASC',
  ACCEPTED_OFFERS_MAX_ID_DESC = 'ACCEPTED_OFFERS_MAX_ID_DESC',
  ACCEPTED_OFFERS_MAX_INDEXER_ID_ASC = 'ACCEPTED_OFFERS_MAX_INDEXER_ID_ASC',
  ACCEPTED_OFFERS_MAX_INDEXER_ID_DESC = 'ACCEPTED_OFFERS_MAX_INDEXER_ID_DESC',
  ACCEPTED_OFFERS_MAX_LAST_EVENT_ASC = 'ACCEPTED_OFFERS_MAX_LAST_EVENT_ASC',
  ACCEPTED_OFFERS_MAX_LAST_EVENT_DESC = 'ACCEPTED_OFFERS_MAX_LAST_EVENT_DESC',
  ACCEPTED_OFFERS_MAX_OFFER_ID_ASC = 'ACCEPTED_OFFERS_MAX_OFFER_ID_ASC',
  ACCEPTED_OFFERS_MAX_OFFER_ID_DESC = 'ACCEPTED_OFFERS_MAX_OFFER_ID_DESC',
  ACCEPTED_OFFERS_MAX_SERVICE_AGREEMENT_ID_ASC = 'ACCEPTED_OFFERS_MAX_SERVICE_AGREEMENT_ID_ASC',
  ACCEPTED_OFFERS_MAX_SERVICE_AGREEMENT_ID_DESC = 'ACCEPTED_OFFERS_MAX_SERVICE_AGREEMENT_ID_DESC',
  ACCEPTED_OFFERS_MIN_BLOCK_RANGE_ASC = 'ACCEPTED_OFFERS_MIN_BLOCK_RANGE_ASC',
  ACCEPTED_OFFERS_MIN_BLOCK_RANGE_DESC = 'ACCEPTED_OFFERS_MIN_BLOCK_RANGE_DESC',
  ACCEPTED_OFFERS_MIN_CREATED_BLOCK_ASC = 'ACCEPTED_OFFERS_MIN_CREATED_BLOCK_ASC',
  ACCEPTED_OFFERS_MIN_CREATED_BLOCK_DESC = 'ACCEPTED_OFFERS_MIN_CREATED_BLOCK_DESC',
  ACCEPTED_OFFERS_MIN_ID_ASC = 'ACCEPTED_OFFERS_MIN_ID_ASC',
  ACCEPTED_OFFERS_MIN_ID_DESC = 'ACCEPTED_OFFERS_MIN_ID_DESC',
  ACCEPTED_OFFERS_MIN_INDEXER_ID_ASC = 'ACCEPTED_OFFERS_MIN_INDEXER_ID_ASC',
  ACCEPTED_OFFERS_MIN_INDEXER_ID_DESC = 'ACCEPTED_OFFERS_MIN_INDEXER_ID_DESC',
  ACCEPTED_OFFERS_MIN_LAST_EVENT_ASC = 'ACCEPTED_OFFERS_MIN_LAST_EVENT_ASC',
  ACCEPTED_OFFERS_MIN_LAST_EVENT_DESC = 'ACCEPTED_OFFERS_MIN_LAST_EVENT_DESC',
  ACCEPTED_OFFERS_MIN_OFFER_ID_ASC = 'ACCEPTED_OFFERS_MIN_OFFER_ID_ASC',
  ACCEPTED_OFFERS_MIN_OFFER_ID_DESC = 'ACCEPTED_OFFERS_MIN_OFFER_ID_DESC',
  ACCEPTED_OFFERS_MIN_SERVICE_AGREEMENT_ID_ASC = 'ACCEPTED_OFFERS_MIN_SERVICE_AGREEMENT_ID_ASC',
  ACCEPTED_OFFERS_MIN_SERVICE_AGREEMENT_ID_DESC = 'ACCEPTED_OFFERS_MIN_SERVICE_AGREEMENT_ID_DESC',
  ACCEPTED_OFFERS_STDDEV_POPULATION_BLOCK_RANGE_ASC = 'ACCEPTED_OFFERS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  ACCEPTED_OFFERS_STDDEV_POPULATION_BLOCK_RANGE_DESC = 'ACCEPTED_OFFERS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  ACCEPTED_OFFERS_STDDEV_POPULATION_CREATED_BLOCK_ASC = 'ACCEPTED_OFFERS_STDDEV_POPULATION_CREATED_BLOCK_ASC',
  ACCEPTED_OFFERS_STDDEV_POPULATION_CREATED_BLOCK_DESC = 'ACCEPTED_OFFERS_STDDEV_POPULATION_CREATED_BLOCK_DESC',
  ACCEPTED_OFFERS_STDDEV_POPULATION_ID_ASC = 'ACCEPTED_OFFERS_STDDEV_POPULATION_ID_ASC',
  ACCEPTED_OFFERS_STDDEV_POPULATION_ID_DESC = 'ACCEPTED_OFFERS_STDDEV_POPULATION_ID_DESC',
  ACCEPTED_OFFERS_STDDEV_POPULATION_INDEXER_ID_ASC = 'ACCEPTED_OFFERS_STDDEV_POPULATION_INDEXER_ID_ASC',
  ACCEPTED_OFFERS_STDDEV_POPULATION_INDEXER_ID_DESC = 'ACCEPTED_OFFERS_STDDEV_POPULATION_INDEXER_ID_DESC',
  ACCEPTED_OFFERS_STDDEV_POPULATION_LAST_EVENT_ASC = 'ACCEPTED_OFFERS_STDDEV_POPULATION_LAST_EVENT_ASC',
  ACCEPTED_OFFERS_STDDEV_POPULATION_LAST_EVENT_DESC = 'ACCEPTED_OFFERS_STDDEV_POPULATION_LAST_EVENT_DESC',
  ACCEPTED_OFFERS_STDDEV_POPULATION_OFFER_ID_ASC = 'ACCEPTED_OFFERS_STDDEV_POPULATION_OFFER_ID_ASC',
  ACCEPTED_OFFERS_STDDEV_POPULATION_OFFER_ID_DESC = 'ACCEPTED_OFFERS_STDDEV_POPULATION_OFFER_ID_DESC',
  ACCEPTED_OFFERS_STDDEV_POPULATION_SERVICE_AGREEMENT_ID_ASC = 'ACCEPTED_OFFERS_STDDEV_POPULATION_SERVICE_AGREEMENT_ID_ASC',
  ACCEPTED_OFFERS_STDDEV_POPULATION_SERVICE_AGREEMENT_ID_DESC = 'ACCEPTED_OFFERS_STDDEV_POPULATION_SERVICE_AGREEMENT_ID_DESC',
  ACCEPTED_OFFERS_STDDEV_SAMPLE_BLOCK_RANGE_ASC = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  ACCEPTED_OFFERS_STDDEV_SAMPLE_BLOCK_RANGE_DESC = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  ACCEPTED_OFFERS_STDDEV_SAMPLE_CREATED_BLOCK_ASC = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_CREATED_BLOCK_ASC',
  ACCEPTED_OFFERS_STDDEV_SAMPLE_CREATED_BLOCK_DESC = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_CREATED_BLOCK_DESC',
  ACCEPTED_OFFERS_STDDEV_SAMPLE_ID_ASC = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_ID_ASC',
  ACCEPTED_OFFERS_STDDEV_SAMPLE_ID_DESC = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_ID_DESC',
  ACCEPTED_OFFERS_STDDEV_SAMPLE_INDEXER_ID_ASC = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_INDEXER_ID_ASC',
  ACCEPTED_OFFERS_STDDEV_SAMPLE_INDEXER_ID_DESC = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_INDEXER_ID_DESC',
  ACCEPTED_OFFERS_STDDEV_SAMPLE_LAST_EVENT_ASC = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_LAST_EVENT_ASC',
  ACCEPTED_OFFERS_STDDEV_SAMPLE_LAST_EVENT_DESC = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_LAST_EVENT_DESC',
  ACCEPTED_OFFERS_STDDEV_SAMPLE_OFFER_ID_ASC = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_OFFER_ID_ASC',
  ACCEPTED_OFFERS_STDDEV_SAMPLE_OFFER_ID_DESC = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_OFFER_ID_DESC',
  ACCEPTED_OFFERS_STDDEV_SAMPLE_SERVICE_AGREEMENT_ID_ASC = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_SERVICE_AGREEMENT_ID_ASC',
  ACCEPTED_OFFERS_STDDEV_SAMPLE_SERVICE_AGREEMENT_ID_DESC = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_SERVICE_AGREEMENT_ID_DESC',
  ACCEPTED_OFFERS_SUM_BLOCK_RANGE_ASC = 'ACCEPTED_OFFERS_SUM_BLOCK_RANGE_ASC',
  ACCEPTED_OFFERS_SUM_BLOCK_RANGE_DESC = 'ACCEPTED_OFFERS_SUM_BLOCK_RANGE_DESC',
  ACCEPTED_OFFERS_SUM_CREATED_BLOCK_ASC = 'ACCEPTED_OFFERS_SUM_CREATED_BLOCK_ASC',
  ACCEPTED_OFFERS_SUM_CREATED_BLOCK_DESC = 'ACCEPTED_OFFERS_SUM_CREATED_BLOCK_DESC',
  ACCEPTED_OFFERS_SUM_ID_ASC = 'ACCEPTED_OFFERS_SUM_ID_ASC',
  ACCEPTED_OFFERS_SUM_ID_DESC = 'ACCEPTED_OFFERS_SUM_ID_DESC',
  ACCEPTED_OFFERS_SUM_INDEXER_ID_ASC = 'ACCEPTED_OFFERS_SUM_INDEXER_ID_ASC',
  ACCEPTED_OFFERS_SUM_INDEXER_ID_DESC = 'ACCEPTED_OFFERS_SUM_INDEXER_ID_DESC',
  ACCEPTED_OFFERS_SUM_LAST_EVENT_ASC = 'ACCEPTED_OFFERS_SUM_LAST_EVENT_ASC',
  ACCEPTED_OFFERS_SUM_LAST_EVENT_DESC = 'ACCEPTED_OFFERS_SUM_LAST_EVENT_DESC',
  ACCEPTED_OFFERS_SUM_OFFER_ID_ASC = 'ACCEPTED_OFFERS_SUM_OFFER_ID_ASC',
  ACCEPTED_OFFERS_SUM_OFFER_ID_DESC = 'ACCEPTED_OFFERS_SUM_OFFER_ID_DESC',
  ACCEPTED_OFFERS_SUM_SERVICE_AGREEMENT_ID_ASC = 'ACCEPTED_OFFERS_SUM_SERVICE_AGREEMENT_ID_ASC',
  ACCEPTED_OFFERS_SUM_SERVICE_AGREEMENT_ID_DESC = 'ACCEPTED_OFFERS_SUM_SERVICE_AGREEMENT_ID_DESC',
  ACCEPTED_OFFERS_VARIANCE_POPULATION_BLOCK_RANGE_ASC = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  ACCEPTED_OFFERS_VARIANCE_POPULATION_BLOCK_RANGE_DESC = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  ACCEPTED_OFFERS_VARIANCE_POPULATION_CREATED_BLOCK_ASC = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_CREATED_BLOCK_ASC',
  ACCEPTED_OFFERS_VARIANCE_POPULATION_CREATED_BLOCK_DESC = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_CREATED_BLOCK_DESC',
  ACCEPTED_OFFERS_VARIANCE_POPULATION_ID_ASC = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_ID_ASC',
  ACCEPTED_OFFERS_VARIANCE_POPULATION_ID_DESC = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_ID_DESC',
  ACCEPTED_OFFERS_VARIANCE_POPULATION_INDEXER_ID_ASC = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_INDEXER_ID_ASC',
  ACCEPTED_OFFERS_VARIANCE_POPULATION_INDEXER_ID_DESC = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_INDEXER_ID_DESC',
  ACCEPTED_OFFERS_VARIANCE_POPULATION_LAST_EVENT_ASC = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_LAST_EVENT_ASC',
  ACCEPTED_OFFERS_VARIANCE_POPULATION_LAST_EVENT_DESC = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_LAST_EVENT_DESC',
  ACCEPTED_OFFERS_VARIANCE_POPULATION_OFFER_ID_ASC = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_OFFER_ID_ASC',
  ACCEPTED_OFFERS_VARIANCE_POPULATION_OFFER_ID_DESC = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_OFFER_ID_DESC',
  ACCEPTED_OFFERS_VARIANCE_POPULATION_SERVICE_AGREEMENT_ID_ASC = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_SERVICE_AGREEMENT_ID_ASC',
  ACCEPTED_OFFERS_VARIANCE_POPULATION_SERVICE_AGREEMENT_ID_DESC = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_SERVICE_AGREEMENT_ID_DESC',
  ACCEPTED_OFFERS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  ACCEPTED_OFFERS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  ACCEPTED_OFFERS_VARIANCE_SAMPLE_CREATED_BLOCK_ASC = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_CREATED_BLOCK_ASC',
  ACCEPTED_OFFERS_VARIANCE_SAMPLE_CREATED_BLOCK_DESC = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_CREATED_BLOCK_DESC',
  ACCEPTED_OFFERS_VARIANCE_SAMPLE_ID_ASC = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_ID_ASC',
  ACCEPTED_OFFERS_VARIANCE_SAMPLE_ID_DESC = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_ID_DESC',
  ACCEPTED_OFFERS_VARIANCE_SAMPLE_INDEXER_ID_ASC = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  ACCEPTED_OFFERS_VARIANCE_SAMPLE_INDEXER_ID_DESC = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  ACCEPTED_OFFERS_VARIANCE_SAMPLE_LAST_EVENT_ASC = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_LAST_EVENT_ASC',
  ACCEPTED_OFFERS_VARIANCE_SAMPLE_LAST_EVENT_DESC = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_LAST_EVENT_DESC',
  ACCEPTED_OFFERS_VARIANCE_SAMPLE_OFFER_ID_ASC = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_OFFER_ID_ASC',
  ACCEPTED_OFFERS_VARIANCE_SAMPLE_OFFER_ID_DESC = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_OFFER_ID_DESC',
  ACCEPTED_OFFERS_VARIANCE_SAMPLE_SERVICE_AGREEMENT_ID_ASC = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_SERVICE_AGREEMENT_ID_ASC',
  ACCEPTED_OFFERS_VARIANCE_SAMPLE_SERVICE_AGREEMENT_ID_DESC = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_SERVICE_AGREEMENT_ID_DESC',
  CONSUMER_ADDRESS_ASC = 'CONSUMER_ADDRESS_ASC',
  CONSUMER_ADDRESS_DESC = 'CONSUMER_ADDRESS_DESC',
  CREATED_BLOCK_ASC = 'CREATED_BLOCK_ASC',
  CREATED_BLOCK_DESC = 'CREATED_BLOCK_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__ID_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__ID_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__ID_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__ID_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_DESC',
  DEPLOYMENT_ID_ASC = 'DEPLOYMENT_ID_ASC',
  DEPLOYMENT_ID_DESC = 'DEPLOYMENT_ID_DESC',
  END_TIME_ASC = 'END_TIME_ASC',
  END_TIME_DESC = 'END_TIME_DESC',
  ID_ASC = 'ID_ASC',
  ID_DESC = 'ID_DESC',
  INDEXER_ADDRESS_ASC = 'INDEXER_ADDRESS_ASC',
  INDEXER_ADDRESS_DESC = 'INDEXER_ADDRESS_DESC',
  LAST_EVENT_ASC = 'LAST_EVENT_ASC',
  LAST_EVENT_DESC = 'LAST_EVENT_DESC',
  LOCKED_AMOUNT_ASC = 'LOCKED_AMOUNT_ASC',
  LOCKED_AMOUNT_DESC = 'LOCKED_AMOUNT_DESC',
  NATURAL = 'NATURAL',
  PERIOD_ASC = 'PERIOD_ASC',
  PERIOD_DESC = 'PERIOD_DESC',
  PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__ACTIVE_ASC = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__ACTIVE_ASC',
  PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__ACTIVE_DESC = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__ACTIVE_DESC',
  PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__CREATED_BLOCK_ASC = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__CREATED_BLOCK_ASC',
  PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__CREATED_BLOCK_DESC = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__CREATED_BLOCK_DESC',
  PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__DAILY_REQ_CAP_ASC = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__DAILY_REQ_CAP_ASC',
  PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__DAILY_REQ_CAP_DESC = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__DAILY_REQ_CAP_DESC',
  PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__ID_ASC = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__ID_ASC',
  PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__ID_DESC = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__ID_DESC',
  PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__LAST_EVENT_ASC = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__LAST_EVENT_ASC',
  PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__LAST_EVENT_DESC = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__LAST_EVENT_DESC',
  PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__METADATA_ASC = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__METADATA_ASC',
  PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__METADATA_DESC = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__METADATA_DESC',
  PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__PERIOD_ASC = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__PERIOD_ASC',
  PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__PERIOD_DESC = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__PERIOD_DESC',
  PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__PRICE_TOKEN_ASC = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__PRICE_TOKEN_ASC',
  PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__PRICE_TOKEN_DESC = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__PRICE_TOKEN_DESC',
  PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__RATE_LIMIT_ASC = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__RATE_LIMIT_ASC',
  PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__RATE_LIMIT_DESC = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__RATE_LIMIT_DESC',
  PLAN_TEMPLATE_ID_ASC = 'PLAN_TEMPLATE_ID_ASC',
  PLAN_TEMPLATE_ID_DESC = 'PLAN_TEMPLATE_ID_DESC',
  PRIMARY_KEY_ASC = 'PRIMARY_KEY_ASC',
  PRIMARY_KEY_DESC = 'PRIMARY_KEY_DESC',
  START_TIME_ASC = 'START_TIME_ASC',
  START_TIME_DESC = 'START_TIME_DESC',
}

export enum ServiceStatus {
  READY = 'READY',
  TERMINATED = 'TERMINATED',
}

/** A filter to be used against ServiceStatus fields. All fields are combined with a logical ‘and.’ */
export type ServiceStatusFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  readonly distinctFrom: InputMaybe<ServiceStatus>;
  /** Equal to the specified value. */
  readonly equalTo: InputMaybe<ServiceStatus>;
  /** Greater than the specified value. */
  readonly greaterThan: InputMaybe<ServiceStatus>;
  /** Greater than or equal to the specified value. */
  readonly greaterThanOrEqualTo: InputMaybe<ServiceStatus>;
  /** Included in the specified list. */
  readonly in: InputMaybe<ReadonlyArray<ServiceStatus>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  readonly isNull: InputMaybe<Scalars['Boolean']['input']>;
  /** Less than the specified value. */
  readonly lessThan: InputMaybe<ServiceStatus>;
  /** Less than or equal to the specified value. */
  readonly lessThanOrEqualTo: InputMaybe<ServiceStatus>;
  /** Equal to the specified value, treating null like an ordinary value. */
  readonly notDistinctFrom: InputMaybe<ServiceStatus>;
  /** Not equal to the specified value. */
  readonly notEqualTo: InputMaybe<ServiceStatus>;
  /** Not included in the specified list. */
  readonly notIn: InputMaybe<ReadonlyArray<ServiceStatus>>;
};

export type Sqtoken = Node & {
  readonly __typename: 'Sqtoken';
  readonly circulatingSupply: Scalars['BigFloat']['output'];
  readonly id: Scalars['String']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  readonly nodeId: Scalars['ID']['output'];
  /** Reads and enables pagination through a set of `TokenHolder`. */
  readonly tokenHolders: TokenHoldersConnection;
  readonly totalSupply: Scalars['BigFloat']['output'];
};

export type SqtokenTokenHoldersArgs = {
  after: InputMaybe<Scalars['Cursor']['input']>;
  before: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<ReadonlyArray<InputMaybe<Token_Holders_Distinct_Enum>>>;
  filter: InputMaybe<TokenHolderFilter>;
  first: InputMaybe<Scalars['Int']['input']>;
  last: InputMaybe<Scalars['Int']['input']>;
  offset: InputMaybe<Scalars['Int']['input']>;
  orderBy: InputMaybe<ReadonlyArray<TokenHoldersOrderBy>>;
  orderByNull: InputMaybe<NullOrder>;
};

export type SqtokenAggregates = {
  readonly __typename: 'SqtokenAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly average: Maybe<SqtokenAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly distinctCount: Maybe<SqtokenDistinctCountAggregates>;
  readonly keys: Maybe<ReadonlyArray<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly max: Maybe<SqtokenMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly min: Maybe<SqtokenMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevPopulation: Maybe<SqtokenStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevSample: Maybe<SqtokenStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly sum: Maybe<SqtokenSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly variancePopulation: Maybe<SqtokenVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly varianceSample: Maybe<SqtokenVarianceSampleAggregates>;
};

export type SqtokenAverageAggregates = {
  readonly __typename: 'SqtokenAverageAggregates';
  /** Mean average of circulatingSupply across the matching connection */
  readonly circulatingSupply: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of totalSupply across the matching connection */
  readonly totalSupply: Maybe<Scalars['BigFloat']['output']>;
};

export type SqtokenDistinctCountAggregates = {
  readonly __typename: 'SqtokenDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  readonly _blockRange: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  readonly _id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of circulatingSupply across the matching connection */
  readonly circulatingSupply: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  readonly id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of totalSupply across the matching connection */
  readonly totalSupply: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `Sqtoken` object types. All fields are combined with a logical ‘and.’ */
export type SqtokenFilter = {
  /** Checks for all expressions in this list. */
  readonly and: InputMaybe<ReadonlyArray<SqtokenFilter>>;
  /** Filter by the object’s `circulatingSupply` field. */
  readonly circulatingSupply: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `id` field. */
  readonly id: InputMaybe<StringFilter>;
  /** Negates the expression. */
  readonly not: InputMaybe<SqtokenFilter>;
  /** Checks for any expressions in this list. */
  readonly or: InputMaybe<ReadonlyArray<SqtokenFilter>>;
  /** Filter by the object’s `tokenHolders` relation. */
  readonly tokenHolders: InputMaybe<SqtokenToManyTokenHolderFilter>;
  /** Some related `tokenHolders` exist. */
  readonly tokenHoldersExist: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `totalSupply` field. */
  readonly totalSupply: InputMaybe<BigFloatFilter>;
};

export type SqtokenMaxAggregates = {
  readonly __typename: 'SqtokenMaxAggregates';
  /** Maximum of circulatingSupply across the matching connection */
  readonly circulatingSupply: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of totalSupply across the matching connection */
  readonly totalSupply: Maybe<Scalars['BigFloat']['output']>;
};

export type SqtokenMinAggregates = {
  readonly __typename: 'SqtokenMinAggregates';
  /** Minimum of circulatingSupply across the matching connection */
  readonly circulatingSupply: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of totalSupply across the matching connection */
  readonly totalSupply: Maybe<Scalars['BigFloat']['output']>;
};

export type SqtokenStddevPopulationAggregates = {
  readonly __typename: 'SqtokenStddevPopulationAggregates';
  /** Population standard deviation of circulatingSupply across the matching connection */
  readonly circulatingSupply: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of totalSupply across the matching connection */
  readonly totalSupply: Maybe<Scalars['BigFloat']['output']>;
};

export type SqtokenStddevSampleAggregates = {
  readonly __typename: 'SqtokenStddevSampleAggregates';
  /** Sample standard deviation of circulatingSupply across the matching connection */
  readonly circulatingSupply: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of totalSupply across the matching connection */
  readonly totalSupply: Maybe<Scalars['BigFloat']['output']>;
};

export type SqtokenSumAggregates = {
  readonly __typename: 'SqtokenSumAggregates';
  /** Sum of circulatingSupply across the matching connection */
  readonly circulatingSupply: Scalars['BigFloat']['output'];
  /** Sum of totalSupply across the matching connection */
  readonly totalSupply: Scalars['BigFloat']['output'];
};

/** A filter to be used against many `TokenHolder` object types. All fields are combined with a logical ‘and.’ */
export type SqtokenToManyTokenHolderFilter = {
  /** Aggregates across related `TokenHolder` match the filter criteria. */
  readonly aggregates: InputMaybe<TokenHolderAggregatesFilter>;
  /** Every related `TokenHolder` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly every: InputMaybe<TokenHolderFilter>;
  /** No related `TokenHolder` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly none: InputMaybe<TokenHolderFilter>;
  /** Some related `TokenHolder` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  readonly some: InputMaybe<TokenHolderFilter>;
};

export type SqtokenVariancePopulationAggregates = {
  readonly __typename: 'SqtokenVariancePopulationAggregates';
  /** Population variance of circulatingSupply across the matching connection */
  readonly circulatingSupply: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of totalSupply across the matching connection */
  readonly totalSupply: Maybe<Scalars['BigFloat']['output']>;
};

export type SqtokenVarianceSampleAggregates = {
  readonly __typename: 'SqtokenVarianceSampleAggregates';
  /** Sample variance of circulatingSupply across the matching connection */
  readonly circulatingSupply: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of totalSupply across the matching connection */
  readonly totalSupply: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `Sqtoken` values. */
export type SqtokensConnection = {
  readonly __typename: 'SqtokensConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<SqtokenAggregates>;
  /** A list of edges which contains the `Sqtoken` and cursor to aid in pagination. */
  readonly edges: ReadonlyArray<SqtokensEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<SqtokenAggregates>>;
  /** A list of `Sqtoken` objects. */
  readonly nodes: ReadonlyArray<Maybe<Sqtoken>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Sqtoken` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Sqtoken` values. */
export type SqtokensConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<SqtokensGroupBy>;
  having: InputMaybe<SqtokensHavingInput>;
};

/** A `Sqtoken` edge in the connection. */
export type SqtokensEdge = {
  readonly __typename: 'SqtokensEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `Sqtoken` at the end of the edge. */
  readonly node: Maybe<Sqtoken>;
};

/** Grouping methods for `Sqtoken` for usage during aggregation. */
export enum SqtokensGroupBy {
  CIRCULATING_SUPPLY = 'CIRCULATING_SUPPLY',
  ID = 'ID',
  TOTAL_SUPPLY = 'TOTAL_SUPPLY',
}

export type SqtokensHavingAverageInput = {
  readonly circulatingSupply: InputMaybe<HavingBigfloatFilter>;
  readonly totalSupply: InputMaybe<HavingBigfloatFilter>;
};

export type SqtokensHavingDistinctCountInput = {
  readonly circulatingSupply: InputMaybe<HavingBigfloatFilter>;
  readonly totalSupply: InputMaybe<HavingBigfloatFilter>;
};

/** Conditions for `Sqtoken` aggregates. */
export type SqtokensHavingInput = {
  readonly AND: InputMaybe<ReadonlyArray<SqtokensHavingInput>>;
  readonly OR: InputMaybe<ReadonlyArray<SqtokensHavingInput>>;
  readonly average: InputMaybe<SqtokensHavingAverageInput>;
  readonly distinctCount: InputMaybe<SqtokensHavingDistinctCountInput>;
  readonly max: InputMaybe<SqtokensHavingMaxInput>;
  readonly min: InputMaybe<SqtokensHavingMinInput>;
  readonly stddevPopulation: InputMaybe<SqtokensHavingStddevPopulationInput>;
  readonly stddevSample: InputMaybe<SqtokensHavingStddevSampleInput>;
  readonly sum: InputMaybe<SqtokensHavingSumInput>;
  readonly variancePopulation: InputMaybe<SqtokensHavingVariancePopulationInput>;
  readonly varianceSample: InputMaybe<SqtokensHavingVarianceSampleInput>;
};

export type SqtokensHavingMaxInput = {
  readonly circulatingSupply: InputMaybe<HavingBigfloatFilter>;
  readonly totalSupply: InputMaybe<HavingBigfloatFilter>;
};

export type SqtokensHavingMinInput = {
  readonly circulatingSupply: InputMaybe<HavingBigfloatFilter>;
  readonly totalSupply: InputMaybe<HavingBigfloatFilter>;
};

export type SqtokensHavingStddevPopulationInput = {
  readonly circulatingSupply: InputMaybe<HavingBigfloatFilter>;
  readonly totalSupply: InputMaybe<HavingBigfloatFilter>;
};

export type SqtokensHavingStddevSampleInput = {
  readonly circulatingSupply: InputMaybe<HavingBigfloatFilter>;
  readonly totalSupply: InputMaybe<HavingBigfloatFilter>;
};

export type SqtokensHavingSumInput = {
  readonly circulatingSupply: InputMaybe<HavingBigfloatFilter>;
  readonly totalSupply: InputMaybe<HavingBigfloatFilter>;
};

export type SqtokensHavingVariancePopulationInput = {
  readonly circulatingSupply: InputMaybe<HavingBigfloatFilter>;
  readonly totalSupply: InputMaybe<HavingBigfloatFilter>;
};

export type SqtokensHavingVarianceSampleInput = {
  readonly circulatingSupply: InputMaybe<HavingBigfloatFilter>;
  readonly totalSupply: InputMaybe<HavingBigfloatFilter>;
};

/** Methods to use when ordering `Sqtoken`. */
export enum SqtokensOrderBy {
  CIRCULATING_SUPPLY_ASC = 'CIRCULATING_SUPPLY_ASC',
  CIRCULATING_SUPPLY_DESC = 'CIRCULATING_SUPPLY_DESC',
  ID_ASC = 'ID_ASC',
  ID_DESC = 'ID_DESC',
  NATURAL = 'NATURAL',
  PRIMARY_KEY_ASC = 'PRIMARY_KEY_ASC',
  PRIMARY_KEY_DESC = 'PRIMARY_KEY_DESC',
  TOKEN_HOLDERS_AVERAGE_BALANCE_ASC = 'TOKEN_HOLDERS_AVERAGE_BALANCE_ASC',
  TOKEN_HOLDERS_AVERAGE_BALANCE_DESC = 'TOKEN_HOLDERS_AVERAGE_BALANCE_DESC',
  TOKEN_HOLDERS_AVERAGE_BLOCK_RANGE_ASC = 'TOKEN_HOLDERS_AVERAGE_BLOCK_RANGE_ASC',
  TOKEN_HOLDERS_AVERAGE_BLOCK_RANGE_DESC = 'TOKEN_HOLDERS_AVERAGE_BLOCK_RANGE_DESC',
  TOKEN_HOLDERS_AVERAGE_ID_ASC = 'TOKEN_HOLDERS_AVERAGE_ID_ASC',
  TOKEN_HOLDERS_AVERAGE_ID_DESC = 'TOKEN_HOLDERS_AVERAGE_ID_DESC',
  TOKEN_HOLDERS_AVERAGE_TOKEN_ID_ASC = 'TOKEN_HOLDERS_AVERAGE_TOKEN_ID_ASC',
  TOKEN_HOLDERS_AVERAGE_TOKEN_ID_DESC = 'TOKEN_HOLDERS_AVERAGE_TOKEN_ID_DESC',
  TOKEN_HOLDERS_BY_TOKEN_ID__COUNT_ASC = 'TOKEN_HOLDERS_BY_TOKEN_ID__COUNT_ASC',
  TOKEN_HOLDERS_BY_TOKEN_ID__COUNT_DESC = 'TOKEN_HOLDERS_BY_TOKEN_ID__COUNT_DESC',
  TOKEN_HOLDERS_COUNT_ASC = 'TOKEN_HOLDERS_COUNT_ASC',
  TOKEN_HOLDERS_COUNT_DESC = 'TOKEN_HOLDERS_COUNT_DESC',
  TOKEN_HOLDERS_DISTINCT_COUNT_BALANCE_ASC = 'TOKEN_HOLDERS_DISTINCT_COUNT_BALANCE_ASC',
  TOKEN_HOLDERS_DISTINCT_COUNT_BALANCE_DESC = 'TOKEN_HOLDERS_DISTINCT_COUNT_BALANCE_DESC',
  TOKEN_HOLDERS_DISTINCT_COUNT_BLOCK_RANGE_ASC = 'TOKEN_HOLDERS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  TOKEN_HOLDERS_DISTINCT_COUNT_BLOCK_RANGE_DESC = 'TOKEN_HOLDERS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  TOKEN_HOLDERS_DISTINCT_COUNT_ID_ASC = 'TOKEN_HOLDERS_DISTINCT_COUNT_ID_ASC',
  TOKEN_HOLDERS_DISTINCT_COUNT_ID_DESC = 'TOKEN_HOLDERS_DISTINCT_COUNT_ID_DESC',
  TOKEN_HOLDERS_DISTINCT_COUNT_TOKEN_ID_ASC = 'TOKEN_HOLDERS_DISTINCT_COUNT_TOKEN_ID_ASC',
  TOKEN_HOLDERS_DISTINCT_COUNT_TOKEN_ID_DESC = 'TOKEN_HOLDERS_DISTINCT_COUNT_TOKEN_ID_DESC',
  TOKEN_HOLDERS_MAX_BALANCE_ASC = 'TOKEN_HOLDERS_MAX_BALANCE_ASC',
  TOKEN_HOLDERS_MAX_BALANCE_DESC = 'TOKEN_HOLDERS_MAX_BALANCE_DESC',
  TOKEN_HOLDERS_MAX_BLOCK_RANGE_ASC = 'TOKEN_HOLDERS_MAX_BLOCK_RANGE_ASC',
  TOKEN_HOLDERS_MAX_BLOCK_RANGE_DESC = 'TOKEN_HOLDERS_MAX_BLOCK_RANGE_DESC',
  TOKEN_HOLDERS_MAX_ID_ASC = 'TOKEN_HOLDERS_MAX_ID_ASC',
  TOKEN_HOLDERS_MAX_ID_DESC = 'TOKEN_HOLDERS_MAX_ID_DESC',
  TOKEN_HOLDERS_MAX_TOKEN_ID_ASC = 'TOKEN_HOLDERS_MAX_TOKEN_ID_ASC',
  TOKEN_HOLDERS_MAX_TOKEN_ID_DESC = 'TOKEN_HOLDERS_MAX_TOKEN_ID_DESC',
  TOKEN_HOLDERS_MIN_BALANCE_ASC = 'TOKEN_HOLDERS_MIN_BALANCE_ASC',
  TOKEN_HOLDERS_MIN_BALANCE_DESC = 'TOKEN_HOLDERS_MIN_BALANCE_DESC',
  TOKEN_HOLDERS_MIN_BLOCK_RANGE_ASC = 'TOKEN_HOLDERS_MIN_BLOCK_RANGE_ASC',
  TOKEN_HOLDERS_MIN_BLOCK_RANGE_DESC = 'TOKEN_HOLDERS_MIN_BLOCK_RANGE_DESC',
  TOKEN_HOLDERS_MIN_ID_ASC = 'TOKEN_HOLDERS_MIN_ID_ASC',
  TOKEN_HOLDERS_MIN_ID_DESC = 'TOKEN_HOLDERS_MIN_ID_DESC',
  TOKEN_HOLDERS_MIN_TOKEN_ID_ASC = 'TOKEN_HOLDERS_MIN_TOKEN_ID_ASC',
  TOKEN_HOLDERS_MIN_TOKEN_ID_DESC = 'TOKEN_HOLDERS_MIN_TOKEN_ID_DESC',
  TOKEN_HOLDERS_STDDEV_POPULATION_BALANCE_ASC = 'TOKEN_HOLDERS_STDDEV_POPULATION_BALANCE_ASC',
  TOKEN_HOLDERS_STDDEV_POPULATION_BALANCE_DESC = 'TOKEN_HOLDERS_STDDEV_POPULATION_BALANCE_DESC',
  TOKEN_HOLDERS_STDDEV_POPULATION_BLOCK_RANGE_ASC = 'TOKEN_HOLDERS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  TOKEN_HOLDERS_STDDEV_POPULATION_BLOCK_RANGE_DESC = 'TOKEN_HOLDERS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  TOKEN_HOLDERS_STDDEV_POPULATION_ID_ASC = 'TOKEN_HOLDERS_STDDEV_POPULATION_ID_ASC',
  TOKEN_HOLDERS_STDDEV_POPULATION_ID_DESC = 'TOKEN_HOLDERS_STDDEV_POPULATION_ID_DESC',
  TOKEN_HOLDERS_STDDEV_POPULATION_TOKEN_ID_ASC = 'TOKEN_HOLDERS_STDDEV_POPULATION_TOKEN_ID_ASC',
  TOKEN_HOLDERS_STDDEV_POPULATION_TOKEN_ID_DESC = 'TOKEN_HOLDERS_STDDEV_POPULATION_TOKEN_ID_DESC',
  TOKEN_HOLDERS_STDDEV_SAMPLE_BALANCE_ASC = 'TOKEN_HOLDERS_STDDEV_SAMPLE_BALANCE_ASC',
  TOKEN_HOLDERS_STDDEV_SAMPLE_BALANCE_DESC = 'TOKEN_HOLDERS_STDDEV_SAMPLE_BALANCE_DESC',
  TOKEN_HOLDERS_STDDEV_SAMPLE_BLOCK_RANGE_ASC = 'TOKEN_HOLDERS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  TOKEN_HOLDERS_STDDEV_SAMPLE_BLOCK_RANGE_DESC = 'TOKEN_HOLDERS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  TOKEN_HOLDERS_STDDEV_SAMPLE_ID_ASC = 'TOKEN_HOLDERS_STDDEV_SAMPLE_ID_ASC',
  TOKEN_HOLDERS_STDDEV_SAMPLE_ID_DESC = 'TOKEN_HOLDERS_STDDEV_SAMPLE_ID_DESC',
  TOKEN_HOLDERS_STDDEV_SAMPLE_TOKEN_ID_ASC = 'TOKEN_HOLDERS_STDDEV_SAMPLE_TOKEN_ID_ASC',
  TOKEN_HOLDERS_STDDEV_SAMPLE_TOKEN_ID_DESC = 'TOKEN_HOLDERS_STDDEV_SAMPLE_TOKEN_ID_DESC',
  TOKEN_HOLDERS_SUM_BALANCE_ASC = 'TOKEN_HOLDERS_SUM_BALANCE_ASC',
  TOKEN_HOLDERS_SUM_BALANCE_DESC = 'TOKEN_HOLDERS_SUM_BALANCE_DESC',
  TOKEN_HOLDERS_SUM_BLOCK_RANGE_ASC = 'TOKEN_HOLDERS_SUM_BLOCK_RANGE_ASC',
  TOKEN_HOLDERS_SUM_BLOCK_RANGE_DESC = 'TOKEN_HOLDERS_SUM_BLOCK_RANGE_DESC',
  TOKEN_HOLDERS_SUM_ID_ASC = 'TOKEN_HOLDERS_SUM_ID_ASC',
  TOKEN_HOLDERS_SUM_ID_DESC = 'TOKEN_HOLDERS_SUM_ID_DESC',
  TOKEN_HOLDERS_SUM_TOKEN_ID_ASC = 'TOKEN_HOLDERS_SUM_TOKEN_ID_ASC',
  TOKEN_HOLDERS_SUM_TOKEN_ID_DESC = 'TOKEN_HOLDERS_SUM_TOKEN_ID_DESC',
  TOKEN_HOLDERS_VARIANCE_POPULATION_BALANCE_ASC = 'TOKEN_HOLDERS_VARIANCE_POPULATION_BALANCE_ASC',
  TOKEN_HOLDERS_VARIANCE_POPULATION_BALANCE_DESC = 'TOKEN_HOLDERS_VARIANCE_POPULATION_BALANCE_DESC',
  TOKEN_HOLDERS_VARIANCE_POPULATION_BLOCK_RANGE_ASC = 'TOKEN_HOLDERS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  TOKEN_HOLDERS_VARIANCE_POPULATION_BLOCK_RANGE_DESC = 'TOKEN_HOLDERS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  TOKEN_HOLDERS_VARIANCE_POPULATION_ID_ASC = 'TOKEN_HOLDERS_VARIANCE_POPULATION_ID_ASC',
  TOKEN_HOLDERS_VARIANCE_POPULATION_ID_DESC = 'TOKEN_HOLDERS_VARIANCE_POPULATION_ID_DESC',
  TOKEN_HOLDERS_VARIANCE_POPULATION_TOKEN_ID_ASC = 'TOKEN_HOLDERS_VARIANCE_POPULATION_TOKEN_ID_ASC',
  TOKEN_HOLDERS_VARIANCE_POPULATION_TOKEN_ID_DESC = 'TOKEN_HOLDERS_VARIANCE_POPULATION_TOKEN_ID_DESC',
  TOKEN_HOLDERS_VARIANCE_SAMPLE_BALANCE_ASC = 'TOKEN_HOLDERS_VARIANCE_SAMPLE_BALANCE_ASC',
  TOKEN_HOLDERS_VARIANCE_SAMPLE_BALANCE_DESC = 'TOKEN_HOLDERS_VARIANCE_SAMPLE_BALANCE_DESC',
  TOKEN_HOLDERS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC = 'TOKEN_HOLDERS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  TOKEN_HOLDERS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC = 'TOKEN_HOLDERS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  TOKEN_HOLDERS_VARIANCE_SAMPLE_ID_ASC = 'TOKEN_HOLDERS_VARIANCE_SAMPLE_ID_ASC',
  TOKEN_HOLDERS_VARIANCE_SAMPLE_ID_DESC = 'TOKEN_HOLDERS_VARIANCE_SAMPLE_ID_DESC',
  TOKEN_HOLDERS_VARIANCE_SAMPLE_TOKEN_ID_ASC = 'TOKEN_HOLDERS_VARIANCE_SAMPLE_TOKEN_ID_ASC',
  TOKEN_HOLDERS_VARIANCE_SAMPLE_TOKEN_ID_DESC = 'TOKEN_HOLDERS_VARIANCE_SAMPLE_TOKEN_ID_DESC',
  TOTAL_SUPPLY_ASC = 'TOTAL_SUPPLY_ASC',
  TOTAL_SUPPLY_DESC = 'TOTAL_SUPPLY_DESC',
}

export type StateChannel = Node & {
  readonly __typename: 'StateChannel';
  readonly agent: Maybe<Scalars['String']['output']>;
  readonly consumer: Scalars['String']['output'];
  /** Reads a single `Deployment` that is related to this `StateChannel`. */
  readonly deployment: Maybe<Deployment>;
  readonly deploymentId: Scalars['String']['output'];
  readonly expiredAt: Scalars['Datetime']['output'];
  readonly id: Scalars['String']['output'];
  readonly indexer: Scalars['String']['output'];
  readonly isFinal: Scalars['Boolean']['output'];
  readonly lastEvent: Maybe<Scalars['String']['output']>;
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  readonly nodeId: Scalars['ID']['output'];
  readonly price: Scalars['BigFloat']['output'];
  readonly realTotal: Scalars['BigFloat']['output'];
  readonly spent: Scalars['BigFloat']['output'];
  readonly startTime: Scalars['Datetime']['output'];
  readonly status: ChannelStatus;
  readonly terminateByIndexer: Scalars['Boolean']['output'];
  readonly terminatedAt: Maybe<Scalars['Datetime']['output']>;
  readonly total: Scalars['BigFloat']['output'];
};

export type StateChannelAggregates = {
  readonly __typename: 'StateChannelAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly average: Maybe<StateChannelAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly distinctCount: Maybe<StateChannelDistinctCountAggregates>;
  readonly keys: Maybe<ReadonlyArray<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly max: Maybe<StateChannelMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly min: Maybe<StateChannelMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevPopulation: Maybe<StateChannelStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevSample: Maybe<StateChannelStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly sum: Maybe<StateChannelSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly variancePopulation: Maybe<StateChannelVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly varianceSample: Maybe<StateChannelVarianceSampleAggregates>;
};

/** A filter to be used against aggregates of `StateChannel` object types. */
export type StateChannelAggregatesFilter = {
  /** Mean average aggregate over matching `StateChannel` objects. */
  readonly average: InputMaybe<StateChannelAverageAggregateFilter>;
  /** Distinct count aggregate over matching `StateChannel` objects. */
  readonly distinctCount: InputMaybe<StateChannelDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `StateChannel` object to be included within the aggregate. */
  readonly filter: InputMaybe<StateChannelFilter>;
  /** Maximum aggregate over matching `StateChannel` objects. */
  readonly max: InputMaybe<StateChannelMaxAggregateFilter>;
  /** Minimum aggregate over matching `StateChannel` objects. */
  readonly min: InputMaybe<StateChannelMinAggregateFilter>;
  /** Population standard deviation aggregate over matching `StateChannel` objects. */
  readonly stddevPopulation: InputMaybe<StateChannelStddevPopulationAggregateFilter>;
  /** Sample standard deviation aggregate over matching `StateChannel` objects. */
  readonly stddevSample: InputMaybe<StateChannelStddevSampleAggregateFilter>;
  /** Sum aggregate over matching `StateChannel` objects. */
  readonly sum: InputMaybe<StateChannelSumAggregateFilter>;
  /** Population variance aggregate over matching `StateChannel` objects. */
  readonly variancePopulation: InputMaybe<StateChannelVariancePopulationAggregateFilter>;
  /** Sample variance aggregate over matching `StateChannel` objects. */
  readonly varianceSample: InputMaybe<StateChannelVarianceSampleAggregateFilter>;
};

export type StateChannelAverageAggregateFilter = {
  readonly price: InputMaybe<BigFloatFilter>;
  readonly realTotal: InputMaybe<BigFloatFilter>;
  readonly spent: InputMaybe<BigFloatFilter>;
  readonly total: InputMaybe<BigFloatFilter>;
};

export type StateChannelAverageAggregates = {
  readonly __typename: 'StateChannelAverageAggregates';
  /** Mean average of price across the matching connection */
  readonly price: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of realTotal across the matching connection */
  readonly realTotal: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of spent across the matching connection */
  readonly spent: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of total across the matching connection */
  readonly total: Maybe<Scalars['BigFloat']['output']>;
};

export type StateChannelDistinctCountAggregateFilter = {
  readonly _blockRange: InputMaybe<BigIntFilter>;
  readonly _id: InputMaybe<BigIntFilter>;
  readonly agent: InputMaybe<BigIntFilter>;
  readonly consumer: InputMaybe<BigIntFilter>;
  readonly deploymentId: InputMaybe<BigIntFilter>;
  readonly expiredAt: InputMaybe<BigIntFilter>;
  readonly id: InputMaybe<BigIntFilter>;
  readonly indexer: InputMaybe<BigIntFilter>;
  readonly isFinal: InputMaybe<BigIntFilter>;
  readonly lastEvent: InputMaybe<BigIntFilter>;
  readonly price: InputMaybe<BigIntFilter>;
  readonly realTotal: InputMaybe<BigIntFilter>;
  readonly spent: InputMaybe<BigIntFilter>;
  readonly startTime: InputMaybe<BigIntFilter>;
  readonly status: InputMaybe<BigIntFilter>;
  readonly terminateByIndexer: InputMaybe<BigIntFilter>;
  readonly terminatedAt: InputMaybe<BigIntFilter>;
  readonly total: InputMaybe<BigIntFilter>;
};

export type StateChannelDistinctCountAggregates = {
  readonly __typename: 'StateChannelDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  readonly _blockRange: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  readonly _id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of agent across the matching connection */
  readonly agent: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of consumer across the matching connection */
  readonly consumer: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of deploymentId across the matching connection */
  readonly deploymentId: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of expiredAt across the matching connection */
  readonly expiredAt: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  readonly id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of indexer across the matching connection */
  readonly indexer: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of isFinal across the matching connection */
  readonly isFinal: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of lastEvent across the matching connection */
  readonly lastEvent: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of price across the matching connection */
  readonly price: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of realTotal across the matching connection */
  readonly realTotal: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of spent across the matching connection */
  readonly spent: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of startTime across the matching connection */
  readonly startTime: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of status across the matching connection */
  readonly status: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of terminateByIndexer across the matching connection */
  readonly terminateByIndexer: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of terminatedAt across the matching connection */
  readonly terminatedAt: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of total across the matching connection */
  readonly total: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `StateChannel` object types. All fields are combined with a logical ‘and.’ */
export type StateChannelFilter = {
  /** Filter by the object’s `agent` field. */
  readonly agent: InputMaybe<StringFilter>;
  /** Checks for all expressions in this list. */
  readonly and: InputMaybe<ReadonlyArray<StateChannelFilter>>;
  /** Filter by the object’s `consumer` field. */
  readonly consumer: InputMaybe<StringFilter>;
  /** Filter by the object’s `deployment` relation. */
  readonly deployment: InputMaybe<DeploymentFilter>;
  /** Filter by the object’s `deploymentId` field. */
  readonly deploymentId: InputMaybe<StringFilter>;
  /** Filter by the object’s `expiredAt` field. */
  readonly expiredAt: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `id` field. */
  readonly id: InputMaybe<StringFilter>;
  /** Filter by the object’s `indexer` field. */
  readonly indexer: InputMaybe<StringFilter>;
  /** Filter by the object’s `isFinal` field. */
  readonly isFinal: InputMaybe<BooleanFilter>;
  /** Filter by the object’s `lastEvent` field. */
  readonly lastEvent: InputMaybe<StringFilter>;
  /** Negates the expression. */
  readonly not: InputMaybe<StateChannelFilter>;
  /** Checks for any expressions in this list. */
  readonly or: InputMaybe<ReadonlyArray<StateChannelFilter>>;
  /** Filter by the object’s `price` field. */
  readonly price: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `realTotal` field. */
  readonly realTotal: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `spent` field. */
  readonly spent: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `startTime` field. */
  readonly startTime: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `status` field. */
  readonly status: InputMaybe<ChannelStatusFilter>;
  /** Filter by the object’s `terminateByIndexer` field. */
  readonly terminateByIndexer: InputMaybe<BooleanFilter>;
  /** Filter by the object’s `terminatedAt` field. */
  readonly terminatedAt: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `total` field. */
  readonly total: InputMaybe<BigFloatFilter>;
};

export type StateChannelMaxAggregateFilter = {
  readonly price: InputMaybe<BigFloatFilter>;
  readonly realTotal: InputMaybe<BigFloatFilter>;
  readonly spent: InputMaybe<BigFloatFilter>;
  readonly total: InputMaybe<BigFloatFilter>;
};

export type StateChannelMaxAggregates = {
  readonly __typename: 'StateChannelMaxAggregates';
  /** Maximum of price across the matching connection */
  readonly price: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of realTotal across the matching connection */
  readonly realTotal: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of spent across the matching connection */
  readonly spent: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of total across the matching connection */
  readonly total: Maybe<Scalars['BigFloat']['output']>;
};

export type StateChannelMinAggregateFilter = {
  readonly price: InputMaybe<BigFloatFilter>;
  readonly realTotal: InputMaybe<BigFloatFilter>;
  readonly spent: InputMaybe<BigFloatFilter>;
  readonly total: InputMaybe<BigFloatFilter>;
};

export type StateChannelMinAggregates = {
  readonly __typename: 'StateChannelMinAggregates';
  /** Minimum of price across the matching connection */
  readonly price: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of realTotal across the matching connection */
  readonly realTotal: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of spent across the matching connection */
  readonly spent: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of total across the matching connection */
  readonly total: Maybe<Scalars['BigFloat']['output']>;
};

export type StateChannelStddevPopulationAggregateFilter = {
  readonly price: InputMaybe<BigFloatFilter>;
  readonly realTotal: InputMaybe<BigFloatFilter>;
  readonly spent: InputMaybe<BigFloatFilter>;
  readonly total: InputMaybe<BigFloatFilter>;
};

export type StateChannelStddevPopulationAggregates = {
  readonly __typename: 'StateChannelStddevPopulationAggregates';
  /** Population standard deviation of price across the matching connection */
  readonly price: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of realTotal across the matching connection */
  readonly realTotal: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of spent across the matching connection */
  readonly spent: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of total across the matching connection */
  readonly total: Maybe<Scalars['BigFloat']['output']>;
};

export type StateChannelStddevSampleAggregateFilter = {
  readonly price: InputMaybe<BigFloatFilter>;
  readonly realTotal: InputMaybe<BigFloatFilter>;
  readonly spent: InputMaybe<BigFloatFilter>;
  readonly total: InputMaybe<BigFloatFilter>;
};

export type StateChannelStddevSampleAggregates = {
  readonly __typename: 'StateChannelStddevSampleAggregates';
  /** Sample standard deviation of price across the matching connection */
  readonly price: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of realTotal across the matching connection */
  readonly realTotal: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of spent across the matching connection */
  readonly spent: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of total across the matching connection */
  readonly total: Maybe<Scalars['BigFloat']['output']>;
};

export type StateChannelSumAggregateFilter = {
  readonly price: InputMaybe<BigFloatFilter>;
  readonly realTotal: InputMaybe<BigFloatFilter>;
  readonly spent: InputMaybe<BigFloatFilter>;
  readonly total: InputMaybe<BigFloatFilter>;
};

export type StateChannelSumAggregates = {
  readonly __typename: 'StateChannelSumAggregates';
  /** Sum of price across the matching connection */
  readonly price: Scalars['BigFloat']['output'];
  /** Sum of realTotal across the matching connection */
  readonly realTotal: Scalars['BigFloat']['output'];
  /** Sum of spent across the matching connection */
  readonly spent: Scalars['BigFloat']['output'];
  /** Sum of total across the matching connection */
  readonly total: Scalars['BigFloat']['output'];
};

export type StateChannelVariancePopulationAggregateFilter = {
  readonly price: InputMaybe<BigFloatFilter>;
  readonly realTotal: InputMaybe<BigFloatFilter>;
  readonly spent: InputMaybe<BigFloatFilter>;
  readonly total: InputMaybe<BigFloatFilter>;
};

export type StateChannelVariancePopulationAggregates = {
  readonly __typename: 'StateChannelVariancePopulationAggregates';
  /** Population variance of price across the matching connection */
  readonly price: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of realTotal across the matching connection */
  readonly realTotal: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of spent across the matching connection */
  readonly spent: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of total across the matching connection */
  readonly total: Maybe<Scalars['BigFloat']['output']>;
};

export type StateChannelVarianceSampleAggregateFilter = {
  readonly price: InputMaybe<BigFloatFilter>;
  readonly realTotal: InputMaybe<BigFloatFilter>;
  readonly spent: InputMaybe<BigFloatFilter>;
  readonly total: InputMaybe<BigFloatFilter>;
};

export type StateChannelVarianceSampleAggregates = {
  readonly __typename: 'StateChannelVarianceSampleAggregates';
  /** Sample variance of price across the matching connection */
  readonly price: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of realTotal across the matching connection */
  readonly realTotal: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of spent across the matching connection */
  readonly spent: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of total across the matching connection */
  readonly total: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `StateChannel` values. */
export type StateChannelsConnection = {
  readonly __typename: 'StateChannelsConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<StateChannelAggregates>;
  /** A list of edges which contains the `StateChannel` and cursor to aid in pagination. */
  readonly edges: ReadonlyArray<StateChannelsEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<StateChannelAggregates>>;
  /** A list of `StateChannel` objects. */
  readonly nodes: ReadonlyArray<Maybe<StateChannel>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `StateChannel` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `StateChannel` values. */
export type StateChannelsConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<StateChannelsGroupBy>;
  having: InputMaybe<StateChannelsHavingInput>;
};

/** A `StateChannel` edge in the connection. */
export type StateChannelsEdge = {
  readonly __typename: 'StateChannelsEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `StateChannel` at the end of the edge. */
  readonly node: Maybe<StateChannel>;
};

/** Grouping methods for `StateChannel` for usage during aggregation. */
export enum StateChannelsGroupBy {
  AGENT = 'AGENT',
  CONSUMER = 'CONSUMER',
  DEPLOYMENT_ID = 'DEPLOYMENT_ID',
  EXPIRED_AT = 'EXPIRED_AT',
  EXPIRED_AT_TRUNCATED_TO_DAY = 'EXPIRED_AT_TRUNCATED_TO_DAY',
  EXPIRED_AT_TRUNCATED_TO_HOUR = 'EXPIRED_AT_TRUNCATED_TO_HOUR',
  ID = 'ID',
  INDEXER = 'INDEXER',
  IS_FINAL = 'IS_FINAL',
  LAST_EVENT = 'LAST_EVENT',
  PRICE = 'PRICE',
  REAL_TOTAL = 'REAL_TOTAL',
  SPENT = 'SPENT',
  START_TIME = 'START_TIME',
  START_TIME_TRUNCATED_TO_DAY = 'START_TIME_TRUNCATED_TO_DAY',
  START_TIME_TRUNCATED_TO_HOUR = 'START_TIME_TRUNCATED_TO_HOUR',
  STATUS = 'STATUS',
  TERMINATED_AT = 'TERMINATED_AT',
  TERMINATED_AT_TRUNCATED_TO_DAY = 'TERMINATED_AT_TRUNCATED_TO_DAY',
  TERMINATED_AT_TRUNCATED_TO_HOUR = 'TERMINATED_AT_TRUNCATED_TO_HOUR',
  TERMINATE_BY_INDEXER = 'TERMINATE_BY_INDEXER',
  TOTAL = 'TOTAL',
}

export type StateChannelsHavingAverageInput = {
  readonly expiredAt: InputMaybe<HavingDatetimeFilter>;
  readonly price: InputMaybe<HavingBigfloatFilter>;
  readonly realTotal: InputMaybe<HavingBigfloatFilter>;
  readonly spent: InputMaybe<HavingBigfloatFilter>;
  readonly startTime: InputMaybe<HavingDatetimeFilter>;
  readonly terminatedAt: InputMaybe<HavingDatetimeFilter>;
  readonly total: InputMaybe<HavingBigfloatFilter>;
};

export type StateChannelsHavingDistinctCountInput = {
  readonly expiredAt: InputMaybe<HavingDatetimeFilter>;
  readonly price: InputMaybe<HavingBigfloatFilter>;
  readonly realTotal: InputMaybe<HavingBigfloatFilter>;
  readonly spent: InputMaybe<HavingBigfloatFilter>;
  readonly startTime: InputMaybe<HavingDatetimeFilter>;
  readonly terminatedAt: InputMaybe<HavingDatetimeFilter>;
  readonly total: InputMaybe<HavingBigfloatFilter>;
};

/** Conditions for `StateChannel` aggregates. */
export type StateChannelsHavingInput = {
  readonly AND: InputMaybe<ReadonlyArray<StateChannelsHavingInput>>;
  readonly OR: InputMaybe<ReadonlyArray<StateChannelsHavingInput>>;
  readonly average: InputMaybe<StateChannelsHavingAverageInput>;
  readonly distinctCount: InputMaybe<StateChannelsHavingDistinctCountInput>;
  readonly max: InputMaybe<StateChannelsHavingMaxInput>;
  readonly min: InputMaybe<StateChannelsHavingMinInput>;
  readonly stddevPopulation: InputMaybe<StateChannelsHavingStddevPopulationInput>;
  readonly stddevSample: InputMaybe<StateChannelsHavingStddevSampleInput>;
  readonly sum: InputMaybe<StateChannelsHavingSumInput>;
  readonly variancePopulation: InputMaybe<StateChannelsHavingVariancePopulationInput>;
  readonly varianceSample: InputMaybe<StateChannelsHavingVarianceSampleInput>;
};

export type StateChannelsHavingMaxInput = {
  readonly expiredAt: InputMaybe<HavingDatetimeFilter>;
  readonly price: InputMaybe<HavingBigfloatFilter>;
  readonly realTotal: InputMaybe<HavingBigfloatFilter>;
  readonly spent: InputMaybe<HavingBigfloatFilter>;
  readonly startTime: InputMaybe<HavingDatetimeFilter>;
  readonly terminatedAt: InputMaybe<HavingDatetimeFilter>;
  readonly total: InputMaybe<HavingBigfloatFilter>;
};

export type StateChannelsHavingMinInput = {
  readonly expiredAt: InputMaybe<HavingDatetimeFilter>;
  readonly price: InputMaybe<HavingBigfloatFilter>;
  readonly realTotal: InputMaybe<HavingBigfloatFilter>;
  readonly spent: InputMaybe<HavingBigfloatFilter>;
  readonly startTime: InputMaybe<HavingDatetimeFilter>;
  readonly terminatedAt: InputMaybe<HavingDatetimeFilter>;
  readonly total: InputMaybe<HavingBigfloatFilter>;
};

export type StateChannelsHavingStddevPopulationInput = {
  readonly expiredAt: InputMaybe<HavingDatetimeFilter>;
  readonly price: InputMaybe<HavingBigfloatFilter>;
  readonly realTotal: InputMaybe<HavingBigfloatFilter>;
  readonly spent: InputMaybe<HavingBigfloatFilter>;
  readonly startTime: InputMaybe<HavingDatetimeFilter>;
  readonly terminatedAt: InputMaybe<HavingDatetimeFilter>;
  readonly total: InputMaybe<HavingBigfloatFilter>;
};

export type StateChannelsHavingStddevSampleInput = {
  readonly expiredAt: InputMaybe<HavingDatetimeFilter>;
  readonly price: InputMaybe<HavingBigfloatFilter>;
  readonly realTotal: InputMaybe<HavingBigfloatFilter>;
  readonly spent: InputMaybe<HavingBigfloatFilter>;
  readonly startTime: InputMaybe<HavingDatetimeFilter>;
  readonly terminatedAt: InputMaybe<HavingDatetimeFilter>;
  readonly total: InputMaybe<HavingBigfloatFilter>;
};

export type StateChannelsHavingSumInput = {
  readonly expiredAt: InputMaybe<HavingDatetimeFilter>;
  readonly price: InputMaybe<HavingBigfloatFilter>;
  readonly realTotal: InputMaybe<HavingBigfloatFilter>;
  readonly spent: InputMaybe<HavingBigfloatFilter>;
  readonly startTime: InputMaybe<HavingDatetimeFilter>;
  readonly terminatedAt: InputMaybe<HavingDatetimeFilter>;
  readonly total: InputMaybe<HavingBigfloatFilter>;
};

export type StateChannelsHavingVariancePopulationInput = {
  readonly expiredAt: InputMaybe<HavingDatetimeFilter>;
  readonly price: InputMaybe<HavingBigfloatFilter>;
  readonly realTotal: InputMaybe<HavingBigfloatFilter>;
  readonly spent: InputMaybe<HavingBigfloatFilter>;
  readonly startTime: InputMaybe<HavingDatetimeFilter>;
  readonly terminatedAt: InputMaybe<HavingDatetimeFilter>;
  readonly total: InputMaybe<HavingBigfloatFilter>;
};

export type StateChannelsHavingVarianceSampleInput = {
  readonly expiredAt: InputMaybe<HavingDatetimeFilter>;
  readonly price: InputMaybe<HavingBigfloatFilter>;
  readonly realTotal: InputMaybe<HavingBigfloatFilter>;
  readonly spent: InputMaybe<HavingBigfloatFilter>;
  readonly startTime: InputMaybe<HavingDatetimeFilter>;
  readonly terminatedAt: InputMaybe<HavingDatetimeFilter>;
  readonly total: InputMaybe<HavingBigfloatFilter>;
};

/** Methods to use when ordering `StateChannel`. */
export enum StateChannelsOrderBy {
  AGENT_ASC = 'AGENT_ASC',
  AGENT_DESC = 'AGENT_DESC',
  CONSUMER_ASC = 'CONSUMER_ASC',
  CONSUMER_DESC = 'CONSUMER_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__ID_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__ID_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__ID_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__ID_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_DESC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_ASC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_ASC',
  DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_DESC = 'DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_DESC',
  DEPLOYMENT_ID_ASC = 'DEPLOYMENT_ID_ASC',
  DEPLOYMENT_ID_DESC = 'DEPLOYMENT_ID_DESC',
  EXPIRED_AT_ASC = 'EXPIRED_AT_ASC',
  EXPIRED_AT_DESC = 'EXPIRED_AT_DESC',
  ID_ASC = 'ID_ASC',
  ID_DESC = 'ID_DESC',
  INDEXER_ASC = 'INDEXER_ASC',
  INDEXER_DESC = 'INDEXER_DESC',
  IS_FINAL_ASC = 'IS_FINAL_ASC',
  IS_FINAL_DESC = 'IS_FINAL_DESC',
  LAST_EVENT_ASC = 'LAST_EVENT_ASC',
  LAST_EVENT_DESC = 'LAST_EVENT_DESC',
  NATURAL = 'NATURAL',
  PRICE_ASC = 'PRICE_ASC',
  PRICE_DESC = 'PRICE_DESC',
  PRIMARY_KEY_ASC = 'PRIMARY_KEY_ASC',
  PRIMARY_KEY_DESC = 'PRIMARY_KEY_DESC',
  REAL_TOTAL_ASC = 'REAL_TOTAL_ASC',
  REAL_TOTAL_DESC = 'REAL_TOTAL_DESC',
  SPENT_ASC = 'SPENT_ASC',
  SPENT_DESC = 'SPENT_DESC',
  START_TIME_ASC = 'START_TIME_ASC',
  START_TIME_DESC = 'START_TIME_DESC',
  STATUS_ASC = 'STATUS_ASC',
  STATUS_DESC = 'STATUS_DESC',
  TERMINATED_AT_ASC = 'TERMINATED_AT_ASC',
  TERMINATED_AT_DESC = 'TERMINATED_AT_DESC',
  TERMINATE_BY_INDEXER_ASC = 'TERMINATE_BY_INDEXER_ASC',
  TERMINATE_BY_INDEXER_DESC = 'TERMINATE_BY_INDEXER_DESC',
  TOTAL_ASC = 'TOTAL_ASC',
  TOTAL_DESC = 'TOTAL_DESC',
}

/** A filter to be used against String fields. All fields are combined with a logical ‘and.’ */
export type StringFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  readonly distinctFrom: InputMaybe<Scalars['String']['input']>;
  /** Not equal to the specified value, treating null like an ordinary value (case-insensitive). */
  readonly distinctFromInsensitive: InputMaybe<Scalars['String']['input']>;
  /** Ends with the specified string (case-sensitive). */
  readonly endsWith: InputMaybe<Scalars['String']['input']>;
  /** Ends with the specified string (case-insensitive). */
  readonly endsWithInsensitive: InputMaybe<Scalars['String']['input']>;
  /** Equal to the specified value. */
  readonly equalTo: InputMaybe<Scalars['String']['input']>;
  /** Equal to the specified value (case-insensitive). */
  readonly equalToInsensitive: InputMaybe<Scalars['String']['input']>;
  /** Greater than the specified value. */
  readonly greaterThan: InputMaybe<Scalars['String']['input']>;
  /** Greater than the specified value (case-insensitive). */
  readonly greaterThanInsensitive: InputMaybe<Scalars['String']['input']>;
  /** Greater than or equal to the specified value. */
  readonly greaterThanOrEqualTo: InputMaybe<Scalars['String']['input']>;
  /** Greater than or equal to the specified value (case-insensitive). */
  readonly greaterThanOrEqualToInsensitive: InputMaybe<Scalars['String']['input']>;
  /** Included in the specified list. */
  readonly in: InputMaybe<ReadonlyArray<Scalars['String']['input']>>;
  /** Included in the specified list (case-insensitive). */
  readonly inInsensitive: InputMaybe<ReadonlyArray<Scalars['String']['input']>>;
  /** Contains the specified string (case-sensitive). */
  readonly includes: InputMaybe<Scalars['String']['input']>;
  /** Contains the specified string (case-insensitive). */
  readonly includesInsensitive: InputMaybe<Scalars['String']['input']>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  readonly isNull: InputMaybe<Scalars['Boolean']['input']>;
  /** Less than the specified value. */
  readonly lessThan: InputMaybe<Scalars['String']['input']>;
  /** Less than the specified value (case-insensitive). */
  readonly lessThanInsensitive: InputMaybe<Scalars['String']['input']>;
  /** Less than or equal to the specified value. */
  readonly lessThanOrEqualTo: InputMaybe<Scalars['String']['input']>;
  /** Less than or equal to the specified value (case-insensitive). */
  readonly lessThanOrEqualToInsensitive: InputMaybe<Scalars['String']['input']>;
  /** Matches the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters. */
  readonly like: InputMaybe<Scalars['String']['input']>;
  /** Matches the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters. */
  readonly likeInsensitive: InputMaybe<Scalars['String']['input']>;
  /** Equal to the specified value, treating null like an ordinary value. */
  readonly notDistinctFrom: InputMaybe<Scalars['String']['input']>;
  /** Equal to the specified value, treating null like an ordinary value (case-insensitive). */
  readonly notDistinctFromInsensitive: InputMaybe<Scalars['String']['input']>;
  /** Does not end with the specified string (case-sensitive). */
  readonly notEndsWith: InputMaybe<Scalars['String']['input']>;
  /** Does not end with the specified string (case-insensitive). */
  readonly notEndsWithInsensitive: InputMaybe<Scalars['String']['input']>;
  /** Not equal to the specified value. */
  readonly notEqualTo: InputMaybe<Scalars['String']['input']>;
  /** Not equal to the specified value (case-insensitive). */
  readonly notEqualToInsensitive: InputMaybe<Scalars['String']['input']>;
  /** Not included in the specified list. */
  readonly notIn: InputMaybe<ReadonlyArray<Scalars['String']['input']>>;
  /** Not included in the specified list (case-insensitive). */
  readonly notInInsensitive: InputMaybe<ReadonlyArray<Scalars['String']['input']>>;
  /** Does not contain the specified string (case-sensitive). */
  readonly notIncludes: InputMaybe<Scalars['String']['input']>;
  /** Does not contain the specified string (case-insensitive). */
  readonly notIncludesInsensitive: InputMaybe<Scalars['String']['input']>;
  /** Does not match the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters. */
  readonly notLike: InputMaybe<Scalars['String']['input']>;
  /** Does not match the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters. */
  readonly notLikeInsensitive: InputMaybe<Scalars['String']['input']>;
  /** Does not start with the specified string (case-sensitive). */
  readonly notStartsWith: InputMaybe<Scalars['String']['input']>;
  /** Does not start with the specified string (case-insensitive). */
  readonly notStartsWithInsensitive: InputMaybe<Scalars['String']['input']>;
  /** Starts with the specified string (case-sensitive). */
  readonly startsWith: InputMaybe<Scalars['String']['input']>;
  /** Starts with the specified string (case-insensitive). */
  readonly startsWithInsensitive: InputMaybe<Scalars['String']['input']>;
};

export type TableEstimate = {
  readonly __typename: 'TableEstimate';
  readonly estimate: Maybe<Scalars['Int']['output']>;
  readonly table: Maybe<Scalars['String']['output']>;
};

export type TokenHolder = Node & {
  readonly __typename: 'TokenHolder';
  readonly balance: Scalars['BigFloat']['output'];
  readonly id: Scalars['String']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  readonly nodeId: Scalars['ID']['output'];
  /** Reads a single `Sqtoken` that is related to this `TokenHolder`. */
  readonly token: Maybe<Sqtoken>;
  readonly tokenId: Scalars['String']['output'];
};

export type TokenHolderAggregates = {
  readonly __typename: 'TokenHolderAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly average: Maybe<TokenHolderAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly distinctCount: Maybe<TokenHolderDistinctCountAggregates>;
  readonly keys: Maybe<ReadonlyArray<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly max: Maybe<TokenHolderMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly min: Maybe<TokenHolderMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevPopulation: Maybe<TokenHolderStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevSample: Maybe<TokenHolderStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly sum: Maybe<TokenHolderSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly variancePopulation: Maybe<TokenHolderVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly varianceSample: Maybe<TokenHolderVarianceSampleAggregates>;
};

/** A filter to be used against aggregates of `TokenHolder` object types. */
export type TokenHolderAggregatesFilter = {
  /** Mean average aggregate over matching `TokenHolder` objects. */
  readonly average: InputMaybe<TokenHolderAverageAggregateFilter>;
  /** Distinct count aggregate over matching `TokenHolder` objects. */
  readonly distinctCount: InputMaybe<TokenHolderDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `TokenHolder` object to be included within the aggregate. */
  readonly filter: InputMaybe<TokenHolderFilter>;
  /** Maximum aggregate over matching `TokenHolder` objects. */
  readonly max: InputMaybe<TokenHolderMaxAggregateFilter>;
  /** Minimum aggregate over matching `TokenHolder` objects. */
  readonly min: InputMaybe<TokenHolderMinAggregateFilter>;
  /** Population standard deviation aggregate over matching `TokenHolder` objects. */
  readonly stddevPopulation: InputMaybe<TokenHolderStddevPopulationAggregateFilter>;
  /** Sample standard deviation aggregate over matching `TokenHolder` objects. */
  readonly stddevSample: InputMaybe<TokenHolderStddevSampleAggregateFilter>;
  /** Sum aggregate over matching `TokenHolder` objects. */
  readonly sum: InputMaybe<TokenHolderSumAggregateFilter>;
  /** Population variance aggregate over matching `TokenHolder` objects. */
  readonly variancePopulation: InputMaybe<TokenHolderVariancePopulationAggregateFilter>;
  /** Sample variance aggregate over matching `TokenHolder` objects. */
  readonly varianceSample: InputMaybe<TokenHolderVarianceSampleAggregateFilter>;
};

export type TokenHolderAverageAggregateFilter = {
  readonly balance: InputMaybe<BigFloatFilter>;
};

export type TokenHolderAverageAggregates = {
  readonly __typename: 'TokenHolderAverageAggregates';
  /** Mean average of balance across the matching connection */
  readonly balance: Maybe<Scalars['BigFloat']['output']>;
};

export type TokenHolderDistinctCountAggregateFilter = {
  readonly _blockRange: InputMaybe<BigIntFilter>;
  readonly _id: InputMaybe<BigIntFilter>;
  readonly balance: InputMaybe<BigIntFilter>;
  readonly id: InputMaybe<BigIntFilter>;
  readonly tokenId: InputMaybe<BigIntFilter>;
};

export type TokenHolderDistinctCountAggregates = {
  readonly __typename: 'TokenHolderDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  readonly _blockRange: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  readonly _id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of balance across the matching connection */
  readonly balance: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  readonly id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of tokenId across the matching connection */
  readonly tokenId: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `TokenHolder` object types. All fields are combined with a logical ‘and.’ */
export type TokenHolderFilter = {
  /** Checks for all expressions in this list. */
  readonly and: InputMaybe<ReadonlyArray<TokenHolderFilter>>;
  /** Filter by the object’s `balance` field. */
  readonly balance: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `id` field. */
  readonly id: InputMaybe<StringFilter>;
  /** Negates the expression. */
  readonly not: InputMaybe<TokenHolderFilter>;
  /** Checks for any expressions in this list. */
  readonly or: InputMaybe<ReadonlyArray<TokenHolderFilter>>;
  /** Filter by the object’s `token` relation. */
  readonly token: InputMaybe<SqtokenFilter>;
  /** Filter by the object’s `tokenId` field. */
  readonly tokenId: InputMaybe<StringFilter>;
};

export type TokenHolderMaxAggregateFilter = {
  readonly balance: InputMaybe<BigFloatFilter>;
};

export type TokenHolderMaxAggregates = {
  readonly __typename: 'TokenHolderMaxAggregates';
  /** Maximum of balance across the matching connection */
  readonly balance: Maybe<Scalars['BigFloat']['output']>;
};

export type TokenHolderMinAggregateFilter = {
  readonly balance: InputMaybe<BigFloatFilter>;
};

export type TokenHolderMinAggregates = {
  readonly __typename: 'TokenHolderMinAggregates';
  /** Minimum of balance across the matching connection */
  readonly balance: Maybe<Scalars['BigFloat']['output']>;
};

export type TokenHolderStddevPopulationAggregateFilter = {
  readonly balance: InputMaybe<BigFloatFilter>;
};

export type TokenHolderStddevPopulationAggregates = {
  readonly __typename: 'TokenHolderStddevPopulationAggregates';
  /** Population standard deviation of balance across the matching connection */
  readonly balance: Maybe<Scalars['BigFloat']['output']>;
};

export type TokenHolderStddevSampleAggregateFilter = {
  readonly balance: InputMaybe<BigFloatFilter>;
};

export type TokenHolderStddevSampleAggregates = {
  readonly __typename: 'TokenHolderStddevSampleAggregates';
  /** Sample standard deviation of balance across the matching connection */
  readonly balance: Maybe<Scalars['BigFloat']['output']>;
};

export type TokenHolderSumAggregateFilter = {
  readonly balance: InputMaybe<BigFloatFilter>;
};

export type TokenHolderSumAggregates = {
  readonly __typename: 'TokenHolderSumAggregates';
  /** Sum of balance across the matching connection */
  readonly balance: Scalars['BigFloat']['output'];
};

export type TokenHolderVariancePopulationAggregateFilter = {
  readonly balance: InputMaybe<BigFloatFilter>;
};

export type TokenHolderVariancePopulationAggregates = {
  readonly __typename: 'TokenHolderVariancePopulationAggregates';
  /** Population variance of balance across the matching connection */
  readonly balance: Maybe<Scalars['BigFloat']['output']>;
};

export type TokenHolderVarianceSampleAggregateFilter = {
  readonly balance: InputMaybe<BigFloatFilter>;
};

export type TokenHolderVarianceSampleAggregates = {
  readonly __typename: 'TokenHolderVarianceSampleAggregates';
  /** Sample variance of balance across the matching connection */
  readonly balance: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `TokenHolder` values. */
export type TokenHoldersConnection = {
  readonly __typename: 'TokenHoldersConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<TokenHolderAggregates>;
  /** A list of edges which contains the `TokenHolder` and cursor to aid in pagination. */
  readonly edges: ReadonlyArray<TokenHoldersEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<TokenHolderAggregates>>;
  /** A list of `TokenHolder` objects. */
  readonly nodes: ReadonlyArray<Maybe<TokenHolder>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `TokenHolder` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `TokenHolder` values. */
export type TokenHoldersConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<TokenHoldersGroupBy>;
  having: InputMaybe<TokenHoldersHavingInput>;
};

/** A `TokenHolder` edge in the connection. */
export type TokenHoldersEdge = {
  readonly __typename: 'TokenHoldersEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `TokenHolder` at the end of the edge. */
  readonly node: Maybe<TokenHolder>;
};

/** Grouping methods for `TokenHolder` for usage during aggregation. */
export enum TokenHoldersGroupBy {
  BALANCE = 'BALANCE',
  ID = 'ID',
  TOKEN_ID = 'TOKEN_ID',
}

export type TokenHoldersHavingAverageInput = {
  readonly balance: InputMaybe<HavingBigfloatFilter>;
};

export type TokenHoldersHavingDistinctCountInput = {
  readonly balance: InputMaybe<HavingBigfloatFilter>;
};

/** Conditions for `TokenHolder` aggregates. */
export type TokenHoldersHavingInput = {
  readonly AND: InputMaybe<ReadonlyArray<TokenHoldersHavingInput>>;
  readonly OR: InputMaybe<ReadonlyArray<TokenHoldersHavingInput>>;
  readonly average: InputMaybe<TokenHoldersHavingAverageInput>;
  readonly distinctCount: InputMaybe<TokenHoldersHavingDistinctCountInput>;
  readonly max: InputMaybe<TokenHoldersHavingMaxInput>;
  readonly min: InputMaybe<TokenHoldersHavingMinInput>;
  readonly stddevPopulation: InputMaybe<TokenHoldersHavingStddevPopulationInput>;
  readonly stddevSample: InputMaybe<TokenHoldersHavingStddevSampleInput>;
  readonly sum: InputMaybe<TokenHoldersHavingSumInput>;
  readonly variancePopulation: InputMaybe<TokenHoldersHavingVariancePopulationInput>;
  readonly varianceSample: InputMaybe<TokenHoldersHavingVarianceSampleInput>;
};

export type TokenHoldersHavingMaxInput = {
  readonly balance: InputMaybe<HavingBigfloatFilter>;
};

export type TokenHoldersHavingMinInput = {
  readonly balance: InputMaybe<HavingBigfloatFilter>;
};

export type TokenHoldersHavingStddevPopulationInput = {
  readonly balance: InputMaybe<HavingBigfloatFilter>;
};

export type TokenHoldersHavingStddevSampleInput = {
  readonly balance: InputMaybe<HavingBigfloatFilter>;
};

export type TokenHoldersHavingSumInput = {
  readonly balance: InputMaybe<HavingBigfloatFilter>;
};

export type TokenHoldersHavingVariancePopulationInput = {
  readonly balance: InputMaybe<HavingBigfloatFilter>;
};

export type TokenHoldersHavingVarianceSampleInput = {
  readonly balance: InputMaybe<HavingBigfloatFilter>;
};

/** Methods to use when ordering `TokenHolder`. */
export enum TokenHoldersOrderBy {
  BALANCE_ASC = 'BALANCE_ASC',
  BALANCE_DESC = 'BALANCE_DESC',
  ID_ASC = 'ID_ASC',
  ID_DESC = 'ID_DESC',
  NATURAL = 'NATURAL',
  PRIMARY_KEY_ASC = 'PRIMARY_KEY_ASC',
  PRIMARY_KEY_DESC = 'PRIMARY_KEY_DESC',
  SQTOKEN_BY_TOKEN_ID__CIRCULATING_SUPPLY_ASC = 'SQTOKEN_BY_TOKEN_ID__CIRCULATING_SUPPLY_ASC',
  SQTOKEN_BY_TOKEN_ID__CIRCULATING_SUPPLY_DESC = 'SQTOKEN_BY_TOKEN_ID__CIRCULATING_SUPPLY_DESC',
  SQTOKEN_BY_TOKEN_ID__ID_ASC = 'SQTOKEN_BY_TOKEN_ID__ID_ASC',
  SQTOKEN_BY_TOKEN_ID__ID_DESC = 'SQTOKEN_BY_TOKEN_ID__ID_DESC',
  SQTOKEN_BY_TOKEN_ID__TOTAL_SUPPLY_ASC = 'SQTOKEN_BY_TOKEN_ID__TOTAL_SUPPLY_ASC',
  SQTOKEN_BY_TOKEN_ID__TOTAL_SUPPLY_DESC = 'SQTOKEN_BY_TOKEN_ID__TOTAL_SUPPLY_DESC',
  TOKEN_ID_ASC = 'TOKEN_ID_ASC',
  TOKEN_ID_DESC = 'TOKEN_ID_DESC',
}

export type TotalLock = Node & {
  readonly __typename: 'TotalLock';
  readonly createdBlock: Maybe<Scalars['Int']['output']>;
  readonly id: Scalars['String']['output'];
  readonly lastEvent: Maybe<Scalars['String']['output']>;
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  readonly nodeId: Scalars['ID']['output'];
  readonly totalDelegation: Scalars['JSON']['output'];
  readonly totalStake: Scalars['JSON']['output'];
};

export type TotalLockAggregates = {
  readonly __typename: 'TotalLockAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly average: Maybe<TotalLockAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly distinctCount: Maybe<TotalLockDistinctCountAggregates>;
  readonly keys: Maybe<ReadonlyArray<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly max: Maybe<TotalLockMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly min: Maybe<TotalLockMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevPopulation: Maybe<TotalLockStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevSample: Maybe<TotalLockStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly sum: Maybe<TotalLockSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly variancePopulation: Maybe<TotalLockVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly varianceSample: Maybe<TotalLockVarianceSampleAggregates>;
};

export type TotalLockAverageAggregates = {
  readonly __typename: 'TotalLockAverageAggregates';
  /** Mean average of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
};

export type TotalLockDistinctCountAggregates = {
  readonly __typename: 'TotalLockDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  readonly _blockRange: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  readonly _id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  readonly id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of lastEvent across the matching connection */
  readonly lastEvent: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of totalDelegation across the matching connection */
  readonly totalDelegation: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of totalStake across the matching connection */
  readonly totalStake: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `TotalLock` object types. All fields are combined with a logical ‘and.’ */
export type TotalLockFilter = {
  /** Checks for all expressions in this list. */
  readonly and: InputMaybe<ReadonlyArray<TotalLockFilter>>;
  /** Filter by the object’s `createdBlock` field. */
  readonly createdBlock: InputMaybe<IntFilter>;
  /** Filter by the object’s `id` field. */
  readonly id: InputMaybe<StringFilter>;
  /** Filter by the object’s `lastEvent` field. */
  readonly lastEvent: InputMaybe<StringFilter>;
  /** Negates the expression. */
  readonly not: InputMaybe<TotalLockFilter>;
  /** Checks for any expressions in this list. */
  readonly or: InputMaybe<ReadonlyArray<TotalLockFilter>>;
  /** Filter by the object’s `totalDelegation` field. */
  readonly totalDelegation: InputMaybe<JsonFilter>;
  /** Filter by the object’s `totalStake` field. */
  readonly totalStake: InputMaybe<JsonFilter>;
};

export type TotalLockMaxAggregates = {
  readonly __typename: 'TotalLockMaxAggregates';
  /** Maximum of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['Int']['output']>;
};

export type TotalLockMinAggregates = {
  readonly __typename: 'TotalLockMinAggregates';
  /** Minimum of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['Int']['output']>;
};

export type TotalLockStddevPopulationAggregates = {
  readonly __typename: 'TotalLockStddevPopulationAggregates';
  /** Population standard deviation of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
};

export type TotalLockStddevSampleAggregates = {
  readonly __typename: 'TotalLockStddevSampleAggregates';
  /** Sample standard deviation of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
};

export type TotalLockSumAggregates = {
  readonly __typename: 'TotalLockSumAggregates';
  /** Sum of createdBlock across the matching connection */
  readonly createdBlock: Scalars['BigInt']['output'];
};

export type TotalLockVariancePopulationAggregates = {
  readonly __typename: 'TotalLockVariancePopulationAggregates';
  /** Population variance of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
};

export type TotalLockVarianceSampleAggregates = {
  readonly __typename: 'TotalLockVarianceSampleAggregates';
  /** Sample variance of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `TotalLock` values. */
export type TotalLocksConnection = {
  readonly __typename: 'TotalLocksConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<TotalLockAggregates>;
  /** A list of edges which contains the `TotalLock` and cursor to aid in pagination. */
  readonly edges: ReadonlyArray<TotalLocksEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<TotalLockAggregates>>;
  /** A list of `TotalLock` objects. */
  readonly nodes: ReadonlyArray<Maybe<TotalLock>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `TotalLock` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `TotalLock` values. */
export type TotalLocksConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<TotalLocksGroupBy>;
  having: InputMaybe<TotalLocksHavingInput>;
};

/** A `TotalLock` edge in the connection. */
export type TotalLocksEdge = {
  readonly __typename: 'TotalLocksEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `TotalLock` at the end of the edge. */
  readonly node: Maybe<TotalLock>;
};

/** Grouping methods for `TotalLock` for usage during aggregation. */
export enum TotalLocksGroupBy {
  CREATED_BLOCK = 'CREATED_BLOCK',
  ID = 'ID',
  LAST_EVENT = 'LAST_EVENT',
  TOTAL_DELEGATION = 'TOTAL_DELEGATION',
  TOTAL_STAKE = 'TOTAL_STAKE',
}

export type TotalLocksHavingAverageInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
};

export type TotalLocksHavingDistinctCountInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
};

/** Conditions for `TotalLock` aggregates. */
export type TotalLocksHavingInput = {
  readonly AND: InputMaybe<ReadonlyArray<TotalLocksHavingInput>>;
  readonly OR: InputMaybe<ReadonlyArray<TotalLocksHavingInput>>;
  readonly average: InputMaybe<TotalLocksHavingAverageInput>;
  readonly distinctCount: InputMaybe<TotalLocksHavingDistinctCountInput>;
  readonly max: InputMaybe<TotalLocksHavingMaxInput>;
  readonly min: InputMaybe<TotalLocksHavingMinInput>;
  readonly stddevPopulation: InputMaybe<TotalLocksHavingStddevPopulationInput>;
  readonly stddevSample: InputMaybe<TotalLocksHavingStddevSampleInput>;
  readonly sum: InputMaybe<TotalLocksHavingSumInput>;
  readonly variancePopulation: InputMaybe<TotalLocksHavingVariancePopulationInput>;
  readonly varianceSample: InputMaybe<TotalLocksHavingVarianceSampleInput>;
};

export type TotalLocksHavingMaxInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
};

export type TotalLocksHavingMinInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
};

export type TotalLocksHavingStddevPopulationInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
};

export type TotalLocksHavingStddevSampleInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
};

export type TotalLocksHavingSumInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
};

export type TotalLocksHavingVariancePopulationInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
};

export type TotalLocksHavingVarianceSampleInput = {
  readonly createdBlock: InputMaybe<HavingIntFilter>;
};

/** Methods to use when ordering `TotalLock`. */
export enum TotalLocksOrderBy {
  CREATED_BLOCK_ASC = 'CREATED_BLOCK_ASC',
  CREATED_BLOCK_DESC = 'CREATED_BLOCK_DESC',
  ID_ASC = 'ID_ASC',
  ID_DESC = 'ID_DESC',
  LAST_EVENT_ASC = 'LAST_EVENT_ASC',
  LAST_EVENT_DESC = 'LAST_EVENT_DESC',
  NATURAL = 'NATURAL',
  PRIMARY_KEY_ASC = 'PRIMARY_KEY_ASC',
  PRIMARY_KEY_DESC = 'PRIMARY_KEY_DESC',
  TOTAL_DELEGATION_ASC = 'TOTAL_DELEGATION_ASC',
  TOTAL_DELEGATION_DESC = 'TOTAL_DELEGATION_DESC',
  TOTAL_STAKE_ASC = 'TOTAL_STAKE_ASC',
  TOTAL_STAKE_DESC = 'TOTAL_STAKE_DESC',
}

export type Transfer = Node & {
  readonly __typename: 'Transfer';
  readonly amount: Scalars['BigFloat']['output'];
  readonly blockheight: Scalars['BigFloat']['output'];
  readonly from: Scalars['String']['output'];
  readonly id: Scalars['String']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  readonly nodeId: Scalars['ID']['output'];
  readonly timestamp: Scalars['Datetime']['output'];
  readonly to: Scalars['String']['output'];
  readonly txHash: Scalars['String']['output'];
};

export type TransferAggregates = {
  readonly __typename: 'TransferAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly average: Maybe<TransferAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly distinctCount: Maybe<TransferDistinctCountAggregates>;
  readonly keys: Maybe<ReadonlyArray<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly max: Maybe<TransferMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly min: Maybe<TransferMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevPopulation: Maybe<TransferStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevSample: Maybe<TransferStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly sum: Maybe<TransferSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly variancePopulation: Maybe<TransferVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly varianceSample: Maybe<TransferVarianceSampleAggregates>;
};

export type TransferAverageAggregates = {
  readonly __typename: 'TransferAverageAggregates';
  /** Mean average of amount across the matching connection */
  readonly amount: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of blockheight across the matching connection */
  readonly blockheight: Maybe<Scalars['BigFloat']['output']>;
};

export type TransferDistinctCountAggregates = {
  readonly __typename: 'TransferDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  readonly _blockRange: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  readonly _id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of amount across the matching connection */
  readonly amount: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of blockheight across the matching connection */
  readonly blockheight: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of from across the matching connection */
  readonly from: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  readonly id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of timestamp across the matching connection */
  readonly timestamp: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of to across the matching connection */
  readonly to: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of txHash across the matching connection */
  readonly txHash: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `Transfer` object types. All fields are combined with a logical ‘and.’ */
export type TransferFilter = {
  /** Filter by the object’s `amount` field. */
  readonly amount: InputMaybe<BigFloatFilter>;
  /** Checks for all expressions in this list. */
  readonly and: InputMaybe<ReadonlyArray<TransferFilter>>;
  /** Filter by the object’s `blockheight` field. */
  readonly blockheight: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `from` field. */
  readonly from: InputMaybe<StringFilter>;
  /** Filter by the object’s `id` field. */
  readonly id: InputMaybe<StringFilter>;
  /** Negates the expression. */
  readonly not: InputMaybe<TransferFilter>;
  /** Checks for any expressions in this list. */
  readonly or: InputMaybe<ReadonlyArray<TransferFilter>>;
  /** Filter by the object’s `timestamp` field. */
  readonly timestamp: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `to` field. */
  readonly to: InputMaybe<StringFilter>;
  /** Filter by the object’s `txHash` field. */
  readonly txHash: InputMaybe<StringFilter>;
};

export type TransferMaxAggregates = {
  readonly __typename: 'TransferMaxAggregates';
  /** Maximum of amount across the matching connection */
  readonly amount: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of blockheight across the matching connection */
  readonly blockheight: Maybe<Scalars['BigFloat']['output']>;
};

export type TransferMinAggregates = {
  readonly __typename: 'TransferMinAggregates';
  /** Minimum of amount across the matching connection */
  readonly amount: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of blockheight across the matching connection */
  readonly blockheight: Maybe<Scalars['BigFloat']['output']>;
};

export type TransferStddevPopulationAggregates = {
  readonly __typename: 'TransferStddevPopulationAggregates';
  /** Population standard deviation of amount across the matching connection */
  readonly amount: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of blockheight across the matching connection */
  readonly blockheight: Maybe<Scalars['BigFloat']['output']>;
};

export type TransferStddevSampleAggregates = {
  readonly __typename: 'TransferStddevSampleAggregates';
  /** Sample standard deviation of amount across the matching connection */
  readonly amount: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of blockheight across the matching connection */
  readonly blockheight: Maybe<Scalars['BigFloat']['output']>;
};

export type TransferSumAggregates = {
  readonly __typename: 'TransferSumAggregates';
  /** Sum of amount across the matching connection */
  readonly amount: Scalars['BigFloat']['output'];
  /** Sum of blockheight across the matching connection */
  readonly blockheight: Scalars['BigFloat']['output'];
};

export type TransferVariancePopulationAggregates = {
  readonly __typename: 'TransferVariancePopulationAggregates';
  /** Population variance of amount across the matching connection */
  readonly amount: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of blockheight across the matching connection */
  readonly blockheight: Maybe<Scalars['BigFloat']['output']>;
};

export type TransferVarianceSampleAggregates = {
  readonly __typename: 'TransferVarianceSampleAggregates';
  /** Sample variance of amount across the matching connection */
  readonly amount: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of blockheight across the matching connection */
  readonly blockheight: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `Transfer` values. */
export type TransfersConnection = {
  readonly __typename: 'TransfersConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<TransferAggregates>;
  /** A list of edges which contains the `Transfer` and cursor to aid in pagination. */
  readonly edges: ReadonlyArray<TransfersEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<TransferAggregates>>;
  /** A list of `Transfer` objects. */
  readonly nodes: ReadonlyArray<Maybe<Transfer>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Transfer` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Transfer` values. */
export type TransfersConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<TransfersGroupBy>;
  having: InputMaybe<TransfersHavingInput>;
};

/** A `Transfer` edge in the connection. */
export type TransfersEdge = {
  readonly __typename: 'TransfersEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `Transfer` at the end of the edge. */
  readonly node: Maybe<Transfer>;
};

/** Grouping methods for `Transfer` for usage during aggregation. */
export enum TransfersGroupBy {
  AMOUNT = 'AMOUNT',
  BLOCKHEIGHT = 'BLOCKHEIGHT',
  FROM = 'FROM',
  ID = 'ID',
  TIMESTAMP = 'TIMESTAMP',
  TIMESTAMP_TRUNCATED_TO_DAY = 'TIMESTAMP_TRUNCATED_TO_DAY',
  TIMESTAMP_TRUNCATED_TO_HOUR = 'TIMESTAMP_TRUNCATED_TO_HOUR',
  TO = 'TO',
  TX_HASH = 'TX_HASH',
}

export type TransfersHavingAverageInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
  readonly blockheight: InputMaybe<HavingBigfloatFilter>;
  readonly timestamp: InputMaybe<HavingDatetimeFilter>;
};

export type TransfersHavingDistinctCountInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
  readonly blockheight: InputMaybe<HavingBigfloatFilter>;
  readonly timestamp: InputMaybe<HavingDatetimeFilter>;
};

/** Conditions for `Transfer` aggregates. */
export type TransfersHavingInput = {
  readonly AND: InputMaybe<ReadonlyArray<TransfersHavingInput>>;
  readonly OR: InputMaybe<ReadonlyArray<TransfersHavingInput>>;
  readonly average: InputMaybe<TransfersHavingAverageInput>;
  readonly distinctCount: InputMaybe<TransfersHavingDistinctCountInput>;
  readonly max: InputMaybe<TransfersHavingMaxInput>;
  readonly min: InputMaybe<TransfersHavingMinInput>;
  readonly stddevPopulation: InputMaybe<TransfersHavingStddevPopulationInput>;
  readonly stddevSample: InputMaybe<TransfersHavingStddevSampleInput>;
  readonly sum: InputMaybe<TransfersHavingSumInput>;
  readonly variancePopulation: InputMaybe<TransfersHavingVariancePopulationInput>;
  readonly varianceSample: InputMaybe<TransfersHavingVarianceSampleInput>;
};

export type TransfersHavingMaxInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
  readonly blockheight: InputMaybe<HavingBigfloatFilter>;
  readonly timestamp: InputMaybe<HavingDatetimeFilter>;
};

export type TransfersHavingMinInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
  readonly blockheight: InputMaybe<HavingBigfloatFilter>;
  readonly timestamp: InputMaybe<HavingDatetimeFilter>;
};

export type TransfersHavingStddevPopulationInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
  readonly blockheight: InputMaybe<HavingBigfloatFilter>;
  readonly timestamp: InputMaybe<HavingDatetimeFilter>;
};

export type TransfersHavingStddevSampleInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
  readonly blockheight: InputMaybe<HavingBigfloatFilter>;
  readonly timestamp: InputMaybe<HavingDatetimeFilter>;
};

export type TransfersHavingSumInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
  readonly blockheight: InputMaybe<HavingBigfloatFilter>;
  readonly timestamp: InputMaybe<HavingDatetimeFilter>;
};

export type TransfersHavingVariancePopulationInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
  readonly blockheight: InputMaybe<HavingBigfloatFilter>;
  readonly timestamp: InputMaybe<HavingDatetimeFilter>;
};

export type TransfersHavingVarianceSampleInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
  readonly blockheight: InputMaybe<HavingBigfloatFilter>;
  readonly timestamp: InputMaybe<HavingDatetimeFilter>;
};

/** Methods to use when ordering `Transfer`. */
export enum TransfersOrderBy {
  AMOUNT_ASC = 'AMOUNT_ASC',
  AMOUNT_DESC = 'AMOUNT_DESC',
  BLOCKHEIGHT_ASC = 'BLOCKHEIGHT_ASC',
  BLOCKHEIGHT_DESC = 'BLOCKHEIGHT_DESC',
  FROM_ASC = 'FROM_ASC',
  FROM_DESC = 'FROM_DESC',
  ID_ASC = 'ID_ASC',
  ID_DESC = 'ID_DESC',
  NATURAL = 'NATURAL',
  PRIMARY_KEY_ASC = 'PRIMARY_KEY_ASC',
  PRIMARY_KEY_DESC = 'PRIMARY_KEY_DESC',
  TIMESTAMP_ASC = 'TIMESTAMP_ASC',
  TIMESTAMP_DESC = 'TIMESTAMP_DESC',
  TO_ASC = 'TO_ASC',
  TO_DESC = 'TO_DESC',
  TX_HASH_ASC = 'TX_HASH_ASC',
  TX_HASH_DESC = 'TX_HASH_DESC',
}

export type UnclaimedReward = Node & {
  readonly __typename: 'UnclaimedReward';
  readonly amount: Scalars['BigFloat']['output'];
  readonly createdBlock: Maybe<Scalars['Int']['output']>;
  /** Reads a single `Delegator` that is related to this `UnclaimedReward`. */
  readonly delegator: Maybe<Delegator>;
  readonly delegatorAddress: Scalars['String']['output'];
  readonly delegatorId: Maybe<Scalars['String']['output']>;
  readonly id: Scalars['String']['output'];
  readonly indexerAddress: Scalars['String']['output'];
  readonly lastEvent: Maybe<Scalars['String']['output']>;
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  readonly nodeId: Scalars['ID']['output'];
};

export type UnclaimedRewardAggregates = {
  readonly __typename: 'UnclaimedRewardAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly average: Maybe<UnclaimedRewardAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly distinctCount: Maybe<UnclaimedRewardDistinctCountAggregates>;
  readonly keys: Maybe<ReadonlyArray<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly max: Maybe<UnclaimedRewardMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly min: Maybe<UnclaimedRewardMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevPopulation: Maybe<UnclaimedRewardStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevSample: Maybe<UnclaimedRewardStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly sum: Maybe<UnclaimedRewardSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly variancePopulation: Maybe<UnclaimedRewardVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly varianceSample: Maybe<UnclaimedRewardVarianceSampleAggregates>;
};

/** A filter to be used against aggregates of `UnclaimedReward` object types. */
export type UnclaimedRewardAggregatesFilter = {
  /** Mean average aggregate over matching `UnclaimedReward` objects. */
  readonly average: InputMaybe<UnclaimedRewardAverageAggregateFilter>;
  /** Distinct count aggregate over matching `UnclaimedReward` objects. */
  readonly distinctCount: InputMaybe<UnclaimedRewardDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `UnclaimedReward` object to be included within the aggregate. */
  readonly filter: InputMaybe<UnclaimedRewardFilter>;
  /** Maximum aggregate over matching `UnclaimedReward` objects. */
  readonly max: InputMaybe<UnclaimedRewardMaxAggregateFilter>;
  /** Minimum aggregate over matching `UnclaimedReward` objects. */
  readonly min: InputMaybe<UnclaimedRewardMinAggregateFilter>;
  /** Population standard deviation aggregate over matching `UnclaimedReward` objects. */
  readonly stddevPopulation: InputMaybe<UnclaimedRewardStddevPopulationAggregateFilter>;
  /** Sample standard deviation aggregate over matching `UnclaimedReward` objects. */
  readonly stddevSample: InputMaybe<UnclaimedRewardStddevSampleAggregateFilter>;
  /** Sum aggregate over matching `UnclaimedReward` objects. */
  readonly sum: InputMaybe<UnclaimedRewardSumAggregateFilter>;
  /** Population variance aggregate over matching `UnclaimedReward` objects. */
  readonly variancePopulation: InputMaybe<UnclaimedRewardVariancePopulationAggregateFilter>;
  /** Sample variance aggregate over matching `UnclaimedReward` objects. */
  readonly varianceSample: InputMaybe<UnclaimedRewardVarianceSampleAggregateFilter>;
};

export type UnclaimedRewardAverageAggregateFilter = {
  readonly amount: InputMaybe<BigFloatFilter>;
  readonly createdBlock: InputMaybe<BigFloatFilter>;
};

export type UnclaimedRewardAverageAggregates = {
  readonly __typename: 'UnclaimedRewardAverageAggregates';
  /** Mean average of amount across the matching connection */
  readonly amount: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
};

export type UnclaimedRewardDistinctCountAggregateFilter = {
  readonly _blockRange: InputMaybe<BigIntFilter>;
  readonly _id: InputMaybe<BigIntFilter>;
  readonly amount: InputMaybe<BigIntFilter>;
  readonly createdBlock: InputMaybe<BigIntFilter>;
  readonly delegatorAddress: InputMaybe<BigIntFilter>;
  readonly delegatorId: InputMaybe<BigIntFilter>;
  readonly id: InputMaybe<BigIntFilter>;
  readonly indexerAddress: InputMaybe<BigIntFilter>;
  readonly lastEvent: InputMaybe<BigIntFilter>;
};

export type UnclaimedRewardDistinctCountAggregates = {
  readonly __typename: 'UnclaimedRewardDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  readonly _blockRange: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  readonly _id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of amount across the matching connection */
  readonly amount: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of delegatorAddress across the matching connection */
  readonly delegatorAddress: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of delegatorId across the matching connection */
  readonly delegatorId: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  readonly id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of indexerAddress across the matching connection */
  readonly indexerAddress: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of lastEvent across the matching connection */
  readonly lastEvent: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `UnclaimedReward` object types. All fields are combined with a logical ‘and.’ */
export type UnclaimedRewardFilter = {
  /** Filter by the object’s `amount` field. */
  readonly amount: InputMaybe<BigFloatFilter>;
  /** Checks for all expressions in this list. */
  readonly and: InputMaybe<ReadonlyArray<UnclaimedRewardFilter>>;
  /** Filter by the object’s `createdBlock` field. */
  readonly createdBlock: InputMaybe<IntFilter>;
  /** Filter by the object’s `delegator` relation. */
  readonly delegator: InputMaybe<DelegatorFilter>;
  /** Filter by the object’s `delegatorAddress` field. */
  readonly delegatorAddress: InputMaybe<StringFilter>;
  /** A related `delegator` exists. */
  readonly delegatorExists: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `delegatorId` field. */
  readonly delegatorId: InputMaybe<StringFilter>;
  /** Filter by the object’s `id` field. */
  readonly id: InputMaybe<StringFilter>;
  /** Filter by the object’s `indexerAddress` field. */
  readonly indexerAddress: InputMaybe<StringFilter>;
  /** Filter by the object’s `lastEvent` field. */
  readonly lastEvent: InputMaybe<StringFilter>;
  /** Negates the expression. */
  readonly not: InputMaybe<UnclaimedRewardFilter>;
  /** Checks for any expressions in this list. */
  readonly or: InputMaybe<ReadonlyArray<UnclaimedRewardFilter>>;
};

export type UnclaimedRewardMaxAggregateFilter = {
  readonly amount: InputMaybe<BigFloatFilter>;
  readonly createdBlock: InputMaybe<IntFilter>;
};

export type UnclaimedRewardMaxAggregates = {
  readonly __typename: 'UnclaimedRewardMaxAggregates';
  /** Maximum of amount across the matching connection */
  readonly amount: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['Int']['output']>;
};

export type UnclaimedRewardMinAggregateFilter = {
  readonly amount: InputMaybe<BigFloatFilter>;
  readonly createdBlock: InputMaybe<IntFilter>;
};

export type UnclaimedRewardMinAggregates = {
  readonly __typename: 'UnclaimedRewardMinAggregates';
  /** Minimum of amount across the matching connection */
  readonly amount: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['Int']['output']>;
};

export type UnclaimedRewardStddevPopulationAggregateFilter = {
  readonly amount: InputMaybe<BigFloatFilter>;
  readonly createdBlock: InputMaybe<BigFloatFilter>;
};

export type UnclaimedRewardStddevPopulationAggregates = {
  readonly __typename: 'UnclaimedRewardStddevPopulationAggregates';
  /** Population standard deviation of amount across the matching connection */
  readonly amount: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
};

export type UnclaimedRewardStddevSampleAggregateFilter = {
  readonly amount: InputMaybe<BigFloatFilter>;
  readonly createdBlock: InputMaybe<BigFloatFilter>;
};

export type UnclaimedRewardStddevSampleAggregates = {
  readonly __typename: 'UnclaimedRewardStddevSampleAggregates';
  /** Sample standard deviation of amount across the matching connection */
  readonly amount: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
};

export type UnclaimedRewardSumAggregateFilter = {
  readonly amount: InputMaybe<BigFloatFilter>;
  readonly createdBlock: InputMaybe<BigIntFilter>;
};

export type UnclaimedRewardSumAggregates = {
  readonly __typename: 'UnclaimedRewardSumAggregates';
  /** Sum of amount across the matching connection */
  readonly amount: Scalars['BigFloat']['output'];
  /** Sum of createdBlock across the matching connection */
  readonly createdBlock: Scalars['BigInt']['output'];
};

export type UnclaimedRewardVariancePopulationAggregateFilter = {
  readonly amount: InputMaybe<BigFloatFilter>;
  readonly createdBlock: InputMaybe<BigFloatFilter>;
};

export type UnclaimedRewardVariancePopulationAggregates = {
  readonly __typename: 'UnclaimedRewardVariancePopulationAggregates';
  /** Population variance of amount across the matching connection */
  readonly amount: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
};

export type UnclaimedRewardVarianceSampleAggregateFilter = {
  readonly amount: InputMaybe<BigFloatFilter>;
  readonly createdBlock: InputMaybe<BigFloatFilter>;
};

export type UnclaimedRewardVarianceSampleAggregates = {
  readonly __typename: 'UnclaimedRewardVarianceSampleAggregates';
  /** Sample variance of amount across the matching connection */
  readonly amount: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `UnclaimedReward` values. */
export type UnclaimedRewardsConnection = {
  readonly __typename: 'UnclaimedRewardsConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<UnclaimedRewardAggregates>;
  /** A list of edges which contains the `UnclaimedReward` and cursor to aid in pagination. */
  readonly edges: ReadonlyArray<UnclaimedRewardsEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<UnclaimedRewardAggregates>>;
  /** A list of `UnclaimedReward` objects. */
  readonly nodes: ReadonlyArray<Maybe<UnclaimedReward>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `UnclaimedReward` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `UnclaimedReward` values. */
export type UnclaimedRewardsConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<UnclaimedRewardsGroupBy>;
  having: InputMaybe<UnclaimedRewardsHavingInput>;
};

/** A `UnclaimedReward` edge in the connection. */
export type UnclaimedRewardsEdge = {
  readonly __typename: 'UnclaimedRewardsEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `UnclaimedReward` at the end of the edge. */
  readonly node: Maybe<UnclaimedReward>;
};

/** Grouping methods for `UnclaimedReward` for usage during aggregation. */
export enum UnclaimedRewardsGroupBy {
  AMOUNT = 'AMOUNT',
  CREATED_BLOCK = 'CREATED_BLOCK',
  DELEGATOR_ADDRESS = 'DELEGATOR_ADDRESS',
  DELEGATOR_ID = 'DELEGATOR_ID',
  ID = 'ID',
  INDEXER_ADDRESS = 'INDEXER_ADDRESS',
  LAST_EVENT = 'LAST_EVENT',
}

export type UnclaimedRewardsHavingAverageInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
  readonly createdBlock: InputMaybe<HavingIntFilter>;
};

export type UnclaimedRewardsHavingDistinctCountInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
  readonly createdBlock: InputMaybe<HavingIntFilter>;
};

/** Conditions for `UnclaimedReward` aggregates. */
export type UnclaimedRewardsHavingInput = {
  readonly AND: InputMaybe<ReadonlyArray<UnclaimedRewardsHavingInput>>;
  readonly OR: InputMaybe<ReadonlyArray<UnclaimedRewardsHavingInput>>;
  readonly average: InputMaybe<UnclaimedRewardsHavingAverageInput>;
  readonly distinctCount: InputMaybe<UnclaimedRewardsHavingDistinctCountInput>;
  readonly max: InputMaybe<UnclaimedRewardsHavingMaxInput>;
  readonly min: InputMaybe<UnclaimedRewardsHavingMinInput>;
  readonly stddevPopulation: InputMaybe<UnclaimedRewardsHavingStddevPopulationInput>;
  readonly stddevSample: InputMaybe<UnclaimedRewardsHavingStddevSampleInput>;
  readonly sum: InputMaybe<UnclaimedRewardsHavingSumInput>;
  readonly variancePopulation: InputMaybe<UnclaimedRewardsHavingVariancePopulationInput>;
  readonly varianceSample: InputMaybe<UnclaimedRewardsHavingVarianceSampleInput>;
};

export type UnclaimedRewardsHavingMaxInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
  readonly createdBlock: InputMaybe<HavingIntFilter>;
};

export type UnclaimedRewardsHavingMinInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
  readonly createdBlock: InputMaybe<HavingIntFilter>;
};

export type UnclaimedRewardsHavingStddevPopulationInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
  readonly createdBlock: InputMaybe<HavingIntFilter>;
};

export type UnclaimedRewardsHavingStddevSampleInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
  readonly createdBlock: InputMaybe<HavingIntFilter>;
};

export type UnclaimedRewardsHavingSumInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
  readonly createdBlock: InputMaybe<HavingIntFilter>;
};

export type UnclaimedRewardsHavingVariancePopulationInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
  readonly createdBlock: InputMaybe<HavingIntFilter>;
};

export type UnclaimedRewardsHavingVarianceSampleInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
  readonly createdBlock: InputMaybe<HavingIntFilter>;
};

/** Methods to use when ordering `UnclaimedReward`. */
export enum UnclaimedRewardsOrderBy {
  AMOUNT_ASC = 'AMOUNT_ASC',
  AMOUNT_DESC = 'AMOUNT_DESC',
  CREATED_BLOCK_ASC = 'CREATED_BLOCK_ASC',
  CREATED_BLOCK_DESC = 'CREATED_BLOCK_DESC',
  DELEGATOR_ADDRESS_ASC = 'DELEGATOR_ADDRESS_ASC',
  DELEGATOR_ADDRESS_DESC = 'DELEGATOR_ADDRESS_DESC',
  DELEGATOR_BY_DELEGATOR_ID__CREATED_BLOCK_ASC = 'DELEGATOR_BY_DELEGATOR_ID__CREATED_BLOCK_ASC',
  DELEGATOR_BY_DELEGATOR_ID__CREATED_BLOCK_DESC = 'DELEGATOR_BY_DELEGATOR_ID__CREATED_BLOCK_DESC',
  DELEGATOR_BY_DELEGATOR_ID__EXIT_ERA_ASC = 'DELEGATOR_BY_DELEGATOR_ID__EXIT_ERA_ASC',
  DELEGATOR_BY_DELEGATOR_ID__EXIT_ERA_DESC = 'DELEGATOR_BY_DELEGATOR_ID__EXIT_ERA_DESC',
  DELEGATOR_BY_DELEGATOR_ID__ID_ASC = 'DELEGATOR_BY_DELEGATOR_ID__ID_ASC',
  DELEGATOR_BY_DELEGATOR_ID__ID_DESC = 'DELEGATOR_BY_DELEGATOR_ID__ID_DESC',
  DELEGATOR_BY_DELEGATOR_ID__LAST_EVENT_ASC = 'DELEGATOR_BY_DELEGATOR_ID__LAST_EVENT_ASC',
  DELEGATOR_BY_DELEGATOR_ID__LAST_EVENT_DESC = 'DELEGATOR_BY_DELEGATOR_ID__LAST_EVENT_DESC',
  DELEGATOR_BY_DELEGATOR_ID__START_ERA_ASC = 'DELEGATOR_BY_DELEGATOR_ID__START_ERA_ASC',
  DELEGATOR_BY_DELEGATOR_ID__START_ERA_DESC = 'DELEGATOR_BY_DELEGATOR_ID__START_ERA_DESC',
  DELEGATOR_BY_DELEGATOR_ID__TOTAL_DELEGATIONS_ASC = 'DELEGATOR_BY_DELEGATOR_ID__TOTAL_DELEGATIONS_ASC',
  DELEGATOR_BY_DELEGATOR_ID__TOTAL_DELEGATIONS_DESC = 'DELEGATOR_BY_DELEGATOR_ID__TOTAL_DELEGATIONS_DESC',
  DELEGATOR_ID_ASC = 'DELEGATOR_ID_ASC',
  DELEGATOR_ID_DESC = 'DELEGATOR_ID_DESC',
  ID_ASC = 'ID_ASC',
  ID_DESC = 'ID_DESC',
  INDEXER_ADDRESS_ASC = 'INDEXER_ADDRESS_ASC',
  INDEXER_ADDRESS_DESC = 'INDEXER_ADDRESS_DESC',
  LAST_EVENT_ASC = 'LAST_EVENT_ASC',
  LAST_EVENT_DESC = 'LAST_EVENT_DESC',
  NATURAL = 'NATURAL',
  PRIMARY_KEY_ASC = 'PRIMARY_KEY_ASC',
  PRIMARY_KEY_DESC = 'PRIMARY_KEY_DESC',
}

export type Withdraw = Node & {
  readonly __typename: 'Withdraw';
  readonly amount: Scalars['BigFloat']['output'];
  readonly blockheight: Scalars['Int']['output'];
  readonly createAt: Scalars['Datetime']['output'];
  readonly id: Scalars['String']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  readonly nodeId: Scalars['ID']['output'];
  readonly sender: Scalars['String']['output'];
  readonly txHash: Scalars['String']['output'];
};

export type WithdrawAggregates = {
  readonly __typename: 'WithdrawAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly average: Maybe<WithdrawAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly distinctCount: Maybe<WithdrawDistinctCountAggregates>;
  readonly keys: Maybe<ReadonlyArray<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly max: Maybe<WithdrawMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly min: Maybe<WithdrawMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevPopulation: Maybe<WithdrawStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevSample: Maybe<WithdrawStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly sum: Maybe<WithdrawSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly variancePopulation: Maybe<WithdrawVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly varianceSample: Maybe<WithdrawVarianceSampleAggregates>;
};

export type WithdrawAverageAggregates = {
  readonly __typename: 'WithdrawAverageAggregates';
  /** Mean average of amount across the matching connection */
  readonly amount: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of blockheight across the matching connection */
  readonly blockheight: Maybe<Scalars['BigFloat']['output']>;
};

export type WithdrawDistinctCountAggregates = {
  readonly __typename: 'WithdrawDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  readonly _blockRange: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  readonly _id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of amount across the matching connection */
  readonly amount: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of blockheight across the matching connection */
  readonly blockheight: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createAt across the matching connection */
  readonly createAt: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  readonly id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of sender across the matching connection */
  readonly sender: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of txHash across the matching connection */
  readonly txHash: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `Withdraw` object types. All fields are combined with a logical ‘and.’ */
export type WithdrawFilter = {
  /** Filter by the object’s `amount` field. */
  readonly amount: InputMaybe<BigFloatFilter>;
  /** Checks for all expressions in this list. */
  readonly and: InputMaybe<ReadonlyArray<WithdrawFilter>>;
  /** Filter by the object’s `blockheight` field. */
  readonly blockheight: InputMaybe<IntFilter>;
  /** Filter by the object’s `createAt` field. */
  readonly createAt: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `id` field. */
  readonly id: InputMaybe<StringFilter>;
  /** Negates the expression. */
  readonly not: InputMaybe<WithdrawFilter>;
  /** Checks for any expressions in this list. */
  readonly or: InputMaybe<ReadonlyArray<WithdrawFilter>>;
  /** Filter by the object’s `sender` field. */
  readonly sender: InputMaybe<StringFilter>;
  /** Filter by the object’s `txHash` field. */
  readonly txHash: InputMaybe<StringFilter>;
};

export type WithdrawMaxAggregates = {
  readonly __typename: 'WithdrawMaxAggregates';
  /** Maximum of amount across the matching connection */
  readonly amount: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of blockheight across the matching connection */
  readonly blockheight: Maybe<Scalars['Int']['output']>;
};

export type WithdrawMinAggregates = {
  readonly __typename: 'WithdrawMinAggregates';
  /** Minimum of amount across the matching connection */
  readonly amount: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of blockheight across the matching connection */
  readonly blockheight: Maybe<Scalars['Int']['output']>;
};

export type WithdrawStddevPopulationAggregates = {
  readonly __typename: 'WithdrawStddevPopulationAggregates';
  /** Population standard deviation of amount across the matching connection */
  readonly amount: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of blockheight across the matching connection */
  readonly blockheight: Maybe<Scalars['BigFloat']['output']>;
};

export type WithdrawStddevSampleAggregates = {
  readonly __typename: 'WithdrawStddevSampleAggregates';
  /** Sample standard deviation of amount across the matching connection */
  readonly amount: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of blockheight across the matching connection */
  readonly blockheight: Maybe<Scalars['BigFloat']['output']>;
};

export type WithdrawSumAggregates = {
  readonly __typename: 'WithdrawSumAggregates';
  /** Sum of amount across the matching connection */
  readonly amount: Scalars['BigFloat']['output'];
  /** Sum of blockheight across the matching connection */
  readonly blockheight: Scalars['BigInt']['output'];
};

export type WithdrawVariancePopulationAggregates = {
  readonly __typename: 'WithdrawVariancePopulationAggregates';
  /** Population variance of amount across the matching connection */
  readonly amount: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of blockheight across the matching connection */
  readonly blockheight: Maybe<Scalars['BigFloat']['output']>;
};

export type WithdrawVarianceSampleAggregates = {
  readonly __typename: 'WithdrawVarianceSampleAggregates';
  /** Sample variance of amount across the matching connection */
  readonly amount: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of blockheight across the matching connection */
  readonly blockheight: Maybe<Scalars['BigFloat']['output']>;
};

export enum WithdrawalStatus {
  CANCELLED = 'CANCELLED',
  CLAIMED = 'CLAIMED',
  ONGOING = 'ONGOING',
}

/** A filter to be used against WithdrawalStatus fields. All fields are combined with a logical ‘and.’ */
export type WithdrawalStatusFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  readonly distinctFrom: InputMaybe<WithdrawalStatus>;
  /** Equal to the specified value. */
  readonly equalTo: InputMaybe<WithdrawalStatus>;
  /** Greater than the specified value. */
  readonly greaterThan: InputMaybe<WithdrawalStatus>;
  /** Greater than or equal to the specified value. */
  readonly greaterThanOrEqualTo: InputMaybe<WithdrawalStatus>;
  /** Included in the specified list. */
  readonly in: InputMaybe<ReadonlyArray<WithdrawalStatus>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  readonly isNull: InputMaybe<Scalars['Boolean']['input']>;
  /** Less than the specified value. */
  readonly lessThan: InputMaybe<WithdrawalStatus>;
  /** Less than or equal to the specified value. */
  readonly lessThanOrEqualTo: InputMaybe<WithdrawalStatus>;
  /** Equal to the specified value, treating null like an ordinary value. */
  readonly notDistinctFrom: InputMaybe<WithdrawalStatus>;
  /** Not equal to the specified value. */
  readonly notEqualTo: InputMaybe<WithdrawalStatus>;
  /** Not included in the specified list. */
  readonly notIn: InputMaybe<ReadonlyArray<WithdrawalStatus>>;
};

export enum WithdrawalType {
  COMMISSION = 'COMMISSION',
  MERGE = 'MERGE',
  UNDELEGATION = 'UNDELEGATION',
  UNSTAKE = 'UNSTAKE',
}

/** A filter to be used against WithdrawalType fields. All fields are combined with a logical ‘and.’ */
export type WithdrawalTypeFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  readonly distinctFrom: InputMaybe<WithdrawalType>;
  /** Equal to the specified value. */
  readonly equalTo: InputMaybe<WithdrawalType>;
  /** Greater than the specified value. */
  readonly greaterThan: InputMaybe<WithdrawalType>;
  /** Greater than or equal to the specified value. */
  readonly greaterThanOrEqualTo: InputMaybe<WithdrawalType>;
  /** Included in the specified list. */
  readonly in: InputMaybe<ReadonlyArray<WithdrawalType>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  readonly isNull: InputMaybe<Scalars['Boolean']['input']>;
  /** Less than the specified value. */
  readonly lessThan: InputMaybe<WithdrawalType>;
  /** Less than or equal to the specified value. */
  readonly lessThanOrEqualTo: InputMaybe<WithdrawalType>;
  /** Equal to the specified value, treating null like an ordinary value. */
  readonly notDistinctFrom: InputMaybe<WithdrawalType>;
  /** Not equal to the specified value. */
  readonly notEqualTo: InputMaybe<WithdrawalType>;
  /** Not included in the specified list. */
  readonly notIn: InputMaybe<ReadonlyArray<WithdrawalType>>;
};

export type Withdrawl = Node & {
  readonly __typename: 'Withdrawl';
  readonly amount: Scalars['BigFloat']['output'];
  readonly createdBlock: Maybe<Scalars['Int']['output']>;
  readonly delegator: Scalars['String']['output'];
  readonly id: Scalars['String']['output'];
  readonly index: Scalars['BigFloat']['output'];
  readonly indexer: Scalars['String']['output'];
  readonly lastEvent: Maybe<Scalars['String']['output']>;
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  readonly nodeId: Scalars['ID']['output'];
  readonly startTime: Scalars['Datetime']['output'];
  readonly status: WithdrawalStatus;
  readonly type: WithdrawalType;
};

export type WithdrawlAggregates = {
  readonly __typename: 'WithdrawlAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly average: Maybe<WithdrawlAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly distinctCount: Maybe<WithdrawlDistinctCountAggregates>;
  readonly keys: Maybe<ReadonlyArray<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly max: Maybe<WithdrawlMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly min: Maybe<WithdrawlMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevPopulation: Maybe<WithdrawlStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevSample: Maybe<WithdrawlStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly sum: Maybe<WithdrawlSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly variancePopulation: Maybe<WithdrawlVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly varianceSample: Maybe<WithdrawlVarianceSampleAggregates>;
};

export type WithdrawlAverageAggregates = {
  readonly __typename: 'WithdrawlAverageAggregates';
  /** Mean average of amount across the matching connection */
  readonly amount: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of index across the matching connection */
  readonly index: Maybe<Scalars['BigFloat']['output']>;
};

export type WithdrawlDistinctCountAggregates = {
  readonly __typename: 'WithdrawlDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  readonly _blockRange: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  readonly _id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of amount across the matching connection */
  readonly amount: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of delegator across the matching connection */
  readonly delegator: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  readonly id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of index across the matching connection */
  readonly index: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of indexer across the matching connection */
  readonly indexer: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of lastEvent across the matching connection */
  readonly lastEvent: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of startTime across the matching connection */
  readonly startTime: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of status across the matching connection */
  readonly status: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of type across the matching connection */
  readonly type: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `Withdrawl` object types. All fields are combined with a logical ‘and.’ */
export type WithdrawlFilter = {
  /** Filter by the object’s `amount` field. */
  readonly amount: InputMaybe<BigFloatFilter>;
  /** Checks for all expressions in this list. */
  readonly and: InputMaybe<ReadonlyArray<WithdrawlFilter>>;
  /** Filter by the object’s `createdBlock` field. */
  readonly createdBlock: InputMaybe<IntFilter>;
  /** Filter by the object’s `delegator` field. */
  readonly delegator: InputMaybe<StringFilter>;
  /** Filter by the object’s `id` field. */
  readonly id: InputMaybe<StringFilter>;
  /** Filter by the object’s `index` field. */
  readonly index: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `indexer` field. */
  readonly indexer: InputMaybe<StringFilter>;
  /** Filter by the object’s `lastEvent` field. */
  readonly lastEvent: InputMaybe<StringFilter>;
  /** Negates the expression. */
  readonly not: InputMaybe<WithdrawlFilter>;
  /** Checks for any expressions in this list. */
  readonly or: InputMaybe<ReadonlyArray<WithdrawlFilter>>;
  /** Filter by the object’s `startTime` field. */
  readonly startTime: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `status` field. */
  readonly status: InputMaybe<WithdrawalStatusFilter>;
  /** Filter by the object’s `type` field. */
  readonly type: InputMaybe<WithdrawalTypeFilter>;
};

export type WithdrawlMaxAggregates = {
  readonly __typename: 'WithdrawlMaxAggregates';
  /** Maximum of amount across the matching connection */
  readonly amount: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['Int']['output']>;
  /** Maximum of index across the matching connection */
  readonly index: Maybe<Scalars['BigFloat']['output']>;
};

export type WithdrawlMinAggregates = {
  readonly __typename: 'WithdrawlMinAggregates';
  /** Minimum of amount across the matching connection */
  readonly amount: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['Int']['output']>;
  /** Minimum of index across the matching connection */
  readonly index: Maybe<Scalars['BigFloat']['output']>;
};

export type WithdrawlStddevPopulationAggregates = {
  readonly __typename: 'WithdrawlStddevPopulationAggregates';
  /** Population standard deviation of amount across the matching connection */
  readonly amount: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of index across the matching connection */
  readonly index: Maybe<Scalars['BigFloat']['output']>;
};

export type WithdrawlStddevSampleAggregates = {
  readonly __typename: 'WithdrawlStddevSampleAggregates';
  /** Sample standard deviation of amount across the matching connection */
  readonly amount: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of index across the matching connection */
  readonly index: Maybe<Scalars['BigFloat']['output']>;
};

export type WithdrawlSumAggregates = {
  readonly __typename: 'WithdrawlSumAggregates';
  /** Sum of amount across the matching connection */
  readonly amount: Scalars['BigFloat']['output'];
  /** Sum of createdBlock across the matching connection */
  readonly createdBlock: Scalars['BigInt']['output'];
  /** Sum of index across the matching connection */
  readonly index: Scalars['BigFloat']['output'];
};

export type WithdrawlVariancePopulationAggregates = {
  readonly __typename: 'WithdrawlVariancePopulationAggregates';
  /** Population variance of amount across the matching connection */
  readonly amount: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of index across the matching connection */
  readonly index: Maybe<Scalars['BigFloat']['output']>;
};

export type WithdrawlVarianceSampleAggregates = {
  readonly __typename: 'WithdrawlVarianceSampleAggregates';
  /** Sample variance of amount across the matching connection */
  readonly amount: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of createdBlock across the matching connection */
  readonly createdBlock: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of index across the matching connection */
  readonly index: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `Withdrawl` values. */
export type WithdrawlsConnection = {
  readonly __typename: 'WithdrawlsConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<WithdrawlAggregates>;
  /** A list of edges which contains the `Withdrawl` and cursor to aid in pagination. */
  readonly edges: ReadonlyArray<WithdrawlsEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<WithdrawlAggregates>>;
  /** A list of `Withdrawl` objects. */
  readonly nodes: ReadonlyArray<Maybe<Withdrawl>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Withdrawl` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Withdrawl` values. */
export type WithdrawlsConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<WithdrawlsGroupBy>;
  having: InputMaybe<WithdrawlsHavingInput>;
};

/** A `Withdrawl` edge in the connection. */
export type WithdrawlsEdge = {
  readonly __typename: 'WithdrawlsEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `Withdrawl` at the end of the edge. */
  readonly node: Maybe<Withdrawl>;
};

/** Grouping methods for `Withdrawl` for usage during aggregation. */
export enum WithdrawlsGroupBy {
  AMOUNT = 'AMOUNT',
  CREATED_BLOCK = 'CREATED_BLOCK',
  DELEGATOR = 'DELEGATOR',
  ID = 'ID',
  INDEX = 'INDEX',
  INDEXER = 'INDEXER',
  LAST_EVENT = 'LAST_EVENT',
  START_TIME = 'START_TIME',
  START_TIME_TRUNCATED_TO_DAY = 'START_TIME_TRUNCATED_TO_DAY',
  START_TIME_TRUNCATED_TO_HOUR = 'START_TIME_TRUNCATED_TO_HOUR',
  STATUS = 'STATUS',
  TYPE = 'TYPE',
}

export type WithdrawlsHavingAverageInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly index: InputMaybe<HavingBigfloatFilter>;
  readonly startTime: InputMaybe<HavingDatetimeFilter>;
};

export type WithdrawlsHavingDistinctCountInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly index: InputMaybe<HavingBigfloatFilter>;
  readonly startTime: InputMaybe<HavingDatetimeFilter>;
};

/** Conditions for `Withdrawl` aggregates. */
export type WithdrawlsHavingInput = {
  readonly AND: InputMaybe<ReadonlyArray<WithdrawlsHavingInput>>;
  readonly OR: InputMaybe<ReadonlyArray<WithdrawlsHavingInput>>;
  readonly average: InputMaybe<WithdrawlsHavingAverageInput>;
  readonly distinctCount: InputMaybe<WithdrawlsHavingDistinctCountInput>;
  readonly max: InputMaybe<WithdrawlsHavingMaxInput>;
  readonly min: InputMaybe<WithdrawlsHavingMinInput>;
  readonly stddevPopulation: InputMaybe<WithdrawlsHavingStddevPopulationInput>;
  readonly stddevSample: InputMaybe<WithdrawlsHavingStddevSampleInput>;
  readonly sum: InputMaybe<WithdrawlsHavingSumInput>;
  readonly variancePopulation: InputMaybe<WithdrawlsHavingVariancePopulationInput>;
  readonly varianceSample: InputMaybe<WithdrawlsHavingVarianceSampleInput>;
};

export type WithdrawlsHavingMaxInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly index: InputMaybe<HavingBigfloatFilter>;
  readonly startTime: InputMaybe<HavingDatetimeFilter>;
};

export type WithdrawlsHavingMinInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly index: InputMaybe<HavingBigfloatFilter>;
  readonly startTime: InputMaybe<HavingDatetimeFilter>;
};

export type WithdrawlsHavingStddevPopulationInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly index: InputMaybe<HavingBigfloatFilter>;
  readonly startTime: InputMaybe<HavingDatetimeFilter>;
};

export type WithdrawlsHavingStddevSampleInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly index: InputMaybe<HavingBigfloatFilter>;
  readonly startTime: InputMaybe<HavingDatetimeFilter>;
};

export type WithdrawlsHavingSumInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly index: InputMaybe<HavingBigfloatFilter>;
  readonly startTime: InputMaybe<HavingDatetimeFilter>;
};

export type WithdrawlsHavingVariancePopulationInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly index: InputMaybe<HavingBigfloatFilter>;
  readonly startTime: InputMaybe<HavingDatetimeFilter>;
};

export type WithdrawlsHavingVarianceSampleInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
  readonly createdBlock: InputMaybe<HavingIntFilter>;
  readonly index: InputMaybe<HavingBigfloatFilter>;
  readonly startTime: InputMaybe<HavingDatetimeFilter>;
};

/** Methods to use when ordering `Withdrawl`. */
export enum WithdrawlsOrderBy {
  AMOUNT_ASC = 'AMOUNT_ASC',
  AMOUNT_DESC = 'AMOUNT_DESC',
  CREATED_BLOCK_ASC = 'CREATED_BLOCK_ASC',
  CREATED_BLOCK_DESC = 'CREATED_BLOCK_DESC',
  DELEGATOR_ASC = 'DELEGATOR_ASC',
  DELEGATOR_DESC = 'DELEGATOR_DESC',
  ID_ASC = 'ID_ASC',
  ID_DESC = 'ID_DESC',
  INDEXER_ASC = 'INDEXER_ASC',
  INDEXER_DESC = 'INDEXER_DESC',
  INDEX_ASC = 'INDEX_ASC',
  INDEX_DESC = 'INDEX_DESC',
  LAST_EVENT_ASC = 'LAST_EVENT_ASC',
  LAST_EVENT_DESC = 'LAST_EVENT_DESC',
  NATURAL = 'NATURAL',
  PRIMARY_KEY_ASC = 'PRIMARY_KEY_ASC',
  PRIMARY_KEY_DESC = 'PRIMARY_KEY_DESC',
  START_TIME_ASC = 'START_TIME_ASC',
  START_TIME_DESC = 'START_TIME_DESC',
  STATUS_ASC = 'STATUS_ASC',
  STATUS_DESC = 'STATUS_DESC',
  TYPE_ASC = 'TYPE_ASC',
  TYPE_DESC = 'TYPE_DESC',
}

/** A connection to a list of `Withdraw` values. */
export type WithdrawsConnection = {
  readonly __typename: 'WithdrawsConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<WithdrawAggregates>;
  /** A list of edges which contains the `Withdraw` and cursor to aid in pagination. */
  readonly edges: ReadonlyArray<WithdrawsEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<WithdrawAggregates>>;
  /** A list of `Withdraw` objects. */
  readonly nodes: ReadonlyArray<Maybe<Withdraw>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `Withdraw` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `Withdraw` values. */
export type WithdrawsConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<WithdrawsGroupBy>;
  having: InputMaybe<WithdrawsHavingInput>;
};

/** A `Withdraw` edge in the connection. */
export type WithdrawsEdge = {
  readonly __typename: 'WithdrawsEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `Withdraw` at the end of the edge. */
  readonly node: Maybe<Withdraw>;
};

/** Grouping methods for `Withdraw` for usage during aggregation. */
export enum WithdrawsGroupBy {
  AMOUNT = 'AMOUNT',
  BLOCKHEIGHT = 'BLOCKHEIGHT',
  CREATE_AT = 'CREATE_AT',
  CREATE_AT_TRUNCATED_TO_DAY = 'CREATE_AT_TRUNCATED_TO_DAY',
  CREATE_AT_TRUNCATED_TO_HOUR = 'CREATE_AT_TRUNCATED_TO_HOUR',
  ID = 'ID',
  SENDER = 'SENDER',
  TX_HASH = 'TX_HASH',
}

export type WithdrawsHavingAverageInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
  readonly blockheight: InputMaybe<HavingIntFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
};

export type WithdrawsHavingDistinctCountInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
  readonly blockheight: InputMaybe<HavingIntFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
};

/** Conditions for `Withdraw` aggregates. */
export type WithdrawsHavingInput = {
  readonly AND: InputMaybe<ReadonlyArray<WithdrawsHavingInput>>;
  readonly OR: InputMaybe<ReadonlyArray<WithdrawsHavingInput>>;
  readonly average: InputMaybe<WithdrawsHavingAverageInput>;
  readonly distinctCount: InputMaybe<WithdrawsHavingDistinctCountInput>;
  readonly max: InputMaybe<WithdrawsHavingMaxInput>;
  readonly min: InputMaybe<WithdrawsHavingMinInput>;
  readonly stddevPopulation: InputMaybe<WithdrawsHavingStddevPopulationInput>;
  readonly stddevSample: InputMaybe<WithdrawsHavingStddevSampleInput>;
  readonly sum: InputMaybe<WithdrawsHavingSumInput>;
  readonly variancePopulation: InputMaybe<WithdrawsHavingVariancePopulationInput>;
  readonly varianceSample: InputMaybe<WithdrawsHavingVarianceSampleInput>;
};

export type WithdrawsHavingMaxInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
  readonly blockheight: InputMaybe<HavingIntFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
};

export type WithdrawsHavingMinInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
  readonly blockheight: InputMaybe<HavingIntFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
};

export type WithdrawsHavingStddevPopulationInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
  readonly blockheight: InputMaybe<HavingIntFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
};

export type WithdrawsHavingStddevSampleInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
  readonly blockheight: InputMaybe<HavingIntFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
};

export type WithdrawsHavingSumInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
  readonly blockheight: InputMaybe<HavingIntFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
};

export type WithdrawsHavingVariancePopulationInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
  readonly blockheight: InputMaybe<HavingIntFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
};

export type WithdrawsHavingVarianceSampleInput = {
  readonly amount: InputMaybe<HavingBigfloatFilter>;
  readonly blockheight: InputMaybe<HavingIntFilter>;
  readonly createAt: InputMaybe<HavingDatetimeFilter>;
};

/** Methods to use when ordering `Withdraw`. */
export enum WithdrawsOrderBy {
  AMOUNT_ASC = 'AMOUNT_ASC',
  AMOUNT_DESC = 'AMOUNT_DESC',
  BLOCKHEIGHT_ASC = 'BLOCKHEIGHT_ASC',
  BLOCKHEIGHT_DESC = 'BLOCKHEIGHT_DESC',
  CREATE_AT_ASC = 'CREATE_AT_ASC',
  CREATE_AT_DESC = 'CREATE_AT_DESC',
  ID_ASC = 'ID_ASC',
  ID_DESC = 'ID_DESC',
  NATURAL = 'NATURAL',
  PRIMARY_KEY_ASC = 'PRIMARY_KEY_ASC',
  PRIMARY_KEY_DESC = 'PRIMARY_KEY_DESC',
  SENDER_ASC = 'SENDER_ASC',
  SENDER_DESC = 'SENDER_DESC',
  TX_HASH_ASC = 'TX_HASH_ASC',
  TX_HASH_DESC = 'TX_HASH_DESC',
}

export type _Metadata = {
  readonly __typename: '_Metadata';
  readonly chain: Maybe<Scalars['String']['output']>;
  readonly dbSize: Maybe<Scalars['BigInt']['output']>;
  readonly deployments: Maybe<Scalars['JSON']['output']>;
  readonly dynamicDatasources: Maybe<ReadonlyArray<Maybe<Scalars['JSON']['output']>>>;
  readonly evmChainId: Maybe<Scalars['String']['output']>;
  readonly genesisHash: Maybe<Scalars['String']['output']>;
  readonly indexerHealthy: Maybe<Scalars['Boolean']['output']>;
  readonly indexerNodeVersion: Maybe<Scalars['String']['output']>;
  readonly lastCreatedPoiHeight: Maybe<Scalars['Int']['output']>;
  readonly lastFinalizedVerifiedHeight: Maybe<Scalars['Int']['output']>;
  readonly lastProcessedHeight: Maybe<Scalars['Int']['output']>;
  readonly lastProcessedTimestamp: Maybe<Scalars['Date']['output']>;
  readonly latestSyncedPoiHeight: Maybe<Scalars['Int']['output']>;
  readonly queryNodeVersion: Maybe<Scalars['String']['output']>;
  readonly rowCountEstimate: Maybe<ReadonlyArray<Maybe<TableEstimate>>>;
  readonly specName: Maybe<Scalars['String']['output']>;
  readonly startHeight: Maybe<Scalars['Int']['output']>;
  readonly targetHeight: Maybe<Scalars['Int']['output']>;
  readonly unfinalizedBlocks: Maybe<Scalars['String']['output']>;
};

export type _Metadatas = {
  readonly __typename: '_Metadatas';
  readonly nodes: ReadonlyArray<Maybe<_Metadata>>;
  readonly totalCount: Scalars['Int']['output'];
};

export type _MetadatasEdge = {
  readonly __typename: '_MetadatasEdge';
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  readonly node: Maybe<_Metadata>;
};

export type _Poi = Node & {
  readonly __typename: '_Poi';
  readonly chainBlockHash: Maybe<Scalars['String']['output']>;
  readonly createdAt: Scalars['Datetime']['output'];
  readonly hash: Maybe<Scalars['String']['output']>;
  readonly id: Scalars['Int']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  readonly nodeId: Scalars['ID']['output'];
  readonly operationHashRoot: Maybe<Scalars['String']['output']>;
  readonly parentHash: Maybe<Scalars['String']['output']>;
  readonly updatedAt: Scalars['Datetime']['output'];
};

export type _PoiAggregates = {
  readonly __typename: '_PoiAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly average: Maybe<_PoiAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly distinctCount: Maybe<_PoiDistinctCountAggregates>;
  readonly keys: Maybe<ReadonlyArray<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly max: Maybe<_PoiMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly min: Maybe<_PoiMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevPopulation: Maybe<_PoiStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly stddevSample: Maybe<_PoiStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly sum: Maybe<_PoiSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly variancePopulation: Maybe<_PoiVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly varianceSample: Maybe<_PoiVarianceSampleAggregates>;
};

export type _PoiAverageAggregates = {
  readonly __typename: '_PoiAverageAggregates';
  /** Mean average of id across the matching connection */
  readonly id: Maybe<Scalars['BigFloat']['output']>;
};

export type _PoiDistinctCountAggregates = {
  readonly __typename: '_PoiDistinctCountAggregates';
  /** Distinct count of chainBlockHash across the matching connection */
  readonly chainBlockHash: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createdAt across the matching connection */
  readonly createdAt: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of hash across the matching connection */
  readonly hash: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  readonly id: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of operationHashRoot across the matching connection */
  readonly operationHashRoot: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of parentHash across the matching connection */
  readonly parentHash: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of updatedAt across the matching connection */
  readonly updatedAt: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `_Poi` object types. All fields are combined with a logical ‘and.’ */
export type _PoiFilter = {
  /** Checks for all expressions in this list. */
  readonly and: InputMaybe<ReadonlyArray<_PoiFilter>>;
  /** Filter by the object’s `createdAt` field. */
  readonly createdAt: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `id` field. */
  readonly id: InputMaybe<IntFilter>;
  /** Negates the expression. */
  readonly not: InputMaybe<_PoiFilter>;
  /** Checks for any expressions in this list. */
  readonly or: InputMaybe<ReadonlyArray<_PoiFilter>>;
  /** Filter by the object’s `updatedAt` field. */
  readonly updatedAt: InputMaybe<DatetimeFilter>;
};

/** Grouping methods for `_Poi` for usage during aggregation. */
export enum _PoiGroupBy {
  CREATED_AT = 'CREATED_AT',
  CREATED_AT_TRUNCATED_TO_DAY = 'CREATED_AT_TRUNCATED_TO_DAY',
  CREATED_AT_TRUNCATED_TO_HOUR = 'CREATED_AT_TRUNCATED_TO_HOUR',
  OPERATION_HASH_ROOT = 'OPERATION_HASH_ROOT',
  UPDATED_AT = 'UPDATED_AT',
  UPDATED_AT_TRUNCATED_TO_DAY = 'UPDATED_AT_TRUNCATED_TO_DAY',
  UPDATED_AT_TRUNCATED_TO_HOUR = 'UPDATED_AT_TRUNCATED_TO_HOUR',
}

export type _PoiHavingAverageInput = {
  readonly createdAt: InputMaybe<HavingDatetimeFilter>;
  readonly id: InputMaybe<HavingIntFilter>;
  readonly updatedAt: InputMaybe<HavingDatetimeFilter>;
};

export type _PoiHavingDistinctCountInput = {
  readonly createdAt: InputMaybe<HavingDatetimeFilter>;
  readonly id: InputMaybe<HavingIntFilter>;
  readonly updatedAt: InputMaybe<HavingDatetimeFilter>;
};

/** Conditions for `_Poi` aggregates. */
export type _PoiHavingInput = {
  readonly AND: InputMaybe<ReadonlyArray<_PoiHavingInput>>;
  readonly OR: InputMaybe<ReadonlyArray<_PoiHavingInput>>;
  readonly average: InputMaybe<_PoiHavingAverageInput>;
  readonly distinctCount: InputMaybe<_PoiHavingDistinctCountInput>;
  readonly max: InputMaybe<_PoiHavingMaxInput>;
  readonly min: InputMaybe<_PoiHavingMinInput>;
  readonly stddevPopulation: InputMaybe<_PoiHavingStddevPopulationInput>;
  readonly stddevSample: InputMaybe<_PoiHavingStddevSampleInput>;
  readonly sum: InputMaybe<_PoiHavingSumInput>;
  readonly variancePopulation: InputMaybe<_PoiHavingVariancePopulationInput>;
  readonly varianceSample: InputMaybe<_PoiHavingVarianceSampleInput>;
};

export type _PoiHavingMaxInput = {
  readonly createdAt: InputMaybe<HavingDatetimeFilter>;
  readonly id: InputMaybe<HavingIntFilter>;
  readonly updatedAt: InputMaybe<HavingDatetimeFilter>;
};

export type _PoiHavingMinInput = {
  readonly createdAt: InputMaybe<HavingDatetimeFilter>;
  readonly id: InputMaybe<HavingIntFilter>;
  readonly updatedAt: InputMaybe<HavingDatetimeFilter>;
};

export type _PoiHavingStddevPopulationInput = {
  readonly createdAt: InputMaybe<HavingDatetimeFilter>;
  readonly id: InputMaybe<HavingIntFilter>;
  readonly updatedAt: InputMaybe<HavingDatetimeFilter>;
};

export type _PoiHavingStddevSampleInput = {
  readonly createdAt: InputMaybe<HavingDatetimeFilter>;
  readonly id: InputMaybe<HavingIntFilter>;
  readonly updatedAt: InputMaybe<HavingDatetimeFilter>;
};

export type _PoiHavingSumInput = {
  readonly createdAt: InputMaybe<HavingDatetimeFilter>;
  readonly id: InputMaybe<HavingIntFilter>;
  readonly updatedAt: InputMaybe<HavingDatetimeFilter>;
};

export type _PoiHavingVariancePopulationInput = {
  readonly createdAt: InputMaybe<HavingDatetimeFilter>;
  readonly id: InputMaybe<HavingIntFilter>;
  readonly updatedAt: InputMaybe<HavingDatetimeFilter>;
};

export type _PoiHavingVarianceSampleInput = {
  readonly createdAt: InputMaybe<HavingDatetimeFilter>;
  readonly id: InputMaybe<HavingIntFilter>;
  readonly updatedAt: InputMaybe<HavingDatetimeFilter>;
};

export type _PoiMaxAggregates = {
  readonly __typename: '_PoiMaxAggregates';
  /** Maximum of id across the matching connection */
  readonly id: Maybe<Scalars['Int']['output']>;
};

export type _PoiMinAggregates = {
  readonly __typename: '_PoiMinAggregates';
  /** Minimum of id across the matching connection */
  readonly id: Maybe<Scalars['Int']['output']>;
};

export type _PoiStddevPopulationAggregates = {
  readonly __typename: '_PoiStddevPopulationAggregates';
  /** Population standard deviation of id across the matching connection */
  readonly id: Maybe<Scalars['BigFloat']['output']>;
};

export type _PoiStddevSampleAggregates = {
  readonly __typename: '_PoiStddevSampleAggregates';
  /** Sample standard deviation of id across the matching connection */
  readonly id: Maybe<Scalars['BigFloat']['output']>;
};

export type _PoiSumAggregates = {
  readonly __typename: '_PoiSumAggregates';
  /** Sum of id across the matching connection */
  readonly id: Scalars['BigInt']['output'];
};

export type _PoiVariancePopulationAggregates = {
  readonly __typename: '_PoiVariancePopulationAggregates';
  /** Population variance of id across the matching connection */
  readonly id: Maybe<Scalars['BigFloat']['output']>;
};

export type _PoiVarianceSampleAggregates = {
  readonly __typename: '_PoiVarianceSampleAggregates';
  /** Sample variance of id across the matching connection */
  readonly id: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `_Poi` values. */
export type _PoisConnection = {
  readonly __typename: '_PoisConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly aggregates: Maybe<_PoiAggregates>;
  /** A list of edges which contains the `_Poi` and cursor to aid in pagination. */
  readonly edges: ReadonlyArray<_PoisEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  readonly groupedAggregates: Maybe<ReadonlyArray<_PoiAggregates>>;
  /** A list of `_Poi` objects. */
  readonly nodes: ReadonlyArray<Maybe<_Poi>>;
  /** Information to aid in pagination. */
  readonly pageInfo: PageInfo;
  /** The count of *all* `_Poi` you could get from the connection. */
  readonly totalCount: Scalars['Int']['output'];
};

/** A connection to a list of `_Poi` values. */
export type _PoisConnectionGroupedAggregatesArgs = {
  groupBy: ReadonlyArray<_PoiGroupBy>;
  having: InputMaybe<_PoiHavingInput>;
};

/** A `_Poi` edge in the connection. */
export type _PoisEdge = {
  readonly __typename: '_PoisEdge';
  /** A cursor for use in pagination. */
  readonly cursor: Maybe<Scalars['Cursor']['output']>;
  /** The `_Poi` at the end of the edge. */
  readonly node: Maybe<_Poi>;
};

/** Methods to use when ordering `_Poi`. */
export enum _PoisOrderBy {
  CHAIN_BLOCK_HASH_ASC = 'CHAIN_BLOCK_HASH_ASC',
  CHAIN_BLOCK_HASH_DESC = 'CHAIN_BLOCK_HASH_DESC',
  CREATED_AT_ASC = 'CREATED_AT_ASC',
  CREATED_AT_DESC = 'CREATED_AT_DESC',
  HASH_ASC = 'HASH_ASC',
  HASH_DESC = 'HASH_DESC',
  ID_ASC = 'ID_ASC',
  ID_DESC = 'ID_DESC',
  NATURAL = 'NATURAL',
  OPERATION_HASH_ROOT_ASC = 'OPERATION_HASH_ROOT_ASC',
  OPERATION_HASH_ROOT_DESC = 'OPERATION_HASH_ROOT_DESC',
  PARENT_HASH_ASC = 'PARENT_HASH_ASC',
  PARENT_HASH_DESC = 'PARENT_HASH_DESC',
  PRIMARY_KEY_ASC = 'PRIMARY_KEY_ASC',
  PRIMARY_KEY_DESC = 'PRIMARY_KEY_DESC',
  UPDATED_AT_ASC = 'UPDATED_AT_ASC',
  UPDATED_AT_DESC = 'UPDATED_AT_DESC',
}

export enum _Poi_Distinct_Enum {
  CHAINBLOCKHASH = 'CHAINBLOCKHASH',
  CREATEDAT = 'CREATEDAT',
  HASH = 'HASH',
  ID = 'ID',
  OPERATIONHASHROOT = 'OPERATIONHASHROOT',
  PARENTHASH = 'PARENTHASH',
  UPDATEDAT = 'UPDATEDAT',
}

export enum Accepted_Offers_Distinct_Enum {
  CREATED_BLOCK = 'CREATED_BLOCK',
  ID = 'ID',
  INDEXER_ID = 'INDEXER_ID',
  LAST_EVENT = 'LAST_EVENT',
  OFFER_ID = 'OFFER_ID',
  SERVICE_AGREEMENT_ID = 'SERVICE_AGREEMENT_ID',
}

export enum Airdrop_Amounts_Distinct_Enum {
  CLAIMED_AMOUNT = 'CLAIMED_AMOUNT',
  CREATE_AT = 'CREATE_AT',
  ID = 'ID',
  TOTAL_AIRDROP_AMOUNT = 'TOTAL_AIRDROP_AMOUNT',
  UPDATE_AT = 'UPDATE_AT',
}

export enum Airdrop_Users_Distinct_Enum {
  AIRDROP_ID = 'AIRDROP_ID',
  AMOUNT = 'AMOUNT',
  CREATE_AT = 'CREATE_AT',
  ID = 'ID',
  STATUS = 'STATUS',
  UPDATE_AT = 'UPDATE_AT',
  USER = 'USER',
}

export enum Airdrops_Distinct_Enum {
  CREATE_AT = 'CREATE_AT',
  END_TIME = 'END_TIME',
  HAS_WITHDRAWN = 'HAS_WITHDRAWN',
  ID = 'ID',
  START_TIME = 'START_TIME',
  TOKEN_ADDRESS = 'TOKEN_ADDRESS',
  UPDATE_AT = 'UPDATE_AT',
  WITHDRAW_AMOUNT = 'WITHDRAW_AMOUNT',
}

export enum Caches_Distinct_Enum {
  ID = 'ID',
  VALUE = 'VALUE',
}

export enum Consumer_Controllers_Distinct_Enum {
  CONSUMER = 'CONSUMER',
  CONTROLLER = 'CONTROLLER',
  CREATED_BLOCK = 'CREATED_BLOCK',
  ID = 'ID',
  LAST_EVENT = 'LAST_EVENT',
}

export enum Consumer_Query_Reward_Summaries_Distinct_Enum {
  CONSUMER = 'CONSUMER',
  CREATE_AT = 'CREATE_AT',
  DEPLOYMENT_ID = 'DEPLOYMENT_ID',
  ID = 'ID',
  ORDER_TYPE = 'ORDER_TYPE',
  PROJECT_ID = 'PROJECT_ID',
  TOTAL_REFUNDED = 'TOTAL_REFUNDED',
  TOTAL_SPENT = 'TOTAL_SPENT',
  UPDATE_AT = 'UPDATE_AT',
}

export enum Consumer_Query_Rewards_Distinct_Enum {
  CONSUMER = 'CONSUMER',
  CREATE_AT = 'CREATE_AT',
  DEPLOYMENT_ID = 'DEPLOYMENT_ID',
  ID = 'ID',
  ORDER_ID = 'ORDER_ID',
  ORDER_TYPE = 'ORDER_TYPE',
  PROJECT_ID = 'PROJECT_ID',
  REFUNDED = 'REFUNDED',
  SPENT = 'SPENT',
  UPDATE_AT = 'UPDATE_AT',
}

export enum Controllers_Distinct_Enum {
  CONTROLLER = 'CONTROLLER',
  CREATED_BLOCK = 'CREATED_BLOCK',
  ID = 'ID',
  INDEXER_ID = 'INDEXER_ID',
  IS_ACTIVE = 'IS_ACTIVE',
  LAST_EVENT = 'LAST_EVENT',
}

export enum Delegations_Distinct_Enum {
  AMOUNT = 'AMOUNT',
  CREATED_BLOCK = 'CREATED_BLOCK',
  DELEGATOR_ID = 'DELEGATOR_ID',
  EXIT_ERA = 'EXIT_ERA',
  ID = 'ID',
  INDEXER_ID = 'INDEXER_ID',
  LAST_EVENT = 'LAST_EVENT',
}

export enum Delegators_Distinct_Enum {
  CREATED_BLOCK = 'CREATED_BLOCK',
  EXIT_ERA = 'EXIT_ERA',
  ID = 'ID',
  LAST_EVENT = 'LAST_EVENT',
  START_ERA = 'START_ERA',
  TOTAL_DELEGATIONS = 'TOTAL_DELEGATIONS',
}

export enum Deployment_Booster_Summaries_Distinct_Enum {
  CONSUMER = 'CONSUMER',
  CREATE_AT = 'CREATE_AT',
  DEPLOYMENT_ID = 'DEPLOYMENT_ID',
  ID = 'ID',
  PROJECT_ID = 'PROJECT_ID',
  TOTAL_ADDED = 'TOTAL_ADDED',
  TOTAL_AMOUNT = 'TOTAL_AMOUNT',
  TOTAL_REMOVED = 'TOTAL_REMOVED',
  UPDATE_AT = 'UPDATE_AT',
}

export enum Deployment_Boosters_Distinct_Enum {
  AMOUNT_ADDED = 'AMOUNT_ADDED',
  AMOUNT_REMOVED = 'AMOUNT_REMOVED',
  CONSUMER = 'CONSUMER',
  CREATE_AT = 'CREATE_AT',
  DEPLOYMENT_ID = 'DEPLOYMENT_ID',
  ERA_IDX = 'ERA_IDX',
  ID = 'ID',
  PROJECT_ID = 'PROJECT_ID',
}

export enum Deployments_Distinct_Enum {
  CREATED_BLOCK = 'CREATED_BLOCK',
  CREATED_TIMESTAMP = 'CREATED_TIMESTAMP',
  ID = 'ID',
  LAST_EVENT = 'LAST_EVENT',
  METADATA = 'METADATA',
  PROJECT_ID = 'PROJECT_ID',
}

export enum Disputes_Distinct_Enum {
  DISPUTE_TYPE = 'DISPUTE_TYPE',
  FISHERMAN = 'FISHERMAN',
  ID = 'ID',
  IS_FINALIZED = 'IS_FINALIZED',
  RETURN_AMOUNT = 'RETURN_AMOUNT',
  RUNNER = 'RUNNER',
  SLASH_AMOUNT = 'SLASH_AMOUNT',
  STATE = 'STATE',
}

export enum Era_Delegator_Apies_Distinct_Enum {
  APY = 'APY',
  CREATE_AT = 'CREATE_AT',
  DELEGATOR_ID = 'DELEGATOR_ID',
  ERA_IDX = 'ERA_IDX',
  ID = 'ID',
  REWARD = 'REWARD',
  UPDATE_AT = 'UPDATE_AT',
}

export enum Era_Delegator_Indexer_Apies_Distinct_Enum {
  APY = 'APY',
  CREATE_AT = 'CREATE_AT',
  DELEGATOR_ID = 'DELEGATOR_ID',
  ERA_IDX = 'ERA_IDX',
  ID = 'ID',
  INDEXER_ID = 'INDEXER_ID',
  REWARD = 'REWARD',
  STAKE = 'STAKE',
  UPDATE_AT = 'UPDATE_AT',
}

export enum Era_Delegator_Indexers_Distinct_Enum {
  DELEGATOR = 'DELEGATOR',
  ERA = 'ERA',
  ID = 'ID',
  INDEXERS = 'INDEXERS',
  SELF_STAKE = 'SELF_STAKE',
  TOTAL_STAKE = 'TOTAL_STAKE',
}

export enum Era_Deployment_Rewards_Distinct_Enum {
  AGREEMENT_REWARDS = 'AGREEMENT_REWARDS',
  ALLOCATION_REWARDS = 'ALLOCATION_REWARDS',
  CHANGES_HEIGHT = 'CHANGES_HEIGHT',
  DEPLOYMENT_ID = 'DEPLOYMENT_ID',
  ERA_IDX = 'ERA_IDX',
  ID = 'ID',
  QUERY_REWARDS = 'QUERY_REWARDS',
  STATE_CHANNEL_REWARDS = 'STATE_CHANNEL_REWARDS',
  TOTAL_REWARDS = 'TOTAL_REWARDS',
}

export enum Era_Indexer_Apies_Distinct_Enum {
  CREATE_AT = 'CREATE_AT',
  DELEGATOR_APY = 'DELEGATOR_APY',
  DELEGATOR_REWARD = 'DELEGATOR_REWARD',
  ERA_IDX = 'ERA_IDX',
  ID = 'ID',
  INDEXER_APY = 'INDEXER_APY',
  INDEXER_ID = 'INDEXER_ID',
  INDEXER_REWARD = 'INDEXER_REWARD',
  UPDATE_AT = 'UPDATE_AT',
}

export enum Era_Indexer_Delegators_Distinct_Enum {
  DELEGATORS = 'DELEGATORS',
  ERA = 'ERA',
  ID = 'ID',
  INDEXER = 'INDEXER',
  SELF_STAKE = 'SELF_STAKE',
  TOTAL_STAKE = 'TOTAL_STAKE',
}

export enum Era_Indexer_Deployment_Apies_Distinct_Enum {
  AGREEMENT_REWARD = 'AGREEMENT_REWARD',
  ALLOCATION_REWARD = 'ALLOCATION_REWARD',
  APY = 'APY',
  APY_CALC_ADDED = 'APY_CALC_ADDED',
  APY_CALC_ALLOCATION = 'APY_CALC_ALLOCATION',
  APY_CALC_ALLOCATION_RECORD_AT = 'APY_CALC_ALLOCATION_RECORD_AT',
  APY_CALC_HISTORY = 'APY_CALC_HISTORY',
  APY_CALC_REMOVAL = 'APY_CALC_REMOVAL',
  CREATE_AT = 'CREATE_AT',
  DEPLOYMENT_ID = 'DEPLOYMENT_ID',
  ERA_IDX = 'ERA_IDX',
  FLEX_PLAN_REWARD = 'FLEX_PLAN_REWARD',
  ID = 'ID',
  INDEXER_ID = 'INDEXER_ID',
  UPDATE_AT = 'UPDATE_AT',
}

export enum Era_Reward_Claimeds_Distinct_Enum {
  ID = 'ID',
  LAST_CLAIMED_ERA = 'LAST_CLAIMED_ERA',
}

export enum Era_Rewards_Distinct_Enum {
  AMOUNT = 'AMOUNT',
  CLAIMED = 'CLAIMED',
  CREATED_BLOCK = 'CREATED_BLOCK',
  CREATED_TIMESTAMP = 'CREATED_TIMESTAMP',
  DELEGATOR_ID = 'DELEGATOR_ID',
  ERA_ID = 'ERA_ID',
  ERA_IDX = 'ERA_IDX',
  ID = 'ID',
  INDEXER_ID = 'INDEXER_ID',
  IS_COMMISSION = 'IS_COMMISSION',
  IS_INDEXER = 'IS_INDEXER',
}

export enum Era_Stake_Updates_Distinct_Enum {
  ID = 'ID',
  LAST_UPDATE_ERA_ID = 'LAST_UPDATE_ERA_ID',
}

export enum Era_Stakes_Distinct_Enum {
  DELEGATOR_ID = 'DELEGATOR_ID',
  ERA_ID = 'ERA_ID',
  ERA_IDX = 'ERA_IDX',
  ID = 'ID',
  INDEXER_ID = 'INDEXER_ID',
  STAKE = 'STAKE',
}

export enum Eras_Distinct_Enum {
  CREATED_BLOCK = 'CREATED_BLOCK',
  END_TIME = 'END_TIME',
  ERA_PERIOD = 'ERA_PERIOD',
  FORCE_NEXT = 'FORCE_NEXT',
  ID = 'ID',
  LAST_EVENT = 'LAST_EVENT',
  START_TIME = 'START_TIME',
}

export enum Exceptions_Distinct_Enum {
  ERROR = 'ERROR',
  HANDLER = 'HANDLER',
  ID = 'ID',
}

export enum Indexer_Allocation_Overflows_Distinct_Enum {
  CREATE_AT = 'CREATE_AT',
  ERA_IDX_END = 'ERA_IDX_END',
  ERA_IDX_START = 'ERA_IDX_START',
  ID = 'ID',
  INDEXER_ID = 'INDEXER_ID',
  OVERFLOW_END = 'OVERFLOW_END',
  OVERFLOW_START = 'OVERFLOW_START',
  OVERFLOW_TIME = 'OVERFLOW_TIME',
  UPDATE_AT = 'UPDATE_AT',
}

export enum Indexer_Allocation_Reward_Summaries_Distinct_Enum {
  CREATE_AT = 'CREATE_AT',
  DEPLOYMENT_ID = 'DEPLOYMENT_ID',
  ID = 'ID',
  INDEXER_ID = 'INDEXER_ID',
  PROJECT_ID = 'PROJECT_ID',
  TOTAL_BURNT = 'TOTAL_BURNT',
  TOTAL_REWARD = 'TOTAL_REWARD',
  UPDATE_AT = 'UPDATE_AT',
}

export enum Indexer_Allocation_Rewards_Distinct_Enum {
  BURNT = 'BURNT',
  CREATE_AT = 'CREATE_AT',
  DEPLOYMENT_ID = 'DEPLOYMENT_ID',
  ERA_IDX = 'ERA_IDX',
  ID = 'ID',
  INDEXER_ID = 'INDEXER_ID',
  PROJECT_ID = 'PROJECT_ID',
  REWARD = 'REWARD',
}

export enum Indexer_Allocation_Summaries_Distinct_Enum {
  CREATE_AT = 'CREATE_AT',
  DEPLOYMENT_ID = 'DEPLOYMENT_ID',
  ID = 'ID',
  INDEXER_ID = 'INDEXER_ID',
  PROJECT_ID = 'PROJECT_ID',
  TOTAL_ADDED = 'TOTAL_ADDED',
  TOTAL_AMOUNT = 'TOTAL_AMOUNT',
  TOTAL_REMOVED = 'TOTAL_REMOVED',
  UPDATE_AT = 'UPDATE_AT',
}

export enum Indexer_Allocations_Distinct_Enum {
  AMOUNT_ADDED = 'AMOUNT_ADDED',
  AMOUNT_REMOVED = 'AMOUNT_REMOVED',
  CREATE_AT = 'CREATE_AT',
  DEPLOYMENT_ID = 'DEPLOYMENT_ID',
  ERA_IDX = 'ERA_IDX',
  ID = 'ID',
  INDEXER_ID = 'INDEXER_ID',
  PROJECT_ID = 'PROJECT_ID',
}

export enum Indexer_Apy_Summaries_Distinct_Enum {
  CREATE_AT = 'CREATE_AT',
  DELEGATOR_APY = 'DELEGATOR_APY',
  DELEGATOR_REWARD = 'DELEGATOR_REWARD',
  ERA_IDX = 'ERA_IDX',
  ID = 'ID',
  INDEXER_APY = 'INDEXER_APY',
  INDEXER_ID = 'INDEXER_ID',
  INDEXER_REWARD = 'INDEXER_REWARD',
  UPDATE_AT = 'UPDATE_AT',
}

export enum Indexer_Commission_Rates_Distinct_Enum {
  COMMISSION_RATE = 'COMMISSION_RATE',
  ERA_ID = 'ERA_ID',
  ERA_IDX = 'ERA_IDX',
  ID = 'ID',
  INDEXER_ID = 'INDEXER_ID',
}

export enum Indexer_Deployments_Distinct_Enum {
  CREATED_BLOCK = 'CREATED_BLOCK',
  DEPLOYMENT_ID = 'DEPLOYMENT_ID',
  ID = 'ID',
  INDEXER_ID = 'INDEXER_ID',
  LAST_EVENT = 'LAST_EVENT',
  STATUS = 'STATUS',
  TIMESTAMP = 'TIMESTAMP',
}

export enum Indexer_Era_Deployment_Rewards_Distinct_Enum {
  AGREEMENT_REWARDS = 'AGREEMENT_REWARDS',
  ALLOCATION_REWARDS = 'ALLOCATION_REWARDS',
  CHANGES_HEIGHT = 'CHANGES_HEIGHT',
  DEPLOYMENT_ID = 'DEPLOYMENT_ID',
  ERA_IDX = 'ERA_IDX',
  ID = 'ID',
  INDEXER_ID = 'INDEXER_ID',
  QUERY_REWARDS = 'QUERY_REWARDS',
  STATE_CHANNEL_REWARDS = 'STATE_CHANNEL_REWARDS',
  TOTAL_REWARDS = 'TOTAL_REWARDS',
}

export enum Indexer_Labor_Histories_Distinct_Enum {
  AMOUNT = 'AMOUNT',
  CREATE_AT = 'CREATE_AT',
  DEPLOYMENT_ID = 'DEPLOYMENT_ID',
  ERA_IDX = 'ERA_IDX',
  ID = 'ID',
  INDEXER_ID = 'INDEXER_ID',
}

export enum Indexer_Latest_Allocation_Overflows_Distinct_Enum {
  CREATE_AT = 'CREATE_AT',
  ID = 'ID',
  OVERFLOW_ID_ID = 'OVERFLOW_ID_ID',
  UPDATE_AT = 'UPDATE_AT',
}

export enum Indexer_Missed_Labors_Distinct_Enum {
  CREATE_AT = 'CREATE_AT',
  DEPLOYMENT_ID = 'DEPLOYMENT_ID',
  ERA_IDX = 'ERA_IDX',
  ID = 'ID',
  INDEXER_ID = 'INDEXER_ID',
  MISSED_LABOR = 'MISSED_LABOR',
}

export enum Indexer_Rewards_Distinct_Enum {
  AMOUNT = 'AMOUNT',
  CREATED_BLOCK = 'CREATED_BLOCK',
  ERA_ID = 'ERA_ID',
  ERA_IDX = 'ERA_IDX',
  ID = 'ID',
  INDEXER_ID = 'INDEXER_ID',
  LAST_EVENT = 'LAST_EVENT',
}

export enum Indexer_Stake_Summaries_Distinct_Enum {
  DELEGATOR_STAKE = 'DELEGATOR_STAKE',
  ERA_ID = 'ERA_ID',
  ERA_IDX = 'ERA_IDX',
  ID = 'ID',
  INDEXER_STAKE = 'INDEXER_STAKE',
  NEXT_DELEGATOR_STAKE = 'NEXT_DELEGATOR_STAKE',
  NEXT_INDEXER_STAKE = 'NEXT_INDEXER_STAKE',
  NEXT_TOTAL_STAKE = 'NEXT_TOTAL_STAKE',
  TOTAL_STAKE = 'TOTAL_STAKE',
}

export enum Indexer_Stake_Weights_Distinct_Enum {
  CREATE_AT = 'CREATE_AT',
  ERA_IDX = 'ERA_IDX',
  ID = 'ID',
  INDEXER_ID = 'INDEXER_ID',
  UPDATE_AT = 'UPDATE_AT',
  WEIGHT = 'WEIGHT',
}

export enum Indexer_Stakes_Distinct_Enum {
  DELEGATOR_STAKE = 'DELEGATOR_STAKE',
  ERA_ID = 'ERA_ID',
  ERA_IDX = 'ERA_IDX',
  ID = 'ID',
  INDEXER_ID = 'INDEXER_ID',
  INDEXER_STAKE = 'INDEXER_STAKE',
  TOTAL_STAKE = 'TOTAL_STAKE',
}

export enum Indexers_Distinct_Enum {
  ACTIVE = 'ACTIVE',
  CAPACITY = 'CAPACITY',
  COMMISSION = 'COMMISSION',
  CONTROLLER = 'CONTROLLER',
  CREATED_BLOCK = 'CREATED_BLOCK',
  ID = 'ID',
  LAST_CLAIM_ERA = 'LAST_CLAIM_ERA',
  LAST_EVENT = 'LAST_EVENT',
  LAST_SETTLED_ERA = 'LAST_SETTLED_ERA',
  MAX_UNSTAKE_AMOUNT = 'MAX_UNSTAKE_AMOUNT',
  METADATA = 'METADATA',
  SELF_STAKE = 'SELF_STAKE',
  TOTAL_STAKE = 'TOTAL_STAKE',
}

export enum Offers_Distinct_Enum {
  ACCEPTED = 'ACCEPTED',
  CONSUMER = 'CONSUMER',
  CREATED_BLOCK = 'CREATED_BLOCK',
  DEPLOYMENT_ID = 'DEPLOYMENT_ID',
  DEPOSIT = 'DEPOSIT',
  EXPIRE_DATE = 'EXPIRE_DATE',
  ID = 'ID',
  LAST_EVENT = 'LAST_EVENT',
  LIMIT = 'LIMIT',
  MINIMUM_ACCEPT_HEIGHT = 'MINIMUM_ACCEPT_HEIGHT',
  MINIMUM_STAKING_AMOUNT = 'MINIMUM_STAKING_AMOUNT',
  PLAN_TEMPLATE_ID = 'PLAN_TEMPLATE_ID',
  REACH_LIMIT = 'REACH_LIMIT',
  WITHDRAWN = 'WITHDRAWN',
  WITHDRAW_PENALTY = 'WITHDRAW_PENALTY',
}

export enum Orders_Distinct_Enum {
  AMOUNT_GET = 'AMOUNT_GET',
  AMOUNT_GIVE = 'AMOUNT_GIVE',
  CREATE_AT = 'CREATE_AT',
  ID = 'ID',
  SENDER = 'SENDER',
  STATUS = 'STATUS',
  TOKEN_GET = 'TOKEN_GET',
  TOKEN_GIVE = 'TOKEN_GIVE',
  TOKEN_GIVE_BALANCE = 'TOKEN_GIVE_BALANCE',
  UPDATE_AT = 'UPDATE_AT',
}

export enum Plan_Templates_Distinct_Enum {
  ACTIVE = 'ACTIVE',
  CREATED_BLOCK = 'CREATED_BLOCK',
  DAILY_REQ_CAP = 'DAILY_REQ_CAP',
  ID = 'ID',
  LAST_EVENT = 'LAST_EVENT',
  METADATA = 'METADATA',
  PERIOD = 'PERIOD',
  PRICE_TOKEN = 'PRICE_TOKEN',
  RATE_LIMIT = 'RATE_LIMIT',
}

export enum Plans_Distinct_Enum {
  ACTIVE = 'ACTIVE',
  CREATED_BLOCK = 'CREATED_BLOCK',
  CREATOR = 'CREATOR',
  DEPLOYMENT_ID = 'DEPLOYMENT_ID',
  ID = 'ID',
  LAST_EVENT = 'LAST_EVENT',
  PLAN_TEMPLATE_ID = 'PLAN_TEMPLATE_ID',
  PRICE = 'PRICE',
}

export enum Price_Oracles_Distinct_Enum {
  AFTER_PRICE = 'AFTER_PRICE',
  BEFORE_PRICE = 'BEFORE_PRICE',
  CREATED_BLOCK = 'CREATED_BLOCK',
  FROM_TOKEN = 'FROM_TOKEN',
  ID = 'ID',
  TO_TOKEN = 'TO_TOKEN',
}

export enum Projects_Distinct_Enum {
  BOOST_ALLOCATION_RATIO = 'BOOST_ALLOCATION_RATIO',
  CREATED_BLOCK = 'CREATED_BLOCK',
  CREATED_TIMESTAMP = 'CREATED_TIMESTAMP',
  DEPLOYMENT_ID = 'DEPLOYMENT_ID',
  DEPLOYMENT_METADATA = 'DEPLOYMENT_METADATA',
  ID = 'ID',
  LAST_EVENT = 'LAST_EVENT',
  METADATA = 'METADATA',
  OWNER = 'OWNER',
  TOTAL_ALLOCATION = 'TOTAL_ALLOCATION',
  TOTAL_BOOST = 'TOTAL_BOOST',
  TOTAL_REWARD = 'TOTAL_REWARD',
  TYPE = 'TYPE',
  UPDATED_TIMESTAMP = 'UPDATED_TIMESTAMP',
}

export enum Rewards_Distinct_Enum {
  AMOUNT = 'AMOUNT',
  CLAIMED_TIME = 'CLAIMED_TIME',
  CREATED_BLOCK = 'CREATED_BLOCK',
  DELEGATOR_ADDRESS = 'DELEGATOR_ADDRESS',
  DELEGATOR_ID = 'DELEGATOR_ID',
  ID = 'ID',
  INDEXER_ADDRESS = 'INDEXER_ADDRESS',
  LAST_EVENT = 'LAST_EVENT',
}

export enum Service_Agreements_Distinct_Enum {
  CONSUMER_ADDRESS = 'CONSUMER_ADDRESS',
  CREATED_BLOCK = 'CREATED_BLOCK',
  DEPLOYMENT_ID = 'DEPLOYMENT_ID',
  END_TIME = 'END_TIME',
  ID = 'ID',
  INDEXER_ADDRESS = 'INDEXER_ADDRESS',
  LAST_EVENT = 'LAST_EVENT',
  LOCKED_AMOUNT = 'LOCKED_AMOUNT',
  PERIOD = 'PERIOD',
  PLAN_TEMPLATE_ID = 'PLAN_TEMPLATE_ID',
  START_TIME = 'START_TIME',
}

export enum Sqtokens_Distinct_Enum {
  CIRCULATING_SUPPLY = 'CIRCULATING_SUPPLY',
  ID = 'ID',
  TOTAL_SUPPLY = 'TOTAL_SUPPLY',
}

export enum State_Channels_Distinct_Enum {
  AGENT = 'AGENT',
  CONSUMER = 'CONSUMER',
  DEPLOYMENT_ID = 'DEPLOYMENT_ID',
  EXPIRED_AT = 'EXPIRED_AT',
  ID = 'ID',
  INDEXER = 'INDEXER',
  IS_FINAL = 'IS_FINAL',
  LAST_EVENT = 'LAST_EVENT',
  PRICE = 'PRICE',
  REAL_TOTAL = 'REAL_TOTAL',
  SPENT = 'SPENT',
  START_TIME = 'START_TIME',
  STATUS = 'STATUS',
  TERMINATED_AT = 'TERMINATED_AT',
  TERMINATE_BY_INDEXER = 'TERMINATE_BY_INDEXER',
  TOTAL = 'TOTAL',
}

export enum Token_Holders_Distinct_Enum {
  BALANCE = 'BALANCE',
  ID = 'ID',
  TOKEN_ID = 'TOKEN_ID',
}

export enum Total_Locks_Distinct_Enum {
  CREATED_BLOCK = 'CREATED_BLOCK',
  ID = 'ID',
  LAST_EVENT = 'LAST_EVENT',
  TOTAL_DELEGATION = 'TOTAL_DELEGATION',
  TOTAL_STAKE = 'TOTAL_STAKE',
}

export enum Transfers_Distinct_Enum {
  AMOUNT = 'AMOUNT',
  BLOCKHEIGHT = 'BLOCKHEIGHT',
  FROM = 'FROM',
  ID = 'ID',
  TIMESTAMP = 'TIMESTAMP',
  TO = 'TO',
  TX_HASH = 'TX_HASH',
}

export enum Unclaimed_Rewards_Distinct_Enum {
  AMOUNT = 'AMOUNT',
  CREATED_BLOCK = 'CREATED_BLOCK',
  DELEGATOR_ADDRESS = 'DELEGATOR_ADDRESS',
  DELEGATOR_ID = 'DELEGATOR_ID',
  ID = 'ID',
  INDEXER_ADDRESS = 'INDEXER_ADDRESS',
  LAST_EVENT = 'LAST_EVENT',
}

export enum Withdrawls_Distinct_Enum {
  AMOUNT = 'AMOUNT',
  CREATED_BLOCK = 'CREATED_BLOCK',
  DELEGATOR = 'DELEGATOR',
  ID = 'ID',
  INDEX = 'INDEX',
  INDEXER = 'INDEXER',
  LAST_EVENT = 'LAST_EVENT',
  START_TIME = 'START_TIME',
  STATUS = 'STATUS',
  TYPE = 'TYPE',
}

export enum Withdraws_Distinct_Enum {
  AMOUNT = 'AMOUNT',
  BLOCKHEIGHT = 'BLOCKHEIGHT',
  CREATE_AT = 'CREATE_AT',
  ID = 'ID',
  SENDER = 'SENDER',
  TX_HASH = 'TX_HASH',
}

export type GetProjectDeploymentsQueryVariables = Exact<{
  projectId: Scalars['String']['input'];
}>;

export type GetProjectDeploymentsQuery = {
  readonly project: {
    readonly __typename: 'Project';
    readonly deploymentId: string;
    readonly deployments: {
      readonly __typename: 'DeploymentsConnection';
      readonly nodes: ReadonlyArray<{
        readonly __typename: 'Deployment';
        readonly id: string;
        readonly metadata: string;
        readonly createdTimestamp: Date;
        readonly createdBlock: number | null;
      } | null>;
    };
  } | null;
};

export type GetDeploymentIndexersQueryVariables = Exact<{
  deploymentId: Scalars['String']['input'];
}>;

export type GetDeploymentIndexersQuery = {
  readonly deployment: {
    readonly __typename: 'Deployment';
    readonly id: string;
    readonly indexers: {
      readonly __typename: 'IndexerDeploymentsConnection';
      readonly nodes: ReadonlyArray<{
        readonly __typename: 'IndexerDeployment';
        readonly indexerId: string;
        readonly status: ServiceStatus;
        readonly indexer: {readonly __typename: 'Indexer'; readonly metadata: string} | null;
      } | null>;
    };
  } | null;
};

export type GetDeploymentBoostQueryVariables = Exact<{
  deploymentId: Scalars['String']['input'];
}>;

export type GetDeploymentBoostQuery = {
  readonly deploymentBoosterSummaries: {
    readonly __typename: 'DeploymentBoosterSummariesConnection';
    readonly aggregates: {
      readonly __typename: 'DeploymentBoosterSummaryAggregates';
      readonly sum: {readonly __typename: 'DeploymentBoosterSummarySumAggregates'; readonly totalAmount: string} | null;
    } | null;
    readonly nodes: ReadonlyArray<{
      readonly __typename: 'DeploymentBoosterSummary';
      readonly consumer: string;
      readonly totalAmount: string;
    } | null>;
  } | null;
};

export type GetAccountBoostQueryVariables = Exact<{
  address: Scalars['String']['input'];
}>;

export type GetAccountBoostQuery = {
  readonly deploymentBoosterSummaries: {
    readonly __typename: 'DeploymentBoosterSummariesConnection';
    readonly aggregates: {
      readonly __typename: 'DeploymentBoosterSummaryAggregates';
      readonly sum: {readonly __typename: 'DeploymentBoosterSummarySumAggregates'; readonly totalAmount: string} | null;
    } | null;
    readonly nodes: ReadonlyArray<{
      readonly __typename: 'DeploymentBoosterSummary';
      readonly totalAmount: string;
      readonly deploymentId: string;
      readonly deployment: {readonly __typename: 'Deployment'; readonly metadata: string} | null;
      readonly project: {readonly __typename: 'Project'; readonly id: string; readonly metadata: string} | null;
    } | null>;
  } | null;
};

export type GetProjectsQueryVariables = Exact<{
  address: Scalars['String']['input'];
}>;

export type GetProjectsQuery = {
  readonly projects: {
    readonly __typename: 'ProjectsConnection';
    readonly nodes: ReadonlyArray<{
      readonly __typename: 'Project';
      readonly id: string;
      readonly owner: string;
      readonly metadata: string;
      readonly totalAllocation: string;
      readonly totalBoost: string;
      readonly totalReward: string;
      readonly type: ProjectType;
      readonly deploymentId: string;
    } | null>;
  } | null;
};
