/* eslint-disable */
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** A floating point number that requires more precision than IEEE 754 binary 64 */
  BigFloat: { input: any; output: any; }
  /**
   * A signed eight-byte integer. The upper big integer values are greater than the
   * max value for a JavaScript number. Therefore all big integers will be output as
   * strings and not numbers.
   */
  BigInt: { input: any; output: any; }
  /** A location in a connection that can be used for resuming pagination. */
  Cursor: { input: any; output: any; }
  /** The day, does not include a time. */
  Date: { input: any; output: any; }
  /**
   * A point in time as described by the [ISO
   * 8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
   */
  Datetime: { input: any; output: any; }
  /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  JSON: { input: any; output: any; }
};

export type AcceptedOffer = Node & {
  __typename?: 'AcceptedOffer';
  createdBlock?: Maybe<Scalars['Int']['output']>;
  id: Scalars['String']['output'];
  /** Reads a single `Indexer` that is related to this `AcceptedOffer`. */
  indexer?: Maybe<Indexer>;
  indexerId: Scalars['String']['output'];
  lastEvent?: Maybe<Scalars['String']['output']>;
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  /** Reads a single `Offer` that is related to this `AcceptedOffer`. */
  offer?: Maybe<Offer>;
  offerId: Scalars['String']['output'];
  /** Reads a single `ServiceAgreement` that is related to this `AcceptedOffer`. */
  serviceAgreement?: Maybe<ServiceAgreement>;
  serviceAgreementId: Scalars['String']['output'];
};

export type AcceptedOfferAggregates = {
  __typename?: 'AcceptedOfferAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  average?: Maybe<AcceptedOfferAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  distinctCount?: Maybe<AcceptedOfferDistinctCountAggregates>;
  keys?: Maybe<Array<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  max?: Maybe<AcceptedOfferMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  min?: Maybe<AcceptedOfferMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevPopulation?: Maybe<AcceptedOfferStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevSample?: Maybe<AcceptedOfferStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  sum?: Maybe<AcceptedOfferSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  variancePopulation?: Maybe<AcceptedOfferVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  varianceSample?: Maybe<AcceptedOfferVarianceSampleAggregates>;
};

/** A filter to be used against aggregates of `AcceptedOffer` object types. */
export type AcceptedOfferAggregatesFilter = {
  /** Mean average aggregate over matching `AcceptedOffer` objects. */
  average?: InputMaybe<AcceptedOfferAverageAggregateFilter>;
  /** Distinct count aggregate over matching `AcceptedOffer` objects. */
  distinctCount?: InputMaybe<AcceptedOfferDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `AcceptedOffer` object to be included within the aggregate. */
  filter?: InputMaybe<AcceptedOfferFilter>;
  /** Maximum aggregate over matching `AcceptedOffer` objects. */
  max?: InputMaybe<AcceptedOfferMaxAggregateFilter>;
  /** Minimum aggregate over matching `AcceptedOffer` objects. */
  min?: InputMaybe<AcceptedOfferMinAggregateFilter>;
  /** Population standard deviation aggregate over matching `AcceptedOffer` objects. */
  stddevPopulation?: InputMaybe<AcceptedOfferStddevPopulationAggregateFilter>;
  /** Sample standard deviation aggregate over matching `AcceptedOffer` objects. */
  stddevSample?: InputMaybe<AcceptedOfferStddevSampleAggregateFilter>;
  /** Sum aggregate over matching `AcceptedOffer` objects. */
  sum?: InputMaybe<AcceptedOfferSumAggregateFilter>;
  /** Population variance aggregate over matching `AcceptedOffer` objects. */
  variancePopulation?: InputMaybe<AcceptedOfferVariancePopulationAggregateFilter>;
  /** Sample variance aggregate over matching `AcceptedOffer` objects. */
  varianceSample?: InputMaybe<AcceptedOfferVarianceSampleAggregateFilter>;
};

export type AcceptedOfferAverageAggregateFilter = {
  createdBlock?: InputMaybe<BigFloatFilter>;
};

export type AcceptedOfferAverageAggregates = {
  __typename?: 'AcceptedOfferAverageAggregates';
  /** Mean average of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
};

export type AcceptedOfferDistinctCountAggregateFilter = {
  _blockRange?: InputMaybe<BigIntFilter>;
  _id?: InputMaybe<BigIntFilter>;
  createdBlock?: InputMaybe<BigIntFilter>;
  id?: InputMaybe<BigIntFilter>;
  indexerId?: InputMaybe<BigIntFilter>;
  lastEvent?: InputMaybe<BigIntFilter>;
  offerId?: InputMaybe<BigIntFilter>;
  serviceAgreementId?: InputMaybe<BigIntFilter>;
};

export type AcceptedOfferDistinctCountAggregates = {
  __typename?: 'AcceptedOfferDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  _blockRange?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  _id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of indexerId across the matching connection */
  indexerId?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of lastEvent across the matching connection */
  lastEvent?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of offerId across the matching connection */
  offerId?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of serviceAgreementId across the matching connection */
  serviceAgreementId?: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `AcceptedOffer` object types. All fields are combined with a logical ‘and.’ */
export type AcceptedOfferFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<AcceptedOfferFilter>>;
  /** Filter by the object’s `createdBlock` field. */
  createdBlock?: InputMaybe<IntFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<StringFilter>;
  /** Filter by the object’s `indexer` relation. */
  indexer?: InputMaybe<IndexerFilter>;
  /** Filter by the object’s `indexerId` field. */
  indexerId?: InputMaybe<StringFilter>;
  /** Filter by the object’s `lastEvent` field. */
  lastEvent?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<AcceptedOfferFilter>;
  /** Filter by the object’s `offer` relation. */
  offer?: InputMaybe<OfferFilter>;
  /** Filter by the object’s `offerId` field. */
  offerId?: InputMaybe<StringFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<AcceptedOfferFilter>>;
  /** Filter by the object’s `serviceAgreement` relation. */
  serviceAgreement?: InputMaybe<ServiceAgreementFilter>;
  /** Filter by the object’s `serviceAgreementId` field. */
  serviceAgreementId?: InputMaybe<StringFilter>;
};

export type AcceptedOfferMaxAggregateFilter = {
  createdBlock?: InputMaybe<IntFilter>;
};

export type AcceptedOfferMaxAggregates = {
  __typename?: 'AcceptedOfferMaxAggregates';
  /** Maximum of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['Int']['output']>;
};

export type AcceptedOfferMinAggregateFilter = {
  createdBlock?: InputMaybe<IntFilter>;
};

export type AcceptedOfferMinAggregates = {
  __typename?: 'AcceptedOfferMinAggregates';
  /** Minimum of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['Int']['output']>;
};

export type AcceptedOfferStddevPopulationAggregateFilter = {
  createdBlock?: InputMaybe<BigFloatFilter>;
};

export type AcceptedOfferStddevPopulationAggregates = {
  __typename?: 'AcceptedOfferStddevPopulationAggregates';
  /** Population standard deviation of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
};

export type AcceptedOfferStddevSampleAggregateFilter = {
  createdBlock?: InputMaybe<BigFloatFilter>;
};

export type AcceptedOfferStddevSampleAggregates = {
  __typename?: 'AcceptedOfferStddevSampleAggregates';
  /** Sample standard deviation of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
};

export type AcceptedOfferSumAggregateFilter = {
  createdBlock?: InputMaybe<BigIntFilter>;
};

export type AcceptedOfferSumAggregates = {
  __typename?: 'AcceptedOfferSumAggregates';
  /** Sum of createdBlock across the matching connection */
  createdBlock: Scalars['BigInt']['output'];
};

export type AcceptedOfferVariancePopulationAggregateFilter = {
  createdBlock?: InputMaybe<BigFloatFilter>;
};

export type AcceptedOfferVariancePopulationAggregates = {
  __typename?: 'AcceptedOfferVariancePopulationAggregates';
  /** Population variance of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
};

export type AcceptedOfferVarianceSampleAggregateFilter = {
  createdBlock?: InputMaybe<BigFloatFilter>;
};

export type AcceptedOfferVarianceSampleAggregates = {
  __typename?: 'AcceptedOfferVarianceSampleAggregates';
  /** Sample variance of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `AcceptedOffer` values. */
export type AcceptedOffersConnection = {
  __typename?: 'AcceptedOffersConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<AcceptedOfferAggregates>;
  /** A list of edges which contains the `AcceptedOffer` and cursor to aid in pagination. */
  edges: Array<AcceptedOffersEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<AcceptedOfferAggregates>>;
  /** A list of `AcceptedOffer` objects. */
  nodes: Array<Maybe<AcceptedOffer>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `AcceptedOffer` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `AcceptedOffer` values. */
export type AcceptedOffersConnectionGroupedAggregatesArgs = {
  groupBy: Array<AcceptedOffersGroupBy>;
  having?: InputMaybe<AcceptedOffersHavingInput>;
};

/** A `AcceptedOffer` edge in the connection. */
export type AcceptedOffersEdge = {
  __typename?: 'AcceptedOffersEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `AcceptedOffer` at the end of the edge. */
  node?: Maybe<AcceptedOffer>;
};

/** Grouping methods for `AcceptedOffer` for usage during aggregation. */
export enum AcceptedOffersGroupBy {
  CreatedBlock = 'CREATED_BLOCK',
  Id = 'ID',
  IndexerId = 'INDEXER_ID',
  LastEvent = 'LAST_EVENT',
  OfferId = 'OFFER_ID',
  ServiceAgreementId = 'SERVICE_AGREEMENT_ID'
}

export type AcceptedOffersHavingAverageInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
};

export type AcceptedOffersHavingDistinctCountInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
};

/** Conditions for `AcceptedOffer` aggregates. */
export type AcceptedOffersHavingInput = {
  AND?: InputMaybe<Array<AcceptedOffersHavingInput>>;
  OR?: InputMaybe<Array<AcceptedOffersHavingInput>>;
  average?: InputMaybe<AcceptedOffersHavingAverageInput>;
  distinctCount?: InputMaybe<AcceptedOffersHavingDistinctCountInput>;
  max?: InputMaybe<AcceptedOffersHavingMaxInput>;
  min?: InputMaybe<AcceptedOffersHavingMinInput>;
  stddevPopulation?: InputMaybe<AcceptedOffersHavingStddevPopulationInput>;
  stddevSample?: InputMaybe<AcceptedOffersHavingStddevSampleInput>;
  sum?: InputMaybe<AcceptedOffersHavingSumInput>;
  variancePopulation?: InputMaybe<AcceptedOffersHavingVariancePopulationInput>;
  varianceSample?: InputMaybe<AcceptedOffersHavingVarianceSampleInput>;
};

export type AcceptedOffersHavingMaxInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
};

export type AcceptedOffersHavingMinInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
};

export type AcceptedOffersHavingStddevPopulationInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
};

export type AcceptedOffersHavingStddevSampleInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
};

export type AcceptedOffersHavingSumInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
};

export type AcceptedOffersHavingVariancePopulationInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
};

export type AcceptedOffersHavingVarianceSampleInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
};

/** Methods to use when ordering `AcceptedOffer`. */
export enum AcceptedOffersOrderBy {
  CreatedBlockAsc = 'CREATED_BLOCK_ASC',
  CreatedBlockDesc = 'CREATED_BLOCK_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  IndexerByIndexerIdActiveAsc = 'INDEXER_BY_INDEXER_ID__ACTIVE_ASC',
  IndexerByIndexerIdActiveDesc = 'INDEXER_BY_INDEXER_ID__ACTIVE_DESC',
  IndexerByIndexerIdCapacityAsc = 'INDEXER_BY_INDEXER_ID__CAPACITY_ASC',
  IndexerByIndexerIdCapacityDesc = 'INDEXER_BY_INDEXER_ID__CAPACITY_DESC',
  IndexerByIndexerIdCommissionAsc = 'INDEXER_BY_INDEXER_ID__COMMISSION_ASC',
  IndexerByIndexerIdCommissionDesc = 'INDEXER_BY_INDEXER_ID__COMMISSION_DESC',
  IndexerByIndexerIdControllerAsc = 'INDEXER_BY_INDEXER_ID__CONTROLLER_ASC',
  IndexerByIndexerIdControllerDesc = 'INDEXER_BY_INDEXER_ID__CONTROLLER_DESC',
  IndexerByIndexerIdCreatedBlockAsc = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_ASC',
  IndexerByIndexerIdCreatedBlockDesc = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_DESC',
  IndexerByIndexerIdIdAsc = 'INDEXER_BY_INDEXER_ID__ID_ASC',
  IndexerByIndexerIdIdDesc = 'INDEXER_BY_INDEXER_ID__ID_DESC',
  IndexerByIndexerIdLastClaimEraAsc = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_ASC',
  IndexerByIndexerIdLastClaimEraDesc = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_DESC',
  IndexerByIndexerIdLastEventAsc = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_ASC',
  IndexerByIndexerIdLastEventDesc = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_DESC',
  IndexerByIndexerIdLastSettledEraAsc = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_ASC',
  IndexerByIndexerIdLastSettledEraDesc = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_DESC',
  IndexerByIndexerIdMaxUnstakeAmountAsc = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_ASC',
  IndexerByIndexerIdMaxUnstakeAmountDesc = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_DESC',
  IndexerByIndexerIdMetadataAsc = 'INDEXER_BY_INDEXER_ID__METADATA_ASC',
  IndexerByIndexerIdMetadataDesc = 'INDEXER_BY_INDEXER_ID__METADATA_DESC',
  IndexerByIndexerIdSelfStakeAsc = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_ASC',
  IndexerByIndexerIdSelfStakeDesc = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_DESC',
  IndexerByIndexerIdTotalStakeAsc = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_ASC',
  IndexerByIndexerIdTotalStakeDesc = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_DESC',
  IndexerIdAsc = 'INDEXER_ID_ASC',
  IndexerIdDesc = 'INDEXER_ID_DESC',
  LastEventAsc = 'LAST_EVENT_ASC',
  LastEventDesc = 'LAST_EVENT_DESC',
  Natural = 'NATURAL',
  OfferByOfferIdAcceptedAsc = 'OFFER_BY_OFFER_ID__ACCEPTED_ASC',
  OfferByOfferIdAcceptedDesc = 'OFFER_BY_OFFER_ID__ACCEPTED_DESC',
  OfferByOfferIdConsumerAsc = 'OFFER_BY_OFFER_ID__CONSUMER_ASC',
  OfferByOfferIdConsumerDesc = 'OFFER_BY_OFFER_ID__CONSUMER_DESC',
  OfferByOfferIdCreatedBlockAsc = 'OFFER_BY_OFFER_ID__CREATED_BLOCK_ASC',
  OfferByOfferIdCreatedBlockDesc = 'OFFER_BY_OFFER_ID__CREATED_BLOCK_DESC',
  OfferByOfferIdDeploymentIdAsc = 'OFFER_BY_OFFER_ID__DEPLOYMENT_ID_ASC',
  OfferByOfferIdDeploymentIdDesc = 'OFFER_BY_OFFER_ID__DEPLOYMENT_ID_DESC',
  OfferByOfferIdDepositAsc = 'OFFER_BY_OFFER_ID__DEPOSIT_ASC',
  OfferByOfferIdDepositDesc = 'OFFER_BY_OFFER_ID__DEPOSIT_DESC',
  OfferByOfferIdExpireDateAsc = 'OFFER_BY_OFFER_ID__EXPIRE_DATE_ASC',
  OfferByOfferIdExpireDateDesc = 'OFFER_BY_OFFER_ID__EXPIRE_DATE_DESC',
  OfferByOfferIdIdAsc = 'OFFER_BY_OFFER_ID__ID_ASC',
  OfferByOfferIdIdDesc = 'OFFER_BY_OFFER_ID__ID_DESC',
  OfferByOfferIdLastEventAsc = 'OFFER_BY_OFFER_ID__LAST_EVENT_ASC',
  OfferByOfferIdLastEventDesc = 'OFFER_BY_OFFER_ID__LAST_EVENT_DESC',
  OfferByOfferIdLimitAsc = 'OFFER_BY_OFFER_ID__LIMIT_ASC',
  OfferByOfferIdLimitDesc = 'OFFER_BY_OFFER_ID__LIMIT_DESC',
  OfferByOfferIdMinimumAcceptHeightAsc = 'OFFER_BY_OFFER_ID__MINIMUM_ACCEPT_HEIGHT_ASC',
  OfferByOfferIdMinimumAcceptHeightDesc = 'OFFER_BY_OFFER_ID__MINIMUM_ACCEPT_HEIGHT_DESC',
  OfferByOfferIdMinimumStakingAmountAsc = 'OFFER_BY_OFFER_ID__MINIMUM_STAKING_AMOUNT_ASC',
  OfferByOfferIdMinimumStakingAmountDesc = 'OFFER_BY_OFFER_ID__MINIMUM_STAKING_AMOUNT_DESC',
  OfferByOfferIdPlanTemplateIdAsc = 'OFFER_BY_OFFER_ID__PLAN_TEMPLATE_ID_ASC',
  OfferByOfferIdPlanTemplateIdDesc = 'OFFER_BY_OFFER_ID__PLAN_TEMPLATE_ID_DESC',
  OfferByOfferIdReachLimitAsc = 'OFFER_BY_OFFER_ID__REACH_LIMIT_ASC',
  OfferByOfferIdReachLimitDesc = 'OFFER_BY_OFFER_ID__REACH_LIMIT_DESC',
  OfferByOfferIdWithdrawnAsc = 'OFFER_BY_OFFER_ID__WITHDRAWN_ASC',
  OfferByOfferIdWithdrawnDesc = 'OFFER_BY_OFFER_ID__WITHDRAWN_DESC',
  OfferByOfferIdWithdrawPenaltyAsc = 'OFFER_BY_OFFER_ID__WITHDRAW_PENALTY_ASC',
  OfferByOfferIdWithdrawPenaltyDesc = 'OFFER_BY_OFFER_ID__WITHDRAW_PENALTY_DESC',
  OfferIdAsc = 'OFFER_ID_ASC',
  OfferIdDesc = 'OFFER_ID_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  ServiceAgreementByServiceAgreementIdConsumerAddressAsc = 'SERVICE_AGREEMENT_BY_SERVICE_AGREEMENT_ID__CONSUMER_ADDRESS_ASC',
  ServiceAgreementByServiceAgreementIdConsumerAddressDesc = 'SERVICE_AGREEMENT_BY_SERVICE_AGREEMENT_ID__CONSUMER_ADDRESS_DESC',
  ServiceAgreementByServiceAgreementIdCreatedBlockAsc = 'SERVICE_AGREEMENT_BY_SERVICE_AGREEMENT_ID__CREATED_BLOCK_ASC',
  ServiceAgreementByServiceAgreementIdCreatedBlockDesc = 'SERVICE_AGREEMENT_BY_SERVICE_AGREEMENT_ID__CREATED_BLOCK_DESC',
  ServiceAgreementByServiceAgreementIdDeploymentIdAsc = 'SERVICE_AGREEMENT_BY_SERVICE_AGREEMENT_ID__DEPLOYMENT_ID_ASC',
  ServiceAgreementByServiceAgreementIdDeploymentIdDesc = 'SERVICE_AGREEMENT_BY_SERVICE_AGREEMENT_ID__DEPLOYMENT_ID_DESC',
  ServiceAgreementByServiceAgreementIdEndTimeAsc = 'SERVICE_AGREEMENT_BY_SERVICE_AGREEMENT_ID__END_TIME_ASC',
  ServiceAgreementByServiceAgreementIdEndTimeDesc = 'SERVICE_AGREEMENT_BY_SERVICE_AGREEMENT_ID__END_TIME_DESC',
  ServiceAgreementByServiceAgreementIdIdAsc = 'SERVICE_AGREEMENT_BY_SERVICE_AGREEMENT_ID__ID_ASC',
  ServiceAgreementByServiceAgreementIdIdDesc = 'SERVICE_AGREEMENT_BY_SERVICE_AGREEMENT_ID__ID_DESC',
  ServiceAgreementByServiceAgreementIdIndexerAddressAsc = 'SERVICE_AGREEMENT_BY_SERVICE_AGREEMENT_ID__INDEXER_ADDRESS_ASC',
  ServiceAgreementByServiceAgreementIdIndexerAddressDesc = 'SERVICE_AGREEMENT_BY_SERVICE_AGREEMENT_ID__INDEXER_ADDRESS_DESC',
  ServiceAgreementByServiceAgreementIdLastEventAsc = 'SERVICE_AGREEMENT_BY_SERVICE_AGREEMENT_ID__LAST_EVENT_ASC',
  ServiceAgreementByServiceAgreementIdLastEventDesc = 'SERVICE_AGREEMENT_BY_SERVICE_AGREEMENT_ID__LAST_EVENT_DESC',
  ServiceAgreementByServiceAgreementIdLockedAmountAsc = 'SERVICE_AGREEMENT_BY_SERVICE_AGREEMENT_ID__LOCKED_AMOUNT_ASC',
  ServiceAgreementByServiceAgreementIdLockedAmountDesc = 'SERVICE_AGREEMENT_BY_SERVICE_AGREEMENT_ID__LOCKED_AMOUNT_DESC',
  ServiceAgreementByServiceAgreementIdPeriodAsc = 'SERVICE_AGREEMENT_BY_SERVICE_AGREEMENT_ID__PERIOD_ASC',
  ServiceAgreementByServiceAgreementIdPeriodDesc = 'SERVICE_AGREEMENT_BY_SERVICE_AGREEMENT_ID__PERIOD_DESC',
  ServiceAgreementByServiceAgreementIdPlanTemplateIdAsc = 'SERVICE_AGREEMENT_BY_SERVICE_AGREEMENT_ID__PLAN_TEMPLATE_ID_ASC',
  ServiceAgreementByServiceAgreementIdPlanTemplateIdDesc = 'SERVICE_AGREEMENT_BY_SERVICE_AGREEMENT_ID__PLAN_TEMPLATE_ID_DESC',
  ServiceAgreementByServiceAgreementIdStartTimeAsc = 'SERVICE_AGREEMENT_BY_SERVICE_AGREEMENT_ID__START_TIME_ASC',
  ServiceAgreementByServiceAgreementIdStartTimeDesc = 'SERVICE_AGREEMENT_BY_SERVICE_AGREEMENT_ID__START_TIME_DESC',
  ServiceAgreementIdAsc = 'SERVICE_AGREEMENT_ID_ASC',
  ServiceAgreementIdDesc = 'SERVICE_AGREEMENT_ID_DESC'
}

export type Airdrop = Node & {
  __typename?: 'Airdrop';
  /** Reads and enables pagination through a set of `AirdropUser`. */
  airdropUsers: AirdropUsersConnection;
  createAt?: Maybe<Scalars['String']['output']>;
  endTime: Scalars['Datetime']['output'];
  hasWithdrawn?: Maybe<Scalars['Boolean']['output']>;
  id: Scalars['String']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  startTime: Scalars['Datetime']['output'];
  tokenAddress: Scalars['String']['output'];
  updateAt?: Maybe<Scalars['String']['output']>;
  withdrawAmount?: Maybe<Scalars['BigFloat']['output']>;
};


export type AirdropAirdropUsersArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Airdrop_Users_Distinct_Enum>>>;
  filter?: InputMaybe<AirdropUserFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<AirdropUsersOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

export type AirdropAggregates = {
  __typename?: 'AirdropAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  average?: Maybe<AirdropAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  distinctCount?: Maybe<AirdropDistinctCountAggregates>;
  keys?: Maybe<Array<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  max?: Maybe<AirdropMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  min?: Maybe<AirdropMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevPopulation?: Maybe<AirdropStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevSample?: Maybe<AirdropStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  sum?: Maybe<AirdropSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  variancePopulation?: Maybe<AirdropVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  varianceSample?: Maybe<AirdropVarianceSampleAggregates>;
};

export type AirdropAmount = Node & {
  __typename?: 'AirdropAmount';
  claimedAmount: Scalars['BigFloat']['output'];
  createAt?: Maybe<Scalars['String']['output']>;
  id: Scalars['String']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  totalAirdropAmount: Scalars['BigFloat']['output'];
  updateAt?: Maybe<Scalars['String']['output']>;
};

export type AirdropAmountAggregates = {
  __typename?: 'AirdropAmountAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  average?: Maybe<AirdropAmountAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  distinctCount?: Maybe<AirdropAmountDistinctCountAggregates>;
  keys?: Maybe<Array<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  max?: Maybe<AirdropAmountMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  min?: Maybe<AirdropAmountMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevPopulation?: Maybe<AirdropAmountStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevSample?: Maybe<AirdropAmountStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  sum?: Maybe<AirdropAmountSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  variancePopulation?: Maybe<AirdropAmountVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  varianceSample?: Maybe<AirdropAmountVarianceSampleAggregates>;
};

export type AirdropAmountAverageAggregates = {
  __typename?: 'AirdropAmountAverageAggregates';
  /** Mean average of claimedAmount across the matching connection */
  claimedAmount?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of totalAirdropAmount across the matching connection */
  totalAirdropAmount?: Maybe<Scalars['BigFloat']['output']>;
};

export type AirdropAmountDistinctCountAggregates = {
  __typename?: 'AirdropAmountDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  _blockRange?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  _id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of claimedAmount across the matching connection */
  claimedAmount?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createAt across the matching connection */
  createAt?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of totalAirdropAmount across the matching connection */
  totalAirdropAmount?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of updateAt across the matching connection */
  updateAt?: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `AirdropAmount` object types. All fields are combined with a logical ‘and.’ */
export type AirdropAmountFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<AirdropAmountFilter>>;
  /** Filter by the object’s `claimedAmount` field. */
  claimedAmount?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `createAt` field. */
  createAt?: InputMaybe<StringFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<AirdropAmountFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<AirdropAmountFilter>>;
  /** Filter by the object’s `totalAirdropAmount` field. */
  totalAirdropAmount?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `updateAt` field. */
  updateAt?: InputMaybe<StringFilter>;
};

export type AirdropAmountMaxAggregates = {
  __typename?: 'AirdropAmountMaxAggregates';
  /** Maximum of claimedAmount across the matching connection */
  claimedAmount?: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of totalAirdropAmount across the matching connection */
  totalAirdropAmount?: Maybe<Scalars['BigFloat']['output']>;
};

export type AirdropAmountMinAggregates = {
  __typename?: 'AirdropAmountMinAggregates';
  /** Minimum of claimedAmount across the matching connection */
  claimedAmount?: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of totalAirdropAmount across the matching connection */
  totalAirdropAmount?: Maybe<Scalars['BigFloat']['output']>;
};

export type AirdropAmountStddevPopulationAggregates = {
  __typename?: 'AirdropAmountStddevPopulationAggregates';
  /** Population standard deviation of claimedAmount across the matching connection */
  claimedAmount?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of totalAirdropAmount across the matching connection */
  totalAirdropAmount?: Maybe<Scalars['BigFloat']['output']>;
};

export type AirdropAmountStddevSampleAggregates = {
  __typename?: 'AirdropAmountStddevSampleAggregates';
  /** Sample standard deviation of claimedAmount across the matching connection */
  claimedAmount?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of totalAirdropAmount across the matching connection */
  totalAirdropAmount?: Maybe<Scalars['BigFloat']['output']>;
};

export type AirdropAmountSumAggregates = {
  __typename?: 'AirdropAmountSumAggregates';
  /** Sum of claimedAmount across the matching connection */
  claimedAmount: Scalars['BigFloat']['output'];
  /** Sum of totalAirdropAmount across the matching connection */
  totalAirdropAmount: Scalars['BigFloat']['output'];
};

export type AirdropAmountVariancePopulationAggregates = {
  __typename?: 'AirdropAmountVariancePopulationAggregates';
  /** Population variance of claimedAmount across the matching connection */
  claimedAmount?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of totalAirdropAmount across the matching connection */
  totalAirdropAmount?: Maybe<Scalars['BigFloat']['output']>;
};

export type AirdropAmountVarianceSampleAggregates = {
  __typename?: 'AirdropAmountVarianceSampleAggregates';
  /** Sample variance of claimedAmount across the matching connection */
  claimedAmount?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of totalAirdropAmount across the matching connection */
  totalAirdropAmount?: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `AirdropAmount` values. */
export type AirdropAmountsConnection = {
  __typename?: 'AirdropAmountsConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<AirdropAmountAggregates>;
  /** A list of edges which contains the `AirdropAmount` and cursor to aid in pagination. */
  edges: Array<AirdropAmountsEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<AirdropAmountAggregates>>;
  /** A list of `AirdropAmount` objects. */
  nodes: Array<Maybe<AirdropAmount>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `AirdropAmount` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `AirdropAmount` values. */
export type AirdropAmountsConnectionGroupedAggregatesArgs = {
  groupBy: Array<AirdropAmountsGroupBy>;
  having?: InputMaybe<AirdropAmountsHavingInput>;
};

/** A `AirdropAmount` edge in the connection. */
export type AirdropAmountsEdge = {
  __typename?: 'AirdropAmountsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `AirdropAmount` at the end of the edge. */
  node?: Maybe<AirdropAmount>;
};

/** Grouping methods for `AirdropAmount` for usage during aggregation. */
export enum AirdropAmountsGroupBy {
  ClaimedAmount = 'CLAIMED_AMOUNT',
  CreateAt = 'CREATE_AT',
  Id = 'ID',
  TotalAirdropAmount = 'TOTAL_AIRDROP_AMOUNT',
  UpdateAt = 'UPDATE_AT'
}

export type AirdropAmountsHavingAverageInput = {
  claimedAmount?: InputMaybe<HavingBigfloatFilter>;
  totalAirdropAmount?: InputMaybe<HavingBigfloatFilter>;
};

export type AirdropAmountsHavingDistinctCountInput = {
  claimedAmount?: InputMaybe<HavingBigfloatFilter>;
  totalAirdropAmount?: InputMaybe<HavingBigfloatFilter>;
};

/** Conditions for `AirdropAmount` aggregates. */
export type AirdropAmountsHavingInput = {
  AND?: InputMaybe<Array<AirdropAmountsHavingInput>>;
  OR?: InputMaybe<Array<AirdropAmountsHavingInput>>;
  average?: InputMaybe<AirdropAmountsHavingAverageInput>;
  distinctCount?: InputMaybe<AirdropAmountsHavingDistinctCountInput>;
  max?: InputMaybe<AirdropAmountsHavingMaxInput>;
  min?: InputMaybe<AirdropAmountsHavingMinInput>;
  stddevPopulation?: InputMaybe<AirdropAmountsHavingStddevPopulationInput>;
  stddevSample?: InputMaybe<AirdropAmountsHavingStddevSampleInput>;
  sum?: InputMaybe<AirdropAmountsHavingSumInput>;
  variancePopulation?: InputMaybe<AirdropAmountsHavingVariancePopulationInput>;
  varianceSample?: InputMaybe<AirdropAmountsHavingVarianceSampleInput>;
};

export type AirdropAmountsHavingMaxInput = {
  claimedAmount?: InputMaybe<HavingBigfloatFilter>;
  totalAirdropAmount?: InputMaybe<HavingBigfloatFilter>;
};

export type AirdropAmountsHavingMinInput = {
  claimedAmount?: InputMaybe<HavingBigfloatFilter>;
  totalAirdropAmount?: InputMaybe<HavingBigfloatFilter>;
};

export type AirdropAmountsHavingStddevPopulationInput = {
  claimedAmount?: InputMaybe<HavingBigfloatFilter>;
  totalAirdropAmount?: InputMaybe<HavingBigfloatFilter>;
};

export type AirdropAmountsHavingStddevSampleInput = {
  claimedAmount?: InputMaybe<HavingBigfloatFilter>;
  totalAirdropAmount?: InputMaybe<HavingBigfloatFilter>;
};

export type AirdropAmountsHavingSumInput = {
  claimedAmount?: InputMaybe<HavingBigfloatFilter>;
  totalAirdropAmount?: InputMaybe<HavingBigfloatFilter>;
};

export type AirdropAmountsHavingVariancePopulationInput = {
  claimedAmount?: InputMaybe<HavingBigfloatFilter>;
  totalAirdropAmount?: InputMaybe<HavingBigfloatFilter>;
};

export type AirdropAmountsHavingVarianceSampleInput = {
  claimedAmount?: InputMaybe<HavingBigfloatFilter>;
  totalAirdropAmount?: InputMaybe<HavingBigfloatFilter>;
};

/** Methods to use when ordering `AirdropAmount`. */
export enum AirdropAmountsOrderBy {
  ClaimedAmountAsc = 'CLAIMED_AMOUNT_ASC',
  ClaimedAmountDesc = 'CLAIMED_AMOUNT_DESC',
  CreateAtAsc = 'CREATE_AT_ASC',
  CreateAtDesc = 'CREATE_AT_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  TotalAirdropAmountAsc = 'TOTAL_AIRDROP_AMOUNT_ASC',
  TotalAirdropAmountDesc = 'TOTAL_AIRDROP_AMOUNT_DESC',
  UpdateAtAsc = 'UPDATE_AT_ASC',
  UpdateAtDesc = 'UPDATE_AT_DESC'
}

export type AirdropAverageAggregates = {
  __typename?: 'AirdropAverageAggregates';
  /** Mean average of withdrawAmount across the matching connection */
  withdrawAmount?: Maybe<Scalars['BigFloat']['output']>;
};

export enum AirdropClaimStatus {
  Claimed = 'CLAIMED',
  Unclaimed = 'UNCLAIMED'
}

/** A filter to be used against AirdropClaimStatus fields. All fields are combined with a logical ‘and.’ */
export type AirdropClaimStatusFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: InputMaybe<AirdropClaimStatus>;
  /** Equal to the specified value. */
  equalTo?: InputMaybe<AirdropClaimStatus>;
  /** Greater than the specified value. */
  greaterThan?: InputMaybe<AirdropClaimStatus>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: InputMaybe<AirdropClaimStatus>;
  /** Included in the specified list. */
  in?: InputMaybe<Array<AirdropClaimStatus>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: InputMaybe<Scalars['Boolean']['input']>;
  /** Less than the specified value. */
  lessThan?: InputMaybe<AirdropClaimStatus>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: InputMaybe<AirdropClaimStatus>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: InputMaybe<AirdropClaimStatus>;
  /** Not equal to the specified value. */
  notEqualTo?: InputMaybe<AirdropClaimStatus>;
  /** Not included in the specified list. */
  notIn?: InputMaybe<Array<AirdropClaimStatus>>;
};

export type AirdropDistinctCountAggregates = {
  __typename?: 'AirdropDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  _blockRange?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  _id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createAt across the matching connection */
  createAt?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of endTime across the matching connection */
  endTime?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of hasWithdrawn across the matching connection */
  hasWithdrawn?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of startTime across the matching connection */
  startTime?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of tokenAddress across the matching connection */
  tokenAddress?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of updateAt across the matching connection */
  updateAt?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of withdrawAmount across the matching connection */
  withdrawAmount?: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `Airdrop` object types. All fields are combined with a logical ‘and.’ */
export type AirdropFilter = {
  /** Filter by the object’s `airdropUsers` relation. */
  airdropUsers?: InputMaybe<AirdropToManyAirdropUserFilter>;
  /** Some related `airdropUsers` exist. */
  airdropUsersExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<AirdropFilter>>;
  /** Filter by the object’s `createAt` field. */
  createAt?: InputMaybe<StringFilter>;
  /** Filter by the object’s `endTime` field. */
  endTime?: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `hasWithdrawn` field. */
  hasWithdrawn?: InputMaybe<BooleanFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<AirdropFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<AirdropFilter>>;
  /** Filter by the object’s `startTime` field. */
  startTime?: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `tokenAddress` field. */
  tokenAddress?: InputMaybe<StringFilter>;
  /** Filter by the object’s `updateAt` field. */
  updateAt?: InputMaybe<StringFilter>;
  /** Filter by the object’s `withdrawAmount` field. */
  withdrawAmount?: InputMaybe<BigFloatFilter>;
};

export type AirdropMaxAggregates = {
  __typename?: 'AirdropMaxAggregates';
  /** Maximum of withdrawAmount across the matching connection */
  withdrawAmount?: Maybe<Scalars['BigFloat']['output']>;
};

export type AirdropMinAggregates = {
  __typename?: 'AirdropMinAggregates';
  /** Minimum of withdrawAmount across the matching connection */
  withdrawAmount?: Maybe<Scalars['BigFloat']['output']>;
};

export type AirdropStddevPopulationAggregates = {
  __typename?: 'AirdropStddevPopulationAggregates';
  /** Population standard deviation of withdrawAmount across the matching connection */
  withdrawAmount?: Maybe<Scalars['BigFloat']['output']>;
};

export type AirdropStddevSampleAggregates = {
  __typename?: 'AirdropStddevSampleAggregates';
  /** Sample standard deviation of withdrawAmount across the matching connection */
  withdrawAmount?: Maybe<Scalars['BigFloat']['output']>;
};

export type AirdropSumAggregates = {
  __typename?: 'AirdropSumAggregates';
  /** Sum of withdrawAmount across the matching connection */
  withdrawAmount: Scalars['BigFloat']['output'];
};

/** A filter to be used against many `AirdropUser` object types. All fields are combined with a logical ‘and.’ */
export type AirdropToManyAirdropUserFilter = {
  /** Aggregates across related `AirdropUser` match the filter criteria. */
  aggregates?: InputMaybe<AirdropUserAggregatesFilter>;
  /** Every related `AirdropUser` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<AirdropUserFilter>;
  /** No related `AirdropUser` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<AirdropUserFilter>;
  /** Some related `AirdropUser` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<AirdropUserFilter>;
};

export type AirdropUser = Node & {
  __typename?: 'AirdropUser';
  /** Reads a single `Airdrop` that is related to this `AirdropUser`. */
  airdrop?: Maybe<Airdrop>;
  airdropId: Scalars['String']['output'];
  amount: Scalars['BigFloat']['output'];
  createAt?: Maybe<Scalars['String']['output']>;
  id: Scalars['String']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  status: AirdropClaimStatus;
  updateAt?: Maybe<Scalars['String']['output']>;
  user: Scalars['String']['output'];
};

export type AirdropUserAggregates = {
  __typename?: 'AirdropUserAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  average?: Maybe<AirdropUserAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  distinctCount?: Maybe<AirdropUserDistinctCountAggregates>;
  keys?: Maybe<Array<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  max?: Maybe<AirdropUserMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  min?: Maybe<AirdropUserMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevPopulation?: Maybe<AirdropUserStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevSample?: Maybe<AirdropUserStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  sum?: Maybe<AirdropUserSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  variancePopulation?: Maybe<AirdropUserVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  varianceSample?: Maybe<AirdropUserVarianceSampleAggregates>;
};

/** A filter to be used against aggregates of `AirdropUser` object types. */
export type AirdropUserAggregatesFilter = {
  /** Mean average aggregate over matching `AirdropUser` objects. */
  average?: InputMaybe<AirdropUserAverageAggregateFilter>;
  /** Distinct count aggregate over matching `AirdropUser` objects. */
  distinctCount?: InputMaybe<AirdropUserDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `AirdropUser` object to be included within the aggregate. */
  filter?: InputMaybe<AirdropUserFilter>;
  /** Maximum aggregate over matching `AirdropUser` objects. */
  max?: InputMaybe<AirdropUserMaxAggregateFilter>;
  /** Minimum aggregate over matching `AirdropUser` objects. */
  min?: InputMaybe<AirdropUserMinAggregateFilter>;
  /** Population standard deviation aggregate over matching `AirdropUser` objects. */
  stddevPopulation?: InputMaybe<AirdropUserStddevPopulationAggregateFilter>;
  /** Sample standard deviation aggregate over matching `AirdropUser` objects. */
  stddevSample?: InputMaybe<AirdropUserStddevSampleAggregateFilter>;
  /** Sum aggregate over matching `AirdropUser` objects. */
  sum?: InputMaybe<AirdropUserSumAggregateFilter>;
  /** Population variance aggregate over matching `AirdropUser` objects. */
  variancePopulation?: InputMaybe<AirdropUserVariancePopulationAggregateFilter>;
  /** Sample variance aggregate over matching `AirdropUser` objects. */
  varianceSample?: InputMaybe<AirdropUserVarianceSampleAggregateFilter>;
};

export type AirdropUserAverageAggregateFilter = {
  amount?: InputMaybe<BigFloatFilter>;
};

export type AirdropUserAverageAggregates = {
  __typename?: 'AirdropUserAverageAggregates';
  /** Mean average of amount across the matching connection */
  amount?: Maybe<Scalars['BigFloat']['output']>;
};

export type AirdropUserDistinctCountAggregateFilter = {
  _blockRange?: InputMaybe<BigIntFilter>;
  _id?: InputMaybe<BigIntFilter>;
  airdropId?: InputMaybe<BigIntFilter>;
  amount?: InputMaybe<BigIntFilter>;
  createAt?: InputMaybe<BigIntFilter>;
  id?: InputMaybe<BigIntFilter>;
  status?: InputMaybe<BigIntFilter>;
  updateAt?: InputMaybe<BigIntFilter>;
  user?: InputMaybe<BigIntFilter>;
};

export type AirdropUserDistinctCountAggregates = {
  __typename?: 'AirdropUserDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  _blockRange?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  _id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of airdropId across the matching connection */
  airdropId?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of amount across the matching connection */
  amount?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createAt across the matching connection */
  createAt?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of status across the matching connection */
  status?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of updateAt across the matching connection */
  updateAt?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of user across the matching connection */
  user?: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `AirdropUser` object types. All fields are combined with a logical ‘and.’ */
export type AirdropUserFilter = {
  /** Filter by the object’s `airdrop` relation. */
  airdrop?: InputMaybe<AirdropFilter>;
  /** Filter by the object’s `airdropId` field. */
  airdropId?: InputMaybe<StringFilter>;
  /** Filter by the object’s `amount` field. */
  amount?: InputMaybe<BigFloatFilter>;
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<AirdropUserFilter>>;
  /** Filter by the object’s `createAt` field. */
  createAt?: InputMaybe<StringFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<AirdropUserFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<AirdropUserFilter>>;
  /** Filter by the object’s `status` field. */
  status?: InputMaybe<AirdropClaimStatusFilter>;
  /** Filter by the object’s `updateAt` field. */
  updateAt?: InputMaybe<StringFilter>;
  /** Filter by the object’s `user` field. */
  user?: InputMaybe<StringFilter>;
};

export type AirdropUserMaxAggregateFilter = {
  amount?: InputMaybe<BigFloatFilter>;
};

export type AirdropUserMaxAggregates = {
  __typename?: 'AirdropUserMaxAggregates';
  /** Maximum of amount across the matching connection */
  amount?: Maybe<Scalars['BigFloat']['output']>;
};

export type AirdropUserMinAggregateFilter = {
  amount?: InputMaybe<BigFloatFilter>;
};

export type AirdropUserMinAggregates = {
  __typename?: 'AirdropUserMinAggregates';
  /** Minimum of amount across the matching connection */
  amount?: Maybe<Scalars['BigFloat']['output']>;
};

export type AirdropUserStddevPopulationAggregateFilter = {
  amount?: InputMaybe<BigFloatFilter>;
};

export type AirdropUserStddevPopulationAggregates = {
  __typename?: 'AirdropUserStddevPopulationAggregates';
  /** Population standard deviation of amount across the matching connection */
  amount?: Maybe<Scalars['BigFloat']['output']>;
};

export type AirdropUserStddevSampleAggregateFilter = {
  amount?: InputMaybe<BigFloatFilter>;
};

export type AirdropUserStddevSampleAggregates = {
  __typename?: 'AirdropUserStddevSampleAggregates';
  /** Sample standard deviation of amount across the matching connection */
  amount?: Maybe<Scalars['BigFloat']['output']>;
};

export type AirdropUserSumAggregateFilter = {
  amount?: InputMaybe<BigFloatFilter>;
};

export type AirdropUserSumAggregates = {
  __typename?: 'AirdropUserSumAggregates';
  /** Sum of amount across the matching connection */
  amount: Scalars['BigFloat']['output'];
};

export type AirdropUserVariancePopulationAggregateFilter = {
  amount?: InputMaybe<BigFloatFilter>;
};

export type AirdropUserVariancePopulationAggregates = {
  __typename?: 'AirdropUserVariancePopulationAggregates';
  /** Population variance of amount across the matching connection */
  amount?: Maybe<Scalars['BigFloat']['output']>;
};

export type AirdropUserVarianceSampleAggregateFilter = {
  amount?: InputMaybe<BigFloatFilter>;
};

export type AirdropUserVarianceSampleAggregates = {
  __typename?: 'AirdropUserVarianceSampleAggregates';
  /** Sample variance of amount across the matching connection */
  amount?: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `AirdropUser` values. */
export type AirdropUsersConnection = {
  __typename?: 'AirdropUsersConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<AirdropUserAggregates>;
  /** A list of edges which contains the `AirdropUser` and cursor to aid in pagination. */
  edges: Array<AirdropUsersEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<AirdropUserAggregates>>;
  /** A list of `AirdropUser` objects. */
  nodes: Array<Maybe<AirdropUser>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `AirdropUser` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `AirdropUser` values. */
export type AirdropUsersConnectionGroupedAggregatesArgs = {
  groupBy: Array<AirdropUsersGroupBy>;
  having?: InputMaybe<AirdropUsersHavingInput>;
};

/** A `AirdropUser` edge in the connection. */
export type AirdropUsersEdge = {
  __typename?: 'AirdropUsersEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `AirdropUser` at the end of the edge. */
  node?: Maybe<AirdropUser>;
};

/** Grouping methods for `AirdropUser` for usage during aggregation. */
export enum AirdropUsersGroupBy {
  AirdropId = 'AIRDROP_ID',
  Amount = 'AMOUNT',
  CreateAt = 'CREATE_AT',
  Id = 'ID',
  Status = 'STATUS',
  UpdateAt = 'UPDATE_AT',
  User = 'USER'
}

export type AirdropUsersHavingAverageInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
};

export type AirdropUsersHavingDistinctCountInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
};

/** Conditions for `AirdropUser` aggregates. */
export type AirdropUsersHavingInput = {
  AND?: InputMaybe<Array<AirdropUsersHavingInput>>;
  OR?: InputMaybe<Array<AirdropUsersHavingInput>>;
  average?: InputMaybe<AirdropUsersHavingAverageInput>;
  distinctCount?: InputMaybe<AirdropUsersHavingDistinctCountInput>;
  max?: InputMaybe<AirdropUsersHavingMaxInput>;
  min?: InputMaybe<AirdropUsersHavingMinInput>;
  stddevPopulation?: InputMaybe<AirdropUsersHavingStddevPopulationInput>;
  stddevSample?: InputMaybe<AirdropUsersHavingStddevSampleInput>;
  sum?: InputMaybe<AirdropUsersHavingSumInput>;
  variancePopulation?: InputMaybe<AirdropUsersHavingVariancePopulationInput>;
  varianceSample?: InputMaybe<AirdropUsersHavingVarianceSampleInput>;
};

export type AirdropUsersHavingMaxInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
};

export type AirdropUsersHavingMinInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
};

export type AirdropUsersHavingStddevPopulationInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
};

export type AirdropUsersHavingStddevSampleInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
};

export type AirdropUsersHavingSumInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
};

export type AirdropUsersHavingVariancePopulationInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
};

export type AirdropUsersHavingVarianceSampleInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
};

/** Methods to use when ordering `AirdropUser`. */
export enum AirdropUsersOrderBy {
  AirdropByAirdropIdCreateAtAsc = 'AIRDROP_BY_AIRDROP_ID__CREATE_AT_ASC',
  AirdropByAirdropIdCreateAtDesc = 'AIRDROP_BY_AIRDROP_ID__CREATE_AT_DESC',
  AirdropByAirdropIdEndTimeAsc = 'AIRDROP_BY_AIRDROP_ID__END_TIME_ASC',
  AirdropByAirdropIdEndTimeDesc = 'AIRDROP_BY_AIRDROP_ID__END_TIME_DESC',
  AirdropByAirdropIdHasWithdrawnAsc = 'AIRDROP_BY_AIRDROP_ID__HAS_WITHDRAWN_ASC',
  AirdropByAirdropIdHasWithdrawnDesc = 'AIRDROP_BY_AIRDROP_ID__HAS_WITHDRAWN_DESC',
  AirdropByAirdropIdIdAsc = 'AIRDROP_BY_AIRDROP_ID__ID_ASC',
  AirdropByAirdropIdIdDesc = 'AIRDROP_BY_AIRDROP_ID__ID_DESC',
  AirdropByAirdropIdStartTimeAsc = 'AIRDROP_BY_AIRDROP_ID__START_TIME_ASC',
  AirdropByAirdropIdStartTimeDesc = 'AIRDROP_BY_AIRDROP_ID__START_TIME_DESC',
  AirdropByAirdropIdTokenAddressAsc = 'AIRDROP_BY_AIRDROP_ID__TOKEN_ADDRESS_ASC',
  AirdropByAirdropIdTokenAddressDesc = 'AIRDROP_BY_AIRDROP_ID__TOKEN_ADDRESS_DESC',
  AirdropByAirdropIdUpdateAtAsc = 'AIRDROP_BY_AIRDROP_ID__UPDATE_AT_ASC',
  AirdropByAirdropIdUpdateAtDesc = 'AIRDROP_BY_AIRDROP_ID__UPDATE_AT_DESC',
  AirdropByAirdropIdWithdrawAmountAsc = 'AIRDROP_BY_AIRDROP_ID__WITHDRAW_AMOUNT_ASC',
  AirdropByAirdropIdWithdrawAmountDesc = 'AIRDROP_BY_AIRDROP_ID__WITHDRAW_AMOUNT_DESC',
  AirdropIdAsc = 'AIRDROP_ID_ASC',
  AirdropIdDesc = 'AIRDROP_ID_DESC',
  AmountAsc = 'AMOUNT_ASC',
  AmountDesc = 'AMOUNT_DESC',
  CreateAtAsc = 'CREATE_AT_ASC',
  CreateAtDesc = 'CREATE_AT_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  StatusAsc = 'STATUS_ASC',
  StatusDesc = 'STATUS_DESC',
  UpdateAtAsc = 'UPDATE_AT_ASC',
  UpdateAtDesc = 'UPDATE_AT_DESC',
  UserAsc = 'USER_ASC',
  UserDesc = 'USER_DESC'
}

export type AirdropVariancePopulationAggregates = {
  __typename?: 'AirdropVariancePopulationAggregates';
  /** Population variance of withdrawAmount across the matching connection */
  withdrawAmount?: Maybe<Scalars['BigFloat']['output']>;
};

export type AirdropVarianceSampleAggregates = {
  __typename?: 'AirdropVarianceSampleAggregates';
  /** Sample variance of withdrawAmount across the matching connection */
  withdrawAmount?: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `Airdrop` values. */
export type AirdropsConnection = {
  __typename?: 'AirdropsConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<AirdropAggregates>;
  /** A list of edges which contains the `Airdrop` and cursor to aid in pagination. */
  edges: Array<AirdropsEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<AirdropAggregates>>;
  /** A list of `Airdrop` objects. */
  nodes: Array<Maybe<Airdrop>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Airdrop` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Airdrop` values. */
export type AirdropsConnectionGroupedAggregatesArgs = {
  groupBy: Array<AirdropsGroupBy>;
  having?: InputMaybe<AirdropsHavingInput>;
};

/** A `Airdrop` edge in the connection. */
export type AirdropsEdge = {
  __typename?: 'AirdropsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `Airdrop` at the end of the edge. */
  node?: Maybe<Airdrop>;
};

/** Grouping methods for `Airdrop` for usage during aggregation. */
export enum AirdropsGroupBy {
  CreateAt = 'CREATE_AT',
  EndTime = 'END_TIME',
  EndTimeTruncatedToDay = 'END_TIME_TRUNCATED_TO_DAY',
  EndTimeTruncatedToHour = 'END_TIME_TRUNCATED_TO_HOUR',
  HasWithdrawn = 'HAS_WITHDRAWN',
  Id = 'ID',
  StartTime = 'START_TIME',
  StartTimeTruncatedToDay = 'START_TIME_TRUNCATED_TO_DAY',
  StartTimeTruncatedToHour = 'START_TIME_TRUNCATED_TO_HOUR',
  TokenAddress = 'TOKEN_ADDRESS',
  UpdateAt = 'UPDATE_AT',
  WithdrawAmount = 'WITHDRAW_AMOUNT'
}

export type AirdropsHavingAverageInput = {
  endTime?: InputMaybe<HavingDatetimeFilter>;
  startTime?: InputMaybe<HavingDatetimeFilter>;
  withdrawAmount?: InputMaybe<HavingBigfloatFilter>;
};

export type AirdropsHavingDistinctCountInput = {
  endTime?: InputMaybe<HavingDatetimeFilter>;
  startTime?: InputMaybe<HavingDatetimeFilter>;
  withdrawAmount?: InputMaybe<HavingBigfloatFilter>;
};

/** Conditions for `Airdrop` aggregates. */
export type AirdropsHavingInput = {
  AND?: InputMaybe<Array<AirdropsHavingInput>>;
  OR?: InputMaybe<Array<AirdropsHavingInput>>;
  average?: InputMaybe<AirdropsHavingAverageInput>;
  distinctCount?: InputMaybe<AirdropsHavingDistinctCountInput>;
  max?: InputMaybe<AirdropsHavingMaxInput>;
  min?: InputMaybe<AirdropsHavingMinInput>;
  stddevPopulation?: InputMaybe<AirdropsHavingStddevPopulationInput>;
  stddevSample?: InputMaybe<AirdropsHavingStddevSampleInput>;
  sum?: InputMaybe<AirdropsHavingSumInput>;
  variancePopulation?: InputMaybe<AirdropsHavingVariancePopulationInput>;
  varianceSample?: InputMaybe<AirdropsHavingVarianceSampleInput>;
};

export type AirdropsHavingMaxInput = {
  endTime?: InputMaybe<HavingDatetimeFilter>;
  startTime?: InputMaybe<HavingDatetimeFilter>;
  withdrawAmount?: InputMaybe<HavingBigfloatFilter>;
};

export type AirdropsHavingMinInput = {
  endTime?: InputMaybe<HavingDatetimeFilter>;
  startTime?: InputMaybe<HavingDatetimeFilter>;
  withdrawAmount?: InputMaybe<HavingBigfloatFilter>;
};

export type AirdropsHavingStddevPopulationInput = {
  endTime?: InputMaybe<HavingDatetimeFilter>;
  startTime?: InputMaybe<HavingDatetimeFilter>;
  withdrawAmount?: InputMaybe<HavingBigfloatFilter>;
};

export type AirdropsHavingStddevSampleInput = {
  endTime?: InputMaybe<HavingDatetimeFilter>;
  startTime?: InputMaybe<HavingDatetimeFilter>;
  withdrawAmount?: InputMaybe<HavingBigfloatFilter>;
};

export type AirdropsHavingSumInput = {
  endTime?: InputMaybe<HavingDatetimeFilter>;
  startTime?: InputMaybe<HavingDatetimeFilter>;
  withdrawAmount?: InputMaybe<HavingBigfloatFilter>;
};

export type AirdropsHavingVariancePopulationInput = {
  endTime?: InputMaybe<HavingDatetimeFilter>;
  startTime?: InputMaybe<HavingDatetimeFilter>;
  withdrawAmount?: InputMaybe<HavingBigfloatFilter>;
};

export type AirdropsHavingVarianceSampleInput = {
  endTime?: InputMaybe<HavingDatetimeFilter>;
  startTime?: InputMaybe<HavingDatetimeFilter>;
  withdrawAmount?: InputMaybe<HavingBigfloatFilter>;
};

/** Methods to use when ordering `Airdrop`. */
export enum AirdropsOrderBy {
  AirdropUsersAverageAirdropIdAsc = 'AIRDROP_USERS_AVERAGE_AIRDROP_ID_ASC',
  AirdropUsersAverageAirdropIdDesc = 'AIRDROP_USERS_AVERAGE_AIRDROP_ID_DESC',
  AirdropUsersAverageAmountAsc = 'AIRDROP_USERS_AVERAGE_AMOUNT_ASC',
  AirdropUsersAverageAmountDesc = 'AIRDROP_USERS_AVERAGE_AMOUNT_DESC',
  AirdropUsersAverageBlockRangeAsc = 'AIRDROP_USERS_AVERAGE_BLOCK_RANGE_ASC',
  AirdropUsersAverageBlockRangeDesc = 'AIRDROP_USERS_AVERAGE_BLOCK_RANGE_DESC',
  AirdropUsersAverageCreateAtAsc = 'AIRDROP_USERS_AVERAGE_CREATE_AT_ASC',
  AirdropUsersAverageCreateAtDesc = 'AIRDROP_USERS_AVERAGE_CREATE_AT_DESC',
  AirdropUsersAverageIdAsc = 'AIRDROP_USERS_AVERAGE_ID_ASC',
  AirdropUsersAverageIdDesc = 'AIRDROP_USERS_AVERAGE_ID_DESC',
  AirdropUsersAverageStatusAsc = 'AIRDROP_USERS_AVERAGE_STATUS_ASC',
  AirdropUsersAverageStatusDesc = 'AIRDROP_USERS_AVERAGE_STATUS_DESC',
  AirdropUsersAverageUpdateAtAsc = 'AIRDROP_USERS_AVERAGE_UPDATE_AT_ASC',
  AirdropUsersAverageUpdateAtDesc = 'AIRDROP_USERS_AVERAGE_UPDATE_AT_DESC',
  AirdropUsersAverageUserAsc = 'AIRDROP_USERS_AVERAGE_USER_ASC',
  AirdropUsersAverageUserDesc = 'AIRDROP_USERS_AVERAGE_USER_DESC',
  AirdropUsersByAirdropIdCountAsc = 'AIRDROP_USERS_BY_AIRDROP_ID__COUNT_ASC',
  AirdropUsersByAirdropIdCountDesc = 'AIRDROP_USERS_BY_AIRDROP_ID__COUNT_DESC',
  AirdropUsersCountAsc = 'AIRDROP_USERS_COUNT_ASC',
  AirdropUsersCountDesc = 'AIRDROP_USERS_COUNT_DESC',
  AirdropUsersDistinctCountAirdropIdAsc = 'AIRDROP_USERS_DISTINCT_COUNT_AIRDROP_ID_ASC',
  AirdropUsersDistinctCountAirdropIdDesc = 'AIRDROP_USERS_DISTINCT_COUNT_AIRDROP_ID_DESC',
  AirdropUsersDistinctCountAmountAsc = 'AIRDROP_USERS_DISTINCT_COUNT_AMOUNT_ASC',
  AirdropUsersDistinctCountAmountDesc = 'AIRDROP_USERS_DISTINCT_COUNT_AMOUNT_DESC',
  AirdropUsersDistinctCountBlockRangeAsc = 'AIRDROP_USERS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  AirdropUsersDistinctCountBlockRangeDesc = 'AIRDROP_USERS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  AirdropUsersDistinctCountCreateAtAsc = 'AIRDROP_USERS_DISTINCT_COUNT_CREATE_AT_ASC',
  AirdropUsersDistinctCountCreateAtDesc = 'AIRDROP_USERS_DISTINCT_COUNT_CREATE_AT_DESC',
  AirdropUsersDistinctCountIdAsc = 'AIRDROP_USERS_DISTINCT_COUNT_ID_ASC',
  AirdropUsersDistinctCountIdDesc = 'AIRDROP_USERS_DISTINCT_COUNT_ID_DESC',
  AirdropUsersDistinctCountStatusAsc = 'AIRDROP_USERS_DISTINCT_COUNT_STATUS_ASC',
  AirdropUsersDistinctCountStatusDesc = 'AIRDROP_USERS_DISTINCT_COUNT_STATUS_DESC',
  AirdropUsersDistinctCountUpdateAtAsc = 'AIRDROP_USERS_DISTINCT_COUNT_UPDATE_AT_ASC',
  AirdropUsersDistinctCountUpdateAtDesc = 'AIRDROP_USERS_DISTINCT_COUNT_UPDATE_AT_DESC',
  AirdropUsersDistinctCountUserAsc = 'AIRDROP_USERS_DISTINCT_COUNT_USER_ASC',
  AirdropUsersDistinctCountUserDesc = 'AIRDROP_USERS_DISTINCT_COUNT_USER_DESC',
  AirdropUsersMaxAirdropIdAsc = 'AIRDROP_USERS_MAX_AIRDROP_ID_ASC',
  AirdropUsersMaxAirdropIdDesc = 'AIRDROP_USERS_MAX_AIRDROP_ID_DESC',
  AirdropUsersMaxAmountAsc = 'AIRDROP_USERS_MAX_AMOUNT_ASC',
  AirdropUsersMaxAmountDesc = 'AIRDROP_USERS_MAX_AMOUNT_DESC',
  AirdropUsersMaxBlockRangeAsc = 'AIRDROP_USERS_MAX_BLOCK_RANGE_ASC',
  AirdropUsersMaxBlockRangeDesc = 'AIRDROP_USERS_MAX_BLOCK_RANGE_DESC',
  AirdropUsersMaxCreateAtAsc = 'AIRDROP_USERS_MAX_CREATE_AT_ASC',
  AirdropUsersMaxCreateAtDesc = 'AIRDROP_USERS_MAX_CREATE_AT_DESC',
  AirdropUsersMaxIdAsc = 'AIRDROP_USERS_MAX_ID_ASC',
  AirdropUsersMaxIdDesc = 'AIRDROP_USERS_MAX_ID_DESC',
  AirdropUsersMaxStatusAsc = 'AIRDROP_USERS_MAX_STATUS_ASC',
  AirdropUsersMaxStatusDesc = 'AIRDROP_USERS_MAX_STATUS_DESC',
  AirdropUsersMaxUpdateAtAsc = 'AIRDROP_USERS_MAX_UPDATE_AT_ASC',
  AirdropUsersMaxUpdateAtDesc = 'AIRDROP_USERS_MAX_UPDATE_AT_DESC',
  AirdropUsersMaxUserAsc = 'AIRDROP_USERS_MAX_USER_ASC',
  AirdropUsersMaxUserDesc = 'AIRDROP_USERS_MAX_USER_DESC',
  AirdropUsersMinAirdropIdAsc = 'AIRDROP_USERS_MIN_AIRDROP_ID_ASC',
  AirdropUsersMinAirdropIdDesc = 'AIRDROP_USERS_MIN_AIRDROP_ID_DESC',
  AirdropUsersMinAmountAsc = 'AIRDROP_USERS_MIN_AMOUNT_ASC',
  AirdropUsersMinAmountDesc = 'AIRDROP_USERS_MIN_AMOUNT_DESC',
  AirdropUsersMinBlockRangeAsc = 'AIRDROP_USERS_MIN_BLOCK_RANGE_ASC',
  AirdropUsersMinBlockRangeDesc = 'AIRDROP_USERS_MIN_BLOCK_RANGE_DESC',
  AirdropUsersMinCreateAtAsc = 'AIRDROP_USERS_MIN_CREATE_AT_ASC',
  AirdropUsersMinCreateAtDesc = 'AIRDROP_USERS_MIN_CREATE_AT_DESC',
  AirdropUsersMinIdAsc = 'AIRDROP_USERS_MIN_ID_ASC',
  AirdropUsersMinIdDesc = 'AIRDROP_USERS_MIN_ID_DESC',
  AirdropUsersMinStatusAsc = 'AIRDROP_USERS_MIN_STATUS_ASC',
  AirdropUsersMinStatusDesc = 'AIRDROP_USERS_MIN_STATUS_DESC',
  AirdropUsersMinUpdateAtAsc = 'AIRDROP_USERS_MIN_UPDATE_AT_ASC',
  AirdropUsersMinUpdateAtDesc = 'AIRDROP_USERS_MIN_UPDATE_AT_DESC',
  AirdropUsersMinUserAsc = 'AIRDROP_USERS_MIN_USER_ASC',
  AirdropUsersMinUserDesc = 'AIRDROP_USERS_MIN_USER_DESC',
  AirdropUsersStddevPopulationAirdropIdAsc = 'AIRDROP_USERS_STDDEV_POPULATION_AIRDROP_ID_ASC',
  AirdropUsersStddevPopulationAirdropIdDesc = 'AIRDROP_USERS_STDDEV_POPULATION_AIRDROP_ID_DESC',
  AirdropUsersStddevPopulationAmountAsc = 'AIRDROP_USERS_STDDEV_POPULATION_AMOUNT_ASC',
  AirdropUsersStddevPopulationAmountDesc = 'AIRDROP_USERS_STDDEV_POPULATION_AMOUNT_DESC',
  AirdropUsersStddevPopulationBlockRangeAsc = 'AIRDROP_USERS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  AirdropUsersStddevPopulationBlockRangeDesc = 'AIRDROP_USERS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  AirdropUsersStddevPopulationCreateAtAsc = 'AIRDROP_USERS_STDDEV_POPULATION_CREATE_AT_ASC',
  AirdropUsersStddevPopulationCreateAtDesc = 'AIRDROP_USERS_STDDEV_POPULATION_CREATE_AT_DESC',
  AirdropUsersStddevPopulationIdAsc = 'AIRDROP_USERS_STDDEV_POPULATION_ID_ASC',
  AirdropUsersStddevPopulationIdDesc = 'AIRDROP_USERS_STDDEV_POPULATION_ID_DESC',
  AirdropUsersStddevPopulationStatusAsc = 'AIRDROP_USERS_STDDEV_POPULATION_STATUS_ASC',
  AirdropUsersStddevPopulationStatusDesc = 'AIRDROP_USERS_STDDEV_POPULATION_STATUS_DESC',
  AirdropUsersStddevPopulationUpdateAtAsc = 'AIRDROP_USERS_STDDEV_POPULATION_UPDATE_AT_ASC',
  AirdropUsersStddevPopulationUpdateAtDesc = 'AIRDROP_USERS_STDDEV_POPULATION_UPDATE_AT_DESC',
  AirdropUsersStddevPopulationUserAsc = 'AIRDROP_USERS_STDDEV_POPULATION_USER_ASC',
  AirdropUsersStddevPopulationUserDesc = 'AIRDROP_USERS_STDDEV_POPULATION_USER_DESC',
  AirdropUsersStddevSampleAirdropIdAsc = 'AIRDROP_USERS_STDDEV_SAMPLE_AIRDROP_ID_ASC',
  AirdropUsersStddevSampleAirdropIdDesc = 'AIRDROP_USERS_STDDEV_SAMPLE_AIRDROP_ID_DESC',
  AirdropUsersStddevSampleAmountAsc = 'AIRDROP_USERS_STDDEV_SAMPLE_AMOUNT_ASC',
  AirdropUsersStddevSampleAmountDesc = 'AIRDROP_USERS_STDDEV_SAMPLE_AMOUNT_DESC',
  AirdropUsersStddevSampleBlockRangeAsc = 'AIRDROP_USERS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  AirdropUsersStddevSampleBlockRangeDesc = 'AIRDROP_USERS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  AirdropUsersStddevSampleCreateAtAsc = 'AIRDROP_USERS_STDDEV_SAMPLE_CREATE_AT_ASC',
  AirdropUsersStddevSampleCreateAtDesc = 'AIRDROP_USERS_STDDEV_SAMPLE_CREATE_AT_DESC',
  AirdropUsersStddevSampleIdAsc = 'AIRDROP_USERS_STDDEV_SAMPLE_ID_ASC',
  AirdropUsersStddevSampleIdDesc = 'AIRDROP_USERS_STDDEV_SAMPLE_ID_DESC',
  AirdropUsersStddevSampleStatusAsc = 'AIRDROP_USERS_STDDEV_SAMPLE_STATUS_ASC',
  AirdropUsersStddevSampleStatusDesc = 'AIRDROP_USERS_STDDEV_SAMPLE_STATUS_DESC',
  AirdropUsersStddevSampleUpdateAtAsc = 'AIRDROP_USERS_STDDEV_SAMPLE_UPDATE_AT_ASC',
  AirdropUsersStddevSampleUpdateAtDesc = 'AIRDROP_USERS_STDDEV_SAMPLE_UPDATE_AT_DESC',
  AirdropUsersStddevSampleUserAsc = 'AIRDROP_USERS_STDDEV_SAMPLE_USER_ASC',
  AirdropUsersStddevSampleUserDesc = 'AIRDROP_USERS_STDDEV_SAMPLE_USER_DESC',
  AirdropUsersSumAirdropIdAsc = 'AIRDROP_USERS_SUM_AIRDROP_ID_ASC',
  AirdropUsersSumAirdropIdDesc = 'AIRDROP_USERS_SUM_AIRDROP_ID_DESC',
  AirdropUsersSumAmountAsc = 'AIRDROP_USERS_SUM_AMOUNT_ASC',
  AirdropUsersSumAmountDesc = 'AIRDROP_USERS_SUM_AMOUNT_DESC',
  AirdropUsersSumBlockRangeAsc = 'AIRDROP_USERS_SUM_BLOCK_RANGE_ASC',
  AirdropUsersSumBlockRangeDesc = 'AIRDROP_USERS_SUM_BLOCK_RANGE_DESC',
  AirdropUsersSumCreateAtAsc = 'AIRDROP_USERS_SUM_CREATE_AT_ASC',
  AirdropUsersSumCreateAtDesc = 'AIRDROP_USERS_SUM_CREATE_AT_DESC',
  AirdropUsersSumIdAsc = 'AIRDROP_USERS_SUM_ID_ASC',
  AirdropUsersSumIdDesc = 'AIRDROP_USERS_SUM_ID_DESC',
  AirdropUsersSumStatusAsc = 'AIRDROP_USERS_SUM_STATUS_ASC',
  AirdropUsersSumStatusDesc = 'AIRDROP_USERS_SUM_STATUS_DESC',
  AirdropUsersSumUpdateAtAsc = 'AIRDROP_USERS_SUM_UPDATE_AT_ASC',
  AirdropUsersSumUpdateAtDesc = 'AIRDROP_USERS_SUM_UPDATE_AT_DESC',
  AirdropUsersSumUserAsc = 'AIRDROP_USERS_SUM_USER_ASC',
  AirdropUsersSumUserDesc = 'AIRDROP_USERS_SUM_USER_DESC',
  AirdropUsersVariancePopulationAirdropIdAsc = 'AIRDROP_USERS_VARIANCE_POPULATION_AIRDROP_ID_ASC',
  AirdropUsersVariancePopulationAirdropIdDesc = 'AIRDROP_USERS_VARIANCE_POPULATION_AIRDROP_ID_DESC',
  AirdropUsersVariancePopulationAmountAsc = 'AIRDROP_USERS_VARIANCE_POPULATION_AMOUNT_ASC',
  AirdropUsersVariancePopulationAmountDesc = 'AIRDROP_USERS_VARIANCE_POPULATION_AMOUNT_DESC',
  AirdropUsersVariancePopulationBlockRangeAsc = 'AIRDROP_USERS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  AirdropUsersVariancePopulationBlockRangeDesc = 'AIRDROP_USERS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  AirdropUsersVariancePopulationCreateAtAsc = 'AIRDROP_USERS_VARIANCE_POPULATION_CREATE_AT_ASC',
  AirdropUsersVariancePopulationCreateAtDesc = 'AIRDROP_USERS_VARIANCE_POPULATION_CREATE_AT_DESC',
  AirdropUsersVariancePopulationIdAsc = 'AIRDROP_USERS_VARIANCE_POPULATION_ID_ASC',
  AirdropUsersVariancePopulationIdDesc = 'AIRDROP_USERS_VARIANCE_POPULATION_ID_DESC',
  AirdropUsersVariancePopulationStatusAsc = 'AIRDROP_USERS_VARIANCE_POPULATION_STATUS_ASC',
  AirdropUsersVariancePopulationStatusDesc = 'AIRDROP_USERS_VARIANCE_POPULATION_STATUS_DESC',
  AirdropUsersVariancePopulationUpdateAtAsc = 'AIRDROP_USERS_VARIANCE_POPULATION_UPDATE_AT_ASC',
  AirdropUsersVariancePopulationUpdateAtDesc = 'AIRDROP_USERS_VARIANCE_POPULATION_UPDATE_AT_DESC',
  AirdropUsersVariancePopulationUserAsc = 'AIRDROP_USERS_VARIANCE_POPULATION_USER_ASC',
  AirdropUsersVariancePopulationUserDesc = 'AIRDROP_USERS_VARIANCE_POPULATION_USER_DESC',
  AirdropUsersVarianceSampleAirdropIdAsc = 'AIRDROP_USERS_VARIANCE_SAMPLE_AIRDROP_ID_ASC',
  AirdropUsersVarianceSampleAirdropIdDesc = 'AIRDROP_USERS_VARIANCE_SAMPLE_AIRDROP_ID_DESC',
  AirdropUsersVarianceSampleAmountAsc = 'AIRDROP_USERS_VARIANCE_SAMPLE_AMOUNT_ASC',
  AirdropUsersVarianceSampleAmountDesc = 'AIRDROP_USERS_VARIANCE_SAMPLE_AMOUNT_DESC',
  AirdropUsersVarianceSampleBlockRangeAsc = 'AIRDROP_USERS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  AirdropUsersVarianceSampleBlockRangeDesc = 'AIRDROP_USERS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  AirdropUsersVarianceSampleCreateAtAsc = 'AIRDROP_USERS_VARIANCE_SAMPLE_CREATE_AT_ASC',
  AirdropUsersVarianceSampleCreateAtDesc = 'AIRDROP_USERS_VARIANCE_SAMPLE_CREATE_AT_DESC',
  AirdropUsersVarianceSampleIdAsc = 'AIRDROP_USERS_VARIANCE_SAMPLE_ID_ASC',
  AirdropUsersVarianceSampleIdDesc = 'AIRDROP_USERS_VARIANCE_SAMPLE_ID_DESC',
  AirdropUsersVarianceSampleStatusAsc = 'AIRDROP_USERS_VARIANCE_SAMPLE_STATUS_ASC',
  AirdropUsersVarianceSampleStatusDesc = 'AIRDROP_USERS_VARIANCE_SAMPLE_STATUS_DESC',
  AirdropUsersVarianceSampleUpdateAtAsc = 'AIRDROP_USERS_VARIANCE_SAMPLE_UPDATE_AT_ASC',
  AirdropUsersVarianceSampleUpdateAtDesc = 'AIRDROP_USERS_VARIANCE_SAMPLE_UPDATE_AT_DESC',
  AirdropUsersVarianceSampleUserAsc = 'AIRDROP_USERS_VARIANCE_SAMPLE_USER_ASC',
  AirdropUsersVarianceSampleUserDesc = 'AIRDROP_USERS_VARIANCE_SAMPLE_USER_DESC',
  CreateAtAsc = 'CREATE_AT_ASC',
  CreateAtDesc = 'CREATE_AT_DESC',
  EndTimeAsc = 'END_TIME_ASC',
  EndTimeDesc = 'END_TIME_DESC',
  HasWithdrawnAsc = 'HAS_WITHDRAWN_ASC',
  HasWithdrawnDesc = 'HAS_WITHDRAWN_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  StartTimeAsc = 'START_TIME_ASC',
  StartTimeDesc = 'START_TIME_DESC',
  TokenAddressAsc = 'TOKEN_ADDRESS_ASC',
  TokenAddressDesc = 'TOKEN_ADDRESS_DESC',
  UpdateAtAsc = 'UPDATE_AT_ASC',
  UpdateAtDesc = 'UPDATE_AT_DESC',
  WithdrawAmountAsc = 'WITHDRAW_AMOUNT_ASC',
  WithdrawAmountDesc = 'WITHDRAW_AMOUNT_DESC'
}

/** A filter to be used against BigFloat fields. All fields are combined with a logical ‘and.’ */
export type BigFloatFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: InputMaybe<Scalars['BigFloat']['input']>;
  /** Equal to the specified value. */
  equalTo?: InputMaybe<Scalars['BigFloat']['input']>;
  /** Greater than the specified value. */
  greaterThan?: InputMaybe<Scalars['BigFloat']['input']>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: InputMaybe<Scalars['BigFloat']['input']>;
  /** Included in the specified list. */
  in?: InputMaybe<Array<Scalars['BigFloat']['input']>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: InputMaybe<Scalars['Boolean']['input']>;
  /** Less than the specified value. */
  lessThan?: InputMaybe<Scalars['BigFloat']['input']>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: InputMaybe<Scalars['BigFloat']['input']>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: InputMaybe<Scalars['BigFloat']['input']>;
  /** Not equal to the specified value. */
  notEqualTo?: InputMaybe<Scalars['BigFloat']['input']>;
  /** Not included in the specified list. */
  notIn?: InputMaybe<Array<Scalars['BigFloat']['input']>>;
};

/** A filter to be used against BigInt fields. All fields are combined with a logical ‘and.’ */
export type BigIntFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: InputMaybe<Scalars['BigInt']['input']>;
  /** Equal to the specified value. */
  equalTo?: InputMaybe<Scalars['BigInt']['input']>;
  /** Greater than the specified value. */
  greaterThan?: InputMaybe<Scalars['BigInt']['input']>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: InputMaybe<Scalars['BigInt']['input']>;
  /** Included in the specified list. */
  in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: InputMaybe<Scalars['Boolean']['input']>;
  /** Less than the specified value. */
  lessThan?: InputMaybe<Scalars['BigInt']['input']>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: InputMaybe<Scalars['BigInt']['input']>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: InputMaybe<Scalars['BigInt']['input']>;
  /** Not equal to the specified value. */
  notEqualTo?: InputMaybe<Scalars['BigInt']['input']>;
  /** Not included in the specified list. */
  notIn?: InputMaybe<Array<Scalars['BigInt']['input']>>;
};

/** A filter to be used against Boolean fields. All fields are combined with a logical ‘and.’ */
export type BooleanFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: InputMaybe<Scalars['Boolean']['input']>;
  /** Equal to the specified value. */
  equalTo?: InputMaybe<Scalars['Boolean']['input']>;
  /** Greater than the specified value. */
  greaterThan?: InputMaybe<Scalars['Boolean']['input']>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: InputMaybe<Scalars['Boolean']['input']>;
  /** Included in the specified list. */
  in?: InputMaybe<Array<Scalars['Boolean']['input']>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: InputMaybe<Scalars['Boolean']['input']>;
  /** Less than the specified value. */
  lessThan?: InputMaybe<Scalars['Boolean']['input']>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: InputMaybe<Scalars['Boolean']['input']>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: InputMaybe<Scalars['Boolean']['input']>;
  /** Not equal to the specified value. */
  notEqualTo?: InputMaybe<Scalars['Boolean']['input']>;
  /** Not included in the specified list. */
  notIn?: InputMaybe<Array<Scalars['Boolean']['input']>>;
};

export type Cach = Node & {
  __typename?: 'Cach';
  id: Scalars['String']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  value: Scalars['String']['output'];
};

export type CachAggregates = {
  __typename?: 'CachAggregates';
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  distinctCount?: Maybe<CachDistinctCountAggregates>;
  keys?: Maybe<Array<Scalars['String']['output']>>;
};

export type CachDistinctCountAggregates = {
  __typename?: 'CachDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  _blockRange?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  _id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of value across the matching connection */
  value?: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `Cach` object types. All fields are combined with a logical ‘and.’ */
export type CachFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<CachFilter>>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<CachFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<CachFilter>>;
  /** Filter by the object’s `value` field. */
  value?: InputMaybe<StringFilter>;
};

/** A connection to a list of `Cach` values. */
export type CachesConnection = {
  __typename?: 'CachesConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<CachAggregates>;
  /** A list of edges which contains the `Cach` and cursor to aid in pagination. */
  edges: Array<CachesEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<CachAggregates>>;
  /** A list of `Cach` objects. */
  nodes: Array<Maybe<Cach>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Cach` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Cach` values. */
export type CachesConnectionGroupedAggregatesArgs = {
  groupBy: Array<CachesGroupBy>;
  having?: InputMaybe<CachesHavingInput>;
};

/** A `Cach` edge in the connection. */
export type CachesEdge = {
  __typename?: 'CachesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `Cach` at the end of the edge. */
  node?: Maybe<Cach>;
};

/** Grouping methods for `Cach` for usage during aggregation. */
export enum CachesGroupBy {
  Id = 'ID',
  Value = 'VALUE'
}

/** Conditions for `Cach` aggregates. */
export type CachesHavingInput = {
  AND?: InputMaybe<Array<CachesHavingInput>>;
  OR?: InputMaybe<Array<CachesHavingInput>>;
};

/** Methods to use when ordering `Cach`. */
export enum CachesOrderBy {
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  ValueAsc = 'VALUE_ASC',
  ValueDesc = 'VALUE_DESC'
}

export enum ChannelStatus {
  Finalized = 'FINALIZED',
  Open = 'OPEN',
  Terminating = 'TERMINATING'
}

/** A filter to be used against ChannelStatus fields. All fields are combined with a logical ‘and.’ */
export type ChannelStatusFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: InputMaybe<ChannelStatus>;
  /** Equal to the specified value. */
  equalTo?: InputMaybe<ChannelStatus>;
  /** Greater than the specified value. */
  greaterThan?: InputMaybe<ChannelStatus>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: InputMaybe<ChannelStatus>;
  /** Included in the specified list. */
  in?: InputMaybe<Array<ChannelStatus>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: InputMaybe<Scalars['Boolean']['input']>;
  /** Less than the specified value. */
  lessThan?: InputMaybe<ChannelStatus>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: InputMaybe<ChannelStatus>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: InputMaybe<ChannelStatus>;
  /** Not equal to the specified value. */
  notEqualTo?: InputMaybe<ChannelStatus>;
  /** Not included in the specified list. */
  notIn?: InputMaybe<Array<ChannelStatus>>;
};

export type ConsumerController = Node & {
  __typename?: 'ConsumerController';
  consumer: Scalars['String']['output'];
  controller: Scalars['String']['output'];
  createdBlock?: Maybe<Scalars['Int']['output']>;
  id: Scalars['String']['output'];
  lastEvent?: Maybe<Scalars['String']['output']>;
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
};

export type ConsumerControllerAggregates = {
  __typename?: 'ConsumerControllerAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  average?: Maybe<ConsumerControllerAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  distinctCount?: Maybe<ConsumerControllerDistinctCountAggregates>;
  keys?: Maybe<Array<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  max?: Maybe<ConsumerControllerMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  min?: Maybe<ConsumerControllerMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevPopulation?: Maybe<ConsumerControllerStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevSample?: Maybe<ConsumerControllerStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  sum?: Maybe<ConsumerControllerSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  variancePopulation?: Maybe<ConsumerControllerVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  varianceSample?: Maybe<ConsumerControllerVarianceSampleAggregates>;
};

export type ConsumerControllerAverageAggregates = {
  __typename?: 'ConsumerControllerAverageAggregates';
  /** Mean average of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
};

export type ConsumerControllerDistinctCountAggregates = {
  __typename?: 'ConsumerControllerDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  _blockRange?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  _id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of consumer across the matching connection */
  consumer?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of controller across the matching connection */
  controller?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of lastEvent across the matching connection */
  lastEvent?: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `ConsumerController` object types. All fields are combined with a logical ‘and.’ */
export type ConsumerControllerFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<ConsumerControllerFilter>>;
  /** Filter by the object’s `consumer` field. */
  consumer?: InputMaybe<StringFilter>;
  /** Filter by the object’s `controller` field. */
  controller?: InputMaybe<StringFilter>;
  /** Filter by the object’s `createdBlock` field. */
  createdBlock?: InputMaybe<IntFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<StringFilter>;
  /** Filter by the object’s `lastEvent` field. */
  lastEvent?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<ConsumerControllerFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<ConsumerControllerFilter>>;
};

export type ConsumerControllerMaxAggregates = {
  __typename?: 'ConsumerControllerMaxAggregates';
  /** Maximum of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['Int']['output']>;
};

export type ConsumerControllerMinAggregates = {
  __typename?: 'ConsumerControllerMinAggregates';
  /** Minimum of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['Int']['output']>;
};

export type ConsumerControllerStddevPopulationAggregates = {
  __typename?: 'ConsumerControllerStddevPopulationAggregates';
  /** Population standard deviation of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
};

export type ConsumerControllerStddevSampleAggregates = {
  __typename?: 'ConsumerControllerStddevSampleAggregates';
  /** Sample standard deviation of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
};

export type ConsumerControllerSumAggregates = {
  __typename?: 'ConsumerControllerSumAggregates';
  /** Sum of createdBlock across the matching connection */
  createdBlock: Scalars['BigInt']['output'];
};

export type ConsumerControllerVariancePopulationAggregates = {
  __typename?: 'ConsumerControllerVariancePopulationAggregates';
  /** Population variance of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
};

export type ConsumerControllerVarianceSampleAggregates = {
  __typename?: 'ConsumerControllerVarianceSampleAggregates';
  /** Sample variance of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `ConsumerController` values. */
export type ConsumerControllersConnection = {
  __typename?: 'ConsumerControllersConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<ConsumerControllerAggregates>;
  /** A list of edges which contains the `ConsumerController` and cursor to aid in pagination. */
  edges: Array<ConsumerControllersEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<ConsumerControllerAggregates>>;
  /** A list of `ConsumerController` objects. */
  nodes: Array<Maybe<ConsumerController>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `ConsumerController` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `ConsumerController` values. */
export type ConsumerControllersConnectionGroupedAggregatesArgs = {
  groupBy: Array<ConsumerControllersGroupBy>;
  having?: InputMaybe<ConsumerControllersHavingInput>;
};

/** A `ConsumerController` edge in the connection. */
export type ConsumerControllersEdge = {
  __typename?: 'ConsumerControllersEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `ConsumerController` at the end of the edge. */
  node?: Maybe<ConsumerController>;
};

/** Grouping methods for `ConsumerController` for usage during aggregation. */
export enum ConsumerControllersGroupBy {
  Consumer = 'CONSUMER',
  Controller = 'CONTROLLER',
  CreatedBlock = 'CREATED_BLOCK',
  Id = 'ID',
  LastEvent = 'LAST_EVENT'
}

export type ConsumerControllersHavingAverageInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
};

export type ConsumerControllersHavingDistinctCountInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
};

/** Conditions for `ConsumerController` aggregates. */
export type ConsumerControllersHavingInput = {
  AND?: InputMaybe<Array<ConsumerControllersHavingInput>>;
  OR?: InputMaybe<Array<ConsumerControllersHavingInput>>;
  average?: InputMaybe<ConsumerControllersHavingAverageInput>;
  distinctCount?: InputMaybe<ConsumerControllersHavingDistinctCountInput>;
  max?: InputMaybe<ConsumerControllersHavingMaxInput>;
  min?: InputMaybe<ConsumerControllersHavingMinInput>;
  stddevPopulation?: InputMaybe<ConsumerControllersHavingStddevPopulationInput>;
  stddevSample?: InputMaybe<ConsumerControllersHavingStddevSampleInput>;
  sum?: InputMaybe<ConsumerControllersHavingSumInput>;
  variancePopulation?: InputMaybe<ConsumerControllersHavingVariancePopulationInput>;
  varianceSample?: InputMaybe<ConsumerControllersHavingVarianceSampleInput>;
};

export type ConsumerControllersHavingMaxInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
};

export type ConsumerControllersHavingMinInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
};

export type ConsumerControllersHavingStddevPopulationInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
};

export type ConsumerControllersHavingStddevSampleInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
};

export type ConsumerControllersHavingSumInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
};

export type ConsumerControllersHavingVariancePopulationInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
};

export type ConsumerControllersHavingVarianceSampleInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
};

/** Methods to use when ordering `ConsumerController`. */
export enum ConsumerControllersOrderBy {
  ConsumerAsc = 'CONSUMER_ASC',
  ConsumerDesc = 'CONSUMER_DESC',
  ControllerAsc = 'CONTROLLER_ASC',
  ControllerDesc = 'CONTROLLER_DESC',
  CreatedBlockAsc = 'CREATED_BLOCK_ASC',
  CreatedBlockDesc = 'CREATED_BLOCK_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  LastEventAsc = 'LAST_EVENT_ASC',
  LastEventDesc = 'LAST_EVENT_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

export type ConsumerQueryReward = Node & {
  __typename?: 'ConsumerQueryReward';
  consumer: Scalars['String']['output'];
  createAt: Scalars['Datetime']['output'];
  /** Reads a single `Deployment` that is related to this `ConsumerQueryReward`. */
  deployment?: Maybe<Deployment>;
  deploymentId: Scalars['String']['output'];
  id: Scalars['String']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  orderId: Scalars['String']['output'];
  orderType: OrderType;
  /** Reads a single `Project` that is related to this `ConsumerQueryReward`. */
  project?: Maybe<Project>;
  projectId: Scalars['String']['output'];
  refunded: Scalars['BigFloat']['output'];
  spent: Scalars['BigFloat']['output'];
  updateAt: Scalars['Datetime']['output'];
};

export type ConsumerQueryRewardAggregates = {
  __typename?: 'ConsumerQueryRewardAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  average?: Maybe<ConsumerQueryRewardAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  distinctCount?: Maybe<ConsumerQueryRewardDistinctCountAggregates>;
  keys?: Maybe<Array<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  max?: Maybe<ConsumerQueryRewardMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  min?: Maybe<ConsumerQueryRewardMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevPopulation?: Maybe<ConsumerQueryRewardStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevSample?: Maybe<ConsumerQueryRewardStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  sum?: Maybe<ConsumerQueryRewardSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  variancePopulation?: Maybe<ConsumerQueryRewardVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  varianceSample?: Maybe<ConsumerQueryRewardVarianceSampleAggregates>;
};

/** A filter to be used against aggregates of `ConsumerQueryReward` object types. */
export type ConsumerQueryRewardAggregatesFilter = {
  /** Mean average aggregate over matching `ConsumerQueryReward` objects. */
  average?: InputMaybe<ConsumerQueryRewardAverageAggregateFilter>;
  /** Distinct count aggregate over matching `ConsumerQueryReward` objects. */
  distinctCount?: InputMaybe<ConsumerQueryRewardDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `ConsumerQueryReward` object to be included within the aggregate. */
  filter?: InputMaybe<ConsumerQueryRewardFilter>;
  /** Maximum aggregate over matching `ConsumerQueryReward` objects. */
  max?: InputMaybe<ConsumerQueryRewardMaxAggregateFilter>;
  /** Minimum aggregate over matching `ConsumerQueryReward` objects. */
  min?: InputMaybe<ConsumerQueryRewardMinAggregateFilter>;
  /** Population standard deviation aggregate over matching `ConsumerQueryReward` objects. */
  stddevPopulation?: InputMaybe<ConsumerQueryRewardStddevPopulationAggregateFilter>;
  /** Sample standard deviation aggregate over matching `ConsumerQueryReward` objects. */
  stddevSample?: InputMaybe<ConsumerQueryRewardStddevSampleAggregateFilter>;
  /** Sum aggregate over matching `ConsumerQueryReward` objects. */
  sum?: InputMaybe<ConsumerQueryRewardSumAggregateFilter>;
  /** Population variance aggregate over matching `ConsumerQueryReward` objects. */
  variancePopulation?: InputMaybe<ConsumerQueryRewardVariancePopulationAggregateFilter>;
  /** Sample variance aggregate over matching `ConsumerQueryReward` objects. */
  varianceSample?: InputMaybe<ConsumerQueryRewardVarianceSampleAggregateFilter>;
};

export type ConsumerQueryRewardAverageAggregateFilter = {
  refunded?: InputMaybe<BigFloatFilter>;
  spent?: InputMaybe<BigFloatFilter>;
};

export type ConsumerQueryRewardAverageAggregates = {
  __typename?: 'ConsumerQueryRewardAverageAggregates';
  /** Mean average of refunded across the matching connection */
  refunded?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of spent across the matching connection */
  spent?: Maybe<Scalars['BigFloat']['output']>;
};

export type ConsumerQueryRewardDistinctCountAggregateFilter = {
  _blockRange?: InputMaybe<BigIntFilter>;
  _id?: InputMaybe<BigIntFilter>;
  consumer?: InputMaybe<BigIntFilter>;
  createAt?: InputMaybe<BigIntFilter>;
  deploymentId?: InputMaybe<BigIntFilter>;
  id?: InputMaybe<BigIntFilter>;
  orderId?: InputMaybe<BigIntFilter>;
  orderType?: InputMaybe<BigIntFilter>;
  projectId?: InputMaybe<BigIntFilter>;
  refunded?: InputMaybe<BigIntFilter>;
  spent?: InputMaybe<BigIntFilter>;
  updateAt?: InputMaybe<BigIntFilter>;
};

export type ConsumerQueryRewardDistinctCountAggregates = {
  __typename?: 'ConsumerQueryRewardDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  _blockRange?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  _id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of consumer across the matching connection */
  consumer?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createAt across the matching connection */
  createAt?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of deploymentId across the matching connection */
  deploymentId?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of orderId across the matching connection */
  orderId?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of orderType across the matching connection */
  orderType?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of projectId across the matching connection */
  projectId?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of refunded across the matching connection */
  refunded?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of spent across the matching connection */
  spent?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of updateAt across the matching connection */
  updateAt?: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `ConsumerQueryReward` object types. All fields are combined with a logical ‘and.’ */
export type ConsumerQueryRewardFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<ConsumerQueryRewardFilter>>;
  /** Filter by the object’s `consumer` field. */
  consumer?: InputMaybe<StringFilter>;
  /** Filter by the object’s `createAt` field. */
  createAt?: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `deployment` relation. */
  deployment?: InputMaybe<DeploymentFilter>;
  /** Filter by the object’s `deploymentId` field. */
  deploymentId?: InputMaybe<StringFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<ConsumerQueryRewardFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<ConsumerQueryRewardFilter>>;
  /** Filter by the object’s `orderId` field. */
  orderId?: InputMaybe<StringFilter>;
  /** Filter by the object’s `orderType` field. */
  orderType?: InputMaybe<OrderTypeFilter>;
  /** Filter by the object’s `project` relation. */
  project?: InputMaybe<ProjectFilter>;
  /** Filter by the object’s `projectId` field. */
  projectId?: InputMaybe<StringFilter>;
  /** Filter by the object’s `refunded` field. */
  refunded?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `spent` field. */
  spent?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `updateAt` field. */
  updateAt?: InputMaybe<DatetimeFilter>;
};

export type ConsumerQueryRewardMaxAggregateFilter = {
  refunded?: InputMaybe<BigFloatFilter>;
  spent?: InputMaybe<BigFloatFilter>;
};

export type ConsumerQueryRewardMaxAggregates = {
  __typename?: 'ConsumerQueryRewardMaxAggregates';
  /** Maximum of refunded across the matching connection */
  refunded?: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of spent across the matching connection */
  spent?: Maybe<Scalars['BigFloat']['output']>;
};

export type ConsumerQueryRewardMinAggregateFilter = {
  refunded?: InputMaybe<BigFloatFilter>;
  spent?: InputMaybe<BigFloatFilter>;
};

export type ConsumerQueryRewardMinAggregates = {
  __typename?: 'ConsumerQueryRewardMinAggregates';
  /** Minimum of refunded across the matching connection */
  refunded?: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of spent across the matching connection */
  spent?: Maybe<Scalars['BigFloat']['output']>;
};

export type ConsumerQueryRewardStddevPopulationAggregateFilter = {
  refunded?: InputMaybe<BigFloatFilter>;
  spent?: InputMaybe<BigFloatFilter>;
};

export type ConsumerQueryRewardStddevPopulationAggregates = {
  __typename?: 'ConsumerQueryRewardStddevPopulationAggregates';
  /** Population standard deviation of refunded across the matching connection */
  refunded?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of spent across the matching connection */
  spent?: Maybe<Scalars['BigFloat']['output']>;
};

export type ConsumerQueryRewardStddevSampleAggregateFilter = {
  refunded?: InputMaybe<BigFloatFilter>;
  spent?: InputMaybe<BigFloatFilter>;
};

export type ConsumerQueryRewardStddevSampleAggregates = {
  __typename?: 'ConsumerQueryRewardStddevSampleAggregates';
  /** Sample standard deviation of refunded across the matching connection */
  refunded?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of spent across the matching connection */
  spent?: Maybe<Scalars['BigFloat']['output']>;
};

export type ConsumerQueryRewardSumAggregateFilter = {
  refunded?: InputMaybe<BigFloatFilter>;
  spent?: InputMaybe<BigFloatFilter>;
};

export type ConsumerQueryRewardSumAggregates = {
  __typename?: 'ConsumerQueryRewardSumAggregates';
  /** Sum of refunded across the matching connection */
  refunded: Scalars['BigFloat']['output'];
  /** Sum of spent across the matching connection */
  spent: Scalars['BigFloat']['output'];
};

/** A connection to a list of `ConsumerQueryRewardSummary` values. */
export type ConsumerQueryRewardSummariesConnection = {
  __typename?: 'ConsumerQueryRewardSummariesConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<ConsumerQueryRewardSummaryAggregates>;
  /** A list of edges which contains the `ConsumerQueryRewardSummary` and cursor to aid in pagination. */
  edges: Array<ConsumerQueryRewardSummariesEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<ConsumerQueryRewardSummaryAggregates>>;
  /** A list of `ConsumerQueryRewardSummary` objects. */
  nodes: Array<Maybe<ConsumerQueryRewardSummary>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `ConsumerQueryRewardSummary` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `ConsumerQueryRewardSummary` values. */
export type ConsumerQueryRewardSummariesConnectionGroupedAggregatesArgs = {
  groupBy: Array<ConsumerQueryRewardSummariesGroupBy>;
  having?: InputMaybe<ConsumerQueryRewardSummariesHavingInput>;
};

/** A `ConsumerQueryRewardSummary` edge in the connection. */
export type ConsumerQueryRewardSummariesEdge = {
  __typename?: 'ConsumerQueryRewardSummariesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `ConsumerQueryRewardSummary` at the end of the edge. */
  node?: Maybe<ConsumerQueryRewardSummary>;
};

/** Grouping methods for `ConsumerQueryRewardSummary` for usage during aggregation. */
export enum ConsumerQueryRewardSummariesGroupBy {
  Consumer = 'CONSUMER',
  CreateAt = 'CREATE_AT',
  CreateAtTruncatedToDay = 'CREATE_AT_TRUNCATED_TO_DAY',
  CreateAtTruncatedToHour = 'CREATE_AT_TRUNCATED_TO_HOUR',
  DeploymentId = 'DEPLOYMENT_ID',
  Id = 'ID',
  OrderType = 'ORDER_TYPE',
  ProjectId = 'PROJECT_ID',
  TotalRefunded = 'TOTAL_REFUNDED',
  TotalSpent = 'TOTAL_SPENT',
  UpdateAt = 'UPDATE_AT',
  UpdateAtTruncatedToDay = 'UPDATE_AT_TRUNCATED_TO_DAY',
  UpdateAtTruncatedToHour = 'UPDATE_AT_TRUNCATED_TO_HOUR'
}

export type ConsumerQueryRewardSummariesHavingAverageInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  totalRefunded?: InputMaybe<HavingBigfloatFilter>;
  totalSpent?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type ConsumerQueryRewardSummariesHavingDistinctCountInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  totalRefunded?: InputMaybe<HavingBigfloatFilter>;
  totalSpent?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

/** Conditions for `ConsumerQueryRewardSummary` aggregates. */
export type ConsumerQueryRewardSummariesHavingInput = {
  AND?: InputMaybe<Array<ConsumerQueryRewardSummariesHavingInput>>;
  OR?: InputMaybe<Array<ConsumerQueryRewardSummariesHavingInput>>;
  average?: InputMaybe<ConsumerQueryRewardSummariesHavingAverageInput>;
  distinctCount?: InputMaybe<ConsumerQueryRewardSummariesHavingDistinctCountInput>;
  max?: InputMaybe<ConsumerQueryRewardSummariesHavingMaxInput>;
  min?: InputMaybe<ConsumerQueryRewardSummariesHavingMinInput>;
  stddevPopulation?: InputMaybe<ConsumerQueryRewardSummariesHavingStddevPopulationInput>;
  stddevSample?: InputMaybe<ConsumerQueryRewardSummariesHavingStddevSampleInput>;
  sum?: InputMaybe<ConsumerQueryRewardSummariesHavingSumInput>;
  variancePopulation?: InputMaybe<ConsumerQueryRewardSummariesHavingVariancePopulationInput>;
  varianceSample?: InputMaybe<ConsumerQueryRewardSummariesHavingVarianceSampleInput>;
};

export type ConsumerQueryRewardSummariesHavingMaxInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  totalRefunded?: InputMaybe<HavingBigfloatFilter>;
  totalSpent?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type ConsumerQueryRewardSummariesHavingMinInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  totalRefunded?: InputMaybe<HavingBigfloatFilter>;
  totalSpent?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type ConsumerQueryRewardSummariesHavingStddevPopulationInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  totalRefunded?: InputMaybe<HavingBigfloatFilter>;
  totalSpent?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type ConsumerQueryRewardSummariesHavingStddevSampleInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  totalRefunded?: InputMaybe<HavingBigfloatFilter>;
  totalSpent?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type ConsumerQueryRewardSummariesHavingSumInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  totalRefunded?: InputMaybe<HavingBigfloatFilter>;
  totalSpent?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type ConsumerQueryRewardSummariesHavingVariancePopulationInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  totalRefunded?: InputMaybe<HavingBigfloatFilter>;
  totalSpent?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type ConsumerQueryRewardSummariesHavingVarianceSampleInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  totalRefunded?: InputMaybe<HavingBigfloatFilter>;
  totalSpent?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

/** Methods to use when ordering `ConsumerQueryRewardSummary`. */
export enum ConsumerQueryRewardSummariesOrderBy {
  ConsumerAsc = 'CONSUMER_ASC',
  ConsumerDesc = 'CONSUMER_DESC',
  CreateAtAsc = 'CREATE_AT_ASC',
  CreateAtDesc = 'CREATE_AT_DESC',
  DeploymentByDeploymentIdCreatedBlockAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_ASC',
  DeploymentByDeploymentIdCreatedBlockDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_DESC',
  DeploymentByDeploymentIdCreatedTimestampAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_ASC',
  DeploymentByDeploymentIdCreatedTimestampDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_DESC',
  DeploymentByDeploymentIdIdAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__ID_ASC',
  DeploymentByDeploymentIdIdDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__ID_DESC',
  DeploymentByDeploymentIdLastEventAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_ASC',
  DeploymentByDeploymentIdLastEventDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_DESC',
  DeploymentByDeploymentIdMetadataAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_ASC',
  DeploymentByDeploymentIdMetadataDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_DESC',
  DeploymentByDeploymentIdProjectIdAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_ASC',
  DeploymentByDeploymentIdProjectIdDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_DESC',
  DeploymentIdAsc = 'DEPLOYMENT_ID_ASC',
  DeploymentIdDesc = 'DEPLOYMENT_ID_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  Natural = 'NATURAL',
  OrderTypeAsc = 'ORDER_TYPE_ASC',
  OrderTypeDesc = 'ORDER_TYPE_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  ProjectByProjectIdBoostAllocationRatioAsc = 'PROJECT_BY_PROJECT_ID__BOOST_ALLOCATION_RATIO_ASC',
  ProjectByProjectIdBoostAllocationRatioDesc = 'PROJECT_BY_PROJECT_ID__BOOST_ALLOCATION_RATIO_DESC',
  ProjectByProjectIdCreatedBlockAsc = 'PROJECT_BY_PROJECT_ID__CREATED_BLOCK_ASC',
  ProjectByProjectIdCreatedBlockDesc = 'PROJECT_BY_PROJECT_ID__CREATED_BLOCK_DESC',
  ProjectByProjectIdCreatedTimestampAsc = 'PROJECT_BY_PROJECT_ID__CREATED_TIMESTAMP_ASC',
  ProjectByProjectIdCreatedTimestampDesc = 'PROJECT_BY_PROJECT_ID__CREATED_TIMESTAMP_DESC',
  ProjectByProjectIdDeploymentIdAsc = 'PROJECT_BY_PROJECT_ID__DEPLOYMENT_ID_ASC',
  ProjectByProjectIdDeploymentIdDesc = 'PROJECT_BY_PROJECT_ID__DEPLOYMENT_ID_DESC',
  ProjectByProjectIdDeploymentMetadataAsc = 'PROJECT_BY_PROJECT_ID__DEPLOYMENT_METADATA_ASC',
  ProjectByProjectIdDeploymentMetadataDesc = 'PROJECT_BY_PROJECT_ID__DEPLOYMENT_METADATA_DESC',
  ProjectByProjectIdIdAsc = 'PROJECT_BY_PROJECT_ID__ID_ASC',
  ProjectByProjectIdIdDesc = 'PROJECT_BY_PROJECT_ID__ID_DESC',
  ProjectByProjectIdLastEventAsc = 'PROJECT_BY_PROJECT_ID__LAST_EVENT_ASC',
  ProjectByProjectIdLastEventDesc = 'PROJECT_BY_PROJECT_ID__LAST_EVENT_DESC',
  ProjectByProjectIdMetadataAsc = 'PROJECT_BY_PROJECT_ID__METADATA_ASC',
  ProjectByProjectIdMetadataDesc = 'PROJECT_BY_PROJECT_ID__METADATA_DESC',
  ProjectByProjectIdOwnerAsc = 'PROJECT_BY_PROJECT_ID__OWNER_ASC',
  ProjectByProjectIdOwnerDesc = 'PROJECT_BY_PROJECT_ID__OWNER_DESC',
  ProjectByProjectIdTotalAllocationAsc = 'PROJECT_BY_PROJECT_ID__TOTAL_ALLOCATION_ASC',
  ProjectByProjectIdTotalAllocationDesc = 'PROJECT_BY_PROJECT_ID__TOTAL_ALLOCATION_DESC',
  ProjectByProjectIdTotalBoostAsc = 'PROJECT_BY_PROJECT_ID__TOTAL_BOOST_ASC',
  ProjectByProjectIdTotalBoostDesc = 'PROJECT_BY_PROJECT_ID__TOTAL_BOOST_DESC',
  ProjectByProjectIdTotalRewardAsc = 'PROJECT_BY_PROJECT_ID__TOTAL_REWARD_ASC',
  ProjectByProjectIdTotalRewardDesc = 'PROJECT_BY_PROJECT_ID__TOTAL_REWARD_DESC',
  ProjectByProjectIdTypeAsc = 'PROJECT_BY_PROJECT_ID__TYPE_ASC',
  ProjectByProjectIdTypeDesc = 'PROJECT_BY_PROJECT_ID__TYPE_DESC',
  ProjectByProjectIdUpdatedTimestampAsc = 'PROJECT_BY_PROJECT_ID__UPDATED_TIMESTAMP_ASC',
  ProjectByProjectIdUpdatedTimestampDesc = 'PROJECT_BY_PROJECT_ID__UPDATED_TIMESTAMP_DESC',
  ProjectIdAsc = 'PROJECT_ID_ASC',
  ProjectIdDesc = 'PROJECT_ID_DESC',
  TotalRefundedAsc = 'TOTAL_REFUNDED_ASC',
  TotalRefundedDesc = 'TOTAL_REFUNDED_DESC',
  TotalSpentAsc = 'TOTAL_SPENT_ASC',
  TotalSpentDesc = 'TOTAL_SPENT_DESC',
  UpdateAtAsc = 'UPDATE_AT_ASC',
  UpdateAtDesc = 'UPDATE_AT_DESC'
}

export type ConsumerQueryRewardSummary = Node & {
  __typename?: 'ConsumerQueryRewardSummary';
  consumer: Scalars['String']['output'];
  createAt: Scalars['Datetime']['output'];
  /** Reads a single `Deployment` that is related to this `ConsumerQueryRewardSummary`. */
  deployment?: Maybe<Deployment>;
  deploymentId: Scalars['String']['output'];
  id: Scalars['String']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  orderType: OrderType;
  /** Reads a single `Project` that is related to this `ConsumerQueryRewardSummary`. */
  project?: Maybe<Project>;
  projectId: Scalars['String']['output'];
  totalRefunded: Scalars['BigFloat']['output'];
  totalSpent: Scalars['BigFloat']['output'];
  updateAt: Scalars['Datetime']['output'];
};

export type ConsumerQueryRewardSummaryAggregates = {
  __typename?: 'ConsumerQueryRewardSummaryAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  average?: Maybe<ConsumerQueryRewardSummaryAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  distinctCount?: Maybe<ConsumerQueryRewardSummaryDistinctCountAggregates>;
  keys?: Maybe<Array<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  max?: Maybe<ConsumerQueryRewardSummaryMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  min?: Maybe<ConsumerQueryRewardSummaryMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevPopulation?: Maybe<ConsumerQueryRewardSummaryStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevSample?: Maybe<ConsumerQueryRewardSummaryStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  sum?: Maybe<ConsumerQueryRewardSummarySumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  variancePopulation?: Maybe<ConsumerQueryRewardSummaryVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  varianceSample?: Maybe<ConsumerQueryRewardSummaryVarianceSampleAggregates>;
};

/** A filter to be used against aggregates of `ConsumerQueryRewardSummary` object types. */
export type ConsumerQueryRewardSummaryAggregatesFilter = {
  /** Mean average aggregate over matching `ConsumerQueryRewardSummary` objects. */
  average?: InputMaybe<ConsumerQueryRewardSummaryAverageAggregateFilter>;
  /** Distinct count aggregate over matching `ConsumerQueryRewardSummary` objects. */
  distinctCount?: InputMaybe<ConsumerQueryRewardSummaryDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `ConsumerQueryRewardSummary` object to be included within the aggregate. */
  filter?: InputMaybe<ConsumerQueryRewardSummaryFilter>;
  /** Maximum aggregate over matching `ConsumerQueryRewardSummary` objects. */
  max?: InputMaybe<ConsumerQueryRewardSummaryMaxAggregateFilter>;
  /** Minimum aggregate over matching `ConsumerQueryRewardSummary` objects. */
  min?: InputMaybe<ConsumerQueryRewardSummaryMinAggregateFilter>;
  /** Population standard deviation aggregate over matching `ConsumerQueryRewardSummary` objects. */
  stddevPopulation?: InputMaybe<ConsumerQueryRewardSummaryStddevPopulationAggregateFilter>;
  /** Sample standard deviation aggregate over matching `ConsumerQueryRewardSummary` objects. */
  stddevSample?: InputMaybe<ConsumerQueryRewardSummaryStddevSampleAggregateFilter>;
  /** Sum aggregate over matching `ConsumerQueryRewardSummary` objects. */
  sum?: InputMaybe<ConsumerQueryRewardSummarySumAggregateFilter>;
  /** Population variance aggregate over matching `ConsumerQueryRewardSummary` objects. */
  variancePopulation?: InputMaybe<ConsumerQueryRewardSummaryVariancePopulationAggregateFilter>;
  /** Sample variance aggregate over matching `ConsumerQueryRewardSummary` objects. */
  varianceSample?: InputMaybe<ConsumerQueryRewardSummaryVarianceSampleAggregateFilter>;
};

export type ConsumerQueryRewardSummaryAverageAggregateFilter = {
  totalRefunded?: InputMaybe<BigFloatFilter>;
  totalSpent?: InputMaybe<BigFloatFilter>;
};

export type ConsumerQueryRewardSummaryAverageAggregates = {
  __typename?: 'ConsumerQueryRewardSummaryAverageAggregates';
  /** Mean average of totalRefunded across the matching connection */
  totalRefunded?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of totalSpent across the matching connection */
  totalSpent?: Maybe<Scalars['BigFloat']['output']>;
};

export type ConsumerQueryRewardSummaryDistinctCountAggregateFilter = {
  _blockRange?: InputMaybe<BigIntFilter>;
  _id?: InputMaybe<BigIntFilter>;
  consumer?: InputMaybe<BigIntFilter>;
  createAt?: InputMaybe<BigIntFilter>;
  deploymentId?: InputMaybe<BigIntFilter>;
  id?: InputMaybe<BigIntFilter>;
  orderType?: InputMaybe<BigIntFilter>;
  projectId?: InputMaybe<BigIntFilter>;
  totalRefunded?: InputMaybe<BigIntFilter>;
  totalSpent?: InputMaybe<BigIntFilter>;
  updateAt?: InputMaybe<BigIntFilter>;
};

export type ConsumerQueryRewardSummaryDistinctCountAggregates = {
  __typename?: 'ConsumerQueryRewardSummaryDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  _blockRange?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  _id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of consumer across the matching connection */
  consumer?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createAt across the matching connection */
  createAt?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of deploymentId across the matching connection */
  deploymentId?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of orderType across the matching connection */
  orderType?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of projectId across the matching connection */
  projectId?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of totalRefunded across the matching connection */
  totalRefunded?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of totalSpent across the matching connection */
  totalSpent?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of updateAt across the matching connection */
  updateAt?: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `ConsumerQueryRewardSummary` object types. All fields are combined with a logical ‘and.’ */
export type ConsumerQueryRewardSummaryFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<ConsumerQueryRewardSummaryFilter>>;
  /** Filter by the object’s `consumer` field. */
  consumer?: InputMaybe<StringFilter>;
  /** Filter by the object’s `createAt` field. */
  createAt?: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `deployment` relation. */
  deployment?: InputMaybe<DeploymentFilter>;
  /** Filter by the object’s `deploymentId` field. */
  deploymentId?: InputMaybe<StringFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<ConsumerQueryRewardSummaryFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<ConsumerQueryRewardSummaryFilter>>;
  /** Filter by the object’s `orderType` field. */
  orderType?: InputMaybe<OrderTypeFilter>;
  /** Filter by the object’s `project` relation. */
  project?: InputMaybe<ProjectFilter>;
  /** Filter by the object’s `projectId` field. */
  projectId?: InputMaybe<StringFilter>;
  /** Filter by the object’s `totalRefunded` field. */
  totalRefunded?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `totalSpent` field. */
  totalSpent?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `updateAt` field. */
  updateAt?: InputMaybe<DatetimeFilter>;
};

export type ConsumerQueryRewardSummaryMaxAggregateFilter = {
  totalRefunded?: InputMaybe<BigFloatFilter>;
  totalSpent?: InputMaybe<BigFloatFilter>;
};

export type ConsumerQueryRewardSummaryMaxAggregates = {
  __typename?: 'ConsumerQueryRewardSummaryMaxAggregates';
  /** Maximum of totalRefunded across the matching connection */
  totalRefunded?: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of totalSpent across the matching connection */
  totalSpent?: Maybe<Scalars['BigFloat']['output']>;
};

export type ConsumerQueryRewardSummaryMinAggregateFilter = {
  totalRefunded?: InputMaybe<BigFloatFilter>;
  totalSpent?: InputMaybe<BigFloatFilter>;
};

export type ConsumerQueryRewardSummaryMinAggregates = {
  __typename?: 'ConsumerQueryRewardSummaryMinAggregates';
  /** Minimum of totalRefunded across the matching connection */
  totalRefunded?: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of totalSpent across the matching connection */
  totalSpent?: Maybe<Scalars['BigFloat']['output']>;
};

export type ConsumerQueryRewardSummaryStddevPopulationAggregateFilter = {
  totalRefunded?: InputMaybe<BigFloatFilter>;
  totalSpent?: InputMaybe<BigFloatFilter>;
};

export type ConsumerQueryRewardSummaryStddevPopulationAggregates = {
  __typename?: 'ConsumerQueryRewardSummaryStddevPopulationAggregates';
  /** Population standard deviation of totalRefunded across the matching connection */
  totalRefunded?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of totalSpent across the matching connection */
  totalSpent?: Maybe<Scalars['BigFloat']['output']>;
};

export type ConsumerQueryRewardSummaryStddevSampleAggregateFilter = {
  totalRefunded?: InputMaybe<BigFloatFilter>;
  totalSpent?: InputMaybe<BigFloatFilter>;
};

export type ConsumerQueryRewardSummaryStddevSampleAggregates = {
  __typename?: 'ConsumerQueryRewardSummaryStddevSampleAggregates';
  /** Sample standard deviation of totalRefunded across the matching connection */
  totalRefunded?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of totalSpent across the matching connection */
  totalSpent?: Maybe<Scalars['BigFloat']['output']>;
};

export type ConsumerQueryRewardSummarySumAggregateFilter = {
  totalRefunded?: InputMaybe<BigFloatFilter>;
  totalSpent?: InputMaybe<BigFloatFilter>;
};

export type ConsumerQueryRewardSummarySumAggregates = {
  __typename?: 'ConsumerQueryRewardSummarySumAggregates';
  /** Sum of totalRefunded across the matching connection */
  totalRefunded: Scalars['BigFloat']['output'];
  /** Sum of totalSpent across the matching connection */
  totalSpent: Scalars['BigFloat']['output'];
};

export type ConsumerQueryRewardSummaryVariancePopulationAggregateFilter = {
  totalRefunded?: InputMaybe<BigFloatFilter>;
  totalSpent?: InputMaybe<BigFloatFilter>;
};

export type ConsumerQueryRewardSummaryVariancePopulationAggregates = {
  __typename?: 'ConsumerQueryRewardSummaryVariancePopulationAggregates';
  /** Population variance of totalRefunded across the matching connection */
  totalRefunded?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of totalSpent across the matching connection */
  totalSpent?: Maybe<Scalars['BigFloat']['output']>;
};

export type ConsumerQueryRewardSummaryVarianceSampleAggregateFilter = {
  totalRefunded?: InputMaybe<BigFloatFilter>;
  totalSpent?: InputMaybe<BigFloatFilter>;
};

export type ConsumerQueryRewardSummaryVarianceSampleAggregates = {
  __typename?: 'ConsumerQueryRewardSummaryVarianceSampleAggregates';
  /** Sample variance of totalRefunded across the matching connection */
  totalRefunded?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of totalSpent across the matching connection */
  totalSpent?: Maybe<Scalars['BigFloat']['output']>;
};

export type ConsumerQueryRewardVariancePopulationAggregateFilter = {
  refunded?: InputMaybe<BigFloatFilter>;
  spent?: InputMaybe<BigFloatFilter>;
};

export type ConsumerQueryRewardVariancePopulationAggregates = {
  __typename?: 'ConsumerQueryRewardVariancePopulationAggregates';
  /** Population variance of refunded across the matching connection */
  refunded?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of spent across the matching connection */
  spent?: Maybe<Scalars['BigFloat']['output']>;
};

export type ConsumerQueryRewardVarianceSampleAggregateFilter = {
  refunded?: InputMaybe<BigFloatFilter>;
  spent?: InputMaybe<BigFloatFilter>;
};

export type ConsumerQueryRewardVarianceSampleAggregates = {
  __typename?: 'ConsumerQueryRewardVarianceSampleAggregates';
  /** Sample variance of refunded across the matching connection */
  refunded?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of spent across the matching connection */
  spent?: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `ConsumerQueryReward` values. */
export type ConsumerQueryRewardsConnection = {
  __typename?: 'ConsumerQueryRewardsConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<ConsumerQueryRewardAggregates>;
  /** A list of edges which contains the `ConsumerQueryReward` and cursor to aid in pagination. */
  edges: Array<ConsumerQueryRewardsEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<ConsumerQueryRewardAggregates>>;
  /** A list of `ConsumerQueryReward` objects. */
  nodes: Array<Maybe<ConsumerQueryReward>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `ConsumerQueryReward` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `ConsumerQueryReward` values. */
export type ConsumerQueryRewardsConnectionGroupedAggregatesArgs = {
  groupBy: Array<ConsumerQueryRewardsGroupBy>;
  having?: InputMaybe<ConsumerQueryRewardsHavingInput>;
};

/** A `ConsumerQueryReward` edge in the connection. */
export type ConsumerQueryRewardsEdge = {
  __typename?: 'ConsumerQueryRewardsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `ConsumerQueryReward` at the end of the edge. */
  node?: Maybe<ConsumerQueryReward>;
};

/** Grouping methods for `ConsumerQueryReward` for usage during aggregation. */
export enum ConsumerQueryRewardsGroupBy {
  Consumer = 'CONSUMER',
  CreateAt = 'CREATE_AT',
  CreateAtTruncatedToDay = 'CREATE_AT_TRUNCATED_TO_DAY',
  CreateAtTruncatedToHour = 'CREATE_AT_TRUNCATED_TO_HOUR',
  DeploymentId = 'DEPLOYMENT_ID',
  Id = 'ID',
  OrderId = 'ORDER_ID',
  OrderType = 'ORDER_TYPE',
  ProjectId = 'PROJECT_ID',
  Refunded = 'REFUNDED',
  Spent = 'SPENT',
  UpdateAt = 'UPDATE_AT',
  UpdateAtTruncatedToDay = 'UPDATE_AT_TRUNCATED_TO_DAY',
  UpdateAtTruncatedToHour = 'UPDATE_AT_TRUNCATED_TO_HOUR'
}

export type ConsumerQueryRewardsHavingAverageInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  refunded?: InputMaybe<HavingBigfloatFilter>;
  spent?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type ConsumerQueryRewardsHavingDistinctCountInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  refunded?: InputMaybe<HavingBigfloatFilter>;
  spent?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

/** Conditions for `ConsumerQueryReward` aggregates. */
export type ConsumerQueryRewardsHavingInput = {
  AND?: InputMaybe<Array<ConsumerQueryRewardsHavingInput>>;
  OR?: InputMaybe<Array<ConsumerQueryRewardsHavingInput>>;
  average?: InputMaybe<ConsumerQueryRewardsHavingAverageInput>;
  distinctCount?: InputMaybe<ConsumerQueryRewardsHavingDistinctCountInput>;
  max?: InputMaybe<ConsumerQueryRewardsHavingMaxInput>;
  min?: InputMaybe<ConsumerQueryRewardsHavingMinInput>;
  stddevPopulation?: InputMaybe<ConsumerQueryRewardsHavingStddevPopulationInput>;
  stddevSample?: InputMaybe<ConsumerQueryRewardsHavingStddevSampleInput>;
  sum?: InputMaybe<ConsumerQueryRewardsHavingSumInput>;
  variancePopulation?: InputMaybe<ConsumerQueryRewardsHavingVariancePopulationInput>;
  varianceSample?: InputMaybe<ConsumerQueryRewardsHavingVarianceSampleInput>;
};

export type ConsumerQueryRewardsHavingMaxInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  refunded?: InputMaybe<HavingBigfloatFilter>;
  spent?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type ConsumerQueryRewardsHavingMinInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  refunded?: InputMaybe<HavingBigfloatFilter>;
  spent?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type ConsumerQueryRewardsHavingStddevPopulationInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  refunded?: InputMaybe<HavingBigfloatFilter>;
  spent?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type ConsumerQueryRewardsHavingStddevSampleInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  refunded?: InputMaybe<HavingBigfloatFilter>;
  spent?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type ConsumerQueryRewardsHavingSumInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  refunded?: InputMaybe<HavingBigfloatFilter>;
  spent?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type ConsumerQueryRewardsHavingVariancePopulationInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  refunded?: InputMaybe<HavingBigfloatFilter>;
  spent?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type ConsumerQueryRewardsHavingVarianceSampleInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  refunded?: InputMaybe<HavingBigfloatFilter>;
  spent?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

/** Methods to use when ordering `ConsumerQueryReward`. */
export enum ConsumerQueryRewardsOrderBy {
  ConsumerAsc = 'CONSUMER_ASC',
  ConsumerDesc = 'CONSUMER_DESC',
  CreateAtAsc = 'CREATE_AT_ASC',
  CreateAtDesc = 'CREATE_AT_DESC',
  DeploymentByDeploymentIdCreatedBlockAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_ASC',
  DeploymentByDeploymentIdCreatedBlockDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_DESC',
  DeploymentByDeploymentIdCreatedTimestampAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_ASC',
  DeploymentByDeploymentIdCreatedTimestampDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_DESC',
  DeploymentByDeploymentIdIdAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__ID_ASC',
  DeploymentByDeploymentIdIdDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__ID_DESC',
  DeploymentByDeploymentIdLastEventAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_ASC',
  DeploymentByDeploymentIdLastEventDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_DESC',
  DeploymentByDeploymentIdMetadataAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_ASC',
  DeploymentByDeploymentIdMetadataDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_DESC',
  DeploymentByDeploymentIdProjectIdAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_ASC',
  DeploymentByDeploymentIdProjectIdDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_DESC',
  DeploymentIdAsc = 'DEPLOYMENT_ID_ASC',
  DeploymentIdDesc = 'DEPLOYMENT_ID_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  Natural = 'NATURAL',
  OrderIdAsc = 'ORDER_ID_ASC',
  OrderIdDesc = 'ORDER_ID_DESC',
  OrderTypeAsc = 'ORDER_TYPE_ASC',
  OrderTypeDesc = 'ORDER_TYPE_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  ProjectByProjectIdBoostAllocationRatioAsc = 'PROJECT_BY_PROJECT_ID__BOOST_ALLOCATION_RATIO_ASC',
  ProjectByProjectIdBoostAllocationRatioDesc = 'PROJECT_BY_PROJECT_ID__BOOST_ALLOCATION_RATIO_DESC',
  ProjectByProjectIdCreatedBlockAsc = 'PROJECT_BY_PROJECT_ID__CREATED_BLOCK_ASC',
  ProjectByProjectIdCreatedBlockDesc = 'PROJECT_BY_PROJECT_ID__CREATED_BLOCK_DESC',
  ProjectByProjectIdCreatedTimestampAsc = 'PROJECT_BY_PROJECT_ID__CREATED_TIMESTAMP_ASC',
  ProjectByProjectIdCreatedTimestampDesc = 'PROJECT_BY_PROJECT_ID__CREATED_TIMESTAMP_DESC',
  ProjectByProjectIdDeploymentIdAsc = 'PROJECT_BY_PROJECT_ID__DEPLOYMENT_ID_ASC',
  ProjectByProjectIdDeploymentIdDesc = 'PROJECT_BY_PROJECT_ID__DEPLOYMENT_ID_DESC',
  ProjectByProjectIdDeploymentMetadataAsc = 'PROJECT_BY_PROJECT_ID__DEPLOYMENT_METADATA_ASC',
  ProjectByProjectIdDeploymentMetadataDesc = 'PROJECT_BY_PROJECT_ID__DEPLOYMENT_METADATA_DESC',
  ProjectByProjectIdIdAsc = 'PROJECT_BY_PROJECT_ID__ID_ASC',
  ProjectByProjectIdIdDesc = 'PROJECT_BY_PROJECT_ID__ID_DESC',
  ProjectByProjectIdLastEventAsc = 'PROJECT_BY_PROJECT_ID__LAST_EVENT_ASC',
  ProjectByProjectIdLastEventDesc = 'PROJECT_BY_PROJECT_ID__LAST_EVENT_DESC',
  ProjectByProjectIdMetadataAsc = 'PROJECT_BY_PROJECT_ID__METADATA_ASC',
  ProjectByProjectIdMetadataDesc = 'PROJECT_BY_PROJECT_ID__METADATA_DESC',
  ProjectByProjectIdOwnerAsc = 'PROJECT_BY_PROJECT_ID__OWNER_ASC',
  ProjectByProjectIdOwnerDesc = 'PROJECT_BY_PROJECT_ID__OWNER_DESC',
  ProjectByProjectIdTotalAllocationAsc = 'PROJECT_BY_PROJECT_ID__TOTAL_ALLOCATION_ASC',
  ProjectByProjectIdTotalAllocationDesc = 'PROJECT_BY_PROJECT_ID__TOTAL_ALLOCATION_DESC',
  ProjectByProjectIdTotalBoostAsc = 'PROJECT_BY_PROJECT_ID__TOTAL_BOOST_ASC',
  ProjectByProjectIdTotalBoostDesc = 'PROJECT_BY_PROJECT_ID__TOTAL_BOOST_DESC',
  ProjectByProjectIdTotalRewardAsc = 'PROJECT_BY_PROJECT_ID__TOTAL_REWARD_ASC',
  ProjectByProjectIdTotalRewardDesc = 'PROJECT_BY_PROJECT_ID__TOTAL_REWARD_DESC',
  ProjectByProjectIdTypeAsc = 'PROJECT_BY_PROJECT_ID__TYPE_ASC',
  ProjectByProjectIdTypeDesc = 'PROJECT_BY_PROJECT_ID__TYPE_DESC',
  ProjectByProjectIdUpdatedTimestampAsc = 'PROJECT_BY_PROJECT_ID__UPDATED_TIMESTAMP_ASC',
  ProjectByProjectIdUpdatedTimestampDesc = 'PROJECT_BY_PROJECT_ID__UPDATED_TIMESTAMP_DESC',
  ProjectIdAsc = 'PROJECT_ID_ASC',
  ProjectIdDesc = 'PROJECT_ID_DESC',
  RefundedAsc = 'REFUNDED_ASC',
  RefundedDesc = 'REFUNDED_DESC',
  SpentAsc = 'SPENT_ASC',
  SpentDesc = 'SPENT_DESC',
  UpdateAtAsc = 'UPDATE_AT_ASC',
  UpdateAtDesc = 'UPDATE_AT_DESC'
}

export type Controller = Node & {
  __typename?: 'Controller';
  controller: Scalars['String']['output'];
  createdBlock?: Maybe<Scalars['Int']['output']>;
  id: Scalars['String']['output'];
  /** Reads a single `Indexer` that is related to this `Controller`. */
  indexer?: Maybe<Indexer>;
  indexerId: Scalars['String']['output'];
  isActive: Scalars['Boolean']['output'];
  lastEvent?: Maybe<Scalars['String']['output']>;
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
};

export type ControllerAggregates = {
  __typename?: 'ControllerAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  average?: Maybe<ControllerAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  distinctCount?: Maybe<ControllerDistinctCountAggregates>;
  keys?: Maybe<Array<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  max?: Maybe<ControllerMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  min?: Maybe<ControllerMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevPopulation?: Maybe<ControllerStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevSample?: Maybe<ControllerStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  sum?: Maybe<ControllerSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  variancePopulation?: Maybe<ControllerVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  varianceSample?: Maybe<ControllerVarianceSampleAggregates>;
};

/** A filter to be used against aggregates of `Controller` object types. */
export type ControllerAggregatesFilter = {
  /** Mean average aggregate over matching `Controller` objects. */
  average?: InputMaybe<ControllerAverageAggregateFilter>;
  /** Distinct count aggregate over matching `Controller` objects. */
  distinctCount?: InputMaybe<ControllerDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `Controller` object to be included within the aggregate. */
  filter?: InputMaybe<ControllerFilter>;
  /** Maximum aggregate over matching `Controller` objects. */
  max?: InputMaybe<ControllerMaxAggregateFilter>;
  /** Minimum aggregate over matching `Controller` objects. */
  min?: InputMaybe<ControllerMinAggregateFilter>;
  /** Population standard deviation aggregate over matching `Controller` objects. */
  stddevPopulation?: InputMaybe<ControllerStddevPopulationAggregateFilter>;
  /** Sample standard deviation aggregate over matching `Controller` objects. */
  stddevSample?: InputMaybe<ControllerStddevSampleAggregateFilter>;
  /** Sum aggregate over matching `Controller` objects. */
  sum?: InputMaybe<ControllerSumAggregateFilter>;
  /** Population variance aggregate over matching `Controller` objects. */
  variancePopulation?: InputMaybe<ControllerVariancePopulationAggregateFilter>;
  /** Sample variance aggregate over matching `Controller` objects. */
  varianceSample?: InputMaybe<ControllerVarianceSampleAggregateFilter>;
};

export type ControllerAverageAggregateFilter = {
  createdBlock?: InputMaybe<BigFloatFilter>;
};

export type ControllerAverageAggregates = {
  __typename?: 'ControllerAverageAggregates';
  /** Mean average of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
};

export type ControllerDistinctCountAggregateFilter = {
  _blockRange?: InputMaybe<BigIntFilter>;
  _id?: InputMaybe<BigIntFilter>;
  controller?: InputMaybe<BigIntFilter>;
  createdBlock?: InputMaybe<BigIntFilter>;
  id?: InputMaybe<BigIntFilter>;
  indexerId?: InputMaybe<BigIntFilter>;
  isActive?: InputMaybe<BigIntFilter>;
  lastEvent?: InputMaybe<BigIntFilter>;
};

export type ControllerDistinctCountAggregates = {
  __typename?: 'ControllerDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  _blockRange?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  _id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of controller across the matching connection */
  controller?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of indexerId across the matching connection */
  indexerId?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of isActive across the matching connection */
  isActive?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of lastEvent across the matching connection */
  lastEvent?: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `Controller` object types. All fields are combined with a logical ‘and.’ */
export type ControllerFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<ControllerFilter>>;
  /** Filter by the object’s `controller` field. */
  controller?: InputMaybe<StringFilter>;
  /** Filter by the object’s `createdBlock` field. */
  createdBlock?: InputMaybe<IntFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<StringFilter>;
  /** Filter by the object’s `indexer` relation. */
  indexer?: InputMaybe<IndexerFilter>;
  /** Filter by the object’s `indexerId` field. */
  indexerId?: InputMaybe<StringFilter>;
  /** Filter by the object’s `isActive` field. */
  isActive?: InputMaybe<BooleanFilter>;
  /** Filter by the object’s `lastEvent` field. */
  lastEvent?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<ControllerFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<ControllerFilter>>;
};

export type ControllerMaxAggregateFilter = {
  createdBlock?: InputMaybe<IntFilter>;
};

export type ControllerMaxAggregates = {
  __typename?: 'ControllerMaxAggregates';
  /** Maximum of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['Int']['output']>;
};

export type ControllerMinAggregateFilter = {
  createdBlock?: InputMaybe<IntFilter>;
};

export type ControllerMinAggregates = {
  __typename?: 'ControllerMinAggregates';
  /** Minimum of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['Int']['output']>;
};

export type ControllerStddevPopulationAggregateFilter = {
  createdBlock?: InputMaybe<BigFloatFilter>;
};

export type ControllerStddevPopulationAggregates = {
  __typename?: 'ControllerStddevPopulationAggregates';
  /** Population standard deviation of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
};

export type ControllerStddevSampleAggregateFilter = {
  createdBlock?: InputMaybe<BigFloatFilter>;
};

export type ControllerStddevSampleAggregates = {
  __typename?: 'ControllerStddevSampleAggregates';
  /** Sample standard deviation of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
};

export type ControllerSumAggregateFilter = {
  createdBlock?: InputMaybe<BigIntFilter>;
};

export type ControllerSumAggregates = {
  __typename?: 'ControllerSumAggregates';
  /** Sum of createdBlock across the matching connection */
  createdBlock: Scalars['BigInt']['output'];
};

export type ControllerVariancePopulationAggregateFilter = {
  createdBlock?: InputMaybe<BigFloatFilter>;
};

export type ControllerVariancePopulationAggregates = {
  __typename?: 'ControllerVariancePopulationAggregates';
  /** Population variance of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
};

export type ControllerVarianceSampleAggregateFilter = {
  createdBlock?: InputMaybe<BigFloatFilter>;
};

export type ControllerVarianceSampleAggregates = {
  __typename?: 'ControllerVarianceSampleAggregates';
  /** Sample variance of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `Controller` values. */
export type ControllersConnection = {
  __typename?: 'ControllersConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<ControllerAggregates>;
  /** A list of edges which contains the `Controller` and cursor to aid in pagination. */
  edges: Array<ControllersEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<ControllerAggregates>>;
  /** A list of `Controller` objects. */
  nodes: Array<Maybe<Controller>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Controller` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Controller` values. */
export type ControllersConnectionGroupedAggregatesArgs = {
  groupBy: Array<ControllersGroupBy>;
  having?: InputMaybe<ControllersHavingInput>;
};

/** A `Controller` edge in the connection. */
export type ControllersEdge = {
  __typename?: 'ControllersEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `Controller` at the end of the edge. */
  node?: Maybe<Controller>;
};

/** Grouping methods for `Controller` for usage during aggregation. */
export enum ControllersGroupBy {
  Controller = 'CONTROLLER',
  CreatedBlock = 'CREATED_BLOCK',
  Id = 'ID',
  IndexerId = 'INDEXER_ID',
  IsActive = 'IS_ACTIVE',
  LastEvent = 'LAST_EVENT'
}

export type ControllersHavingAverageInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
};

export type ControllersHavingDistinctCountInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
};

/** Conditions for `Controller` aggregates. */
export type ControllersHavingInput = {
  AND?: InputMaybe<Array<ControllersHavingInput>>;
  OR?: InputMaybe<Array<ControllersHavingInput>>;
  average?: InputMaybe<ControllersHavingAverageInput>;
  distinctCount?: InputMaybe<ControllersHavingDistinctCountInput>;
  max?: InputMaybe<ControllersHavingMaxInput>;
  min?: InputMaybe<ControllersHavingMinInput>;
  stddevPopulation?: InputMaybe<ControllersHavingStddevPopulationInput>;
  stddevSample?: InputMaybe<ControllersHavingStddevSampleInput>;
  sum?: InputMaybe<ControllersHavingSumInput>;
  variancePopulation?: InputMaybe<ControllersHavingVariancePopulationInput>;
  varianceSample?: InputMaybe<ControllersHavingVarianceSampleInput>;
};

export type ControllersHavingMaxInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
};

export type ControllersHavingMinInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
};

export type ControllersHavingStddevPopulationInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
};

export type ControllersHavingStddevSampleInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
};

export type ControllersHavingSumInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
};

export type ControllersHavingVariancePopulationInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
};

export type ControllersHavingVarianceSampleInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
};

/** Methods to use when ordering `Controller`. */
export enum ControllersOrderBy {
  ControllerAsc = 'CONTROLLER_ASC',
  ControllerDesc = 'CONTROLLER_DESC',
  CreatedBlockAsc = 'CREATED_BLOCK_ASC',
  CreatedBlockDesc = 'CREATED_BLOCK_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  IndexerByIndexerIdActiveAsc = 'INDEXER_BY_INDEXER_ID__ACTIVE_ASC',
  IndexerByIndexerIdActiveDesc = 'INDEXER_BY_INDEXER_ID__ACTIVE_DESC',
  IndexerByIndexerIdCapacityAsc = 'INDEXER_BY_INDEXER_ID__CAPACITY_ASC',
  IndexerByIndexerIdCapacityDesc = 'INDEXER_BY_INDEXER_ID__CAPACITY_DESC',
  IndexerByIndexerIdCommissionAsc = 'INDEXER_BY_INDEXER_ID__COMMISSION_ASC',
  IndexerByIndexerIdCommissionDesc = 'INDEXER_BY_INDEXER_ID__COMMISSION_DESC',
  IndexerByIndexerIdControllerAsc = 'INDEXER_BY_INDEXER_ID__CONTROLLER_ASC',
  IndexerByIndexerIdControllerDesc = 'INDEXER_BY_INDEXER_ID__CONTROLLER_DESC',
  IndexerByIndexerIdCreatedBlockAsc = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_ASC',
  IndexerByIndexerIdCreatedBlockDesc = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_DESC',
  IndexerByIndexerIdIdAsc = 'INDEXER_BY_INDEXER_ID__ID_ASC',
  IndexerByIndexerIdIdDesc = 'INDEXER_BY_INDEXER_ID__ID_DESC',
  IndexerByIndexerIdLastClaimEraAsc = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_ASC',
  IndexerByIndexerIdLastClaimEraDesc = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_DESC',
  IndexerByIndexerIdLastEventAsc = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_ASC',
  IndexerByIndexerIdLastEventDesc = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_DESC',
  IndexerByIndexerIdLastSettledEraAsc = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_ASC',
  IndexerByIndexerIdLastSettledEraDesc = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_DESC',
  IndexerByIndexerIdMaxUnstakeAmountAsc = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_ASC',
  IndexerByIndexerIdMaxUnstakeAmountDesc = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_DESC',
  IndexerByIndexerIdMetadataAsc = 'INDEXER_BY_INDEXER_ID__METADATA_ASC',
  IndexerByIndexerIdMetadataDesc = 'INDEXER_BY_INDEXER_ID__METADATA_DESC',
  IndexerByIndexerIdSelfStakeAsc = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_ASC',
  IndexerByIndexerIdSelfStakeDesc = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_DESC',
  IndexerByIndexerIdTotalStakeAsc = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_ASC',
  IndexerByIndexerIdTotalStakeDesc = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_DESC',
  IndexerIdAsc = 'INDEXER_ID_ASC',
  IndexerIdDesc = 'INDEXER_ID_DESC',
  IsActiveAsc = 'IS_ACTIVE_ASC',
  IsActiveDesc = 'IS_ACTIVE_DESC',
  LastEventAsc = 'LAST_EVENT_ASC',
  LastEventDesc = 'LAST_EVENT_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** A filter to be used against Datetime fields. All fields are combined with a logical ‘and.’ */
export type DatetimeFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: InputMaybe<Scalars['Datetime']['input']>;
  /** Equal to the specified value. */
  equalTo?: InputMaybe<Scalars['Datetime']['input']>;
  /** Greater than the specified value. */
  greaterThan?: InputMaybe<Scalars['Datetime']['input']>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: InputMaybe<Scalars['Datetime']['input']>;
  /** Included in the specified list. */
  in?: InputMaybe<Array<Scalars['Datetime']['input']>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: InputMaybe<Scalars['Boolean']['input']>;
  /** Less than the specified value. */
  lessThan?: InputMaybe<Scalars['Datetime']['input']>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: InputMaybe<Scalars['Datetime']['input']>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: InputMaybe<Scalars['Datetime']['input']>;
  /** Not equal to the specified value. */
  notEqualTo?: InputMaybe<Scalars['Datetime']['input']>;
  /** Not included in the specified list. */
  notIn?: InputMaybe<Array<Scalars['Datetime']['input']>>;
};

export type Delegation = Node & {
  __typename?: 'Delegation';
  amount: Scalars['JSON']['output'];
  createdBlock?: Maybe<Scalars['Int']['output']>;
  /** Reads a single `Delegator` that is related to this `Delegation`. */
  delegator?: Maybe<Delegator>;
  delegatorId: Scalars['String']['output'];
  exitEra?: Maybe<Scalars['Int']['output']>;
  id: Scalars['String']['output'];
  /** Reads a single `Indexer` that is related to this `Delegation`. */
  indexer?: Maybe<Indexer>;
  indexerId: Scalars['String']['output'];
  lastEvent?: Maybe<Scalars['String']['output']>;
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
};

export type DelegationAggregates = {
  __typename?: 'DelegationAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  average?: Maybe<DelegationAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  distinctCount?: Maybe<DelegationDistinctCountAggregates>;
  keys?: Maybe<Array<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  max?: Maybe<DelegationMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  min?: Maybe<DelegationMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevPopulation?: Maybe<DelegationStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevSample?: Maybe<DelegationStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  sum?: Maybe<DelegationSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  variancePopulation?: Maybe<DelegationVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  varianceSample?: Maybe<DelegationVarianceSampleAggregates>;
};

/** A filter to be used against aggregates of `Delegation` object types. */
export type DelegationAggregatesFilter = {
  /** Mean average aggregate over matching `Delegation` objects. */
  average?: InputMaybe<DelegationAverageAggregateFilter>;
  /** Distinct count aggregate over matching `Delegation` objects. */
  distinctCount?: InputMaybe<DelegationDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `Delegation` object to be included within the aggregate. */
  filter?: InputMaybe<DelegationFilter>;
  /** Maximum aggregate over matching `Delegation` objects. */
  max?: InputMaybe<DelegationMaxAggregateFilter>;
  /** Minimum aggregate over matching `Delegation` objects. */
  min?: InputMaybe<DelegationMinAggregateFilter>;
  /** Population standard deviation aggregate over matching `Delegation` objects. */
  stddevPopulation?: InputMaybe<DelegationStddevPopulationAggregateFilter>;
  /** Sample standard deviation aggregate over matching `Delegation` objects. */
  stddevSample?: InputMaybe<DelegationStddevSampleAggregateFilter>;
  /** Sum aggregate over matching `Delegation` objects. */
  sum?: InputMaybe<DelegationSumAggregateFilter>;
  /** Population variance aggregate over matching `Delegation` objects. */
  variancePopulation?: InputMaybe<DelegationVariancePopulationAggregateFilter>;
  /** Sample variance aggregate over matching `Delegation` objects. */
  varianceSample?: InputMaybe<DelegationVarianceSampleAggregateFilter>;
};

export type DelegationAverageAggregateFilter = {
  createdBlock?: InputMaybe<BigFloatFilter>;
  exitEra?: InputMaybe<BigFloatFilter>;
};

export type DelegationAverageAggregates = {
  __typename?: 'DelegationAverageAggregates';
  /** Mean average of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of exitEra across the matching connection */
  exitEra?: Maybe<Scalars['BigFloat']['output']>;
};

export type DelegationDistinctCountAggregateFilter = {
  _blockRange?: InputMaybe<BigIntFilter>;
  _id?: InputMaybe<BigIntFilter>;
  amount?: InputMaybe<BigIntFilter>;
  createdBlock?: InputMaybe<BigIntFilter>;
  delegatorId?: InputMaybe<BigIntFilter>;
  exitEra?: InputMaybe<BigIntFilter>;
  id?: InputMaybe<BigIntFilter>;
  indexerId?: InputMaybe<BigIntFilter>;
  lastEvent?: InputMaybe<BigIntFilter>;
};

export type DelegationDistinctCountAggregates = {
  __typename?: 'DelegationDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  _blockRange?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  _id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of amount across the matching connection */
  amount?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of delegatorId across the matching connection */
  delegatorId?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of exitEra across the matching connection */
  exitEra?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of indexerId across the matching connection */
  indexerId?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of lastEvent across the matching connection */
  lastEvent?: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `Delegation` object types. All fields are combined with a logical ‘and.’ */
export type DelegationFilter = {
  /** Filter by the object’s `amount` field. */
  amount?: InputMaybe<JsonFilter>;
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<DelegationFilter>>;
  /** Filter by the object’s `createdBlock` field. */
  createdBlock?: InputMaybe<IntFilter>;
  /** Filter by the object’s `delegator` relation. */
  delegator?: InputMaybe<DelegatorFilter>;
  /** Filter by the object’s `delegatorId` field. */
  delegatorId?: InputMaybe<StringFilter>;
  /** Filter by the object’s `exitEra` field. */
  exitEra?: InputMaybe<IntFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<StringFilter>;
  /** Filter by the object’s `indexer` relation. */
  indexer?: InputMaybe<IndexerFilter>;
  /** Filter by the object’s `indexerId` field. */
  indexerId?: InputMaybe<StringFilter>;
  /** Filter by the object’s `lastEvent` field. */
  lastEvent?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<DelegationFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<DelegationFilter>>;
};

export type DelegationMaxAggregateFilter = {
  createdBlock?: InputMaybe<IntFilter>;
  exitEra?: InputMaybe<IntFilter>;
};

export type DelegationMaxAggregates = {
  __typename?: 'DelegationMaxAggregates';
  /** Maximum of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['Int']['output']>;
  /** Maximum of exitEra across the matching connection */
  exitEra?: Maybe<Scalars['Int']['output']>;
};

export type DelegationMinAggregateFilter = {
  createdBlock?: InputMaybe<IntFilter>;
  exitEra?: InputMaybe<IntFilter>;
};

export type DelegationMinAggregates = {
  __typename?: 'DelegationMinAggregates';
  /** Minimum of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['Int']['output']>;
  /** Minimum of exitEra across the matching connection */
  exitEra?: Maybe<Scalars['Int']['output']>;
};

export type DelegationStddevPopulationAggregateFilter = {
  createdBlock?: InputMaybe<BigFloatFilter>;
  exitEra?: InputMaybe<BigFloatFilter>;
};

export type DelegationStddevPopulationAggregates = {
  __typename?: 'DelegationStddevPopulationAggregates';
  /** Population standard deviation of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of exitEra across the matching connection */
  exitEra?: Maybe<Scalars['BigFloat']['output']>;
};

export type DelegationStddevSampleAggregateFilter = {
  createdBlock?: InputMaybe<BigFloatFilter>;
  exitEra?: InputMaybe<BigFloatFilter>;
};

export type DelegationStddevSampleAggregates = {
  __typename?: 'DelegationStddevSampleAggregates';
  /** Sample standard deviation of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of exitEra across the matching connection */
  exitEra?: Maybe<Scalars['BigFloat']['output']>;
};

export type DelegationSumAggregateFilter = {
  createdBlock?: InputMaybe<BigIntFilter>;
  exitEra?: InputMaybe<BigIntFilter>;
};

export type DelegationSumAggregates = {
  __typename?: 'DelegationSumAggregates';
  /** Sum of createdBlock across the matching connection */
  createdBlock: Scalars['BigInt']['output'];
  /** Sum of exitEra across the matching connection */
  exitEra: Scalars['BigInt']['output'];
};

export type DelegationVariancePopulationAggregateFilter = {
  createdBlock?: InputMaybe<BigFloatFilter>;
  exitEra?: InputMaybe<BigFloatFilter>;
};

export type DelegationVariancePopulationAggregates = {
  __typename?: 'DelegationVariancePopulationAggregates';
  /** Population variance of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of exitEra across the matching connection */
  exitEra?: Maybe<Scalars['BigFloat']['output']>;
};

export type DelegationVarianceSampleAggregateFilter = {
  createdBlock?: InputMaybe<BigFloatFilter>;
  exitEra?: InputMaybe<BigFloatFilter>;
};

export type DelegationVarianceSampleAggregates = {
  __typename?: 'DelegationVarianceSampleAggregates';
  /** Sample variance of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of exitEra across the matching connection */
  exitEra?: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `Delegation` values. */
export type DelegationsConnection = {
  __typename?: 'DelegationsConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<DelegationAggregates>;
  /** A list of edges which contains the `Delegation` and cursor to aid in pagination. */
  edges: Array<DelegationsEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<DelegationAggregates>>;
  /** A list of `Delegation` objects. */
  nodes: Array<Maybe<Delegation>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Delegation` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Delegation` values. */
export type DelegationsConnectionGroupedAggregatesArgs = {
  groupBy: Array<DelegationsGroupBy>;
  having?: InputMaybe<DelegationsHavingInput>;
};

/** A `Delegation` edge in the connection. */
export type DelegationsEdge = {
  __typename?: 'DelegationsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `Delegation` at the end of the edge. */
  node?: Maybe<Delegation>;
};

/** Grouping methods for `Delegation` for usage during aggregation. */
export enum DelegationsGroupBy {
  Amount = 'AMOUNT',
  CreatedBlock = 'CREATED_BLOCK',
  DelegatorId = 'DELEGATOR_ID',
  ExitEra = 'EXIT_ERA',
  Id = 'ID',
  IndexerId = 'INDEXER_ID',
  LastEvent = 'LAST_EVENT'
}

export type DelegationsHavingAverageInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
  exitEra?: InputMaybe<HavingIntFilter>;
};

export type DelegationsHavingDistinctCountInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
  exitEra?: InputMaybe<HavingIntFilter>;
};

/** Conditions for `Delegation` aggregates. */
export type DelegationsHavingInput = {
  AND?: InputMaybe<Array<DelegationsHavingInput>>;
  OR?: InputMaybe<Array<DelegationsHavingInput>>;
  average?: InputMaybe<DelegationsHavingAverageInput>;
  distinctCount?: InputMaybe<DelegationsHavingDistinctCountInput>;
  max?: InputMaybe<DelegationsHavingMaxInput>;
  min?: InputMaybe<DelegationsHavingMinInput>;
  stddevPopulation?: InputMaybe<DelegationsHavingStddevPopulationInput>;
  stddevSample?: InputMaybe<DelegationsHavingStddevSampleInput>;
  sum?: InputMaybe<DelegationsHavingSumInput>;
  variancePopulation?: InputMaybe<DelegationsHavingVariancePopulationInput>;
  varianceSample?: InputMaybe<DelegationsHavingVarianceSampleInput>;
};

export type DelegationsHavingMaxInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
  exitEra?: InputMaybe<HavingIntFilter>;
};

export type DelegationsHavingMinInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
  exitEra?: InputMaybe<HavingIntFilter>;
};

export type DelegationsHavingStddevPopulationInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
  exitEra?: InputMaybe<HavingIntFilter>;
};

export type DelegationsHavingStddevSampleInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
  exitEra?: InputMaybe<HavingIntFilter>;
};

export type DelegationsHavingSumInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
  exitEra?: InputMaybe<HavingIntFilter>;
};

export type DelegationsHavingVariancePopulationInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
  exitEra?: InputMaybe<HavingIntFilter>;
};

export type DelegationsHavingVarianceSampleInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
  exitEra?: InputMaybe<HavingIntFilter>;
};

/** Methods to use when ordering `Delegation`. */
export enum DelegationsOrderBy {
  AmountAsc = 'AMOUNT_ASC',
  AmountDesc = 'AMOUNT_DESC',
  CreatedBlockAsc = 'CREATED_BLOCK_ASC',
  CreatedBlockDesc = 'CREATED_BLOCK_DESC',
  DelegatorByDelegatorIdCreatedBlockAsc = 'DELEGATOR_BY_DELEGATOR_ID__CREATED_BLOCK_ASC',
  DelegatorByDelegatorIdCreatedBlockDesc = 'DELEGATOR_BY_DELEGATOR_ID__CREATED_BLOCK_DESC',
  DelegatorByDelegatorIdExitEraAsc = 'DELEGATOR_BY_DELEGATOR_ID__EXIT_ERA_ASC',
  DelegatorByDelegatorIdExitEraDesc = 'DELEGATOR_BY_DELEGATOR_ID__EXIT_ERA_DESC',
  DelegatorByDelegatorIdIdAsc = 'DELEGATOR_BY_DELEGATOR_ID__ID_ASC',
  DelegatorByDelegatorIdIdDesc = 'DELEGATOR_BY_DELEGATOR_ID__ID_DESC',
  DelegatorByDelegatorIdLastEventAsc = 'DELEGATOR_BY_DELEGATOR_ID__LAST_EVENT_ASC',
  DelegatorByDelegatorIdLastEventDesc = 'DELEGATOR_BY_DELEGATOR_ID__LAST_EVENT_DESC',
  DelegatorByDelegatorIdStartEraAsc = 'DELEGATOR_BY_DELEGATOR_ID__START_ERA_ASC',
  DelegatorByDelegatorIdStartEraDesc = 'DELEGATOR_BY_DELEGATOR_ID__START_ERA_DESC',
  DelegatorByDelegatorIdTotalDelegationsAsc = 'DELEGATOR_BY_DELEGATOR_ID__TOTAL_DELEGATIONS_ASC',
  DelegatorByDelegatorIdTotalDelegationsDesc = 'DELEGATOR_BY_DELEGATOR_ID__TOTAL_DELEGATIONS_DESC',
  DelegatorIdAsc = 'DELEGATOR_ID_ASC',
  DelegatorIdDesc = 'DELEGATOR_ID_DESC',
  ExitEraAsc = 'EXIT_ERA_ASC',
  ExitEraDesc = 'EXIT_ERA_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  IndexerByIndexerIdActiveAsc = 'INDEXER_BY_INDEXER_ID__ACTIVE_ASC',
  IndexerByIndexerIdActiveDesc = 'INDEXER_BY_INDEXER_ID__ACTIVE_DESC',
  IndexerByIndexerIdCapacityAsc = 'INDEXER_BY_INDEXER_ID__CAPACITY_ASC',
  IndexerByIndexerIdCapacityDesc = 'INDEXER_BY_INDEXER_ID__CAPACITY_DESC',
  IndexerByIndexerIdCommissionAsc = 'INDEXER_BY_INDEXER_ID__COMMISSION_ASC',
  IndexerByIndexerIdCommissionDesc = 'INDEXER_BY_INDEXER_ID__COMMISSION_DESC',
  IndexerByIndexerIdControllerAsc = 'INDEXER_BY_INDEXER_ID__CONTROLLER_ASC',
  IndexerByIndexerIdControllerDesc = 'INDEXER_BY_INDEXER_ID__CONTROLLER_DESC',
  IndexerByIndexerIdCreatedBlockAsc = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_ASC',
  IndexerByIndexerIdCreatedBlockDesc = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_DESC',
  IndexerByIndexerIdIdAsc = 'INDEXER_BY_INDEXER_ID__ID_ASC',
  IndexerByIndexerIdIdDesc = 'INDEXER_BY_INDEXER_ID__ID_DESC',
  IndexerByIndexerIdLastClaimEraAsc = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_ASC',
  IndexerByIndexerIdLastClaimEraDesc = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_DESC',
  IndexerByIndexerIdLastEventAsc = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_ASC',
  IndexerByIndexerIdLastEventDesc = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_DESC',
  IndexerByIndexerIdLastSettledEraAsc = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_ASC',
  IndexerByIndexerIdLastSettledEraDesc = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_DESC',
  IndexerByIndexerIdMaxUnstakeAmountAsc = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_ASC',
  IndexerByIndexerIdMaxUnstakeAmountDesc = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_DESC',
  IndexerByIndexerIdMetadataAsc = 'INDEXER_BY_INDEXER_ID__METADATA_ASC',
  IndexerByIndexerIdMetadataDesc = 'INDEXER_BY_INDEXER_ID__METADATA_DESC',
  IndexerByIndexerIdSelfStakeAsc = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_ASC',
  IndexerByIndexerIdSelfStakeDesc = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_DESC',
  IndexerByIndexerIdTotalStakeAsc = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_ASC',
  IndexerByIndexerIdTotalStakeDesc = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_DESC',
  IndexerIdAsc = 'INDEXER_ID_ASC',
  IndexerIdDesc = 'INDEXER_ID_DESC',
  LastEventAsc = 'LAST_EVENT_ASC',
  LastEventDesc = 'LAST_EVENT_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

export type Delegator = Node & {
  __typename?: 'Delegator';
  /** Reads and enables pagination through a set of `Reward`. */
  claimedRewards: RewardsConnection;
  createdBlock?: Maybe<Scalars['Int']['output']>;
  /** Reads and enables pagination through a set of `Delegation`. */
  delegations: DelegationsConnection;
  /** Reads and enables pagination through a set of `EraDelegatorApy`. */
  eraDelegatorApies: EraDelegatorApiesConnection;
  /** Reads and enables pagination through a set of `EraDelegatorIndexerApy`. */
  eraDelegatorIndexerApies: EraDelegatorIndexerApiesConnection;
  /** Reads and enables pagination through a set of `EraReward`. */
  eraRewards: EraRewardsConnection;
  /** Reads and enables pagination through a set of `EraStake`. */
  eraStakes: EraStakesConnection;
  /** Reads and enables pagination through a set of `Era`. */
  erasByEraRewardDelegatorIdAndEraId: DelegatorErasByEraRewardDelegatorIdAndEraIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Era`. */
  erasByEraStakeDelegatorIdAndEraId: DelegatorErasByEraStakeDelegatorIdAndEraIdManyToManyConnection;
  exitEra: Scalars['Int']['output'];
  id: Scalars['String']['output'];
  /** Reads and enables pagination through a set of `Indexer`. */
  indexersByDelegationDelegatorIdAndIndexerId: DelegatorIndexersByDelegationDelegatorIdAndIndexerIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Indexer`. */
  indexersByEraDelegatorIndexerApyDelegatorIdAndIndexerId: DelegatorIndexersByEraDelegatorIndexerApyDelegatorIdAndIndexerIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Indexer`. */
  indexersByEraRewardDelegatorIdAndIndexerId: DelegatorIndexersByEraRewardDelegatorIdAndIndexerIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Indexer`. */
  indexersByEraStakeDelegatorIdAndIndexerId: DelegatorIndexersByEraStakeDelegatorIdAndIndexerIdManyToManyConnection;
  lastEvent?: Maybe<Scalars['String']['output']>;
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  startEra: Scalars['Int']['output'];
  totalDelegations: Scalars['JSON']['output'];
  /** Reads and enables pagination through a set of `UnclaimedReward`. */
  unclaimedRewards: UnclaimedRewardsConnection;
};


export type DelegatorClaimedRewardsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Rewards_Distinct_Enum>>>;
  filter?: InputMaybe<RewardFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<RewardsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type DelegatorDelegationsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Delegations_Distinct_Enum>>>;
  filter?: InputMaybe<DelegationFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<DelegationsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type DelegatorEraDelegatorApiesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Era_Delegator_Apies_Distinct_Enum>>>;
  filter?: InputMaybe<EraDelegatorApyFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<EraDelegatorApiesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type DelegatorEraDelegatorIndexerApiesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Era_Delegator_Indexer_Apies_Distinct_Enum>>>;
  filter?: InputMaybe<EraDelegatorIndexerApyFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<EraDelegatorIndexerApiesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type DelegatorEraRewardsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Era_Rewards_Distinct_Enum>>>;
  filter?: InputMaybe<EraRewardFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<EraRewardsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type DelegatorEraStakesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Era_Stakes_Distinct_Enum>>>;
  filter?: InputMaybe<EraStakeFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<EraStakesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type DelegatorErasByEraRewardDelegatorIdAndEraIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Eras_Distinct_Enum>>>;
  filter?: InputMaybe<EraFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ErasOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type DelegatorErasByEraStakeDelegatorIdAndEraIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Eras_Distinct_Enum>>>;
  filter?: InputMaybe<EraFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ErasOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type DelegatorIndexersByDelegationDelegatorIdAndIndexerIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexers_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexersOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type DelegatorIndexersByEraDelegatorIndexerApyDelegatorIdAndIndexerIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexers_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexersOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type DelegatorIndexersByEraRewardDelegatorIdAndIndexerIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexers_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexersOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type DelegatorIndexersByEraStakeDelegatorIdAndIndexerIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexers_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexersOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type DelegatorUnclaimedRewardsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Unclaimed_Rewards_Distinct_Enum>>>;
  filter?: InputMaybe<UnclaimedRewardFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<UnclaimedRewardsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

export type DelegatorAggregates = {
  __typename?: 'DelegatorAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  average?: Maybe<DelegatorAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  distinctCount?: Maybe<DelegatorDistinctCountAggregates>;
  keys?: Maybe<Array<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  max?: Maybe<DelegatorMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  min?: Maybe<DelegatorMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevPopulation?: Maybe<DelegatorStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevSample?: Maybe<DelegatorStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  sum?: Maybe<DelegatorSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  variancePopulation?: Maybe<DelegatorVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  varianceSample?: Maybe<DelegatorVarianceSampleAggregates>;
};

export type DelegatorAverageAggregates = {
  __typename?: 'DelegatorAverageAggregates';
  /** Mean average of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of exitEra across the matching connection */
  exitEra?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of startEra across the matching connection */
  startEra?: Maybe<Scalars['BigFloat']['output']>;
};

export type DelegatorDistinctCountAggregates = {
  __typename?: 'DelegatorDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  _blockRange?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  _id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of exitEra across the matching connection */
  exitEra?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of lastEvent across the matching connection */
  lastEvent?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of startEra across the matching connection */
  startEra?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of totalDelegations across the matching connection */
  totalDelegations?: Maybe<Scalars['BigInt']['output']>;
};

/** A connection to a list of `Era` values, with data from `EraReward`. */
export type DelegatorErasByEraRewardDelegatorIdAndEraIdManyToManyConnection = {
  __typename?: 'DelegatorErasByEraRewardDelegatorIdAndEraIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<EraAggregates>;
  /** A list of edges which contains the `Era`, info from the `EraReward`, and the cursor to aid in pagination. */
  edges: Array<DelegatorErasByEraRewardDelegatorIdAndEraIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<EraAggregates>>;
  /** A list of `Era` objects. */
  nodes: Array<Maybe<Era>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Era` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Era` values, with data from `EraReward`. */
export type DelegatorErasByEraRewardDelegatorIdAndEraIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: Array<ErasGroupBy>;
  having?: InputMaybe<ErasHavingInput>;
};

/** A `Era` edge in the connection, with data from `EraReward`. */
export type DelegatorErasByEraRewardDelegatorIdAndEraIdManyToManyEdge = {
  __typename?: 'DelegatorErasByEraRewardDelegatorIdAndEraIdManyToManyEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `EraReward`. */
  eraRewards: EraRewardsConnection;
  /** The `Era` at the end of the edge. */
  node?: Maybe<Era>;
};


/** A `Era` edge in the connection, with data from `EraReward`. */
export type DelegatorErasByEraRewardDelegatorIdAndEraIdManyToManyEdgeEraRewardsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Era_Rewards_Distinct_Enum>>>;
  filter?: InputMaybe<EraRewardFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<EraRewardsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

/** A connection to a list of `Era` values, with data from `EraStake`. */
export type DelegatorErasByEraStakeDelegatorIdAndEraIdManyToManyConnection = {
  __typename?: 'DelegatorErasByEraStakeDelegatorIdAndEraIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<EraAggregates>;
  /** A list of edges which contains the `Era`, info from the `EraStake`, and the cursor to aid in pagination. */
  edges: Array<DelegatorErasByEraStakeDelegatorIdAndEraIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<EraAggregates>>;
  /** A list of `Era` objects. */
  nodes: Array<Maybe<Era>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Era` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Era` values, with data from `EraStake`. */
export type DelegatorErasByEraStakeDelegatorIdAndEraIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: Array<ErasGroupBy>;
  having?: InputMaybe<ErasHavingInput>;
};

/** A `Era` edge in the connection, with data from `EraStake`. */
export type DelegatorErasByEraStakeDelegatorIdAndEraIdManyToManyEdge = {
  __typename?: 'DelegatorErasByEraStakeDelegatorIdAndEraIdManyToManyEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `EraStake`. */
  eraStakes: EraStakesConnection;
  /** The `Era` at the end of the edge. */
  node?: Maybe<Era>;
};


/** A `Era` edge in the connection, with data from `EraStake`. */
export type DelegatorErasByEraStakeDelegatorIdAndEraIdManyToManyEdgeEraStakesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Era_Stakes_Distinct_Enum>>>;
  filter?: InputMaybe<EraStakeFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<EraStakesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

/** A filter to be used against `Delegator` object types. All fields are combined with a logical ‘and.’ */
export type DelegatorFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<DelegatorFilter>>;
  /** Filter by the object’s `claimedRewards` relation. */
  claimedRewards?: InputMaybe<DelegatorToManyRewardFilter>;
  /** Some related `claimedRewards` exist. */
  claimedRewardsExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `createdBlock` field. */
  createdBlock?: InputMaybe<IntFilter>;
  /** Filter by the object’s `delegations` relation. */
  delegations?: InputMaybe<DelegatorToManyDelegationFilter>;
  /** Some related `delegations` exist. */
  delegationsExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `eraDelegatorApies` relation. */
  eraDelegatorApies?: InputMaybe<DelegatorToManyEraDelegatorApyFilter>;
  /** Some related `eraDelegatorApies` exist. */
  eraDelegatorApiesExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `eraDelegatorIndexerApies` relation. */
  eraDelegatorIndexerApies?: InputMaybe<DelegatorToManyEraDelegatorIndexerApyFilter>;
  /** Some related `eraDelegatorIndexerApies` exist. */
  eraDelegatorIndexerApiesExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `eraRewards` relation. */
  eraRewards?: InputMaybe<DelegatorToManyEraRewardFilter>;
  /** Some related `eraRewards` exist. */
  eraRewardsExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `eraStakes` relation. */
  eraStakes?: InputMaybe<DelegatorToManyEraStakeFilter>;
  /** Some related `eraStakes` exist. */
  eraStakesExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `exitEra` field. */
  exitEra?: InputMaybe<IntFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<StringFilter>;
  /** Filter by the object’s `lastEvent` field. */
  lastEvent?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<DelegatorFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<DelegatorFilter>>;
  /** Filter by the object’s `startEra` field. */
  startEra?: InputMaybe<IntFilter>;
  /** Filter by the object’s `totalDelegations` field. */
  totalDelegations?: InputMaybe<JsonFilter>;
  /** Filter by the object’s `unclaimedRewards` relation. */
  unclaimedRewards?: InputMaybe<DelegatorToManyUnclaimedRewardFilter>;
  /** Some related `unclaimedRewards` exist. */
  unclaimedRewardsExist?: InputMaybe<Scalars['Boolean']['input']>;
};

/** A connection to a list of `Indexer` values, with data from `Delegation`. */
export type DelegatorIndexersByDelegationDelegatorIdAndIndexerIdManyToManyConnection = {
  __typename?: 'DelegatorIndexersByDelegationDelegatorIdAndIndexerIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<IndexerAggregates>;
  /** A list of edges which contains the `Indexer`, info from the `Delegation`, and the cursor to aid in pagination. */
  edges: Array<DelegatorIndexersByDelegationDelegatorIdAndIndexerIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<IndexerAggregates>>;
  /** A list of `Indexer` objects. */
  nodes: Array<Maybe<Indexer>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Indexer` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Indexer` values, with data from `Delegation`. */
export type DelegatorIndexersByDelegationDelegatorIdAndIndexerIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: Array<IndexersGroupBy>;
  having?: InputMaybe<IndexersHavingInput>;
};

/** A `Indexer` edge in the connection, with data from `Delegation`. */
export type DelegatorIndexersByDelegationDelegatorIdAndIndexerIdManyToManyEdge = {
  __typename?: 'DelegatorIndexersByDelegationDelegatorIdAndIndexerIdManyToManyEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `Delegation`. */
  delegations: DelegationsConnection;
  /** The `Indexer` at the end of the edge. */
  node?: Maybe<Indexer>;
};


/** A `Indexer` edge in the connection, with data from `Delegation`. */
export type DelegatorIndexersByDelegationDelegatorIdAndIndexerIdManyToManyEdgeDelegationsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Delegations_Distinct_Enum>>>;
  filter?: InputMaybe<DelegationFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<DelegationsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

/** A connection to a list of `Indexer` values, with data from `EraDelegatorIndexerApy`. */
export type DelegatorIndexersByEraDelegatorIndexerApyDelegatorIdAndIndexerIdManyToManyConnection = {
  __typename?: 'DelegatorIndexersByEraDelegatorIndexerApyDelegatorIdAndIndexerIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<IndexerAggregates>;
  /** A list of edges which contains the `Indexer`, info from the `EraDelegatorIndexerApy`, and the cursor to aid in pagination. */
  edges: Array<DelegatorIndexersByEraDelegatorIndexerApyDelegatorIdAndIndexerIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<IndexerAggregates>>;
  /** A list of `Indexer` objects. */
  nodes: Array<Maybe<Indexer>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Indexer` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Indexer` values, with data from `EraDelegatorIndexerApy`. */
export type DelegatorIndexersByEraDelegatorIndexerApyDelegatorIdAndIndexerIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: Array<IndexersGroupBy>;
  having?: InputMaybe<IndexersHavingInput>;
};

/** A `Indexer` edge in the connection, with data from `EraDelegatorIndexerApy`. */
export type DelegatorIndexersByEraDelegatorIndexerApyDelegatorIdAndIndexerIdManyToManyEdge = {
  __typename?: 'DelegatorIndexersByEraDelegatorIndexerApyDelegatorIdAndIndexerIdManyToManyEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `EraDelegatorIndexerApy`. */
  eraDelegatorIndexerApies: EraDelegatorIndexerApiesConnection;
  /** The `Indexer` at the end of the edge. */
  node?: Maybe<Indexer>;
};


/** A `Indexer` edge in the connection, with data from `EraDelegatorIndexerApy`. */
export type DelegatorIndexersByEraDelegatorIndexerApyDelegatorIdAndIndexerIdManyToManyEdgeEraDelegatorIndexerApiesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Era_Delegator_Indexer_Apies_Distinct_Enum>>>;
  filter?: InputMaybe<EraDelegatorIndexerApyFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<EraDelegatorIndexerApiesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

/** A connection to a list of `Indexer` values, with data from `EraReward`. */
export type DelegatorIndexersByEraRewardDelegatorIdAndIndexerIdManyToManyConnection = {
  __typename?: 'DelegatorIndexersByEraRewardDelegatorIdAndIndexerIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<IndexerAggregates>;
  /** A list of edges which contains the `Indexer`, info from the `EraReward`, and the cursor to aid in pagination. */
  edges: Array<DelegatorIndexersByEraRewardDelegatorIdAndIndexerIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<IndexerAggregates>>;
  /** A list of `Indexer` objects. */
  nodes: Array<Maybe<Indexer>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Indexer` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Indexer` values, with data from `EraReward`. */
export type DelegatorIndexersByEraRewardDelegatorIdAndIndexerIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: Array<IndexersGroupBy>;
  having?: InputMaybe<IndexersHavingInput>;
};

/** A `Indexer` edge in the connection, with data from `EraReward`. */
export type DelegatorIndexersByEraRewardDelegatorIdAndIndexerIdManyToManyEdge = {
  __typename?: 'DelegatorIndexersByEraRewardDelegatorIdAndIndexerIdManyToManyEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `EraReward`. */
  eraRewards: EraRewardsConnection;
  /** The `Indexer` at the end of the edge. */
  node?: Maybe<Indexer>;
};


/** A `Indexer` edge in the connection, with data from `EraReward`. */
export type DelegatorIndexersByEraRewardDelegatorIdAndIndexerIdManyToManyEdgeEraRewardsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Era_Rewards_Distinct_Enum>>>;
  filter?: InputMaybe<EraRewardFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<EraRewardsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

/** A connection to a list of `Indexer` values, with data from `EraStake`. */
export type DelegatorIndexersByEraStakeDelegatorIdAndIndexerIdManyToManyConnection = {
  __typename?: 'DelegatorIndexersByEraStakeDelegatorIdAndIndexerIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<IndexerAggregates>;
  /** A list of edges which contains the `Indexer`, info from the `EraStake`, and the cursor to aid in pagination. */
  edges: Array<DelegatorIndexersByEraStakeDelegatorIdAndIndexerIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<IndexerAggregates>>;
  /** A list of `Indexer` objects. */
  nodes: Array<Maybe<Indexer>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Indexer` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Indexer` values, with data from `EraStake`. */
export type DelegatorIndexersByEraStakeDelegatorIdAndIndexerIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: Array<IndexersGroupBy>;
  having?: InputMaybe<IndexersHavingInput>;
};

/** A `Indexer` edge in the connection, with data from `EraStake`. */
export type DelegatorIndexersByEraStakeDelegatorIdAndIndexerIdManyToManyEdge = {
  __typename?: 'DelegatorIndexersByEraStakeDelegatorIdAndIndexerIdManyToManyEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `EraStake`. */
  eraStakes: EraStakesConnection;
  /** The `Indexer` at the end of the edge. */
  node?: Maybe<Indexer>;
};


/** A `Indexer` edge in the connection, with data from `EraStake`. */
export type DelegatorIndexersByEraStakeDelegatorIdAndIndexerIdManyToManyEdgeEraStakesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Era_Stakes_Distinct_Enum>>>;
  filter?: InputMaybe<EraStakeFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<EraStakesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

export type DelegatorMaxAggregates = {
  __typename?: 'DelegatorMaxAggregates';
  /** Maximum of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['Int']['output']>;
  /** Maximum of exitEra across the matching connection */
  exitEra?: Maybe<Scalars['Int']['output']>;
  /** Maximum of startEra across the matching connection */
  startEra?: Maybe<Scalars['Int']['output']>;
};

export type DelegatorMinAggregates = {
  __typename?: 'DelegatorMinAggregates';
  /** Minimum of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['Int']['output']>;
  /** Minimum of exitEra across the matching connection */
  exitEra?: Maybe<Scalars['Int']['output']>;
  /** Minimum of startEra across the matching connection */
  startEra?: Maybe<Scalars['Int']['output']>;
};

export type DelegatorStddevPopulationAggregates = {
  __typename?: 'DelegatorStddevPopulationAggregates';
  /** Population standard deviation of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of exitEra across the matching connection */
  exitEra?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of startEra across the matching connection */
  startEra?: Maybe<Scalars['BigFloat']['output']>;
};

export type DelegatorStddevSampleAggregates = {
  __typename?: 'DelegatorStddevSampleAggregates';
  /** Sample standard deviation of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of exitEra across the matching connection */
  exitEra?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of startEra across the matching connection */
  startEra?: Maybe<Scalars['BigFloat']['output']>;
};

export type DelegatorSumAggregates = {
  __typename?: 'DelegatorSumAggregates';
  /** Sum of createdBlock across the matching connection */
  createdBlock: Scalars['BigInt']['output'];
  /** Sum of exitEra across the matching connection */
  exitEra: Scalars['BigInt']['output'];
  /** Sum of startEra across the matching connection */
  startEra: Scalars['BigInt']['output'];
};

/** A filter to be used against many `Delegation` object types. All fields are combined with a logical ‘and.’ */
export type DelegatorToManyDelegationFilter = {
  /** Aggregates across related `Delegation` match the filter criteria. */
  aggregates?: InputMaybe<DelegationAggregatesFilter>;
  /** Every related `Delegation` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<DelegationFilter>;
  /** No related `Delegation` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<DelegationFilter>;
  /** Some related `Delegation` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<DelegationFilter>;
};

/** A filter to be used against many `EraDelegatorApy` object types. All fields are combined with a logical ‘and.’ */
export type DelegatorToManyEraDelegatorApyFilter = {
  /** Aggregates across related `EraDelegatorApy` match the filter criteria. */
  aggregates?: InputMaybe<EraDelegatorApyAggregatesFilter>;
  /** Every related `EraDelegatorApy` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<EraDelegatorApyFilter>;
  /** No related `EraDelegatorApy` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<EraDelegatorApyFilter>;
  /** Some related `EraDelegatorApy` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<EraDelegatorApyFilter>;
};

/** A filter to be used against many `EraDelegatorIndexerApy` object types. All fields are combined with a logical ‘and.’ */
export type DelegatorToManyEraDelegatorIndexerApyFilter = {
  /** Aggregates across related `EraDelegatorIndexerApy` match the filter criteria. */
  aggregates?: InputMaybe<EraDelegatorIndexerApyAggregatesFilter>;
  /** Every related `EraDelegatorIndexerApy` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<EraDelegatorIndexerApyFilter>;
  /** No related `EraDelegatorIndexerApy` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<EraDelegatorIndexerApyFilter>;
  /** Some related `EraDelegatorIndexerApy` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<EraDelegatorIndexerApyFilter>;
};

/** A filter to be used against many `EraReward` object types. All fields are combined with a logical ‘and.’ */
export type DelegatorToManyEraRewardFilter = {
  /** Aggregates across related `EraReward` match the filter criteria. */
  aggregates?: InputMaybe<EraRewardAggregatesFilter>;
  /** Every related `EraReward` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<EraRewardFilter>;
  /** No related `EraReward` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<EraRewardFilter>;
  /** Some related `EraReward` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<EraRewardFilter>;
};

/** A filter to be used against many `EraStake` object types. All fields are combined with a logical ‘and.’ */
export type DelegatorToManyEraStakeFilter = {
  /** Aggregates across related `EraStake` match the filter criteria. */
  aggregates?: InputMaybe<EraStakeAggregatesFilter>;
  /** Every related `EraStake` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<EraStakeFilter>;
  /** No related `EraStake` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<EraStakeFilter>;
  /** Some related `EraStake` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<EraStakeFilter>;
};

/** A filter to be used against many `Reward` object types. All fields are combined with a logical ‘and.’ */
export type DelegatorToManyRewardFilter = {
  /** Aggregates across related `Reward` match the filter criteria. */
  aggregates?: InputMaybe<RewardAggregatesFilter>;
  /** Every related `Reward` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<RewardFilter>;
  /** No related `Reward` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<RewardFilter>;
  /** Some related `Reward` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<RewardFilter>;
};

/** A filter to be used against many `UnclaimedReward` object types. All fields are combined with a logical ‘and.’ */
export type DelegatorToManyUnclaimedRewardFilter = {
  /** Aggregates across related `UnclaimedReward` match the filter criteria. */
  aggregates?: InputMaybe<UnclaimedRewardAggregatesFilter>;
  /** Every related `UnclaimedReward` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<UnclaimedRewardFilter>;
  /** No related `UnclaimedReward` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<UnclaimedRewardFilter>;
  /** Some related `UnclaimedReward` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<UnclaimedRewardFilter>;
};

export type DelegatorVariancePopulationAggregates = {
  __typename?: 'DelegatorVariancePopulationAggregates';
  /** Population variance of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of exitEra across the matching connection */
  exitEra?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of startEra across the matching connection */
  startEra?: Maybe<Scalars['BigFloat']['output']>;
};

export type DelegatorVarianceSampleAggregates = {
  __typename?: 'DelegatorVarianceSampleAggregates';
  /** Sample variance of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of exitEra across the matching connection */
  exitEra?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of startEra across the matching connection */
  startEra?: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `Delegator` values. */
export type DelegatorsConnection = {
  __typename?: 'DelegatorsConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<DelegatorAggregates>;
  /** A list of edges which contains the `Delegator` and cursor to aid in pagination. */
  edges: Array<DelegatorsEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<DelegatorAggregates>>;
  /** A list of `Delegator` objects. */
  nodes: Array<Maybe<Delegator>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Delegator` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Delegator` values. */
export type DelegatorsConnectionGroupedAggregatesArgs = {
  groupBy: Array<DelegatorsGroupBy>;
  having?: InputMaybe<DelegatorsHavingInput>;
};

/** A `Delegator` edge in the connection. */
export type DelegatorsEdge = {
  __typename?: 'DelegatorsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `Delegator` at the end of the edge. */
  node?: Maybe<Delegator>;
};

/** Grouping methods for `Delegator` for usage during aggregation. */
export enum DelegatorsGroupBy {
  CreatedBlock = 'CREATED_BLOCK',
  ExitEra = 'EXIT_ERA',
  Id = 'ID',
  LastEvent = 'LAST_EVENT',
  StartEra = 'START_ERA',
  TotalDelegations = 'TOTAL_DELEGATIONS'
}

export type DelegatorsHavingAverageInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
  exitEra?: InputMaybe<HavingIntFilter>;
  startEra?: InputMaybe<HavingIntFilter>;
};

export type DelegatorsHavingDistinctCountInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
  exitEra?: InputMaybe<HavingIntFilter>;
  startEra?: InputMaybe<HavingIntFilter>;
};

/** Conditions for `Delegator` aggregates. */
export type DelegatorsHavingInput = {
  AND?: InputMaybe<Array<DelegatorsHavingInput>>;
  OR?: InputMaybe<Array<DelegatorsHavingInput>>;
  average?: InputMaybe<DelegatorsHavingAverageInput>;
  distinctCount?: InputMaybe<DelegatorsHavingDistinctCountInput>;
  max?: InputMaybe<DelegatorsHavingMaxInput>;
  min?: InputMaybe<DelegatorsHavingMinInput>;
  stddevPopulation?: InputMaybe<DelegatorsHavingStddevPopulationInput>;
  stddevSample?: InputMaybe<DelegatorsHavingStddevSampleInput>;
  sum?: InputMaybe<DelegatorsHavingSumInput>;
  variancePopulation?: InputMaybe<DelegatorsHavingVariancePopulationInput>;
  varianceSample?: InputMaybe<DelegatorsHavingVarianceSampleInput>;
};

export type DelegatorsHavingMaxInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
  exitEra?: InputMaybe<HavingIntFilter>;
  startEra?: InputMaybe<HavingIntFilter>;
};

export type DelegatorsHavingMinInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
  exitEra?: InputMaybe<HavingIntFilter>;
  startEra?: InputMaybe<HavingIntFilter>;
};

export type DelegatorsHavingStddevPopulationInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
  exitEra?: InputMaybe<HavingIntFilter>;
  startEra?: InputMaybe<HavingIntFilter>;
};

export type DelegatorsHavingStddevSampleInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
  exitEra?: InputMaybe<HavingIntFilter>;
  startEra?: InputMaybe<HavingIntFilter>;
};

export type DelegatorsHavingSumInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
  exitEra?: InputMaybe<HavingIntFilter>;
  startEra?: InputMaybe<HavingIntFilter>;
};

export type DelegatorsHavingVariancePopulationInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
  exitEra?: InputMaybe<HavingIntFilter>;
  startEra?: InputMaybe<HavingIntFilter>;
};

export type DelegatorsHavingVarianceSampleInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
  exitEra?: InputMaybe<HavingIntFilter>;
  startEra?: InputMaybe<HavingIntFilter>;
};

/** Methods to use when ordering `Delegator`. */
export enum DelegatorsOrderBy {
  ClaimedRewardsAverageAmountAsc = 'CLAIMED_REWARDS_AVERAGE_AMOUNT_ASC',
  ClaimedRewardsAverageAmountDesc = 'CLAIMED_REWARDS_AVERAGE_AMOUNT_DESC',
  ClaimedRewardsAverageBlockRangeAsc = 'CLAIMED_REWARDS_AVERAGE_BLOCK_RANGE_ASC',
  ClaimedRewardsAverageBlockRangeDesc = 'CLAIMED_REWARDS_AVERAGE_BLOCK_RANGE_DESC',
  ClaimedRewardsAverageClaimedTimeAsc = 'CLAIMED_REWARDS_AVERAGE_CLAIMED_TIME_ASC',
  ClaimedRewardsAverageClaimedTimeDesc = 'CLAIMED_REWARDS_AVERAGE_CLAIMED_TIME_DESC',
  ClaimedRewardsAverageCreatedBlockAsc = 'CLAIMED_REWARDS_AVERAGE_CREATED_BLOCK_ASC',
  ClaimedRewardsAverageCreatedBlockDesc = 'CLAIMED_REWARDS_AVERAGE_CREATED_BLOCK_DESC',
  ClaimedRewardsAverageDelegatorAddressAsc = 'CLAIMED_REWARDS_AVERAGE_DELEGATOR_ADDRESS_ASC',
  ClaimedRewardsAverageDelegatorAddressDesc = 'CLAIMED_REWARDS_AVERAGE_DELEGATOR_ADDRESS_DESC',
  ClaimedRewardsAverageDelegatorIdAsc = 'CLAIMED_REWARDS_AVERAGE_DELEGATOR_ID_ASC',
  ClaimedRewardsAverageDelegatorIdDesc = 'CLAIMED_REWARDS_AVERAGE_DELEGATOR_ID_DESC',
  ClaimedRewardsAverageIdAsc = 'CLAIMED_REWARDS_AVERAGE_ID_ASC',
  ClaimedRewardsAverageIdDesc = 'CLAIMED_REWARDS_AVERAGE_ID_DESC',
  ClaimedRewardsAverageIndexerAddressAsc = 'CLAIMED_REWARDS_AVERAGE_INDEXER_ADDRESS_ASC',
  ClaimedRewardsAverageIndexerAddressDesc = 'CLAIMED_REWARDS_AVERAGE_INDEXER_ADDRESS_DESC',
  ClaimedRewardsAverageLastEventAsc = 'CLAIMED_REWARDS_AVERAGE_LAST_EVENT_ASC',
  ClaimedRewardsAverageLastEventDesc = 'CLAIMED_REWARDS_AVERAGE_LAST_EVENT_DESC',
  ClaimedRewardsCountAsc = 'CLAIMED_REWARDS_COUNT_ASC',
  ClaimedRewardsCountDesc = 'CLAIMED_REWARDS_COUNT_DESC',
  ClaimedRewardsDistinctCountAmountAsc = 'CLAIMED_REWARDS_DISTINCT_COUNT_AMOUNT_ASC',
  ClaimedRewardsDistinctCountAmountDesc = 'CLAIMED_REWARDS_DISTINCT_COUNT_AMOUNT_DESC',
  ClaimedRewardsDistinctCountBlockRangeAsc = 'CLAIMED_REWARDS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  ClaimedRewardsDistinctCountBlockRangeDesc = 'CLAIMED_REWARDS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  ClaimedRewardsDistinctCountClaimedTimeAsc = 'CLAIMED_REWARDS_DISTINCT_COUNT_CLAIMED_TIME_ASC',
  ClaimedRewardsDistinctCountClaimedTimeDesc = 'CLAIMED_REWARDS_DISTINCT_COUNT_CLAIMED_TIME_DESC',
  ClaimedRewardsDistinctCountCreatedBlockAsc = 'CLAIMED_REWARDS_DISTINCT_COUNT_CREATED_BLOCK_ASC',
  ClaimedRewardsDistinctCountCreatedBlockDesc = 'CLAIMED_REWARDS_DISTINCT_COUNT_CREATED_BLOCK_DESC',
  ClaimedRewardsDistinctCountDelegatorAddressAsc = 'CLAIMED_REWARDS_DISTINCT_COUNT_DELEGATOR_ADDRESS_ASC',
  ClaimedRewardsDistinctCountDelegatorAddressDesc = 'CLAIMED_REWARDS_DISTINCT_COUNT_DELEGATOR_ADDRESS_DESC',
  ClaimedRewardsDistinctCountDelegatorIdAsc = 'CLAIMED_REWARDS_DISTINCT_COUNT_DELEGATOR_ID_ASC',
  ClaimedRewardsDistinctCountDelegatorIdDesc = 'CLAIMED_REWARDS_DISTINCT_COUNT_DELEGATOR_ID_DESC',
  ClaimedRewardsDistinctCountIdAsc = 'CLAIMED_REWARDS_DISTINCT_COUNT_ID_ASC',
  ClaimedRewardsDistinctCountIdDesc = 'CLAIMED_REWARDS_DISTINCT_COUNT_ID_DESC',
  ClaimedRewardsDistinctCountIndexerAddressAsc = 'CLAIMED_REWARDS_DISTINCT_COUNT_INDEXER_ADDRESS_ASC',
  ClaimedRewardsDistinctCountIndexerAddressDesc = 'CLAIMED_REWARDS_DISTINCT_COUNT_INDEXER_ADDRESS_DESC',
  ClaimedRewardsDistinctCountLastEventAsc = 'CLAIMED_REWARDS_DISTINCT_COUNT_LAST_EVENT_ASC',
  ClaimedRewardsDistinctCountLastEventDesc = 'CLAIMED_REWARDS_DISTINCT_COUNT_LAST_EVENT_DESC',
  ClaimedRewardsMaxAmountAsc = 'CLAIMED_REWARDS_MAX_AMOUNT_ASC',
  ClaimedRewardsMaxAmountDesc = 'CLAIMED_REWARDS_MAX_AMOUNT_DESC',
  ClaimedRewardsMaxBlockRangeAsc = 'CLAIMED_REWARDS_MAX_BLOCK_RANGE_ASC',
  ClaimedRewardsMaxBlockRangeDesc = 'CLAIMED_REWARDS_MAX_BLOCK_RANGE_DESC',
  ClaimedRewardsMaxClaimedTimeAsc = 'CLAIMED_REWARDS_MAX_CLAIMED_TIME_ASC',
  ClaimedRewardsMaxClaimedTimeDesc = 'CLAIMED_REWARDS_MAX_CLAIMED_TIME_DESC',
  ClaimedRewardsMaxCreatedBlockAsc = 'CLAIMED_REWARDS_MAX_CREATED_BLOCK_ASC',
  ClaimedRewardsMaxCreatedBlockDesc = 'CLAIMED_REWARDS_MAX_CREATED_BLOCK_DESC',
  ClaimedRewardsMaxDelegatorAddressAsc = 'CLAIMED_REWARDS_MAX_DELEGATOR_ADDRESS_ASC',
  ClaimedRewardsMaxDelegatorAddressDesc = 'CLAIMED_REWARDS_MAX_DELEGATOR_ADDRESS_DESC',
  ClaimedRewardsMaxDelegatorIdAsc = 'CLAIMED_REWARDS_MAX_DELEGATOR_ID_ASC',
  ClaimedRewardsMaxDelegatorIdDesc = 'CLAIMED_REWARDS_MAX_DELEGATOR_ID_DESC',
  ClaimedRewardsMaxIdAsc = 'CLAIMED_REWARDS_MAX_ID_ASC',
  ClaimedRewardsMaxIdDesc = 'CLAIMED_REWARDS_MAX_ID_DESC',
  ClaimedRewardsMaxIndexerAddressAsc = 'CLAIMED_REWARDS_MAX_INDEXER_ADDRESS_ASC',
  ClaimedRewardsMaxIndexerAddressDesc = 'CLAIMED_REWARDS_MAX_INDEXER_ADDRESS_DESC',
  ClaimedRewardsMaxLastEventAsc = 'CLAIMED_REWARDS_MAX_LAST_EVENT_ASC',
  ClaimedRewardsMaxLastEventDesc = 'CLAIMED_REWARDS_MAX_LAST_EVENT_DESC',
  ClaimedRewardsMinAmountAsc = 'CLAIMED_REWARDS_MIN_AMOUNT_ASC',
  ClaimedRewardsMinAmountDesc = 'CLAIMED_REWARDS_MIN_AMOUNT_DESC',
  ClaimedRewardsMinBlockRangeAsc = 'CLAIMED_REWARDS_MIN_BLOCK_RANGE_ASC',
  ClaimedRewardsMinBlockRangeDesc = 'CLAIMED_REWARDS_MIN_BLOCK_RANGE_DESC',
  ClaimedRewardsMinClaimedTimeAsc = 'CLAIMED_REWARDS_MIN_CLAIMED_TIME_ASC',
  ClaimedRewardsMinClaimedTimeDesc = 'CLAIMED_REWARDS_MIN_CLAIMED_TIME_DESC',
  ClaimedRewardsMinCreatedBlockAsc = 'CLAIMED_REWARDS_MIN_CREATED_BLOCK_ASC',
  ClaimedRewardsMinCreatedBlockDesc = 'CLAIMED_REWARDS_MIN_CREATED_BLOCK_DESC',
  ClaimedRewardsMinDelegatorAddressAsc = 'CLAIMED_REWARDS_MIN_DELEGATOR_ADDRESS_ASC',
  ClaimedRewardsMinDelegatorAddressDesc = 'CLAIMED_REWARDS_MIN_DELEGATOR_ADDRESS_DESC',
  ClaimedRewardsMinDelegatorIdAsc = 'CLAIMED_REWARDS_MIN_DELEGATOR_ID_ASC',
  ClaimedRewardsMinDelegatorIdDesc = 'CLAIMED_REWARDS_MIN_DELEGATOR_ID_DESC',
  ClaimedRewardsMinIdAsc = 'CLAIMED_REWARDS_MIN_ID_ASC',
  ClaimedRewardsMinIdDesc = 'CLAIMED_REWARDS_MIN_ID_DESC',
  ClaimedRewardsMinIndexerAddressAsc = 'CLAIMED_REWARDS_MIN_INDEXER_ADDRESS_ASC',
  ClaimedRewardsMinIndexerAddressDesc = 'CLAIMED_REWARDS_MIN_INDEXER_ADDRESS_DESC',
  ClaimedRewardsMinLastEventAsc = 'CLAIMED_REWARDS_MIN_LAST_EVENT_ASC',
  ClaimedRewardsMinLastEventDesc = 'CLAIMED_REWARDS_MIN_LAST_EVENT_DESC',
  ClaimedRewardsStddevPopulationAmountAsc = 'CLAIMED_REWARDS_STDDEV_POPULATION_AMOUNT_ASC',
  ClaimedRewardsStddevPopulationAmountDesc = 'CLAIMED_REWARDS_STDDEV_POPULATION_AMOUNT_DESC',
  ClaimedRewardsStddevPopulationBlockRangeAsc = 'CLAIMED_REWARDS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  ClaimedRewardsStddevPopulationBlockRangeDesc = 'CLAIMED_REWARDS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  ClaimedRewardsStddevPopulationClaimedTimeAsc = 'CLAIMED_REWARDS_STDDEV_POPULATION_CLAIMED_TIME_ASC',
  ClaimedRewardsStddevPopulationClaimedTimeDesc = 'CLAIMED_REWARDS_STDDEV_POPULATION_CLAIMED_TIME_DESC',
  ClaimedRewardsStddevPopulationCreatedBlockAsc = 'CLAIMED_REWARDS_STDDEV_POPULATION_CREATED_BLOCK_ASC',
  ClaimedRewardsStddevPopulationCreatedBlockDesc = 'CLAIMED_REWARDS_STDDEV_POPULATION_CREATED_BLOCK_DESC',
  ClaimedRewardsStddevPopulationDelegatorAddressAsc = 'CLAIMED_REWARDS_STDDEV_POPULATION_DELEGATOR_ADDRESS_ASC',
  ClaimedRewardsStddevPopulationDelegatorAddressDesc = 'CLAIMED_REWARDS_STDDEV_POPULATION_DELEGATOR_ADDRESS_DESC',
  ClaimedRewardsStddevPopulationDelegatorIdAsc = 'CLAIMED_REWARDS_STDDEV_POPULATION_DELEGATOR_ID_ASC',
  ClaimedRewardsStddevPopulationDelegatorIdDesc = 'CLAIMED_REWARDS_STDDEV_POPULATION_DELEGATOR_ID_DESC',
  ClaimedRewardsStddevPopulationIdAsc = 'CLAIMED_REWARDS_STDDEV_POPULATION_ID_ASC',
  ClaimedRewardsStddevPopulationIdDesc = 'CLAIMED_REWARDS_STDDEV_POPULATION_ID_DESC',
  ClaimedRewardsStddevPopulationIndexerAddressAsc = 'CLAIMED_REWARDS_STDDEV_POPULATION_INDEXER_ADDRESS_ASC',
  ClaimedRewardsStddevPopulationIndexerAddressDesc = 'CLAIMED_REWARDS_STDDEV_POPULATION_INDEXER_ADDRESS_DESC',
  ClaimedRewardsStddevPopulationLastEventAsc = 'CLAIMED_REWARDS_STDDEV_POPULATION_LAST_EVENT_ASC',
  ClaimedRewardsStddevPopulationLastEventDesc = 'CLAIMED_REWARDS_STDDEV_POPULATION_LAST_EVENT_DESC',
  ClaimedRewardsStddevSampleAmountAsc = 'CLAIMED_REWARDS_STDDEV_SAMPLE_AMOUNT_ASC',
  ClaimedRewardsStddevSampleAmountDesc = 'CLAIMED_REWARDS_STDDEV_SAMPLE_AMOUNT_DESC',
  ClaimedRewardsStddevSampleBlockRangeAsc = 'CLAIMED_REWARDS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  ClaimedRewardsStddevSampleBlockRangeDesc = 'CLAIMED_REWARDS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  ClaimedRewardsStddevSampleClaimedTimeAsc = 'CLAIMED_REWARDS_STDDEV_SAMPLE_CLAIMED_TIME_ASC',
  ClaimedRewardsStddevSampleClaimedTimeDesc = 'CLAIMED_REWARDS_STDDEV_SAMPLE_CLAIMED_TIME_DESC',
  ClaimedRewardsStddevSampleCreatedBlockAsc = 'CLAIMED_REWARDS_STDDEV_SAMPLE_CREATED_BLOCK_ASC',
  ClaimedRewardsStddevSampleCreatedBlockDesc = 'CLAIMED_REWARDS_STDDEV_SAMPLE_CREATED_BLOCK_DESC',
  ClaimedRewardsStddevSampleDelegatorAddressAsc = 'CLAIMED_REWARDS_STDDEV_SAMPLE_DELEGATOR_ADDRESS_ASC',
  ClaimedRewardsStddevSampleDelegatorAddressDesc = 'CLAIMED_REWARDS_STDDEV_SAMPLE_DELEGATOR_ADDRESS_DESC',
  ClaimedRewardsStddevSampleDelegatorIdAsc = 'CLAIMED_REWARDS_STDDEV_SAMPLE_DELEGATOR_ID_ASC',
  ClaimedRewardsStddevSampleDelegatorIdDesc = 'CLAIMED_REWARDS_STDDEV_SAMPLE_DELEGATOR_ID_DESC',
  ClaimedRewardsStddevSampleIdAsc = 'CLAIMED_REWARDS_STDDEV_SAMPLE_ID_ASC',
  ClaimedRewardsStddevSampleIdDesc = 'CLAIMED_REWARDS_STDDEV_SAMPLE_ID_DESC',
  ClaimedRewardsStddevSampleIndexerAddressAsc = 'CLAIMED_REWARDS_STDDEV_SAMPLE_INDEXER_ADDRESS_ASC',
  ClaimedRewardsStddevSampleIndexerAddressDesc = 'CLAIMED_REWARDS_STDDEV_SAMPLE_INDEXER_ADDRESS_DESC',
  ClaimedRewardsStddevSampleLastEventAsc = 'CLAIMED_REWARDS_STDDEV_SAMPLE_LAST_EVENT_ASC',
  ClaimedRewardsStddevSampleLastEventDesc = 'CLAIMED_REWARDS_STDDEV_SAMPLE_LAST_EVENT_DESC',
  ClaimedRewardsSumAmountAsc = 'CLAIMED_REWARDS_SUM_AMOUNT_ASC',
  ClaimedRewardsSumAmountDesc = 'CLAIMED_REWARDS_SUM_AMOUNT_DESC',
  ClaimedRewardsSumBlockRangeAsc = 'CLAIMED_REWARDS_SUM_BLOCK_RANGE_ASC',
  ClaimedRewardsSumBlockRangeDesc = 'CLAIMED_REWARDS_SUM_BLOCK_RANGE_DESC',
  ClaimedRewardsSumClaimedTimeAsc = 'CLAIMED_REWARDS_SUM_CLAIMED_TIME_ASC',
  ClaimedRewardsSumClaimedTimeDesc = 'CLAIMED_REWARDS_SUM_CLAIMED_TIME_DESC',
  ClaimedRewardsSumCreatedBlockAsc = 'CLAIMED_REWARDS_SUM_CREATED_BLOCK_ASC',
  ClaimedRewardsSumCreatedBlockDesc = 'CLAIMED_REWARDS_SUM_CREATED_BLOCK_DESC',
  ClaimedRewardsSumDelegatorAddressAsc = 'CLAIMED_REWARDS_SUM_DELEGATOR_ADDRESS_ASC',
  ClaimedRewardsSumDelegatorAddressDesc = 'CLAIMED_REWARDS_SUM_DELEGATOR_ADDRESS_DESC',
  ClaimedRewardsSumDelegatorIdAsc = 'CLAIMED_REWARDS_SUM_DELEGATOR_ID_ASC',
  ClaimedRewardsSumDelegatorIdDesc = 'CLAIMED_REWARDS_SUM_DELEGATOR_ID_DESC',
  ClaimedRewardsSumIdAsc = 'CLAIMED_REWARDS_SUM_ID_ASC',
  ClaimedRewardsSumIdDesc = 'CLAIMED_REWARDS_SUM_ID_DESC',
  ClaimedRewardsSumIndexerAddressAsc = 'CLAIMED_REWARDS_SUM_INDEXER_ADDRESS_ASC',
  ClaimedRewardsSumIndexerAddressDesc = 'CLAIMED_REWARDS_SUM_INDEXER_ADDRESS_DESC',
  ClaimedRewardsSumLastEventAsc = 'CLAIMED_REWARDS_SUM_LAST_EVENT_ASC',
  ClaimedRewardsSumLastEventDesc = 'CLAIMED_REWARDS_SUM_LAST_EVENT_DESC',
  ClaimedRewardsVariancePopulationAmountAsc = 'CLAIMED_REWARDS_VARIANCE_POPULATION_AMOUNT_ASC',
  ClaimedRewardsVariancePopulationAmountDesc = 'CLAIMED_REWARDS_VARIANCE_POPULATION_AMOUNT_DESC',
  ClaimedRewardsVariancePopulationBlockRangeAsc = 'CLAIMED_REWARDS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  ClaimedRewardsVariancePopulationBlockRangeDesc = 'CLAIMED_REWARDS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  ClaimedRewardsVariancePopulationClaimedTimeAsc = 'CLAIMED_REWARDS_VARIANCE_POPULATION_CLAIMED_TIME_ASC',
  ClaimedRewardsVariancePopulationClaimedTimeDesc = 'CLAIMED_REWARDS_VARIANCE_POPULATION_CLAIMED_TIME_DESC',
  ClaimedRewardsVariancePopulationCreatedBlockAsc = 'CLAIMED_REWARDS_VARIANCE_POPULATION_CREATED_BLOCK_ASC',
  ClaimedRewardsVariancePopulationCreatedBlockDesc = 'CLAIMED_REWARDS_VARIANCE_POPULATION_CREATED_BLOCK_DESC',
  ClaimedRewardsVariancePopulationDelegatorAddressAsc = 'CLAIMED_REWARDS_VARIANCE_POPULATION_DELEGATOR_ADDRESS_ASC',
  ClaimedRewardsVariancePopulationDelegatorAddressDesc = 'CLAIMED_REWARDS_VARIANCE_POPULATION_DELEGATOR_ADDRESS_DESC',
  ClaimedRewardsVariancePopulationDelegatorIdAsc = 'CLAIMED_REWARDS_VARIANCE_POPULATION_DELEGATOR_ID_ASC',
  ClaimedRewardsVariancePopulationDelegatorIdDesc = 'CLAIMED_REWARDS_VARIANCE_POPULATION_DELEGATOR_ID_DESC',
  ClaimedRewardsVariancePopulationIdAsc = 'CLAIMED_REWARDS_VARIANCE_POPULATION_ID_ASC',
  ClaimedRewardsVariancePopulationIdDesc = 'CLAIMED_REWARDS_VARIANCE_POPULATION_ID_DESC',
  ClaimedRewardsVariancePopulationIndexerAddressAsc = 'CLAIMED_REWARDS_VARIANCE_POPULATION_INDEXER_ADDRESS_ASC',
  ClaimedRewardsVariancePopulationIndexerAddressDesc = 'CLAIMED_REWARDS_VARIANCE_POPULATION_INDEXER_ADDRESS_DESC',
  ClaimedRewardsVariancePopulationLastEventAsc = 'CLAIMED_REWARDS_VARIANCE_POPULATION_LAST_EVENT_ASC',
  ClaimedRewardsVariancePopulationLastEventDesc = 'CLAIMED_REWARDS_VARIANCE_POPULATION_LAST_EVENT_DESC',
  ClaimedRewardsVarianceSampleAmountAsc = 'CLAIMED_REWARDS_VARIANCE_SAMPLE_AMOUNT_ASC',
  ClaimedRewardsVarianceSampleAmountDesc = 'CLAIMED_REWARDS_VARIANCE_SAMPLE_AMOUNT_DESC',
  ClaimedRewardsVarianceSampleBlockRangeAsc = 'CLAIMED_REWARDS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  ClaimedRewardsVarianceSampleBlockRangeDesc = 'CLAIMED_REWARDS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  ClaimedRewardsVarianceSampleClaimedTimeAsc = 'CLAIMED_REWARDS_VARIANCE_SAMPLE_CLAIMED_TIME_ASC',
  ClaimedRewardsVarianceSampleClaimedTimeDesc = 'CLAIMED_REWARDS_VARIANCE_SAMPLE_CLAIMED_TIME_DESC',
  ClaimedRewardsVarianceSampleCreatedBlockAsc = 'CLAIMED_REWARDS_VARIANCE_SAMPLE_CREATED_BLOCK_ASC',
  ClaimedRewardsVarianceSampleCreatedBlockDesc = 'CLAIMED_REWARDS_VARIANCE_SAMPLE_CREATED_BLOCK_DESC',
  ClaimedRewardsVarianceSampleDelegatorAddressAsc = 'CLAIMED_REWARDS_VARIANCE_SAMPLE_DELEGATOR_ADDRESS_ASC',
  ClaimedRewardsVarianceSampleDelegatorAddressDesc = 'CLAIMED_REWARDS_VARIANCE_SAMPLE_DELEGATOR_ADDRESS_DESC',
  ClaimedRewardsVarianceSampleDelegatorIdAsc = 'CLAIMED_REWARDS_VARIANCE_SAMPLE_DELEGATOR_ID_ASC',
  ClaimedRewardsVarianceSampleDelegatorIdDesc = 'CLAIMED_REWARDS_VARIANCE_SAMPLE_DELEGATOR_ID_DESC',
  ClaimedRewardsVarianceSampleIdAsc = 'CLAIMED_REWARDS_VARIANCE_SAMPLE_ID_ASC',
  ClaimedRewardsVarianceSampleIdDesc = 'CLAIMED_REWARDS_VARIANCE_SAMPLE_ID_DESC',
  ClaimedRewardsVarianceSampleIndexerAddressAsc = 'CLAIMED_REWARDS_VARIANCE_SAMPLE_INDEXER_ADDRESS_ASC',
  ClaimedRewardsVarianceSampleIndexerAddressDesc = 'CLAIMED_REWARDS_VARIANCE_SAMPLE_INDEXER_ADDRESS_DESC',
  ClaimedRewardsVarianceSampleLastEventAsc = 'CLAIMED_REWARDS_VARIANCE_SAMPLE_LAST_EVENT_ASC',
  ClaimedRewardsVarianceSampleLastEventDesc = 'CLAIMED_REWARDS_VARIANCE_SAMPLE_LAST_EVENT_DESC',
  CreatedBlockAsc = 'CREATED_BLOCK_ASC',
  CreatedBlockDesc = 'CREATED_BLOCK_DESC',
  DelegationsAverageAmountAsc = 'DELEGATIONS_AVERAGE_AMOUNT_ASC',
  DelegationsAverageAmountDesc = 'DELEGATIONS_AVERAGE_AMOUNT_DESC',
  DelegationsAverageBlockRangeAsc = 'DELEGATIONS_AVERAGE_BLOCK_RANGE_ASC',
  DelegationsAverageBlockRangeDesc = 'DELEGATIONS_AVERAGE_BLOCK_RANGE_DESC',
  DelegationsAverageCreatedBlockAsc = 'DELEGATIONS_AVERAGE_CREATED_BLOCK_ASC',
  DelegationsAverageCreatedBlockDesc = 'DELEGATIONS_AVERAGE_CREATED_BLOCK_DESC',
  DelegationsAverageDelegatorIdAsc = 'DELEGATIONS_AVERAGE_DELEGATOR_ID_ASC',
  DelegationsAverageDelegatorIdDesc = 'DELEGATIONS_AVERAGE_DELEGATOR_ID_DESC',
  DelegationsAverageExitEraAsc = 'DELEGATIONS_AVERAGE_EXIT_ERA_ASC',
  DelegationsAverageExitEraDesc = 'DELEGATIONS_AVERAGE_EXIT_ERA_DESC',
  DelegationsAverageIdAsc = 'DELEGATIONS_AVERAGE_ID_ASC',
  DelegationsAverageIdDesc = 'DELEGATIONS_AVERAGE_ID_DESC',
  DelegationsAverageIndexerIdAsc = 'DELEGATIONS_AVERAGE_INDEXER_ID_ASC',
  DelegationsAverageIndexerIdDesc = 'DELEGATIONS_AVERAGE_INDEXER_ID_DESC',
  DelegationsAverageLastEventAsc = 'DELEGATIONS_AVERAGE_LAST_EVENT_ASC',
  DelegationsAverageLastEventDesc = 'DELEGATIONS_AVERAGE_LAST_EVENT_DESC',
  DelegationsByDelegatorIdCountAsc = 'DELEGATIONS_BY_DELEGATOR_ID__COUNT_ASC',
  DelegationsByDelegatorIdCountDesc = 'DELEGATIONS_BY_DELEGATOR_ID__COUNT_DESC',
  DelegationsCountAsc = 'DELEGATIONS_COUNT_ASC',
  DelegationsCountDesc = 'DELEGATIONS_COUNT_DESC',
  DelegationsDistinctCountAmountAsc = 'DELEGATIONS_DISTINCT_COUNT_AMOUNT_ASC',
  DelegationsDistinctCountAmountDesc = 'DELEGATIONS_DISTINCT_COUNT_AMOUNT_DESC',
  DelegationsDistinctCountBlockRangeAsc = 'DELEGATIONS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  DelegationsDistinctCountBlockRangeDesc = 'DELEGATIONS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  DelegationsDistinctCountCreatedBlockAsc = 'DELEGATIONS_DISTINCT_COUNT_CREATED_BLOCK_ASC',
  DelegationsDistinctCountCreatedBlockDesc = 'DELEGATIONS_DISTINCT_COUNT_CREATED_BLOCK_DESC',
  DelegationsDistinctCountDelegatorIdAsc = 'DELEGATIONS_DISTINCT_COUNT_DELEGATOR_ID_ASC',
  DelegationsDistinctCountDelegatorIdDesc = 'DELEGATIONS_DISTINCT_COUNT_DELEGATOR_ID_DESC',
  DelegationsDistinctCountExitEraAsc = 'DELEGATIONS_DISTINCT_COUNT_EXIT_ERA_ASC',
  DelegationsDistinctCountExitEraDesc = 'DELEGATIONS_DISTINCT_COUNT_EXIT_ERA_DESC',
  DelegationsDistinctCountIdAsc = 'DELEGATIONS_DISTINCT_COUNT_ID_ASC',
  DelegationsDistinctCountIdDesc = 'DELEGATIONS_DISTINCT_COUNT_ID_DESC',
  DelegationsDistinctCountIndexerIdAsc = 'DELEGATIONS_DISTINCT_COUNT_INDEXER_ID_ASC',
  DelegationsDistinctCountIndexerIdDesc = 'DELEGATIONS_DISTINCT_COUNT_INDEXER_ID_DESC',
  DelegationsDistinctCountLastEventAsc = 'DELEGATIONS_DISTINCT_COUNT_LAST_EVENT_ASC',
  DelegationsDistinctCountLastEventDesc = 'DELEGATIONS_DISTINCT_COUNT_LAST_EVENT_DESC',
  DelegationsMaxAmountAsc = 'DELEGATIONS_MAX_AMOUNT_ASC',
  DelegationsMaxAmountDesc = 'DELEGATIONS_MAX_AMOUNT_DESC',
  DelegationsMaxBlockRangeAsc = 'DELEGATIONS_MAX_BLOCK_RANGE_ASC',
  DelegationsMaxBlockRangeDesc = 'DELEGATIONS_MAX_BLOCK_RANGE_DESC',
  DelegationsMaxCreatedBlockAsc = 'DELEGATIONS_MAX_CREATED_BLOCK_ASC',
  DelegationsMaxCreatedBlockDesc = 'DELEGATIONS_MAX_CREATED_BLOCK_DESC',
  DelegationsMaxDelegatorIdAsc = 'DELEGATIONS_MAX_DELEGATOR_ID_ASC',
  DelegationsMaxDelegatorIdDesc = 'DELEGATIONS_MAX_DELEGATOR_ID_DESC',
  DelegationsMaxExitEraAsc = 'DELEGATIONS_MAX_EXIT_ERA_ASC',
  DelegationsMaxExitEraDesc = 'DELEGATIONS_MAX_EXIT_ERA_DESC',
  DelegationsMaxIdAsc = 'DELEGATIONS_MAX_ID_ASC',
  DelegationsMaxIdDesc = 'DELEGATIONS_MAX_ID_DESC',
  DelegationsMaxIndexerIdAsc = 'DELEGATIONS_MAX_INDEXER_ID_ASC',
  DelegationsMaxIndexerIdDesc = 'DELEGATIONS_MAX_INDEXER_ID_DESC',
  DelegationsMaxLastEventAsc = 'DELEGATIONS_MAX_LAST_EVENT_ASC',
  DelegationsMaxLastEventDesc = 'DELEGATIONS_MAX_LAST_EVENT_DESC',
  DelegationsMinAmountAsc = 'DELEGATIONS_MIN_AMOUNT_ASC',
  DelegationsMinAmountDesc = 'DELEGATIONS_MIN_AMOUNT_DESC',
  DelegationsMinBlockRangeAsc = 'DELEGATIONS_MIN_BLOCK_RANGE_ASC',
  DelegationsMinBlockRangeDesc = 'DELEGATIONS_MIN_BLOCK_RANGE_DESC',
  DelegationsMinCreatedBlockAsc = 'DELEGATIONS_MIN_CREATED_BLOCK_ASC',
  DelegationsMinCreatedBlockDesc = 'DELEGATIONS_MIN_CREATED_BLOCK_DESC',
  DelegationsMinDelegatorIdAsc = 'DELEGATIONS_MIN_DELEGATOR_ID_ASC',
  DelegationsMinDelegatorIdDesc = 'DELEGATIONS_MIN_DELEGATOR_ID_DESC',
  DelegationsMinExitEraAsc = 'DELEGATIONS_MIN_EXIT_ERA_ASC',
  DelegationsMinExitEraDesc = 'DELEGATIONS_MIN_EXIT_ERA_DESC',
  DelegationsMinIdAsc = 'DELEGATIONS_MIN_ID_ASC',
  DelegationsMinIdDesc = 'DELEGATIONS_MIN_ID_DESC',
  DelegationsMinIndexerIdAsc = 'DELEGATIONS_MIN_INDEXER_ID_ASC',
  DelegationsMinIndexerIdDesc = 'DELEGATIONS_MIN_INDEXER_ID_DESC',
  DelegationsMinLastEventAsc = 'DELEGATIONS_MIN_LAST_EVENT_ASC',
  DelegationsMinLastEventDesc = 'DELEGATIONS_MIN_LAST_EVENT_DESC',
  DelegationsStddevPopulationAmountAsc = 'DELEGATIONS_STDDEV_POPULATION_AMOUNT_ASC',
  DelegationsStddevPopulationAmountDesc = 'DELEGATIONS_STDDEV_POPULATION_AMOUNT_DESC',
  DelegationsStddevPopulationBlockRangeAsc = 'DELEGATIONS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  DelegationsStddevPopulationBlockRangeDesc = 'DELEGATIONS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  DelegationsStddevPopulationCreatedBlockAsc = 'DELEGATIONS_STDDEV_POPULATION_CREATED_BLOCK_ASC',
  DelegationsStddevPopulationCreatedBlockDesc = 'DELEGATIONS_STDDEV_POPULATION_CREATED_BLOCK_DESC',
  DelegationsStddevPopulationDelegatorIdAsc = 'DELEGATIONS_STDDEV_POPULATION_DELEGATOR_ID_ASC',
  DelegationsStddevPopulationDelegatorIdDesc = 'DELEGATIONS_STDDEV_POPULATION_DELEGATOR_ID_DESC',
  DelegationsStddevPopulationExitEraAsc = 'DELEGATIONS_STDDEV_POPULATION_EXIT_ERA_ASC',
  DelegationsStddevPopulationExitEraDesc = 'DELEGATIONS_STDDEV_POPULATION_EXIT_ERA_DESC',
  DelegationsStddevPopulationIdAsc = 'DELEGATIONS_STDDEV_POPULATION_ID_ASC',
  DelegationsStddevPopulationIdDesc = 'DELEGATIONS_STDDEV_POPULATION_ID_DESC',
  DelegationsStddevPopulationIndexerIdAsc = 'DELEGATIONS_STDDEV_POPULATION_INDEXER_ID_ASC',
  DelegationsStddevPopulationIndexerIdDesc = 'DELEGATIONS_STDDEV_POPULATION_INDEXER_ID_DESC',
  DelegationsStddevPopulationLastEventAsc = 'DELEGATIONS_STDDEV_POPULATION_LAST_EVENT_ASC',
  DelegationsStddevPopulationLastEventDesc = 'DELEGATIONS_STDDEV_POPULATION_LAST_EVENT_DESC',
  DelegationsStddevSampleAmountAsc = 'DELEGATIONS_STDDEV_SAMPLE_AMOUNT_ASC',
  DelegationsStddevSampleAmountDesc = 'DELEGATIONS_STDDEV_SAMPLE_AMOUNT_DESC',
  DelegationsStddevSampleBlockRangeAsc = 'DELEGATIONS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  DelegationsStddevSampleBlockRangeDesc = 'DELEGATIONS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  DelegationsStddevSampleCreatedBlockAsc = 'DELEGATIONS_STDDEV_SAMPLE_CREATED_BLOCK_ASC',
  DelegationsStddevSampleCreatedBlockDesc = 'DELEGATIONS_STDDEV_SAMPLE_CREATED_BLOCK_DESC',
  DelegationsStddevSampleDelegatorIdAsc = 'DELEGATIONS_STDDEV_SAMPLE_DELEGATOR_ID_ASC',
  DelegationsStddevSampleDelegatorIdDesc = 'DELEGATIONS_STDDEV_SAMPLE_DELEGATOR_ID_DESC',
  DelegationsStddevSampleExitEraAsc = 'DELEGATIONS_STDDEV_SAMPLE_EXIT_ERA_ASC',
  DelegationsStddevSampleExitEraDesc = 'DELEGATIONS_STDDEV_SAMPLE_EXIT_ERA_DESC',
  DelegationsStddevSampleIdAsc = 'DELEGATIONS_STDDEV_SAMPLE_ID_ASC',
  DelegationsStddevSampleIdDesc = 'DELEGATIONS_STDDEV_SAMPLE_ID_DESC',
  DelegationsStddevSampleIndexerIdAsc = 'DELEGATIONS_STDDEV_SAMPLE_INDEXER_ID_ASC',
  DelegationsStddevSampleIndexerIdDesc = 'DELEGATIONS_STDDEV_SAMPLE_INDEXER_ID_DESC',
  DelegationsStddevSampleLastEventAsc = 'DELEGATIONS_STDDEV_SAMPLE_LAST_EVENT_ASC',
  DelegationsStddevSampleLastEventDesc = 'DELEGATIONS_STDDEV_SAMPLE_LAST_EVENT_DESC',
  DelegationsSumAmountAsc = 'DELEGATIONS_SUM_AMOUNT_ASC',
  DelegationsSumAmountDesc = 'DELEGATIONS_SUM_AMOUNT_DESC',
  DelegationsSumBlockRangeAsc = 'DELEGATIONS_SUM_BLOCK_RANGE_ASC',
  DelegationsSumBlockRangeDesc = 'DELEGATIONS_SUM_BLOCK_RANGE_DESC',
  DelegationsSumCreatedBlockAsc = 'DELEGATIONS_SUM_CREATED_BLOCK_ASC',
  DelegationsSumCreatedBlockDesc = 'DELEGATIONS_SUM_CREATED_BLOCK_DESC',
  DelegationsSumDelegatorIdAsc = 'DELEGATIONS_SUM_DELEGATOR_ID_ASC',
  DelegationsSumDelegatorIdDesc = 'DELEGATIONS_SUM_DELEGATOR_ID_DESC',
  DelegationsSumExitEraAsc = 'DELEGATIONS_SUM_EXIT_ERA_ASC',
  DelegationsSumExitEraDesc = 'DELEGATIONS_SUM_EXIT_ERA_DESC',
  DelegationsSumIdAsc = 'DELEGATIONS_SUM_ID_ASC',
  DelegationsSumIdDesc = 'DELEGATIONS_SUM_ID_DESC',
  DelegationsSumIndexerIdAsc = 'DELEGATIONS_SUM_INDEXER_ID_ASC',
  DelegationsSumIndexerIdDesc = 'DELEGATIONS_SUM_INDEXER_ID_DESC',
  DelegationsSumLastEventAsc = 'DELEGATIONS_SUM_LAST_EVENT_ASC',
  DelegationsSumLastEventDesc = 'DELEGATIONS_SUM_LAST_EVENT_DESC',
  DelegationsVariancePopulationAmountAsc = 'DELEGATIONS_VARIANCE_POPULATION_AMOUNT_ASC',
  DelegationsVariancePopulationAmountDesc = 'DELEGATIONS_VARIANCE_POPULATION_AMOUNT_DESC',
  DelegationsVariancePopulationBlockRangeAsc = 'DELEGATIONS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  DelegationsVariancePopulationBlockRangeDesc = 'DELEGATIONS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  DelegationsVariancePopulationCreatedBlockAsc = 'DELEGATIONS_VARIANCE_POPULATION_CREATED_BLOCK_ASC',
  DelegationsVariancePopulationCreatedBlockDesc = 'DELEGATIONS_VARIANCE_POPULATION_CREATED_BLOCK_DESC',
  DelegationsVariancePopulationDelegatorIdAsc = 'DELEGATIONS_VARIANCE_POPULATION_DELEGATOR_ID_ASC',
  DelegationsVariancePopulationDelegatorIdDesc = 'DELEGATIONS_VARIANCE_POPULATION_DELEGATOR_ID_DESC',
  DelegationsVariancePopulationExitEraAsc = 'DELEGATIONS_VARIANCE_POPULATION_EXIT_ERA_ASC',
  DelegationsVariancePopulationExitEraDesc = 'DELEGATIONS_VARIANCE_POPULATION_EXIT_ERA_DESC',
  DelegationsVariancePopulationIdAsc = 'DELEGATIONS_VARIANCE_POPULATION_ID_ASC',
  DelegationsVariancePopulationIdDesc = 'DELEGATIONS_VARIANCE_POPULATION_ID_DESC',
  DelegationsVariancePopulationIndexerIdAsc = 'DELEGATIONS_VARIANCE_POPULATION_INDEXER_ID_ASC',
  DelegationsVariancePopulationIndexerIdDesc = 'DELEGATIONS_VARIANCE_POPULATION_INDEXER_ID_DESC',
  DelegationsVariancePopulationLastEventAsc = 'DELEGATIONS_VARIANCE_POPULATION_LAST_EVENT_ASC',
  DelegationsVariancePopulationLastEventDesc = 'DELEGATIONS_VARIANCE_POPULATION_LAST_EVENT_DESC',
  DelegationsVarianceSampleAmountAsc = 'DELEGATIONS_VARIANCE_SAMPLE_AMOUNT_ASC',
  DelegationsVarianceSampleAmountDesc = 'DELEGATIONS_VARIANCE_SAMPLE_AMOUNT_DESC',
  DelegationsVarianceSampleBlockRangeAsc = 'DELEGATIONS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  DelegationsVarianceSampleBlockRangeDesc = 'DELEGATIONS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  DelegationsVarianceSampleCreatedBlockAsc = 'DELEGATIONS_VARIANCE_SAMPLE_CREATED_BLOCK_ASC',
  DelegationsVarianceSampleCreatedBlockDesc = 'DELEGATIONS_VARIANCE_SAMPLE_CREATED_BLOCK_DESC',
  DelegationsVarianceSampleDelegatorIdAsc = 'DELEGATIONS_VARIANCE_SAMPLE_DELEGATOR_ID_ASC',
  DelegationsVarianceSampleDelegatorIdDesc = 'DELEGATIONS_VARIANCE_SAMPLE_DELEGATOR_ID_DESC',
  DelegationsVarianceSampleExitEraAsc = 'DELEGATIONS_VARIANCE_SAMPLE_EXIT_ERA_ASC',
  DelegationsVarianceSampleExitEraDesc = 'DELEGATIONS_VARIANCE_SAMPLE_EXIT_ERA_DESC',
  DelegationsVarianceSampleIdAsc = 'DELEGATIONS_VARIANCE_SAMPLE_ID_ASC',
  DelegationsVarianceSampleIdDesc = 'DELEGATIONS_VARIANCE_SAMPLE_ID_DESC',
  DelegationsVarianceSampleIndexerIdAsc = 'DELEGATIONS_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  DelegationsVarianceSampleIndexerIdDesc = 'DELEGATIONS_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  DelegationsVarianceSampleLastEventAsc = 'DELEGATIONS_VARIANCE_SAMPLE_LAST_EVENT_ASC',
  DelegationsVarianceSampleLastEventDesc = 'DELEGATIONS_VARIANCE_SAMPLE_LAST_EVENT_DESC',
  EraDelegatorApiesAverageApyAsc = 'ERA_DELEGATOR_APIES_AVERAGE_APY_ASC',
  EraDelegatorApiesAverageApyDesc = 'ERA_DELEGATOR_APIES_AVERAGE_APY_DESC',
  EraDelegatorApiesAverageBlockRangeAsc = 'ERA_DELEGATOR_APIES_AVERAGE_BLOCK_RANGE_ASC',
  EraDelegatorApiesAverageBlockRangeDesc = 'ERA_DELEGATOR_APIES_AVERAGE_BLOCK_RANGE_DESC',
  EraDelegatorApiesAverageCreateAtAsc = 'ERA_DELEGATOR_APIES_AVERAGE_CREATE_AT_ASC',
  EraDelegatorApiesAverageCreateAtDesc = 'ERA_DELEGATOR_APIES_AVERAGE_CREATE_AT_DESC',
  EraDelegatorApiesAverageDelegatorIdAsc = 'ERA_DELEGATOR_APIES_AVERAGE_DELEGATOR_ID_ASC',
  EraDelegatorApiesAverageDelegatorIdDesc = 'ERA_DELEGATOR_APIES_AVERAGE_DELEGATOR_ID_DESC',
  EraDelegatorApiesAverageEraIdxAsc = 'ERA_DELEGATOR_APIES_AVERAGE_ERA_IDX_ASC',
  EraDelegatorApiesAverageEraIdxDesc = 'ERA_DELEGATOR_APIES_AVERAGE_ERA_IDX_DESC',
  EraDelegatorApiesAverageIdAsc = 'ERA_DELEGATOR_APIES_AVERAGE_ID_ASC',
  EraDelegatorApiesAverageIdDesc = 'ERA_DELEGATOR_APIES_AVERAGE_ID_DESC',
  EraDelegatorApiesAverageRewardAsc = 'ERA_DELEGATOR_APIES_AVERAGE_REWARD_ASC',
  EraDelegatorApiesAverageRewardDesc = 'ERA_DELEGATOR_APIES_AVERAGE_REWARD_DESC',
  EraDelegatorApiesAverageUpdateAtAsc = 'ERA_DELEGATOR_APIES_AVERAGE_UPDATE_AT_ASC',
  EraDelegatorApiesAverageUpdateAtDesc = 'ERA_DELEGATOR_APIES_AVERAGE_UPDATE_AT_DESC',
  EraDelegatorApiesByDelegatorIdCountAsc = 'ERA_DELEGATOR_APIES_BY_DELEGATOR_ID__COUNT_ASC',
  EraDelegatorApiesByDelegatorIdCountDesc = 'ERA_DELEGATOR_APIES_BY_DELEGATOR_ID__COUNT_DESC',
  EraDelegatorApiesCountAsc = 'ERA_DELEGATOR_APIES_COUNT_ASC',
  EraDelegatorApiesCountDesc = 'ERA_DELEGATOR_APIES_COUNT_DESC',
  EraDelegatorApiesDistinctCountApyAsc = 'ERA_DELEGATOR_APIES_DISTINCT_COUNT_APY_ASC',
  EraDelegatorApiesDistinctCountApyDesc = 'ERA_DELEGATOR_APIES_DISTINCT_COUNT_APY_DESC',
  EraDelegatorApiesDistinctCountBlockRangeAsc = 'ERA_DELEGATOR_APIES_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  EraDelegatorApiesDistinctCountBlockRangeDesc = 'ERA_DELEGATOR_APIES_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  EraDelegatorApiesDistinctCountCreateAtAsc = 'ERA_DELEGATOR_APIES_DISTINCT_COUNT_CREATE_AT_ASC',
  EraDelegatorApiesDistinctCountCreateAtDesc = 'ERA_DELEGATOR_APIES_DISTINCT_COUNT_CREATE_AT_DESC',
  EraDelegatorApiesDistinctCountDelegatorIdAsc = 'ERA_DELEGATOR_APIES_DISTINCT_COUNT_DELEGATOR_ID_ASC',
  EraDelegatorApiesDistinctCountDelegatorIdDesc = 'ERA_DELEGATOR_APIES_DISTINCT_COUNT_DELEGATOR_ID_DESC',
  EraDelegatorApiesDistinctCountEraIdxAsc = 'ERA_DELEGATOR_APIES_DISTINCT_COUNT_ERA_IDX_ASC',
  EraDelegatorApiesDistinctCountEraIdxDesc = 'ERA_DELEGATOR_APIES_DISTINCT_COUNT_ERA_IDX_DESC',
  EraDelegatorApiesDistinctCountIdAsc = 'ERA_DELEGATOR_APIES_DISTINCT_COUNT_ID_ASC',
  EraDelegatorApiesDistinctCountIdDesc = 'ERA_DELEGATOR_APIES_DISTINCT_COUNT_ID_DESC',
  EraDelegatorApiesDistinctCountRewardAsc = 'ERA_DELEGATOR_APIES_DISTINCT_COUNT_REWARD_ASC',
  EraDelegatorApiesDistinctCountRewardDesc = 'ERA_DELEGATOR_APIES_DISTINCT_COUNT_REWARD_DESC',
  EraDelegatorApiesDistinctCountUpdateAtAsc = 'ERA_DELEGATOR_APIES_DISTINCT_COUNT_UPDATE_AT_ASC',
  EraDelegatorApiesDistinctCountUpdateAtDesc = 'ERA_DELEGATOR_APIES_DISTINCT_COUNT_UPDATE_AT_DESC',
  EraDelegatorApiesMaxApyAsc = 'ERA_DELEGATOR_APIES_MAX_APY_ASC',
  EraDelegatorApiesMaxApyDesc = 'ERA_DELEGATOR_APIES_MAX_APY_DESC',
  EraDelegatorApiesMaxBlockRangeAsc = 'ERA_DELEGATOR_APIES_MAX_BLOCK_RANGE_ASC',
  EraDelegatorApiesMaxBlockRangeDesc = 'ERA_DELEGATOR_APIES_MAX_BLOCK_RANGE_DESC',
  EraDelegatorApiesMaxCreateAtAsc = 'ERA_DELEGATOR_APIES_MAX_CREATE_AT_ASC',
  EraDelegatorApiesMaxCreateAtDesc = 'ERA_DELEGATOR_APIES_MAX_CREATE_AT_DESC',
  EraDelegatorApiesMaxDelegatorIdAsc = 'ERA_DELEGATOR_APIES_MAX_DELEGATOR_ID_ASC',
  EraDelegatorApiesMaxDelegatorIdDesc = 'ERA_DELEGATOR_APIES_MAX_DELEGATOR_ID_DESC',
  EraDelegatorApiesMaxEraIdxAsc = 'ERA_DELEGATOR_APIES_MAX_ERA_IDX_ASC',
  EraDelegatorApiesMaxEraIdxDesc = 'ERA_DELEGATOR_APIES_MAX_ERA_IDX_DESC',
  EraDelegatorApiesMaxIdAsc = 'ERA_DELEGATOR_APIES_MAX_ID_ASC',
  EraDelegatorApiesMaxIdDesc = 'ERA_DELEGATOR_APIES_MAX_ID_DESC',
  EraDelegatorApiesMaxRewardAsc = 'ERA_DELEGATOR_APIES_MAX_REWARD_ASC',
  EraDelegatorApiesMaxRewardDesc = 'ERA_DELEGATOR_APIES_MAX_REWARD_DESC',
  EraDelegatorApiesMaxUpdateAtAsc = 'ERA_DELEGATOR_APIES_MAX_UPDATE_AT_ASC',
  EraDelegatorApiesMaxUpdateAtDesc = 'ERA_DELEGATOR_APIES_MAX_UPDATE_AT_DESC',
  EraDelegatorApiesMinApyAsc = 'ERA_DELEGATOR_APIES_MIN_APY_ASC',
  EraDelegatorApiesMinApyDesc = 'ERA_DELEGATOR_APIES_MIN_APY_DESC',
  EraDelegatorApiesMinBlockRangeAsc = 'ERA_DELEGATOR_APIES_MIN_BLOCK_RANGE_ASC',
  EraDelegatorApiesMinBlockRangeDesc = 'ERA_DELEGATOR_APIES_MIN_BLOCK_RANGE_DESC',
  EraDelegatorApiesMinCreateAtAsc = 'ERA_DELEGATOR_APIES_MIN_CREATE_AT_ASC',
  EraDelegatorApiesMinCreateAtDesc = 'ERA_DELEGATOR_APIES_MIN_CREATE_AT_DESC',
  EraDelegatorApiesMinDelegatorIdAsc = 'ERA_DELEGATOR_APIES_MIN_DELEGATOR_ID_ASC',
  EraDelegatorApiesMinDelegatorIdDesc = 'ERA_DELEGATOR_APIES_MIN_DELEGATOR_ID_DESC',
  EraDelegatorApiesMinEraIdxAsc = 'ERA_DELEGATOR_APIES_MIN_ERA_IDX_ASC',
  EraDelegatorApiesMinEraIdxDesc = 'ERA_DELEGATOR_APIES_MIN_ERA_IDX_DESC',
  EraDelegatorApiesMinIdAsc = 'ERA_DELEGATOR_APIES_MIN_ID_ASC',
  EraDelegatorApiesMinIdDesc = 'ERA_DELEGATOR_APIES_MIN_ID_DESC',
  EraDelegatorApiesMinRewardAsc = 'ERA_DELEGATOR_APIES_MIN_REWARD_ASC',
  EraDelegatorApiesMinRewardDesc = 'ERA_DELEGATOR_APIES_MIN_REWARD_DESC',
  EraDelegatorApiesMinUpdateAtAsc = 'ERA_DELEGATOR_APIES_MIN_UPDATE_AT_ASC',
  EraDelegatorApiesMinUpdateAtDesc = 'ERA_DELEGATOR_APIES_MIN_UPDATE_AT_DESC',
  EraDelegatorApiesStddevPopulationApyAsc = 'ERA_DELEGATOR_APIES_STDDEV_POPULATION_APY_ASC',
  EraDelegatorApiesStddevPopulationApyDesc = 'ERA_DELEGATOR_APIES_STDDEV_POPULATION_APY_DESC',
  EraDelegatorApiesStddevPopulationBlockRangeAsc = 'ERA_DELEGATOR_APIES_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  EraDelegatorApiesStddevPopulationBlockRangeDesc = 'ERA_DELEGATOR_APIES_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  EraDelegatorApiesStddevPopulationCreateAtAsc = 'ERA_DELEGATOR_APIES_STDDEV_POPULATION_CREATE_AT_ASC',
  EraDelegatorApiesStddevPopulationCreateAtDesc = 'ERA_DELEGATOR_APIES_STDDEV_POPULATION_CREATE_AT_DESC',
  EraDelegatorApiesStddevPopulationDelegatorIdAsc = 'ERA_DELEGATOR_APIES_STDDEV_POPULATION_DELEGATOR_ID_ASC',
  EraDelegatorApiesStddevPopulationDelegatorIdDesc = 'ERA_DELEGATOR_APIES_STDDEV_POPULATION_DELEGATOR_ID_DESC',
  EraDelegatorApiesStddevPopulationEraIdxAsc = 'ERA_DELEGATOR_APIES_STDDEV_POPULATION_ERA_IDX_ASC',
  EraDelegatorApiesStddevPopulationEraIdxDesc = 'ERA_DELEGATOR_APIES_STDDEV_POPULATION_ERA_IDX_DESC',
  EraDelegatorApiesStddevPopulationIdAsc = 'ERA_DELEGATOR_APIES_STDDEV_POPULATION_ID_ASC',
  EraDelegatorApiesStddevPopulationIdDesc = 'ERA_DELEGATOR_APIES_STDDEV_POPULATION_ID_DESC',
  EraDelegatorApiesStddevPopulationRewardAsc = 'ERA_DELEGATOR_APIES_STDDEV_POPULATION_REWARD_ASC',
  EraDelegatorApiesStddevPopulationRewardDesc = 'ERA_DELEGATOR_APIES_STDDEV_POPULATION_REWARD_DESC',
  EraDelegatorApiesStddevPopulationUpdateAtAsc = 'ERA_DELEGATOR_APIES_STDDEV_POPULATION_UPDATE_AT_ASC',
  EraDelegatorApiesStddevPopulationUpdateAtDesc = 'ERA_DELEGATOR_APIES_STDDEV_POPULATION_UPDATE_AT_DESC',
  EraDelegatorApiesStddevSampleApyAsc = 'ERA_DELEGATOR_APIES_STDDEV_SAMPLE_APY_ASC',
  EraDelegatorApiesStddevSampleApyDesc = 'ERA_DELEGATOR_APIES_STDDEV_SAMPLE_APY_DESC',
  EraDelegatorApiesStddevSampleBlockRangeAsc = 'ERA_DELEGATOR_APIES_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  EraDelegatorApiesStddevSampleBlockRangeDesc = 'ERA_DELEGATOR_APIES_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  EraDelegatorApiesStddevSampleCreateAtAsc = 'ERA_DELEGATOR_APIES_STDDEV_SAMPLE_CREATE_AT_ASC',
  EraDelegatorApiesStddevSampleCreateAtDesc = 'ERA_DELEGATOR_APIES_STDDEV_SAMPLE_CREATE_AT_DESC',
  EraDelegatorApiesStddevSampleDelegatorIdAsc = 'ERA_DELEGATOR_APIES_STDDEV_SAMPLE_DELEGATOR_ID_ASC',
  EraDelegatorApiesStddevSampleDelegatorIdDesc = 'ERA_DELEGATOR_APIES_STDDEV_SAMPLE_DELEGATOR_ID_DESC',
  EraDelegatorApiesStddevSampleEraIdxAsc = 'ERA_DELEGATOR_APIES_STDDEV_SAMPLE_ERA_IDX_ASC',
  EraDelegatorApiesStddevSampleEraIdxDesc = 'ERA_DELEGATOR_APIES_STDDEV_SAMPLE_ERA_IDX_DESC',
  EraDelegatorApiesStddevSampleIdAsc = 'ERA_DELEGATOR_APIES_STDDEV_SAMPLE_ID_ASC',
  EraDelegatorApiesStddevSampleIdDesc = 'ERA_DELEGATOR_APIES_STDDEV_SAMPLE_ID_DESC',
  EraDelegatorApiesStddevSampleRewardAsc = 'ERA_DELEGATOR_APIES_STDDEV_SAMPLE_REWARD_ASC',
  EraDelegatorApiesStddevSampleRewardDesc = 'ERA_DELEGATOR_APIES_STDDEV_SAMPLE_REWARD_DESC',
  EraDelegatorApiesStddevSampleUpdateAtAsc = 'ERA_DELEGATOR_APIES_STDDEV_SAMPLE_UPDATE_AT_ASC',
  EraDelegatorApiesStddevSampleUpdateAtDesc = 'ERA_DELEGATOR_APIES_STDDEV_SAMPLE_UPDATE_AT_DESC',
  EraDelegatorApiesSumApyAsc = 'ERA_DELEGATOR_APIES_SUM_APY_ASC',
  EraDelegatorApiesSumApyDesc = 'ERA_DELEGATOR_APIES_SUM_APY_DESC',
  EraDelegatorApiesSumBlockRangeAsc = 'ERA_DELEGATOR_APIES_SUM_BLOCK_RANGE_ASC',
  EraDelegatorApiesSumBlockRangeDesc = 'ERA_DELEGATOR_APIES_SUM_BLOCK_RANGE_DESC',
  EraDelegatorApiesSumCreateAtAsc = 'ERA_DELEGATOR_APIES_SUM_CREATE_AT_ASC',
  EraDelegatorApiesSumCreateAtDesc = 'ERA_DELEGATOR_APIES_SUM_CREATE_AT_DESC',
  EraDelegatorApiesSumDelegatorIdAsc = 'ERA_DELEGATOR_APIES_SUM_DELEGATOR_ID_ASC',
  EraDelegatorApiesSumDelegatorIdDesc = 'ERA_DELEGATOR_APIES_SUM_DELEGATOR_ID_DESC',
  EraDelegatorApiesSumEraIdxAsc = 'ERA_DELEGATOR_APIES_SUM_ERA_IDX_ASC',
  EraDelegatorApiesSumEraIdxDesc = 'ERA_DELEGATOR_APIES_SUM_ERA_IDX_DESC',
  EraDelegatorApiesSumIdAsc = 'ERA_DELEGATOR_APIES_SUM_ID_ASC',
  EraDelegatorApiesSumIdDesc = 'ERA_DELEGATOR_APIES_SUM_ID_DESC',
  EraDelegatorApiesSumRewardAsc = 'ERA_DELEGATOR_APIES_SUM_REWARD_ASC',
  EraDelegatorApiesSumRewardDesc = 'ERA_DELEGATOR_APIES_SUM_REWARD_DESC',
  EraDelegatorApiesSumUpdateAtAsc = 'ERA_DELEGATOR_APIES_SUM_UPDATE_AT_ASC',
  EraDelegatorApiesSumUpdateAtDesc = 'ERA_DELEGATOR_APIES_SUM_UPDATE_AT_DESC',
  EraDelegatorApiesVariancePopulationApyAsc = 'ERA_DELEGATOR_APIES_VARIANCE_POPULATION_APY_ASC',
  EraDelegatorApiesVariancePopulationApyDesc = 'ERA_DELEGATOR_APIES_VARIANCE_POPULATION_APY_DESC',
  EraDelegatorApiesVariancePopulationBlockRangeAsc = 'ERA_DELEGATOR_APIES_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  EraDelegatorApiesVariancePopulationBlockRangeDesc = 'ERA_DELEGATOR_APIES_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  EraDelegatorApiesVariancePopulationCreateAtAsc = 'ERA_DELEGATOR_APIES_VARIANCE_POPULATION_CREATE_AT_ASC',
  EraDelegatorApiesVariancePopulationCreateAtDesc = 'ERA_DELEGATOR_APIES_VARIANCE_POPULATION_CREATE_AT_DESC',
  EraDelegatorApiesVariancePopulationDelegatorIdAsc = 'ERA_DELEGATOR_APIES_VARIANCE_POPULATION_DELEGATOR_ID_ASC',
  EraDelegatorApiesVariancePopulationDelegatorIdDesc = 'ERA_DELEGATOR_APIES_VARIANCE_POPULATION_DELEGATOR_ID_DESC',
  EraDelegatorApiesVariancePopulationEraIdxAsc = 'ERA_DELEGATOR_APIES_VARIANCE_POPULATION_ERA_IDX_ASC',
  EraDelegatorApiesVariancePopulationEraIdxDesc = 'ERA_DELEGATOR_APIES_VARIANCE_POPULATION_ERA_IDX_DESC',
  EraDelegatorApiesVariancePopulationIdAsc = 'ERA_DELEGATOR_APIES_VARIANCE_POPULATION_ID_ASC',
  EraDelegatorApiesVariancePopulationIdDesc = 'ERA_DELEGATOR_APIES_VARIANCE_POPULATION_ID_DESC',
  EraDelegatorApiesVariancePopulationRewardAsc = 'ERA_DELEGATOR_APIES_VARIANCE_POPULATION_REWARD_ASC',
  EraDelegatorApiesVariancePopulationRewardDesc = 'ERA_DELEGATOR_APIES_VARIANCE_POPULATION_REWARD_DESC',
  EraDelegatorApiesVariancePopulationUpdateAtAsc = 'ERA_DELEGATOR_APIES_VARIANCE_POPULATION_UPDATE_AT_ASC',
  EraDelegatorApiesVariancePopulationUpdateAtDesc = 'ERA_DELEGATOR_APIES_VARIANCE_POPULATION_UPDATE_AT_DESC',
  EraDelegatorApiesVarianceSampleApyAsc = 'ERA_DELEGATOR_APIES_VARIANCE_SAMPLE_APY_ASC',
  EraDelegatorApiesVarianceSampleApyDesc = 'ERA_DELEGATOR_APIES_VARIANCE_SAMPLE_APY_DESC',
  EraDelegatorApiesVarianceSampleBlockRangeAsc = 'ERA_DELEGATOR_APIES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  EraDelegatorApiesVarianceSampleBlockRangeDesc = 'ERA_DELEGATOR_APIES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  EraDelegatorApiesVarianceSampleCreateAtAsc = 'ERA_DELEGATOR_APIES_VARIANCE_SAMPLE_CREATE_AT_ASC',
  EraDelegatorApiesVarianceSampleCreateAtDesc = 'ERA_DELEGATOR_APIES_VARIANCE_SAMPLE_CREATE_AT_DESC',
  EraDelegatorApiesVarianceSampleDelegatorIdAsc = 'ERA_DELEGATOR_APIES_VARIANCE_SAMPLE_DELEGATOR_ID_ASC',
  EraDelegatorApiesVarianceSampleDelegatorIdDesc = 'ERA_DELEGATOR_APIES_VARIANCE_SAMPLE_DELEGATOR_ID_DESC',
  EraDelegatorApiesVarianceSampleEraIdxAsc = 'ERA_DELEGATOR_APIES_VARIANCE_SAMPLE_ERA_IDX_ASC',
  EraDelegatorApiesVarianceSampleEraIdxDesc = 'ERA_DELEGATOR_APIES_VARIANCE_SAMPLE_ERA_IDX_DESC',
  EraDelegatorApiesVarianceSampleIdAsc = 'ERA_DELEGATOR_APIES_VARIANCE_SAMPLE_ID_ASC',
  EraDelegatorApiesVarianceSampleIdDesc = 'ERA_DELEGATOR_APIES_VARIANCE_SAMPLE_ID_DESC',
  EraDelegatorApiesVarianceSampleRewardAsc = 'ERA_DELEGATOR_APIES_VARIANCE_SAMPLE_REWARD_ASC',
  EraDelegatorApiesVarianceSampleRewardDesc = 'ERA_DELEGATOR_APIES_VARIANCE_SAMPLE_REWARD_DESC',
  EraDelegatorApiesVarianceSampleUpdateAtAsc = 'ERA_DELEGATOR_APIES_VARIANCE_SAMPLE_UPDATE_AT_ASC',
  EraDelegatorApiesVarianceSampleUpdateAtDesc = 'ERA_DELEGATOR_APIES_VARIANCE_SAMPLE_UPDATE_AT_DESC',
  EraDelegatorIndexerApiesAverageApyAsc = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_APY_ASC',
  EraDelegatorIndexerApiesAverageApyDesc = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_APY_DESC',
  EraDelegatorIndexerApiesAverageBlockRangeAsc = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_BLOCK_RANGE_ASC',
  EraDelegatorIndexerApiesAverageBlockRangeDesc = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_BLOCK_RANGE_DESC',
  EraDelegatorIndexerApiesAverageCreateAtAsc = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_CREATE_AT_ASC',
  EraDelegatorIndexerApiesAverageCreateAtDesc = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_CREATE_AT_DESC',
  EraDelegatorIndexerApiesAverageDelegatorIdAsc = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_DELEGATOR_ID_ASC',
  EraDelegatorIndexerApiesAverageDelegatorIdDesc = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_DELEGATOR_ID_DESC',
  EraDelegatorIndexerApiesAverageEraIdxAsc = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_ERA_IDX_ASC',
  EraDelegatorIndexerApiesAverageEraIdxDesc = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_ERA_IDX_DESC',
  EraDelegatorIndexerApiesAverageIdAsc = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_ID_ASC',
  EraDelegatorIndexerApiesAverageIdDesc = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_ID_DESC',
  EraDelegatorIndexerApiesAverageIndexerIdAsc = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_INDEXER_ID_ASC',
  EraDelegatorIndexerApiesAverageIndexerIdDesc = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_INDEXER_ID_DESC',
  EraDelegatorIndexerApiesAverageRewardAsc = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_REWARD_ASC',
  EraDelegatorIndexerApiesAverageRewardDesc = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_REWARD_DESC',
  EraDelegatorIndexerApiesAverageStakeAsc = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_STAKE_ASC',
  EraDelegatorIndexerApiesAverageStakeDesc = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_STAKE_DESC',
  EraDelegatorIndexerApiesAverageUpdateAtAsc = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_UPDATE_AT_ASC',
  EraDelegatorIndexerApiesAverageUpdateAtDesc = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_UPDATE_AT_DESC',
  EraDelegatorIndexerApiesByDelegatorIdCountAsc = 'ERA_DELEGATOR_INDEXER_APIES_BY_DELEGATOR_ID__COUNT_ASC',
  EraDelegatorIndexerApiesByDelegatorIdCountDesc = 'ERA_DELEGATOR_INDEXER_APIES_BY_DELEGATOR_ID__COUNT_DESC',
  EraDelegatorIndexerApiesCountAsc = 'ERA_DELEGATOR_INDEXER_APIES_COUNT_ASC',
  EraDelegatorIndexerApiesCountDesc = 'ERA_DELEGATOR_INDEXER_APIES_COUNT_DESC',
  EraDelegatorIndexerApiesDistinctCountApyAsc = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_APY_ASC',
  EraDelegatorIndexerApiesDistinctCountApyDesc = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_APY_DESC',
  EraDelegatorIndexerApiesDistinctCountBlockRangeAsc = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  EraDelegatorIndexerApiesDistinctCountBlockRangeDesc = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  EraDelegatorIndexerApiesDistinctCountCreateAtAsc = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_CREATE_AT_ASC',
  EraDelegatorIndexerApiesDistinctCountCreateAtDesc = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_CREATE_AT_DESC',
  EraDelegatorIndexerApiesDistinctCountDelegatorIdAsc = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_DELEGATOR_ID_ASC',
  EraDelegatorIndexerApiesDistinctCountDelegatorIdDesc = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_DELEGATOR_ID_DESC',
  EraDelegatorIndexerApiesDistinctCountEraIdxAsc = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_ERA_IDX_ASC',
  EraDelegatorIndexerApiesDistinctCountEraIdxDesc = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_ERA_IDX_DESC',
  EraDelegatorIndexerApiesDistinctCountIdAsc = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_ID_ASC',
  EraDelegatorIndexerApiesDistinctCountIdDesc = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_ID_DESC',
  EraDelegatorIndexerApiesDistinctCountIndexerIdAsc = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_INDEXER_ID_ASC',
  EraDelegatorIndexerApiesDistinctCountIndexerIdDesc = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_INDEXER_ID_DESC',
  EraDelegatorIndexerApiesDistinctCountRewardAsc = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_REWARD_ASC',
  EraDelegatorIndexerApiesDistinctCountRewardDesc = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_REWARD_DESC',
  EraDelegatorIndexerApiesDistinctCountStakeAsc = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_STAKE_ASC',
  EraDelegatorIndexerApiesDistinctCountStakeDesc = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_STAKE_DESC',
  EraDelegatorIndexerApiesDistinctCountUpdateAtAsc = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_UPDATE_AT_ASC',
  EraDelegatorIndexerApiesDistinctCountUpdateAtDesc = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_UPDATE_AT_DESC',
  EraDelegatorIndexerApiesMaxApyAsc = 'ERA_DELEGATOR_INDEXER_APIES_MAX_APY_ASC',
  EraDelegatorIndexerApiesMaxApyDesc = 'ERA_DELEGATOR_INDEXER_APIES_MAX_APY_DESC',
  EraDelegatorIndexerApiesMaxBlockRangeAsc = 'ERA_DELEGATOR_INDEXER_APIES_MAX_BLOCK_RANGE_ASC',
  EraDelegatorIndexerApiesMaxBlockRangeDesc = 'ERA_DELEGATOR_INDEXER_APIES_MAX_BLOCK_RANGE_DESC',
  EraDelegatorIndexerApiesMaxCreateAtAsc = 'ERA_DELEGATOR_INDEXER_APIES_MAX_CREATE_AT_ASC',
  EraDelegatorIndexerApiesMaxCreateAtDesc = 'ERA_DELEGATOR_INDEXER_APIES_MAX_CREATE_AT_DESC',
  EraDelegatorIndexerApiesMaxDelegatorIdAsc = 'ERA_DELEGATOR_INDEXER_APIES_MAX_DELEGATOR_ID_ASC',
  EraDelegatorIndexerApiesMaxDelegatorIdDesc = 'ERA_DELEGATOR_INDEXER_APIES_MAX_DELEGATOR_ID_DESC',
  EraDelegatorIndexerApiesMaxEraIdxAsc = 'ERA_DELEGATOR_INDEXER_APIES_MAX_ERA_IDX_ASC',
  EraDelegatorIndexerApiesMaxEraIdxDesc = 'ERA_DELEGATOR_INDEXER_APIES_MAX_ERA_IDX_DESC',
  EraDelegatorIndexerApiesMaxIdAsc = 'ERA_DELEGATOR_INDEXER_APIES_MAX_ID_ASC',
  EraDelegatorIndexerApiesMaxIdDesc = 'ERA_DELEGATOR_INDEXER_APIES_MAX_ID_DESC',
  EraDelegatorIndexerApiesMaxIndexerIdAsc = 'ERA_DELEGATOR_INDEXER_APIES_MAX_INDEXER_ID_ASC',
  EraDelegatorIndexerApiesMaxIndexerIdDesc = 'ERA_DELEGATOR_INDEXER_APIES_MAX_INDEXER_ID_DESC',
  EraDelegatorIndexerApiesMaxRewardAsc = 'ERA_DELEGATOR_INDEXER_APIES_MAX_REWARD_ASC',
  EraDelegatorIndexerApiesMaxRewardDesc = 'ERA_DELEGATOR_INDEXER_APIES_MAX_REWARD_DESC',
  EraDelegatorIndexerApiesMaxStakeAsc = 'ERA_DELEGATOR_INDEXER_APIES_MAX_STAKE_ASC',
  EraDelegatorIndexerApiesMaxStakeDesc = 'ERA_DELEGATOR_INDEXER_APIES_MAX_STAKE_DESC',
  EraDelegatorIndexerApiesMaxUpdateAtAsc = 'ERA_DELEGATOR_INDEXER_APIES_MAX_UPDATE_AT_ASC',
  EraDelegatorIndexerApiesMaxUpdateAtDesc = 'ERA_DELEGATOR_INDEXER_APIES_MAX_UPDATE_AT_DESC',
  EraDelegatorIndexerApiesMinApyAsc = 'ERA_DELEGATOR_INDEXER_APIES_MIN_APY_ASC',
  EraDelegatorIndexerApiesMinApyDesc = 'ERA_DELEGATOR_INDEXER_APIES_MIN_APY_DESC',
  EraDelegatorIndexerApiesMinBlockRangeAsc = 'ERA_DELEGATOR_INDEXER_APIES_MIN_BLOCK_RANGE_ASC',
  EraDelegatorIndexerApiesMinBlockRangeDesc = 'ERA_DELEGATOR_INDEXER_APIES_MIN_BLOCK_RANGE_DESC',
  EraDelegatorIndexerApiesMinCreateAtAsc = 'ERA_DELEGATOR_INDEXER_APIES_MIN_CREATE_AT_ASC',
  EraDelegatorIndexerApiesMinCreateAtDesc = 'ERA_DELEGATOR_INDEXER_APIES_MIN_CREATE_AT_DESC',
  EraDelegatorIndexerApiesMinDelegatorIdAsc = 'ERA_DELEGATOR_INDEXER_APIES_MIN_DELEGATOR_ID_ASC',
  EraDelegatorIndexerApiesMinDelegatorIdDesc = 'ERA_DELEGATOR_INDEXER_APIES_MIN_DELEGATOR_ID_DESC',
  EraDelegatorIndexerApiesMinEraIdxAsc = 'ERA_DELEGATOR_INDEXER_APIES_MIN_ERA_IDX_ASC',
  EraDelegatorIndexerApiesMinEraIdxDesc = 'ERA_DELEGATOR_INDEXER_APIES_MIN_ERA_IDX_DESC',
  EraDelegatorIndexerApiesMinIdAsc = 'ERA_DELEGATOR_INDEXER_APIES_MIN_ID_ASC',
  EraDelegatorIndexerApiesMinIdDesc = 'ERA_DELEGATOR_INDEXER_APIES_MIN_ID_DESC',
  EraDelegatorIndexerApiesMinIndexerIdAsc = 'ERA_DELEGATOR_INDEXER_APIES_MIN_INDEXER_ID_ASC',
  EraDelegatorIndexerApiesMinIndexerIdDesc = 'ERA_DELEGATOR_INDEXER_APIES_MIN_INDEXER_ID_DESC',
  EraDelegatorIndexerApiesMinRewardAsc = 'ERA_DELEGATOR_INDEXER_APIES_MIN_REWARD_ASC',
  EraDelegatorIndexerApiesMinRewardDesc = 'ERA_DELEGATOR_INDEXER_APIES_MIN_REWARD_DESC',
  EraDelegatorIndexerApiesMinStakeAsc = 'ERA_DELEGATOR_INDEXER_APIES_MIN_STAKE_ASC',
  EraDelegatorIndexerApiesMinStakeDesc = 'ERA_DELEGATOR_INDEXER_APIES_MIN_STAKE_DESC',
  EraDelegatorIndexerApiesMinUpdateAtAsc = 'ERA_DELEGATOR_INDEXER_APIES_MIN_UPDATE_AT_ASC',
  EraDelegatorIndexerApiesMinUpdateAtDesc = 'ERA_DELEGATOR_INDEXER_APIES_MIN_UPDATE_AT_DESC',
  EraDelegatorIndexerApiesStddevPopulationApyAsc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_APY_ASC',
  EraDelegatorIndexerApiesStddevPopulationApyDesc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_APY_DESC',
  EraDelegatorIndexerApiesStddevPopulationBlockRangeAsc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  EraDelegatorIndexerApiesStddevPopulationBlockRangeDesc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  EraDelegatorIndexerApiesStddevPopulationCreateAtAsc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_CREATE_AT_ASC',
  EraDelegatorIndexerApiesStddevPopulationCreateAtDesc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_CREATE_AT_DESC',
  EraDelegatorIndexerApiesStddevPopulationDelegatorIdAsc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_DELEGATOR_ID_ASC',
  EraDelegatorIndexerApiesStddevPopulationDelegatorIdDesc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_DELEGATOR_ID_DESC',
  EraDelegatorIndexerApiesStddevPopulationEraIdxAsc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_ERA_IDX_ASC',
  EraDelegatorIndexerApiesStddevPopulationEraIdxDesc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_ERA_IDX_DESC',
  EraDelegatorIndexerApiesStddevPopulationIdAsc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_ID_ASC',
  EraDelegatorIndexerApiesStddevPopulationIdDesc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_ID_DESC',
  EraDelegatorIndexerApiesStddevPopulationIndexerIdAsc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_INDEXER_ID_ASC',
  EraDelegatorIndexerApiesStddevPopulationIndexerIdDesc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_INDEXER_ID_DESC',
  EraDelegatorIndexerApiesStddevPopulationRewardAsc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_REWARD_ASC',
  EraDelegatorIndexerApiesStddevPopulationRewardDesc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_REWARD_DESC',
  EraDelegatorIndexerApiesStddevPopulationStakeAsc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_STAKE_ASC',
  EraDelegatorIndexerApiesStddevPopulationStakeDesc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_STAKE_DESC',
  EraDelegatorIndexerApiesStddevPopulationUpdateAtAsc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_UPDATE_AT_ASC',
  EraDelegatorIndexerApiesStddevPopulationUpdateAtDesc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_UPDATE_AT_DESC',
  EraDelegatorIndexerApiesStddevSampleApyAsc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_APY_ASC',
  EraDelegatorIndexerApiesStddevSampleApyDesc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_APY_DESC',
  EraDelegatorIndexerApiesStddevSampleBlockRangeAsc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  EraDelegatorIndexerApiesStddevSampleBlockRangeDesc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  EraDelegatorIndexerApiesStddevSampleCreateAtAsc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_CREATE_AT_ASC',
  EraDelegatorIndexerApiesStddevSampleCreateAtDesc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_CREATE_AT_DESC',
  EraDelegatorIndexerApiesStddevSampleDelegatorIdAsc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_DELEGATOR_ID_ASC',
  EraDelegatorIndexerApiesStddevSampleDelegatorIdDesc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_DELEGATOR_ID_DESC',
  EraDelegatorIndexerApiesStddevSampleEraIdxAsc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_ERA_IDX_ASC',
  EraDelegatorIndexerApiesStddevSampleEraIdxDesc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_ERA_IDX_DESC',
  EraDelegatorIndexerApiesStddevSampleIdAsc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_ID_ASC',
  EraDelegatorIndexerApiesStddevSampleIdDesc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_ID_DESC',
  EraDelegatorIndexerApiesStddevSampleIndexerIdAsc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_INDEXER_ID_ASC',
  EraDelegatorIndexerApiesStddevSampleIndexerIdDesc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_INDEXER_ID_DESC',
  EraDelegatorIndexerApiesStddevSampleRewardAsc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_REWARD_ASC',
  EraDelegatorIndexerApiesStddevSampleRewardDesc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_REWARD_DESC',
  EraDelegatorIndexerApiesStddevSampleStakeAsc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_STAKE_ASC',
  EraDelegatorIndexerApiesStddevSampleStakeDesc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_STAKE_DESC',
  EraDelegatorIndexerApiesStddevSampleUpdateAtAsc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_UPDATE_AT_ASC',
  EraDelegatorIndexerApiesStddevSampleUpdateAtDesc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_UPDATE_AT_DESC',
  EraDelegatorIndexerApiesSumApyAsc = 'ERA_DELEGATOR_INDEXER_APIES_SUM_APY_ASC',
  EraDelegatorIndexerApiesSumApyDesc = 'ERA_DELEGATOR_INDEXER_APIES_SUM_APY_DESC',
  EraDelegatorIndexerApiesSumBlockRangeAsc = 'ERA_DELEGATOR_INDEXER_APIES_SUM_BLOCK_RANGE_ASC',
  EraDelegatorIndexerApiesSumBlockRangeDesc = 'ERA_DELEGATOR_INDEXER_APIES_SUM_BLOCK_RANGE_DESC',
  EraDelegatorIndexerApiesSumCreateAtAsc = 'ERA_DELEGATOR_INDEXER_APIES_SUM_CREATE_AT_ASC',
  EraDelegatorIndexerApiesSumCreateAtDesc = 'ERA_DELEGATOR_INDEXER_APIES_SUM_CREATE_AT_DESC',
  EraDelegatorIndexerApiesSumDelegatorIdAsc = 'ERA_DELEGATOR_INDEXER_APIES_SUM_DELEGATOR_ID_ASC',
  EraDelegatorIndexerApiesSumDelegatorIdDesc = 'ERA_DELEGATOR_INDEXER_APIES_SUM_DELEGATOR_ID_DESC',
  EraDelegatorIndexerApiesSumEraIdxAsc = 'ERA_DELEGATOR_INDEXER_APIES_SUM_ERA_IDX_ASC',
  EraDelegatorIndexerApiesSumEraIdxDesc = 'ERA_DELEGATOR_INDEXER_APIES_SUM_ERA_IDX_DESC',
  EraDelegatorIndexerApiesSumIdAsc = 'ERA_DELEGATOR_INDEXER_APIES_SUM_ID_ASC',
  EraDelegatorIndexerApiesSumIdDesc = 'ERA_DELEGATOR_INDEXER_APIES_SUM_ID_DESC',
  EraDelegatorIndexerApiesSumIndexerIdAsc = 'ERA_DELEGATOR_INDEXER_APIES_SUM_INDEXER_ID_ASC',
  EraDelegatorIndexerApiesSumIndexerIdDesc = 'ERA_DELEGATOR_INDEXER_APIES_SUM_INDEXER_ID_DESC',
  EraDelegatorIndexerApiesSumRewardAsc = 'ERA_DELEGATOR_INDEXER_APIES_SUM_REWARD_ASC',
  EraDelegatorIndexerApiesSumRewardDesc = 'ERA_DELEGATOR_INDEXER_APIES_SUM_REWARD_DESC',
  EraDelegatorIndexerApiesSumStakeAsc = 'ERA_DELEGATOR_INDEXER_APIES_SUM_STAKE_ASC',
  EraDelegatorIndexerApiesSumStakeDesc = 'ERA_DELEGATOR_INDEXER_APIES_SUM_STAKE_DESC',
  EraDelegatorIndexerApiesSumUpdateAtAsc = 'ERA_DELEGATOR_INDEXER_APIES_SUM_UPDATE_AT_ASC',
  EraDelegatorIndexerApiesSumUpdateAtDesc = 'ERA_DELEGATOR_INDEXER_APIES_SUM_UPDATE_AT_DESC',
  EraDelegatorIndexerApiesVariancePopulationApyAsc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_APY_ASC',
  EraDelegatorIndexerApiesVariancePopulationApyDesc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_APY_DESC',
  EraDelegatorIndexerApiesVariancePopulationBlockRangeAsc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  EraDelegatorIndexerApiesVariancePopulationBlockRangeDesc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  EraDelegatorIndexerApiesVariancePopulationCreateAtAsc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_CREATE_AT_ASC',
  EraDelegatorIndexerApiesVariancePopulationCreateAtDesc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_CREATE_AT_DESC',
  EraDelegatorIndexerApiesVariancePopulationDelegatorIdAsc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_DELEGATOR_ID_ASC',
  EraDelegatorIndexerApiesVariancePopulationDelegatorIdDesc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_DELEGATOR_ID_DESC',
  EraDelegatorIndexerApiesVariancePopulationEraIdxAsc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_ERA_IDX_ASC',
  EraDelegatorIndexerApiesVariancePopulationEraIdxDesc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_ERA_IDX_DESC',
  EraDelegatorIndexerApiesVariancePopulationIdAsc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_ID_ASC',
  EraDelegatorIndexerApiesVariancePopulationIdDesc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_ID_DESC',
  EraDelegatorIndexerApiesVariancePopulationIndexerIdAsc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_INDEXER_ID_ASC',
  EraDelegatorIndexerApiesVariancePopulationIndexerIdDesc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_INDEXER_ID_DESC',
  EraDelegatorIndexerApiesVariancePopulationRewardAsc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_REWARD_ASC',
  EraDelegatorIndexerApiesVariancePopulationRewardDesc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_REWARD_DESC',
  EraDelegatorIndexerApiesVariancePopulationStakeAsc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_STAKE_ASC',
  EraDelegatorIndexerApiesVariancePopulationStakeDesc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_STAKE_DESC',
  EraDelegatorIndexerApiesVariancePopulationUpdateAtAsc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_UPDATE_AT_ASC',
  EraDelegatorIndexerApiesVariancePopulationUpdateAtDesc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_UPDATE_AT_DESC',
  EraDelegatorIndexerApiesVarianceSampleApyAsc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_APY_ASC',
  EraDelegatorIndexerApiesVarianceSampleApyDesc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_APY_DESC',
  EraDelegatorIndexerApiesVarianceSampleBlockRangeAsc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  EraDelegatorIndexerApiesVarianceSampleBlockRangeDesc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  EraDelegatorIndexerApiesVarianceSampleCreateAtAsc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_CREATE_AT_ASC',
  EraDelegatorIndexerApiesVarianceSampleCreateAtDesc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_CREATE_AT_DESC',
  EraDelegatorIndexerApiesVarianceSampleDelegatorIdAsc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_DELEGATOR_ID_ASC',
  EraDelegatorIndexerApiesVarianceSampleDelegatorIdDesc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_DELEGATOR_ID_DESC',
  EraDelegatorIndexerApiesVarianceSampleEraIdxAsc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_ERA_IDX_ASC',
  EraDelegatorIndexerApiesVarianceSampleEraIdxDesc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_ERA_IDX_DESC',
  EraDelegatorIndexerApiesVarianceSampleIdAsc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_ID_ASC',
  EraDelegatorIndexerApiesVarianceSampleIdDesc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_ID_DESC',
  EraDelegatorIndexerApiesVarianceSampleIndexerIdAsc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  EraDelegatorIndexerApiesVarianceSampleIndexerIdDesc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  EraDelegatorIndexerApiesVarianceSampleRewardAsc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_REWARD_ASC',
  EraDelegatorIndexerApiesVarianceSampleRewardDesc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_REWARD_DESC',
  EraDelegatorIndexerApiesVarianceSampleStakeAsc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_STAKE_ASC',
  EraDelegatorIndexerApiesVarianceSampleStakeDesc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_STAKE_DESC',
  EraDelegatorIndexerApiesVarianceSampleUpdateAtAsc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_UPDATE_AT_ASC',
  EraDelegatorIndexerApiesVarianceSampleUpdateAtDesc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_UPDATE_AT_DESC',
  EraRewardsAverageAmountAsc = 'ERA_REWARDS_AVERAGE_AMOUNT_ASC',
  EraRewardsAverageAmountDesc = 'ERA_REWARDS_AVERAGE_AMOUNT_DESC',
  EraRewardsAverageBlockRangeAsc = 'ERA_REWARDS_AVERAGE_BLOCK_RANGE_ASC',
  EraRewardsAverageBlockRangeDesc = 'ERA_REWARDS_AVERAGE_BLOCK_RANGE_DESC',
  EraRewardsAverageClaimedAsc = 'ERA_REWARDS_AVERAGE_CLAIMED_ASC',
  EraRewardsAverageClaimedDesc = 'ERA_REWARDS_AVERAGE_CLAIMED_DESC',
  EraRewardsAverageCreatedBlockAsc = 'ERA_REWARDS_AVERAGE_CREATED_BLOCK_ASC',
  EraRewardsAverageCreatedBlockDesc = 'ERA_REWARDS_AVERAGE_CREATED_BLOCK_DESC',
  EraRewardsAverageCreatedTimestampAsc = 'ERA_REWARDS_AVERAGE_CREATED_TIMESTAMP_ASC',
  EraRewardsAverageCreatedTimestampDesc = 'ERA_REWARDS_AVERAGE_CREATED_TIMESTAMP_DESC',
  EraRewardsAverageDelegatorIdAsc = 'ERA_REWARDS_AVERAGE_DELEGATOR_ID_ASC',
  EraRewardsAverageDelegatorIdDesc = 'ERA_REWARDS_AVERAGE_DELEGATOR_ID_DESC',
  EraRewardsAverageEraIdxAsc = 'ERA_REWARDS_AVERAGE_ERA_IDX_ASC',
  EraRewardsAverageEraIdxDesc = 'ERA_REWARDS_AVERAGE_ERA_IDX_DESC',
  EraRewardsAverageEraIdAsc = 'ERA_REWARDS_AVERAGE_ERA_ID_ASC',
  EraRewardsAverageEraIdDesc = 'ERA_REWARDS_AVERAGE_ERA_ID_DESC',
  EraRewardsAverageIdAsc = 'ERA_REWARDS_AVERAGE_ID_ASC',
  EraRewardsAverageIdDesc = 'ERA_REWARDS_AVERAGE_ID_DESC',
  EraRewardsAverageIndexerIdAsc = 'ERA_REWARDS_AVERAGE_INDEXER_ID_ASC',
  EraRewardsAverageIndexerIdDesc = 'ERA_REWARDS_AVERAGE_INDEXER_ID_DESC',
  EraRewardsAverageIsCommissionAsc = 'ERA_REWARDS_AVERAGE_IS_COMMISSION_ASC',
  EraRewardsAverageIsCommissionDesc = 'ERA_REWARDS_AVERAGE_IS_COMMISSION_DESC',
  EraRewardsAverageIsIndexerAsc = 'ERA_REWARDS_AVERAGE_IS_INDEXER_ASC',
  EraRewardsAverageIsIndexerDesc = 'ERA_REWARDS_AVERAGE_IS_INDEXER_DESC',
  EraRewardsByDelegatorIdCountAsc = 'ERA_REWARDS_BY_DELEGATOR_ID__COUNT_ASC',
  EraRewardsByDelegatorIdCountDesc = 'ERA_REWARDS_BY_DELEGATOR_ID__COUNT_DESC',
  EraRewardsCountAsc = 'ERA_REWARDS_COUNT_ASC',
  EraRewardsCountDesc = 'ERA_REWARDS_COUNT_DESC',
  EraRewardsDistinctCountAmountAsc = 'ERA_REWARDS_DISTINCT_COUNT_AMOUNT_ASC',
  EraRewardsDistinctCountAmountDesc = 'ERA_REWARDS_DISTINCT_COUNT_AMOUNT_DESC',
  EraRewardsDistinctCountBlockRangeAsc = 'ERA_REWARDS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  EraRewardsDistinctCountBlockRangeDesc = 'ERA_REWARDS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  EraRewardsDistinctCountClaimedAsc = 'ERA_REWARDS_DISTINCT_COUNT_CLAIMED_ASC',
  EraRewardsDistinctCountClaimedDesc = 'ERA_REWARDS_DISTINCT_COUNT_CLAIMED_DESC',
  EraRewardsDistinctCountCreatedBlockAsc = 'ERA_REWARDS_DISTINCT_COUNT_CREATED_BLOCK_ASC',
  EraRewardsDistinctCountCreatedBlockDesc = 'ERA_REWARDS_DISTINCT_COUNT_CREATED_BLOCK_DESC',
  EraRewardsDistinctCountCreatedTimestampAsc = 'ERA_REWARDS_DISTINCT_COUNT_CREATED_TIMESTAMP_ASC',
  EraRewardsDistinctCountCreatedTimestampDesc = 'ERA_REWARDS_DISTINCT_COUNT_CREATED_TIMESTAMP_DESC',
  EraRewardsDistinctCountDelegatorIdAsc = 'ERA_REWARDS_DISTINCT_COUNT_DELEGATOR_ID_ASC',
  EraRewardsDistinctCountDelegatorIdDesc = 'ERA_REWARDS_DISTINCT_COUNT_DELEGATOR_ID_DESC',
  EraRewardsDistinctCountEraIdxAsc = 'ERA_REWARDS_DISTINCT_COUNT_ERA_IDX_ASC',
  EraRewardsDistinctCountEraIdxDesc = 'ERA_REWARDS_DISTINCT_COUNT_ERA_IDX_DESC',
  EraRewardsDistinctCountEraIdAsc = 'ERA_REWARDS_DISTINCT_COUNT_ERA_ID_ASC',
  EraRewardsDistinctCountEraIdDesc = 'ERA_REWARDS_DISTINCT_COUNT_ERA_ID_DESC',
  EraRewardsDistinctCountIdAsc = 'ERA_REWARDS_DISTINCT_COUNT_ID_ASC',
  EraRewardsDistinctCountIdDesc = 'ERA_REWARDS_DISTINCT_COUNT_ID_DESC',
  EraRewardsDistinctCountIndexerIdAsc = 'ERA_REWARDS_DISTINCT_COUNT_INDEXER_ID_ASC',
  EraRewardsDistinctCountIndexerIdDesc = 'ERA_REWARDS_DISTINCT_COUNT_INDEXER_ID_DESC',
  EraRewardsDistinctCountIsCommissionAsc = 'ERA_REWARDS_DISTINCT_COUNT_IS_COMMISSION_ASC',
  EraRewardsDistinctCountIsCommissionDesc = 'ERA_REWARDS_DISTINCT_COUNT_IS_COMMISSION_DESC',
  EraRewardsDistinctCountIsIndexerAsc = 'ERA_REWARDS_DISTINCT_COUNT_IS_INDEXER_ASC',
  EraRewardsDistinctCountIsIndexerDesc = 'ERA_REWARDS_DISTINCT_COUNT_IS_INDEXER_DESC',
  EraRewardsMaxAmountAsc = 'ERA_REWARDS_MAX_AMOUNT_ASC',
  EraRewardsMaxAmountDesc = 'ERA_REWARDS_MAX_AMOUNT_DESC',
  EraRewardsMaxBlockRangeAsc = 'ERA_REWARDS_MAX_BLOCK_RANGE_ASC',
  EraRewardsMaxBlockRangeDesc = 'ERA_REWARDS_MAX_BLOCK_RANGE_DESC',
  EraRewardsMaxClaimedAsc = 'ERA_REWARDS_MAX_CLAIMED_ASC',
  EraRewardsMaxClaimedDesc = 'ERA_REWARDS_MAX_CLAIMED_DESC',
  EraRewardsMaxCreatedBlockAsc = 'ERA_REWARDS_MAX_CREATED_BLOCK_ASC',
  EraRewardsMaxCreatedBlockDesc = 'ERA_REWARDS_MAX_CREATED_BLOCK_DESC',
  EraRewardsMaxCreatedTimestampAsc = 'ERA_REWARDS_MAX_CREATED_TIMESTAMP_ASC',
  EraRewardsMaxCreatedTimestampDesc = 'ERA_REWARDS_MAX_CREATED_TIMESTAMP_DESC',
  EraRewardsMaxDelegatorIdAsc = 'ERA_REWARDS_MAX_DELEGATOR_ID_ASC',
  EraRewardsMaxDelegatorIdDesc = 'ERA_REWARDS_MAX_DELEGATOR_ID_DESC',
  EraRewardsMaxEraIdxAsc = 'ERA_REWARDS_MAX_ERA_IDX_ASC',
  EraRewardsMaxEraIdxDesc = 'ERA_REWARDS_MAX_ERA_IDX_DESC',
  EraRewardsMaxEraIdAsc = 'ERA_REWARDS_MAX_ERA_ID_ASC',
  EraRewardsMaxEraIdDesc = 'ERA_REWARDS_MAX_ERA_ID_DESC',
  EraRewardsMaxIdAsc = 'ERA_REWARDS_MAX_ID_ASC',
  EraRewardsMaxIdDesc = 'ERA_REWARDS_MAX_ID_DESC',
  EraRewardsMaxIndexerIdAsc = 'ERA_REWARDS_MAX_INDEXER_ID_ASC',
  EraRewardsMaxIndexerIdDesc = 'ERA_REWARDS_MAX_INDEXER_ID_DESC',
  EraRewardsMaxIsCommissionAsc = 'ERA_REWARDS_MAX_IS_COMMISSION_ASC',
  EraRewardsMaxIsCommissionDesc = 'ERA_REWARDS_MAX_IS_COMMISSION_DESC',
  EraRewardsMaxIsIndexerAsc = 'ERA_REWARDS_MAX_IS_INDEXER_ASC',
  EraRewardsMaxIsIndexerDesc = 'ERA_REWARDS_MAX_IS_INDEXER_DESC',
  EraRewardsMinAmountAsc = 'ERA_REWARDS_MIN_AMOUNT_ASC',
  EraRewardsMinAmountDesc = 'ERA_REWARDS_MIN_AMOUNT_DESC',
  EraRewardsMinBlockRangeAsc = 'ERA_REWARDS_MIN_BLOCK_RANGE_ASC',
  EraRewardsMinBlockRangeDesc = 'ERA_REWARDS_MIN_BLOCK_RANGE_DESC',
  EraRewardsMinClaimedAsc = 'ERA_REWARDS_MIN_CLAIMED_ASC',
  EraRewardsMinClaimedDesc = 'ERA_REWARDS_MIN_CLAIMED_DESC',
  EraRewardsMinCreatedBlockAsc = 'ERA_REWARDS_MIN_CREATED_BLOCK_ASC',
  EraRewardsMinCreatedBlockDesc = 'ERA_REWARDS_MIN_CREATED_BLOCK_DESC',
  EraRewardsMinCreatedTimestampAsc = 'ERA_REWARDS_MIN_CREATED_TIMESTAMP_ASC',
  EraRewardsMinCreatedTimestampDesc = 'ERA_REWARDS_MIN_CREATED_TIMESTAMP_DESC',
  EraRewardsMinDelegatorIdAsc = 'ERA_REWARDS_MIN_DELEGATOR_ID_ASC',
  EraRewardsMinDelegatorIdDesc = 'ERA_REWARDS_MIN_DELEGATOR_ID_DESC',
  EraRewardsMinEraIdxAsc = 'ERA_REWARDS_MIN_ERA_IDX_ASC',
  EraRewardsMinEraIdxDesc = 'ERA_REWARDS_MIN_ERA_IDX_DESC',
  EraRewardsMinEraIdAsc = 'ERA_REWARDS_MIN_ERA_ID_ASC',
  EraRewardsMinEraIdDesc = 'ERA_REWARDS_MIN_ERA_ID_DESC',
  EraRewardsMinIdAsc = 'ERA_REWARDS_MIN_ID_ASC',
  EraRewardsMinIdDesc = 'ERA_REWARDS_MIN_ID_DESC',
  EraRewardsMinIndexerIdAsc = 'ERA_REWARDS_MIN_INDEXER_ID_ASC',
  EraRewardsMinIndexerIdDesc = 'ERA_REWARDS_MIN_INDEXER_ID_DESC',
  EraRewardsMinIsCommissionAsc = 'ERA_REWARDS_MIN_IS_COMMISSION_ASC',
  EraRewardsMinIsCommissionDesc = 'ERA_REWARDS_MIN_IS_COMMISSION_DESC',
  EraRewardsMinIsIndexerAsc = 'ERA_REWARDS_MIN_IS_INDEXER_ASC',
  EraRewardsMinIsIndexerDesc = 'ERA_REWARDS_MIN_IS_INDEXER_DESC',
  EraRewardsStddevPopulationAmountAsc = 'ERA_REWARDS_STDDEV_POPULATION_AMOUNT_ASC',
  EraRewardsStddevPopulationAmountDesc = 'ERA_REWARDS_STDDEV_POPULATION_AMOUNT_DESC',
  EraRewardsStddevPopulationBlockRangeAsc = 'ERA_REWARDS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  EraRewardsStddevPopulationBlockRangeDesc = 'ERA_REWARDS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  EraRewardsStddevPopulationClaimedAsc = 'ERA_REWARDS_STDDEV_POPULATION_CLAIMED_ASC',
  EraRewardsStddevPopulationClaimedDesc = 'ERA_REWARDS_STDDEV_POPULATION_CLAIMED_DESC',
  EraRewardsStddevPopulationCreatedBlockAsc = 'ERA_REWARDS_STDDEV_POPULATION_CREATED_BLOCK_ASC',
  EraRewardsStddevPopulationCreatedBlockDesc = 'ERA_REWARDS_STDDEV_POPULATION_CREATED_BLOCK_DESC',
  EraRewardsStddevPopulationCreatedTimestampAsc = 'ERA_REWARDS_STDDEV_POPULATION_CREATED_TIMESTAMP_ASC',
  EraRewardsStddevPopulationCreatedTimestampDesc = 'ERA_REWARDS_STDDEV_POPULATION_CREATED_TIMESTAMP_DESC',
  EraRewardsStddevPopulationDelegatorIdAsc = 'ERA_REWARDS_STDDEV_POPULATION_DELEGATOR_ID_ASC',
  EraRewardsStddevPopulationDelegatorIdDesc = 'ERA_REWARDS_STDDEV_POPULATION_DELEGATOR_ID_DESC',
  EraRewardsStddevPopulationEraIdxAsc = 'ERA_REWARDS_STDDEV_POPULATION_ERA_IDX_ASC',
  EraRewardsStddevPopulationEraIdxDesc = 'ERA_REWARDS_STDDEV_POPULATION_ERA_IDX_DESC',
  EraRewardsStddevPopulationEraIdAsc = 'ERA_REWARDS_STDDEV_POPULATION_ERA_ID_ASC',
  EraRewardsStddevPopulationEraIdDesc = 'ERA_REWARDS_STDDEV_POPULATION_ERA_ID_DESC',
  EraRewardsStddevPopulationIdAsc = 'ERA_REWARDS_STDDEV_POPULATION_ID_ASC',
  EraRewardsStddevPopulationIdDesc = 'ERA_REWARDS_STDDEV_POPULATION_ID_DESC',
  EraRewardsStddevPopulationIndexerIdAsc = 'ERA_REWARDS_STDDEV_POPULATION_INDEXER_ID_ASC',
  EraRewardsStddevPopulationIndexerIdDesc = 'ERA_REWARDS_STDDEV_POPULATION_INDEXER_ID_DESC',
  EraRewardsStddevPopulationIsCommissionAsc = 'ERA_REWARDS_STDDEV_POPULATION_IS_COMMISSION_ASC',
  EraRewardsStddevPopulationIsCommissionDesc = 'ERA_REWARDS_STDDEV_POPULATION_IS_COMMISSION_DESC',
  EraRewardsStddevPopulationIsIndexerAsc = 'ERA_REWARDS_STDDEV_POPULATION_IS_INDEXER_ASC',
  EraRewardsStddevPopulationIsIndexerDesc = 'ERA_REWARDS_STDDEV_POPULATION_IS_INDEXER_DESC',
  EraRewardsStddevSampleAmountAsc = 'ERA_REWARDS_STDDEV_SAMPLE_AMOUNT_ASC',
  EraRewardsStddevSampleAmountDesc = 'ERA_REWARDS_STDDEV_SAMPLE_AMOUNT_DESC',
  EraRewardsStddevSampleBlockRangeAsc = 'ERA_REWARDS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  EraRewardsStddevSampleBlockRangeDesc = 'ERA_REWARDS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  EraRewardsStddevSampleClaimedAsc = 'ERA_REWARDS_STDDEV_SAMPLE_CLAIMED_ASC',
  EraRewardsStddevSampleClaimedDesc = 'ERA_REWARDS_STDDEV_SAMPLE_CLAIMED_DESC',
  EraRewardsStddevSampleCreatedBlockAsc = 'ERA_REWARDS_STDDEV_SAMPLE_CREATED_BLOCK_ASC',
  EraRewardsStddevSampleCreatedBlockDesc = 'ERA_REWARDS_STDDEV_SAMPLE_CREATED_BLOCK_DESC',
  EraRewardsStddevSampleCreatedTimestampAsc = 'ERA_REWARDS_STDDEV_SAMPLE_CREATED_TIMESTAMP_ASC',
  EraRewardsStddevSampleCreatedTimestampDesc = 'ERA_REWARDS_STDDEV_SAMPLE_CREATED_TIMESTAMP_DESC',
  EraRewardsStddevSampleDelegatorIdAsc = 'ERA_REWARDS_STDDEV_SAMPLE_DELEGATOR_ID_ASC',
  EraRewardsStddevSampleDelegatorIdDesc = 'ERA_REWARDS_STDDEV_SAMPLE_DELEGATOR_ID_DESC',
  EraRewardsStddevSampleEraIdxAsc = 'ERA_REWARDS_STDDEV_SAMPLE_ERA_IDX_ASC',
  EraRewardsStddevSampleEraIdxDesc = 'ERA_REWARDS_STDDEV_SAMPLE_ERA_IDX_DESC',
  EraRewardsStddevSampleEraIdAsc = 'ERA_REWARDS_STDDEV_SAMPLE_ERA_ID_ASC',
  EraRewardsStddevSampleEraIdDesc = 'ERA_REWARDS_STDDEV_SAMPLE_ERA_ID_DESC',
  EraRewardsStddevSampleIdAsc = 'ERA_REWARDS_STDDEV_SAMPLE_ID_ASC',
  EraRewardsStddevSampleIdDesc = 'ERA_REWARDS_STDDEV_SAMPLE_ID_DESC',
  EraRewardsStddevSampleIndexerIdAsc = 'ERA_REWARDS_STDDEV_SAMPLE_INDEXER_ID_ASC',
  EraRewardsStddevSampleIndexerIdDesc = 'ERA_REWARDS_STDDEV_SAMPLE_INDEXER_ID_DESC',
  EraRewardsStddevSampleIsCommissionAsc = 'ERA_REWARDS_STDDEV_SAMPLE_IS_COMMISSION_ASC',
  EraRewardsStddevSampleIsCommissionDesc = 'ERA_REWARDS_STDDEV_SAMPLE_IS_COMMISSION_DESC',
  EraRewardsStddevSampleIsIndexerAsc = 'ERA_REWARDS_STDDEV_SAMPLE_IS_INDEXER_ASC',
  EraRewardsStddevSampleIsIndexerDesc = 'ERA_REWARDS_STDDEV_SAMPLE_IS_INDEXER_DESC',
  EraRewardsSumAmountAsc = 'ERA_REWARDS_SUM_AMOUNT_ASC',
  EraRewardsSumAmountDesc = 'ERA_REWARDS_SUM_AMOUNT_DESC',
  EraRewardsSumBlockRangeAsc = 'ERA_REWARDS_SUM_BLOCK_RANGE_ASC',
  EraRewardsSumBlockRangeDesc = 'ERA_REWARDS_SUM_BLOCK_RANGE_DESC',
  EraRewardsSumClaimedAsc = 'ERA_REWARDS_SUM_CLAIMED_ASC',
  EraRewardsSumClaimedDesc = 'ERA_REWARDS_SUM_CLAIMED_DESC',
  EraRewardsSumCreatedBlockAsc = 'ERA_REWARDS_SUM_CREATED_BLOCK_ASC',
  EraRewardsSumCreatedBlockDesc = 'ERA_REWARDS_SUM_CREATED_BLOCK_DESC',
  EraRewardsSumCreatedTimestampAsc = 'ERA_REWARDS_SUM_CREATED_TIMESTAMP_ASC',
  EraRewardsSumCreatedTimestampDesc = 'ERA_REWARDS_SUM_CREATED_TIMESTAMP_DESC',
  EraRewardsSumDelegatorIdAsc = 'ERA_REWARDS_SUM_DELEGATOR_ID_ASC',
  EraRewardsSumDelegatorIdDesc = 'ERA_REWARDS_SUM_DELEGATOR_ID_DESC',
  EraRewardsSumEraIdxAsc = 'ERA_REWARDS_SUM_ERA_IDX_ASC',
  EraRewardsSumEraIdxDesc = 'ERA_REWARDS_SUM_ERA_IDX_DESC',
  EraRewardsSumEraIdAsc = 'ERA_REWARDS_SUM_ERA_ID_ASC',
  EraRewardsSumEraIdDesc = 'ERA_REWARDS_SUM_ERA_ID_DESC',
  EraRewardsSumIdAsc = 'ERA_REWARDS_SUM_ID_ASC',
  EraRewardsSumIdDesc = 'ERA_REWARDS_SUM_ID_DESC',
  EraRewardsSumIndexerIdAsc = 'ERA_REWARDS_SUM_INDEXER_ID_ASC',
  EraRewardsSumIndexerIdDesc = 'ERA_REWARDS_SUM_INDEXER_ID_DESC',
  EraRewardsSumIsCommissionAsc = 'ERA_REWARDS_SUM_IS_COMMISSION_ASC',
  EraRewardsSumIsCommissionDesc = 'ERA_REWARDS_SUM_IS_COMMISSION_DESC',
  EraRewardsSumIsIndexerAsc = 'ERA_REWARDS_SUM_IS_INDEXER_ASC',
  EraRewardsSumIsIndexerDesc = 'ERA_REWARDS_SUM_IS_INDEXER_DESC',
  EraRewardsVariancePopulationAmountAsc = 'ERA_REWARDS_VARIANCE_POPULATION_AMOUNT_ASC',
  EraRewardsVariancePopulationAmountDesc = 'ERA_REWARDS_VARIANCE_POPULATION_AMOUNT_DESC',
  EraRewardsVariancePopulationBlockRangeAsc = 'ERA_REWARDS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  EraRewardsVariancePopulationBlockRangeDesc = 'ERA_REWARDS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  EraRewardsVariancePopulationClaimedAsc = 'ERA_REWARDS_VARIANCE_POPULATION_CLAIMED_ASC',
  EraRewardsVariancePopulationClaimedDesc = 'ERA_REWARDS_VARIANCE_POPULATION_CLAIMED_DESC',
  EraRewardsVariancePopulationCreatedBlockAsc = 'ERA_REWARDS_VARIANCE_POPULATION_CREATED_BLOCK_ASC',
  EraRewardsVariancePopulationCreatedBlockDesc = 'ERA_REWARDS_VARIANCE_POPULATION_CREATED_BLOCK_DESC',
  EraRewardsVariancePopulationCreatedTimestampAsc = 'ERA_REWARDS_VARIANCE_POPULATION_CREATED_TIMESTAMP_ASC',
  EraRewardsVariancePopulationCreatedTimestampDesc = 'ERA_REWARDS_VARIANCE_POPULATION_CREATED_TIMESTAMP_DESC',
  EraRewardsVariancePopulationDelegatorIdAsc = 'ERA_REWARDS_VARIANCE_POPULATION_DELEGATOR_ID_ASC',
  EraRewardsVariancePopulationDelegatorIdDesc = 'ERA_REWARDS_VARIANCE_POPULATION_DELEGATOR_ID_DESC',
  EraRewardsVariancePopulationEraIdxAsc = 'ERA_REWARDS_VARIANCE_POPULATION_ERA_IDX_ASC',
  EraRewardsVariancePopulationEraIdxDesc = 'ERA_REWARDS_VARIANCE_POPULATION_ERA_IDX_DESC',
  EraRewardsVariancePopulationEraIdAsc = 'ERA_REWARDS_VARIANCE_POPULATION_ERA_ID_ASC',
  EraRewardsVariancePopulationEraIdDesc = 'ERA_REWARDS_VARIANCE_POPULATION_ERA_ID_DESC',
  EraRewardsVariancePopulationIdAsc = 'ERA_REWARDS_VARIANCE_POPULATION_ID_ASC',
  EraRewardsVariancePopulationIdDesc = 'ERA_REWARDS_VARIANCE_POPULATION_ID_DESC',
  EraRewardsVariancePopulationIndexerIdAsc = 'ERA_REWARDS_VARIANCE_POPULATION_INDEXER_ID_ASC',
  EraRewardsVariancePopulationIndexerIdDesc = 'ERA_REWARDS_VARIANCE_POPULATION_INDEXER_ID_DESC',
  EraRewardsVariancePopulationIsCommissionAsc = 'ERA_REWARDS_VARIANCE_POPULATION_IS_COMMISSION_ASC',
  EraRewardsVariancePopulationIsCommissionDesc = 'ERA_REWARDS_VARIANCE_POPULATION_IS_COMMISSION_DESC',
  EraRewardsVariancePopulationIsIndexerAsc = 'ERA_REWARDS_VARIANCE_POPULATION_IS_INDEXER_ASC',
  EraRewardsVariancePopulationIsIndexerDesc = 'ERA_REWARDS_VARIANCE_POPULATION_IS_INDEXER_DESC',
  EraRewardsVarianceSampleAmountAsc = 'ERA_REWARDS_VARIANCE_SAMPLE_AMOUNT_ASC',
  EraRewardsVarianceSampleAmountDesc = 'ERA_REWARDS_VARIANCE_SAMPLE_AMOUNT_DESC',
  EraRewardsVarianceSampleBlockRangeAsc = 'ERA_REWARDS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  EraRewardsVarianceSampleBlockRangeDesc = 'ERA_REWARDS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  EraRewardsVarianceSampleClaimedAsc = 'ERA_REWARDS_VARIANCE_SAMPLE_CLAIMED_ASC',
  EraRewardsVarianceSampleClaimedDesc = 'ERA_REWARDS_VARIANCE_SAMPLE_CLAIMED_DESC',
  EraRewardsVarianceSampleCreatedBlockAsc = 'ERA_REWARDS_VARIANCE_SAMPLE_CREATED_BLOCK_ASC',
  EraRewardsVarianceSampleCreatedBlockDesc = 'ERA_REWARDS_VARIANCE_SAMPLE_CREATED_BLOCK_DESC',
  EraRewardsVarianceSampleCreatedTimestampAsc = 'ERA_REWARDS_VARIANCE_SAMPLE_CREATED_TIMESTAMP_ASC',
  EraRewardsVarianceSampleCreatedTimestampDesc = 'ERA_REWARDS_VARIANCE_SAMPLE_CREATED_TIMESTAMP_DESC',
  EraRewardsVarianceSampleDelegatorIdAsc = 'ERA_REWARDS_VARIANCE_SAMPLE_DELEGATOR_ID_ASC',
  EraRewardsVarianceSampleDelegatorIdDesc = 'ERA_REWARDS_VARIANCE_SAMPLE_DELEGATOR_ID_DESC',
  EraRewardsVarianceSampleEraIdxAsc = 'ERA_REWARDS_VARIANCE_SAMPLE_ERA_IDX_ASC',
  EraRewardsVarianceSampleEraIdxDesc = 'ERA_REWARDS_VARIANCE_SAMPLE_ERA_IDX_DESC',
  EraRewardsVarianceSampleEraIdAsc = 'ERA_REWARDS_VARIANCE_SAMPLE_ERA_ID_ASC',
  EraRewardsVarianceSampleEraIdDesc = 'ERA_REWARDS_VARIANCE_SAMPLE_ERA_ID_DESC',
  EraRewardsVarianceSampleIdAsc = 'ERA_REWARDS_VARIANCE_SAMPLE_ID_ASC',
  EraRewardsVarianceSampleIdDesc = 'ERA_REWARDS_VARIANCE_SAMPLE_ID_DESC',
  EraRewardsVarianceSampleIndexerIdAsc = 'ERA_REWARDS_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  EraRewardsVarianceSampleIndexerIdDesc = 'ERA_REWARDS_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  EraRewardsVarianceSampleIsCommissionAsc = 'ERA_REWARDS_VARIANCE_SAMPLE_IS_COMMISSION_ASC',
  EraRewardsVarianceSampleIsCommissionDesc = 'ERA_REWARDS_VARIANCE_SAMPLE_IS_COMMISSION_DESC',
  EraRewardsVarianceSampleIsIndexerAsc = 'ERA_REWARDS_VARIANCE_SAMPLE_IS_INDEXER_ASC',
  EraRewardsVarianceSampleIsIndexerDesc = 'ERA_REWARDS_VARIANCE_SAMPLE_IS_INDEXER_DESC',
  EraStakesAverageBlockRangeAsc = 'ERA_STAKES_AVERAGE_BLOCK_RANGE_ASC',
  EraStakesAverageBlockRangeDesc = 'ERA_STAKES_AVERAGE_BLOCK_RANGE_DESC',
  EraStakesAverageDelegatorIdAsc = 'ERA_STAKES_AVERAGE_DELEGATOR_ID_ASC',
  EraStakesAverageDelegatorIdDesc = 'ERA_STAKES_AVERAGE_DELEGATOR_ID_DESC',
  EraStakesAverageEraIdxAsc = 'ERA_STAKES_AVERAGE_ERA_IDX_ASC',
  EraStakesAverageEraIdxDesc = 'ERA_STAKES_AVERAGE_ERA_IDX_DESC',
  EraStakesAverageEraIdAsc = 'ERA_STAKES_AVERAGE_ERA_ID_ASC',
  EraStakesAverageEraIdDesc = 'ERA_STAKES_AVERAGE_ERA_ID_DESC',
  EraStakesAverageIdAsc = 'ERA_STAKES_AVERAGE_ID_ASC',
  EraStakesAverageIdDesc = 'ERA_STAKES_AVERAGE_ID_DESC',
  EraStakesAverageIndexerIdAsc = 'ERA_STAKES_AVERAGE_INDEXER_ID_ASC',
  EraStakesAverageIndexerIdDesc = 'ERA_STAKES_AVERAGE_INDEXER_ID_DESC',
  EraStakesAverageStakeAsc = 'ERA_STAKES_AVERAGE_STAKE_ASC',
  EraStakesAverageStakeDesc = 'ERA_STAKES_AVERAGE_STAKE_DESC',
  EraStakesByDelegatorIdCountAsc = 'ERA_STAKES_BY_DELEGATOR_ID__COUNT_ASC',
  EraStakesByDelegatorIdCountDesc = 'ERA_STAKES_BY_DELEGATOR_ID__COUNT_DESC',
  EraStakesCountAsc = 'ERA_STAKES_COUNT_ASC',
  EraStakesCountDesc = 'ERA_STAKES_COUNT_DESC',
  EraStakesDistinctCountBlockRangeAsc = 'ERA_STAKES_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  EraStakesDistinctCountBlockRangeDesc = 'ERA_STAKES_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  EraStakesDistinctCountDelegatorIdAsc = 'ERA_STAKES_DISTINCT_COUNT_DELEGATOR_ID_ASC',
  EraStakesDistinctCountDelegatorIdDesc = 'ERA_STAKES_DISTINCT_COUNT_DELEGATOR_ID_DESC',
  EraStakesDistinctCountEraIdxAsc = 'ERA_STAKES_DISTINCT_COUNT_ERA_IDX_ASC',
  EraStakesDistinctCountEraIdxDesc = 'ERA_STAKES_DISTINCT_COUNT_ERA_IDX_DESC',
  EraStakesDistinctCountEraIdAsc = 'ERA_STAKES_DISTINCT_COUNT_ERA_ID_ASC',
  EraStakesDistinctCountEraIdDesc = 'ERA_STAKES_DISTINCT_COUNT_ERA_ID_DESC',
  EraStakesDistinctCountIdAsc = 'ERA_STAKES_DISTINCT_COUNT_ID_ASC',
  EraStakesDistinctCountIdDesc = 'ERA_STAKES_DISTINCT_COUNT_ID_DESC',
  EraStakesDistinctCountIndexerIdAsc = 'ERA_STAKES_DISTINCT_COUNT_INDEXER_ID_ASC',
  EraStakesDistinctCountIndexerIdDesc = 'ERA_STAKES_DISTINCT_COUNT_INDEXER_ID_DESC',
  EraStakesDistinctCountStakeAsc = 'ERA_STAKES_DISTINCT_COUNT_STAKE_ASC',
  EraStakesDistinctCountStakeDesc = 'ERA_STAKES_DISTINCT_COUNT_STAKE_DESC',
  EraStakesMaxBlockRangeAsc = 'ERA_STAKES_MAX_BLOCK_RANGE_ASC',
  EraStakesMaxBlockRangeDesc = 'ERA_STAKES_MAX_BLOCK_RANGE_DESC',
  EraStakesMaxDelegatorIdAsc = 'ERA_STAKES_MAX_DELEGATOR_ID_ASC',
  EraStakesMaxDelegatorIdDesc = 'ERA_STAKES_MAX_DELEGATOR_ID_DESC',
  EraStakesMaxEraIdxAsc = 'ERA_STAKES_MAX_ERA_IDX_ASC',
  EraStakesMaxEraIdxDesc = 'ERA_STAKES_MAX_ERA_IDX_DESC',
  EraStakesMaxEraIdAsc = 'ERA_STAKES_MAX_ERA_ID_ASC',
  EraStakesMaxEraIdDesc = 'ERA_STAKES_MAX_ERA_ID_DESC',
  EraStakesMaxIdAsc = 'ERA_STAKES_MAX_ID_ASC',
  EraStakesMaxIdDesc = 'ERA_STAKES_MAX_ID_DESC',
  EraStakesMaxIndexerIdAsc = 'ERA_STAKES_MAX_INDEXER_ID_ASC',
  EraStakesMaxIndexerIdDesc = 'ERA_STAKES_MAX_INDEXER_ID_DESC',
  EraStakesMaxStakeAsc = 'ERA_STAKES_MAX_STAKE_ASC',
  EraStakesMaxStakeDesc = 'ERA_STAKES_MAX_STAKE_DESC',
  EraStakesMinBlockRangeAsc = 'ERA_STAKES_MIN_BLOCK_RANGE_ASC',
  EraStakesMinBlockRangeDesc = 'ERA_STAKES_MIN_BLOCK_RANGE_DESC',
  EraStakesMinDelegatorIdAsc = 'ERA_STAKES_MIN_DELEGATOR_ID_ASC',
  EraStakesMinDelegatorIdDesc = 'ERA_STAKES_MIN_DELEGATOR_ID_DESC',
  EraStakesMinEraIdxAsc = 'ERA_STAKES_MIN_ERA_IDX_ASC',
  EraStakesMinEraIdxDesc = 'ERA_STAKES_MIN_ERA_IDX_DESC',
  EraStakesMinEraIdAsc = 'ERA_STAKES_MIN_ERA_ID_ASC',
  EraStakesMinEraIdDesc = 'ERA_STAKES_MIN_ERA_ID_DESC',
  EraStakesMinIdAsc = 'ERA_STAKES_MIN_ID_ASC',
  EraStakesMinIdDesc = 'ERA_STAKES_MIN_ID_DESC',
  EraStakesMinIndexerIdAsc = 'ERA_STAKES_MIN_INDEXER_ID_ASC',
  EraStakesMinIndexerIdDesc = 'ERA_STAKES_MIN_INDEXER_ID_DESC',
  EraStakesMinStakeAsc = 'ERA_STAKES_MIN_STAKE_ASC',
  EraStakesMinStakeDesc = 'ERA_STAKES_MIN_STAKE_DESC',
  EraStakesStddevPopulationBlockRangeAsc = 'ERA_STAKES_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  EraStakesStddevPopulationBlockRangeDesc = 'ERA_STAKES_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  EraStakesStddevPopulationDelegatorIdAsc = 'ERA_STAKES_STDDEV_POPULATION_DELEGATOR_ID_ASC',
  EraStakesStddevPopulationDelegatorIdDesc = 'ERA_STAKES_STDDEV_POPULATION_DELEGATOR_ID_DESC',
  EraStakesStddevPopulationEraIdxAsc = 'ERA_STAKES_STDDEV_POPULATION_ERA_IDX_ASC',
  EraStakesStddevPopulationEraIdxDesc = 'ERA_STAKES_STDDEV_POPULATION_ERA_IDX_DESC',
  EraStakesStddevPopulationEraIdAsc = 'ERA_STAKES_STDDEV_POPULATION_ERA_ID_ASC',
  EraStakesStddevPopulationEraIdDesc = 'ERA_STAKES_STDDEV_POPULATION_ERA_ID_DESC',
  EraStakesStddevPopulationIdAsc = 'ERA_STAKES_STDDEV_POPULATION_ID_ASC',
  EraStakesStddevPopulationIdDesc = 'ERA_STAKES_STDDEV_POPULATION_ID_DESC',
  EraStakesStddevPopulationIndexerIdAsc = 'ERA_STAKES_STDDEV_POPULATION_INDEXER_ID_ASC',
  EraStakesStddevPopulationIndexerIdDesc = 'ERA_STAKES_STDDEV_POPULATION_INDEXER_ID_DESC',
  EraStakesStddevPopulationStakeAsc = 'ERA_STAKES_STDDEV_POPULATION_STAKE_ASC',
  EraStakesStddevPopulationStakeDesc = 'ERA_STAKES_STDDEV_POPULATION_STAKE_DESC',
  EraStakesStddevSampleBlockRangeAsc = 'ERA_STAKES_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  EraStakesStddevSampleBlockRangeDesc = 'ERA_STAKES_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  EraStakesStddevSampleDelegatorIdAsc = 'ERA_STAKES_STDDEV_SAMPLE_DELEGATOR_ID_ASC',
  EraStakesStddevSampleDelegatorIdDesc = 'ERA_STAKES_STDDEV_SAMPLE_DELEGATOR_ID_DESC',
  EraStakesStddevSampleEraIdxAsc = 'ERA_STAKES_STDDEV_SAMPLE_ERA_IDX_ASC',
  EraStakesStddevSampleEraIdxDesc = 'ERA_STAKES_STDDEV_SAMPLE_ERA_IDX_DESC',
  EraStakesStddevSampleEraIdAsc = 'ERA_STAKES_STDDEV_SAMPLE_ERA_ID_ASC',
  EraStakesStddevSampleEraIdDesc = 'ERA_STAKES_STDDEV_SAMPLE_ERA_ID_DESC',
  EraStakesStddevSampleIdAsc = 'ERA_STAKES_STDDEV_SAMPLE_ID_ASC',
  EraStakesStddevSampleIdDesc = 'ERA_STAKES_STDDEV_SAMPLE_ID_DESC',
  EraStakesStddevSampleIndexerIdAsc = 'ERA_STAKES_STDDEV_SAMPLE_INDEXER_ID_ASC',
  EraStakesStddevSampleIndexerIdDesc = 'ERA_STAKES_STDDEV_SAMPLE_INDEXER_ID_DESC',
  EraStakesStddevSampleStakeAsc = 'ERA_STAKES_STDDEV_SAMPLE_STAKE_ASC',
  EraStakesStddevSampleStakeDesc = 'ERA_STAKES_STDDEV_SAMPLE_STAKE_DESC',
  EraStakesSumBlockRangeAsc = 'ERA_STAKES_SUM_BLOCK_RANGE_ASC',
  EraStakesSumBlockRangeDesc = 'ERA_STAKES_SUM_BLOCK_RANGE_DESC',
  EraStakesSumDelegatorIdAsc = 'ERA_STAKES_SUM_DELEGATOR_ID_ASC',
  EraStakesSumDelegatorIdDesc = 'ERA_STAKES_SUM_DELEGATOR_ID_DESC',
  EraStakesSumEraIdxAsc = 'ERA_STAKES_SUM_ERA_IDX_ASC',
  EraStakesSumEraIdxDesc = 'ERA_STAKES_SUM_ERA_IDX_DESC',
  EraStakesSumEraIdAsc = 'ERA_STAKES_SUM_ERA_ID_ASC',
  EraStakesSumEraIdDesc = 'ERA_STAKES_SUM_ERA_ID_DESC',
  EraStakesSumIdAsc = 'ERA_STAKES_SUM_ID_ASC',
  EraStakesSumIdDesc = 'ERA_STAKES_SUM_ID_DESC',
  EraStakesSumIndexerIdAsc = 'ERA_STAKES_SUM_INDEXER_ID_ASC',
  EraStakesSumIndexerIdDesc = 'ERA_STAKES_SUM_INDEXER_ID_DESC',
  EraStakesSumStakeAsc = 'ERA_STAKES_SUM_STAKE_ASC',
  EraStakesSumStakeDesc = 'ERA_STAKES_SUM_STAKE_DESC',
  EraStakesVariancePopulationBlockRangeAsc = 'ERA_STAKES_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  EraStakesVariancePopulationBlockRangeDesc = 'ERA_STAKES_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  EraStakesVariancePopulationDelegatorIdAsc = 'ERA_STAKES_VARIANCE_POPULATION_DELEGATOR_ID_ASC',
  EraStakesVariancePopulationDelegatorIdDesc = 'ERA_STAKES_VARIANCE_POPULATION_DELEGATOR_ID_DESC',
  EraStakesVariancePopulationEraIdxAsc = 'ERA_STAKES_VARIANCE_POPULATION_ERA_IDX_ASC',
  EraStakesVariancePopulationEraIdxDesc = 'ERA_STAKES_VARIANCE_POPULATION_ERA_IDX_DESC',
  EraStakesVariancePopulationEraIdAsc = 'ERA_STAKES_VARIANCE_POPULATION_ERA_ID_ASC',
  EraStakesVariancePopulationEraIdDesc = 'ERA_STAKES_VARIANCE_POPULATION_ERA_ID_DESC',
  EraStakesVariancePopulationIdAsc = 'ERA_STAKES_VARIANCE_POPULATION_ID_ASC',
  EraStakesVariancePopulationIdDesc = 'ERA_STAKES_VARIANCE_POPULATION_ID_DESC',
  EraStakesVariancePopulationIndexerIdAsc = 'ERA_STAKES_VARIANCE_POPULATION_INDEXER_ID_ASC',
  EraStakesVariancePopulationIndexerIdDesc = 'ERA_STAKES_VARIANCE_POPULATION_INDEXER_ID_DESC',
  EraStakesVariancePopulationStakeAsc = 'ERA_STAKES_VARIANCE_POPULATION_STAKE_ASC',
  EraStakesVariancePopulationStakeDesc = 'ERA_STAKES_VARIANCE_POPULATION_STAKE_DESC',
  EraStakesVarianceSampleBlockRangeAsc = 'ERA_STAKES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  EraStakesVarianceSampleBlockRangeDesc = 'ERA_STAKES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  EraStakesVarianceSampleDelegatorIdAsc = 'ERA_STAKES_VARIANCE_SAMPLE_DELEGATOR_ID_ASC',
  EraStakesVarianceSampleDelegatorIdDesc = 'ERA_STAKES_VARIANCE_SAMPLE_DELEGATOR_ID_DESC',
  EraStakesVarianceSampleEraIdxAsc = 'ERA_STAKES_VARIANCE_SAMPLE_ERA_IDX_ASC',
  EraStakesVarianceSampleEraIdxDesc = 'ERA_STAKES_VARIANCE_SAMPLE_ERA_IDX_DESC',
  EraStakesVarianceSampleEraIdAsc = 'ERA_STAKES_VARIANCE_SAMPLE_ERA_ID_ASC',
  EraStakesVarianceSampleEraIdDesc = 'ERA_STAKES_VARIANCE_SAMPLE_ERA_ID_DESC',
  EraStakesVarianceSampleIdAsc = 'ERA_STAKES_VARIANCE_SAMPLE_ID_ASC',
  EraStakesVarianceSampleIdDesc = 'ERA_STAKES_VARIANCE_SAMPLE_ID_DESC',
  EraStakesVarianceSampleIndexerIdAsc = 'ERA_STAKES_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  EraStakesVarianceSampleIndexerIdDesc = 'ERA_STAKES_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  EraStakesVarianceSampleStakeAsc = 'ERA_STAKES_VARIANCE_SAMPLE_STAKE_ASC',
  EraStakesVarianceSampleStakeDesc = 'ERA_STAKES_VARIANCE_SAMPLE_STAKE_DESC',
  ExitEraAsc = 'EXIT_ERA_ASC',
  ExitEraDesc = 'EXIT_ERA_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  LastEventAsc = 'LAST_EVENT_ASC',
  LastEventDesc = 'LAST_EVENT_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  RewardsByDelegatorIdCountAsc = 'REWARDS_BY_DELEGATOR_ID__COUNT_ASC',
  RewardsByDelegatorIdCountDesc = 'REWARDS_BY_DELEGATOR_ID__COUNT_DESC',
  StartEraAsc = 'START_ERA_ASC',
  StartEraDesc = 'START_ERA_DESC',
  TotalDelegationsAsc = 'TOTAL_DELEGATIONS_ASC',
  TotalDelegationsDesc = 'TOTAL_DELEGATIONS_DESC',
  UnclaimedRewardsAverageAmountAsc = 'UNCLAIMED_REWARDS_AVERAGE_AMOUNT_ASC',
  UnclaimedRewardsAverageAmountDesc = 'UNCLAIMED_REWARDS_AVERAGE_AMOUNT_DESC',
  UnclaimedRewardsAverageBlockRangeAsc = 'UNCLAIMED_REWARDS_AVERAGE_BLOCK_RANGE_ASC',
  UnclaimedRewardsAverageBlockRangeDesc = 'UNCLAIMED_REWARDS_AVERAGE_BLOCK_RANGE_DESC',
  UnclaimedRewardsAverageCreatedBlockAsc = 'UNCLAIMED_REWARDS_AVERAGE_CREATED_BLOCK_ASC',
  UnclaimedRewardsAverageCreatedBlockDesc = 'UNCLAIMED_REWARDS_AVERAGE_CREATED_BLOCK_DESC',
  UnclaimedRewardsAverageDelegatorAddressAsc = 'UNCLAIMED_REWARDS_AVERAGE_DELEGATOR_ADDRESS_ASC',
  UnclaimedRewardsAverageDelegatorAddressDesc = 'UNCLAIMED_REWARDS_AVERAGE_DELEGATOR_ADDRESS_DESC',
  UnclaimedRewardsAverageDelegatorIdAsc = 'UNCLAIMED_REWARDS_AVERAGE_DELEGATOR_ID_ASC',
  UnclaimedRewardsAverageDelegatorIdDesc = 'UNCLAIMED_REWARDS_AVERAGE_DELEGATOR_ID_DESC',
  UnclaimedRewardsAverageIdAsc = 'UNCLAIMED_REWARDS_AVERAGE_ID_ASC',
  UnclaimedRewardsAverageIdDesc = 'UNCLAIMED_REWARDS_AVERAGE_ID_DESC',
  UnclaimedRewardsAverageIndexerAddressAsc = 'UNCLAIMED_REWARDS_AVERAGE_INDEXER_ADDRESS_ASC',
  UnclaimedRewardsAverageIndexerAddressDesc = 'UNCLAIMED_REWARDS_AVERAGE_INDEXER_ADDRESS_DESC',
  UnclaimedRewardsAverageLastEventAsc = 'UNCLAIMED_REWARDS_AVERAGE_LAST_EVENT_ASC',
  UnclaimedRewardsAverageLastEventDesc = 'UNCLAIMED_REWARDS_AVERAGE_LAST_EVENT_DESC',
  UnclaimedRewardsByDelegatorIdCountAsc = 'UNCLAIMED_REWARDS_BY_DELEGATOR_ID__COUNT_ASC',
  UnclaimedRewardsByDelegatorIdCountDesc = 'UNCLAIMED_REWARDS_BY_DELEGATOR_ID__COUNT_DESC',
  UnclaimedRewardsCountAsc = 'UNCLAIMED_REWARDS_COUNT_ASC',
  UnclaimedRewardsCountDesc = 'UNCLAIMED_REWARDS_COUNT_DESC',
  UnclaimedRewardsDistinctCountAmountAsc = 'UNCLAIMED_REWARDS_DISTINCT_COUNT_AMOUNT_ASC',
  UnclaimedRewardsDistinctCountAmountDesc = 'UNCLAIMED_REWARDS_DISTINCT_COUNT_AMOUNT_DESC',
  UnclaimedRewardsDistinctCountBlockRangeAsc = 'UNCLAIMED_REWARDS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  UnclaimedRewardsDistinctCountBlockRangeDesc = 'UNCLAIMED_REWARDS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  UnclaimedRewardsDistinctCountCreatedBlockAsc = 'UNCLAIMED_REWARDS_DISTINCT_COUNT_CREATED_BLOCK_ASC',
  UnclaimedRewardsDistinctCountCreatedBlockDesc = 'UNCLAIMED_REWARDS_DISTINCT_COUNT_CREATED_BLOCK_DESC',
  UnclaimedRewardsDistinctCountDelegatorAddressAsc = 'UNCLAIMED_REWARDS_DISTINCT_COUNT_DELEGATOR_ADDRESS_ASC',
  UnclaimedRewardsDistinctCountDelegatorAddressDesc = 'UNCLAIMED_REWARDS_DISTINCT_COUNT_DELEGATOR_ADDRESS_DESC',
  UnclaimedRewardsDistinctCountDelegatorIdAsc = 'UNCLAIMED_REWARDS_DISTINCT_COUNT_DELEGATOR_ID_ASC',
  UnclaimedRewardsDistinctCountDelegatorIdDesc = 'UNCLAIMED_REWARDS_DISTINCT_COUNT_DELEGATOR_ID_DESC',
  UnclaimedRewardsDistinctCountIdAsc = 'UNCLAIMED_REWARDS_DISTINCT_COUNT_ID_ASC',
  UnclaimedRewardsDistinctCountIdDesc = 'UNCLAIMED_REWARDS_DISTINCT_COUNT_ID_DESC',
  UnclaimedRewardsDistinctCountIndexerAddressAsc = 'UNCLAIMED_REWARDS_DISTINCT_COUNT_INDEXER_ADDRESS_ASC',
  UnclaimedRewardsDistinctCountIndexerAddressDesc = 'UNCLAIMED_REWARDS_DISTINCT_COUNT_INDEXER_ADDRESS_DESC',
  UnclaimedRewardsDistinctCountLastEventAsc = 'UNCLAIMED_REWARDS_DISTINCT_COUNT_LAST_EVENT_ASC',
  UnclaimedRewardsDistinctCountLastEventDesc = 'UNCLAIMED_REWARDS_DISTINCT_COUNT_LAST_EVENT_DESC',
  UnclaimedRewardsMaxAmountAsc = 'UNCLAIMED_REWARDS_MAX_AMOUNT_ASC',
  UnclaimedRewardsMaxAmountDesc = 'UNCLAIMED_REWARDS_MAX_AMOUNT_DESC',
  UnclaimedRewardsMaxBlockRangeAsc = 'UNCLAIMED_REWARDS_MAX_BLOCK_RANGE_ASC',
  UnclaimedRewardsMaxBlockRangeDesc = 'UNCLAIMED_REWARDS_MAX_BLOCK_RANGE_DESC',
  UnclaimedRewardsMaxCreatedBlockAsc = 'UNCLAIMED_REWARDS_MAX_CREATED_BLOCK_ASC',
  UnclaimedRewardsMaxCreatedBlockDesc = 'UNCLAIMED_REWARDS_MAX_CREATED_BLOCK_DESC',
  UnclaimedRewardsMaxDelegatorAddressAsc = 'UNCLAIMED_REWARDS_MAX_DELEGATOR_ADDRESS_ASC',
  UnclaimedRewardsMaxDelegatorAddressDesc = 'UNCLAIMED_REWARDS_MAX_DELEGATOR_ADDRESS_DESC',
  UnclaimedRewardsMaxDelegatorIdAsc = 'UNCLAIMED_REWARDS_MAX_DELEGATOR_ID_ASC',
  UnclaimedRewardsMaxDelegatorIdDesc = 'UNCLAIMED_REWARDS_MAX_DELEGATOR_ID_DESC',
  UnclaimedRewardsMaxIdAsc = 'UNCLAIMED_REWARDS_MAX_ID_ASC',
  UnclaimedRewardsMaxIdDesc = 'UNCLAIMED_REWARDS_MAX_ID_DESC',
  UnclaimedRewardsMaxIndexerAddressAsc = 'UNCLAIMED_REWARDS_MAX_INDEXER_ADDRESS_ASC',
  UnclaimedRewardsMaxIndexerAddressDesc = 'UNCLAIMED_REWARDS_MAX_INDEXER_ADDRESS_DESC',
  UnclaimedRewardsMaxLastEventAsc = 'UNCLAIMED_REWARDS_MAX_LAST_EVENT_ASC',
  UnclaimedRewardsMaxLastEventDesc = 'UNCLAIMED_REWARDS_MAX_LAST_EVENT_DESC',
  UnclaimedRewardsMinAmountAsc = 'UNCLAIMED_REWARDS_MIN_AMOUNT_ASC',
  UnclaimedRewardsMinAmountDesc = 'UNCLAIMED_REWARDS_MIN_AMOUNT_DESC',
  UnclaimedRewardsMinBlockRangeAsc = 'UNCLAIMED_REWARDS_MIN_BLOCK_RANGE_ASC',
  UnclaimedRewardsMinBlockRangeDesc = 'UNCLAIMED_REWARDS_MIN_BLOCK_RANGE_DESC',
  UnclaimedRewardsMinCreatedBlockAsc = 'UNCLAIMED_REWARDS_MIN_CREATED_BLOCK_ASC',
  UnclaimedRewardsMinCreatedBlockDesc = 'UNCLAIMED_REWARDS_MIN_CREATED_BLOCK_DESC',
  UnclaimedRewardsMinDelegatorAddressAsc = 'UNCLAIMED_REWARDS_MIN_DELEGATOR_ADDRESS_ASC',
  UnclaimedRewardsMinDelegatorAddressDesc = 'UNCLAIMED_REWARDS_MIN_DELEGATOR_ADDRESS_DESC',
  UnclaimedRewardsMinDelegatorIdAsc = 'UNCLAIMED_REWARDS_MIN_DELEGATOR_ID_ASC',
  UnclaimedRewardsMinDelegatorIdDesc = 'UNCLAIMED_REWARDS_MIN_DELEGATOR_ID_DESC',
  UnclaimedRewardsMinIdAsc = 'UNCLAIMED_REWARDS_MIN_ID_ASC',
  UnclaimedRewardsMinIdDesc = 'UNCLAIMED_REWARDS_MIN_ID_DESC',
  UnclaimedRewardsMinIndexerAddressAsc = 'UNCLAIMED_REWARDS_MIN_INDEXER_ADDRESS_ASC',
  UnclaimedRewardsMinIndexerAddressDesc = 'UNCLAIMED_REWARDS_MIN_INDEXER_ADDRESS_DESC',
  UnclaimedRewardsMinLastEventAsc = 'UNCLAIMED_REWARDS_MIN_LAST_EVENT_ASC',
  UnclaimedRewardsMinLastEventDesc = 'UNCLAIMED_REWARDS_MIN_LAST_EVENT_DESC',
  UnclaimedRewardsStddevPopulationAmountAsc = 'UNCLAIMED_REWARDS_STDDEV_POPULATION_AMOUNT_ASC',
  UnclaimedRewardsStddevPopulationAmountDesc = 'UNCLAIMED_REWARDS_STDDEV_POPULATION_AMOUNT_DESC',
  UnclaimedRewardsStddevPopulationBlockRangeAsc = 'UNCLAIMED_REWARDS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  UnclaimedRewardsStddevPopulationBlockRangeDesc = 'UNCLAIMED_REWARDS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  UnclaimedRewardsStddevPopulationCreatedBlockAsc = 'UNCLAIMED_REWARDS_STDDEV_POPULATION_CREATED_BLOCK_ASC',
  UnclaimedRewardsStddevPopulationCreatedBlockDesc = 'UNCLAIMED_REWARDS_STDDEV_POPULATION_CREATED_BLOCK_DESC',
  UnclaimedRewardsStddevPopulationDelegatorAddressAsc = 'UNCLAIMED_REWARDS_STDDEV_POPULATION_DELEGATOR_ADDRESS_ASC',
  UnclaimedRewardsStddevPopulationDelegatorAddressDesc = 'UNCLAIMED_REWARDS_STDDEV_POPULATION_DELEGATOR_ADDRESS_DESC',
  UnclaimedRewardsStddevPopulationDelegatorIdAsc = 'UNCLAIMED_REWARDS_STDDEV_POPULATION_DELEGATOR_ID_ASC',
  UnclaimedRewardsStddevPopulationDelegatorIdDesc = 'UNCLAIMED_REWARDS_STDDEV_POPULATION_DELEGATOR_ID_DESC',
  UnclaimedRewardsStddevPopulationIdAsc = 'UNCLAIMED_REWARDS_STDDEV_POPULATION_ID_ASC',
  UnclaimedRewardsStddevPopulationIdDesc = 'UNCLAIMED_REWARDS_STDDEV_POPULATION_ID_DESC',
  UnclaimedRewardsStddevPopulationIndexerAddressAsc = 'UNCLAIMED_REWARDS_STDDEV_POPULATION_INDEXER_ADDRESS_ASC',
  UnclaimedRewardsStddevPopulationIndexerAddressDesc = 'UNCLAIMED_REWARDS_STDDEV_POPULATION_INDEXER_ADDRESS_DESC',
  UnclaimedRewardsStddevPopulationLastEventAsc = 'UNCLAIMED_REWARDS_STDDEV_POPULATION_LAST_EVENT_ASC',
  UnclaimedRewardsStddevPopulationLastEventDesc = 'UNCLAIMED_REWARDS_STDDEV_POPULATION_LAST_EVENT_DESC',
  UnclaimedRewardsStddevSampleAmountAsc = 'UNCLAIMED_REWARDS_STDDEV_SAMPLE_AMOUNT_ASC',
  UnclaimedRewardsStddevSampleAmountDesc = 'UNCLAIMED_REWARDS_STDDEV_SAMPLE_AMOUNT_DESC',
  UnclaimedRewardsStddevSampleBlockRangeAsc = 'UNCLAIMED_REWARDS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  UnclaimedRewardsStddevSampleBlockRangeDesc = 'UNCLAIMED_REWARDS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  UnclaimedRewardsStddevSampleCreatedBlockAsc = 'UNCLAIMED_REWARDS_STDDEV_SAMPLE_CREATED_BLOCK_ASC',
  UnclaimedRewardsStddevSampleCreatedBlockDesc = 'UNCLAIMED_REWARDS_STDDEV_SAMPLE_CREATED_BLOCK_DESC',
  UnclaimedRewardsStddevSampleDelegatorAddressAsc = 'UNCLAIMED_REWARDS_STDDEV_SAMPLE_DELEGATOR_ADDRESS_ASC',
  UnclaimedRewardsStddevSampleDelegatorAddressDesc = 'UNCLAIMED_REWARDS_STDDEV_SAMPLE_DELEGATOR_ADDRESS_DESC',
  UnclaimedRewardsStddevSampleDelegatorIdAsc = 'UNCLAIMED_REWARDS_STDDEV_SAMPLE_DELEGATOR_ID_ASC',
  UnclaimedRewardsStddevSampleDelegatorIdDesc = 'UNCLAIMED_REWARDS_STDDEV_SAMPLE_DELEGATOR_ID_DESC',
  UnclaimedRewardsStddevSampleIdAsc = 'UNCLAIMED_REWARDS_STDDEV_SAMPLE_ID_ASC',
  UnclaimedRewardsStddevSampleIdDesc = 'UNCLAIMED_REWARDS_STDDEV_SAMPLE_ID_DESC',
  UnclaimedRewardsStddevSampleIndexerAddressAsc = 'UNCLAIMED_REWARDS_STDDEV_SAMPLE_INDEXER_ADDRESS_ASC',
  UnclaimedRewardsStddevSampleIndexerAddressDesc = 'UNCLAIMED_REWARDS_STDDEV_SAMPLE_INDEXER_ADDRESS_DESC',
  UnclaimedRewardsStddevSampleLastEventAsc = 'UNCLAIMED_REWARDS_STDDEV_SAMPLE_LAST_EVENT_ASC',
  UnclaimedRewardsStddevSampleLastEventDesc = 'UNCLAIMED_REWARDS_STDDEV_SAMPLE_LAST_EVENT_DESC',
  UnclaimedRewardsSumAmountAsc = 'UNCLAIMED_REWARDS_SUM_AMOUNT_ASC',
  UnclaimedRewardsSumAmountDesc = 'UNCLAIMED_REWARDS_SUM_AMOUNT_DESC',
  UnclaimedRewardsSumBlockRangeAsc = 'UNCLAIMED_REWARDS_SUM_BLOCK_RANGE_ASC',
  UnclaimedRewardsSumBlockRangeDesc = 'UNCLAIMED_REWARDS_SUM_BLOCK_RANGE_DESC',
  UnclaimedRewardsSumCreatedBlockAsc = 'UNCLAIMED_REWARDS_SUM_CREATED_BLOCK_ASC',
  UnclaimedRewardsSumCreatedBlockDesc = 'UNCLAIMED_REWARDS_SUM_CREATED_BLOCK_DESC',
  UnclaimedRewardsSumDelegatorAddressAsc = 'UNCLAIMED_REWARDS_SUM_DELEGATOR_ADDRESS_ASC',
  UnclaimedRewardsSumDelegatorAddressDesc = 'UNCLAIMED_REWARDS_SUM_DELEGATOR_ADDRESS_DESC',
  UnclaimedRewardsSumDelegatorIdAsc = 'UNCLAIMED_REWARDS_SUM_DELEGATOR_ID_ASC',
  UnclaimedRewardsSumDelegatorIdDesc = 'UNCLAIMED_REWARDS_SUM_DELEGATOR_ID_DESC',
  UnclaimedRewardsSumIdAsc = 'UNCLAIMED_REWARDS_SUM_ID_ASC',
  UnclaimedRewardsSumIdDesc = 'UNCLAIMED_REWARDS_SUM_ID_DESC',
  UnclaimedRewardsSumIndexerAddressAsc = 'UNCLAIMED_REWARDS_SUM_INDEXER_ADDRESS_ASC',
  UnclaimedRewardsSumIndexerAddressDesc = 'UNCLAIMED_REWARDS_SUM_INDEXER_ADDRESS_DESC',
  UnclaimedRewardsSumLastEventAsc = 'UNCLAIMED_REWARDS_SUM_LAST_EVENT_ASC',
  UnclaimedRewardsSumLastEventDesc = 'UNCLAIMED_REWARDS_SUM_LAST_EVENT_DESC',
  UnclaimedRewardsVariancePopulationAmountAsc = 'UNCLAIMED_REWARDS_VARIANCE_POPULATION_AMOUNT_ASC',
  UnclaimedRewardsVariancePopulationAmountDesc = 'UNCLAIMED_REWARDS_VARIANCE_POPULATION_AMOUNT_DESC',
  UnclaimedRewardsVariancePopulationBlockRangeAsc = 'UNCLAIMED_REWARDS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  UnclaimedRewardsVariancePopulationBlockRangeDesc = 'UNCLAIMED_REWARDS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  UnclaimedRewardsVariancePopulationCreatedBlockAsc = 'UNCLAIMED_REWARDS_VARIANCE_POPULATION_CREATED_BLOCK_ASC',
  UnclaimedRewardsVariancePopulationCreatedBlockDesc = 'UNCLAIMED_REWARDS_VARIANCE_POPULATION_CREATED_BLOCK_DESC',
  UnclaimedRewardsVariancePopulationDelegatorAddressAsc = 'UNCLAIMED_REWARDS_VARIANCE_POPULATION_DELEGATOR_ADDRESS_ASC',
  UnclaimedRewardsVariancePopulationDelegatorAddressDesc = 'UNCLAIMED_REWARDS_VARIANCE_POPULATION_DELEGATOR_ADDRESS_DESC',
  UnclaimedRewardsVariancePopulationDelegatorIdAsc = 'UNCLAIMED_REWARDS_VARIANCE_POPULATION_DELEGATOR_ID_ASC',
  UnclaimedRewardsVariancePopulationDelegatorIdDesc = 'UNCLAIMED_REWARDS_VARIANCE_POPULATION_DELEGATOR_ID_DESC',
  UnclaimedRewardsVariancePopulationIdAsc = 'UNCLAIMED_REWARDS_VARIANCE_POPULATION_ID_ASC',
  UnclaimedRewardsVariancePopulationIdDesc = 'UNCLAIMED_REWARDS_VARIANCE_POPULATION_ID_DESC',
  UnclaimedRewardsVariancePopulationIndexerAddressAsc = 'UNCLAIMED_REWARDS_VARIANCE_POPULATION_INDEXER_ADDRESS_ASC',
  UnclaimedRewardsVariancePopulationIndexerAddressDesc = 'UNCLAIMED_REWARDS_VARIANCE_POPULATION_INDEXER_ADDRESS_DESC',
  UnclaimedRewardsVariancePopulationLastEventAsc = 'UNCLAIMED_REWARDS_VARIANCE_POPULATION_LAST_EVENT_ASC',
  UnclaimedRewardsVariancePopulationLastEventDesc = 'UNCLAIMED_REWARDS_VARIANCE_POPULATION_LAST_EVENT_DESC',
  UnclaimedRewardsVarianceSampleAmountAsc = 'UNCLAIMED_REWARDS_VARIANCE_SAMPLE_AMOUNT_ASC',
  UnclaimedRewardsVarianceSampleAmountDesc = 'UNCLAIMED_REWARDS_VARIANCE_SAMPLE_AMOUNT_DESC',
  UnclaimedRewardsVarianceSampleBlockRangeAsc = 'UNCLAIMED_REWARDS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  UnclaimedRewardsVarianceSampleBlockRangeDesc = 'UNCLAIMED_REWARDS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  UnclaimedRewardsVarianceSampleCreatedBlockAsc = 'UNCLAIMED_REWARDS_VARIANCE_SAMPLE_CREATED_BLOCK_ASC',
  UnclaimedRewardsVarianceSampleCreatedBlockDesc = 'UNCLAIMED_REWARDS_VARIANCE_SAMPLE_CREATED_BLOCK_DESC',
  UnclaimedRewardsVarianceSampleDelegatorAddressAsc = 'UNCLAIMED_REWARDS_VARIANCE_SAMPLE_DELEGATOR_ADDRESS_ASC',
  UnclaimedRewardsVarianceSampleDelegatorAddressDesc = 'UNCLAIMED_REWARDS_VARIANCE_SAMPLE_DELEGATOR_ADDRESS_DESC',
  UnclaimedRewardsVarianceSampleDelegatorIdAsc = 'UNCLAIMED_REWARDS_VARIANCE_SAMPLE_DELEGATOR_ID_ASC',
  UnclaimedRewardsVarianceSampleDelegatorIdDesc = 'UNCLAIMED_REWARDS_VARIANCE_SAMPLE_DELEGATOR_ID_DESC',
  UnclaimedRewardsVarianceSampleIdAsc = 'UNCLAIMED_REWARDS_VARIANCE_SAMPLE_ID_ASC',
  UnclaimedRewardsVarianceSampleIdDesc = 'UNCLAIMED_REWARDS_VARIANCE_SAMPLE_ID_DESC',
  UnclaimedRewardsVarianceSampleIndexerAddressAsc = 'UNCLAIMED_REWARDS_VARIANCE_SAMPLE_INDEXER_ADDRESS_ASC',
  UnclaimedRewardsVarianceSampleIndexerAddressDesc = 'UNCLAIMED_REWARDS_VARIANCE_SAMPLE_INDEXER_ADDRESS_DESC',
  UnclaimedRewardsVarianceSampleLastEventAsc = 'UNCLAIMED_REWARDS_VARIANCE_SAMPLE_LAST_EVENT_ASC',
  UnclaimedRewardsVarianceSampleLastEventDesc = 'UNCLAIMED_REWARDS_VARIANCE_SAMPLE_LAST_EVENT_DESC'
}

export type Deployment = Node & {
  __typename?: 'Deployment';
  /** Reads and enables pagination through a set of `ConsumerQueryRewardSummary`. */
  consumerQueryRewardSummaries: ConsumerQueryRewardSummariesConnection;
  /** Reads and enables pagination through a set of `ConsumerQueryReward`. */
  consumerQueryRewards: ConsumerQueryRewardsConnection;
  createdBlock?: Maybe<Scalars['Int']['output']>;
  createdTimestamp: Scalars['Datetime']['output'];
  /** Reads and enables pagination through a set of `DeploymentBoosterSummary`. */
  deploymentBoosterSummaries: DeploymentBoosterSummariesConnection;
  /** Reads and enables pagination through a set of `DeploymentBooster`. */
  deploymentBoosters: DeploymentBoostersConnection;
  /** Reads and enables pagination through a set of `EraIndexerDeploymentApy`. */
  eraIndexerDeploymentApies: EraIndexerDeploymentApiesConnection;
  id: Scalars['String']['output'];
  /** Reads and enables pagination through a set of `IndexerAllocationRewardSummary`. */
  indexerAllocationRewardSummaries: IndexerAllocationRewardSummariesConnection;
  /** Reads and enables pagination through a set of `IndexerAllocationReward`. */
  indexerAllocationRewards: IndexerAllocationRewardsConnection;
  /** Reads and enables pagination through a set of `IndexerAllocationSummary`. */
  indexerAllocationSummaries: IndexerAllocationSummariesConnection;
  /** Reads and enables pagination through a set of `IndexerAllocation`. */
  indexerAllocations: IndexerAllocationsConnection;
  /** Reads and enables pagination through a set of `IndexerMissedLabor`. */
  indexerMissedLabors: IndexerMissedLaborsConnection;
  /** Reads and enables pagination through a set of `IndexerDeployment`. */
  indexers: IndexerDeploymentsConnection;
  /** Reads and enables pagination through a set of `Indexer`. */
  indexersByEraIndexerDeploymentApyDeploymentIdAndIndexerId: DeploymentIndexersByEraIndexerDeploymentApyDeploymentIdAndIndexerIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Indexer`. */
  indexersByIndexerAllocationDeploymentIdAndIndexerId: DeploymentIndexersByIndexerAllocationDeploymentIdAndIndexerIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Indexer`. */
  indexersByIndexerAllocationRewardDeploymentIdAndIndexerId: DeploymentIndexersByIndexerAllocationRewardDeploymentIdAndIndexerIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Indexer`. */
  indexersByIndexerAllocationRewardSummaryDeploymentIdAndIndexerId: DeploymentIndexersByIndexerAllocationRewardSummaryDeploymentIdAndIndexerIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Indexer`. */
  indexersByIndexerAllocationSummaryDeploymentIdAndIndexerId: DeploymentIndexersByIndexerAllocationSummaryDeploymentIdAndIndexerIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Indexer`. */
  indexersByIndexerDeploymentDeploymentIdAndIndexerId: DeploymentIndexersByIndexerDeploymentDeploymentIdAndIndexerIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Indexer`. */
  indexersByIndexerMissedLaborDeploymentIdAndIndexerId: DeploymentIndexersByIndexerMissedLaborDeploymentIdAndIndexerIdManyToManyConnection;
  lastEvent?: Maybe<Scalars['String']['output']>;
  metadata: Scalars['String']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  /** Reads and enables pagination through a set of `Offer`. */
  offers: OffersConnection;
  /** Reads and enables pagination through a set of `PlanTemplate`. */
  planTemplatesByOfferDeploymentIdAndPlanTemplateId: DeploymentPlanTemplatesByOfferDeploymentIdAndPlanTemplateIdManyToManyConnection;
  /** Reads and enables pagination through a set of `PlanTemplate`. */
  planTemplatesByPlanDeploymentIdAndPlanTemplateId: DeploymentPlanTemplatesByPlanDeploymentIdAndPlanTemplateIdManyToManyConnection;
  /** Reads and enables pagination through a set of `PlanTemplate`. */
  planTemplatesByServiceAgreementDeploymentIdAndPlanTemplateId: DeploymentPlanTemplatesByServiceAgreementDeploymentIdAndPlanTemplateIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Plan`. */
  plans: PlansConnection;
  /** Reads a single `Project` that is related to this `Deployment`. */
  project?: Maybe<Project>;
  projectId: Scalars['String']['output'];
  /** Reads and enables pagination through a set of `Project`. */
  projectsByConsumerQueryRewardDeploymentIdAndProjectId: DeploymentProjectsByConsumerQueryRewardDeploymentIdAndProjectIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Project`. */
  projectsByConsumerQueryRewardSummaryDeploymentIdAndProjectId: DeploymentProjectsByConsumerQueryRewardSummaryDeploymentIdAndProjectIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Project`. */
  projectsByDeploymentBoosterDeploymentIdAndProjectId: DeploymentProjectsByDeploymentBoosterDeploymentIdAndProjectIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Project`. */
  projectsByDeploymentBoosterSummaryDeploymentIdAndProjectId: DeploymentProjectsByDeploymentBoosterSummaryDeploymentIdAndProjectIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Project`. */
  projectsByIndexerAllocationDeploymentIdAndProjectId: DeploymentProjectsByIndexerAllocationDeploymentIdAndProjectIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Project`. */
  projectsByIndexerAllocationRewardDeploymentIdAndProjectId: DeploymentProjectsByIndexerAllocationRewardDeploymentIdAndProjectIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Project`. */
  projectsByIndexerAllocationRewardSummaryDeploymentIdAndProjectId: DeploymentProjectsByIndexerAllocationRewardSummaryDeploymentIdAndProjectIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Project`. */
  projectsByIndexerAllocationSummaryDeploymentIdAndProjectId: DeploymentProjectsByIndexerAllocationSummaryDeploymentIdAndProjectIdManyToManyConnection;
  /** Reads and enables pagination through a set of `ServiceAgreement`. */
  serviceAgreements: ServiceAgreementsConnection;
  /** Reads and enables pagination through a set of `StateChannel`. */
  stateChannels: StateChannelsConnection;
};


export type DeploymentConsumerQueryRewardSummariesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Consumer_Query_Reward_Summaries_Distinct_Enum>>>;
  filter?: InputMaybe<ConsumerQueryRewardSummaryFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ConsumerQueryRewardSummariesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type DeploymentConsumerQueryRewardsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Consumer_Query_Rewards_Distinct_Enum>>>;
  filter?: InputMaybe<ConsumerQueryRewardFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ConsumerQueryRewardsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type DeploymentDeploymentBoosterSummariesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Deployment_Booster_Summaries_Distinct_Enum>>>;
  filter?: InputMaybe<DeploymentBoosterSummaryFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<DeploymentBoosterSummariesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type DeploymentDeploymentBoostersArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Deployment_Boosters_Distinct_Enum>>>;
  filter?: InputMaybe<DeploymentBoosterFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<DeploymentBoostersOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type DeploymentEraIndexerDeploymentApiesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Era_Indexer_Deployment_Apies_Distinct_Enum>>>;
  filter?: InputMaybe<EraIndexerDeploymentApyFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<EraIndexerDeploymentApiesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type DeploymentIndexerAllocationRewardSummariesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Allocation_Reward_Summaries_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerAllocationRewardSummaryFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexerAllocationRewardSummariesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type DeploymentIndexerAllocationRewardsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Allocation_Rewards_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerAllocationRewardFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexerAllocationRewardsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type DeploymentIndexerAllocationSummariesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Allocation_Summaries_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerAllocationSummaryFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexerAllocationSummariesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type DeploymentIndexerAllocationsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Allocations_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerAllocationFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexerAllocationsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type DeploymentIndexerMissedLaborsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Missed_Labors_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerMissedLaborFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexerMissedLaborsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type DeploymentIndexersArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Deployments_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerDeploymentFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexerDeploymentsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type DeploymentIndexersByEraIndexerDeploymentApyDeploymentIdAndIndexerIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexers_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexersOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type DeploymentIndexersByIndexerAllocationDeploymentIdAndIndexerIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexers_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexersOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type DeploymentIndexersByIndexerAllocationRewardDeploymentIdAndIndexerIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexers_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexersOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type DeploymentIndexersByIndexerAllocationRewardSummaryDeploymentIdAndIndexerIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexers_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexersOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type DeploymentIndexersByIndexerAllocationSummaryDeploymentIdAndIndexerIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexers_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexersOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type DeploymentIndexersByIndexerDeploymentDeploymentIdAndIndexerIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexers_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexersOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type DeploymentIndexersByIndexerMissedLaborDeploymentIdAndIndexerIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexers_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexersOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type DeploymentOffersArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Offers_Distinct_Enum>>>;
  filter?: InputMaybe<OfferFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<OffersOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type DeploymentPlanTemplatesByOfferDeploymentIdAndPlanTemplateIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Plan_Templates_Distinct_Enum>>>;
  filter?: InputMaybe<PlanTemplateFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<PlanTemplatesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type DeploymentPlanTemplatesByPlanDeploymentIdAndPlanTemplateIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Plan_Templates_Distinct_Enum>>>;
  filter?: InputMaybe<PlanTemplateFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<PlanTemplatesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type DeploymentPlanTemplatesByServiceAgreementDeploymentIdAndPlanTemplateIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Plan_Templates_Distinct_Enum>>>;
  filter?: InputMaybe<PlanTemplateFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<PlanTemplatesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type DeploymentPlansArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Plans_Distinct_Enum>>>;
  filter?: InputMaybe<PlanFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<PlansOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type DeploymentProjectsByConsumerQueryRewardDeploymentIdAndProjectIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Projects_Distinct_Enum>>>;
  filter?: InputMaybe<ProjectFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ProjectsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type DeploymentProjectsByConsumerQueryRewardSummaryDeploymentIdAndProjectIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Projects_Distinct_Enum>>>;
  filter?: InputMaybe<ProjectFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ProjectsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type DeploymentProjectsByDeploymentBoosterDeploymentIdAndProjectIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Projects_Distinct_Enum>>>;
  filter?: InputMaybe<ProjectFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ProjectsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type DeploymentProjectsByDeploymentBoosterSummaryDeploymentIdAndProjectIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Projects_Distinct_Enum>>>;
  filter?: InputMaybe<ProjectFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ProjectsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type DeploymentProjectsByIndexerAllocationDeploymentIdAndProjectIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Projects_Distinct_Enum>>>;
  filter?: InputMaybe<ProjectFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ProjectsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type DeploymentProjectsByIndexerAllocationRewardDeploymentIdAndProjectIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Projects_Distinct_Enum>>>;
  filter?: InputMaybe<ProjectFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ProjectsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type DeploymentProjectsByIndexerAllocationRewardSummaryDeploymentIdAndProjectIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Projects_Distinct_Enum>>>;
  filter?: InputMaybe<ProjectFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ProjectsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type DeploymentProjectsByIndexerAllocationSummaryDeploymentIdAndProjectIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Projects_Distinct_Enum>>>;
  filter?: InputMaybe<ProjectFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ProjectsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type DeploymentServiceAgreementsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Service_Agreements_Distinct_Enum>>>;
  filter?: InputMaybe<ServiceAgreementFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ServiceAgreementsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type DeploymentStateChannelsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<State_Channels_Distinct_Enum>>>;
  filter?: InputMaybe<StateChannelFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<StateChannelsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

export type DeploymentAggregates = {
  __typename?: 'DeploymentAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  average?: Maybe<DeploymentAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  distinctCount?: Maybe<DeploymentDistinctCountAggregates>;
  keys?: Maybe<Array<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  max?: Maybe<DeploymentMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  min?: Maybe<DeploymentMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevPopulation?: Maybe<DeploymentStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevSample?: Maybe<DeploymentStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  sum?: Maybe<DeploymentSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  variancePopulation?: Maybe<DeploymentVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  varianceSample?: Maybe<DeploymentVarianceSampleAggregates>;
};

/** A filter to be used against aggregates of `Deployment` object types. */
export type DeploymentAggregatesFilter = {
  /** Mean average aggregate over matching `Deployment` objects. */
  average?: InputMaybe<DeploymentAverageAggregateFilter>;
  /** Distinct count aggregate over matching `Deployment` objects. */
  distinctCount?: InputMaybe<DeploymentDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `Deployment` object to be included within the aggregate. */
  filter?: InputMaybe<DeploymentFilter>;
  /** Maximum aggregate over matching `Deployment` objects. */
  max?: InputMaybe<DeploymentMaxAggregateFilter>;
  /** Minimum aggregate over matching `Deployment` objects. */
  min?: InputMaybe<DeploymentMinAggregateFilter>;
  /** Population standard deviation aggregate over matching `Deployment` objects. */
  stddevPopulation?: InputMaybe<DeploymentStddevPopulationAggregateFilter>;
  /** Sample standard deviation aggregate over matching `Deployment` objects. */
  stddevSample?: InputMaybe<DeploymentStddevSampleAggregateFilter>;
  /** Sum aggregate over matching `Deployment` objects. */
  sum?: InputMaybe<DeploymentSumAggregateFilter>;
  /** Population variance aggregate over matching `Deployment` objects. */
  variancePopulation?: InputMaybe<DeploymentVariancePopulationAggregateFilter>;
  /** Sample variance aggregate over matching `Deployment` objects. */
  varianceSample?: InputMaybe<DeploymentVarianceSampleAggregateFilter>;
};

export type DeploymentAverageAggregateFilter = {
  createdBlock?: InputMaybe<BigFloatFilter>;
};

export type DeploymentAverageAggregates = {
  __typename?: 'DeploymentAverageAggregates';
  /** Mean average of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
};

export type DeploymentBooster = Node & {
  __typename?: 'DeploymentBooster';
  amountAdded: Scalars['BigFloat']['output'];
  amountRemoved: Scalars['BigFloat']['output'];
  consumer: Scalars['String']['output'];
  createAt: Scalars['Datetime']['output'];
  /** Reads a single `Deployment` that is related to this `DeploymentBooster`. */
  deployment?: Maybe<Deployment>;
  deploymentId: Scalars['String']['output'];
  eraIdx: Scalars['Int']['output'];
  id: Scalars['String']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  /** Reads a single `Project` that is related to this `DeploymentBooster`. */
  project?: Maybe<Project>;
  projectId: Scalars['String']['output'];
};

export type DeploymentBoosterAggregates = {
  __typename?: 'DeploymentBoosterAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  average?: Maybe<DeploymentBoosterAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  distinctCount?: Maybe<DeploymentBoosterDistinctCountAggregates>;
  keys?: Maybe<Array<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  max?: Maybe<DeploymentBoosterMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  min?: Maybe<DeploymentBoosterMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevPopulation?: Maybe<DeploymentBoosterStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevSample?: Maybe<DeploymentBoosterStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  sum?: Maybe<DeploymentBoosterSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  variancePopulation?: Maybe<DeploymentBoosterVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  varianceSample?: Maybe<DeploymentBoosterVarianceSampleAggregates>;
};

/** A filter to be used against aggregates of `DeploymentBooster` object types. */
export type DeploymentBoosterAggregatesFilter = {
  /** Mean average aggregate over matching `DeploymentBooster` objects. */
  average?: InputMaybe<DeploymentBoosterAverageAggregateFilter>;
  /** Distinct count aggregate over matching `DeploymentBooster` objects. */
  distinctCount?: InputMaybe<DeploymentBoosterDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `DeploymentBooster` object to be included within the aggregate. */
  filter?: InputMaybe<DeploymentBoosterFilter>;
  /** Maximum aggregate over matching `DeploymentBooster` objects. */
  max?: InputMaybe<DeploymentBoosterMaxAggregateFilter>;
  /** Minimum aggregate over matching `DeploymentBooster` objects. */
  min?: InputMaybe<DeploymentBoosterMinAggregateFilter>;
  /** Population standard deviation aggregate over matching `DeploymentBooster` objects. */
  stddevPopulation?: InputMaybe<DeploymentBoosterStddevPopulationAggregateFilter>;
  /** Sample standard deviation aggregate over matching `DeploymentBooster` objects. */
  stddevSample?: InputMaybe<DeploymentBoosterStddevSampleAggregateFilter>;
  /** Sum aggregate over matching `DeploymentBooster` objects. */
  sum?: InputMaybe<DeploymentBoosterSumAggregateFilter>;
  /** Population variance aggregate over matching `DeploymentBooster` objects. */
  variancePopulation?: InputMaybe<DeploymentBoosterVariancePopulationAggregateFilter>;
  /** Sample variance aggregate over matching `DeploymentBooster` objects. */
  varianceSample?: InputMaybe<DeploymentBoosterVarianceSampleAggregateFilter>;
};

export type DeploymentBoosterAverageAggregateFilter = {
  amountAdded?: InputMaybe<BigFloatFilter>;
  amountRemoved?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigFloatFilter>;
};

export type DeploymentBoosterAverageAggregates = {
  __typename?: 'DeploymentBoosterAverageAggregates';
  /** Mean average of amountAdded across the matching connection */
  amountAdded?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of amountRemoved across the matching connection */
  amountRemoved?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
};

export type DeploymentBoosterDistinctCountAggregateFilter = {
  _blockRange?: InputMaybe<BigIntFilter>;
  _id?: InputMaybe<BigIntFilter>;
  amountAdded?: InputMaybe<BigIntFilter>;
  amountRemoved?: InputMaybe<BigIntFilter>;
  consumer?: InputMaybe<BigIntFilter>;
  createAt?: InputMaybe<BigIntFilter>;
  deploymentId?: InputMaybe<BigIntFilter>;
  eraIdx?: InputMaybe<BigIntFilter>;
  id?: InputMaybe<BigIntFilter>;
  projectId?: InputMaybe<BigIntFilter>;
};

export type DeploymentBoosterDistinctCountAggregates = {
  __typename?: 'DeploymentBoosterDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  _blockRange?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  _id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of amountAdded across the matching connection */
  amountAdded?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of amountRemoved across the matching connection */
  amountRemoved?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of consumer across the matching connection */
  consumer?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createAt across the matching connection */
  createAt?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of deploymentId across the matching connection */
  deploymentId?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of projectId across the matching connection */
  projectId?: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `DeploymentBooster` object types. All fields are combined with a logical ‘and.’ */
export type DeploymentBoosterFilter = {
  /** Filter by the object’s `amountAdded` field. */
  amountAdded?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `amountRemoved` field. */
  amountRemoved?: InputMaybe<BigFloatFilter>;
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<DeploymentBoosterFilter>>;
  /** Filter by the object’s `consumer` field. */
  consumer?: InputMaybe<StringFilter>;
  /** Filter by the object’s `createAt` field. */
  createAt?: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `deployment` relation. */
  deployment?: InputMaybe<DeploymentFilter>;
  /** Filter by the object’s `deploymentId` field. */
  deploymentId?: InputMaybe<StringFilter>;
  /** Filter by the object’s `eraIdx` field. */
  eraIdx?: InputMaybe<IntFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<DeploymentBoosterFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<DeploymentBoosterFilter>>;
  /** Filter by the object’s `project` relation. */
  project?: InputMaybe<ProjectFilter>;
  /** Filter by the object’s `projectId` field. */
  projectId?: InputMaybe<StringFilter>;
};

export type DeploymentBoosterMaxAggregateFilter = {
  amountAdded?: InputMaybe<BigFloatFilter>;
  amountRemoved?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<IntFilter>;
};

export type DeploymentBoosterMaxAggregates = {
  __typename?: 'DeploymentBoosterMaxAggregates';
  /** Maximum of amountAdded across the matching connection */
  amountAdded?: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of amountRemoved across the matching connection */
  amountRemoved?: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['Int']['output']>;
};

export type DeploymentBoosterMinAggregateFilter = {
  amountAdded?: InputMaybe<BigFloatFilter>;
  amountRemoved?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<IntFilter>;
};

export type DeploymentBoosterMinAggregates = {
  __typename?: 'DeploymentBoosterMinAggregates';
  /** Minimum of amountAdded across the matching connection */
  amountAdded?: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of amountRemoved across the matching connection */
  amountRemoved?: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['Int']['output']>;
};

export type DeploymentBoosterStddevPopulationAggregateFilter = {
  amountAdded?: InputMaybe<BigFloatFilter>;
  amountRemoved?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigFloatFilter>;
};

export type DeploymentBoosterStddevPopulationAggregates = {
  __typename?: 'DeploymentBoosterStddevPopulationAggregates';
  /** Population standard deviation of amountAdded across the matching connection */
  amountAdded?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of amountRemoved across the matching connection */
  amountRemoved?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
};

export type DeploymentBoosterStddevSampleAggregateFilter = {
  amountAdded?: InputMaybe<BigFloatFilter>;
  amountRemoved?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigFloatFilter>;
};

export type DeploymentBoosterStddevSampleAggregates = {
  __typename?: 'DeploymentBoosterStddevSampleAggregates';
  /** Sample standard deviation of amountAdded across the matching connection */
  amountAdded?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of amountRemoved across the matching connection */
  amountRemoved?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
};

export type DeploymentBoosterSumAggregateFilter = {
  amountAdded?: InputMaybe<BigFloatFilter>;
  amountRemoved?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigIntFilter>;
};

export type DeploymentBoosterSumAggregates = {
  __typename?: 'DeploymentBoosterSumAggregates';
  /** Sum of amountAdded across the matching connection */
  amountAdded: Scalars['BigFloat']['output'];
  /** Sum of amountRemoved across the matching connection */
  amountRemoved: Scalars['BigFloat']['output'];
  /** Sum of eraIdx across the matching connection */
  eraIdx: Scalars['BigInt']['output'];
};

/** A connection to a list of `DeploymentBoosterSummary` values. */
export type DeploymentBoosterSummariesConnection = {
  __typename?: 'DeploymentBoosterSummariesConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<DeploymentBoosterSummaryAggregates>;
  /** A list of edges which contains the `DeploymentBoosterSummary` and cursor to aid in pagination. */
  edges: Array<DeploymentBoosterSummariesEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<DeploymentBoosterSummaryAggregates>>;
  /** A list of `DeploymentBoosterSummary` objects. */
  nodes: Array<Maybe<DeploymentBoosterSummary>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `DeploymentBoosterSummary` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `DeploymentBoosterSummary` values. */
export type DeploymentBoosterSummariesConnectionGroupedAggregatesArgs = {
  groupBy: Array<DeploymentBoosterSummariesGroupBy>;
  having?: InputMaybe<DeploymentBoosterSummariesHavingInput>;
};

/** A `DeploymentBoosterSummary` edge in the connection. */
export type DeploymentBoosterSummariesEdge = {
  __typename?: 'DeploymentBoosterSummariesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `DeploymentBoosterSummary` at the end of the edge. */
  node?: Maybe<DeploymentBoosterSummary>;
};

/** Grouping methods for `DeploymentBoosterSummary` for usage during aggregation. */
export enum DeploymentBoosterSummariesGroupBy {
  Consumer = 'CONSUMER',
  CreateAt = 'CREATE_AT',
  CreateAtTruncatedToDay = 'CREATE_AT_TRUNCATED_TO_DAY',
  CreateAtTruncatedToHour = 'CREATE_AT_TRUNCATED_TO_HOUR',
  DeploymentId = 'DEPLOYMENT_ID',
  Id = 'ID',
  ProjectId = 'PROJECT_ID',
  TotalAdded = 'TOTAL_ADDED',
  TotalAmount = 'TOTAL_AMOUNT',
  TotalRemoved = 'TOTAL_REMOVED',
  UpdateAt = 'UPDATE_AT',
  UpdateAtTruncatedToDay = 'UPDATE_AT_TRUNCATED_TO_DAY',
  UpdateAtTruncatedToHour = 'UPDATE_AT_TRUNCATED_TO_HOUR'
}

export type DeploymentBoosterSummariesHavingAverageInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  totalAdded?: InputMaybe<HavingBigfloatFilter>;
  totalAmount?: InputMaybe<HavingBigfloatFilter>;
  totalRemoved?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type DeploymentBoosterSummariesHavingDistinctCountInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  totalAdded?: InputMaybe<HavingBigfloatFilter>;
  totalAmount?: InputMaybe<HavingBigfloatFilter>;
  totalRemoved?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

/** Conditions for `DeploymentBoosterSummary` aggregates. */
export type DeploymentBoosterSummariesHavingInput = {
  AND?: InputMaybe<Array<DeploymentBoosterSummariesHavingInput>>;
  OR?: InputMaybe<Array<DeploymentBoosterSummariesHavingInput>>;
  average?: InputMaybe<DeploymentBoosterSummariesHavingAverageInput>;
  distinctCount?: InputMaybe<DeploymentBoosterSummariesHavingDistinctCountInput>;
  max?: InputMaybe<DeploymentBoosterSummariesHavingMaxInput>;
  min?: InputMaybe<DeploymentBoosterSummariesHavingMinInput>;
  stddevPopulation?: InputMaybe<DeploymentBoosterSummariesHavingStddevPopulationInput>;
  stddevSample?: InputMaybe<DeploymentBoosterSummariesHavingStddevSampleInput>;
  sum?: InputMaybe<DeploymentBoosterSummariesHavingSumInput>;
  variancePopulation?: InputMaybe<DeploymentBoosterSummariesHavingVariancePopulationInput>;
  varianceSample?: InputMaybe<DeploymentBoosterSummariesHavingVarianceSampleInput>;
};

export type DeploymentBoosterSummariesHavingMaxInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  totalAdded?: InputMaybe<HavingBigfloatFilter>;
  totalAmount?: InputMaybe<HavingBigfloatFilter>;
  totalRemoved?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type DeploymentBoosterSummariesHavingMinInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  totalAdded?: InputMaybe<HavingBigfloatFilter>;
  totalAmount?: InputMaybe<HavingBigfloatFilter>;
  totalRemoved?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type DeploymentBoosterSummariesHavingStddevPopulationInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  totalAdded?: InputMaybe<HavingBigfloatFilter>;
  totalAmount?: InputMaybe<HavingBigfloatFilter>;
  totalRemoved?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type DeploymentBoosterSummariesHavingStddevSampleInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  totalAdded?: InputMaybe<HavingBigfloatFilter>;
  totalAmount?: InputMaybe<HavingBigfloatFilter>;
  totalRemoved?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type DeploymentBoosterSummariesHavingSumInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  totalAdded?: InputMaybe<HavingBigfloatFilter>;
  totalAmount?: InputMaybe<HavingBigfloatFilter>;
  totalRemoved?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type DeploymentBoosterSummariesHavingVariancePopulationInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  totalAdded?: InputMaybe<HavingBigfloatFilter>;
  totalAmount?: InputMaybe<HavingBigfloatFilter>;
  totalRemoved?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type DeploymentBoosterSummariesHavingVarianceSampleInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  totalAdded?: InputMaybe<HavingBigfloatFilter>;
  totalAmount?: InputMaybe<HavingBigfloatFilter>;
  totalRemoved?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

/** Methods to use when ordering `DeploymentBoosterSummary`. */
export enum DeploymentBoosterSummariesOrderBy {
  ConsumerAsc = 'CONSUMER_ASC',
  ConsumerDesc = 'CONSUMER_DESC',
  CreateAtAsc = 'CREATE_AT_ASC',
  CreateAtDesc = 'CREATE_AT_DESC',
  DeploymentByDeploymentIdCreatedBlockAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_ASC',
  DeploymentByDeploymentIdCreatedBlockDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_DESC',
  DeploymentByDeploymentIdCreatedTimestampAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_ASC',
  DeploymentByDeploymentIdCreatedTimestampDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_DESC',
  DeploymentByDeploymentIdIdAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__ID_ASC',
  DeploymentByDeploymentIdIdDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__ID_DESC',
  DeploymentByDeploymentIdLastEventAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_ASC',
  DeploymentByDeploymentIdLastEventDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_DESC',
  DeploymentByDeploymentIdMetadataAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_ASC',
  DeploymentByDeploymentIdMetadataDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_DESC',
  DeploymentByDeploymentIdProjectIdAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_ASC',
  DeploymentByDeploymentIdProjectIdDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_DESC',
  DeploymentIdAsc = 'DEPLOYMENT_ID_ASC',
  DeploymentIdDesc = 'DEPLOYMENT_ID_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  ProjectByProjectIdBoostAllocationRatioAsc = 'PROJECT_BY_PROJECT_ID__BOOST_ALLOCATION_RATIO_ASC',
  ProjectByProjectIdBoostAllocationRatioDesc = 'PROJECT_BY_PROJECT_ID__BOOST_ALLOCATION_RATIO_DESC',
  ProjectByProjectIdCreatedBlockAsc = 'PROJECT_BY_PROJECT_ID__CREATED_BLOCK_ASC',
  ProjectByProjectIdCreatedBlockDesc = 'PROJECT_BY_PROJECT_ID__CREATED_BLOCK_DESC',
  ProjectByProjectIdCreatedTimestampAsc = 'PROJECT_BY_PROJECT_ID__CREATED_TIMESTAMP_ASC',
  ProjectByProjectIdCreatedTimestampDesc = 'PROJECT_BY_PROJECT_ID__CREATED_TIMESTAMP_DESC',
  ProjectByProjectIdDeploymentIdAsc = 'PROJECT_BY_PROJECT_ID__DEPLOYMENT_ID_ASC',
  ProjectByProjectIdDeploymentIdDesc = 'PROJECT_BY_PROJECT_ID__DEPLOYMENT_ID_DESC',
  ProjectByProjectIdDeploymentMetadataAsc = 'PROJECT_BY_PROJECT_ID__DEPLOYMENT_METADATA_ASC',
  ProjectByProjectIdDeploymentMetadataDesc = 'PROJECT_BY_PROJECT_ID__DEPLOYMENT_METADATA_DESC',
  ProjectByProjectIdIdAsc = 'PROJECT_BY_PROJECT_ID__ID_ASC',
  ProjectByProjectIdIdDesc = 'PROJECT_BY_PROJECT_ID__ID_DESC',
  ProjectByProjectIdLastEventAsc = 'PROJECT_BY_PROJECT_ID__LAST_EVENT_ASC',
  ProjectByProjectIdLastEventDesc = 'PROJECT_BY_PROJECT_ID__LAST_EVENT_DESC',
  ProjectByProjectIdMetadataAsc = 'PROJECT_BY_PROJECT_ID__METADATA_ASC',
  ProjectByProjectIdMetadataDesc = 'PROJECT_BY_PROJECT_ID__METADATA_DESC',
  ProjectByProjectIdOwnerAsc = 'PROJECT_BY_PROJECT_ID__OWNER_ASC',
  ProjectByProjectIdOwnerDesc = 'PROJECT_BY_PROJECT_ID__OWNER_DESC',
  ProjectByProjectIdTotalAllocationAsc = 'PROJECT_BY_PROJECT_ID__TOTAL_ALLOCATION_ASC',
  ProjectByProjectIdTotalAllocationDesc = 'PROJECT_BY_PROJECT_ID__TOTAL_ALLOCATION_DESC',
  ProjectByProjectIdTotalBoostAsc = 'PROJECT_BY_PROJECT_ID__TOTAL_BOOST_ASC',
  ProjectByProjectIdTotalBoostDesc = 'PROJECT_BY_PROJECT_ID__TOTAL_BOOST_DESC',
  ProjectByProjectIdTotalRewardAsc = 'PROJECT_BY_PROJECT_ID__TOTAL_REWARD_ASC',
  ProjectByProjectIdTotalRewardDesc = 'PROJECT_BY_PROJECT_ID__TOTAL_REWARD_DESC',
  ProjectByProjectIdTypeAsc = 'PROJECT_BY_PROJECT_ID__TYPE_ASC',
  ProjectByProjectIdTypeDesc = 'PROJECT_BY_PROJECT_ID__TYPE_DESC',
  ProjectByProjectIdUpdatedTimestampAsc = 'PROJECT_BY_PROJECT_ID__UPDATED_TIMESTAMP_ASC',
  ProjectByProjectIdUpdatedTimestampDesc = 'PROJECT_BY_PROJECT_ID__UPDATED_TIMESTAMP_DESC',
  ProjectIdAsc = 'PROJECT_ID_ASC',
  ProjectIdDesc = 'PROJECT_ID_DESC',
  TotalAddedAsc = 'TOTAL_ADDED_ASC',
  TotalAddedDesc = 'TOTAL_ADDED_DESC',
  TotalAmountAsc = 'TOTAL_AMOUNT_ASC',
  TotalAmountDesc = 'TOTAL_AMOUNT_DESC',
  TotalRemovedAsc = 'TOTAL_REMOVED_ASC',
  TotalRemovedDesc = 'TOTAL_REMOVED_DESC',
  UpdateAtAsc = 'UPDATE_AT_ASC',
  UpdateAtDesc = 'UPDATE_AT_DESC'
}

export type DeploymentBoosterSummary = Node & {
  __typename?: 'DeploymentBoosterSummary';
  consumer: Scalars['String']['output'];
  createAt: Scalars['Datetime']['output'];
  /** Reads a single `Deployment` that is related to this `DeploymentBoosterSummary`. */
  deployment?: Maybe<Deployment>;
  deploymentId: Scalars['String']['output'];
  id: Scalars['String']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  /** Reads a single `Project` that is related to this `DeploymentBoosterSummary`. */
  project?: Maybe<Project>;
  projectId: Scalars['String']['output'];
  totalAdded: Scalars['BigFloat']['output'];
  totalAmount: Scalars['BigFloat']['output'];
  totalRemoved: Scalars['BigFloat']['output'];
  updateAt: Scalars['Datetime']['output'];
};

export type DeploymentBoosterSummaryAggregates = {
  __typename?: 'DeploymentBoosterSummaryAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  average?: Maybe<DeploymentBoosterSummaryAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  distinctCount?: Maybe<DeploymentBoosterSummaryDistinctCountAggregates>;
  keys?: Maybe<Array<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  max?: Maybe<DeploymentBoosterSummaryMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  min?: Maybe<DeploymentBoosterSummaryMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevPopulation?: Maybe<DeploymentBoosterSummaryStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevSample?: Maybe<DeploymentBoosterSummaryStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  sum?: Maybe<DeploymentBoosterSummarySumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  variancePopulation?: Maybe<DeploymentBoosterSummaryVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  varianceSample?: Maybe<DeploymentBoosterSummaryVarianceSampleAggregates>;
};

/** A filter to be used against aggregates of `DeploymentBoosterSummary` object types. */
export type DeploymentBoosterSummaryAggregatesFilter = {
  /** Mean average aggregate over matching `DeploymentBoosterSummary` objects. */
  average?: InputMaybe<DeploymentBoosterSummaryAverageAggregateFilter>;
  /** Distinct count aggregate over matching `DeploymentBoosterSummary` objects. */
  distinctCount?: InputMaybe<DeploymentBoosterSummaryDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `DeploymentBoosterSummary` object to be included within the aggregate. */
  filter?: InputMaybe<DeploymentBoosterSummaryFilter>;
  /** Maximum aggregate over matching `DeploymentBoosterSummary` objects. */
  max?: InputMaybe<DeploymentBoosterSummaryMaxAggregateFilter>;
  /** Minimum aggregate over matching `DeploymentBoosterSummary` objects. */
  min?: InputMaybe<DeploymentBoosterSummaryMinAggregateFilter>;
  /** Population standard deviation aggregate over matching `DeploymentBoosterSummary` objects. */
  stddevPopulation?: InputMaybe<DeploymentBoosterSummaryStddevPopulationAggregateFilter>;
  /** Sample standard deviation aggregate over matching `DeploymentBoosterSummary` objects. */
  stddevSample?: InputMaybe<DeploymentBoosterSummaryStddevSampleAggregateFilter>;
  /** Sum aggregate over matching `DeploymentBoosterSummary` objects. */
  sum?: InputMaybe<DeploymentBoosterSummarySumAggregateFilter>;
  /** Population variance aggregate over matching `DeploymentBoosterSummary` objects. */
  variancePopulation?: InputMaybe<DeploymentBoosterSummaryVariancePopulationAggregateFilter>;
  /** Sample variance aggregate over matching `DeploymentBoosterSummary` objects. */
  varianceSample?: InputMaybe<DeploymentBoosterSummaryVarianceSampleAggregateFilter>;
};

export type DeploymentBoosterSummaryAverageAggregateFilter = {
  totalAdded?: InputMaybe<BigFloatFilter>;
  totalAmount?: InputMaybe<BigFloatFilter>;
  totalRemoved?: InputMaybe<BigFloatFilter>;
};

export type DeploymentBoosterSummaryAverageAggregates = {
  __typename?: 'DeploymentBoosterSummaryAverageAggregates';
  /** Mean average of totalAdded across the matching connection */
  totalAdded?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of totalAmount across the matching connection */
  totalAmount?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of totalRemoved across the matching connection */
  totalRemoved?: Maybe<Scalars['BigFloat']['output']>;
};

export type DeploymentBoosterSummaryDistinctCountAggregateFilter = {
  _blockRange?: InputMaybe<BigIntFilter>;
  _id?: InputMaybe<BigIntFilter>;
  consumer?: InputMaybe<BigIntFilter>;
  createAt?: InputMaybe<BigIntFilter>;
  deploymentId?: InputMaybe<BigIntFilter>;
  id?: InputMaybe<BigIntFilter>;
  projectId?: InputMaybe<BigIntFilter>;
  totalAdded?: InputMaybe<BigIntFilter>;
  totalAmount?: InputMaybe<BigIntFilter>;
  totalRemoved?: InputMaybe<BigIntFilter>;
  updateAt?: InputMaybe<BigIntFilter>;
};

export type DeploymentBoosterSummaryDistinctCountAggregates = {
  __typename?: 'DeploymentBoosterSummaryDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  _blockRange?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  _id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of consumer across the matching connection */
  consumer?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createAt across the matching connection */
  createAt?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of deploymentId across the matching connection */
  deploymentId?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of projectId across the matching connection */
  projectId?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of totalAdded across the matching connection */
  totalAdded?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of totalAmount across the matching connection */
  totalAmount?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of totalRemoved across the matching connection */
  totalRemoved?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of updateAt across the matching connection */
  updateAt?: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `DeploymentBoosterSummary` object types. All fields are combined with a logical ‘and.’ */
export type DeploymentBoosterSummaryFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<DeploymentBoosterSummaryFilter>>;
  /** Filter by the object’s `consumer` field. */
  consumer?: InputMaybe<StringFilter>;
  /** Filter by the object’s `createAt` field. */
  createAt?: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `deployment` relation. */
  deployment?: InputMaybe<DeploymentFilter>;
  /** Filter by the object’s `deploymentId` field. */
  deploymentId?: InputMaybe<StringFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<DeploymentBoosterSummaryFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<DeploymentBoosterSummaryFilter>>;
  /** Filter by the object’s `project` relation. */
  project?: InputMaybe<ProjectFilter>;
  /** Filter by the object’s `projectId` field. */
  projectId?: InputMaybe<StringFilter>;
  /** Filter by the object’s `totalAdded` field. */
  totalAdded?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `totalAmount` field. */
  totalAmount?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `totalRemoved` field. */
  totalRemoved?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `updateAt` field. */
  updateAt?: InputMaybe<DatetimeFilter>;
};

export type DeploymentBoosterSummaryMaxAggregateFilter = {
  totalAdded?: InputMaybe<BigFloatFilter>;
  totalAmount?: InputMaybe<BigFloatFilter>;
  totalRemoved?: InputMaybe<BigFloatFilter>;
};

export type DeploymentBoosterSummaryMaxAggregates = {
  __typename?: 'DeploymentBoosterSummaryMaxAggregates';
  /** Maximum of totalAdded across the matching connection */
  totalAdded?: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of totalAmount across the matching connection */
  totalAmount?: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of totalRemoved across the matching connection */
  totalRemoved?: Maybe<Scalars['BigFloat']['output']>;
};

export type DeploymentBoosterSummaryMinAggregateFilter = {
  totalAdded?: InputMaybe<BigFloatFilter>;
  totalAmount?: InputMaybe<BigFloatFilter>;
  totalRemoved?: InputMaybe<BigFloatFilter>;
};

export type DeploymentBoosterSummaryMinAggregates = {
  __typename?: 'DeploymentBoosterSummaryMinAggregates';
  /** Minimum of totalAdded across the matching connection */
  totalAdded?: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of totalAmount across the matching connection */
  totalAmount?: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of totalRemoved across the matching connection */
  totalRemoved?: Maybe<Scalars['BigFloat']['output']>;
};

export type DeploymentBoosterSummaryStddevPopulationAggregateFilter = {
  totalAdded?: InputMaybe<BigFloatFilter>;
  totalAmount?: InputMaybe<BigFloatFilter>;
  totalRemoved?: InputMaybe<BigFloatFilter>;
};

export type DeploymentBoosterSummaryStddevPopulationAggregates = {
  __typename?: 'DeploymentBoosterSummaryStddevPopulationAggregates';
  /** Population standard deviation of totalAdded across the matching connection */
  totalAdded?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of totalAmount across the matching connection */
  totalAmount?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of totalRemoved across the matching connection */
  totalRemoved?: Maybe<Scalars['BigFloat']['output']>;
};

export type DeploymentBoosterSummaryStddevSampleAggregateFilter = {
  totalAdded?: InputMaybe<BigFloatFilter>;
  totalAmount?: InputMaybe<BigFloatFilter>;
  totalRemoved?: InputMaybe<BigFloatFilter>;
};

export type DeploymentBoosterSummaryStddevSampleAggregates = {
  __typename?: 'DeploymentBoosterSummaryStddevSampleAggregates';
  /** Sample standard deviation of totalAdded across the matching connection */
  totalAdded?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of totalAmount across the matching connection */
  totalAmount?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of totalRemoved across the matching connection */
  totalRemoved?: Maybe<Scalars['BigFloat']['output']>;
};

export type DeploymentBoosterSummarySumAggregateFilter = {
  totalAdded?: InputMaybe<BigFloatFilter>;
  totalAmount?: InputMaybe<BigFloatFilter>;
  totalRemoved?: InputMaybe<BigFloatFilter>;
};

export type DeploymentBoosterSummarySumAggregates = {
  __typename?: 'DeploymentBoosterSummarySumAggregates';
  /** Sum of totalAdded across the matching connection */
  totalAdded: Scalars['BigFloat']['output'];
  /** Sum of totalAmount across the matching connection */
  totalAmount: Scalars['BigFloat']['output'];
  /** Sum of totalRemoved across the matching connection */
  totalRemoved: Scalars['BigFloat']['output'];
};

export type DeploymentBoosterSummaryVariancePopulationAggregateFilter = {
  totalAdded?: InputMaybe<BigFloatFilter>;
  totalAmount?: InputMaybe<BigFloatFilter>;
  totalRemoved?: InputMaybe<BigFloatFilter>;
};

export type DeploymentBoosterSummaryVariancePopulationAggregates = {
  __typename?: 'DeploymentBoosterSummaryVariancePopulationAggregates';
  /** Population variance of totalAdded across the matching connection */
  totalAdded?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of totalAmount across the matching connection */
  totalAmount?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of totalRemoved across the matching connection */
  totalRemoved?: Maybe<Scalars['BigFloat']['output']>;
};

export type DeploymentBoosterSummaryVarianceSampleAggregateFilter = {
  totalAdded?: InputMaybe<BigFloatFilter>;
  totalAmount?: InputMaybe<BigFloatFilter>;
  totalRemoved?: InputMaybe<BigFloatFilter>;
};

export type DeploymentBoosterSummaryVarianceSampleAggregates = {
  __typename?: 'DeploymentBoosterSummaryVarianceSampleAggregates';
  /** Sample variance of totalAdded across the matching connection */
  totalAdded?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of totalAmount across the matching connection */
  totalAmount?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of totalRemoved across the matching connection */
  totalRemoved?: Maybe<Scalars['BigFloat']['output']>;
};

export type DeploymentBoosterVariancePopulationAggregateFilter = {
  amountAdded?: InputMaybe<BigFloatFilter>;
  amountRemoved?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigFloatFilter>;
};

export type DeploymentBoosterVariancePopulationAggregates = {
  __typename?: 'DeploymentBoosterVariancePopulationAggregates';
  /** Population variance of amountAdded across the matching connection */
  amountAdded?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of amountRemoved across the matching connection */
  amountRemoved?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
};

export type DeploymentBoosterVarianceSampleAggregateFilter = {
  amountAdded?: InputMaybe<BigFloatFilter>;
  amountRemoved?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigFloatFilter>;
};

export type DeploymentBoosterVarianceSampleAggregates = {
  __typename?: 'DeploymentBoosterVarianceSampleAggregates';
  /** Sample variance of amountAdded across the matching connection */
  amountAdded?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of amountRemoved across the matching connection */
  amountRemoved?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `DeploymentBooster` values. */
export type DeploymentBoostersConnection = {
  __typename?: 'DeploymentBoostersConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<DeploymentBoosterAggregates>;
  /** A list of edges which contains the `DeploymentBooster` and cursor to aid in pagination. */
  edges: Array<DeploymentBoostersEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<DeploymentBoosterAggregates>>;
  /** A list of `DeploymentBooster` objects. */
  nodes: Array<Maybe<DeploymentBooster>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `DeploymentBooster` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `DeploymentBooster` values. */
export type DeploymentBoostersConnectionGroupedAggregatesArgs = {
  groupBy: Array<DeploymentBoostersGroupBy>;
  having?: InputMaybe<DeploymentBoostersHavingInput>;
};

/** A `DeploymentBooster` edge in the connection. */
export type DeploymentBoostersEdge = {
  __typename?: 'DeploymentBoostersEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `DeploymentBooster` at the end of the edge. */
  node?: Maybe<DeploymentBooster>;
};

/** Grouping methods for `DeploymentBooster` for usage during aggregation. */
export enum DeploymentBoostersGroupBy {
  AmountAdded = 'AMOUNT_ADDED',
  AmountRemoved = 'AMOUNT_REMOVED',
  Consumer = 'CONSUMER',
  CreateAt = 'CREATE_AT',
  CreateAtTruncatedToDay = 'CREATE_AT_TRUNCATED_TO_DAY',
  CreateAtTruncatedToHour = 'CREATE_AT_TRUNCATED_TO_HOUR',
  DeploymentId = 'DEPLOYMENT_ID',
  EraIdx = 'ERA_IDX',
  Id = 'ID',
  ProjectId = 'PROJECT_ID'
}

export type DeploymentBoostersHavingAverageInput = {
  amountAdded?: InputMaybe<HavingBigfloatFilter>;
  amountRemoved?: InputMaybe<HavingBigfloatFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
};

export type DeploymentBoostersHavingDistinctCountInput = {
  amountAdded?: InputMaybe<HavingBigfloatFilter>;
  amountRemoved?: InputMaybe<HavingBigfloatFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
};

/** Conditions for `DeploymentBooster` aggregates. */
export type DeploymentBoostersHavingInput = {
  AND?: InputMaybe<Array<DeploymentBoostersHavingInput>>;
  OR?: InputMaybe<Array<DeploymentBoostersHavingInput>>;
  average?: InputMaybe<DeploymentBoostersHavingAverageInput>;
  distinctCount?: InputMaybe<DeploymentBoostersHavingDistinctCountInput>;
  max?: InputMaybe<DeploymentBoostersHavingMaxInput>;
  min?: InputMaybe<DeploymentBoostersHavingMinInput>;
  stddevPopulation?: InputMaybe<DeploymentBoostersHavingStddevPopulationInput>;
  stddevSample?: InputMaybe<DeploymentBoostersHavingStddevSampleInput>;
  sum?: InputMaybe<DeploymentBoostersHavingSumInput>;
  variancePopulation?: InputMaybe<DeploymentBoostersHavingVariancePopulationInput>;
  varianceSample?: InputMaybe<DeploymentBoostersHavingVarianceSampleInput>;
};

export type DeploymentBoostersHavingMaxInput = {
  amountAdded?: InputMaybe<HavingBigfloatFilter>;
  amountRemoved?: InputMaybe<HavingBigfloatFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
};

export type DeploymentBoostersHavingMinInput = {
  amountAdded?: InputMaybe<HavingBigfloatFilter>;
  amountRemoved?: InputMaybe<HavingBigfloatFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
};

export type DeploymentBoostersHavingStddevPopulationInput = {
  amountAdded?: InputMaybe<HavingBigfloatFilter>;
  amountRemoved?: InputMaybe<HavingBigfloatFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
};

export type DeploymentBoostersHavingStddevSampleInput = {
  amountAdded?: InputMaybe<HavingBigfloatFilter>;
  amountRemoved?: InputMaybe<HavingBigfloatFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
};

export type DeploymentBoostersHavingSumInput = {
  amountAdded?: InputMaybe<HavingBigfloatFilter>;
  amountRemoved?: InputMaybe<HavingBigfloatFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
};

export type DeploymentBoostersHavingVariancePopulationInput = {
  amountAdded?: InputMaybe<HavingBigfloatFilter>;
  amountRemoved?: InputMaybe<HavingBigfloatFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
};

export type DeploymentBoostersHavingVarianceSampleInput = {
  amountAdded?: InputMaybe<HavingBigfloatFilter>;
  amountRemoved?: InputMaybe<HavingBigfloatFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
};

/** Methods to use when ordering `DeploymentBooster`. */
export enum DeploymentBoostersOrderBy {
  AmountAddedAsc = 'AMOUNT_ADDED_ASC',
  AmountAddedDesc = 'AMOUNT_ADDED_DESC',
  AmountRemovedAsc = 'AMOUNT_REMOVED_ASC',
  AmountRemovedDesc = 'AMOUNT_REMOVED_DESC',
  ConsumerAsc = 'CONSUMER_ASC',
  ConsumerDesc = 'CONSUMER_DESC',
  CreateAtAsc = 'CREATE_AT_ASC',
  CreateAtDesc = 'CREATE_AT_DESC',
  DeploymentByDeploymentIdCreatedBlockAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_ASC',
  DeploymentByDeploymentIdCreatedBlockDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_DESC',
  DeploymentByDeploymentIdCreatedTimestampAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_ASC',
  DeploymentByDeploymentIdCreatedTimestampDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_DESC',
  DeploymentByDeploymentIdIdAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__ID_ASC',
  DeploymentByDeploymentIdIdDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__ID_DESC',
  DeploymentByDeploymentIdLastEventAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_ASC',
  DeploymentByDeploymentIdLastEventDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_DESC',
  DeploymentByDeploymentIdMetadataAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_ASC',
  DeploymentByDeploymentIdMetadataDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_DESC',
  DeploymentByDeploymentIdProjectIdAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_ASC',
  DeploymentByDeploymentIdProjectIdDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_DESC',
  DeploymentIdAsc = 'DEPLOYMENT_ID_ASC',
  DeploymentIdDesc = 'DEPLOYMENT_ID_DESC',
  EraIdxAsc = 'ERA_IDX_ASC',
  EraIdxDesc = 'ERA_IDX_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  ProjectByProjectIdBoostAllocationRatioAsc = 'PROJECT_BY_PROJECT_ID__BOOST_ALLOCATION_RATIO_ASC',
  ProjectByProjectIdBoostAllocationRatioDesc = 'PROJECT_BY_PROJECT_ID__BOOST_ALLOCATION_RATIO_DESC',
  ProjectByProjectIdCreatedBlockAsc = 'PROJECT_BY_PROJECT_ID__CREATED_BLOCK_ASC',
  ProjectByProjectIdCreatedBlockDesc = 'PROJECT_BY_PROJECT_ID__CREATED_BLOCK_DESC',
  ProjectByProjectIdCreatedTimestampAsc = 'PROJECT_BY_PROJECT_ID__CREATED_TIMESTAMP_ASC',
  ProjectByProjectIdCreatedTimestampDesc = 'PROJECT_BY_PROJECT_ID__CREATED_TIMESTAMP_DESC',
  ProjectByProjectIdDeploymentIdAsc = 'PROJECT_BY_PROJECT_ID__DEPLOYMENT_ID_ASC',
  ProjectByProjectIdDeploymentIdDesc = 'PROJECT_BY_PROJECT_ID__DEPLOYMENT_ID_DESC',
  ProjectByProjectIdDeploymentMetadataAsc = 'PROJECT_BY_PROJECT_ID__DEPLOYMENT_METADATA_ASC',
  ProjectByProjectIdDeploymentMetadataDesc = 'PROJECT_BY_PROJECT_ID__DEPLOYMENT_METADATA_DESC',
  ProjectByProjectIdIdAsc = 'PROJECT_BY_PROJECT_ID__ID_ASC',
  ProjectByProjectIdIdDesc = 'PROJECT_BY_PROJECT_ID__ID_DESC',
  ProjectByProjectIdLastEventAsc = 'PROJECT_BY_PROJECT_ID__LAST_EVENT_ASC',
  ProjectByProjectIdLastEventDesc = 'PROJECT_BY_PROJECT_ID__LAST_EVENT_DESC',
  ProjectByProjectIdMetadataAsc = 'PROJECT_BY_PROJECT_ID__METADATA_ASC',
  ProjectByProjectIdMetadataDesc = 'PROJECT_BY_PROJECT_ID__METADATA_DESC',
  ProjectByProjectIdOwnerAsc = 'PROJECT_BY_PROJECT_ID__OWNER_ASC',
  ProjectByProjectIdOwnerDesc = 'PROJECT_BY_PROJECT_ID__OWNER_DESC',
  ProjectByProjectIdTotalAllocationAsc = 'PROJECT_BY_PROJECT_ID__TOTAL_ALLOCATION_ASC',
  ProjectByProjectIdTotalAllocationDesc = 'PROJECT_BY_PROJECT_ID__TOTAL_ALLOCATION_DESC',
  ProjectByProjectIdTotalBoostAsc = 'PROJECT_BY_PROJECT_ID__TOTAL_BOOST_ASC',
  ProjectByProjectIdTotalBoostDesc = 'PROJECT_BY_PROJECT_ID__TOTAL_BOOST_DESC',
  ProjectByProjectIdTotalRewardAsc = 'PROJECT_BY_PROJECT_ID__TOTAL_REWARD_ASC',
  ProjectByProjectIdTotalRewardDesc = 'PROJECT_BY_PROJECT_ID__TOTAL_REWARD_DESC',
  ProjectByProjectIdTypeAsc = 'PROJECT_BY_PROJECT_ID__TYPE_ASC',
  ProjectByProjectIdTypeDesc = 'PROJECT_BY_PROJECT_ID__TYPE_DESC',
  ProjectByProjectIdUpdatedTimestampAsc = 'PROJECT_BY_PROJECT_ID__UPDATED_TIMESTAMP_ASC',
  ProjectByProjectIdUpdatedTimestampDesc = 'PROJECT_BY_PROJECT_ID__UPDATED_TIMESTAMP_DESC',
  ProjectIdAsc = 'PROJECT_ID_ASC',
  ProjectIdDesc = 'PROJECT_ID_DESC'
}

export type DeploymentDistinctCountAggregateFilter = {
  _blockRange?: InputMaybe<BigIntFilter>;
  _id?: InputMaybe<BigIntFilter>;
  createdBlock?: InputMaybe<BigIntFilter>;
  createdTimestamp?: InputMaybe<BigIntFilter>;
  id?: InputMaybe<BigIntFilter>;
  lastEvent?: InputMaybe<BigIntFilter>;
  metadata?: InputMaybe<BigIntFilter>;
  projectId?: InputMaybe<BigIntFilter>;
};

export type DeploymentDistinctCountAggregates = {
  __typename?: 'DeploymentDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  _blockRange?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  _id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createdTimestamp across the matching connection */
  createdTimestamp?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of lastEvent across the matching connection */
  lastEvent?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of metadata across the matching connection */
  metadata?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of projectId across the matching connection */
  projectId?: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `Deployment` object types. All fields are combined with a logical ‘and.’ */
export type DeploymentFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<DeploymentFilter>>;
  /** Filter by the object’s `consumerQueryRewardSummaries` relation. */
  consumerQueryRewardSummaries?: InputMaybe<DeploymentToManyConsumerQueryRewardSummaryFilter>;
  /** Some related `consumerQueryRewardSummaries` exist. */
  consumerQueryRewardSummariesExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `consumerQueryRewards` relation. */
  consumerQueryRewards?: InputMaybe<DeploymentToManyConsumerQueryRewardFilter>;
  /** Some related `consumerQueryRewards` exist. */
  consumerQueryRewardsExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `createdBlock` field. */
  createdBlock?: InputMaybe<IntFilter>;
  /** Filter by the object’s `createdTimestamp` field. */
  createdTimestamp?: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `deploymentBoosterSummaries` relation. */
  deploymentBoosterSummaries?: InputMaybe<DeploymentToManyDeploymentBoosterSummaryFilter>;
  /** Some related `deploymentBoosterSummaries` exist. */
  deploymentBoosterSummariesExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `deploymentBoosters` relation. */
  deploymentBoosters?: InputMaybe<DeploymentToManyDeploymentBoosterFilter>;
  /** Some related `deploymentBoosters` exist. */
  deploymentBoostersExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `eraIndexerDeploymentApies` relation. */
  eraIndexerDeploymentApies?: InputMaybe<DeploymentToManyEraIndexerDeploymentApyFilter>;
  /** Some related `eraIndexerDeploymentApies` exist. */
  eraIndexerDeploymentApiesExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<StringFilter>;
  /** Filter by the object’s `indexerAllocationRewardSummaries` relation. */
  indexerAllocationRewardSummaries?: InputMaybe<DeploymentToManyIndexerAllocationRewardSummaryFilter>;
  /** Some related `indexerAllocationRewardSummaries` exist. */
  indexerAllocationRewardSummariesExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `indexerAllocationRewards` relation. */
  indexerAllocationRewards?: InputMaybe<DeploymentToManyIndexerAllocationRewardFilter>;
  /** Some related `indexerAllocationRewards` exist. */
  indexerAllocationRewardsExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `indexerAllocationSummaries` relation. */
  indexerAllocationSummaries?: InputMaybe<DeploymentToManyIndexerAllocationSummaryFilter>;
  /** Some related `indexerAllocationSummaries` exist. */
  indexerAllocationSummariesExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `indexerAllocations` relation. */
  indexerAllocations?: InputMaybe<DeploymentToManyIndexerAllocationFilter>;
  /** Some related `indexerAllocations` exist. */
  indexerAllocationsExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `indexerMissedLabors` relation. */
  indexerMissedLabors?: InputMaybe<DeploymentToManyIndexerMissedLaborFilter>;
  /** Some related `indexerMissedLabors` exist. */
  indexerMissedLaborsExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `indexers` relation. */
  indexers?: InputMaybe<DeploymentToManyIndexerDeploymentFilter>;
  /** Some related `indexers` exist. */
  indexersExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `lastEvent` field. */
  lastEvent?: InputMaybe<StringFilter>;
  /** Filter by the object’s `metadata` field. */
  metadata?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<DeploymentFilter>;
  /** Filter by the object’s `offers` relation. */
  offers?: InputMaybe<DeploymentToManyOfferFilter>;
  /** Some related `offers` exist. */
  offersExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<DeploymentFilter>>;
  /** Filter by the object’s `plans` relation. */
  plans?: InputMaybe<DeploymentToManyPlanFilter>;
  /** Some related `plans` exist. */
  plansExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `project` relation. */
  project?: InputMaybe<ProjectFilter>;
  /** Filter by the object’s `projectId` field. */
  projectId?: InputMaybe<StringFilter>;
  /** Filter by the object’s `serviceAgreements` relation. */
  serviceAgreements?: InputMaybe<DeploymentToManyServiceAgreementFilter>;
  /** Some related `serviceAgreements` exist. */
  serviceAgreementsExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `stateChannels` relation. */
  stateChannels?: InputMaybe<DeploymentToManyStateChannelFilter>;
  /** Some related `stateChannels` exist. */
  stateChannelsExist?: InputMaybe<Scalars['Boolean']['input']>;
};

/** A connection to a list of `Indexer` values, with data from `EraIndexerDeploymentApy`. */
export type DeploymentIndexersByEraIndexerDeploymentApyDeploymentIdAndIndexerIdManyToManyConnection = {
  __typename?: 'DeploymentIndexersByEraIndexerDeploymentApyDeploymentIdAndIndexerIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<IndexerAggregates>;
  /** A list of edges which contains the `Indexer`, info from the `EraIndexerDeploymentApy`, and the cursor to aid in pagination. */
  edges: Array<DeploymentIndexersByEraIndexerDeploymentApyDeploymentIdAndIndexerIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<IndexerAggregates>>;
  /** A list of `Indexer` objects. */
  nodes: Array<Maybe<Indexer>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Indexer` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Indexer` values, with data from `EraIndexerDeploymentApy`. */
export type DeploymentIndexersByEraIndexerDeploymentApyDeploymentIdAndIndexerIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: Array<IndexersGroupBy>;
  having?: InputMaybe<IndexersHavingInput>;
};

/** A `Indexer` edge in the connection, with data from `EraIndexerDeploymentApy`. */
export type DeploymentIndexersByEraIndexerDeploymentApyDeploymentIdAndIndexerIdManyToManyEdge = {
  __typename?: 'DeploymentIndexersByEraIndexerDeploymentApyDeploymentIdAndIndexerIdManyToManyEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `EraIndexerDeploymentApy`. */
  eraIndexerDeploymentApies: EraIndexerDeploymentApiesConnection;
  /** The `Indexer` at the end of the edge. */
  node?: Maybe<Indexer>;
};


/** A `Indexer` edge in the connection, with data from `EraIndexerDeploymentApy`. */
export type DeploymentIndexersByEraIndexerDeploymentApyDeploymentIdAndIndexerIdManyToManyEdgeEraIndexerDeploymentApiesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Era_Indexer_Deployment_Apies_Distinct_Enum>>>;
  filter?: InputMaybe<EraIndexerDeploymentApyFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<EraIndexerDeploymentApiesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

/** A connection to a list of `Indexer` values, with data from `IndexerAllocation`. */
export type DeploymentIndexersByIndexerAllocationDeploymentIdAndIndexerIdManyToManyConnection = {
  __typename?: 'DeploymentIndexersByIndexerAllocationDeploymentIdAndIndexerIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<IndexerAggregates>;
  /** A list of edges which contains the `Indexer`, info from the `IndexerAllocation`, and the cursor to aid in pagination. */
  edges: Array<DeploymentIndexersByIndexerAllocationDeploymentIdAndIndexerIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<IndexerAggregates>>;
  /** A list of `Indexer` objects. */
  nodes: Array<Maybe<Indexer>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Indexer` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Indexer` values, with data from `IndexerAllocation`. */
export type DeploymentIndexersByIndexerAllocationDeploymentIdAndIndexerIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: Array<IndexersGroupBy>;
  having?: InputMaybe<IndexersHavingInput>;
};

/** A `Indexer` edge in the connection, with data from `IndexerAllocation`. */
export type DeploymentIndexersByIndexerAllocationDeploymentIdAndIndexerIdManyToManyEdge = {
  __typename?: 'DeploymentIndexersByIndexerAllocationDeploymentIdAndIndexerIdManyToManyEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `IndexerAllocation`. */
  indexerAllocations: IndexerAllocationsConnection;
  /** The `Indexer` at the end of the edge. */
  node?: Maybe<Indexer>;
};


/** A `Indexer` edge in the connection, with data from `IndexerAllocation`. */
export type DeploymentIndexersByIndexerAllocationDeploymentIdAndIndexerIdManyToManyEdgeIndexerAllocationsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Allocations_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerAllocationFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexerAllocationsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

/** A connection to a list of `Indexer` values, with data from `IndexerAllocationReward`. */
export type DeploymentIndexersByIndexerAllocationRewardDeploymentIdAndIndexerIdManyToManyConnection = {
  __typename?: 'DeploymentIndexersByIndexerAllocationRewardDeploymentIdAndIndexerIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<IndexerAggregates>;
  /** A list of edges which contains the `Indexer`, info from the `IndexerAllocationReward`, and the cursor to aid in pagination. */
  edges: Array<DeploymentIndexersByIndexerAllocationRewardDeploymentIdAndIndexerIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<IndexerAggregates>>;
  /** A list of `Indexer` objects. */
  nodes: Array<Maybe<Indexer>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Indexer` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Indexer` values, with data from `IndexerAllocationReward`. */
export type DeploymentIndexersByIndexerAllocationRewardDeploymentIdAndIndexerIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: Array<IndexersGroupBy>;
  having?: InputMaybe<IndexersHavingInput>;
};

/** A `Indexer` edge in the connection, with data from `IndexerAllocationReward`. */
export type DeploymentIndexersByIndexerAllocationRewardDeploymentIdAndIndexerIdManyToManyEdge = {
  __typename?: 'DeploymentIndexersByIndexerAllocationRewardDeploymentIdAndIndexerIdManyToManyEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `IndexerAllocationReward`. */
  indexerAllocationRewards: IndexerAllocationRewardsConnection;
  /** The `Indexer` at the end of the edge. */
  node?: Maybe<Indexer>;
};


/** A `Indexer` edge in the connection, with data from `IndexerAllocationReward`. */
export type DeploymentIndexersByIndexerAllocationRewardDeploymentIdAndIndexerIdManyToManyEdgeIndexerAllocationRewardsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Allocation_Rewards_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerAllocationRewardFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexerAllocationRewardsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

/** A connection to a list of `Indexer` values, with data from `IndexerAllocationRewardSummary`. */
export type DeploymentIndexersByIndexerAllocationRewardSummaryDeploymentIdAndIndexerIdManyToManyConnection = {
  __typename?: 'DeploymentIndexersByIndexerAllocationRewardSummaryDeploymentIdAndIndexerIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<IndexerAggregates>;
  /** A list of edges which contains the `Indexer`, info from the `IndexerAllocationRewardSummary`, and the cursor to aid in pagination. */
  edges: Array<DeploymentIndexersByIndexerAllocationRewardSummaryDeploymentIdAndIndexerIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<IndexerAggregates>>;
  /** A list of `Indexer` objects. */
  nodes: Array<Maybe<Indexer>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Indexer` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Indexer` values, with data from `IndexerAllocationRewardSummary`. */
export type DeploymentIndexersByIndexerAllocationRewardSummaryDeploymentIdAndIndexerIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: Array<IndexersGroupBy>;
  having?: InputMaybe<IndexersHavingInput>;
};

/** A `Indexer` edge in the connection, with data from `IndexerAllocationRewardSummary`. */
export type DeploymentIndexersByIndexerAllocationRewardSummaryDeploymentIdAndIndexerIdManyToManyEdge = {
  __typename?: 'DeploymentIndexersByIndexerAllocationRewardSummaryDeploymentIdAndIndexerIdManyToManyEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `IndexerAllocationRewardSummary`. */
  indexerAllocationRewardSummaries: IndexerAllocationRewardSummariesConnection;
  /** The `Indexer` at the end of the edge. */
  node?: Maybe<Indexer>;
};


/** A `Indexer` edge in the connection, with data from `IndexerAllocationRewardSummary`. */
export type DeploymentIndexersByIndexerAllocationRewardSummaryDeploymentIdAndIndexerIdManyToManyEdgeIndexerAllocationRewardSummariesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Allocation_Reward_Summaries_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerAllocationRewardSummaryFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexerAllocationRewardSummariesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

/** A connection to a list of `Indexer` values, with data from `IndexerAllocationSummary`. */
export type DeploymentIndexersByIndexerAllocationSummaryDeploymentIdAndIndexerIdManyToManyConnection = {
  __typename?: 'DeploymentIndexersByIndexerAllocationSummaryDeploymentIdAndIndexerIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<IndexerAggregates>;
  /** A list of edges which contains the `Indexer`, info from the `IndexerAllocationSummary`, and the cursor to aid in pagination. */
  edges: Array<DeploymentIndexersByIndexerAllocationSummaryDeploymentIdAndIndexerIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<IndexerAggregates>>;
  /** A list of `Indexer` objects. */
  nodes: Array<Maybe<Indexer>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Indexer` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Indexer` values, with data from `IndexerAllocationSummary`. */
export type DeploymentIndexersByIndexerAllocationSummaryDeploymentIdAndIndexerIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: Array<IndexersGroupBy>;
  having?: InputMaybe<IndexersHavingInput>;
};

/** A `Indexer` edge in the connection, with data from `IndexerAllocationSummary`. */
export type DeploymentIndexersByIndexerAllocationSummaryDeploymentIdAndIndexerIdManyToManyEdge = {
  __typename?: 'DeploymentIndexersByIndexerAllocationSummaryDeploymentIdAndIndexerIdManyToManyEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `IndexerAllocationSummary`. */
  indexerAllocationSummaries: IndexerAllocationSummariesConnection;
  /** The `Indexer` at the end of the edge. */
  node?: Maybe<Indexer>;
};


/** A `Indexer` edge in the connection, with data from `IndexerAllocationSummary`. */
export type DeploymentIndexersByIndexerAllocationSummaryDeploymentIdAndIndexerIdManyToManyEdgeIndexerAllocationSummariesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Allocation_Summaries_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerAllocationSummaryFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexerAllocationSummariesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

/** A connection to a list of `Indexer` values, with data from `IndexerDeployment`. */
export type DeploymentIndexersByIndexerDeploymentDeploymentIdAndIndexerIdManyToManyConnection = {
  __typename?: 'DeploymentIndexersByIndexerDeploymentDeploymentIdAndIndexerIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<IndexerAggregates>;
  /** A list of edges which contains the `Indexer`, info from the `IndexerDeployment`, and the cursor to aid in pagination. */
  edges: Array<DeploymentIndexersByIndexerDeploymentDeploymentIdAndIndexerIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<IndexerAggregates>>;
  /** A list of `Indexer` objects. */
  nodes: Array<Maybe<Indexer>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Indexer` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Indexer` values, with data from `IndexerDeployment`. */
export type DeploymentIndexersByIndexerDeploymentDeploymentIdAndIndexerIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: Array<IndexersGroupBy>;
  having?: InputMaybe<IndexersHavingInput>;
};

/** A `Indexer` edge in the connection, with data from `IndexerDeployment`. */
export type DeploymentIndexersByIndexerDeploymentDeploymentIdAndIndexerIdManyToManyEdge = {
  __typename?: 'DeploymentIndexersByIndexerDeploymentDeploymentIdAndIndexerIdManyToManyEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `Indexer` at the end of the edge. */
  node?: Maybe<Indexer>;
  /** Reads and enables pagination through a set of `IndexerDeployment`. */
  projects: IndexerDeploymentsConnection;
};


/** A `Indexer` edge in the connection, with data from `IndexerDeployment`. */
export type DeploymentIndexersByIndexerDeploymentDeploymentIdAndIndexerIdManyToManyEdgeProjectsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Deployments_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerDeploymentFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexerDeploymentsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

/** A connection to a list of `Indexer` values, with data from `IndexerMissedLabor`. */
export type DeploymentIndexersByIndexerMissedLaborDeploymentIdAndIndexerIdManyToManyConnection = {
  __typename?: 'DeploymentIndexersByIndexerMissedLaborDeploymentIdAndIndexerIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<IndexerAggregates>;
  /** A list of edges which contains the `Indexer`, info from the `IndexerMissedLabor`, and the cursor to aid in pagination. */
  edges: Array<DeploymentIndexersByIndexerMissedLaborDeploymentIdAndIndexerIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<IndexerAggregates>>;
  /** A list of `Indexer` objects. */
  nodes: Array<Maybe<Indexer>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Indexer` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Indexer` values, with data from `IndexerMissedLabor`. */
export type DeploymentIndexersByIndexerMissedLaborDeploymentIdAndIndexerIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: Array<IndexersGroupBy>;
  having?: InputMaybe<IndexersHavingInput>;
};

/** A `Indexer` edge in the connection, with data from `IndexerMissedLabor`. */
export type DeploymentIndexersByIndexerMissedLaborDeploymentIdAndIndexerIdManyToManyEdge = {
  __typename?: 'DeploymentIndexersByIndexerMissedLaborDeploymentIdAndIndexerIdManyToManyEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `IndexerMissedLabor`. */
  indexerMissedLabors: IndexerMissedLaborsConnection;
  /** The `Indexer` at the end of the edge. */
  node?: Maybe<Indexer>;
};


/** A `Indexer` edge in the connection, with data from `IndexerMissedLabor`. */
export type DeploymentIndexersByIndexerMissedLaborDeploymentIdAndIndexerIdManyToManyEdgeIndexerMissedLaborsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Missed_Labors_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerMissedLaborFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexerMissedLaborsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

export type DeploymentMaxAggregateFilter = {
  createdBlock?: InputMaybe<IntFilter>;
};

export type DeploymentMaxAggregates = {
  __typename?: 'DeploymentMaxAggregates';
  /** Maximum of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['Int']['output']>;
};

export type DeploymentMinAggregateFilter = {
  createdBlock?: InputMaybe<IntFilter>;
};

export type DeploymentMinAggregates = {
  __typename?: 'DeploymentMinAggregates';
  /** Minimum of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['Int']['output']>;
};

/** A connection to a list of `PlanTemplate` values, with data from `Offer`. */
export type DeploymentPlanTemplatesByOfferDeploymentIdAndPlanTemplateIdManyToManyConnection = {
  __typename?: 'DeploymentPlanTemplatesByOfferDeploymentIdAndPlanTemplateIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<PlanTemplateAggregates>;
  /** A list of edges which contains the `PlanTemplate`, info from the `Offer`, and the cursor to aid in pagination. */
  edges: Array<DeploymentPlanTemplatesByOfferDeploymentIdAndPlanTemplateIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<PlanTemplateAggregates>>;
  /** A list of `PlanTemplate` objects. */
  nodes: Array<Maybe<PlanTemplate>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `PlanTemplate` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `PlanTemplate` values, with data from `Offer`. */
export type DeploymentPlanTemplatesByOfferDeploymentIdAndPlanTemplateIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: Array<PlanTemplatesGroupBy>;
  having?: InputMaybe<PlanTemplatesHavingInput>;
};

/** A `PlanTemplate` edge in the connection, with data from `Offer`. */
export type DeploymentPlanTemplatesByOfferDeploymentIdAndPlanTemplateIdManyToManyEdge = {
  __typename?: 'DeploymentPlanTemplatesByOfferDeploymentIdAndPlanTemplateIdManyToManyEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `PlanTemplate` at the end of the edge. */
  node?: Maybe<PlanTemplate>;
  /** Reads and enables pagination through a set of `Offer`. */
  offers: OffersConnection;
};


/** A `PlanTemplate` edge in the connection, with data from `Offer`. */
export type DeploymentPlanTemplatesByOfferDeploymentIdAndPlanTemplateIdManyToManyEdgeOffersArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Offers_Distinct_Enum>>>;
  filter?: InputMaybe<OfferFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<OffersOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

/** A connection to a list of `PlanTemplate` values, with data from `Plan`. */
export type DeploymentPlanTemplatesByPlanDeploymentIdAndPlanTemplateIdManyToManyConnection = {
  __typename?: 'DeploymentPlanTemplatesByPlanDeploymentIdAndPlanTemplateIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<PlanTemplateAggregates>;
  /** A list of edges which contains the `PlanTemplate`, info from the `Plan`, and the cursor to aid in pagination. */
  edges: Array<DeploymentPlanTemplatesByPlanDeploymentIdAndPlanTemplateIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<PlanTemplateAggregates>>;
  /** A list of `PlanTemplate` objects. */
  nodes: Array<Maybe<PlanTemplate>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `PlanTemplate` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `PlanTemplate` values, with data from `Plan`. */
export type DeploymentPlanTemplatesByPlanDeploymentIdAndPlanTemplateIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: Array<PlanTemplatesGroupBy>;
  having?: InputMaybe<PlanTemplatesHavingInput>;
};

/** A `PlanTemplate` edge in the connection, with data from `Plan`. */
export type DeploymentPlanTemplatesByPlanDeploymentIdAndPlanTemplateIdManyToManyEdge = {
  __typename?: 'DeploymentPlanTemplatesByPlanDeploymentIdAndPlanTemplateIdManyToManyEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `PlanTemplate` at the end of the edge. */
  node?: Maybe<PlanTemplate>;
  /** Reads and enables pagination through a set of `Plan`. */
  plans: PlansConnection;
};


/** A `PlanTemplate` edge in the connection, with data from `Plan`. */
export type DeploymentPlanTemplatesByPlanDeploymentIdAndPlanTemplateIdManyToManyEdgePlansArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Plans_Distinct_Enum>>>;
  filter?: InputMaybe<PlanFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<PlansOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

/** A connection to a list of `PlanTemplate` values, with data from `ServiceAgreement`. */
export type DeploymentPlanTemplatesByServiceAgreementDeploymentIdAndPlanTemplateIdManyToManyConnection = {
  __typename?: 'DeploymentPlanTemplatesByServiceAgreementDeploymentIdAndPlanTemplateIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<PlanTemplateAggregates>;
  /** A list of edges which contains the `PlanTemplate`, info from the `ServiceAgreement`, and the cursor to aid in pagination. */
  edges: Array<DeploymentPlanTemplatesByServiceAgreementDeploymentIdAndPlanTemplateIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<PlanTemplateAggregates>>;
  /** A list of `PlanTemplate` objects. */
  nodes: Array<Maybe<PlanTemplate>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `PlanTemplate` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `PlanTemplate` values, with data from `ServiceAgreement`. */
export type DeploymentPlanTemplatesByServiceAgreementDeploymentIdAndPlanTemplateIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: Array<PlanTemplatesGroupBy>;
  having?: InputMaybe<PlanTemplatesHavingInput>;
};

/** A `PlanTemplate` edge in the connection, with data from `ServiceAgreement`. */
export type DeploymentPlanTemplatesByServiceAgreementDeploymentIdAndPlanTemplateIdManyToManyEdge = {
  __typename?: 'DeploymentPlanTemplatesByServiceAgreementDeploymentIdAndPlanTemplateIdManyToManyEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `PlanTemplate` at the end of the edge. */
  node?: Maybe<PlanTemplate>;
  /** Reads and enables pagination through a set of `ServiceAgreement`. */
  serviceAgreements: ServiceAgreementsConnection;
};


/** A `PlanTemplate` edge in the connection, with data from `ServiceAgreement`. */
export type DeploymentPlanTemplatesByServiceAgreementDeploymentIdAndPlanTemplateIdManyToManyEdgeServiceAgreementsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Service_Agreements_Distinct_Enum>>>;
  filter?: InputMaybe<ServiceAgreementFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ServiceAgreementsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

/** A connection to a list of `Project` values, with data from `ConsumerQueryReward`. */
export type DeploymentProjectsByConsumerQueryRewardDeploymentIdAndProjectIdManyToManyConnection = {
  __typename?: 'DeploymentProjectsByConsumerQueryRewardDeploymentIdAndProjectIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<ProjectAggregates>;
  /** A list of edges which contains the `Project`, info from the `ConsumerQueryReward`, and the cursor to aid in pagination. */
  edges: Array<DeploymentProjectsByConsumerQueryRewardDeploymentIdAndProjectIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<ProjectAggregates>>;
  /** A list of `Project` objects. */
  nodes: Array<Maybe<Project>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Project` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Project` values, with data from `ConsumerQueryReward`. */
export type DeploymentProjectsByConsumerQueryRewardDeploymentIdAndProjectIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: Array<ProjectsGroupBy>;
  having?: InputMaybe<ProjectsHavingInput>;
};

/** A `Project` edge in the connection, with data from `ConsumerQueryReward`. */
export type DeploymentProjectsByConsumerQueryRewardDeploymentIdAndProjectIdManyToManyEdge = {
  __typename?: 'DeploymentProjectsByConsumerQueryRewardDeploymentIdAndProjectIdManyToManyEdge';
  /** Reads and enables pagination through a set of `ConsumerQueryReward`. */
  consumerQueryRewards: ConsumerQueryRewardsConnection;
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `Project` at the end of the edge. */
  node?: Maybe<Project>;
};


/** A `Project` edge in the connection, with data from `ConsumerQueryReward`. */
export type DeploymentProjectsByConsumerQueryRewardDeploymentIdAndProjectIdManyToManyEdgeConsumerQueryRewardsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Consumer_Query_Rewards_Distinct_Enum>>>;
  filter?: InputMaybe<ConsumerQueryRewardFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ConsumerQueryRewardsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

/** A connection to a list of `Project` values, with data from `ConsumerQueryRewardSummary`. */
export type DeploymentProjectsByConsumerQueryRewardSummaryDeploymentIdAndProjectIdManyToManyConnection = {
  __typename?: 'DeploymentProjectsByConsumerQueryRewardSummaryDeploymentIdAndProjectIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<ProjectAggregates>;
  /** A list of edges which contains the `Project`, info from the `ConsumerQueryRewardSummary`, and the cursor to aid in pagination. */
  edges: Array<DeploymentProjectsByConsumerQueryRewardSummaryDeploymentIdAndProjectIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<ProjectAggregates>>;
  /** A list of `Project` objects. */
  nodes: Array<Maybe<Project>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Project` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Project` values, with data from `ConsumerQueryRewardSummary`. */
export type DeploymentProjectsByConsumerQueryRewardSummaryDeploymentIdAndProjectIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: Array<ProjectsGroupBy>;
  having?: InputMaybe<ProjectsHavingInput>;
};

/** A `Project` edge in the connection, with data from `ConsumerQueryRewardSummary`. */
export type DeploymentProjectsByConsumerQueryRewardSummaryDeploymentIdAndProjectIdManyToManyEdge = {
  __typename?: 'DeploymentProjectsByConsumerQueryRewardSummaryDeploymentIdAndProjectIdManyToManyEdge';
  /** Reads and enables pagination through a set of `ConsumerQueryRewardSummary`. */
  consumerQueryRewardSummaries: ConsumerQueryRewardSummariesConnection;
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `Project` at the end of the edge. */
  node?: Maybe<Project>;
};


/** A `Project` edge in the connection, with data from `ConsumerQueryRewardSummary`. */
export type DeploymentProjectsByConsumerQueryRewardSummaryDeploymentIdAndProjectIdManyToManyEdgeConsumerQueryRewardSummariesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Consumer_Query_Reward_Summaries_Distinct_Enum>>>;
  filter?: InputMaybe<ConsumerQueryRewardSummaryFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ConsumerQueryRewardSummariesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

/** A connection to a list of `Project` values, with data from `DeploymentBooster`. */
export type DeploymentProjectsByDeploymentBoosterDeploymentIdAndProjectIdManyToManyConnection = {
  __typename?: 'DeploymentProjectsByDeploymentBoosterDeploymentIdAndProjectIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<ProjectAggregates>;
  /** A list of edges which contains the `Project`, info from the `DeploymentBooster`, and the cursor to aid in pagination. */
  edges: Array<DeploymentProjectsByDeploymentBoosterDeploymentIdAndProjectIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<ProjectAggregates>>;
  /** A list of `Project` objects. */
  nodes: Array<Maybe<Project>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Project` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Project` values, with data from `DeploymentBooster`. */
export type DeploymentProjectsByDeploymentBoosterDeploymentIdAndProjectIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: Array<ProjectsGroupBy>;
  having?: InputMaybe<ProjectsHavingInput>;
};

/** A `Project` edge in the connection, with data from `DeploymentBooster`. */
export type DeploymentProjectsByDeploymentBoosterDeploymentIdAndProjectIdManyToManyEdge = {
  __typename?: 'DeploymentProjectsByDeploymentBoosterDeploymentIdAndProjectIdManyToManyEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `DeploymentBooster`. */
  deploymentBoosters: DeploymentBoostersConnection;
  /** The `Project` at the end of the edge. */
  node?: Maybe<Project>;
};


/** A `Project` edge in the connection, with data from `DeploymentBooster`. */
export type DeploymentProjectsByDeploymentBoosterDeploymentIdAndProjectIdManyToManyEdgeDeploymentBoostersArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Deployment_Boosters_Distinct_Enum>>>;
  filter?: InputMaybe<DeploymentBoosterFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<DeploymentBoostersOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

/** A connection to a list of `Project` values, with data from `DeploymentBoosterSummary`. */
export type DeploymentProjectsByDeploymentBoosterSummaryDeploymentIdAndProjectIdManyToManyConnection = {
  __typename?: 'DeploymentProjectsByDeploymentBoosterSummaryDeploymentIdAndProjectIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<ProjectAggregates>;
  /** A list of edges which contains the `Project`, info from the `DeploymentBoosterSummary`, and the cursor to aid in pagination. */
  edges: Array<DeploymentProjectsByDeploymentBoosterSummaryDeploymentIdAndProjectIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<ProjectAggregates>>;
  /** A list of `Project` objects. */
  nodes: Array<Maybe<Project>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Project` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Project` values, with data from `DeploymentBoosterSummary`. */
export type DeploymentProjectsByDeploymentBoosterSummaryDeploymentIdAndProjectIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: Array<ProjectsGroupBy>;
  having?: InputMaybe<ProjectsHavingInput>;
};

/** A `Project` edge in the connection, with data from `DeploymentBoosterSummary`. */
export type DeploymentProjectsByDeploymentBoosterSummaryDeploymentIdAndProjectIdManyToManyEdge = {
  __typename?: 'DeploymentProjectsByDeploymentBoosterSummaryDeploymentIdAndProjectIdManyToManyEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `DeploymentBoosterSummary`. */
  deploymentBoosterSummaries: DeploymentBoosterSummariesConnection;
  /** The `Project` at the end of the edge. */
  node?: Maybe<Project>;
};


/** A `Project` edge in the connection, with data from `DeploymentBoosterSummary`. */
export type DeploymentProjectsByDeploymentBoosterSummaryDeploymentIdAndProjectIdManyToManyEdgeDeploymentBoosterSummariesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Deployment_Booster_Summaries_Distinct_Enum>>>;
  filter?: InputMaybe<DeploymentBoosterSummaryFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<DeploymentBoosterSummariesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

/** A connection to a list of `Project` values, with data from `IndexerAllocation`. */
export type DeploymentProjectsByIndexerAllocationDeploymentIdAndProjectIdManyToManyConnection = {
  __typename?: 'DeploymentProjectsByIndexerAllocationDeploymentIdAndProjectIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<ProjectAggregates>;
  /** A list of edges which contains the `Project`, info from the `IndexerAllocation`, and the cursor to aid in pagination. */
  edges: Array<DeploymentProjectsByIndexerAllocationDeploymentIdAndProjectIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<ProjectAggregates>>;
  /** A list of `Project` objects. */
  nodes: Array<Maybe<Project>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Project` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Project` values, with data from `IndexerAllocation`. */
export type DeploymentProjectsByIndexerAllocationDeploymentIdAndProjectIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: Array<ProjectsGroupBy>;
  having?: InputMaybe<ProjectsHavingInput>;
};

/** A `Project` edge in the connection, with data from `IndexerAllocation`. */
export type DeploymentProjectsByIndexerAllocationDeploymentIdAndProjectIdManyToManyEdge = {
  __typename?: 'DeploymentProjectsByIndexerAllocationDeploymentIdAndProjectIdManyToManyEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `IndexerAllocation`. */
  indexerAllocations: IndexerAllocationsConnection;
  /** The `Project` at the end of the edge. */
  node?: Maybe<Project>;
};


/** A `Project` edge in the connection, with data from `IndexerAllocation`. */
export type DeploymentProjectsByIndexerAllocationDeploymentIdAndProjectIdManyToManyEdgeIndexerAllocationsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Allocations_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerAllocationFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexerAllocationsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

/** A connection to a list of `Project` values, with data from `IndexerAllocationReward`. */
export type DeploymentProjectsByIndexerAllocationRewardDeploymentIdAndProjectIdManyToManyConnection = {
  __typename?: 'DeploymentProjectsByIndexerAllocationRewardDeploymentIdAndProjectIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<ProjectAggregates>;
  /** A list of edges which contains the `Project`, info from the `IndexerAllocationReward`, and the cursor to aid in pagination. */
  edges: Array<DeploymentProjectsByIndexerAllocationRewardDeploymentIdAndProjectIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<ProjectAggregates>>;
  /** A list of `Project` objects. */
  nodes: Array<Maybe<Project>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Project` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Project` values, with data from `IndexerAllocationReward`. */
export type DeploymentProjectsByIndexerAllocationRewardDeploymentIdAndProjectIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: Array<ProjectsGroupBy>;
  having?: InputMaybe<ProjectsHavingInput>;
};

/** A `Project` edge in the connection, with data from `IndexerAllocationReward`. */
export type DeploymentProjectsByIndexerAllocationRewardDeploymentIdAndProjectIdManyToManyEdge = {
  __typename?: 'DeploymentProjectsByIndexerAllocationRewardDeploymentIdAndProjectIdManyToManyEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `IndexerAllocationReward`. */
  indexerAllocationRewards: IndexerAllocationRewardsConnection;
  /** The `Project` at the end of the edge. */
  node?: Maybe<Project>;
};


/** A `Project` edge in the connection, with data from `IndexerAllocationReward`. */
export type DeploymentProjectsByIndexerAllocationRewardDeploymentIdAndProjectIdManyToManyEdgeIndexerAllocationRewardsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Allocation_Rewards_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerAllocationRewardFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexerAllocationRewardsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

/** A connection to a list of `Project` values, with data from `IndexerAllocationRewardSummary`. */
export type DeploymentProjectsByIndexerAllocationRewardSummaryDeploymentIdAndProjectIdManyToManyConnection = {
  __typename?: 'DeploymentProjectsByIndexerAllocationRewardSummaryDeploymentIdAndProjectIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<ProjectAggregates>;
  /** A list of edges which contains the `Project`, info from the `IndexerAllocationRewardSummary`, and the cursor to aid in pagination. */
  edges: Array<DeploymentProjectsByIndexerAllocationRewardSummaryDeploymentIdAndProjectIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<ProjectAggregates>>;
  /** A list of `Project` objects. */
  nodes: Array<Maybe<Project>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Project` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Project` values, with data from `IndexerAllocationRewardSummary`. */
export type DeploymentProjectsByIndexerAllocationRewardSummaryDeploymentIdAndProjectIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: Array<ProjectsGroupBy>;
  having?: InputMaybe<ProjectsHavingInput>;
};

/** A `Project` edge in the connection, with data from `IndexerAllocationRewardSummary`. */
export type DeploymentProjectsByIndexerAllocationRewardSummaryDeploymentIdAndProjectIdManyToManyEdge = {
  __typename?: 'DeploymentProjectsByIndexerAllocationRewardSummaryDeploymentIdAndProjectIdManyToManyEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `IndexerAllocationRewardSummary`. */
  indexerAllocationRewardSummaries: IndexerAllocationRewardSummariesConnection;
  /** The `Project` at the end of the edge. */
  node?: Maybe<Project>;
};


/** A `Project` edge in the connection, with data from `IndexerAllocationRewardSummary`. */
export type DeploymentProjectsByIndexerAllocationRewardSummaryDeploymentIdAndProjectIdManyToManyEdgeIndexerAllocationRewardSummariesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Allocation_Reward_Summaries_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerAllocationRewardSummaryFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexerAllocationRewardSummariesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

/** A connection to a list of `Project` values, with data from `IndexerAllocationSummary`. */
export type DeploymentProjectsByIndexerAllocationSummaryDeploymentIdAndProjectIdManyToManyConnection = {
  __typename?: 'DeploymentProjectsByIndexerAllocationSummaryDeploymentIdAndProjectIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<ProjectAggregates>;
  /** A list of edges which contains the `Project`, info from the `IndexerAllocationSummary`, and the cursor to aid in pagination. */
  edges: Array<DeploymentProjectsByIndexerAllocationSummaryDeploymentIdAndProjectIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<ProjectAggregates>>;
  /** A list of `Project` objects. */
  nodes: Array<Maybe<Project>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Project` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Project` values, with data from `IndexerAllocationSummary`. */
export type DeploymentProjectsByIndexerAllocationSummaryDeploymentIdAndProjectIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: Array<ProjectsGroupBy>;
  having?: InputMaybe<ProjectsHavingInput>;
};

/** A `Project` edge in the connection, with data from `IndexerAllocationSummary`. */
export type DeploymentProjectsByIndexerAllocationSummaryDeploymentIdAndProjectIdManyToManyEdge = {
  __typename?: 'DeploymentProjectsByIndexerAllocationSummaryDeploymentIdAndProjectIdManyToManyEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `IndexerAllocationSummary`. */
  indexerAllocationSummaries: IndexerAllocationSummariesConnection;
  /** The `Project` at the end of the edge. */
  node?: Maybe<Project>;
};


/** A `Project` edge in the connection, with data from `IndexerAllocationSummary`. */
export type DeploymentProjectsByIndexerAllocationSummaryDeploymentIdAndProjectIdManyToManyEdgeIndexerAllocationSummariesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Allocation_Summaries_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerAllocationSummaryFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexerAllocationSummariesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

export type DeploymentStddevPopulationAggregateFilter = {
  createdBlock?: InputMaybe<BigFloatFilter>;
};

export type DeploymentStddevPopulationAggregates = {
  __typename?: 'DeploymentStddevPopulationAggregates';
  /** Population standard deviation of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
};

export type DeploymentStddevSampleAggregateFilter = {
  createdBlock?: InputMaybe<BigFloatFilter>;
};

export type DeploymentStddevSampleAggregates = {
  __typename?: 'DeploymentStddevSampleAggregates';
  /** Sample standard deviation of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
};

export type DeploymentSumAggregateFilter = {
  createdBlock?: InputMaybe<BigIntFilter>;
};

export type DeploymentSumAggregates = {
  __typename?: 'DeploymentSumAggregates';
  /** Sum of createdBlock across the matching connection */
  createdBlock: Scalars['BigInt']['output'];
};

/** A filter to be used against many `ConsumerQueryReward` object types. All fields are combined with a logical ‘and.’ */
export type DeploymentToManyConsumerQueryRewardFilter = {
  /** Aggregates across related `ConsumerQueryReward` match the filter criteria. */
  aggregates?: InputMaybe<ConsumerQueryRewardAggregatesFilter>;
  /** Every related `ConsumerQueryReward` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<ConsumerQueryRewardFilter>;
  /** No related `ConsumerQueryReward` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<ConsumerQueryRewardFilter>;
  /** Some related `ConsumerQueryReward` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<ConsumerQueryRewardFilter>;
};

/** A filter to be used against many `ConsumerQueryRewardSummary` object types. All fields are combined with a logical ‘and.’ */
export type DeploymentToManyConsumerQueryRewardSummaryFilter = {
  /** Aggregates across related `ConsumerQueryRewardSummary` match the filter criteria. */
  aggregates?: InputMaybe<ConsumerQueryRewardSummaryAggregatesFilter>;
  /** Every related `ConsumerQueryRewardSummary` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<ConsumerQueryRewardSummaryFilter>;
  /** No related `ConsumerQueryRewardSummary` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<ConsumerQueryRewardSummaryFilter>;
  /** Some related `ConsumerQueryRewardSummary` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<ConsumerQueryRewardSummaryFilter>;
};

/** A filter to be used against many `DeploymentBooster` object types. All fields are combined with a logical ‘and.’ */
export type DeploymentToManyDeploymentBoosterFilter = {
  /** Aggregates across related `DeploymentBooster` match the filter criteria. */
  aggregates?: InputMaybe<DeploymentBoosterAggregatesFilter>;
  /** Every related `DeploymentBooster` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<DeploymentBoosterFilter>;
  /** No related `DeploymentBooster` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<DeploymentBoosterFilter>;
  /** Some related `DeploymentBooster` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<DeploymentBoosterFilter>;
};

/** A filter to be used against many `DeploymentBoosterSummary` object types. All fields are combined with a logical ‘and.’ */
export type DeploymentToManyDeploymentBoosterSummaryFilter = {
  /** Aggregates across related `DeploymentBoosterSummary` match the filter criteria. */
  aggregates?: InputMaybe<DeploymentBoosterSummaryAggregatesFilter>;
  /** Every related `DeploymentBoosterSummary` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<DeploymentBoosterSummaryFilter>;
  /** No related `DeploymentBoosterSummary` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<DeploymentBoosterSummaryFilter>;
  /** Some related `DeploymentBoosterSummary` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<DeploymentBoosterSummaryFilter>;
};

/** A filter to be used against many `EraIndexerDeploymentApy` object types. All fields are combined with a logical ‘and.’ */
export type DeploymentToManyEraIndexerDeploymentApyFilter = {
  /** Aggregates across related `EraIndexerDeploymentApy` match the filter criteria. */
  aggregates?: InputMaybe<EraIndexerDeploymentApyAggregatesFilter>;
  /** Every related `EraIndexerDeploymentApy` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<EraIndexerDeploymentApyFilter>;
  /** No related `EraIndexerDeploymentApy` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<EraIndexerDeploymentApyFilter>;
  /** Some related `EraIndexerDeploymentApy` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<EraIndexerDeploymentApyFilter>;
};

/** A filter to be used against many `IndexerAllocation` object types. All fields are combined with a logical ‘and.’ */
export type DeploymentToManyIndexerAllocationFilter = {
  /** Aggregates across related `IndexerAllocation` match the filter criteria. */
  aggregates?: InputMaybe<IndexerAllocationAggregatesFilter>;
  /** Every related `IndexerAllocation` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<IndexerAllocationFilter>;
  /** No related `IndexerAllocation` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<IndexerAllocationFilter>;
  /** Some related `IndexerAllocation` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<IndexerAllocationFilter>;
};

/** A filter to be used against many `IndexerAllocationReward` object types. All fields are combined with a logical ‘and.’ */
export type DeploymentToManyIndexerAllocationRewardFilter = {
  /** Aggregates across related `IndexerAllocationReward` match the filter criteria. */
  aggregates?: InputMaybe<IndexerAllocationRewardAggregatesFilter>;
  /** Every related `IndexerAllocationReward` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<IndexerAllocationRewardFilter>;
  /** No related `IndexerAllocationReward` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<IndexerAllocationRewardFilter>;
  /** Some related `IndexerAllocationReward` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<IndexerAllocationRewardFilter>;
};

/** A filter to be used against many `IndexerAllocationRewardSummary` object types. All fields are combined with a logical ‘and.’ */
export type DeploymentToManyIndexerAllocationRewardSummaryFilter = {
  /** Aggregates across related `IndexerAllocationRewardSummary` match the filter criteria. */
  aggregates?: InputMaybe<IndexerAllocationRewardSummaryAggregatesFilter>;
  /** Every related `IndexerAllocationRewardSummary` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<IndexerAllocationRewardSummaryFilter>;
  /** No related `IndexerAllocationRewardSummary` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<IndexerAllocationRewardSummaryFilter>;
  /** Some related `IndexerAllocationRewardSummary` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<IndexerAllocationRewardSummaryFilter>;
};

/** A filter to be used against many `IndexerAllocationSummary` object types. All fields are combined with a logical ‘and.’ */
export type DeploymentToManyIndexerAllocationSummaryFilter = {
  /** Aggregates across related `IndexerAllocationSummary` match the filter criteria. */
  aggregates?: InputMaybe<IndexerAllocationSummaryAggregatesFilter>;
  /** Every related `IndexerAllocationSummary` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<IndexerAllocationSummaryFilter>;
  /** No related `IndexerAllocationSummary` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<IndexerAllocationSummaryFilter>;
  /** Some related `IndexerAllocationSummary` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<IndexerAllocationSummaryFilter>;
};

/** A filter to be used against many `IndexerDeployment` object types. All fields are combined with a logical ‘and.’ */
export type DeploymentToManyIndexerDeploymentFilter = {
  /** Aggregates across related `IndexerDeployment` match the filter criteria. */
  aggregates?: InputMaybe<IndexerDeploymentAggregatesFilter>;
  /** Every related `IndexerDeployment` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<IndexerDeploymentFilter>;
  /** No related `IndexerDeployment` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<IndexerDeploymentFilter>;
  /** Some related `IndexerDeployment` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<IndexerDeploymentFilter>;
};

/** A filter to be used against many `IndexerMissedLabor` object types. All fields are combined with a logical ‘and.’ */
export type DeploymentToManyIndexerMissedLaborFilter = {
  /** Aggregates across related `IndexerMissedLabor` match the filter criteria. */
  aggregates?: InputMaybe<IndexerMissedLaborAggregatesFilter>;
  /** Every related `IndexerMissedLabor` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<IndexerMissedLaborFilter>;
  /** No related `IndexerMissedLabor` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<IndexerMissedLaborFilter>;
  /** Some related `IndexerMissedLabor` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<IndexerMissedLaborFilter>;
};

/** A filter to be used against many `Offer` object types. All fields are combined with a logical ‘and.’ */
export type DeploymentToManyOfferFilter = {
  /** Aggregates across related `Offer` match the filter criteria. */
  aggregates?: InputMaybe<OfferAggregatesFilter>;
  /** Every related `Offer` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<OfferFilter>;
  /** No related `Offer` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<OfferFilter>;
  /** Some related `Offer` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<OfferFilter>;
};

/** A filter to be used against many `Plan` object types. All fields are combined with a logical ‘and.’ */
export type DeploymentToManyPlanFilter = {
  /** Aggregates across related `Plan` match the filter criteria. */
  aggregates?: InputMaybe<PlanAggregatesFilter>;
  /** Every related `Plan` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<PlanFilter>;
  /** No related `Plan` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<PlanFilter>;
  /** Some related `Plan` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<PlanFilter>;
};

/** A filter to be used against many `ServiceAgreement` object types. All fields are combined with a logical ‘and.’ */
export type DeploymentToManyServiceAgreementFilter = {
  /** Aggregates across related `ServiceAgreement` match the filter criteria. */
  aggregates?: InputMaybe<ServiceAgreementAggregatesFilter>;
  /** Every related `ServiceAgreement` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<ServiceAgreementFilter>;
  /** No related `ServiceAgreement` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<ServiceAgreementFilter>;
  /** Some related `ServiceAgreement` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<ServiceAgreementFilter>;
};

/** A filter to be used against many `StateChannel` object types. All fields are combined with a logical ‘and.’ */
export type DeploymentToManyStateChannelFilter = {
  /** Aggregates across related `StateChannel` match the filter criteria. */
  aggregates?: InputMaybe<StateChannelAggregatesFilter>;
  /** Every related `StateChannel` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<StateChannelFilter>;
  /** No related `StateChannel` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<StateChannelFilter>;
  /** Some related `StateChannel` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<StateChannelFilter>;
};

export type DeploymentVariancePopulationAggregateFilter = {
  createdBlock?: InputMaybe<BigFloatFilter>;
};

export type DeploymentVariancePopulationAggregates = {
  __typename?: 'DeploymentVariancePopulationAggregates';
  /** Population variance of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
};

export type DeploymentVarianceSampleAggregateFilter = {
  createdBlock?: InputMaybe<BigFloatFilter>;
};

export type DeploymentVarianceSampleAggregates = {
  __typename?: 'DeploymentVarianceSampleAggregates';
  /** Sample variance of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `Deployment` values. */
export type DeploymentsConnection = {
  __typename?: 'DeploymentsConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<DeploymentAggregates>;
  /** A list of edges which contains the `Deployment` and cursor to aid in pagination. */
  edges: Array<DeploymentsEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<DeploymentAggregates>>;
  /** A list of `Deployment` objects. */
  nodes: Array<Maybe<Deployment>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Deployment` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Deployment` values. */
export type DeploymentsConnectionGroupedAggregatesArgs = {
  groupBy: Array<DeploymentsGroupBy>;
  having?: InputMaybe<DeploymentsHavingInput>;
};

/** A `Deployment` edge in the connection. */
export type DeploymentsEdge = {
  __typename?: 'DeploymentsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `Deployment` at the end of the edge. */
  node?: Maybe<Deployment>;
};

/** Grouping methods for `Deployment` for usage during aggregation. */
export enum DeploymentsGroupBy {
  CreatedBlock = 'CREATED_BLOCK',
  CreatedTimestamp = 'CREATED_TIMESTAMP',
  CreatedTimestampTruncatedToDay = 'CREATED_TIMESTAMP_TRUNCATED_TO_DAY',
  CreatedTimestampTruncatedToHour = 'CREATED_TIMESTAMP_TRUNCATED_TO_HOUR',
  Id = 'ID',
  LastEvent = 'LAST_EVENT',
  Metadata = 'METADATA',
  ProjectId = 'PROJECT_ID'
}

export type DeploymentsHavingAverageInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
  createdTimestamp?: InputMaybe<HavingDatetimeFilter>;
};

export type DeploymentsHavingDistinctCountInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
  createdTimestamp?: InputMaybe<HavingDatetimeFilter>;
};

/** Conditions for `Deployment` aggregates. */
export type DeploymentsHavingInput = {
  AND?: InputMaybe<Array<DeploymentsHavingInput>>;
  OR?: InputMaybe<Array<DeploymentsHavingInput>>;
  average?: InputMaybe<DeploymentsHavingAverageInput>;
  distinctCount?: InputMaybe<DeploymentsHavingDistinctCountInput>;
  max?: InputMaybe<DeploymentsHavingMaxInput>;
  min?: InputMaybe<DeploymentsHavingMinInput>;
  stddevPopulation?: InputMaybe<DeploymentsHavingStddevPopulationInput>;
  stddevSample?: InputMaybe<DeploymentsHavingStddevSampleInput>;
  sum?: InputMaybe<DeploymentsHavingSumInput>;
  variancePopulation?: InputMaybe<DeploymentsHavingVariancePopulationInput>;
  varianceSample?: InputMaybe<DeploymentsHavingVarianceSampleInput>;
};

export type DeploymentsHavingMaxInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
  createdTimestamp?: InputMaybe<HavingDatetimeFilter>;
};

export type DeploymentsHavingMinInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
  createdTimestamp?: InputMaybe<HavingDatetimeFilter>;
};

export type DeploymentsHavingStddevPopulationInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
  createdTimestamp?: InputMaybe<HavingDatetimeFilter>;
};

export type DeploymentsHavingStddevSampleInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
  createdTimestamp?: InputMaybe<HavingDatetimeFilter>;
};

export type DeploymentsHavingSumInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
  createdTimestamp?: InputMaybe<HavingDatetimeFilter>;
};

export type DeploymentsHavingVariancePopulationInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
  createdTimestamp?: InputMaybe<HavingDatetimeFilter>;
};

export type DeploymentsHavingVarianceSampleInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
  createdTimestamp?: InputMaybe<HavingDatetimeFilter>;
};

/** Methods to use when ordering `Deployment`. */
export enum DeploymentsOrderBy {
  ConsumerQueryRewardsAverageBlockRangeAsc = 'CONSUMER_QUERY_REWARDS_AVERAGE_BLOCK_RANGE_ASC',
  ConsumerQueryRewardsAverageBlockRangeDesc = 'CONSUMER_QUERY_REWARDS_AVERAGE_BLOCK_RANGE_DESC',
  ConsumerQueryRewardsAverageConsumerAsc = 'CONSUMER_QUERY_REWARDS_AVERAGE_CONSUMER_ASC',
  ConsumerQueryRewardsAverageConsumerDesc = 'CONSUMER_QUERY_REWARDS_AVERAGE_CONSUMER_DESC',
  ConsumerQueryRewardsAverageCreateAtAsc = 'CONSUMER_QUERY_REWARDS_AVERAGE_CREATE_AT_ASC',
  ConsumerQueryRewardsAverageCreateAtDesc = 'CONSUMER_QUERY_REWARDS_AVERAGE_CREATE_AT_DESC',
  ConsumerQueryRewardsAverageDeploymentIdAsc = 'CONSUMER_QUERY_REWARDS_AVERAGE_DEPLOYMENT_ID_ASC',
  ConsumerQueryRewardsAverageDeploymentIdDesc = 'CONSUMER_QUERY_REWARDS_AVERAGE_DEPLOYMENT_ID_DESC',
  ConsumerQueryRewardsAverageIdAsc = 'CONSUMER_QUERY_REWARDS_AVERAGE_ID_ASC',
  ConsumerQueryRewardsAverageIdDesc = 'CONSUMER_QUERY_REWARDS_AVERAGE_ID_DESC',
  ConsumerQueryRewardsAverageOrderIdAsc = 'CONSUMER_QUERY_REWARDS_AVERAGE_ORDER_ID_ASC',
  ConsumerQueryRewardsAverageOrderIdDesc = 'CONSUMER_QUERY_REWARDS_AVERAGE_ORDER_ID_DESC',
  ConsumerQueryRewardsAverageOrderTypeAsc = 'CONSUMER_QUERY_REWARDS_AVERAGE_ORDER_TYPE_ASC',
  ConsumerQueryRewardsAverageOrderTypeDesc = 'CONSUMER_QUERY_REWARDS_AVERAGE_ORDER_TYPE_DESC',
  ConsumerQueryRewardsAverageProjectIdAsc = 'CONSUMER_QUERY_REWARDS_AVERAGE_PROJECT_ID_ASC',
  ConsumerQueryRewardsAverageProjectIdDesc = 'CONSUMER_QUERY_REWARDS_AVERAGE_PROJECT_ID_DESC',
  ConsumerQueryRewardsAverageRefundedAsc = 'CONSUMER_QUERY_REWARDS_AVERAGE_REFUNDED_ASC',
  ConsumerQueryRewardsAverageRefundedDesc = 'CONSUMER_QUERY_REWARDS_AVERAGE_REFUNDED_DESC',
  ConsumerQueryRewardsAverageSpentAsc = 'CONSUMER_QUERY_REWARDS_AVERAGE_SPENT_ASC',
  ConsumerQueryRewardsAverageSpentDesc = 'CONSUMER_QUERY_REWARDS_AVERAGE_SPENT_DESC',
  ConsumerQueryRewardsAverageUpdateAtAsc = 'CONSUMER_QUERY_REWARDS_AVERAGE_UPDATE_AT_ASC',
  ConsumerQueryRewardsAverageUpdateAtDesc = 'CONSUMER_QUERY_REWARDS_AVERAGE_UPDATE_AT_DESC',
  ConsumerQueryRewardsByDeploymentIdCountAsc = 'CONSUMER_QUERY_REWARDS_BY_DEPLOYMENT_ID__COUNT_ASC',
  ConsumerQueryRewardsByDeploymentIdCountDesc = 'CONSUMER_QUERY_REWARDS_BY_DEPLOYMENT_ID__COUNT_DESC',
  ConsumerQueryRewardsCountAsc = 'CONSUMER_QUERY_REWARDS_COUNT_ASC',
  ConsumerQueryRewardsCountDesc = 'CONSUMER_QUERY_REWARDS_COUNT_DESC',
  ConsumerQueryRewardsDistinctCountBlockRangeAsc = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  ConsumerQueryRewardsDistinctCountBlockRangeDesc = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  ConsumerQueryRewardsDistinctCountConsumerAsc = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_CONSUMER_ASC',
  ConsumerQueryRewardsDistinctCountConsumerDesc = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_CONSUMER_DESC',
  ConsumerQueryRewardsDistinctCountCreateAtAsc = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_CREATE_AT_ASC',
  ConsumerQueryRewardsDistinctCountCreateAtDesc = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_CREATE_AT_DESC',
  ConsumerQueryRewardsDistinctCountDeploymentIdAsc = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_DEPLOYMENT_ID_ASC',
  ConsumerQueryRewardsDistinctCountDeploymentIdDesc = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_DEPLOYMENT_ID_DESC',
  ConsumerQueryRewardsDistinctCountIdAsc = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_ID_ASC',
  ConsumerQueryRewardsDistinctCountIdDesc = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_ID_DESC',
  ConsumerQueryRewardsDistinctCountOrderIdAsc = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_ORDER_ID_ASC',
  ConsumerQueryRewardsDistinctCountOrderIdDesc = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_ORDER_ID_DESC',
  ConsumerQueryRewardsDistinctCountOrderTypeAsc = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_ORDER_TYPE_ASC',
  ConsumerQueryRewardsDistinctCountOrderTypeDesc = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_ORDER_TYPE_DESC',
  ConsumerQueryRewardsDistinctCountProjectIdAsc = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_PROJECT_ID_ASC',
  ConsumerQueryRewardsDistinctCountProjectIdDesc = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_PROJECT_ID_DESC',
  ConsumerQueryRewardsDistinctCountRefundedAsc = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_REFUNDED_ASC',
  ConsumerQueryRewardsDistinctCountRefundedDesc = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_REFUNDED_DESC',
  ConsumerQueryRewardsDistinctCountSpentAsc = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_SPENT_ASC',
  ConsumerQueryRewardsDistinctCountSpentDesc = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_SPENT_DESC',
  ConsumerQueryRewardsDistinctCountUpdateAtAsc = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_UPDATE_AT_ASC',
  ConsumerQueryRewardsDistinctCountUpdateAtDesc = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_UPDATE_AT_DESC',
  ConsumerQueryRewardsMaxBlockRangeAsc = 'CONSUMER_QUERY_REWARDS_MAX_BLOCK_RANGE_ASC',
  ConsumerQueryRewardsMaxBlockRangeDesc = 'CONSUMER_QUERY_REWARDS_MAX_BLOCK_RANGE_DESC',
  ConsumerQueryRewardsMaxConsumerAsc = 'CONSUMER_QUERY_REWARDS_MAX_CONSUMER_ASC',
  ConsumerQueryRewardsMaxConsumerDesc = 'CONSUMER_QUERY_REWARDS_MAX_CONSUMER_DESC',
  ConsumerQueryRewardsMaxCreateAtAsc = 'CONSUMER_QUERY_REWARDS_MAX_CREATE_AT_ASC',
  ConsumerQueryRewardsMaxCreateAtDesc = 'CONSUMER_QUERY_REWARDS_MAX_CREATE_AT_DESC',
  ConsumerQueryRewardsMaxDeploymentIdAsc = 'CONSUMER_QUERY_REWARDS_MAX_DEPLOYMENT_ID_ASC',
  ConsumerQueryRewardsMaxDeploymentIdDesc = 'CONSUMER_QUERY_REWARDS_MAX_DEPLOYMENT_ID_DESC',
  ConsumerQueryRewardsMaxIdAsc = 'CONSUMER_QUERY_REWARDS_MAX_ID_ASC',
  ConsumerQueryRewardsMaxIdDesc = 'CONSUMER_QUERY_REWARDS_MAX_ID_DESC',
  ConsumerQueryRewardsMaxOrderIdAsc = 'CONSUMER_QUERY_REWARDS_MAX_ORDER_ID_ASC',
  ConsumerQueryRewardsMaxOrderIdDesc = 'CONSUMER_QUERY_REWARDS_MAX_ORDER_ID_DESC',
  ConsumerQueryRewardsMaxOrderTypeAsc = 'CONSUMER_QUERY_REWARDS_MAX_ORDER_TYPE_ASC',
  ConsumerQueryRewardsMaxOrderTypeDesc = 'CONSUMER_QUERY_REWARDS_MAX_ORDER_TYPE_DESC',
  ConsumerQueryRewardsMaxProjectIdAsc = 'CONSUMER_QUERY_REWARDS_MAX_PROJECT_ID_ASC',
  ConsumerQueryRewardsMaxProjectIdDesc = 'CONSUMER_QUERY_REWARDS_MAX_PROJECT_ID_DESC',
  ConsumerQueryRewardsMaxRefundedAsc = 'CONSUMER_QUERY_REWARDS_MAX_REFUNDED_ASC',
  ConsumerQueryRewardsMaxRefundedDesc = 'CONSUMER_QUERY_REWARDS_MAX_REFUNDED_DESC',
  ConsumerQueryRewardsMaxSpentAsc = 'CONSUMER_QUERY_REWARDS_MAX_SPENT_ASC',
  ConsumerQueryRewardsMaxSpentDesc = 'CONSUMER_QUERY_REWARDS_MAX_SPENT_DESC',
  ConsumerQueryRewardsMaxUpdateAtAsc = 'CONSUMER_QUERY_REWARDS_MAX_UPDATE_AT_ASC',
  ConsumerQueryRewardsMaxUpdateAtDesc = 'CONSUMER_QUERY_REWARDS_MAX_UPDATE_AT_DESC',
  ConsumerQueryRewardsMinBlockRangeAsc = 'CONSUMER_QUERY_REWARDS_MIN_BLOCK_RANGE_ASC',
  ConsumerQueryRewardsMinBlockRangeDesc = 'CONSUMER_QUERY_REWARDS_MIN_BLOCK_RANGE_DESC',
  ConsumerQueryRewardsMinConsumerAsc = 'CONSUMER_QUERY_REWARDS_MIN_CONSUMER_ASC',
  ConsumerQueryRewardsMinConsumerDesc = 'CONSUMER_QUERY_REWARDS_MIN_CONSUMER_DESC',
  ConsumerQueryRewardsMinCreateAtAsc = 'CONSUMER_QUERY_REWARDS_MIN_CREATE_AT_ASC',
  ConsumerQueryRewardsMinCreateAtDesc = 'CONSUMER_QUERY_REWARDS_MIN_CREATE_AT_DESC',
  ConsumerQueryRewardsMinDeploymentIdAsc = 'CONSUMER_QUERY_REWARDS_MIN_DEPLOYMENT_ID_ASC',
  ConsumerQueryRewardsMinDeploymentIdDesc = 'CONSUMER_QUERY_REWARDS_MIN_DEPLOYMENT_ID_DESC',
  ConsumerQueryRewardsMinIdAsc = 'CONSUMER_QUERY_REWARDS_MIN_ID_ASC',
  ConsumerQueryRewardsMinIdDesc = 'CONSUMER_QUERY_REWARDS_MIN_ID_DESC',
  ConsumerQueryRewardsMinOrderIdAsc = 'CONSUMER_QUERY_REWARDS_MIN_ORDER_ID_ASC',
  ConsumerQueryRewardsMinOrderIdDesc = 'CONSUMER_QUERY_REWARDS_MIN_ORDER_ID_DESC',
  ConsumerQueryRewardsMinOrderTypeAsc = 'CONSUMER_QUERY_REWARDS_MIN_ORDER_TYPE_ASC',
  ConsumerQueryRewardsMinOrderTypeDesc = 'CONSUMER_QUERY_REWARDS_MIN_ORDER_TYPE_DESC',
  ConsumerQueryRewardsMinProjectIdAsc = 'CONSUMER_QUERY_REWARDS_MIN_PROJECT_ID_ASC',
  ConsumerQueryRewardsMinProjectIdDesc = 'CONSUMER_QUERY_REWARDS_MIN_PROJECT_ID_DESC',
  ConsumerQueryRewardsMinRefundedAsc = 'CONSUMER_QUERY_REWARDS_MIN_REFUNDED_ASC',
  ConsumerQueryRewardsMinRefundedDesc = 'CONSUMER_QUERY_REWARDS_MIN_REFUNDED_DESC',
  ConsumerQueryRewardsMinSpentAsc = 'CONSUMER_QUERY_REWARDS_MIN_SPENT_ASC',
  ConsumerQueryRewardsMinSpentDesc = 'CONSUMER_QUERY_REWARDS_MIN_SPENT_DESC',
  ConsumerQueryRewardsMinUpdateAtAsc = 'CONSUMER_QUERY_REWARDS_MIN_UPDATE_AT_ASC',
  ConsumerQueryRewardsMinUpdateAtDesc = 'CONSUMER_QUERY_REWARDS_MIN_UPDATE_AT_DESC',
  ConsumerQueryRewardsStddevPopulationBlockRangeAsc = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  ConsumerQueryRewardsStddevPopulationBlockRangeDesc = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  ConsumerQueryRewardsStddevPopulationConsumerAsc = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_CONSUMER_ASC',
  ConsumerQueryRewardsStddevPopulationConsumerDesc = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_CONSUMER_DESC',
  ConsumerQueryRewardsStddevPopulationCreateAtAsc = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_CREATE_AT_ASC',
  ConsumerQueryRewardsStddevPopulationCreateAtDesc = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_CREATE_AT_DESC',
  ConsumerQueryRewardsStddevPopulationDeploymentIdAsc = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_DEPLOYMENT_ID_ASC',
  ConsumerQueryRewardsStddevPopulationDeploymentIdDesc = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_DEPLOYMENT_ID_DESC',
  ConsumerQueryRewardsStddevPopulationIdAsc = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_ID_ASC',
  ConsumerQueryRewardsStddevPopulationIdDesc = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_ID_DESC',
  ConsumerQueryRewardsStddevPopulationOrderIdAsc = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_ORDER_ID_ASC',
  ConsumerQueryRewardsStddevPopulationOrderIdDesc = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_ORDER_ID_DESC',
  ConsumerQueryRewardsStddevPopulationOrderTypeAsc = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_ORDER_TYPE_ASC',
  ConsumerQueryRewardsStddevPopulationOrderTypeDesc = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_ORDER_TYPE_DESC',
  ConsumerQueryRewardsStddevPopulationProjectIdAsc = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_PROJECT_ID_ASC',
  ConsumerQueryRewardsStddevPopulationProjectIdDesc = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_PROJECT_ID_DESC',
  ConsumerQueryRewardsStddevPopulationRefundedAsc = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_REFUNDED_ASC',
  ConsumerQueryRewardsStddevPopulationRefundedDesc = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_REFUNDED_DESC',
  ConsumerQueryRewardsStddevPopulationSpentAsc = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_SPENT_ASC',
  ConsumerQueryRewardsStddevPopulationSpentDesc = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_SPENT_DESC',
  ConsumerQueryRewardsStddevPopulationUpdateAtAsc = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_UPDATE_AT_ASC',
  ConsumerQueryRewardsStddevPopulationUpdateAtDesc = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_UPDATE_AT_DESC',
  ConsumerQueryRewardsStddevSampleBlockRangeAsc = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  ConsumerQueryRewardsStddevSampleBlockRangeDesc = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  ConsumerQueryRewardsStddevSampleConsumerAsc = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_CONSUMER_ASC',
  ConsumerQueryRewardsStddevSampleConsumerDesc = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_CONSUMER_DESC',
  ConsumerQueryRewardsStddevSampleCreateAtAsc = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_CREATE_AT_ASC',
  ConsumerQueryRewardsStddevSampleCreateAtDesc = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_CREATE_AT_DESC',
  ConsumerQueryRewardsStddevSampleDeploymentIdAsc = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC',
  ConsumerQueryRewardsStddevSampleDeploymentIdDesc = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC',
  ConsumerQueryRewardsStddevSampleIdAsc = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_ID_ASC',
  ConsumerQueryRewardsStddevSampleIdDesc = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_ID_DESC',
  ConsumerQueryRewardsStddevSampleOrderIdAsc = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_ORDER_ID_ASC',
  ConsumerQueryRewardsStddevSampleOrderIdDesc = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_ORDER_ID_DESC',
  ConsumerQueryRewardsStddevSampleOrderTypeAsc = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_ORDER_TYPE_ASC',
  ConsumerQueryRewardsStddevSampleOrderTypeDesc = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_ORDER_TYPE_DESC',
  ConsumerQueryRewardsStddevSampleProjectIdAsc = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_PROJECT_ID_ASC',
  ConsumerQueryRewardsStddevSampleProjectIdDesc = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_PROJECT_ID_DESC',
  ConsumerQueryRewardsStddevSampleRefundedAsc = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_REFUNDED_ASC',
  ConsumerQueryRewardsStddevSampleRefundedDesc = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_REFUNDED_DESC',
  ConsumerQueryRewardsStddevSampleSpentAsc = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_SPENT_ASC',
  ConsumerQueryRewardsStddevSampleSpentDesc = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_SPENT_DESC',
  ConsumerQueryRewardsStddevSampleUpdateAtAsc = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_UPDATE_AT_ASC',
  ConsumerQueryRewardsStddevSampleUpdateAtDesc = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_UPDATE_AT_DESC',
  ConsumerQueryRewardsSumBlockRangeAsc = 'CONSUMER_QUERY_REWARDS_SUM_BLOCK_RANGE_ASC',
  ConsumerQueryRewardsSumBlockRangeDesc = 'CONSUMER_QUERY_REWARDS_SUM_BLOCK_RANGE_DESC',
  ConsumerQueryRewardsSumConsumerAsc = 'CONSUMER_QUERY_REWARDS_SUM_CONSUMER_ASC',
  ConsumerQueryRewardsSumConsumerDesc = 'CONSUMER_QUERY_REWARDS_SUM_CONSUMER_DESC',
  ConsumerQueryRewardsSumCreateAtAsc = 'CONSUMER_QUERY_REWARDS_SUM_CREATE_AT_ASC',
  ConsumerQueryRewardsSumCreateAtDesc = 'CONSUMER_QUERY_REWARDS_SUM_CREATE_AT_DESC',
  ConsumerQueryRewardsSumDeploymentIdAsc = 'CONSUMER_QUERY_REWARDS_SUM_DEPLOYMENT_ID_ASC',
  ConsumerQueryRewardsSumDeploymentIdDesc = 'CONSUMER_QUERY_REWARDS_SUM_DEPLOYMENT_ID_DESC',
  ConsumerQueryRewardsSumIdAsc = 'CONSUMER_QUERY_REWARDS_SUM_ID_ASC',
  ConsumerQueryRewardsSumIdDesc = 'CONSUMER_QUERY_REWARDS_SUM_ID_DESC',
  ConsumerQueryRewardsSumOrderIdAsc = 'CONSUMER_QUERY_REWARDS_SUM_ORDER_ID_ASC',
  ConsumerQueryRewardsSumOrderIdDesc = 'CONSUMER_QUERY_REWARDS_SUM_ORDER_ID_DESC',
  ConsumerQueryRewardsSumOrderTypeAsc = 'CONSUMER_QUERY_REWARDS_SUM_ORDER_TYPE_ASC',
  ConsumerQueryRewardsSumOrderTypeDesc = 'CONSUMER_QUERY_REWARDS_SUM_ORDER_TYPE_DESC',
  ConsumerQueryRewardsSumProjectIdAsc = 'CONSUMER_QUERY_REWARDS_SUM_PROJECT_ID_ASC',
  ConsumerQueryRewardsSumProjectIdDesc = 'CONSUMER_QUERY_REWARDS_SUM_PROJECT_ID_DESC',
  ConsumerQueryRewardsSumRefundedAsc = 'CONSUMER_QUERY_REWARDS_SUM_REFUNDED_ASC',
  ConsumerQueryRewardsSumRefundedDesc = 'CONSUMER_QUERY_REWARDS_SUM_REFUNDED_DESC',
  ConsumerQueryRewardsSumSpentAsc = 'CONSUMER_QUERY_REWARDS_SUM_SPENT_ASC',
  ConsumerQueryRewardsSumSpentDesc = 'CONSUMER_QUERY_REWARDS_SUM_SPENT_DESC',
  ConsumerQueryRewardsSumUpdateAtAsc = 'CONSUMER_QUERY_REWARDS_SUM_UPDATE_AT_ASC',
  ConsumerQueryRewardsSumUpdateAtDesc = 'CONSUMER_QUERY_REWARDS_SUM_UPDATE_AT_DESC',
  ConsumerQueryRewardsVariancePopulationBlockRangeAsc = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  ConsumerQueryRewardsVariancePopulationBlockRangeDesc = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  ConsumerQueryRewardsVariancePopulationConsumerAsc = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_CONSUMER_ASC',
  ConsumerQueryRewardsVariancePopulationConsumerDesc = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_CONSUMER_DESC',
  ConsumerQueryRewardsVariancePopulationCreateAtAsc = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_CREATE_AT_ASC',
  ConsumerQueryRewardsVariancePopulationCreateAtDesc = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_CREATE_AT_DESC',
  ConsumerQueryRewardsVariancePopulationDeploymentIdAsc = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC',
  ConsumerQueryRewardsVariancePopulationDeploymentIdDesc = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC',
  ConsumerQueryRewardsVariancePopulationIdAsc = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_ID_ASC',
  ConsumerQueryRewardsVariancePopulationIdDesc = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_ID_DESC',
  ConsumerQueryRewardsVariancePopulationOrderIdAsc = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_ORDER_ID_ASC',
  ConsumerQueryRewardsVariancePopulationOrderIdDesc = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_ORDER_ID_DESC',
  ConsumerQueryRewardsVariancePopulationOrderTypeAsc = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_ORDER_TYPE_ASC',
  ConsumerQueryRewardsVariancePopulationOrderTypeDesc = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_ORDER_TYPE_DESC',
  ConsumerQueryRewardsVariancePopulationProjectIdAsc = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_PROJECT_ID_ASC',
  ConsumerQueryRewardsVariancePopulationProjectIdDesc = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_PROJECT_ID_DESC',
  ConsumerQueryRewardsVariancePopulationRefundedAsc = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_REFUNDED_ASC',
  ConsumerQueryRewardsVariancePopulationRefundedDesc = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_REFUNDED_DESC',
  ConsumerQueryRewardsVariancePopulationSpentAsc = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_SPENT_ASC',
  ConsumerQueryRewardsVariancePopulationSpentDesc = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_SPENT_DESC',
  ConsumerQueryRewardsVariancePopulationUpdateAtAsc = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_UPDATE_AT_ASC',
  ConsumerQueryRewardsVariancePopulationUpdateAtDesc = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_UPDATE_AT_DESC',
  ConsumerQueryRewardsVarianceSampleBlockRangeAsc = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  ConsumerQueryRewardsVarianceSampleBlockRangeDesc = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  ConsumerQueryRewardsVarianceSampleConsumerAsc = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_CONSUMER_ASC',
  ConsumerQueryRewardsVarianceSampleConsumerDesc = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_CONSUMER_DESC',
  ConsumerQueryRewardsVarianceSampleCreateAtAsc = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_CREATE_AT_ASC',
  ConsumerQueryRewardsVarianceSampleCreateAtDesc = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_CREATE_AT_DESC',
  ConsumerQueryRewardsVarianceSampleDeploymentIdAsc = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC',
  ConsumerQueryRewardsVarianceSampleDeploymentIdDesc = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC',
  ConsumerQueryRewardsVarianceSampleIdAsc = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_ID_ASC',
  ConsumerQueryRewardsVarianceSampleIdDesc = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_ID_DESC',
  ConsumerQueryRewardsVarianceSampleOrderIdAsc = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_ORDER_ID_ASC',
  ConsumerQueryRewardsVarianceSampleOrderIdDesc = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_ORDER_ID_DESC',
  ConsumerQueryRewardsVarianceSampleOrderTypeAsc = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_ORDER_TYPE_ASC',
  ConsumerQueryRewardsVarianceSampleOrderTypeDesc = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_ORDER_TYPE_DESC',
  ConsumerQueryRewardsVarianceSampleProjectIdAsc = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_PROJECT_ID_ASC',
  ConsumerQueryRewardsVarianceSampleProjectIdDesc = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_PROJECT_ID_DESC',
  ConsumerQueryRewardsVarianceSampleRefundedAsc = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_REFUNDED_ASC',
  ConsumerQueryRewardsVarianceSampleRefundedDesc = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_REFUNDED_DESC',
  ConsumerQueryRewardsVarianceSampleSpentAsc = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_SPENT_ASC',
  ConsumerQueryRewardsVarianceSampleSpentDesc = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_SPENT_DESC',
  ConsumerQueryRewardsVarianceSampleUpdateAtAsc = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_UPDATE_AT_ASC',
  ConsumerQueryRewardsVarianceSampleUpdateAtDesc = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_UPDATE_AT_DESC',
  ConsumerQueryRewardSummariesAverageBlockRangeAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_BLOCK_RANGE_ASC',
  ConsumerQueryRewardSummariesAverageBlockRangeDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_BLOCK_RANGE_DESC',
  ConsumerQueryRewardSummariesAverageConsumerAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_CONSUMER_ASC',
  ConsumerQueryRewardSummariesAverageConsumerDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_CONSUMER_DESC',
  ConsumerQueryRewardSummariesAverageCreateAtAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_CREATE_AT_ASC',
  ConsumerQueryRewardSummariesAverageCreateAtDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_CREATE_AT_DESC',
  ConsumerQueryRewardSummariesAverageDeploymentIdAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_DEPLOYMENT_ID_ASC',
  ConsumerQueryRewardSummariesAverageDeploymentIdDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_DEPLOYMENT_ID_DESC',
  ConsumerQueryRewardSummariesAverageIdAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_ID_ASC',
  ConsumerQueryRewardSummariesAverageIdDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_ID_DESC',
  ConsumerQueryRewardSummariesAverageOrderTypeAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_ORDER_TYPE_ASC',
  ConsumerQueryRewardSummariesAverageOrderTypeDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_ORDER_TYPE_DESC',
  ConsumerQueryRewardSummariesAverageProjectIdAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_PROJECT_ID_ASC',
  ConsumerQueryRewardSummariesAverageProjectIdDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_PROJECT_ID_DESC',
  ConsumerQueryRewardSummariesAverageTotalRefundedAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_TOTAL_REFUNDED_ASC',
  ConsumerQueryRewardSummariesAverageTotalRefundedDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_TOTAL_REFUNDED_DESC',
  ConsumerQueryRewardSummariesAverageTotalSpentAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_TOTAL_SPENT_ASC',
  ConsumerQueryRewardSummariesAverageTotalSpentDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_TOTAL_SPENT_DESC',
  ConsumerQueryRewardSummariesAverageUpdateAtAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_UPDATE_AT_ASC',
  ConsumerQueryRewardSummariesAverageUpdateAtDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_UPDATE_AT_DESC',
  ConsumerQueryRewardSummariesByDeploymentIdCountAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_BY_DEPLOYMENT_ID__COUNT_ASC',
  ConsumerQueryRewardSummariesByDeploymentIdCountDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_BY_DEPLOYMENT_ID__COUNT_DESC',
  ConsumerQueryRewardSummariesCountAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_COUNT_ASC',
  ConsumerQueryRewardSummariesCountDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_COUNT_DESC',
  ConsumerQueryRewardSummariesDistinctCountBlockRangeAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  ConsumerQueryRewardSummariesDistinctCountBlockRangeDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  ConsumerQueryRewardSummariesDistinctCountConsumerAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_CONSUMER_ASC',
  ConsumerQueryRewardSummariesDistinctCountConsumerDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_CONSUMER_DESC',
  ConsumerQueryRewardSummariesDistinctCountCreateAtAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_CREATE_AT_ASC',
  ConsumerQueryRewardSummariesDistinctCountCreateAtDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_CREATE_AT_DESC',
  ConsumerQueryRewardSummariesDistinctCountDeploymentIdAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_DEPLOYMENT_ID_ASC',
  ConsumerQueryRewardSummariesDistinctCountDeploymentIdDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_DEPLOYMENT_ID_DESC',
  ConsumerQueryRewardSummariesDistinctCountIdAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_ID_ASC',
  ConsumerQueryRewardSummariesDistinctCountIdDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_ID_DESC',
  ConsumerQueryRewardSummariesDistinctCountOrderTypeAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_ORDER_TYPE_ASC',
  ConsumerQueryRewardSummariesDistinctCountOrderTypeDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_ORDER_TYPE_DESC',
  ConsumerQueryRewardSummariesDistinctCountProjectIdAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_PROJECT_ID_ASC',
  ConsumerQueryRewardSummariesDistinctCountProjectIdDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_PROJECT_ID_DESC',
  ConsumerQueryRewardSummariesDistinctCountTotalRefundedAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_TOTAL_REFUNDED_ASC',
  ConsumerQueryRewardSummariesDistinctCountTotalRefundedDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_TOTAL_REFUNDED_DESC',
  ConsumerQueryRewardSummariesDistinctCountTotalSpentAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_TOTAL_SPENT_ASC',
  ConsumerQueryRewardSummariesDistinctCountTotalSpentDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_TOTAL_SPENT_DESC',
  ConsumerQueryRewardSummariesDistinctCountUpdateAtAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_UPDATE_AT_ASC',
  ConsumerQueryRewardSummariesDistinctCountUpdateAtDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_UPDATE_AT_DESC',
  ConsumerQueryRewardSummariesMaxBlockRangeAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_BLOCK_RANGE_ASC',
  ConsumerQueryRewardSummariesMaxBlockRangeDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_BLOCK_RANGE_DESC',
  ConsumerQueryRewardSummariesMaxConsumerAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_CONSUMER_ASC',
  ConsumerQueryRewardSummariesMaxConsumerDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_CONSUMER_DESC',
  ConsumerQueryRewardSummariesMaxCreateAtAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_CREATE_AT_ASC',
  ConsumerQueryRewardSummariesMaxCreateAtDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_CREATE_AT_DESC',
  ConsumerQueryRewardSummariesMaxDeploymentIdAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_DEPLOYMENT_ID_ASC',
  ConsumerQueryRewardSummariesMaxDeploymentIdDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_DEPLOYMENT_ID_DESC',
  ConsumerQueryRewardSummariesMaxIdAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_ID_ASC',
  ConsumerQueryRewardSummariesMaxIdDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_ID_DESC',
  ConsumerQueryRewardSummariesMaxOrderTypeAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_ORDER_TYPE_ASC',
  ConsumerQueryRewardSummariesMaxOrderTypeDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_ORDER_TYPE_DESC',
  ConsumerQueryRewardSummariesMaxProjectIdAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_PROJECT_ID_ASC',
  ConsumerQueryRewardSummariesMaxProjectIdDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_PROJECT_ID_DESC',
  ConsumerQueryRewardSummariesMaxTotalRefundedAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_TOTAL_REFUNDED_ASC',
  ConsumerQueryRewardSummariesMaxTotalRefundedDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_TOTAL_REFUNDED_DESC',
  ConsumerQueryRewardSummariesMaxTotalSpentAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_TOTAL_SPENT_ASC',
  ConsumerQueryRewardSummariesMaxTotalSpentDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_TOTAL_SPENT_DESC',
  ConsumerQueryRewardSummariesMaxUpdateAtAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_UPDATE_AT_ASC',
  ConsumerQueryRewardSummariesMaxUpdateAtDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_UPDATE_AT_DESC',
  ConsumerQueryRewardSummariesMinBlockRangeAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_BLOCK_RANGE_ASC',
  ConsumerQueryRewardSummariesMinBlockRangeDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_BLOCK_RANGE_DESC',
  ConsumerQueryRewardSummariesMinConsumerAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_CONSUMER_ASC',
  ConsumerQueryRewardSummariesMinConsumerDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_CONSUMER_DESC',
  ConsumerQueryRewardSummariesMinCreateAtAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_CREATE_AT_ASC',
  ConsumerQueryRewardSummariesMinCreateAtDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_CREATE_AT_DESC',
  ConsumerQueryRewardSummariesMinDeploymentIdAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_DEPLOYMENT_ID_ASC',
  ConsumerQueryRewardSummariesMinDeploymentIdDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_DEPLOYMENT_ID_DESC',
  ConsumerQueryRewardSummariesMinIdAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_ID_ASC',
  ConsumerQueryRewardSummariesMinIdDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_ID_DESC',
  ConsumerQueryRewardSummariesMinOrderTypeAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_ORDER_TYPE_ASC',
  ConsumerQueryRewardSummariesMinOrderTypeDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_ORDER_TYPE_DESC',
  ConsumerQueryRewardSummariesMinProjectIdAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_PROJECT_ID_ASC',
  ConsumerQueryRewardSummariesMinProjectIdDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_PROJECT_ID_DESC',
  ConsumerQueryRewardSummariesMinTotalRefundedAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_TOTAL_REFUNDED_ASC',
  ConsumerQueryRewardSummariesMinTotalRefundedDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_TOTAL_REFUNDED_DESC',
  ConsumerQueryRewardSummariesMinTotalSpentAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_TOTAL_SPENT_ASC',
  ConsumerQueryRewardSummariesMinTotalSpentDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_TOTAL_SPENT_DESC',
  ConsumerQueryRewardSummariesMinUpdateAtAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_UPDATE_AT_ASC',
  ConsumerQueryRewardSummariesMinUpdateAtDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_UPDATE_AT_DESC',
  ConsumerQueryRewardSummariesStddevPopulationBlockRangeAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  ConsumerQueryRewardSummariesStddevPopulationBlockRangeDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  ConsumerQueryRewardSummariesStddevPopulationConsumerAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_CONSUMER_ASC',
  ConsumerQueryRewardSummariesStddevPopulationConsumerDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_CONSUMER_DESC',
  ConsumerQueryRewardSummariesStddevPopulationCreateAtAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_CREATE_AT_ASC',
  ConsumerQueryRewardSummariesStddevPopulationCreateAtDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_CREATE_AT_DESC',
  ConsumerQueryRewardSummariesStddevPopulationDeploymentIdAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_DEPLOYMENT_ID_ASC',
  ConsumerQueryRewardSummariesStddevPopulationDeploymentIdDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_DEPLOYMENT_ID_DESC',
  ConsumerQueryRewardSummariesStddevPopulationIdAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_ID_ASC',
  ConsumerQueryRewardSummariesStddevPopulationIdDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_ID_DESC',
  ConsumerQueryRewardSummariesStddevPopulationOrderTypeAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_ORDER_TYPE_ASC',
  ConsumerQueryRewardSummariesStddevPopulationOrderTypeDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_ORDER_TYPE_DESC',
  ConsumerQueryRewardSummariesStddevPopulationProjectIdAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_PROJECT_ID_ASC',
  ConsumerQueryRewardSummariesStddevPopulationProjectIdDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_PROJECT_ID_DESC',
  ConsumerQueryRewardSummariesStddevPopulationTotalRefundedAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_TOTAL_REFUNDED_ASC',
  ConsumerQueryRewardSummariesStddevPopulationTotalRefundedDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_TOTAL_REFUNDED_DESC',
  ConsumerQueryRewardSummariesStddevPopulationTotalSpentAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_TOTAL_SPENT_ASC',
  ConsumerQueryRewardSummariesStddevPopulationTotalSpentDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_TOTAL_SPENT_DESC',
  ConsumerQueryRewardSummariesStddevPopulationUpdateAtAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_UPDATE_AT_ASC',
  ConsumerQueryRewardSummariesStddevPopulationUpdateAtDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_UPDATE_AT_DESC',
  ConsumerQueryRewardSummariesStddevSampleBlockRangeAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  ConsumerQueryRewardSummariesStddevSampleBlockRangeDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  ConsumerQueryRewardSummariesStddevSampleConsumerAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_CONSUMER_ASC',
  ConsumerQueryRewardSummariesStddevSampleConsumerDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_CONSUMER_DESC',
  ConsumerQueryRewardSummariesStddevSampleCreateAtAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_CREATE_AT_ASC',
  ConsumerQueryRewardSummariesStddevSampleCreateAtDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_CREATE_AT_DESC',
  ConsumerQueryRewardSummariesStddevSampleDeploymentIdAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC',
  ConsumerQueryRewardSummariesStddevSampleDeploymentIdDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC',
  ConsumerQueryRewardSummariesStddevSampleIdAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_ID_ASC',
  ConsumerQueryRewardSummariesStddevSampleIdDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_ID_DESC',
  ConsumerQueryRewardSummariesStddevSampleOrderTypeAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_ORDER_TYPE_ASC',
  ConsumerQueryRewardSummariesStddevSampleOrderTypeDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_ORDER_TYPE_DESC',
  ConsumerQueryRewardSummariesStddevSampleProjectIdAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_PROJECT_ID_ASC',
  ConsumerQueryRewardSummariesStddevSampleProjectIdDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_PROJECT_ID_DESC',
  ConsumerQueryRewardSummariesStddevSampleTotalRefundedAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_TOTAL_REFUNDED_ASC',
  ConsumerQueryRewardSummariesStddevSampleTotalRefundedDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_TOTAL_REFUNDED_DESC',
  ConsumerQueryRewardSummariesStddevSampleTotalSpentAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_TOTAL_SPENT_ASC',
  ConsumerQueryRewardSummariesStddevSampleTotalSpentDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_TOTAL_SPENT_DESC',
  ConsumerQueryRewardSummariesStddevSampleUpdateAtAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_UPDATE_AT_ASC',
  ConsumerQueryRewardSummariesStddevSampleUpdateAtDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_UPDATE_AT_DESC',
  ConsumerQueryRewardSummariesSumBlockRangeAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_BLOCK_RANGE_ASC',
  ConsumerQueryRewardSummariesSumBlockRangeDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_BLOCK_RANGE_DESC',
  ConsumerQueryRewardSummariesSumConsumerAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_CONSUMER_ASC',
  ConsumerQueryRewardSummariesSumConsumerDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_CONSUMER_DESC',
  ConsumerQueryRewardSummariesSumCreateAtAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_CREATE_AT_ASC',
  ConsumerQueryRewardSummariesSumCreateAtDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_CREATE_AT_DESC',
  ConsumerQueryRewardSummariesSumDeploymentIdAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_DEPLOYMENT_ID_ASC',
  ConsumerQueryRewardSummariesSumDeploymentIdDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_DEPLOYMENT_ID_DESC',
  ConsumerQueryRewardSummariesSumIdAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_ID_ASC',
  ConsumerQueryRewardSummariesSumIdDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_ID_DESC',
  ConsumerQueryRewardSummariesSumOrderTypeAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_ORDER_TYPE_ASC',
  ConsumerQueryRewardSummariesSumOrderTypeDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_ORDER_TYPE_DESC',
  ConsumerQueryRewardSummariesSumProjectIdAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_PROJECT_ID_ASC',
  ConsumerQueryRewardSummariesSumProjectIdDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_PROJECT_ID_DESC',
  ConsumerQueryRewardSummariesSumTotalRefundedAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_TOTAL_REFUNDED_ASC',
  ConsumerQueryRewardSummariesSumTotalRefundedDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_TOTAL_REFUNDED_DESC',
  ConsumerQueryRewardSummariesSumTotalSpentAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_TOTAL_SPENT_ASC',
  ConsumerQueryRewardSummariesSumTotalSpentDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_TOTAL_SPENT_DESC',
  ConsumerQueryRewardSummariesSumUpdateAtAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_UPDATE_AT_ASC',
  ConsumerQueryRewardSummariesSumUpdateAtDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_UPDATE_AT_DESC',
  ConsumerQueryRewardSummariesVariancePopulationBlockRangeAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  ConsumerQueryRewardSummariesVariancePopulationBlockRangeDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  ConsumerQueryRewardSummariesVariancePopulationConsumerAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_CONSUMER_ASC',
  ConsumerQueryRewardSummariesVariancePopulationConsumerDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_CONSUMER_DESC',
  ConsumerQueryRewardSummariesVariancePopulationCreateAtAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_CREATE_AT_ASC',
  ConsumerQueryRewardSummariesVariancePopulationCreateAtDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_CREATE_AT_DESC',
  ConsumerQueryRewardSummariesVariancePopulationDeploymentIdAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC',
  ConsumerQueryRewardSummariesVariancePopulationDeploymentIdDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC',
  ConsumerQueryRewardSummariesVariancePopulationIdAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_ID_ASC',
  ConsumerQueryRewardSummariesVariancePopulationIdDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_ID_DESC',
  ConsumerQueryRewardSummariesVariancePopulationOrderTypeAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_ORDER_TYPE_ASC',
  ConsumerQueryRewardSummariesVariancePopulationOrderTypeDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_ORDER_TYPE_DESC',
  ConsumerQueryRewardSummariesVariancePopulationProjectIdAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_PROJECT_ID_ASC',
  ConsumerQueryRewardSummariesVariancePopulationProjectIdDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_PROJECT_ID_DESC',
  ConsumerQueryRewardSummariesVariancePopulationTotalRefundedAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_TOTAL_REFUNDED_ASC',
  ConsumerQueryRewardSummariesVariancePopulationTotalRefundedDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_TOTAL_REFUNDED_DESC',
  ConsumerQueryRewardSummariesVariancePopulationTotalSpentAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_TOTAL_SPENT_ASC',
  ConsumerQueryRewardSummariesVariancePopulationTotalSpentDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_TOTAL_SPENT_DESC',
  ConsumerQueryRewardSummariesVariancePopulationUpdateAtAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_UPDATE_AT_ASC',
  ConsumerQueryRewardSummariesVariancePopulationUpdateAtDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_UPDATE_AT_DESC',
  ConsumerQueryRewardSummariesVarianceSampleBlockRangeAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  ConsumerQueryRewardSummariesVarianceSampleBlockRangeDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  ConsumerQueryRewardSummariesVarianceSampleConsumerAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_CONSUMER_ASC',
  ConsumerQueryRewardSummariesVarianceSampleConsumerDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_CONSUMER_DESC',
  ConsumerQueryRewardSummariesVarianceSampleCreateAtAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_CREATE_AT_ASC',
  ConsumerQueryRewardSummariesVarianceSampleCreateAtDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_CREATE_AT_DESC',
  ConsumerQueryRewardSummariesVarianceSampleDeploymentIdAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC',
  ConsumerQueryRewardSummariesVarianceSampleDeploymentIdDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC',
  ConsumerQueryRewardSummariesVarianceSampleIdAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_ID_ASC',
  ConsumerQueryRewardSummariesVarianceSampleIdDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_ID_DESC',
  ConsumerQueryRewardSummariesVarianceSampleOrderTypeAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_ORDER_TYPE_ASC',
  ConsumerQueryRewardSummariesVarianceSampleOrderTypeDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_ORDER_TYPE_DESC',
  ConsumerQueryRewardSummariesVarianceSampleProjectIdAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_PROJECT_ID_ASC',
  ConsumerQueryRewardSummariesVarianceSampleProjectIdDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_PROJECT_ID_DESC',
  ConsumerQueryRewardSummariesVarianceSampleTotalRefundedAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_TOTAL_REFUNDED_ASC',
  ConsumerQueryRewardSummariesVarianceSampleTotalRefundedDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_TOTAL_REFUNDED_DESC',
  ConsumerQueryRewardSummariesVarianceSampleTotalSpentAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_TOTAL_SPENT_ASC',
  ConsumerQueryRewardSummariesVarianceSampleTotalSpentDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_TOTAL_SPENT_DESC',
  ConsumerQueryRewardSummariesVarianceSampleUpdateAtAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_UPDATE_AT_ASC',
  ConsumerQueryRewardSummariesVarianceSampleUpdateAtDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_UPDATE_AT_DESC',
  CreatedBlockAsc = 'CREATED_BLOCK_ASC',
  CreatedBlockDesc = 'CREATED_BLOCK_DESC',
  CreatedTimestampAsc = 'CREATED_TIMESTAMP_ASC',
  CreatedTimestampDesc = 'CREATED_TIMESTAMP_DESC',
  DeploymentBoostersAverageAmountAddedAsc = 'DEPLOYMENT_BOOSTERS_AVERAGE_AMOUNT_ADDED_ASC',
  DeploymentBoostersAverageAmountAddedDesc = 'DEPLOYMENT_BOOSTERS_AVERAGE_AMOUNT_ADDED_DESC',
  DeploymentBoostersAverageAmountRemovedAsc = 'DEPLOYMENT_BOOSTERS_AVERAGE_AMOUNT_REMOVED_ASC',
  DeploymentBoostersAverageAmountRemovedDesc = 'DEPLOYMENT_BOOSTERS_AVERAGE_AMOUNT_REMOVED_DESC',
  DeploymentBoostersAverageBlockRangeAsc = 'DEPLOYMENT_BOOSTERS_AVERAGE_BLOCK_RANGE_ASC',
  DeploymentBoostersAverageBlockRangeDesc = 'DEPLOYMENT_BOOSTERS_AVERAGE_BLOCK_RANGE_DESC',
  DeploymentBoostersAverageConsumerAsc = 'DEPLOYMENT_BOOSTERS_AVERAGE_CONSUMER_ASC',
  DeploymentBoostersAverageConsumerDesc = 'DEPLOYMENT_BOOSTERS_AVERAGE_CONSUMER_DESC',
  DeploymentBoostersAverageCreateAtAsc = 'DEPLOYMENT_BOOSTERS_AVERAGE_CREATE_AT_ASC',
  DeploymentBoostersAverageCreateAtDesc = 'DEPLOYMENT_BOOSTERS_AVERAGE_CREATE_AT_DESC',
  DeploymentBoostersAverageDeploymentIdAsc = 'DEPLOYMENT_BOOSTERS_AVERAGE_DEPLOYMENT_ID_ASC',
  DeploymentBoostersAverageDeploymentIdDesc = 'DEPLOYMENT_BOOSTERS_AVERAGE_DEPLOYMENT_ID_DESC',
  DeploymentBoostersAverageEraIdxAsc = 'DEPLOYMENT_BOOSTERS_AVERAGE_ERA_IDX_ASC',
  DeploymentBoostersAverageEraIdxDesc = 'DEPLOYMENT_BOOSTERS_AVERAGE_ERA_IDX_DESC',
  DeploymentBoostersAverageIdAsc = 'DEPLOYMENT_BOOSTERS_AVERAGE_ID_ASC',
  DeploymentBoostersAverageIdDesc = 'DEPLOYMENT_BOOSTERS_AVERAGE_ID_DESC',
  DeploymentBoostersAverageProjectIdAsc = 'DEPLOYMENT_BOOSTERS_AVERAGE_PROJECT_ID_ASC',
  DeploymentBoostersAverageProjectIdDesc = 'DEPLOYMENT_BOOSTERS_AVERAGE_PROJECT_ID_DESC',
  DeploymentBoostersByDeploymentIdCountAsc = 'DEPLOYMENT_BOOSTERS_BY_DEPLOYMENT_ID__COUNT_ASC',
  DeploymentBoostersByDeploymentIdCountDesc = 'DEPLOYMENT_BOOSTERS_BY_DEPLOYMENT_ID__COUNT_DESC',
  DeploymentBoostersCountAsc = 'DEPLOYMENT_BOOSTERS_COUNT_ASC',
  DeploymentBoostersCountDesc = 'DEPLOYMENT_BOOSTERS_COUNT_DESC',
  DeploymentBoostersDistinctCountAmountAddedAsc = 'DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_AMOUNT_ADDED_ASC',
  DeploymentBoostersDistinctCountAmountAddedDesc = 'DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_AMOUNT_ADDED_DESC',
  DeploymentBoostersDistinctCountAmountRemovedAsc = 'DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_AMOUNT_REMOVED_ASC',
  DeploymentBoostersDistinctCountAmountRemovedDesc = 'DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_AMOUNT_REMOVED_DESC',
  DeploymentBoostersDistinctCountBlockRangeAsc = 'DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  DeploymentBoostersDistinctCountBlockRangeDesc = 'DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  DeploymentBoostersDistinctCountConsumerAsc = 'DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_CONSUMER_ASC',
  DeploymentBoostersDistinctCountConsumerDesc = 'DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_CONSUMER_DESC',
  DeploymentBoostersDistinctCountCreateAtAsc = 'DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_CREATE_AT_ASC',
  DeploymentBoostersDistinctCountCreateAtDesc = 'DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_CREATE_AT_DESC',
  DeploymentBoostersDistinctCountDeploymentIdAsc = 'DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_DEPLOYMENT_ID_ASC',
  DeploymentBoostersDistinctCountDeploymentIdDesc = 'DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_DEPLOYMENT_ID_DESC',
  DeploymentBoostersDistinctCountEraIdxAsc = 'DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_ERA_IDX_ASC',
  DeploymentBoostersDistinctCountEraIdxDesc = 'DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_ERA_IDX_DESC',
  DeploymentBoostersDistinctCountIdAsc = 'DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_ID_ASC',
  DeploymentBoostersDistinctCountIdDesc = 'DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_ID_DESC',
  DeploymentBoostersDistinctCountProjectIdAsc = 'DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_PROJECT_ID_ASC',
  DeploymentBoostersDistinctCountProjectIdDesc = 'DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_PROJECT_ID_DESC',
  DeploymentBoostersMaxAmountAddedAsc = 'DEPLOYMENT_BOOSTERS_MAX_AMOUNT_ADDED_ASC',
  DeploymentBoostersMaxAmountAddedDesc = 'DEPLOYMENT_BOOSTERS_MAX_AMOUNT_ADDED_DESC',
  DeploymentBoostersMaxAmountRemovedAsc = 'DEPLOYMENT_BOOSTERS_MAX_AMOUNT_REMOVED_ASC',
  DeploymentBoostersMaxAmountRemovedDesc = 'DEPLOYMENT_BOOSTERS_MAX_AMOUNT_REMOVED_DESC',
  DeploymentBoostersMaxBlockRangeAsc = 'DEPLOYMENT_BOOSTERS_MAX_BLOCK_RANGE_ASC',
  DeploymentBoostersMaxBlockRangeDesc = 'DEPLOYMENT_BOOSTERS_MAX_BLOCK_RANGE_DESC',
  DeploymentBoostersMaxConsumerAsc = 'DEPLOYMENT_BOOSTERS_MAX_CONSUMER_ASC',
  DeploymentBoostersMaxConsumerDesc = 'DEPLOYMENT_BOOSTERS_MAX_CONSUMER_DESC',
  DeploymentBoostersMaxCreateAtAsc = 'DEPLOYMENT_BOOSTERS_MAX_CREATE_AT_ASC',
  DeploymentBoostersMaxCreateAtDesc = 'DEPLOYMENT_BOOSTERS_MAX_CREATE_AT_DESC',
  DeploymentBoostersMaxDeploymentIdAsc = 'DEPLOYMENT_BOOSTERS_MAX_DEPLOYMENT_ID_ASC',
  DeploymentBoostersMaxDeploymentIdDesc = 'DEPLOYMENT_BOOSTERS_MAX_DEPLOYMENT_ID_DESC',
  DeploymentBoostersMaxEraIdxAsc = 'DEPLOYMENT_BOOSTERS_MAX_ERA_IDX_ASC',
  DeploymentBoostersMaxEraIdxDesc = 'DEPLOYMENT_BOOSTERS_MAX_ERA_IDX_DESC',
  DeploymentBoostersMaxIdAsc = 'DEPLOYMENT_BOOSTERS_MAX_ID_ASC',
  DeploymentBoostersMaxIdDesc = 'DEPLOYMENT_BOOSTERS_MAX_ID_DESC',
  DeploymentBoostersMaxProjectIdAsc = 'DEPLOYMENT_BOOSTERS_MAX_PROJECT_ID_ASC',
  DeploymentBoostersMaxProjectIdDesc = 'DEPLOYMENT_BOOSTERS_MAX_PROJECT_ID_DESC',
  DeploymentBoostersMinAmountAddedAsc = 'DEPLOYMENT_BOOSTERS_MIN_AMOUNT_ADDED_ASC',
  DeploymentBoostersMinAmountAddedDesc = 'DEPLOYMENT_BOOSTERS_MIN_AMOUNT_ADDED_DESC',
  DeploymentBoostersMinAmountRemovedAsc = 'DEPLOYMENT_BOOSTERS_MIN_AMOUNT_REMOVED_ASC',
  DeploymentBoostersMinAmountRemovedDesc = 'DEPLOYMENT_BOOSTERS_MIN_AMOUNT_REMOVED_DESC',
  DeploymentBoostersMinBlockRangeAsc = 'DEPLOYMENT_BOOSTERS_MIN_BLOCK_RANGE_ASC',
  DeploymentBoostersMinBlockRangeDesc = 'DEPLOYMENT_BOOSTERS_MIN_BLOCK_RANGE_DESC',
  DeploymentBoostersMinConsumerAsc = 'DEPLOYMENT_BOOSTERS_MIN_CONSUMER_ASC',
  DeploymentBoostersMinConsumerDesc = 'DEPLOYMENT_BOOSTERS_MIN_CONSUMER_DESC',
  DeploymentBoostersMinCreateAtAsc = 'DEPLOYMENT_BOOSTERS_MIN_CREATE_AT_ASC',
  DeploymentBoostersMinCreateAtDesc = 'DEPLOYMENT_BOOSTERS_MIN_CREATE_AT_DESC',
  DeploymentBoostersMinDeploymentIdAsc = 'DEPLOYMENT_BOOSTERS_MIN_DEPLOYMENT_ID_ASC',
  DeploymentBoostersMinDeploymentIdDesc = 'DEPLOYMENT_BOOSTERS_MIN_DEPLOYMENT_ID_DESC',
  DeploymentBoostersMinEraIdxAsc = 'DEPLOYMENT_BOOSTERS_MIN_ERA_IDX_ASC',
  DeploymentBoostersMinEraIdxDesc = 'DEPLOYMENT_BOOSTERS_MIN_ERA_IDX_DESC',
  DeploymentBoostersMinIdAsc = 'DEPLOYMENT_BOOSTERS_MIN_ID_ASC',
  DeploymentBoostersMinIdDesc = 'DEPLOYMENT_BOOSTERS_MIN_ID_DESC',
  DeploymentBoostersMinProjectIdAsc = 'DEPLOYMENT_BOOSTERS_MIN_PROJECT_ID_ASC',
  DeploymentBoostersMinProjectIdDesc = 'DEPLOYMENT_BOOSTERS_MIN_PROJECT_ID_DESC',
  DeploymentBoostersStddevPopulationAmountAddedAsc = 'DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_AMOUNT_ADDED_ASC',
  DeploymentBoostersStddevPopulationAmountAddedDesc = 'DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_AMOUNT_ADDED_DESC',
  DeploymentBoostersStddevPopulationAmountRemovedAsc = 'DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_AMOUNT_REMOVED_ASC',
  DeploymentBoostersStddevPopulationAmountRemovedDesc = 'DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_AMOUNT_REMOVED_DESC',
  DeploymentBoostersStddevPopulationBlockRangeAsc = 'DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  DeploymentBoostersStddevPopulationBlockRangeDesc = 'DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  DeploymentBoostersStddevPopulationConsumerAsc = 'DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_CONSUMER_ASC',
  DeploymentBoostersStddevPopulationConsumerDesc = 'DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_CONSUMER_DESC',
  DeploymentBoostersStddevPopulationCreateAtAsc = 'DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_CREATE_AT_ASC',
  DeploymentBoostersStddevPopulationCreateAtDesc = 'DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_CREATE_AT_DESC',
  DeploymentBoostersStddevPopulationDeploymentIdAsc = 'DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_DEPLOYMENT_ID_ASC',
  DeploymentBoostersStddevPopulationDeploymentIdDesc = 'DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_DEPLOYMENT_ID_DESC',
  DeploymentBoostersStddevPopulationEraIdxAsc = 'DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_ERA_IDX_ASC',
  DeploymentBoostersStddevPopulationEraIdxDesc = 'DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_ERA_IDX_DESC',
  DeploymentBoostersStddevPopulationIdAsc = 'DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_ID_ASC',
  DeploymentBoostersStddevPopulationIdDesc = 'DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_ID_DESC',
  DeploymentBoostersStddevPopulationProjectIdAsc = 'DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_PROJECT_ID_ASC',
  DeploymentBoostersStddevPopulationProjectIdDesc = 'DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_PROJECT_ID_DESC',
  DeploymentBoostersStddevSampleAmountAddedAsc = 'DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_AMOUNT_ADDED_ASC',
  DeploymentBoostersStddevSampleAmountAddedDesc = 'DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_AMOUNT_ADDED_DESC',
  DeploymentBoostersStddevSampleAmountRemovedAsc = 'DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_AMOUNT_REMOVED_ASC',
  DeploymentBoostersStddevSampleAmountRemovedDesc = 'DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_AMOUNT_REMOVED_DESC',
  DeploymentBoostersStddevSampleBlockRangeAsc = 'DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  DeploymentBoostersStddevSampleBlockRangeDesc = 'DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  DeploymentBoostersStddevSampleConsumerAsc = 'DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_CONSUMER_ASC',
  DeploymentBoostersStddevSampleConsumerDesc = 'DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_CONSUMER_DESC',
  DeploymentBoostersStddevSampleCreateAtAsc = 'DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_CREATE_AT_ASC',
  DeploymentBoostersStddevSampleCreateAtDesc = 'DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_CREATE_AT_DESC',
  DeploymentBoostersStddevSampleDeploymentIdAsc = 'DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC',
  DeploymentBoostersStddevSampleDeploymentIdDesc = 'DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC',
  DeploymentBoostersStddevSampleEraIdxAsc = 'DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_ERA_IDX_ASC',
  DeploymentBoostersStddevSampleEraIdxDesc = 'DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_ERA_IDX_DESC',
  DeploymentBoostersStddevSampleIdAsc = 'DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_ID_ASC',
  DeploymentBoostersStddevSampleIdDesc = 'DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_ID_DESC',
  DeploymentBoostersStddevSampleProjectIdAsc = 'DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_PROJECT_ID_ASC',
  DeploymentBoostersStddevSampleProjectIdDesc = 'DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_PROJECT_ID_DESC',
  DeploymentBoostersSumAmountAddedAsc = 'DEPLOYMENT_BOOSTERS_SUM_AMOUNT_ADDED_ASC',
  DeploymentBoostersSumAmountAddedDesc = 'DEPLOYMENT_BOOSTERS_SUM_AMOUNT_ADDED_DESC',
  DeploymentBoostersSumAmountRemovedAsc = 'DEPLOYMENT_BOOSTERS_SUM_AMOUNT_REMOVED_ASC',
  DeploymentBoostersSumAmountRemovedDesc = 'DEPLOYMENT_BOOSTERS_SUM_AMOUNT_REMOVED_DESC',
  DeploymentBoostersSumBlockRangeAsc = 'DEPLOYMENT_BOOSTERS_SUM_BLOCK_RANGE_ASC',
  DeploymentBoostersSumBlockRangeDesc = 'DEPLOYMENT_BOOSTERS_SUM_BLOCK_RANGE_DESC',
  DeploymentBoostersSumConsumerAsc = 'DEPLOYMENT_BOOSTERS_SUM_CONSUMER_ASC',
  DeploymentBoostersSumConsumerDesc = 'DEPLOYMENT_BOOSTERS_SUM_CONSUMER_DESC',
  DeploymentBoostersSumCreateAtAsc = 'DEPLOYMENT_BOOSTERS_SUM_CREATE_AT_ASC',
  DeploymentBoostersSumCreateAtDesc = 'DEPLOYMENT_BOOSTERS_SUM_CREATE_AT_DESC',
  DeploymentBoostersSumDeploymentIdAsc = 'DEPLOYMENT_BOOSTERS_SUM_DEPLOYMENT_ID_ASC',
  DeploymentBoostersSumDeploymentIdDesc = 'DEPLOYMENT_BOOSTERS_SUM_DEPLOYMENT_ID_DESC',
  DeploymentBoostersSumEraIdxAsc = 'DEPLOYMENT_BOOSTERS_SUM_ERA_IDX_ASC',
  DeploymentBoostersSumEraIdxDesc = 'DEPLOYMENT_BOOSTERS_SUM_ERA_IDX_DESC',
  DeploymentBoostersSumIdAsc = 'DEPLOYMENT_BOOSTERS_SUM_ID_ASC',
  DeploymentBoostersSumIdDesc = 'DEPLOYMENT_BOOSTERS_SUM_ID_DESC',
  DeploymentBoostersSumProjectIdAsc = 'DEPLOYMENT_BOOSTERS_SUM_PROJECT_ID_ASC',
  DeploymentBoostersSumProjectIdDesc = 'DEPLOYMENT_BOOSTERS_SUM_PROJECT_ID_DESC',
  DeploymentBoostersVariancePopulationAmountAddedAsc = 'DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_AMOUNT_ADDED_ASC',
  DeploymentBoostersVariancePopulationAmountAddedDesc = 'DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_AMOUNT_ADDED_DESC',
  DeploymentBoostersVariancePopulationAmountRemovedAsc = 'DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_AMOUNT_REMOVED_ASC',
  DeploymentBoostersVariancePopulationAmountRemovedDesc = 'DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_AMOUNT_REMOVED_DESC',
  DeploymentBoostersVariancePopulationBlockRangeAsc = 'DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  DeploymentBoostersVariancePopulationBlockRangeDesc = 'DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  DeploymentBoostersVariancePopulationConsumerAsc = 'DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_CONSUMER_ASC',
  DeploymentBoostersVariancePopulationConsumerDesc = 'DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_CONSUMER_DESC',
  DeploymentBoostersVariancePopulationCreateAtAsc = 'DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_CREATE_AT_ASC',
  DeploymentBoostersVariancePopulationCreateAtDesc = 'DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_CREATE_AT_DESC',
  DeploymentBoostersVariancePopulationDeploymentIdAsc = 'DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC',
  DeploymentBoostersVariancePopulationDeploymentIdDesc = 'DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC',
  DeploymentBoostersVariancePopulationEraIdxAsc = 'DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_ERA_IDX_ASC',
  DeploymentBoostersVariancePopulationEraIdxDesc = 'DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_ERA_IDX_DESC',
  DeploymentBoostersVariancePopulationIdAsc = 'DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_ID_ASC',
  DeploymentBoostersVariancePopulationIdDesc = 'DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_ID_DESC',
  DeploymentBoostersVariancePopulationProjectIdAsc = 'DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_PROJECT_ID_ASC',
  DeploymentBoostersVariancePopulationProjectIdDesc = 'DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_PROJECT_ID_DESC',
  DeploymentBoostersVarianceSampleAmountAddedAsc = 'DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_AMOUNT_ADDED_ASC',
  DeploymentBoostersVarianceSampleAmountAddedDesc = 'DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_AMOUNT_ADDED_DESC',
  DeploymentBoostersVarianceSampleAmountRemovedAsc = 'DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_AMOUNT_REMOVED_ASC',
  DeploymentBoostersVarianceSampleAmountRemovedDesc = 'DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_AMOUNT_REMOVED_DESC',
  DeploymentBoostersVarianceSampleBlockRangeAsc = 'DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  DeploymentBoostersVarianceSampleBlockRangeDesc = 'DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  DeploymentBoostersVarianceSampleConsumerAsc = 'DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_CONSUMER_ASC',
  DeploymentBoostersVarianceSampleConsumerDesc = 'DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_CONSUMER_DESC',
  DeploymentBoostersVarianceSampleCreateAtAsc = 'DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_CREATE_AT_ASC',
  DeploymentBoostersVarianceSampleCreateAtDesc = 'DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_CREATE_AT_DESC',
  DeploymentBoostersVarianceSampleDeploymentIdAsc = 'DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC',
  DeploymentBoostersVarianceSampleDeploymentIdDesc = 'DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC',
  DeploymentBoostersVarianceSampleEraIdxAsc = 'DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_ERA_IDX_ASC',
  DeploymentBoostersVarianceSampleEraIdxDesc = 'DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_ERA_IDX_DESC',
  DeploymentBoostersVarianceSampleIdAsc = 'DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_ID_ASC',
  DeploymentBoostersVarianceSampleIdDesc = 'DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_ID_DESC',
  DeploymentBoostersVarianceSampleProjectIdAsc = 'DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_PROJECT_ID_ASC',
  DeploymentBoostersVarianceSampleProjectIdDesc = 'DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_PROJECT_ID_DESC',
  DeploymentBoosterSummariesAverageBlockRangeAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_BLOCK_RANGE_ASC',
  DeploymentBoosterSummariesAverageBlockRangeDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_BLOCK_RANGE_DESC',
  DeploymentBoosterSummariesAverageConsumerAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_CONSUMER_ASC',
  DeploymentBoosterSummariesAverageConsumerDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_CONSUMER_DESC',
  DeploymentBoosterSummariesAverageCreateAtAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_CREATE_AT_ASC',
  DeploymentBoosterSummariesAverageCreateAtDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_CREATE_AT_DESC',
  DeploymentBoosterSummariesAverageDeploymentIdAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_DEPLOYMENT_ID_ASC',
  DeploymentBoosterSummariesAverageDeploymentIdDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_DEPLOYMENT_ID_DESC',
  DeploymentBoosterSummariesAverageIdAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_ID_ASC',
  DeploymentBoosterSummariesAverageIdDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_ID_DESC',
  DeploymentBoosterSummariesAverageProjectIdAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_PROJECT_ID_ASC',
  DeploymentBoosterSummariesAverageProjectIdDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_PROJECT_ID_DESC',
  DeploymentBoosterSummariesAverageTotalAddedAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_TOTAL_ADDED_ASC',
  DeploymentBoosterSummariesAverageTotalAddedDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_TOTAL_ADDED_DESC',
  DeploymentBoosterSummariesAverageTotalAmountAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_TOTAL_AMOUNT_ASC',
  DeploymentBoosterSummariesAverageTotalAmountDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_TOTAL_AMOUNT_DESC',
  DeploymentBoosterSummariesAverageTotalRemovedAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_TOTAL_REMOVED_ASC',
  DeploymentBoosterSummariesAverageTotalRemovedDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_TOTAL_REMOVED_DESC',
  DeploymentBoosterSummariesAverageUpdateAtAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_UPDATE_AT_ASC',
  DeploymentBoosterSummariesAverageUpdateAtDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_UPDATE_AT_DESC',
  DeploymentBoosterSummariesByDeploymentIdCountAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_BY_DEPLOYMENT_ID__COUNT_ASC',
  DeploymentBoosterSummariesByDeploymentIdCountDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_BY_DEPLOYMENT_ID__COUNT_DESC',
  DeploymentBoosterSummariesCountAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_COUNT_ASC',
  DeploymentBoosterSummariesCountDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_COUNT_DESC',
  DeploymentBoosterSummariesDistinctCountBlockRangeAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  DeploymentBoosterSummariesDistinctCountBlockRangeDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  DeploymentBoosterSummariesDistinctCountConsumerAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_CONSUMER_ASC',
  DeploymentBoosterSummariesDistinctCountConsumerDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_CONSUMER_DESC',
  DeploymentBoosterSummariesDistinctCountCreateAtAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_CREATE_AT_ASC',
  DeploymentBoosterSummariesDistinctCountCreateAtDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_CREATE_AT_DESC',
  DeploymentBoosterSummariesDistinctCountDeploymentIdAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_DEPLOYMENT_ID_ASC',
  DeploymentBoosterSummariesDistinctCountDeploymentIdDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_DEPLOYMENT_ID_DESC',
  DeploymentBoosterSummariesDistinctCountIdAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_ID_ASC',
  DeploymentBoosterSummariesDistinctCountIdDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_ID_DESC',
  DeploymentBoosterSummariesDistinctCountProjectIdAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_PROJECT_ID_ASC',
  DeploymentBoosterSummariesDistinctCountProjectIdDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_PROJECT_ID_DESC',
  DeploymentBoosterSummariesDistinctCountTotalAddedAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_TOTAL_ADDED_ASC',
  DeploymentBoosterSummariesDistinctCountTotalAddedDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_TOTAL_ADDED_DESC',
  DeploymentBoosterSummariesDistinctCountTotalAmountAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_TOTAL_AMOUNT_ASC',
  DeploymentBoosterSummariesDistinctCountTotalAmountDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_TOTAL_AMOUNT_DESC',
  DeploymentBoosterSummariesDistinctCountTotalRemovedAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_TOTAL_REMOVED_ASC',
  DeploymentBoosterSummariesDistinctCountTotalRemovedDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_TOTAL_REMOVED_DESC',
  DeploymentBoosterSummariesDistinctCountUpdateAtAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_UPDATE_AT_ASC',
  DeploymentBoosterSummariesDistinctCountUpdateAtDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_UPDATE_AT_DESC',
  DeploymentBoosterSummariesMaxBlockRangeAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_BLOCK_RANGE_ASC',
  DeploymentBoosterSummariesMaxBlockRangeDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_BLOCK_RANGE_DESC',
  DeploymentBoosterSummariesMaxConsumerAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_CONSUMER_ASC',
  DeploymentBoosterSummariesMaxConsumerDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_CONSUMER_DESC',
  DeploymentBoosterSummariesMaxCreateAtAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_CREATE_AT_ASC',
  DeploymentBoosterSummariesMaxCreateAtDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_CREATE_AT_DESC',
  DeploymentBoosterSummariesMaxDeploymentIdAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_DEPLOYMENT_ID_ASC',
  DeploymentBoosterSummariesMaxDeploymentIdDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_DEPLOYMENT_ID_DESC',
  DeploymentBoosterSummariesMaxIdAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_ID_ASC',
  DeploymentBoosterSummariesMaxIdDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_ID_DESC',
  DeploymentBoosterSummariesMaxProjectIdAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_PROJECT_ID_ASC',
  DeploymentBoosterSummariesMaxProjectIdDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_PROJECT_ID_DESC',
  DeploymentBoosterSummariesMaxTotalAddedAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_TOTAL_ADDED_ASC',
  DeploymentBoosterSummariesMaxTotalAddedDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_TOTAL_ADDED_DESC',
  DeploymentBoosterSummariesMaxTotalAmountAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_TOTAL_AMOUNT_ASC',
  DeploymentBoosterSummariesMaxTotalAmountDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_TOTAL_AMOUNT_DESC',
  DeploymentBoosterSummariesMaxTotalRemovedAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_TOTAL_REMOVED_ASC',
  DeploymentBoosterSummariesMaxTotalRemovedDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_TOTAL_REMOVED_DESC',
  DeploymentBoosterSummariesMaxUpdateAtAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_UPDATE_AT_ASC',
  DeploymentBoosterSummariesMaxUpdateAtDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_UPDATE_AT_DESC',
  DeploymentBoosterSummariesMinBlockRangeAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_BLOCK_RANGE_ASC',
  DeploymentBoosterSummariesMinBlockRangeDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_BLOCK_RANGE_DESC',
  DeploymentBoosterSummariesMinConsumerAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_CONSUMER_ASC',
  DeploymentBoosterSummariesMinConsumerDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_CONSUMER_DESC',
  DeploymentBoosterSummariesMinCreateAtAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_CREATE_AT_ASC',
  DeploymentBoosterSummariesMinCreateAtDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_CREATE_AT_DESC',
  DeploymentBoosterSummariesMinDeploymentIdAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_DEPLOYMENT_ID_ASC',
  DeploymentBoosterSummariesMinDeploymentIdDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_DEPLOYMENT_ID_DESC',
  DeploymentBoosterSummariesMinIdAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_ID_ASC',
  DeploymentBoosterSummariesMinIdDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_ID_DESC',
  DeploymentBoosterSummariesMinProjectIdAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_PROJECT_ID_ASC',
  DeploymentBoosterSummariesMinProjectIdDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_PROJECT_ID_DESC',
  DeploymentBoosterSummariesMinTotalAddedAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_TOTAL_ADDED_ASC',
  DeploymentBoosterSummariesMinTotalAddedDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_TOTAL_ADDED_DESC',
  DeploymentBoosterSummariesMinTotalAmountAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_TOTAL_AMOUNT_ASC',
  DeploymentBoosterSummariesMinTotalAmountDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_TOTAL_AMOUNT_DESC',
  DeploymentBoosterSummariesMinTotalRemovedAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_TOTAL_REMOVED_ASC',
  DeploymentBoosterSummariesMinTotalRemovedDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_TOTAL_REMOVED_DESC',
  DeploymentBoosterSummariesMinUpdateAtAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_UPDATE_AT_ASC',
  DeploymentBoosterSummariesMinUpdateAtDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_UPDATE_AT_DESC',
  DeploymentBoosterSummariesStddevPopulationBlockRangeAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  DeploymentBoosterSummariesStddevPopulationBlockRangeDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  DeploymentBoosterSummariesStddevPopulationConsumerAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_CONSUMER_ASC',
  DeploymentBoosterSummariesStddevPopulationConsumerDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_CONSUMER_DESC',
  DeploymentBoosterSummariesStddevPopulationCreateAtAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_CREATE_AT_ASC',
  DeploymentBoosterSummariesStddevPopulationCreateAtDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_CREATE_AT_DESC',
  DeploymentBoosterSummariesStddevPopulationDeploymentIdAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_DEPLOYMENT_ID_ASC',
  DeploymentBoosterSummariesStddevPopulationDeploymentIdDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_DEPLOYMENT_ID_DESC',
  DeploymentBoosterSummariesStddevPopulationIdAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_ID_ASC',
  DeploymentBoosterSummariesStddevPopulationIdDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_ID_DESC',
  DeploymentBoosterSummariesStddevPopulationProjectIdAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_PROJECT_ID_ASC',
  DeploymentBoosterSummariesStddevPopulationProjectIdDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_PROJECT_ID_DESC',
  DeploymentBoosterSummariesStddevPopulationTotalAddedAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_TOTAL_ADDED_ASC',
  DeploymentBoosterSummariesStddevPopulationTotalAddedDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_TOTAL_ADDED_DESC',
  DeploymentBoosterSummariesStddevPopulationTotalAmountAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_TOTAL_AMOUNT_ASC',
  DeploymentBoosterSummariesStddevPopulationTotalAmountDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_TOTAL_AMOUNT_DESC',
  DeploymentBoosterSummariesStddevPopulationTotalRemovedAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_TOTAL_REMOVED_ASC',
  DeploymentBoosterSummariesStddevPopulationTotalRemovedDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_TOTAL_REMOVED_DESC',
  DeploymentBoosterSummariesStddevPopulationUpdateAtAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_UPDATE_AT_ASC',
  DeploymentBoosterSummariesStddevPopulationUpdateAtDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_UPDATE_AT_DESC',
  DeploymentBoosterSummariesStddevSampleBlockRangeAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  DeploymentBoosterSummariesStddevSampleBlockRangeDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  DeploymentBoosterSummariesStddevSampleConsumerAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_CONSUMER_ASC',
  DeploymentBoosterSummariesStddevSampleConsumerDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_CONSUMER_DESC',
  DeploymentBoosterSummariesStddevSampleCreateAtAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_CREATE_AT_ASC',
  DeploymentBoosterSummariesStddevSampleCreateAtDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_CREATE_AT_DESC',
  DeploymentBoosterSummariesStddevSampleDeploymentIdAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC',
  DeploymentBoosterSummariesStddevSampleDeploymentIdDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC',
  DeploymentBoosterSummariesStddevSampleIdAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_ID_ASC',
  DeploymentBoosterSummariesStddevSampleIdDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_ID_DESC',
  DeploymentBoosterSummariesStddevSampleProjectIdAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_PROJECT_ID_ASC',
  DeploymentBoosterSummariesStddevSampleProjectIdDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_PROJECT_ID_DESC',
  DeploymentBoosterSummariesStddevSampleTotalAddedAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_TOTAL_ADDED_ASC',
  DeploymentBoosterSummariesStddevSampleTotalAddedDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_TOTAL_ADDED_DESC',
  DeploymentBoosterSummariesStddevSampleTotalAmountAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_TOTAL_AMOUNT_ASC',
  DeploymentBoosterSummariesStddevSampleTotalAmountDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_TOTAL_AMOUNT_DESC',
  DeploymentBoosterSummariesStddevSampleTotalRemovedAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_TOTAL_REMOVED_ASC',
  DeploymentBoosterSummariesStddevSampleTotalRemovedDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_TOTAL_REMOVED_DESC',
  DeploymentBoosterSummariesStddevSampleUpdateAtAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_UPDATE_AT_ASC',
  DeploymentBoosterSummariesStddevSampleUpdateAtDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_UPDATE_AT_DESC',
  DeploymentBoosterSummariesSumBlockRangeAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_BLOCK_RANGE_ASC',
  DeploymentBoosterSummariesSumBlockRangeDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_BLOCK_RANGE_DESC',
  DeploymentBoosterSummariesSumConsumerAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_CONSUMER_ASC',
  DeploymentBoosterSummariesSumConsumerDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_CONSUMER_DESC',
  DeploymentBoosterSummariesSumCreateAtAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_CREATE_AT_ASC',
  DeploymentBoosterSummariesSumCreateAtDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_CREATE_AT_DESC',
  DeploymentBoosterSummariesSumDeploymentIdAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_DEPLOYMENT_ID_ASC',
  DeploymentBoosterSummariesSumDeploymentIdDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_DEPLOYMENT_ID_DESC',
  DeploymentBoosterSummariesSumIdAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_ID_ASC',
  DeploymentBoosterSummariesSumIdDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_ID_DESC',
  DeploymentBoosterSummariesSumProjectIdAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_PROJECT_ID_ASC',
  DeploymentBoosterSummariesSumProjectIdDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_PROJECT_ID_DESC',
  DeploymentBoosterSummariesSumTotalAddedAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_TOTAL_ADDED_ASC',
  DeploymentBoosterSummariesSumTotalAddedDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_TOTAL_ADDED_DESC',
  DeploymentBoosterSummariesSumTotalAmountAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_TOTAL_AMOUNT_ASC',
  DeploymentBoosterSummariesSumTotalAmountDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_TOTAL_AMOUNT_DESC',
  DeploymentBoosterSummariesSumTotalRemovedAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_TOTAL_REMOVED_ASC',
  DeploymentBoosterSummariesSumTotalRemovedDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_TOTAL_REMOVED_DESC',
  DeploymentBoosterSummariesSumUpdateAtAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_UPDATE_AT_ASC',
  DeploymentBoosterSummariesSumUpdateAtDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_UPDATE_AT_DESC',
  DeploymentBoosterSummariesVariancePopulationBlockRangeAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  DeploymentBoosterSummariesVariancePopulationBlockRangeDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  DeploymentBoosterSummariesVariancePopulationConsumerAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_CONSUMER_ASC',
  DeploymentBoosterSummariesVariancePopulationConsumerDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_CONSUMER_DESC',
  DeploymentBoosterSummariesVariancePopulationCreateAtAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_CREATE_AT_ASC',
  DeploymentBoosterSummariesVariancePopulationCreateAtDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_CREATE_AT_DESC',
  DeploymentBoosterSummariesVariancePopulationDeploymentIdAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC',
  DeploymentBoosterSummariesVariancePopulationDeploymentIdDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC',
  DeploymentBoosterSummariesVariancePopulationIdAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_ID_ASC',
  DeploymentBoosterSummariesVariancePopulationIdDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_ID_DESC',
  DeploymentBoosterSummariesVariancePopulationProjectIdAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_PROJECT_ID_ASC',
  DeploymentBoosterSummariesVariancePopulationProjectIdDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_PROJECT_ID_DESC',
  DeploymentBoosterSummariesVariancePopulationTotalAddedAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_TOTAL_ADDED_ASC',
  DeploymentBoosterSummariesVariancePopulationTotalAddedDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_TOTAL_ADDED_DESC',
  DeploymentBoosterSummariesVariancePopulationTotalAmountAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_TOTAL_AMOUNT_ASC',
  DeploymentBoosterSummariesVariancePopulationTotalAmountDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_TOTAL_AMOUNT_DESC',
  DeploymentBoosterSummariesVariancePopulationTotalRemovedAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_TOTAL_REMOVED_ASC',
  DeploymentBoosterSummariesVariancePopulationTotalRemovedDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_TOTAL_REMOVED_DESC',
  DeploymentBoosterSummariesVariancePopulationUpdateAtAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_UPDATE_AT_ASC',
  DeploymentBoosterSummariesVariancePopulationUpdateAtDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_UPDATE_AT_DESC',
  DeploymentBoosterSummariesVarianceSampleBlockRangeAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  DeploymentBoosterSummariesVarianceSampleBlockRangeDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  DeploymentBoosterSummariesVarianceSampleConsumerAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_CONSUMER_ASC',
  DeploymentBoosterSummariesVarianceSampleConsumerDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_CONSUMER_DESC',
  DeploymentBoosterSummariesVarianceSampleCreateAtAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_CREATE_AT_ASC',
  DeploymentBoosterSummariesVarianceSampleCreateAtDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_CREATE_AT_DESC',
  DeploymentBoosterSummariesVarianceSampleDeploymentIdAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC',
  DeploymentBoosterSummariesVarianceSampleDeploymentIdDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC',
  DeploymentBoosterSummariesVarianceSampleIdAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_ID_ASC',
  DeploymentBoosterSummariesVarianceSampleIdDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_ID_DESC',
  DeploymentBoosterSummariesVarianceSampleProjectIdAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_PROJECT_ID_ASC',
  DeploymentBoosterSummariesVarianceSampleProjectIdDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_PROJECT_ID_DESC',
  DeploymentBoosterSummariesVarianceSampleTotalAddedAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_TOTAL_ADDED_ASC',
  DeploymentBoosterSummariesVarianceSampleTotalAddedDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_TOTAL_ADDED_DESC',
  DeploymentBoosterSummariesVarianceSampleTotalAmountAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_TOTAL_AMOUNT_ASC',
  DeploymentBoosterSummariesVarianceSampleTotalAmountDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_TOTAL_AMOUNT_DESC',
  DeploymentBoosterSummariesVarianceSampleTotalRemovedAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_TOTAL_REMOVED_ASC',
  DeploymentBoosterSummariesVarianceSampleTotalRemovedDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_TOTAL_REMOVED_DESC',
  DeploymentBoosterSummariesVarianceSampleUpdateAtAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_UPDATE_AT_ASC',
  DeploymentBoosterSummariesVarianceSampleUpdateAtDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_UPDATE_AT_DESC',
  EraIndexerDeploymentApiesAverageAgreementRewardAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_AGREEMENT_REWARD_ASC',
  EraIndexerDeploymentApiesAverageAgreementRewardDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_AGREEMENT_REWARD_DESC',
  EraIndexerDeploymentApiesAverageAllocationRewardAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_ALLOCATION_REWARD_ASC',
  EraIndexerDeploymentApiesAverageAllocationRewardDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_ALLOCATION_REWARD_DESC',
  EraIndexerDeploymentApiesAverageApyAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_APY_ASC',
  EraIndexerDeploymentApiesAverageApyCalcAddedAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_APY_CALC_ADDED_ASC',
  EraIndexerDeploymentApiesAverageApyCalcAddedDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_APY_CALC_ADDED_DESC',
  EraIndexerDeploymentApiesAverageApyCalcAllocationAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_APY_CALC_ALLOCATION_ASC',
  EraIndexerDeploymentApiesAverageApyCalcAllocationDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_APY_CALC_ALLOCATION_DESC',
  EraIndexerDeploymentApiesAverageApyCalcAllocationRecordAtAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_APY_CALC_ALLOCATION_RECORD_AT_ASC',
  EraIndexerDeploymentApiesAverageApyCalcAllocationRecordAtDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_APY_CALC_ALLOCATION_RECORD_AT_DESC',
  EraIndexerDeploymentApiesAverageApyCalcHistoryAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_APY_CALC_HISTORY_ASC',
  EraIndexerDeploymentApiesAverageApyCalcHistoryDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_APY_CALC_HISTORY_DESC',
  EraIndexerDeploymentApiesAverageApyCalcRemovalAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_APY_CALC_REMOVAL_ASC',
  EraIndexerDeploymentApiesAverageApyCalcRemovalDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_APY_CALC_REMOVAL_DESC',
  EraIndexerDeploymentApiesAverageApyDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_APY_DESC',
  EraIndexerDeploymentApiesAverageBlockRangeAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_BLOCK_RANGE_ASC',
  EraIndexerDeploymentApiesAverageBlockRangeDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_BLOCK_RANGE_DESC',
  EraIndexerDeploymentApiesAverageCreateAtAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_CREATE_AT_ASC',
  EraIndexerDeploymentApiesAverageCreateAtDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_CREATE_AT_DESC',
  EraIndexerDeploymentApiesAverageDeploymentIdAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_DEPLOYMENT_ID_ASC',
  EraIndexerDeploymentApiesAverageDeploymentIdDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_DEPLOYMENT_ID_DESC',
  EraIndexerDeploymentApiesAverageEraIdxAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_ERA_IDX_ASC',
  EraIndexerDeploymentApiesAverageEraIdxDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_ERA_IDX_DESC',
  EraIndexerDeploymentApiesAverageFlexPlanRewardAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_FLEX_PLAN_REWARD_ASC',
  EraIndexerDeploymentApiesAverageFlexPlanRewardDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_FLEX_PLAN_REWARD_DESC',
  EraIndexerDeploymentApiesAverageIdAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_ID_ASC',
  EraIndexerDeploymentApiesAverageIdDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_ID_DESC',
  EraIndexerDeploymentApiesAverageIndexerIdAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_INDEXER_ID_ASC',
  EraIndexerDeploymentApiesAverageIndexerIdDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_INDEXER_ID_DESC',
  EraIndexerDeploymentApiesAverageUpdateAtAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_UPDATE_AT_ASC',
  EraIndexerDeploymentApiesAverageUpdateAtDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_UPDATE_AT_DESC',
  EraIndexerDeploymentApiesByDeploymentIdCountAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_BY_DEPLOYMENT_ID__COUNT_ASC',
  EraIndexerDeploymentApiesByDeploymentIdCountDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_BY_DEPLOYMENT_ID__COUNT_DESC',
  EraIndexerDeploymentApiesCountAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_COUNT_ASC',
  EraIndexerDeploymentApiesCountDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_COUNT_DESC',
  EraIndexerDeploymentApiesDistinctCountAgreementRewardAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_AGREEMENT_REWARD_ASC',
  EraIndexerDeploymentApiesDistinctCountAgreementRewardDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_AGREEMENT_REWARD_DESC',
  EraIndexerDeploymentApiesDistinctCountAllocationRewardAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_ALLOCATION_REWARD_ASC',
  EraIndexerDeploymentApiesDistinctCountAllocationRewardDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_ALLOCATION_REWARD_DESC',
  EraIndexerDeploymentApiesDistinctCountApyAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_APY_ASC',
  EraIndexerDeploymentApiesDistinctCountApyCalcAddedAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_APY_CALC_ADDED_ASC',
  EraIndexerDeploymentApiesDistinctCountApyCalcAddedDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_APY_CALC_ADDED_DESC',
  EraIndexerDeploymentApiesDistinctCountApyCalcAllocationAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_APY_CALC_ALLOCATION_ASC',
  EraIndexerDeploymentApiesDistinctCountApyCalcAllocationDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_APY_CALC_ALLOCATION_DESC',
  EraIndexerDeploymentApiesDistinctCountApyCalcAllocationRecordAtAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_APY_CALC_ALLOCATION_RECORD_AT_ASC',
  EraIndexerDeploymentApiesDistinctCountApyCalcAllocationRecordAtDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_APY_CALC_ALLOCATION_RECORD_AT_DESC',
  EraIndexerDeploymentApiesDistinctCountApyCalcHistoryAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_APY_CALC_HISTORY_ASC',
  EraIndexerDeploymentApiesDistinctCountApyCalcHistoryDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_APY_CALC_HISTORY_DESC',
  EraIndexerDeploymentApiesDistinctCountApyCalcRemovalAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_APY_CALC_REMOVAL_ASC',
  EraIndexerDeploymentApiesDistinctCountApyCalcRemovalDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_APY_CALC_REMOVAL_DESC',
  EraIndexerDeploymentApiesDistinctCountApyDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_APY_DESC',
  EraIndexerDeploymentApiesDistinctCountBlockRangeAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  EraIndexerDeploymentApiesDistinctCountBlockRangeDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  EraIndexerDeploymentApiesDistinctCountCreateAtAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_CREATE_AT_ASC',
  EraIndexerDeploymentApiesDistinctCountCreateAtDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_CREATE_AT_DESC',
  EraIndexerDeploymentApiesDistinctCountDeploymentIdAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_DEPLOYMENT_ID_ASC',
  EraIndexerDeploymentApiesDistinctCountDeploymentIdDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_DEPLOYMENT_ID_DESC',
  EraIndexerDeploymentApiesDistinctCountEraIdxAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_ERA_IDX_ASC',
  EraIndexerDeploymentApiesDistinctCountEraIdxDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_ERA_IDX_DESC',
  EraIndexerDeploymentApiesDistinctCountFlexPlanRewardAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_FLEX_PLAN_REWARD_ASC',
  EraIndexerDeploymentApiesDistinctCountFlexPlanRewardDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_FLEX_PLAN_REWARD_DESC',
  EraIndexerDeploymentApiesDistinctCountIdAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_ID_ASC',
  EraIndexerDeploymentApiesDistinctCountIdDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_ID_DESC',
  EraIndexerDeploymentApiesDistinctCountIndexerIdAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_INDEXER_ID_ASC',
  EraIndexerDeploymentApiesDistinctCountIndexerIdDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_INDEXER_ID_DESC',
  EraIndexerDeploymentApiesDistinctCountUpdateAtAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_UPDATE_AT_ASC',
  EraIndexerDeploymentApiesDistinctCountUpdateAtDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_UPDATE_AT_DESC',
  EraIndexerDeploymentApiesMaxAgreementRewardAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_AGREEMENT_REWARD_ASC',
  EraIndexerDeploymentApiesMaxAgreementRewardDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_AGREEMENT_REWARD_DESC',
  EraIndexerDeploymentApiesMaxAllocationRewardAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_ALLOCATION_REWARD_ASC',
  EraIndexerDeploymentApiesMaxAllocationRewardDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_ALLOCATION_REWARD_DESC',
  EraIndexerDeploymentApiesMaxApyAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_APY_ASC',
  EraIndexerDeploymentApiesMaxApyCalcAddedAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_APY_CALC_ADDED_ASC',
  EraIndexerDeploymentApiesMaxApyCalcAddedDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_APY_CALC_ADDED_DESC',
  EraIndexerDeploymentApiesMaxApyCalcAllocationAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_APY_CALC_ALLOCATION_ASC',
  EraIndexerDeploymentApiesMaxApyCalcAllocationDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_APY_CALC_ALLOCATION_DESC',
  EraIndexerDeploymentApiesMaxApyCalcAllocationRecordAtAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_APY_CALC_ALLOCATION_RECORD_AT_ASC',
  EraIndexerDeploymentApiesMaxApyCalcAllocationRecordAtDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_APY_CALC_ALLOCATION_RECORD_AT_DESC',
  EraIndexerDeploymentApiesMaxApyCalcHistoryAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_APY_CALC_HISTORY_ASC',
  EraIndexerDeploymentApiesMaxApyCalcHistoryDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_APY_CALC_HISTORY_DESC',
  EraIndexerDeploymentApiesMaxApyCalcRemovalAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_APY_CALC_REMOVAL_ASC',
  EraIndexerDeploymentApiesMaxApyCalcRemovalDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_APY_CALC_REMOVAL_DESC',
  EraIndexerDeploymentApiesMaxApyDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_APY_DESC',
  EraIndexerDeploymentApiesMaxBlockRangeAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_BLOCK_RANGE_ASC',
  EraIndexerDeploymentApiesMaxBlockRangeDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_BLOCK_RANGE_DESC',
  EraIndexerDeploymentApiesMaxCreateAtAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_CREATE_AT_ASC',
  EraIndexerDeploymentApiesMaxCreateAtDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_CREATE_AT_DESC',
  EraIndexerDeploymentApiesMaxDeploymentIdAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_DEPLOYMENT_ID_ASC',
  EraIndexerDeploymentApiesMaxDeploymentIdDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_DEPLOYMENT_ID_DESC',
  EraIndexerDeploymentApiesMaxEraIdxAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_ERA_IDX_ASC',
  EraIndexerDeploymentApiesMaxEraIdxDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_ERA_IDX_DESC',
  EraIndexerDeploymentApiesMaxFlexPlanRewardAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_FLEX_PLAN_REWARD_ASC',
  EraIndexerDeploymentApiesMaxFlexPlanRewardDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_FLEX_PLAN_REWARD_DESC',
  EraIndexerDeploymentApiesMaxIdAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_ID_ASC',
  EraIndexerDeploymentApiesMaxIdDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_ID_DESC',
  EraIndexerDeploymentApiesMaxIndexerIdAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_INDEXER_ID_ASC',
  EraIndexerDeploymentApiesMaxIndexerIdDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_INDEXER_ID_DESC',
  EraIndexerDeploymentApiesMaxUpdateAtAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_UPDATE_AT_ASC',
  EraIndexerDeploymentApiesMaxUpdateAtDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_UPDATE_AT_DESC',
  EraIndexerDeploymentApiesMinAgreementRewardAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_AGREEMENT_REWARD_ASC',
  EraIndexerDeploymentApiesMinAgreementRewardDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_AGREEMENT_REWARD_DESC',
  EraIndexerDeploymentApiesMinAllocationRewardAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_ALLOCATION_REWARD_ASC',
  EraIndexerDeploymentApiesMinAllocationRewardDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_ALLOCATION_REWARD_DESC',
  EraIndexerDeploymentApiesMinApyAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_APY_ASC',
  EraIndexerDeploymentApiesMinApyCalcAddedAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_APY_CALC_ADDED_ASC',
  EraIndexerDeploymentApiesMinApyCalcAddedDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_APY_CALC_ADDED_DESC',
  EraIndexerDeploymentApiesMinApyCalcAllocationAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_APY_CALC_ALLOCATION_ASC',
  EraIndexerDeploymentApiesMinApyCalcAllocationDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_APY_CALC_ALLOCATION_DESC',
  EraIndexerDeploymentApiesMinApyCalcAllocationRecordAtAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_APY_CALC_ALLOCATION_RECORD_AT_ASC',
  EraIndexerDeploymentApiesMinApyCalcAllocationRecordAtDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_APY_CALC_ALLOCATION_RECORD_AT_DESC',
  EraIndexerDeploymentApiesMinApyCalcHistoryAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_APY_CALC_HISTORY_ASC',
  EraIndexerDeploymentApiesMinApyCalcHistoryDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_APY_CALC_HISTORY_DESC',
  EraIndexerDeploymentApiesMinApyCalcRemovalAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_APY_CALC_REMOVAL_ASC',
  EraIndexerDeploymentApiesMinApyCalcRemovalDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_APY_CALC_REMOVAL_DESC',
  EraIndexerDeploymentApiesMinApyDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_APY_DESC',
  EraIndexerDeploymentApiesMinBlockRangeAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_BLOCK_RANGE_ASC',
  EraIndexerDeploymentApiesMinBlockRangeDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_BLOCK_RANGE_DESC',
  EraIndexerDeploymentApiesMinCreateAtAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_CREATE_AT_ASC',
  EraIndexerDeploymentApiesMinCreateAtDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_CREATE_AT_DESC',
  EraIndexerDeploymentApiesMinDeploymentIdAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_DEPLOYMENT_ID_ASC',
  EraIndexerDeploymentApiesMinDeploymentIdDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_DEPLOYMENT_ID_DESC',
  EraIndexerDeploymentApiesMinEraIdxAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_ERA_IDX_ASC',
  EraIndexerDeploymentApiesMinEraIdxDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_ERA_IDX_DESC',
  EraIndexerDeploymentApiesMinFlexPlanRewardAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_FLEX_PLAN_REWARD_ASC',
  EraIndexerDeploymentApiesMinFlexPlanRewardDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_FLEX_PLAN_REWARD_DESC',
  EraIndexerDeploymentApiesMinIdAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_ID_ASC',
  EraIndexerDeploymentApiesMinIdDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_ID_DESC',
  EraIndexerDeploymentApiesMinIndexerIdAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_INDEXER_ID_ASC',
  EraIndexerDeploymentApiesMinIndexerIdDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_INDEXER_ID_DESC',
  EraIndexerDeploymentApiesMinUpdateAtAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_UPDATE_AT_ASC',
  EraIndexerDeploymentApiesMinUpdateAtDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_UPDATE_AT_DESC',
  EraIndexerDeploymentApiesStddevPopulationAgreementRewardAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_AGREEMENT_REWARD_ASC',
  EraIndexerDeploymentApiesStddevPopulationAgreementRewardDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_AGREEMENT_REWARD_DESC',
  EraIndexerDeploymentApiesStddevPopulationAllocationRewardAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_ALLOCATION_REWARD_ASC',
  EraIndexerDeploymentApiesStddevPopulationAllocationRewardDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_ALLOCATION_REWARD_DESC',
  EraIndexerDeploymentApiesStddevPopulationApyAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_APY_ASC',
  EraIndexerDeploymentApiesStddevPopulationApyCalcAddedAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_APY_CALC_ADDED_ASC',
  EraIndexerDeploymentApiesStddevPopulationApyCalcAddedDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_APY_CALC_ADDED_DESC',
  EraIndexerDeploymentApiesStddevPopulationApyCalcAllocationAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_APY_CALC_ALLOCATION_ASC',
  EraIndexerDeploymentApiesStddevPopulationApyCalcAllocationDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_APY_CALC_ALLOCATION_DESC',
  EraIndexerDeploymentApiesStddevPopulationApyCalcAllocationRecordAtAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_APY_CALC_ALLOCATION_RECORD_AT_ASC',
  EraIndexerDeploymentApiesStddevPopulationApyCalcAllocationRecordAtDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_APY_CALC_ALLOCATION_RECORD_AT_DESC',
  EraIndexerDeploymentApiesStddevPopulationApyCalcHistoryAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_APY_CALC_HISTORY_ASC',
  EraIndexerDeploymentApiesStddevPopulationApyCalcHistoryDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_APY_CALC_HISTORY_DESC',
  EraIndexerDeploymentApiesStddevPopulationApyCalcRemovalAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_APY_CALC_REMOVAL_ASC',
  EraIndexerDeploymentApiesStddevPopulationApyCalcRemovalDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_APY_CALC_REMOVAL_DESC',
  EraIndexerDeploymentApiesStddevPopulationApyDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_APY_DESC',
  EraIndexerDeploymentApiesStddevPopulationBlockRangeAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  EraIndexerDeploymentApiesStddevPopulationBlockRangeDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  EraIndexerDeploymentApiesStddevPopulationCreateAtAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_CREATE_AT_ASC',
  EraIndexerDeploymentApiesStddevPopulationCreateAtDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_CREATE_AT_DESC',
  EraIndexerDeploymentApiesStddevPopulationDeploymentIdAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_DEPLOYMENT_ID_ASC',
  EraIndexerDeploymentApiesStddevPopulationDeploymentIdDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_DEPLOYMENT_ID_DESC',
  EraIndexerDeploymentApiesStddevPopulationEraIdxAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_ERA_IDX_ASC',
  EraIndexerDeploymentApiesStddevPopulationEraIdxDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_ERA_IDX_DESC',
  EraIndexerDeploymentApiesStddevPopulationFlexPlanRewardAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_FLEX_PLAN_REWARD_ASC',
  EraIndexerDeploymentApiesStddevPopulationFlexPlanRewardDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_FLEX_PLAN_REWARD_DESC',
  EraIndexerDeploymentApiesStddevPopulationIdAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_ID_ASC',
  EraIndexerDeploymentApiesStddevPopulationIdDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_ID_DESC',
  EraIndexerDeploymentApiesStddevPopulationIndexerIdAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_INDEXER_ID_ASC',
  EraIndexerDeploymentApiesStddevPopulationIndexerIdDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_INDEXER_ID_DESC',
  EraIndexerDeploymentApiesStddevPopulationUpdateAtAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_UPDATE_AT_ASC',
  EraIndexerDeploymentApiesStddevPopulationUpdateAtDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_UPDATE_AT_DESC',
  EraIndexerDeploymentApiesStddevSampleAgreementRewardAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_AGREEMENT_REWARD_ASC',
  EraIndexerDeploymentApiesStddevSampleAgreementRewardDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_AGREEMENT_REWARD_DESC',
  EraIndexerDeploymentApiesStddevSampleAllocationRewardAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_ALLOCATION_REWARD_ASC',
  EraIndexerDeploymentApiesStddevSampleAllocationRewardDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_ALLOCATION_REWARD_DESC',
  EraIndexerDeploymentApiesStddevSampleApyAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_APY_ASC',
  EraIndexerDeploymentApiesStddevSampleApyCalcAddedAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_APY_CALC_ADDED_ASC',
  EraIndexerDeploymentApiesStddevSampleApyCalcAddedDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_APY_CALC_ADDED_DESC',
  EraIndexerDeploymentApiesStddevSampleApyCalcAllocationAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_APY_CALC_ALLOCATION_ASC',
  EraIndexerDeploymentApiesStddevSampleApyCalcAllocationDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_APY_CALC_ALLOCATION_DESC',
  EraIndexerDeploymentApiesStddevSampleApyCalcAllocationRecordAtAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_APY_CALC_ALLOCATION_RECORD_AT_ASC',
  EraIndexerDeploymentApiesStddevSampleApyCalcAllocationRecordAtDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_APY_CALC_ALLOCATION_RECORD_AT_DESC',
  EraIndexerDeploymentApiesStddevSampleApyCalcHistoryAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_APY_CALC_HISTORY_ASC',
  EraIndexerDeploymentApiesStddevSampleApyCalcHistoryDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_APY_CALC_HISTORY_DESC',
  EraIndexerDeploymentApiesStddevSampleApyCalcRemovalAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_APY_CALC_REMOVAL_ASC',
  EraIndexerDeploymentApiesStddevSampleApyCalcRemovalDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_APY_CALC_REMOVAL_DESC',
  EraIndexerDeploymentApiesStddevSampleApyDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_APY_DESC',
  EraIndexerDeploymentApiesStddevSampleBlockRangeAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  EraIndexerDeploymentApiesStddevSampleBlockRangeDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  EraIndexerDeploymentApiesStddevSampleCreateAtAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_CREATE_AT_ASC',
  EraIndexerDeploymentApiesStddevSampleCreateAtDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_CREATE_AT_DESC',
  EraIndexerDeploymentApiesStddevSampleDeploymentIdAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC',
  EraIndexerDeploymentApiesStddevSampleDeploymentIdDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC',
  EraIndexerDeploymentApiesStddevSampleEraIdxAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_ERA_IDX_ASC',
  EraIndexerDeploymentApiesStddevSampleEraIdxDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_ERA_IDX_DESC',
  EraIndexerDeploymentApiesStddevSampleFlexPlanRewardAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_FLEX_PLAN_REWARD_ASC',
  EraIndexerDeploymentApiesStddevSampleFlexPlanRewardDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_FLEX_PLAN_REWARD_DESC',
  EraIndexerDeploymentApiesStddevSampleIdAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_ID_ASC',
  EraIndexerDeploymentApiesStddevSampleIdDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_ID_DESC',
  EraIndexerDeploymentApiesStddevSampleIndexerIdAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_INDEXER_ID_ASC',
  EraIndexerDeploymentApiesStddevSampleIndexerIdDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_INDEXER_ID_DESC',
  EraIndexerDeploymentApiesStddevSampleUpdateAtAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_UPDATE_AT_ASC',
  EraIndexerDeploymentApiesStddevSampleUpdateAtDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_UPDATE_AT_DESC',
  EraIndexerDeploymentApiesSumAgreementRewardAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_AGREEMENT_REWARD_ASC',
  EraIndexerDeploymentApiesSumAgreementRewardDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_AGREEMENT_REWARD_DESC',
  EraIndexerDeploymentApiesSumAllocationRewardAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_ALLOCATION_REWARD_ASC',
  EraIndexerDeploymentApiesSumAllocationRewardDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_ALLOCATION_REWARD_DESC',
  EraIndexerDeploymentApiesSumApyAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_APY_ASC',
  EraIndexerDeploymentApiesSumApyCalcAddedAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_APY_CALC_ADDED_ASC',
  EraIndexerDeploymentApiesSumApyCalcAddedDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_APY_CALC_ADDED_DESC',
  EraIndexerDeploymentApiesSumApyCalcAllocationAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_APY_CALC_ALLOCATION_ASC',
  EraIndexerDeploymentApiesSumApyCalcAllocationDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_APY_CALC_ALLOCATION_DESC',
  EraIndexerDeploymentApiesSumApyCalcAllocationRecordAtAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_APY_CALC_ALLOCATION_RECORD_AT_ASC',
  EraIndexerDeploymentApiesSumApyCalcAllocationRecordAtDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_APY_CALC_ALLOCATION_RECORD_AT_DESC',
  EraIndexerDeploymentApiesSumApyCalcHistoryAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_APY_CALC_HISTORY_ASC',
  EraIndexerDeploymentApiesSumApyCalcHistoryDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_APY_CALC_HISTORY_DESC',
  EraIndexerDeploymentApiesSumApyCalcRemovalAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_APY_CALC_REMOVAL_ASC',
  EraIndexerDeploymentApiesSumApyCalcRemovalDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_APY_CALC_REMOVAL_DESC',
  EraIndexerDeploymentApiesSumApyDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_APY_DESC',
  EraIndexerDeploymentApiesSumBlockRangeAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_BLOCK_RANGE_ASC',
  EraIndexerDeploymentApiesSumBlockRangeDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_BLOCK_RANGE_DESC',
  EraIndexerDeploymentApiesSumCreateAtAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_CREATE_AT_ASC',
  EraIndexerDeploymentApiesSumCreateAtDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_CREATE_AT_DESC',
  EraIndexerDeploymentApiesSumDeploymentIdAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_DEPLOYMENT_ID_ASC',
  EraIndexerDeploymentApiesSumDeploymentIdDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_DEPLOYMENT_ID_DESC',
  EraIndexerDeploymentApiesSumEraIdxAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_ERA_IDX_ASC',
  EraIndexerDeploymentApiesSumEraIdxDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_ERA_IDX_DESC',
  EraIndexerDeploymentApiesSumFlexPlanRewardAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_FLEX_PLAN_REWARD_ASC',
  EraIndexerDeploymentApiesSumFlexPlanRewardDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_FLEX_PLAN_REWARD_DESC',
  EraIndexerDeploymentApiesSumIdAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_ID_ASC',
  EraIndexerDeploymentApiesSumIdDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_ID_DESC',
  EraIndexerDeploymentApiesSumIndexerIdAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_INDEXER_ID_ASC',
  EraIndexerDeploymentApiesSumIndexerIdDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_INDEXER_ID_DESC',
  EraIndexerDeploymentApiesSumUpdateAtAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_UPDATE_AT_ASC',
  EraIndexerDeploymentApiesSumUpdateAtDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_UPDATE_AT_DESC',
  EraIndexerDeploymentApiesVariancePopulationAgreementRewardAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_AGREEMENT_REWARD_ASC',
  EraIndexerDeploymentApiesVariancePopulationAgreementRewardDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_AGREEMENT_REWARD_DESC',
  EraIndexerDeploymentApiesVariancePopulationAllocationRewardAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_ALLOCATION_REWARD_ASC',
  EraIndexerDeploymentApiesVariancePopulationAllocationRewardDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_ALLOCATION_REWARD_DESC',
  EraIndexerDeploymentApiesVariancePopulationApyAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_APY_ASC',
  EraIndexerDeploymentApiesVariancePopulationApyCalcAddedAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_APY_CALC_ADDED_ASC',
  EraIndexerDeploymentApiesVariancePopulationApyCalcAddedDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_APY_CALC_ADDED_DESC',
  EraIndexerDeploymentApiesVariancePopulationApyCalcAllocationAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_APY_CALC_ALLOCATION_ASC',
  EraIndexerDeploymentApiesVariancePopulationApyCalcAllocationDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_APY_CALC_ALLOCATION_DESC',
  EraIndexerDeploymentApiesVariancePopulationApyCalcAllocationRecordAtAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_APY_CALC_ALLOCATION_RECORD_AT_ASC',
  EraIndexerDeploymentApiesVariancePopulationApyCalcAllocationRecordAtDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_APY_CALC_ALLOCATION_RECORD_AT_DESC',
  EraIndexerDeploymentApiesVariancePopulationApyCalcHistoryAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_APY_CALC_HISTORY_ASC',
  EraIndexerDeploymentApiesVariancePopulationApyCalcHistoryDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_APY_CALC_HISTORY_DESC',
  EraIndexerDeploymentApiesVariancePopulationApyCalcRemovalAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_APY_CALC_REMOVAL_ASC',
  EraIndexerDeploymentApiesVariancePopulationApyCalcRemovalDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_APY_CALC_REMOVAL_DESC',
  EraIndexerDeploymentApiesVariancePopulationApyDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_APY_DESC',
  EraIndexerDeploymentApiesVariancePopulationBlockRangeAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  EraIndexerDeploymentApiesVariancePopulationBlockRangeDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  EraIndexerDeploymentApiesVariancePopulationCreateAtAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_CREATE_AT_ASC',
  EraIndexerDeploymentApiesVariancePopulationCreateAtDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_CREATE_AT_DESC',
  EraIndexerDeploymentApiesVariancePopulationDeploymentIdAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC',
  EraIndexerDeploymentApiesVariancePopulationDeploymentIdDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC',
  EraIndexerDeploymentApiesVariancePopulationEraIdxAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_ERA_IDX_ASC',
  EraIndexerDeploymentApiesVariancePopulationEraIdxDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_ERA_IDX_DESC',
  EraIndexerDeploymentApiesVariancePopulationFlexPlanRewardAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_FLEX_PLAN_REWARD_ASC',
  EraIndexerDeploymentApiesVariancePopulationFlexPlanRewardDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_FLEX_PLAN_REWARD_DESC',
  EraIndexerDeploymentApiesVariancePopulationIdAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_ID_ASC',
  EraIndexerDeploymentApiesVariancePopulationIdDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_ID_DESC',
  EraIndexerDeploymentApiesVariancePopulationIndexerIdAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_INDEXER_ID_ASC',
  EraIndexerDeploymentApiesVariancePopulationIndexerIdDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_INDEXER_ID_DESC',
  EraIndexerDeploymentApiesVariancePopulationUpdateAtAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_UPDATE_AT_ASC',
  EraIndexerDeploymentApiesVariancePopulationUpdateAtDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_UPDATE_AT_DESC',
  EraIndexerDeploymentApiesVarianceSampleAgreementRewardAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_AGREEMENT_REWARD_ASC',
  EraIndexerDeploymentApiesVarianceSampleAgreementRewardDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_AGREEMENT_REWARD_DESC',
  EraIndexerDeploymentApiesVarianceSampleAllocationRewardAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_ALLOCATION_REWARD_ASC',
  EraIndexerDeploymentApiesVarianceSampleAllocationRewardDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_ALLOCATION_REWARD_DESC',
  EraIndexerDeploymentApiesVarianceSampleApyAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_APY_ASC',
  EraIndexerDeploymentApiesVarianceSampleApyCalcAddedAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_APY_CALC_ADDED_ASC',
  EraIndexerDeploymentApiesVarianceSampleApyCalcAddedDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_APY_CALC_ADDED_DESC',
  EraIndexerDeploymentApiesVarianceSampleApyCalcAllocationAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_APY_CALC_ALLOCATION_ASC',
  EraIndexerDeploymentApiesVarianceSampleApyCalcAllocationDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_APY_CALC_ALLOCATION_DESC',
  EraIndexerDeploymentApiesVarianceSampleApyCalcAllocationRecordAtAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_APY_CALC_ALLOCATION_RECORD_AT_ASC',
  EraIndexerDeploymentApiesVarianceSampleApyCalcAllocationRecordAtDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_APY_CALC_ALLOCATION_RECORD_AT_DESC',
  EraIndexerDeploymentApiesVarianceSampleApyCalcHistoryAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_APY_CALC_HISTORY_ASC',
  EraIndexerDeploymentApiesVarianceSampleApyCalcHistoryDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_APY_CALC_HISTORY_DESC',
  EraIndexerDeploymentApiesVarianceSampleApyCalcRemovalAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_APY_CALC_REMOVAL_ASC',
  EraIndexerDeploymentApiesVarianceSampleApyCalcRemovalDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_APY_CALC_REMOVAL_DESC',
  EraIndexerDeploymentApiesVarianceSampleApyDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_APY_DESC',
  EraIndexerDeploymentApiesVarianceSampleBlockRangeAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  EraIndexerDeploymentApiesVarianceSampleBlockRangeDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  EraIndexerDeploymentApiesVarianceSampleCreateAtAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_CREATE_AT_ASC',
  EraIndexerDeploymentApiesVarianceSampleCreateAtDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_CREATE_AT_DESC',
  EraIndexerDeploymentApiesVarianceSampleDeploymentIdAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC',
  EraIndexerDeploymentApiesVarianceSampleDeploymentIdDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC',
  EraIndexerDeploymentApiesVarianceSampleEraIdxAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_ERA_IDX_ASC',
  EraIndexerDeploymentApiesVarianceSampleEraIdxDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_ERA_IDX_DESC',
  EraIndexerDeploymentApiesVarianceSampleFlexPlanRewardAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_FLEX_PLAN_REWARD_ASC',
  EraIndexerDeploymentApiesVarianceSampleFlexPlanRewardDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_FLEX_PLAN_REWARD_DESC',
  EraIndexerDeploymentApiesVarianceSampleIdAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_ID_ASC',
  EraIndexerDeploymentApiesVarianceSampleIdDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_ID_DESC',
  EraIndexerDeploymentApiesVarianceSampleIndexerIdAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  EraIndexerDeploymentApiesVarianceSampleIndexerIdDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  EraIndexerDeploymentApiesVarianceSampleUpdateAtAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_UPDATE_AT_ASC',
  EraIndexerDeploymentApiesVarianceSampleUpdateAtDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_UPDATE_AT_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  IndexersAverageBlockRangeAsc = 'INDEXERS_AVERAGE_BLOCK_RANGE_ASC',
  IndexersAverageBlockRangeDesc = 'INDEXERS_AVERAGE_BLOCK_RANGE_DESC',
  IndexersAverageCreatedBlockAsc = 'INDEXERS_AVERAGE_CREATED_BLOCK_ASC',
  IndexersAverageCreatedBlockDesc = 'INDEXERS_AVERAGE_CREATED_BLOCK_DESC',
  IndexersAverageDeploymentIdAsc = 'INDEXERS_AVERAGE_DEPLOYMENT_ID_ASC',
  IndexersAverageDeploymentIdDesc = 'INDEXERS_AVERAGE_DEPLOYMENT_ID_DESC',
  IndexersAverageIdAsc = 'INDEXERS_AVERAGE_ID_ASC',
  IndexersAverageIdDesc = 'INDEXERS_AVERAGE_ID_DESC',
  IndexersAverageIndexerIdAsc = 'INDEXERS_AVERAGE_INDEXER_ID_ASC',
  IndexersAverageIndexerIdDesc = 'INDEXERS_AVERAGE_INDEXER_ID_DESC',
  IndexersAverageLastEventAsc = 'INDEXERS_AVERAGE_LAST_EVENT_ASC',
  IndexersAverageLastEventDesc = 'INDEXERS_AVERAGE_LAST_EVENT_DESC',
  IndexersAverageStatusAsc = 'INDEXERS_AVERAGE_STATUS_ASC',
  IndexersAverageStatusDesc = 'INDEXERS_AVERAGE_STATUS_DESC',
  IndexersAverageTimestampAsc = 'INDEXERS_AVERAGE_TIMESTAMP_ASC',
  IndexersAverageTimestampDesc = 'INDEXERS_AVERAGE_TIMESTAMP_DESC',
  IndexersCountAsc = 'INDEXERS_COUNT_ASC',
  IndexersCountDesc = 'INDEXERS_COUNT_DESC',
  IndexersDistinctCountBlockRangeAsc = 'INDEXERS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  IndexersDistinctCountBlockRangeDesc = 'INDEXERS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  IndexersDistinctCountCreatedBlockAsc = 'INDEXERS_DISTINCT_COUNT_CREATED_BLOCK_ASC',
  IndexersDistinctCountCreatedBlockDesc = 'INDEXERS_DISTINCT_COUNT_CREATED_BLOCK_DESC',
  IndexersDistinctCountDeploymentIdAsc = 'INDEXERS_DISTINCT_COUNT_DEPLOYMENT_ID_ASC',
  IndexersDistinctCountDeploymentIdDesc = 'INDEXERS_DISTINCT_COUNT_DEPLOYMENT_ID_DESC',
  IndexersDistinctCountIdAsc = 'INDEXERS_DISTINCT_COUNT_ID_ASC',
  IndexersDistinctCountIdDesc = 'INDEXERS_DISTINCT_COUNT_ID_DESC',
  IndexersDistinctCountIndexerIdAsc = 'INDEXERS_DISTINCT_COUNT_INDEXER_ID_ASC',
  IndexersDistinctCountIndexerIdDesc = 'INDEXERS_DISTINCT_COUNT_INDEXER_ID_DESC',
  IndexersDistinctCountLastEventAsc = 'INDEXERS_DISTINCT_COUNT_LAST_EVENT_ASC',
  IndexersDistinctCountLastEventDesc = 'INDEXERS_DISTINCT_COUNT_LAST_EVENT_DESC',
  IndexersDistinctCountStatusAsc = 'INDEXERS_DISTINCT_COUNT_STATUS_ASC',
  IndexersDistinctCountStatusDesc = 'INDEXERS_DISTINCT_COUNT_STATUS_DESC',
  IndexersDistinctCountTimestampAsc = 'INDEXERS_DISTINCT_COUNT_TIMESTAMP_ASC',
  IndexersDistinctCountTimestampDesc = 'INDEXERS_DISTINCT_COUNT_TIMESTAMP_DESC',
  IndexersMaxBlockRangeAsc = 'INDEXERS_MAX_BLOCK_RANGE_ASC',
  IndexersMaxBlockRangeDesc = 'INDEXERS_MAX_BLOCK_RANGE_DESC',
  IndexersMaxCreatedBlockAsc = 'INDEXERS_MAX_CREATED_BLOCK_ASC',
  IndexersMaxCreatedBlockDesc = 'INDEXERS_MAX_CREATED_BLOCK_DESC',
  IndexersMaxDeploymentIdAsc = 'INDEXERS_MAX_DEPLOYMENT_ID_ASC',
  IndexersMaxDeploymentIdDesc = 'INDEXERS_MAX_DEPLOYMENT_ID_DESC',
  IndexersMaxIdAsc = 'INDEXERS_MAX_ID_ASC',
  IndexersMaxIdDesc = 'INDEXERS_MAX_ID_DESC',
  IndexersMaxIndexerIdAsc = 'INDEXERS_MAX_INDEXER_ID_ASC',
  IndexersMaxIndexerIdDesc = 'INDEXERS_MAX_INDEXER_ID_DESC',
  IndexersMaxLastEventAsc = 'INDEXERS_MAX_LAST_EVENT_ASC',
  IndexersMaxLastEventDesc = 'INDEXERS_MAX_LAST_EVENT_DESC',
  IndexersMaxStatusAsc = 'INDEXERS_MAX_STATUS_ASC',
  IndexersMaxStatusDesc = 'INDEXERS_MAX_STATUS_DESC',
  IndexersMaxTimestampAsc = 'INDEXERS_MAX_TIMESTAMP_ASC',
  IndexersMaxTimestampDesc = 'INDEXERS_MAX_TIMESTAMP_DESC',
  IndexersMinBlockRangeAsc = 'INDEXERS_MIN_BLOCK_RANGE_ASC',
  IndexersMinBlockRangeDesc = 'INDEXERS_MIN_BLOCK_RANGE_DESC',
  IndexersMinCreatedBlockAsc = 'INDEXERS_MIN_CREATED_BLOCK_ASC',
  IndexersMinCreatedBlockDesc = 'INDEXERS_MIN_CREATED_BLOCK_DESC',
  IndexersMinDeploymentIdAsc = 'INDEXERS_MIN_DEPLOYMENT_ID_ASC',
  IndexersMinDeploymentIdDesc = 'INDEXERS_MIN_DEPLOYMENT_ID_DESC',
  IndexersMinIdAsc = 'INDEXERS_MIN_ID_ASC',
  IndexersMinIdDesc = 'INDEXERS_MIN_ID_DESC',
  IndexersMinIndexerIdAsc = 'INDEXERS_MIN_INDEXER_ID_ASC',
  IndexersMinIndexerIdDesc = 'INDEXERS_MIN_INDEXER_ID_DESC',
  IndexersMinLastEventAsc = 'INDEXERS_MIN_LAST_EVENT_ASC',
  IndexersMinLastEventDesc = 'INDEXERS_MIN_LAST_EVENT_DESC',
  IndexersMinStatusAsc = 'INDEXERS_MIN_STATUS_ASC',
  IndexersMinStatusDesc = 'INDEXERS_MIN_STATUS_DESC',
  IndexersMinTimestampAsc = 'INDEXERS_MIN_TIMESTAMP_ASC',
  IndexersMinTimestampDesc = 'INDEXERS_MIN_TIMESTAMP_DESC',
  IndexersStddevPopulationBlockRangeAsc = 'INDEXERS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  IndexersStddevPopulationBlockRangeDesc = 'INDEXERS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  IndexersStddevPopulationCreatedBlockAsc = 'INDEXERS_STDDEV_POPULATION_CREATED_BLOCK_ASC',
  IndexersStddevPopulationCreatedBlockDesc = 'INDEXERS_STDDEV_POPULATION_CREATED_BLOCK_DESC',
  IndexersStddevPopulationDeploymentIdAsc = 'INDEXERS_STDDEV_POPULATION_DEPLOYMENT_ID_ASC',
  IndexersStddevPopulationDeploymentIdDesc = 'INDEXERS_STDDEV_POPULATION_DEPLOYMENT_ID_DESC',
  IndexersStddevPopulationIdAsc = 'INDEXERS_STDDEV_POPULATION_ID_ASC',
  IndexersStddevPopulationIdDesc = 'INDEXERS_STDDEV_POPULATION_ID_DESC',
  IndexersStddevPopulationIndexerIdAsc = 'INDEXERS_STDDEV_POPULATION_INDEXER_ID_ASC',
  IndexersStddevPopulationIndexerIdDesc = 'INDEXERS_STDDEV_POPULATION_INDEXER_ID_DESC',
  IndexersStddevPopulationLastEventAsc = 'INDEXERS_STDDEV_POPULATION_LAST_EVENT_ASC',
  IndexersStddevPopulationLastEventDesc = 'INDEXERS_STDDEV_POPULATION_LAST_EVENT_DESC',
  IndexersStddevPopulationStatusAsc = 'INDEXERS_STDDEV_POPULATION_STATUS_ASC',
  IndexersStddevPopulationStatusDesc = 'INDEXERS_STDDEV_POPULATION_STATUS_DESC',
  IndexersStddevPopulationTimestampAsc = 'INDEXERS_STDDEV_POPULATION_TIMESTAMP_ASC',
  IndexersStddevPopulationTimestampDesc = 'INDEXERS_STDDEV_POPULATION_TIMESTAMP_DESC',
  IndexersStddevSampleBlockRangeAsc = 'INDEXERS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  IndexersStddevSampleBlockRangeDesc = 'INDEXERS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  IndexersStddevSampleCreatedBlockAsc = 'INDEXERS_STDDEV_SAMPLE_CREATED_BLOCK_ASC',
  IndexersStddevSampleCreatedBlockDesc = 'INDEXERS_STDDEV_SAMPLE_CREATED_BLOCK_DESC',
  IndexersStddevSampleDeploymentIdAsc = 'INDEXERS_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC',
  IndexersStddevSampleDeploymentIdDesc = 'INDEXERS_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC',
  IndexersStddevSampleIdAsc = 'INDEXERS_STDDEV_SAMPLE_ID_ASC',
  IndexersStddevSampleIdDesc = 'INDEXERS_STDDEV_SAMPLE_ID_DESC',
  IndexersStddevSampleIndexerIdAsc = 'INDEXERS_STDDEV_SAMPLE_INDEXER_ID_ASC',
  IndexersStddevSampleIndexerIdDesc = 'INDEXERS_STDDEV_SAMPLE_INDEXER_ID_DESC',
  IndexersStddevSampleLastEventAsc = 'INDEXERS_STDDEV_SAMPLE_LAST_EVENT_ASC',
  IndexersStddevSampleLastEventDesc = 'INDEXERS_STDDEV_SAMPLE_LAST_EVENT_DESC',
  IndexersStddevSampleStatusAsc = 'INDEXERS_STDDEV_SAMPLE_STATUS_ASC',
  IndexersStddevSampleStatusDesc = 'INDEXERS_STDDEV_SAMPLE_STATUS_DESC',
  IndexersStddevSampleTimestampAsc = 'INDEXERS_STDDEV_SAMPLE_TIMESTAMP_ASC',
  IndexersStddevSampleTimestampDesc = 'INDEXERS_STDDEV_SAMPLE_TIMESTAMP_DESC',
  IndexersSumBlockRangeAsc = 'INDEXERS_SUM_BLOCK_RANGE_ASC',
  IndexersSumBlockRangeDesc = 'INDEXERS_SUM_BLOCK_RANGE_DESC',
  IndexersSumCreatedBlockAsc = 'INDEXERS_SUM_CREATED_BLOCK_ASC',
  IndexersSumCreatedBlockDesc = 'INDEXERS_SUM_CREATED_BLOCK_DESC',
  IndexersSumDeploymentIdAsc = 'INDEXERS_SUM_DEPLOYMENT_ID_ASC',
  IndexersSumDeploymentIdDesc = 'INDEXERS_SUM_DEPLOYMENT_ID_DESC',
  IndexersSumIdAsc = 'INDEXERS_SUM_ID_ASC',
  IndexersSumIdDesc = 'INDEXERS_SUM_ID_DESC',
  IndexersSumIndexerIdAsc = 'INDEXERS_SUM_INDEXER_ID_ASC',
  IndexersSumIndexerIdDesc = 'INDEXERS_SUM_INDEXER_ID_DESC',
  IndexersSumLastEventAsc = 'INDEXERS_SUM_LAST_EVENT_ASC',
  IndexersSumLastEventDesc = 'INDEXERS_SUM_LAST_EVENT_DESC',
  IndexersSumStatusAsc = 'INDEXERS_SUM_STATUS_ASC',
  IndexersSumStatusDesc = 'INDEXERS_SUM_STATUS_DESC',
  IndexersSumTimestampAsc = 'INDEXERS_SUM_TIMESTAMP_ASC',
  IndexersSumTimestampDesc = 'INDEXERS_SUM_TIMESTAMP_DESC',
  IndexersVariancePopulationBlockRangeAsc = 'INDEXERS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  IndexersVariancePopulationBlockRangeDesc = 'INDEXERS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  IndexersVariancePopulationCreatedBlockAsc = 'INDEXERS_VARIANCE_POPULATION_CREATED_BLOCK_ASC',
  IndexersVariancePopulationCreatedBlockDesc = 'INDEXERS_VARIANCE_POPULATION_CREATED_BLOCK_DESC',
  IndexersVariancePopulationDeploymentIdAsc = 'INDEXERS_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC',
  IndexersVariancePopulationDeploymentIdDesc = 'INDEXERS_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC',
  IndexersVariancePopulationIdAsc = 'INDEXERS_VARIANCE_POPULATION_ID_ASC',
  IndexersVariancePopulationIdDesc = 'INDEXERS_VARIANCE_POPULATION_ID_DESC',
  IndexersVariancePopulationIndexerIdAsc = 'INDEXERS_VARIANCE_POPULATION_INDEXER_ID_ASC',
  IndexersVariancePopulationIndexerIdDesc = 'INDEXERS_VARIANCE_POPULATION_INDEXER_ID_DESC',
  IndexersVariancePopulationLastEventAsc = 'INDEXERS_VARIANCE_POPULATION_LAST_EVENT_ASC',
  IndexersVariancePopulationLastEventDesc = 'INDEXERS_VARIANCE_POPULATION_LAST_EVENT_DESC',
  IndexersVariancePopulationStatusAsc = 'INDEXERS_VARIANCE_POPULATION_STATUS_ASC',
  IndexersVariancePopulationStatusDesc = 'INDEXERS_VARIANCE_POPULATION_STATUS_DESC',
  IndexersVariancePopulationTimestampAsc = 'INDEXERS_VARIANCE_POPULATION_TIMESTAMP_ASC',
  IndexersVariancePopulationTimestampDesc = 'INDEXERS_VARIANCE_POPULATION_TIMESTAMP_DESC',
  IndexersVarianceSampleBlockRangeAsc = 'INDEXERS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  IndexersVarianceSampleBlockRangeDesc = 'INDEXERS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  IndexersVarianceSampleCreatedBlockAsc = 'INDEXERS_VARIANCE_SAMPLE_CREATED_BLOCK_ASC',
  IndexersVarianceSampleCreatedBlockDesc = 'INDEXERS_VARIANCE_SAMPLE_CREATED_BLOCK_DESC',
  IndexersVarianceSampleDeploymentIdAsc = 'INDEXERS_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC',
  IndexersVarianceSampleDeploymentIdDesc = 'INDEXERS_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC',
  IndexersVarianceSampleIdAsc = 'INDEXERS_VARIANCE_SAMPLE_ID_ASC',
  IndexersVarianceSampleIdDesc = 'INDEXERS_VARIANCE_SAMPLE_ID_DESC',
  IndexersVarianceSampleIndexerIdAsc = 'INDEXERS_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  IndexersVarianceSampleIndexerIdDesc = 'INDEXERS_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  IndexersVarianceSampleLastEventAsc = 'INDEXERS_VARIANCE_SAMPLE_LAST_EVENT_ASC',
  IndexersVarianceSampleLastEventDesc = 'INDEXERS_VARIANCE_SAMPLE_LAST_EVENT_DESC',
  IndexersVarianceSampleStatusAsc = 'INDEXERS_VARIANCE_SAMPLE_STATUS_ASC',
  IndexersVarianceSampleStatusDesc = 'INDEXERS_VARIANCE_SAMPLE_STATUS_DESC',
  IndexersVarianceSampleTimestampAsc = 'INDEXERS_VARIANCE_SAMPLE_TIMESTAMP_ASC',
  IndexersVarianceSampleTimestampDesc = 'INDEXERS_VARIANCE_SAMPLE_TIMESTAMP_DESC',
  IndexerAllocationsAverageAmountAddedAsc = 'INDEXER_ALLOCATIONS_AVERAGE_AMOUNT_ADDED_ASC',
  IndexerAllocationsAverageAmountAddedDesc = 'INDEXER_ALLOCATIONS_AVERAGE_AMOUNT_ADDED_DESC',
  IndexerAllocationsAverageAmountRemovedAsc = 'INDEXER_ALLOCATIONS_AVERAGE_AMOUNT_REMOVED_ASC',
  IndexerAllocationsAverageAmountRemovedDesc = 'INDEXER_ALLOCATIONS_AVERAGE_AMOUNT_REMOVED_DESC',
  IndexerAllocationsAverageBlockRangeAsc = 'INDEXER_ALLOCATIONS_AVERAGE_BLOCK_RANGE_ASC',
  IndexerAllocationsAverageBlockRangeDesc = 'INDEXER_ALLOCATIONS_AVERAGE_BLOCK_RANGE_DESC',
  IndexerAllocationsAverageCreateAtAsc = 'INDEXER_ALLOCATIONS_AVERAGE_CREATE_AT_ASC',
  IndexerAllocationsAverageCreateAtDesc = 'INDEXER_ALLOCATIONS_AVERAGE_CREATE_AT_DESC',
  IndexerAllocationsAverageDeploymentIdAsc = 'INDEXER_ALLOCATIONS_AVERAGE_DEPLOYMENT_ID_ASC',
  IndexerAllocationsAverageDeploymentIdDesc = 'INDEXER_ALLOCATIONS_AVERAGE_DEPLOYMENT_ID_DESC',
  IndexerAllocationsAverageEraIdxAsc = 'INDEXER_ALLOCATIONS_AVERAGE_ERA_IDX_ASC',
  IndexerAllocationsAverageEraIdxDesc = 'INDEXER_ALLOCATIONS_AVERAGE_ERA_IDX_DESC',
  IndexerAllocationsAverageIdAsc = 'INDEXER_ALLOCATIONS_AVERAGE_ID_ASC',
  IndexerAllocationsAverageIdDesc = 'INDEXER_ALLOCATIONS_AVERAGE_ID_DESC',
  IndexerAllocationsAverageIndexerIdAsc = 'INDEXER_ALLOCATIONS_AVERAGE_INDEXER_ID_ASC',
  IndexerAllocationsAverageIndexerIdDesc = 'INDEXER_ALLOCATIONS_AVERAGE_INDEXER_ID_DESC',
  IndexerAllocationsAverageProjectIdAsc = 'INDEXER_ALLOCATIONS_AVERAGE_PROJECT_ID_ASC',
  IndexerAllocationsAverageProjectIdDesc = 'INDEXER_ALLOCATIONS_AVERAGE_PROJECT_ID_DESC',
  IndexerAllocationsByDeploymentIdCountAsc = 'INDEXER_ALLOCATIONS_BY_DEPLOYMENT_ID__COUNT_ASC',
  IndexerAllocationsByDeploymentIdCountDesc = 'INDEXER_ALLOCATIONS_BY_DEPLOYMENT_ID__COUNT_DESC',
  IndexerAllocationsCountAsc = 'INDEXER_ALLOCATIONS_COUNT_ASC',
  IndexerAllocationsCountDesc = 'INDEXER_ALLOCATIONS_COUNT_DESC',
  IndexerAllocationsDistinctCountAmountAddedAsc = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_AMOUNT_ADDED_ASC',
  IndexerAllocationsDistinctCountAmountAddedDesc = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_AMOUNT_ADDED_DESC',
  IndexerAllocationsDistinctCountAmountRemovedAsc = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_AMOUNT_REMOVED_ASC',
  IndexerAllocationsDistinctCountAmountRemovedDesc = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_AMOUNT_REMOVED_DESC',
  IndexerAllocationsDistinctCountBlockRangeAsc = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  IndexerAllocationsDistinctCountBlockRangeDesc = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  IndexerAllocationsDistinctCountCreateAtAsc = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_CREATE_AT_ASC',
  IndexerAllocationsDistinctCountCreateAtDesc = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_CREATE_AT_DESC',
  IndexerAllocationsDistinctCountDeploymentIdAsc = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_DEPLOYMENT_ID_ASC',
  IndexerAllocationsDistinctCountDeploymentIdDesc = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_DEPLOYMENT_ID_DESC',
  IndexerAllocationsDistinctCountEraIdxAsc = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_ERA_IDX_ASC',
  IndexerAllocationsDistinctCountEraIdxDesc = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_ERA_IDX_DESC',
  IndexerAllocationsDistinctCountIdAsc = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_ID_ASC',
  IndexerAllocationsDistinctCountIdDesc = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_ID_DESC',
  IndexerAllocationsDistinctCountIndexerIdAsc = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_INDEXER_ID_ASC',
  IndexerAllocationsDistinctCountIndexerIdDesc = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_INDEXER_ID_DESC',
  IndexerAllocationsDistinctCountProjectIdAsc = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_PROJECT_ID_ASC',
  IndexerAllocationsDistinctCountProjectIdDesc = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_PROJECT_ID_DESC',
  IndexerAllocationsMaxAmountAddedAsc = 'INDEXER_ALLOCATIONS_MAX_AMOUNT_ADDED_ASC',
  IndexerAllocationsMaxAmountAddedDesc = 'INDEXER_ALLOCATIONS_MAX_AMOUNT_ADDED_DESC',
  IndexerAllocationsMaxAmountRemovedAsc = 'INDEXER_ALLOCATIONS_MAX_AMOUNT_REMOVED_ASC',
  IndexerAllocationsMaxAmountRemovedDesc = 'INDEXER_ALLOCATIONS_MAX_AMOUNT_REMOVED_DESC',
  IndexerAllocationsMaxBlockRangeAsc = 'INDEXER_ALLOCATIONS_MAX_BLOCK_RANGE_ASC',
  IndexerAllocationsMaxBlockRangeDesc = 'INDEXER_ALLOCATIONS_MAX_BLOCK_RANGE_DESC',
  IndexerAllocationsMaxCreateAtAsc = 'INDEXER_ALLOCATIONS_MAX_CREATE_AT_ASC',
  IndexerAllocationsMaxCreateAtDesc = 'INDEXER_ALLOCATIONS_MAX_CREATE_AT_DESC',
  IndexerAllocationsMaxDeploymentIdAsc = 'INDEXER_ALLOCATIONS_MAX_DEPLOYMENT_ID_ASC',
  IndexerAllocationsMaxDeploymentIdDesc = 'INDEXER_ALLOCATIONS_MAX_DEPLOYMENT_ID_DESC',
  IndexerAllocationsMaxEraIdxAsc = 'INDEXER_ALLOCATIONS_MAX_ERA_IDX_ASC',
  IndexerAllocationsMaxEraIdxDesc = 'INDEXER_ALLOCATIONS_MAX_ERA_IDX_DESC',
  IndexerAllocationsMaxIdAsc = 'INDEXER_ALLOCATIONS_MAX_ID_ASC',
  IndexerAllocationsMaxIdDesc = 'INDEXER_ALLOCATIONS_MAX_ID_DESC',
  IndexerAllocationsMaxIndexerIdAsc = 'INDEXER_ALLOCATIONS_MAX_INDEXER_ID_ASC',
  IndexerAllocationsMaxIndexerIdDesc = 'INDEXER_ALLOCATIONS_MAX_INDEXER_ID_DESC',
  IndexerAllocationsMaxProjectIdAsc = 'INDEXER_ALLOCATIONS_MAX_PROJECT_ID_ASC',
  IndexerAllocationsMaxProjectIdDesc = 'INDEXER_ALLOCATIONS_MAX_PROJECT_ID_DESC',
  IndexerAllocationsMinAmountAddedAsc = 'INDEXER_ALLOCATIONS_MIN_AMOUNT_ADDED_ASC',
  IndexerAllocationsMinAmountAddedDesc = 'INDEXER_ALLOCATIONS_MIN_AMOUNT_ADDED_DESC',
  IndexerAllocationsMinAmountRemovedAsc = 'INDEXER_ALLOCATIONS_MIN_AMOUNT_REMOVED_ASC',
  IndexerAllocationsMinAmountRemovedDesc = 'INDEXER_ALLOCATIONS_MIN_AMOUNT_REMOVED_DESC',
  IndexerAllocationsMinBlockRangeAsc = 'INDEXER_ALLOCATIONS_MIN_BLOCK_RANGE_ASC',
  IndexerAllocationsMinBlockRangeDesc = 'INDEXER_ALLOCATIONS_MIN_BLOCK_RANGE_DESC',
  IndexerAllocationsMinCreateAtAsc = 'INDEXER_ALLOCATIONS_MIN_CREATE_AT_ASC',
  IndexerAllocationsMinCreateAtDesc = 'INDEXER_ALLOCATIONS_MIN_CREATE_AT_DESC',
  IndexerAllocationsMinDeploymentIdAsc = 'INDEXER_ALLOCATIONS_MIN_DEPLOYMENT_ID_ASC',
  IndexerAllocationsMinDeploymentIdDesc = 'INDEXER_ALLOCATIONS_MIN_DEPLOYMENT_ID_DESC',
  IndexerAllocationsMinEraIdxAsc = 'INDEXER_ALLOCATIONS_MIN_ERA_IDX_ASC',
  IndexerAllocationsMinEraIdxDesc = 'INDEXER_ALLOCATIONS_MIN_ERA_IDX_DESC',
  IndexerAllocationsMinIdAsc = 'INDEXER_ALLOCATIONS_MIN_ID_ASC',
  IndexerAllocationsMinIdDesc = 'INDEXER_ALLOCATIONS_MIN_ID_DESC',
  IndexerAllocationsMinIndexerIdAsc = 'INDEXER_ALLOCATIONS_MIN_INDEXER_ID_ASC',
  IndexerAllocationsMinIndexerIdDesc = 'INDEXER_ALLOCATIONS_MIN_INDEXER_ID_DESC',
  IndexerAllocationsMinProjectIdAsc = 'INDEXER_ALLOCATIONS_MIN_PROJECT_ID_ASC',
  IndexerAllocationsMinProjectIdDesc = 'INDEXER_ALLOCATIONS_MIN_PROJECT_ID_DESC',
  IndexerAllocationsStddevPopulationAmountAddedAsc = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_AMOUNT_ADDED_ASC',
  IndexerAllocationsStddevPopulationAmountAddedDesc = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_AMOUNT_ADDED_DESC',
  IndexerAllocationsStddevPopulationAmountRemovedAsc = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_AMOUNT_REMOVED_ASC',
  IndexerAllocationsStddevPopulationAmountRemovedDesc = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_AMOUNT_REMOVED_DESC',
  IndexerAllocationsStddevPopulationBlockRangeAsc = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  IndexerAllocationsStddevPopulationBlockRangeDesc = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  IndexerAllocationsStddevPopulationCreateAtAsc = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_CREATE_AT_ASC',
  IndexerAllocationsStddevPopulationCreateAtDesc = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_CREATE_AT_DESC',
  IndexerAllocationsStddevPopulationDeploymentIdAsc = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_DEPLOYMENT_ID_ASC',
  IndexerAllocationsStddevPopulationDeploymentIdDesc = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_DEPLOYMENT_ID_DESC',
  IndexerAllocationsStddevPopulationEraIdxAsc = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_ERA_IDX_ASC',
  IndexerAllocationsStddevPopulationEraIdxDesc = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_ERA_IDX_DESC',
  IndexerAllocationsStddevPopulationIdAsc = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_ID_ASC',
  IndexerAllocationsStddevPopulationIdDesc = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_ID_DESC',
  IndexerAllocationsStddevPopulationIndexerIdAsc = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_INDEXER_ID_ASC',
  IndexerAllocationsStddevPopulationIndexerIdDesc = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_INDEXER_ID_DESC',
  IndexerAllocationsStddevPopulationProjectIdAsc = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_PROJECT_ID_ASC',
  IndexerAllocationsStddevPopulationProjectIdDesc = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_PROJECT_ID_DESC',
  IndexerAllocationsStddevSampleAmountAddedAsc = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_AMOUNT_ADDED_ASC',
  IndexerAllocationsStddevSampleAmountAddedDesc = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_AMOUNT_ADDED_DESC',
  IndexerAllocationsStddevSampleAmountRemovedAsc = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_AMOUNT_REMOVED_ASC',
  IndexerAllocationsStddevSampleAmountRemovedDesc = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_AMOUNT_REMOVED_DESC',
  IndexerAllocationsStddevSampleBlockRangeAsc = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  IndexerAllocationsStddevSampleBlockRangeDesc = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  IndexerAllocationsStddevSampleCreateAtAsc = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_CREATE_AT_ASC',
  IndexerAllocationsStddevSampleCreateAtDesc = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_CREATE_AT_DESC',
  IndexerAllocationsStddevSampleDeploymentIdAsc = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC',
  IndexerAllocationsStddevSampleDeploymentIdDesc = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC',
  IndexerAllocationsStddevSampleEraIdxAsc = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_ERA_IDX_ASC',
  IndexerAllocationsStddevSampleEraIdxDesc = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_ERA_IDX_DESC',
  IndexerAllocationsStddevSampleIdAsc = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_ID_ASC',
  IndexerAllocationsStddevSampleIdDesc = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_ID_DESC',
  IndexerAllocationsStddevSampleIndexerIdAsc = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_INDEXER_ID_ASC',
  IndexerAllocationsStddevSampleIndexerIdDesc = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_INDEXER_ID_DESC',
  IndexerAllocationsStddevSampleProjectIdAsc = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_PROJECT_ID_ASC',
  IndexerAllocationsStddevSampleProjectIdDesc = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_PROJECT_ID_DESC',
  IndexerAllocationsSumAmountAddedAsc = 'INDEXER_ALLOCATIONS_SUM_AMOUNT_ADDED_ASC',
  IndexerAllocationsSumAmountAddedDesc = 'INDEXER_ALLOCATIONS_SUM_AMOUNT_ADDED_DESC',
  IndexerAllocationsSumAmountRemovedAsc = 'INDEXER_ALLOCATIONS_SUM_AMOUNT_REMOVED_ASC',
  IndexerAllocationsSumAmountRemovedDesc = 'INDEXER_ALLOCATIONS_SUM_AMOUNT_REMOVED_DESC',
  IndexerAllocationsSumBlockRangeAsc = 'INDEXER_ALLOCATIONS_SUM_BLOCK_RANGE_ASC',
  IndexerAllocationsSumBlockRangeDesc = 'INDEXER_ALLOCATIONS_SUM_BLOCK_RANGE_DESC',
  IndexerAllocationsSumCreateAtAsc = 'INDEXER_ALLOCATIONS_SUM_CREATE_AT_ASC',
  IndexerAllocationsSumCreateAtDesc = 'INDEXER_ALLOCATIONS_SUM_CREATE_AT_DESC',
  IndexerAllocationsSumDeploymentIdAsc = 'INDEXER_ALLOCATIONS_SUM_DEPLOYMENT_ID_ASC',
  IndexerAllocationsSumDeploymentIdDesc = 'INDEXER_ALLOCATIONS_SUM_DEPLOYMENT_ID_DESC',
  IndexerAllocationsSumEraIdxAsc = 'INDEXER_ALLOCATIONS_SUM_ERA_IDX_ASC',
  IndexerAllocationsSumEraIdxDesc = 'INDEXER_ALLOCATIONS_SUM_ERA_IDX_DESC',
  IndexerAllocationsSumIdAsc = 'INDEXER_ALLOCATIONS_SUM_ID_ASC',
  IndexerAllocationsSumIdDesc = 'INDEXER_ALLOCATIONS_SUM_ID_DESC',
  IndexerAllocationsSumIndexerIdAsc = 'INDEXER_ALLOCATIONS_SUM_INDEXER_ID_ASC',
  IndexerAllocationsSumIndexerIdDesc = 'INDEXER_ALLOCATIONS_SUM_INDEXER_ID_DESC',
  IndexerAllocationsSumProjectIdAsc = 'INDEXER_ALLOCATIONS_SUM_PROJECT_ID_ASC',
  IndexerAllocationsSumProjectIdDesc = 'INDEXER_ALLOCATIONS_SUM_PROJECT_ID_DESC',
  IndexerAllocationsVariancePopulationAmountAddedAsc = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_AMOUNT_ADDED_ASC',
  IndexerAllocationsVariancePopulationAmountAddedDesc = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_AMOUNT_ADDED_DESC',
  IndexerAllocationsVariancePopulationAmountRemovedAsc = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_AMOUNT_REMOVED_ASC',
  IndexerAllocationsVariancePopulationAmountRemovedDesc = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_AMOUNT_REMOVED_DESC',
  IndexerAllocationsVariancePopulationBlockRangeAsc = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  IndexerAllocationsVariancePopulationBlockRangeDesc = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  IndexerAllocationsVariancePopulationCreateAtAsc = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_CREATE_AT_ASC',
  IndexerAllocationsVariancePopulationCreateAtDesc = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_CREATE_AT_DESC',
  IndexerAllocationsVariancePopulationDeploymentIdAsc = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC',
  IndexerAllocationsVariancePopulationDeploymentIdDesc = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC',
  IndexerAllocationsVariancePopulationEraIdxAsc = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_ERA_IDX_ASC',
  IndexerAllocationsVariancePopulationEraIdxDesc = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_ERA_IDX_DESC',
  IndexerAllocationsVariancePopulationIdAsc = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_ID_ASC',
  IndexerAllocationsVariancePopulationIdDesc = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_ID_DESC',
  IndexerAllocationsVariancePopulationIndexerIdAsc = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_INDEXER_ID_ASC',
  IndexerAllocationsVariancePopulationIndexerIdDesc = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_INDEXER_ID_DESC',
  IndexerAllocationsVariancePopulationProjectIdAsc = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_PROJECT_ID_ASC',
  IndexerAllocationsVariancePopulationProjectIdDesc = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_PROJECT_ID_DESC',
  IndexerAllocationsVarianceSampleAmountAddedAsc = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_AMOUNT_ADDED_ASC',
  IndexerAllocationsVarianceSampleAmountAddedDesc = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_AMOUNT_ADDED_DESC',
  IndexerAllocationsVarianceSampleAmountRemovedAsc = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_AMOUNT_REMOVED_ASC',
  IndexerAllocationsVarianceSampleAmountRemovedDesc = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_AMOUNT_REMOVED_DESC',
  IndexerAllocationsVarianceSampleBlockRangeAsc = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  IndexerAllocationsVarianceSampleBlockRangeDesc = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  IndexerAllocationsVarianceSampleCreateAtAsc = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_CREATE_AT_ASC',
  IndexerAllocationsVarianceSampleCreateAtDesc = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_CREATE_AT_DESC',
  IndexerAllocationsVarianceSampleDeploymentIdAsc = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC',
  IndexerAllocationsVarianceSampleDeploymentIdDesc = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC',
  IndexerAllocationsVarianceSampleEraIdxAsc = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_ERA_IDX_ASC',
  IndexerAllocationsVarianceSampleEraIdxDesc = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_ERA_IDX_DESC',
  IndexerAllocationsVarianceSampleIdAsc = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_ID_ASC',
  IndexerAllocationsVarianceSampleIdDesc = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_ID_DESC',
  IndexerAllocationsVarianceSampleIndexerIdAsc = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  IndexerAllocationsVarianceSampleIndexerIdDesc = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  IndexerAllocationsVarianceSampleProjectIdAsc = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_PROJECT_ID_ASC',
  IndexerAllocationsVarianceSampleProjectIdDesc = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_PROJECT_ID_DESC',
  IndexerAllocationRewardsAverageBlockRangeAsc = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_BLOCK_RANGE_ASC',
  IndexerAllocationRewardsAverageBlockRangeDesc = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_BLOCK_RANGE_DESC',
  IndexerAllocationRewardsAverageBurntAsc = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_BURNT_ASC',
  IndexerAllocationRewardsAverageBurntDesc = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_BURNT_DESC',
  IndexerAllocationRewardsAverageCreateAtAsc = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_CREATE_AT_ASC',
  IndexerAllocationRewardsAverageCreateAtDesc = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_CREATE_AT_DESC',
  IndexerAllocationRewardsAverageDeploymentIdAsc = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_DEPLOYMENT_ID_ASC',
  IndexerAllocationRewardsAverageDeploymentIdDesc = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_DEPLOYMENT_ID_DESC',
  IndexerAllocationRewardsAverageEraIdxAsc = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_ERA_IDX_ASC',
  IndexerAllocationRewardsAverageEraIdxDesc = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_ERA_IDX_DESC',
  IndexerAllocationRewardsAverageIdAsc = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_ID_ASC',
  IndexerAllocationRewardsAverageIdDesc = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_ID_DESC',
  IndexerAllocationRewardsAverageIndexerIdAsc = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_INDEXER_ID_ASC',
  IndexerAllocationRewardsAverageIndexerIdDesc = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_INDEXER_ID_DESC',
  IndexerAllocationRewardsAverageProjectIdAsc = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_PROJECT_ID_ASC',
  IndexerAllocationRewardsAverageProjectIdDesc = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_PROJECT_ID_DESC',
  IndexerAllocationRewardsAverageRewardAsc = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_REWARD_ASC',
  IndexerAllocationRewardsAverageRewardDesc = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_REWARD_DESC',
  IndexerAllocationRewardsByDeploymentIdCountAsc = 'INDEXER_ALLOCATION_REWARDS_BY_DEPLOYMENT_ID__COUNT_ASC',
  IndexerAllocationRewardsByDeploymentIdCountDesc = 'INDEXER_ALLOCATION_REWARDS_BY_DEPLOYMENT_ID__COUNT_DESC',
  IndexerAllocationRewardsCountAsc = 'INDEXER_ALLOCATION_REWARDS_COUNT_ASC',
  IndexerAllocationRewardsCountDesc = 'INDEXER_ALLOCATION_REWARDS_COUNT_DESC',
  IndexerAllocationRewardsDistinctCountBlockRangeAsc = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  IndexerAllocationRewardsDistinctCountBlockRangeDesc = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  IndexerAllocationRewardsDistinctCountBurntAsc = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_BURNT_ASC',
  IndexerAllocationRewardsDistinctCountBurntDesc = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_BURNT_DESC',
  IndexerAllocationRewardsDistinctCountCreateAtAsc = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_CREATE_AT_ASC',
  IndexerAllocationRewardsDistinctCountCreateAtDesc = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_CREATE_AT_DESC',
  IndexerAllocationRewardsDistinctCountDeploymentIdAsc = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_DEPLOYMENT_ID_ASC',
  IndexerAllocationRewardsDistinctCountDeploymentIdDesc = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_DEPLOYMENT_ID_DESC',
  IndexerAllocationRewardsDistinctCountEraIdxAsc = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_ERA_IDX_ASC',
  IndexerAllocationRewardsDistinctCountEraIdxDesc = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_ERA_IDX_DESC',
  IndexerAllocationRewardsDistinctCountIdAsc = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_ID_ASC',
  IndexerAllocationRewardsDistinctCountIdDesc = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_ID_DESC',
  IndexerAllocationRewardsDistinctCountIndexerIdAsc = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_INDEXER_ID_ASC',
  IndexerAllocationRewardsDistinctCountIndexerIdDesc = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_INDEXER_ID_DESC',
  IndexerAllocationRewardsDistinctCountProjectIdAsc = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_PROJECT_ID_ASC',
  IndexerAllocationRewardsDistinctCountProjectIdDesc = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_PROJECT_ID_DESC',
  IndexerAllocationRewardsDistinctCountRewardAsc = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_REWARD_ASC',
  IndexerAllocationRewardsDistinctCountRewardDesc = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_REWARD_DESC',
  IndexerAllocationRewardsMaxBlockRangeAsc = 'INDEXER_ALLOCATION_REWARDS_MAX_BLOCK_RANGE_ASC',
  IndexerAllocationRewardsMaxBlockRangeDesc = 'INDEXER_ALLOCATION_REWARDS_MAX_BLOCK_RANGE_DESC',
  IndexerAllocationRewardsMaxBurntAsc = 'INDEXER_ALLOCATION_REWARDS_MAX_BURNT_ASC',
  IndexerAllocationRewardsMaxBurntDesc = 'INDEXER_ALLOCATION_REWARDS_MAX_BURNT_DESC',
  IndexerAllocationRewardsMaxCreateAtAsc = 'INDEXER_ALLOCATION_REWARDS_MAX_CREATE_AT_ASC',
  IndexerAllocationRewardsMaxCreateAtDesc = 'INDEXER_ALLOCATION_REWARDS_MAX_CREATE_AT_DESC',
  IndexerAllocationRewardsMaxDeploymentIdAsc = 'INDEXER_ALLOCATION_REWARDS_MAX_DEPLOYMENT_ID_ASC',
  IndexerAllocationRewardsMaxDeploymentIdDesc = 'INDEXER_ALLOCATION_REWARDS_MAX_DEPLOYMENT_ID_DESC',
  IndexerAllocationRewardsMaxEraIdxAsc = 'INDEXER_ALLOCATION_REWARDS_MAX_ERA_IDX_ASC',
  IndexerAllocationRewardsMaxEraIdxDesc = 'INDEXER_ALLOCATION_REWARDS_MAX_ERA_IDX_DESC',
  IndexerAllocationRewardsMaxIdAsc = 'INDEXER_ALLOCATION_REWARDS_MAX_ID_ASC',
  IndexerAllocationRewardsMaxIdDesc = 'INDEXER_ALLOCATION_REWARDS_MAX_ID_DESC',
  IndexerAllocationRewardsMaxIndexerIdAsc = 'INDEXER_ALLOCATION_REWARDS_MAX_INDEXER_ID_ASC',
  IndexerAllocationRewardsMaxIndexerIdDesc = 'INDEXER_ALLOCATION_REWARDS_MAX_INDEXER_ID_DESC',
  IndexerAllocationRewardsMaxProjectIdAsc = 'INDEXER_ALLOCATION_REWARDS_MAX_PROJECT_ID_ASC',
  IndexerAllocationRewardsMaxProjectIdDesc = 'INDEXER_ALLOCATION_REWARDS_MAX_PROJECT_ID_DESC',
  IndexerAllocationRewardsMaxRewardAsc = 'INDEXER_ALLOCATION_REWARDS_MAX_REWARD_ASC',
  IndexerAllocationRewardsMaxRewardDesc = 'INDEXER_ALLOCATION_REWARDS_MAX_REWARD_DESC',
  IndexerAllocationRewardsMinBlockRangeAsc = 'INDEXER_ALLOCATION_REWARDS_MIN_BLOCK_RANGE_ASC',
  IndexerAllocationRewardsMinBlockRangeDesc = 'INDEXER_ALLOCATION_REWARDS_MIN_BLOCK_RANGE_DESC',
  IndexerAllocationRewardsMinBurntAsc = 'INDEXER_ALLOCATION_REWARDS_MIN_BURNT_ASC',
  IndexerAllocationRewardsMinBurntDesc = 'INDEXER_ALLOCATION_REWARDS_MIN_BURNT_DESC',
  IndexerAllocationRewardsMinCreateAtAsc = 'INDEXER_ALLOCATION_REWARDS_MIN_CREATE_AT_ASC',
  IndexerAllocationRewardsMinCreateAtDesc = 'INDEXER_ALLOCATION_REWARDS_MIN_CREATE_AT_DESC',
  IndexerAllocationRewardsMinDeploymentIdAsc = 'INDEXER_ALLOCATION_REWARDS_MIN_DEPLOYMENT_ID_ASC',
  IndexerAllocationRewardsMinDeploymentIdDesc = 'INDEXER_ALLOCATION_REWARDS_MIN_DEPLOYMENT_ID_DESC',
  IndexerAllocationRewardsMinEraIdxAsc = 'INDEXER_ALLOCATION_REWARDS_MIN_ERA_IDX_ASC',
  IndexerAllocationRewardsMinEraIdxDesc = 'INDEXER_ALLOCATION_REWARDS_MIN_ERA_IDX_DESC',
  IndexerAllocationRewardsMinIdAsc = 'INDEXER_ALLOCATION_REWARDS_MIN_ID_ASC',
  IndexerAllocationRewardsMinIdDesc = 'INDEXER_ALLOCATION_REWARDS_MIN_ID_DESC',
  IndexerAllocationRewardsMinIndexerIdAsc = 'INDEXER_ALLOCATION_REWARDS_MIN_INDEXER_ID_ASC',
  IndexerAllocationRewardsMinIndexerIdDesc = 'INDEXER_ALLOCATION_REWARDS_MIN_INDEXER_ID_DESC',
  IndexerAllocationRewardsMinProjectIdAsc = 'INDEXER_ALLOCATION_REWARDS_MIN_PROJECT_ID_ASC',
  IndexerAllocationRewardsMinProjectIdDesc = 'INDEXER_ALLOCATION_REWARDS_MIN_PROJECT_ID_DESC',
  IndexerAllocationRewardsMinRewardAsc = 'INDEXER_ALLOCATION_REWARDS_MIN_REWARD_ASC',
  IndexerAllocationRewardsMinRewardDesc = 'INDEXER_ALLOCATION_REWARDS_MIN_REWARD_DESC',
  IndexerAllocationRewardsStddevPopulationBlockRangeAsc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  IndexerAllocationRewardsStddevPopulationBlockRangeDesc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  IndexerAllocationRewardsStddevPopulationBurntAsc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_BURNT_ASC',
  IndexerAllocationRewardsStddevPopulationBurntDesc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_BURNT_DESC',
  IndexerAllocationRewardsStddevPopulationCreateAtAsc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_CREATE_AT_ASC',
  IndexerAllocationRewardsStddevPopulationCreateAtDesc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_CREATE_AT_DESC',
  IndexerAllocationRewardsStddevPopulationDeploymentIdAsc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_DEPLOYMENT_ID_ASC',
  IndexerAllocationRewardsStddevPopulationDeploymentIdDesc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_DEPLOYMENT_ID_DESC',
  IndexerAllocationRewardsStddevPopulationEraIdxAsc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_ERA_IDX_ASC',
  IndexerAllocationRewardsStddevPopulationEraIdxDesc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_ERA_IDX_DESC',
  IndexerAllocationRewardsStddevPopulationIdAsc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_ID_ASC',
  IndexerAllocationRewardsStddevPopulationIdDesc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_ID_DESC',
  IndexerAllocationRewardsStddevPopulationIndexerIdAsc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_INDEXER_ID_ASC',
  IndexerAllocationRewardsStddevPopulationIndexerIdDesc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_INDEXER_ID_DESC',
  IndexerAllocationRewardsStddevPopulationProjectIdAsc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_PROJECT_ID_ASC',
  IndexerAllocationRewardsStddevPopulationProjectIdDesc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_PROJECT_ID_DESC',
  IndexerAllocationRewardsStddevPopulationRewardAsc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_REWARD_ASC',
  IndexerAllocationRewardsStddevPopulationRewardDesc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_REWARD_DESC',
  IndexerAllocationRewardsStddevSampleBlockRangeAsc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  IndexerAllocationRewardsStddevSampleBlockRangeDesc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  IndexerAllocationRewardsStddevSampleBurntAsc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_BURNT_ASC',
  IndexerAllocationRewardsStddevSampleBurntDesc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_BURNT_DESC',
  IndexerAllocationRewardsStddevSampleCreateAtAsc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_CREATE_AT_ASC',
  IndexerAllocationRewardsStddevSampleCreateAtDesc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_CREATE_AT_DESC',
  IndexerAllocationRewardsStddevSampleDeploymentIdAsc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC',
  IndexerAllocationRewardsStddevSampleDeploymentIdDesc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC',
  IndexerAllocationRewardsStddevSampleEraIdxAsc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_ERA_IDX_ASC',
  IndexerAllocationRewardsStddevSampleEraIdxDesc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_ERA_IDX_DESC',
  IndexerAllocationRewardsStddevSampleIdAsc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_ID_ASC',
  IndexerAllocationRewardsStddevSampleIdDesc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_ID_DESC',
  IndexerAllocationRewardsStddevSampleIndexerIdAsc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_INDEXER_ID_ASC',
  IndexerAllocationRewardsStddevSampleIndexerIdDesc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_INDEXER_ID_DESC',
  IndexerAllocationRewardsStddevSampleProjectIdAsc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_PROJECT_ID_ASC',
  IndexerAllocationRewardsStddevSampleProjectIdDesc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_PROJECT_ID_DESC',
  IndexerAllocationRewardsStddevSampleRewardAsc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_REWARD_ASC',
  IndexerAllocationRewardsStddevSampleRewardDesc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_REWARD_DESC',
  IndexerAllocationRewardsSumBlockRangeAsc = 'INDEXER_ALLOCATION_REWARDS_SUM_BLOCK_RANGE_ASC',
  IndexerAllocationRewardsSumBlockRangeDesc = 'INDEXER_ALLOCATION_REWARDS_SUM_BLOCK_RANGE_DESC',
  IndexerAllocationRewardsSumBurntAsc = 'INDEXER_ALLOCATION_REWARDS_SUM_BURNT_ASC',
  IndexerAllocationRewardsSumBurntDesc = 'INDEXER_ALLOCATION_REWARDS_SUM_BURNT_DESC',
  IndexerAllocationRewardsSumCreateAtAsc = 'INDEXER_ALLOCATION_REWARDS_SUM_CREATE_AT_ASC',
  IndexerAllocationRewardsSumCreateAtDesc = 'INDEXER_ALLOCATION_REWARDS_SUM_CREATE_AT_DESC',
  IndexerAllocationRewardsSumDeploymentIdAsc = 'INDEXER_ALLOCATION_REWARDS_SUM_DEPLOYMENT_ID_ASC',
  IndexerAllocationRewardsSumDeploymentIdDesc = 'INDEXER_ALLOCATION_REWARDS_SUM_DEPLOYMENT_ID_DESC',
  IndexerAllocationRewardsSumEraIdxAsc = 'INDEXER_ALLOCATION_REWARDS_SUM_ERA_IDX_ASC',
  IndexerAllocationRewardsSumEraIdxDesc = 'INDEXER_ALLOCATION_REWARDS_SUM_ERA_IDX_DESC',
  IndexerAllocationRewardsSumIdAsc = 'INDEXER_ALLOCATION_REWARDS_SUM_ID_ASC',
  IndexerAllocationRewardsSumIdDesc = 'INDEXER_ALLOCATION_REWARDS_SUM_ID_DESC',
  IndexerAllocationRewardsSumIndexerIdAsc = 'INDEXER_ALLOCATION_REWARDS_SUM_INDEXER_ID_ASC',
  IndexerAllocationRewardsSumIndexerIdDesc = 'INDEXER_ALLOCATION_REWARDS_SUM_INDEXER_ID_DESC',
  IndexerAllocationRewardsSumProjectIdAsc = 'INDEXER_ALLOCATION_REWARDS_SUM_PROJECT_ID_ASC',
  IndexerAllocationRewardsSumProjectIdDesc = 'INDEXER_ALLOCATION_REWARDS_SUM_PROJECT_ID_DESC',
  IndexerAllocationRewardsSumRewardAsc = 'INDEXER_ALLOCATION_REWARDS_SUM_REWARD_ASC',
  IndexerAllocationRewardsSumRewardDesc = 'INDEXER_ALLOCATION_REWARDS_SUM_REWARD_DESC',
  IndexerAllocationRewardsVariancePopulationBlockRangeAsc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  IndexerAllocationRewardsVariancePopulationBlockRangeDesc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  IndexerAllocationRewardsVariancePopulationBurntAsc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_BURNT_ASC',
  IndexerAllocationRewardsVariancePopulationBurntDesc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_BURNT_DESC',
  IndexerAllocationRewardsVariancePopulationCreateAtAsc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_CREATE_AT_ASC',
  IndexerAllocationRewardsVariancePopulationCreateAtDesc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_CREATE_AT_DESC',
  IndexerAllocationRewardsVariancePopulationDeploymentIdAsc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC',
  IndexerAllocationRewardsVariancePopulationDeploymentIdDesc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC',
  IndexerAllocationRewardsVariancePopulationEraIdxAsc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_ERA_IDX_ASC',
  IndexerAllocationRewardsVariancePopulationEraIdxDesc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_ERA_IDX_DESC',
  IndexerAllocationRewardsVariancePopulationIdAsc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_ID_ASC',
  IndexerAllocationRewardsVariancePopulationIdDesc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_ID_DESC',
  IndexerAllocationRewardsVariancePopulationIndexerIdAsc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_INDEXER_ID_ASC',
  IndexerAllocationRewardsVariancePopulationIndexerIdDesc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_INDEXER_ID_DESC',
  IndexerAllocationRewardsVariancePopulationProjectIdAsc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_PROJECT_ID_ASC',
  IndexerAllocationRewardsVariancePopulationProjectIdDesc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_PROJECT_ID_DESC',
  IndexerAllocationRewardsVariancePopulationRewardAsc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_REWARD_ASC',
  IndexerAllocationRewardsVariancePopulationRewardDesc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_REWARD_DESC',
  IndexerAllocationRewardsVarianceSampleBlockRangeAsc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  IndexerAllocationRewardsVarianceSampleBlockRangeDesc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  IndexerAllocationRewardsVarianceSampleBurntAsc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_BURNT_ASC',
  IndexerAllocationRewardsVarianceSampleBurntDesc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_BURNT_DESC',
  IndexerAllocationRewardsVarianceSampleCreateAtAsc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_CREATE_AT_ASC',
  IndexerAllocationRewardsVarianceSampleCreateAtDesc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_CREATE_AT_DESC',
  IndexerAllocationRewardsVarianceSampleDeploymentIdAsc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC',
  IndexerAllocationRewardsVarianceSampleDeploymentIdDesc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC',
  IndexerAllocationRewardsVarianceSampleEraIdxAsc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_ERA_IDX_ASC',
  IndexerAllocationRewardsVarianceSampleEraIdxDesc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_ERA_IDX_DESC',
  IndexerAllocationRewardsVarianceSampleIdAsc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_ID_ASC',
  IndexerAllocationRewardsVarianceSampleIdDesc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_ID_DESC',
  IndexerAllocationRewardsVarianceSampleIndexerIdAsc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  IndexerAllocationRewardsVarianceSampleIndexerIdDesc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  IndexerAllocationRewardsVarianceSampleProjectIdAsc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_PROJECT_ID_ASC',
  IndexerAllocationRewardsVarianceSampleProjectIdDesc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_PROJECT_ID_DESC',
  IndexerAllocationRewardsVarianceSampleRewardAsc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_REWARD_ASC',
  IndexerAllocationRewardsVarianceSampleRewardDesc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_REWARD_DESC',
  IndexerAllocationRewardSummariesAverageBlockRangeAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_BLOCK_RANGE_ASC',
  IndexerAllocationRewardSummariesAverageBlockRangeDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_BLOCK_RANGE_DESC',
  IndexerAllocationRewardSummariesAverageCreateAtAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_CREATE_AT_ASC',
  IndexerAllocationRewardSummariesAverageCreateAtDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_CREATE_AT_DESC',
  IndexerAllocationRewardSummariesAverageDeploymentIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_DEPLOYMENT_ID_ASC',
  IndexerAllocationRewardSummariesAverageDeploymentIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_DEPLOYMENT_ID_DESC',
  IndexerAllocationRewardSummariesAverageIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_ID_ASC',
  IndexerAllocationRewardSummariesAverageIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_ID_DESC',
  IndexerAllocationRewardSummariesAverageIndexerIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_INDEXER_ID_ASC',
  IndexerAllocationRewardSummariesAverageIndexerIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_INDEXER_ID_DESC',
  IndexerAllocationRewardSummariesAverageProjectIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_PROJECT_ID_ASC',
  IndexerAllocationRewardSummariesAverageProjectIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_PROJECT_ID_DESC',
  IndexerAllocationRewardSummariesAverageTotalBurntAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_TOTAL_BURNT_ASC',
  IndexerAllocationRewardSummariesAverageTotalBurntDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_TOTAL_BURNT_DESC',
  IndexerAllocationRewardSummariesAverageTotalRewardAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_TOTAL_REWARD_ASC',
  IndexerAllocationRewardSummariesAverageTotalRewardDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_TOTAL_REWARD_DESC',
  IndexerAllocationRewardSummariesAverageUpdateAtAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_UPDATE_AT_ASC',
  IndexerAllocationRewardSummariesAverageUpdateAtDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_UPDATE_AT_DESC',
  IndexerAllocationRewardSummariesByDeploymentIdCountAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_BY_DEPLOYMENT_ID__COUNT_ASC',
  IndexerAllocationRewardSummariesByDeploymentIdCountDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_BY_DEPLOYMENT_ID__COUNT_DESC',
  IndexerAllocationRewardSummariesCountAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_COUNT_ASC',
  IndexerAllocationRewardSummariesCountDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_COUNT_DESC',
  IndexerAllocationRewardSummariesDistinctCountBlockRangeAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  IndexerAllocationRewardSummariesDistinctCountBlockRangeDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  IndexerAllocationRewardSummariesDistinctCountCreateAtAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_CREATE_AT_ASC',
  IndexerAllocationRewardSummariesDistinctCountCreateAtDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_CREATE_AT_DESC',
  IndexerAllocationRewardSummariesDistinctCountDeploymentIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_DEPLOYMENT_ID_ASC',
  IndexerAllocationRewardSummariesDistinctCountDeploymentIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_DEPLOYMENT_ID_DESC',
  IndexerAllocationRewardSummariesDistinctCountIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_ID_ASC',
  IndexerAllocationRewardSummariesDistinctCountIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_ID_DESC',
  IndexerAllocationRewardSummariesDistinctCountIndexerIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_INDEXER_ID_ASC',
  IndexerAllocationRewardSummariesDistinctCountIndexerIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_INDEXER_ID_DESC',
  IndexerAllocationRewardSummariesDistinctCountProjectIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_PROJECT_ID_ASC',
  IndexerAllocationRewardSummariesDistinctCountProjectIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_PROJECT_ID_DESC',
  IndexerAllocationRewardSummariesDistinctCountTotalBurntAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_TOTAL_BURNT_ASC',
  IndexerAllocationRewardSummariesDistinctCountTotalBurntDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_TOTAL_BURNT_DESC',
  IndexerAllocationRewardSummariesDistinctCountTotalRewardAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_TOTAL_REWARD_ASC',
  IndexerAllocationRewardSummariesDistinctCountTotalRewardDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_TOTAL_REWARD_DESC',
  IndexerAllocationRewardSummariesDistinctCountUpdateAtAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_UPDATE_AT_ASC',
  IndexerAllocationRewardSummariesDistinctCountUpdateAtDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_UPDATE_AT_DESC',
  IndexerAllocationRewardSummariesMaxBlockRangeAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_BLOCK_RANGE_ASC',
  IndexerAllocationRewardSummariesMaxBlockRangeDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_BLOCK_RANGE_DESC',
  IndexerAllocationRewardSummariesMaxCreateAtAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_CREATE_AT_ASC',
  IndexerAllocationRewardSummariesMaxCreateAtDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_CREATE_AT_DESC',
  IndexerAllocationRewardSummariesMaxDeploymentIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_DEPLOYMENT_ID_ASC',
  IndexerAllocationRewardSummariesMaxDeploymentIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_DEPLOYMENT_ID_DESC',
  IndexerAllocationRewardSummariesMaxIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_ID_ASC',
  IndexerAllocationRewardSummariesMaxIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_ID_DESC',
  IndexerAllocationRewardSummariesMaxIndexerIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_INDEXER_ID_ASC',
  IndexerAllocationRewardSummariesMaxIndexerIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_INDEXER_ID_DESC',
  IndexerAllocationRewardSummariesMaxProjectIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_PROJECT_ID_ASC',
  IndexerAllocationRewardSummariesMaxProjectIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_PROJECT_ID_DESC',
  IndexerAllocationRewardSummariesMaxTotalBurntAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_TOTAL_BURNT_ASC',
  IndexerAllocationRewardSummariesMaxTotalBurntDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_TOTAL_BURNT_DESC',
  IndexerAllocationRewardSummariesMaxTotalRewardAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_TOTAL_REWARD_ASC',
  IndexerAllocationRewardSummariesMaxTotalRewardDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_TOTAL_REWARD_DESC',
  IndexerAllocationRewardSummariesMaxUpdateAtAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_UPDATE_AT_ASC',
  IndexerAllocationRewardSummariesMaxUpdateAtDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_UPDATE_AT_DESC',
  IndexerAllocationRewardSummariesMinBlockRangeAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_BLOCK_RANGE_ASC',
  IndexerAllocationRewardSummariesMinBlockRangeDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_BLOCK_RANGE_DESC',
  IndexerAllocationRewardSummariesMinCreateAtAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_CREATE_AT_ASC',
  IndexerAllocationRewardSummariesMinCreateAtDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_CREATE_AT_DESC',
  IndexerAllocationRewardSummariesMinDeploymentIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_DEPLOYMENT_ID_ASC',
  IndexerAllocationRewardSummariesMinDeploymentIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_DEPLOYMENT_ID_DESC',
  IndexerAllocationRewardSummariesMinIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_ID_ASC',
  IndexerAllocationRewardSummariesMinIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_ID_DESC',
  IndexerAllocationRewardSummariesMinIndexerIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_INDEXER_ID_ASC',
  IndexerAllocationRewardSummariesMinIndexerIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_INDEXER_ID_DESC',
  IndexerAllocationRewardSummariesMinProjectIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_PROJECT_ID_ASC',
  IndexerAllocationRewardSummariesMinProjectIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_PROJECT_ID_DESC',
  IndexerAllocationRewardSummariesMinTotalBurntAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_TOTAL_BURNT_ASC',
  IndexerAllocationRewardSummariesMinTotalBurntDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_TOTAL_BURNT_DESC',
  IndexerAllocationRewardSummariesMinTotalRewardAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_TOTAL_REWARD_ASC',
  IndexerAllocationRewardSummariesMinTotalRewardDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_TOTAL_REWARD_DESC',
  IndexerAllocationRewardSummariesMinUpdateAtAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_UPDATE_AT_ASC',
  IndexerAllocationRewardSummariesMinUpdateAtDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_UPDATE_AT_DESC',
  IndexerAllocationRewardSummariesStddevPopulationBlockRangeAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  IndexerAllocationRewardSummariesStddevPopulationBlockRangeDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  IndexerAllocationRewardSummariesStddevPopulationCreateAtAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_CREATE_AT_ASC',
  IndexerAllocationRewardSummariesStddevPopulationCreateAtDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_CREATE_AT_DESC',
  IndexerAllocationRewardSummariesStddevPopulationDeploymentIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_DEPLOYMENT_ID_ASC',
  IndexerAllocationRewardSummariesStddevPopulationDeploymentIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_DEPLOYMENT_ID_DESC',
  IndexerAllocationRewardSummariesStddevPopulationIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_ID_ASC',
  IndexerAllocationRewardSummariesStddevPopulationIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_ID_DESC',
  IndexerAllocationRewardSummariesStddevPopulationIndexerIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_INDEXER_ID_ASC',
  IndexerAllocationRewardSummariesStddevPopulationIndexerIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_INDEXER_ID_DESC',
  IndexerAllocationRewardSummariesStddevPopulationProjectIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_PROJECT_ID_ASC',
  IndexerAllocationRewardSummariesStddevPopulationProjectIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_PROJECT_ID_DESC',
  IndexerAllocationRewardSummariesStddevPopulationTotalBurntAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_TOTAL_BURNT_ASC',
  IndexerAllocationRewardSummariesStddevPopulationTotalBurntDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_TOTAL_BURNT_DESC',
  IndexerAllocationRewardSummariesStddevPopulationTotalRewardAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_TOTAL_REWARD_ASC',
  IndexerAllocationRewardSummariesStddevPopulationTotalRewardDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_TOTAL_REWARD_DESC',
  IndexerAllocationRewardSummariesStddevPopulationUpdateAtAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_UPDATE_AT_ASC',
  IndexerAllocationRewardSummariesStddevPopulationUpdateAtDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_UPDATE_AT_DESC',
  IndexerAllocationRewardSummariesStddevSampleBlockRangeAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  IndexerAllocationRewardSummariesStddevSampleBlockRangeDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  IndexerAllocationRewardSummariesStddevSampleCreateAtAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_CREATE_AT_ASC',
  IndexerAllocationRewardSummariesStddevSampleCreateAtDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_CREATE_AT_DESC',
  IndexerAllocationRewardSummariesStddevSampleDeploymentIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC',
  IndexerAllocationRewardSummariesStddevSampleDeploymentIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC',
  IndexerAllocationRewardSummariesStddevSampleIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_ID_ASC',
  IndexerAllocationRewardSummariesStddevSampleIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_ID_DESC',
  IndexerAllocationRewardSummariesStddevSampleIndexerIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_INDEXER_ID_ASC',
  IndexerAllocationRewardSummariesStddevSampleIndexerIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_INDEXER_ID_DESC',
  IndexerAllocationRewardSummariesStddevSampleProjectIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_PROJECT_ID_ASC',
  IndexerAllocationRewardSummariesStddevSampleProjectIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_PROJECT_ID_DESC',
  IndexerAllocationRewardSummariesStddevSampleTotalBurntAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_TOTAL_BURNT_ASC',
  IndexerAllocationRewardSummariesStddevSampleTotalBurntDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_TOTAL_BURNT_DESC',
  IndexerAllocationRewardSummariesStddevSampleTotalRewardAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_TOTAL_REWARD_ASC',
  IndexerAllocationRewardSummariesStddevSampleTotalRewardDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_TOTAL_REWARD_DESC',
  IndexerAllocationRewardSummariesStddevSampleUpdateAtAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_UPDATE_AT_ASC',
  IndexerAllocationRewardSummariesStddevSampleUpdateAtDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_UPDATE_AT_DESC',
  IndexerAllocationRewardSummariesSumBlockRangeAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_BLOCK_RANGE_ASC',
  IndexerAllocationRewardSummariesSumBlockRangeDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_BLOCK_RANGE_DESC',
  IndexerAllocationRewardSummariesSumCreateAtAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_CREATE_AT_ASC',
  IndexerAllocationRewardSummariesSumCreateAtDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_CREATE_AT_DESC',
  IndexerAllocationRewardSummariesSumDeploymentIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_DEPLOYMENT_ID_ASC',
  IndexerAllocationRewardSummariesSumDeploymentIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_DEPLOYMENT_ID_DESC',
  IndexerAllocationRewardSummariesSumIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_ID_ASC',
  IndexerAllocationRewardSummariesSumIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_ID_DESC',
  IndexerAllocationRewardSummariesSumIndexerIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_INDEXER_ID_ASC',
  IndexerAllocationRewardSummariesSumIndexerIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_INDEXER_ID_DESC',
  IndexerAllocationRewardSummariesSumProjectIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_PROJECT_ID_ASC',
  IndexerAllocationRewardSummariesSumProjectIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_PROJECT_ID_DESC',
  IndexerAllocationRewardSummariesSumTotalBurntAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_TOTAL_BURNT_ASC',
  IndexerAllocationRewardSummariesSumTotalBurntDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_TOTAL_BURNT_DESC',
  IndexerAllocationRewardSummariesSumTotalRewardAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_TOTAL_REWARD_ASC',
  IndexerAllocationRewardSummariesSumTotalRewardDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_TOTAL_REWARD_DESC',
  IndexerAllocationRewardSummariesSumUpdateAtAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_UPDATE_AT_ASC',
  IndexerAllocationRewardSummariesSumUpdateAtDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_UPDATE_AT_DESC',
  IndexerAllocationRewardSummariesVariancePopulationBlockRangeAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  IndexerAllocationRewardSummariesVariancePopulationBlockRangeDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  IndexerAllocationRewardSummariesVariancePopulationCreateAtAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_CREATE_AT_ASC',
  IndexerAllocationRewardSummariesVariancePopulationCreateAtDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_CREATE_AT_DESC',
  IndexerAllocationRewardSummariesVariancePopulationDeploymentIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC',
  IndexerAllocationRewardSummariesVariancePopulationDeploymentIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC',
  IndexerAllocationRewardSummariesVariancePopulationIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_ID_ASC',
  IndexerAllocationRewardSummariesVariancePopulationIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_ID_DESC',
  IndexerAllocationRewardSummariesVariancePopulationIndexerIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_INDEXER_ID_ASC',
  IndexerAllocationRewardSummariesVariancePopulationIndexerIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_INDEXER_ID_DESC',
  IndexerAllocationRewardSummariesVariancePopulationProjectIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_PROJECT_ID_ASC',
  IndexerAllocationRewardSummariesVariancePopulationProjectIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_PROJECT_ID_DESC',
  IndexerAllocationRewardSummariesVariancePopulationTotalBurntAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_TOTAL_BURNT_ASC',
  IndexerAllocationRewardSummariesVariancePopulationTotalBurntDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_TOTAL_BURNT_DESC',
  IndexerAllocationRewardSummariesVariancePopulationTotalRewardAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_TOTAL_REWARD_ASC',
  IndexerAllocationRewardSummariesVariancePopulationTotalRewardDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_TOTAL_REWARD_DESC',
  IndexerAllocationRewardSummariesVariancePopulationUpdateAtAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_UPDATE_AT_ASC',
  IndexerAllocationRewardSummariesVariancePopulationUpdateAtDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_UPDATE_AT_DESC',
  IndexerAllocationRewardSummariesVarianceSampleBlockRangeAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  IndexerAllocationRewardSummariesVarianceSampleBlockRangeDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  IndexerAllocationRewardSummariesVarianceSampleCreateAtAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_CREATE_AT_ASC',
  IndexerAllocationRewardSummariesVarianceSampleCreateAtDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_CREATE_AT_DESC',
  IndexerAllocationRewardSummariesVarianceSampleDeploymentIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC',
  IndexerAllocationRewardSummariesVarianceSampleDeploymentIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC',
  IndexerAllocationRewardSummariesVarianceSampleIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_ID_ASC',
  IndexerAllocationRewardSummariesVarianceSampleIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_ID_DESC',
  IndexerAllocationRewardSummariesVarianceSampleIndexerIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  IndexerAllocationRewardSummariesVarianceSampleIndexerIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  IndexerAllocationRewardSummariesVarianceSampleProjectIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_PROJECT_ID_ASC',
  IndexerAllocationRewardSummariesVarianceSampleProjectIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_PROJECT_ID_DESC',
  IndexerAllocationRewardSummariesVarianceSampleTotalBurntAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_TOTAL_BURNT_ASC',
  IndexerAllocationRewardSummariesVarianceSampleTotalBurntDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_TOTAL_BURNT_DESC',
  IndexerAllocationRewardSummariesVarianceSampleTotalRewardAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_TOTAL_REWARD_ASC',
  IndexerAllocationRewardSummariesVarianceSampleTotalRewardDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_TOTAL_REWARD_DESC',
  IndexerAllocationRewardSummariesVarianceSampleUpdateAtAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_UPDATE_AT_ASC',
  IndexerAllocationRewardSummariesVarianceSampleUpdateAtDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_UPDATE_AT_DESC',
  IndexerAllocationSummariesAverageBlockRangeAsc = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_BLOCK_RANGE_ASC',
  IndexerAllocationSummariesAverageBlockRangeDesc = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_BLOCK_RANGE_DESC',
  IndexerAllocationSummariesAverageCreateAtAsc = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_CREATE_AT_ASC',
  IndexerAllocationSummariesAverageCreateAtDesc = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_CREATE_AT_DESC',
  IndexerAllocationSummariesAverageDeploymentIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_DEPLOYMENT_ID_ASC',
  IndexerAllocationSummariesAverageDeploymentIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_DEPLOYMENT_ID_DESC',
  IndexerAllocationSummariesAverageIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_ID_ASC',
  IndexerAllocationSummariesAverageIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_ID_DESC',
  IndexerAllocationSummariesAverageIndexerIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_INDEXER_ID_ASC',
  IndexerAllocationSummariesAverageIndexerIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_INDEXER_ID_DESC',
  IndexerAllocationSummariesAverageProjectIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_PROJECT_ID_ASC',
  IndexerAllocationSummariesAverageProjectIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_PROJECT_ID_DESC',
  IndexerAllocationSummariesAverageTotalAddedAsc = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_TOTAL_ADDED_ASC',
  IndexerAllocationSummariesAverageTotalAddedDesc = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_TOTAL_ADDED_DESC',
  IndexerAllocationSummariesAverageTotalAmountAsc = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_TOTAL_AMOUNT_ASC',
  IndexerAllocationSummariesAverageTotalAmountDesc = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_TOTAL_AMOUNT_DESC',
  IndexerAllocationSummariesAverageTotalRemovedAsc = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_TOTAL_REMOVED_ASC',
  IndexerAllocationSummariesAverageTotalRemovedDesc = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_TOTAL_REMOVED_DESC',
  IndexerAllocationSummariesAverageUpdateAtAsc = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_UPDATE_AT_ASC',
  IndexerAllocationSummariesAverageUpdateAtDesc = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_UPDATE_AT_DESC',
  IndexerAllocationSummariesByDeploymentIdCountAsc = 'INDEXER_ALLOCATION_SUMMARIES_BY_DEPLOYMENT_ID__COUNT_ASC',
  IndexerAllocationSummariesByDeploymentIdCountDesc = 'INDEXER_ALLOCATION_SUMMARIES_BY_DEPLOYMENT_ID__COUNT_DESC',
  IndexerAllocationSummariesCountAsc = 'INDEXER_ALLOCATION_SUMMARIES_COUNT_ASC',
  IndexerAllocationSummariesCountDesc = 'INDEXER_ALLOCATION_SUMMARIES_COUNT_DESC',
  IndexerAllocationSummariesDistinctCountBlockRangeAsc = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  IndexerAllocationSummariesDistinctCountBlockRangeDesc = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  IndexerAllocationSummariesDistinctCountCreateAtAsc = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_CREATE_AT_ASC',
  IndexerAllocationSummariesDistinctCountCreateAtDesc = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_CREATE_AT_DESC',
  IndexerAllocationSummariesDistinctCountDeploymentIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_DEPLOYMENT_ID_ASC',
  IndexerAllocationSummariesDistinctCountDeploymentIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_DEPLOYMENT_ID_DESC',
  IndexerAllocationSummariesDistinctCountIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_ID_ASC',
  IndexerAllocationSummariesDistinctCountIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_ID_DESC',
  IndexerAllocationSummariesDistinctCountIndexerIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_INDEXER_ID_ASC',
  IndexerAllocationSummariesDistinctCountIndexerIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_INDEXER_ID_DESC',
  IndexerAllocationSummariesDistinctCountProjectIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_PROJECT_ID_ASC',
  IndexerAllocationSummariesDistinctCountProjectIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_PROJECT_ID_DESC',
  IndexerAllocationSummariesDistinctCountTotalAddedAsc = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_TOTAL_ADDED_ASC',
  IndexerAllocationSummariesDistinctCountTotalAddedDesc = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_TOTAL_ADDED_DESC',
  IndexerAllocationSummariesDistinctCountTotalAmountAsc = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_TOTAL_AMOUNT_ASC',
  IndexerAllocationSummariesDistinctCountTotalAmountDesc = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_TOTAL_AMOUNT_DESC',
  IndexerAllocationSummariesDistinctCountTotalRemovedAsc = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_TOTAL_REMOVED_ASC',
  IndexerAllocationSummariesDistinctCountTotalRemovedDesc = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_TOTAL_REMOVED_DESC',
  IndexerAllocationSummariesDistinctCountUpdateAtAsc = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_UPDATE_AT_ASC',
  IndexerAllocationSummariesDistinctCountUpdateAtDesc = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_UPDATE_AT_DESC',
  IndexerAllocationSummariesMaxBlockRangeAsc = 'INDEXER_ALLOCATION_SUMMARIES_MAX_BLOCK_RANGE_ASC',
  IndexerAllocationSummariesMaxBlockRangeDesc = 'INDEXER_ALLOCATION_SUMMARIES_MAX_BLOCK_RANGE_DESC',
  IndexerAllocationSummariesMaxCreateAtAsc = 'INDEXER_ALLOCATION_SUMMARIES_MAX_CREATE_AT_ASC',
  IndexerAllocationSummariesMaxCreateAtDesc = 'INDEXER_ALLOCATION_SUMMARIES_MAX_CREATE_AT_DESC',
  IndexerAllocationSummariesMaxDeploymentIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_MAX_DEPLOYMENT_ID_ASC',
  IndexerAllocationSummariesMaxDeploymentIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_MAX_DEPLOYMENT_ID_DESC',
  IndexerAllocationSummariesMaxIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_MAX_ID_ASC',
  IndexerAllocationSummariesMaxIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_MAX_ID_DESC',
  IndexerAllocationSummariesMaxIndexerIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_MAX_INDEXER_ID_ASC',
  IndexerAllocationSummariesMaxIndexerIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_MAX_INDEXER_ID_DESC',
  IndexerAllocationSummariesMaxProjectIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_MAX_PROJECT_ID_ASC',
  IndexerAllocationSummariesMaxProjectIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_MAX_PROJECT_ID_DESC',
  IndexerAllocationSummariesMaxTotalAddedAsc = 'INDEXER_ALLOCATION_SUMMARIES_MAX_TOTAL_ADDED_ASC',
  IndexerAllocationSummariesMaxTotalAddedDesc = 'INDEXER_ALLOCATION_SUMMARIES_MAX_TOTAL_ADDED_DESC',
  IndexerAllocationSummariesMaxTotalAmountAsc = 'INDEXER_ALLOCATION_SUMMARIES_MAX_TOTAL_AMOUNT_ASC',
  IndexerAllocationSummariesMaxTotalAmountDesc = 'INDEXER_ALLOCATION_SUMMARIES_MAX_TOTAL_AMOUNT_DESC',
  IndexerAllocationSummariesMaxTotalRemovedAsc = 'INDEXER_ALLOCATION_SUMMARIES_MAX_TOTAL_REMOVED_ASC',
  IndexerAllocationSummariesMaxTotalRemovedDesc = 'INDEXER_ALLOCATION_SUMMARIES_MAX_TOTAL_REMOVED_DESC',
  IndexerAllocationSummariesMaxUpdateAtAsc = 'INDEXER_ALLOCATION_SUMMARIES_MAX_UPDATE_AT_ASC',
  IndexerAllocationSummariesMaxUpdateAtDesc = 'INDEXER_ALLOCATION_SUMMARIES_MAX_UPDATE_AT_DESC',
  IndexerAllocationSummariesMinBlockRangeAsc = 'INDEXER_ALLOCATION_SUMMARIES_MIN_BLOCK_RANGE_ASC',
  IndexerAllocationSummariesMinBlockRangeDesc = 'INDEXER_ALLOCATION_SUMMARIES_MIN_BLOCK_RANGE_DESC',
  IndexerAllocationSummariesMinCreateAtAsc = 'INDEXER_ALLOCATION_SUMMARIES_MIN_CREATE_AT_ASC',
  IndexerAllocationSummariesMinCreateAtDesc = 'INDEXER_ALLOCATION_SUMMARIES_MIN_CREATE_AT_DESC',
  IndexerAllocationSummariesMinDeploymentIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_MIN_DEPLOYMENT_ID_ASC',
  IndexerAllocationSummariesMinDeploymentIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_MIN_DEPLOYMENT_ID_DESC',
  IndexerAllocationSummariesMinIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_MIN_ID_ASC',
  IndexerAllocationSummariesMinIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_MIN_ID_DESC',
  IndexerAllocationSummariesMinIndexerIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_MIN_INDEXER_ID_ASC',
  IndexerAllocationSummariesMinIndexerIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_MIN_INDEXER_ID_DESC',
  IndexerAllocationSummariesMinProjectIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_MIN_PROJECT_ID_ASC',
  IndexerAllocationSummariesMinProjectIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_MIN_PROJECT_ID_DESC',
  IndexerAllocationSummariesMinTotalAddedAsc = 'INDEXER_ALLOCATION_SUMMARIES_MIN_TOTAL_ADDED_ASC',
  IndexerAllocationSummariesMinTotalAddedDesc = 'INDEXER_ALLOCATION_SUMMARIES_MIN_TOTAL_ADDED_DESC',
  IndexerAllocationSummariesMinTotalAmountAsc = 'INDEXER_ALLOCATION_SUMMARIES_MIN_TOTAL_AMOUNT_ASC',
  IndexerAllocationSummariesMinTotalAmountDesc = 'INDEXER_ALLOCATION_SUMMARIES_MIN_TOTAL_AMOUNT_DESC',
  IndexerAllocationSummariesMinTotalRemovedAsc = 'INDEXER_ALLOCATION_SUMMARIES_MIN_TOTAL_REMOVED_ASC',
  IndexerAllocationSummariesMinTotalRemovedDesc = 'INDEXER_ALLOCATION_SUMMARIES_MIN_TOTAL_REMOVED_DESC',
  IndexerAllocationSummariesMinUpdateAtAsc = 'INDEXER_ALLOCATION_SUMMARIES_MIN_UPDATE_AT_ASC',
  IndexerAllocationSummariesMinUpdateAtDesc = 'INDEXER_ALLOCATION_SUMMARIES_MIN_UPDATE_AT_DESC',
  IndexerAllocationSummariesStddevPopulationBlockRangeAsc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  IndexerAllocationSummariesStddevPopulationBlockRangeDesc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  IndexerAllocationSummariesStddevPopulationCreateAtAsc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_CREATE_AT_ASC',
  IndexerAllocationSummariesStddevPopulationCreateAtDesc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_CREATE_AT_DESC',
  IndexerAllocationSummariesStddevPopulationDeploymentIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_DEPLOYMENT_ID_ASC',
  IndexerAllocationSummariesStddevPopulationDeploymentIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_DEPLOYMENT_ID_DESC',
  IndexerAllocationSummariesStddevPopulationIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_ID_ASC',
  IndexerAllocationSummariesStddevPopulationIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_ID_DESC',
  IndexerAllocationSummariesStddevPopulationIndexerIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_INDEXER_ID_ASC',
  IndexerAllocationSummariesStddevPopulationIndexerIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_INDEXER_ID_DESC',
  IndexerAllocationSummariesStddevPopulationProjectIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_PROJECT_ID_ASC',
  IndexerAllocationSummariesStddevPopulationProjectIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_PROJECT_ID_DESC',
  IndexerAllocationSummariesStddevPopulationTotalAddedAsc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_TOTAL_ADDED_ASC',
  IndexerAllocationSummariesStddevPopulationTotalAddedDesc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_TOTAL_ADDED_DESC',
  IndexerAllocationSummariesStddevPopulationTotalAmountAsc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_TOTAL_AMOUNT_ASC',
  IndexerAllocationSummariesStddevPopulationTotalAmountDesc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_TOTAL_AMOUNT_DESC',
  IndexerAllocationSummariesStddevPopulationTotalRemovedAsc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_TOTAL_REMOVED_ASC',
  IndexerAllocationSummariesStddevPopulationTotalRemovedDesc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_TOTAL_REMOVED_DESC',
  IndexerAllocationSummariesStddevPopulationUpdateAtAsc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_UPDATE_AT_ASC',
  IndexerAllocationSummariesStddevPopulationUpdateAtDesc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_UPDATE_AT_DESC',
  IndexerAllocationSummariesStddevSampleBlockRangeAsc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  IndexerAllocationSummariesStddevSampleBlockRangeDesc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  IndexerAllocationSummariesStddevSampleCreateAtAsc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_CREATE_AT_ASC',
  IndexerAllocationSummariesStddevSampleCreateAtDesc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_CREATE_AT_DESC',
  IndexerAllocationSummariesStddevSampleDeploymentIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC',
  IndexerAllocationSummariesStddevSampleDeploymentIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC',
  IndexerAllocationSummariesStddevSampleIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_ID_ASC',
  IndexerAllocationSummariesStddevSampleIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_ID_DESC',
  IndexerAllocationSummariesStddevSampleIndexerIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_INDEXER_ID_ASC',
  IndexerAllocationSummariesStddevSampleIndexerIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_INDEXER_ID_DESC',
  IndexerAllocationSummariesStddevSampleProjectIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_PROJECT_ID_ASC',
  IndexerAllocationSummariesStddevSampleProjectIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_PROJECT_ID_DESC',
  IndexerAllocationSummariesStddevSampleTotalAddedAsc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_TOTAL_ADDED_ASC',
  IndexerAllocationSummariesStddevSampleTotalAddedDesc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_TOTAL_ADDED_DESC',
  IndexerAllocationSummariesStddevSampleTotalAmountAsc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_TOTAL_AMOUNT_ASC',
  IndexerAllocationSummariesStddevSampleTotalAmountDesc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_TOTAL_AMOUNT_DESC',
  IndexerAllocationSummariesStddevSampleTotalRemovedAsc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_TOTAL_REMOVED_ASC',
  IndexerAllocationSummariesStddevSampleTotalRemovedDesc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_TOTAL_REMOVED_DESC',
  IndexerAllocationSummariesStddevSampleUpdateAtAsc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_UPDATE_AT_ASC',
  IndexerAllocationSummariesStddevSampleUpdateAtDesc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_UPDATE_AT_DESC',
  IndexerAllocationSummariesSumBlockRangeAsc = 'INDEXER_ALLOCATION_SUMMARIES_SUM_BLOCK_RANGE_ASC',
  IndexerAllocationSummariesSumBlockRangeDesc = 'INDEXER_ALLOCATION_SUMMARIES_SUM_BLOCK_RANGE_DESC',
  IndexerAllocationSummariesSumCreateAtAsc = 'INDEXER_ALLOCATION_SUMMARIES_SUM_CREATE_AT_ASC',
  IndexerAllocationSummariesSumCreateAtDesc = 'INDEXER_ALLOCATION_SUMMARIES_SUM_CREATE_AT_DESC',
  IndexerAllocationSummariesSumDeploymentIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_SUM_DEPLOYMENT_ID_ASC',
  IndexerAllocationSummariesSumDeploymentIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_SUM_DEPLOYMENT_ID_DESC',
  IndexerAllocationSummariesSumIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_SUM_ID_ASC',
  IndexerAllocationSummariesSumIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_SUM_ID_DESC',
  IndexerAllocationSummariesSumIndexerIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_SUM_INDEXER_ID_ASC',
  IndexerAllocationSummariesSumIndexerIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_SUM_INDEXER_ID_DESC',
  IndexerAllocationSummariesSumProjectIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_SUM_PROJECT_ID_ASC',
  IndexerAllocationSummariesSumProjectIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_SUM_PROJECT_ID_DESC',
  IndexerAllocationSummariesSumTotalAddedAsc = 'INDEXER_ALLOCATION_SUMMARIES_SUM_TOTAL_ADDED_ASC',
  IndexerAllocationSummariesSumTotalAddedDesc = 'INDEXER_ALLOCATION_SUMMARIES_SUM_TOTAL_ADDED_DESC',
  IndexerAllocationSummariesSumTotalAmountAsc = 'INDEXER_ALLOCATION_SUMMARIES_SUM_TOTAL_AMOUNT_ASC',
  IndexerAllocationSummariesSumTotalAmountDesc = 'INDEXER_ALLOCATION_SUMMARIES_SUM_TOTAL_AMOUNT_DESC',
  IndexerAllocationSummariesSumTotalRemovedAsc = 'INDEXER_ALLOCATION_SUMMARIES_SUM_TOTAL_REMOVED_ASC',
  IndexerAllocationSummariesSumTotalRemovedDesc = 'INDEXER_ALLOCATION_SUMMARIES_SUM_TOTAL_REMOVED_DESC',
  IndexerAllocationSummariesSumUpdateAtAsc = 'INDEXER_ALLOCATION_SUMMARIES_SUM_UPDATE_AT_ASC',
  IndexerAllocationSummariesSumUpdateAtDesc = 'INDEXER_ALLOCATION_SUMMARIES_SUM_UPDATE_AT_DESC',
  IndexerAllocationSummariesVariancePopulationBlockRangeAsc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  IndexerAllocationSummariesVariancePopulationBlockRangeDesc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  IndexerAllocationSummariesVariancePopulationCreateAtAsc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_CREATE_AT_ASC',
  IndexerAllocationSummariesVariancePopulationCreateAtDesc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_CREATE_AT_DESC',
  IndexerAllocationSummariesVariancePopulationDeploymentIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC',
  IndexerAllocationSummariesVariancePopulationDeploymentIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC',
  IndexerAllocationSummariesVariancePopulationIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_ID_ASC',
  IndexerAllocationSummariesVariancePopulationIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_ID_DESC',
  IndexerAllocationSummariesVariancePopulationIndexerIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_INDEXER_ID_ASC',
  IndexerAllocationSummariesVariancePopulationIndexerIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_INDEXER_ID_DESC',
  IndexerAllocationSummariesVariancePopulationProjectIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_PROJECT_ID_ASC',
  IndexerAllocationSummariesVariancePopulationProjectIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_PROJECT_ID_DESC',
  IndexerAllocationSummariesVariancePopulationTotalAddedAsc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_TOTAL_ADDED_ASC',
  IndexerAllocationSummariesVariancePopulationTotalAddedDesc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_TOTAL_ADDED_DESC',
  IndexerAllocationSummariesVariancePopulationTotalAmountAsc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_TOTAL_AMOUNT_ASC',
  IndexerAllocationSummariesVariancePopulationTotalAmountDesc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_TOTAL_AMOUNT_DESC',
  IndexerAllocationSummariesVariancePopulationTotalRemovedAsc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_TOTAL_REMOVED_ASC',
  IndexerAllocationSummariesVariancePopulationTotalRemovedDesc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_TOTAL_REMOVED_DESC',
  IndexerAllocationSummariesVariancePopulationUpdateAtAsc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_UPDATE_AT_ASC',
  IndexerAllocationSummariesVariancePopulationUpdateAtDesc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_UPDATE_AT_DESC',
  IndexerAllocationSummariesVarianceSampleBlockRangeAsc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  IndexerAllocationSummariesVarianceSampleBlockRangeDesc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  IndexerAllocationSummariesVarianceSampleCreateAtAsc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_CREATE_AT_ASC',
  IndexerAllocationSummariesVarianceSampleCreateAtDesc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_CREATE_AT_DESC',
  IndexerAllocationSummariesVarianceSampleDeploymentIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC',
  IndexerAllocationSummariesVarianceSampleDeploymentIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC',
  IndexerAllocationSummariesVarianceSampleIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_ID_ASC',
  IndexerAllocationSummariesVarianceSampleIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_ID_DESC',
  IndexerAllocationSummariesVarianceSampleIndexerIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  IndexerAllocationSummariesVarianceSampleIndexerIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  IndexerAllocationSummariesVarianceSampleProjectIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_PROJECT_ID_ASC',
  IndexerAllocationSummariesVarianceSampleProjectIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_PROJECT_ID_DESC',
  IndexerAllocationSummariesVarianceSampleTotalAddedAsc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_TOTAL_ADDED_ASC',
  IndexerAllocationSummariesVarianceSampleTotalAddedDesc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_TOTAL_ADDED_DESC',
  IndexerAllocationSummariesVarianceSampleTotalAmountAsc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_TOTAL_AMOUNT_ASC',
  IndexerAllocationSummariesVarianceSampleTotalAmountDesc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_TOTAL_AMOUNT_DESC',
  IndexerAllocationSummariesVarianceSampleTotalRemovedAsc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_TOTAL_REMOVED_ASC',
  IndexerAllocationSummariesVarianceSampleTotalRemovedDesc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_TOTAL_REMOVED_DESC',
  IndexerAllocationSummariesVarianceSampleUpdateAtAsc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_UPDATE_AT_ASC',
  IndexerAllocationSummariesVarianceSampleUpdateAtDesc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_UPDATE_AT_DESC',
  IndexerDeploymentsByDeploymentIdCountAsc = 'INDEXER_DEPLOYMENTS_BY_DEPLOYMENT_ID__COUNT_ASC',
  IndexerDeploymentsByDeploymentIdCountDesc = 'INDEXER_DEPLOYMENTS_BY_DEPLOYMENT_ID__COUNT_DESC',
  IndexerMissedLaborsAverageBlockRangeAsc = 'INDEXER_MISSED_LABORS_AVERAGE_BLOCK_RANGE_ASC',
  IndexerMissedLaborsAverageBlockRangeDesc = 'INDEXER_MISSED_LABORS_AVERAGE_BLOCK_RANGE_DESC',
  IndexerMissedLaborsAverageCreateAtAsc = 'INDEXER_MISSED_LABORS_AVERAGE_CREATE_AT_ASC',
  IndexerMissedLaborsAverageCreateAtDesc = 'INDEXER_MISSED_LABORS_AVERAGE_CREATE_AT_DESC',
  IndexerMissedLaborsAverageDeploymentIdAsc = 'INDEXER_MISSED_LABORS_AVERAGE_DEPLOYMENT_ID_ASC',
  IndexerMissedLaborsAverageDeploymentIdDesc = 'INDEXER_MISSED_LABORS_AVERAGE_DEPLOYMENT_ID_DESC',
  IndexerMissedLaborsAverageEraIdxAsc = 'INDEXER_MISSED_LABORS_AVERAGE_ERA_IDX_ASC',
  IndexerMissedLaborsAverageEraIdxDesc = 'INDEXER_MISSED_LABORS_AVERAGE_ERA_IDX_DESC',
  IndexerMissedLaborsAverageIdAsc = 'INDEXER_MISSED_LABORS_AVERAGE_ID_ASC',
  IndexerMissedLaborsAverageIdDesc = 'INDEXER_MISSED_LABORS_AVERAGE_ID_DESC',
  IndexerMissedLaborsAverageIndexerIdAsc = 'INDEXER_MISSED_LABORS_AVERAGE_INDEXER_ID_ASC',
  IndexerMissedLaborsAverageIndexerIdDesc = 'INDEXER_MISSED_LABORS_AVERAGE_INDEXER_ID_DESC',
  IndexerMissedLaborsAverageMissedLaborAsc = 'INDEXER_MISSED_LABORS_AVERAGE_MISSED_LABOR_ASC',
  IndexerMissedLaborsAverageMissedLaborDesc = 'INDEXER_MISSED_LABORS_AVERAGE_MISSED_LABOR_DESC',
  IndexerMissedLaborsByDeploymentIdCountAsc = 'INDEXER_MISSED_LABORS_BY_DEPLOYMENT_ID__COUNT_ASC',
  IndexerMissedLaborsByDeploymentIdCountDesc = 'INDEXER_MISSED_LABORS_BY_DEPLOYMENT_ID__COUNT_DESC',
  IndexerMissedLaborsCountAsc = 'INDEXER_MISSED_LABORS_COUNT_ASC',
  IndexerMissedLaborsCountDesc = 'INDEXER_MISSED_LABORS_COUNT_DESC',
  IndexerMissedLaborsDistinctCountBlockRangeAsc = 'INDEXER_MISSED_LABORS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  IndexerMissedLaborsDistinctCountBlockRangeDesc = 'INDEXER_MISSED_LABORS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  IndexerMissedLaborsDistinctCountCreateAtAsc = 'INDEXER_MISSED_LABORS_DISTINCT_COUNT_CREATE_AT_ASC',
  IndexerMissedLaborsDistinctCountCreateAtDesc = 'INDEXER_MISSED_LABORS_DISTINCT_COUNT_CREATE_AT_DESC',
  IndexerMissedLaborsDistinctCountDeploymentIdAsc = 'INDEXER_MISSED_LABORS_DISTINCT_COUNT_DEPLOYMENT_ID_ASC',
  IndexerMissedLaborsDistinctCountDeploymentIdDesc = 'INDEXER_MISSED_LABORS_DISTINCT_COUNT_DEPLOYMENT_ID_DESC',
  IndexerMissedLaborsDistinctCountEraIdxAsc = 'INDEXER_MISSED_LABORS_DISTINCT_COUNT_ERA_IDX_ASC',
  IndexerMissedLaborsDistinctCountEraIdxDesc = 'INDEXER_MISSED_LABORS_DISTINCT_COUNT_ERA_IDX_DESC',
  IndexerMissedLaborsDistinctCountIdAsc = 'INDEXER_MISSED_LABORS_DISTINCT_COUNT_ID_ASC',
  IndexerMissedLaborsDistinctCountIdDesc = 'INDEXER_MISSED_LABORS_DISTINCT_COUNT_ID_DESC',
  IndexerMissedLaborsDistinctCountIndexerIdAsc = 'INDEXER_MISSED_LABORS_DISTINCT_COUNT_INDEXER_ID_ASC',
  IndexerMissedLaborsDistinctCountIndexerIdDesc = 'INDEXER_MISSED_LABORS_DISTINCT_COUNT_INDEXER_ID_DESC',
  IndexerMissedLaborsDistinctCountMissedLaborAsc = 'INDEXER_MISSED_LABORS_DISTINCT_COUNT_MISSED_LABOR_ASC',
  IndexerMissedLaborsDistinctCountMissedLaborDesc = 'INDEXER_MISSED_LABORS_DISTINCT_COUNT_MISSED_LABOR_DESC',
  IndexerMissedLaborsMaxBlockRangeAsc = 'INDEXER_MISSED_LABORS_MAX_BLOCK_RANGE_ASC',
  IndexerMissedLaborsMaxBlockRangeDesc = 'INDEXER_MISSED_LABORS_MAX_BLOCK_RANGE_DESC',
  IndexerMissedLaborsMaxCreateAtAsc = 'INDEXER_MISSED_LABORS_MAX_CREATE_AT_ASC',
  IndexerMissedLaborsMaxCreateAtDesc = 'INDEXER_MISSED_LABORS_MAX_CREATE_AT_DESC',
  IndexerMissedLaborsMaxDeploymentIdAsc = 'INDEXER_MISSED_LABORS_MAX_DEPLOYMENT_ID_ASC',
  IndexerMissedLaborsMaxDeploymentIdDesc = 'INDEXER_MISSED_LABORS_MAX_DEPLOYMENT_ID_DESC',
  IndexerMissedLaborsMaxEraIdxAsc = 'INDEXER_MISSED_LABORS_MAX_ERA_IDX_ASC',
  IndexerMissedLaborsMaxEraIdxDesc = 'INDEXER_MISSED_LABORS_MAX_ERA_IDX_DESC',
  IndexerMissedLaborsMaxIdAsc = 'INDEXER_MISSED_LABORS_MAX_ID_ASC',
  IndexerMissedLaborsMaxIdDesc = 'INDEXER_MISSED_LABORS_MAX_ID_DESC',
  IndexerMissedLaborsMaxIndexerIdAsc = 'INDEXER_MISSED_LABORS_MAX_INDEXER_ID_ASC',
  IndexerMissedLaborsMaxIndexerIdDesc = 'INDEXER_MISSED_LABORS_MAX_INDEXER_ID_DESC',
  IndexerMissedLaborsMaxMissedLaborAsc = 'INDEXER_MISSED_LABORS_MAX_MISSED_LABOR_ASC',
  IndexerMissedLaborsMaxMissedLaborDesc = 'INDEXER_MISSED_LABORS_MAX_MISSED_LABOR_DESC',
  IndexerMissedLaborsMinBlockRangeAsc = 'INDEXER_MISSED_LABORS_MIN_BLOCK_RANGE_ASC',
  IndexerMissedLaborsMinBlockRangeDesc = 'INDEXER_MISSED_LABORS_MIN_BLOCK_RANGE_DESC',
  IndexerMissedLaborsMinCreateAtAsc = 'INDEXER_MISSED_LABORS_MIN_CREATE_AT_ASC',
  IndexerMissedLaborsMinCreateAtDesc = 'INDEXER_MISSED_LABORS_MIN_CREATE_AT_DESC',
  IndexerMissedLaborsMinDeploymentIdAsc = 'INDEXER_MISSED_LABORS_MIN_DEPLOYMENT_ID_ASC',
  IndexerMissedLaborsMinDeploymentIdDesc = 'INDEXER_MISSED_LABORS_MIN_DEPLOYMENT_ID_DESC',
  IndexerMissedLaborsMinEraIdxAsc = 'INDEXER_MISSED_LABORS_MIN_ERA_IDX_ASC',
  IndexerMissedLaborsMinEraIdxDesc = 'INDEXER_MISSED_LABORS_MIN_ERA_IDX_DESC',
  IndexerMissedLaborsMinIdAsc = 'INDEXER_MISSED_LABORS_MIN_ID_ASC',
  IndexerMissedLaborsMinIdDesc = 'INDEXER_MISSED_LABORS_MIN_ID_DESC',
  IndexerMissedLaborsMinIndexerIdAsc = 'INDEXER_MISSED_LABORS_MIN_INDEXER_ID_ASC',
  IndexerMissedLaborsMinIndexerIdDesc = 'INDEXER_MISSED_LABORS_MIN_INDEXER_ID_DESC',
  IndexerMissedLaborsMinMissedLaborAsc = 'INDEXER_MISSED_LABORS_MIN_MISSED_LABOR_ASC',
  IndexerMissedLaborsMinMissedLaborDesc = 'INDEXER_MISSED_LABORS_MIN_MISSED_LABOR_DESC',
  IndexerMissedLaborsStddevPopulationBlockRangeAsc = 'INDEXER_MISSED_LABORS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  IndexerMissedLaborsStddevPopulationBlockRangeDesc = 'INDEXER_MISSED_LABORS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  IndexerMissedLaborsStddevPopulationCreateAtAsc = 'INDEXER_MISSED_LABORS_STDDEV_POPULATION_CREATE_AT_ASC',
  IndexerMissedLaborsStddevPopulationCreateAtDesc = 'INDEXER_MISSED_LABORS_STDDEV_POPULATION_CREATE_AT_DESC',
  IndexerMissedLaborsStddevPopulationDeploymentIdAsc = 'INDEXER_MISSED_LABORS_STDDEV_POPULATION_DEPLOYMENT_ID_ASC',
  IndexerMissedLaborsStddevPopulationDeploymentIdDesc = 'INDEXER_MISSED_LABORS_STDDEV_POPULATION_DEPLOYMENT_ID_DESC',
  IndexerMissedLaborsStddevPopulationEraIdxAsc = 'INDEXER_MISSED_LABORS_STDDEV_POPULATION_ERA_IDX_ASC',
  IndexerMissedLaborsStddevPopulationEraIdxDesc = 'INDEXER_MISSED_LABORS_STDDEV_POPULATION_ERA_IDX_DESC',
  IndexerMissedLaborsStddevPopulationIdAsc = 'INDEXER_MISSED_LABORS_STDDEV_POPULATION_ID_ASC',
  IndexerMissedLaborsStddevPopulationIdDesc = 'INDEXER_MISSED_LABORS_STDDEV_POPULATION_ID_DESC',
  IndexerMissedLaborsStddevPopulationIndexerIdAsc = 'INDEXER_MISSED_LABORS_STDDEV_POPULATION_INDEXER_ID_ASC',
  IndexerMissedLaborsStddevPopulationIndexerIdDesc = 'INDEXER_MISSED_LABORS_STDDEV_POPULATION_INDEXER_ID_DESC',
  IndexerMissedLaborsStddevPopulationMissedLaborAsc = 'INDEXER_MISSED_LABORS_STDDEV_POPULATION_MISSED_LABOR_ASC',
  IndexerMissedLaborsStddevPopulationMissedLaborDesc = 'INDEXER_MISSED_LABORS_STDDEV_POPULATION_MISSED_LABOR_DESC',
  IndexerMissedLaborsStddevSampleBlockRangeAsc = 'INDEXER_MISSED_LABORS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  IndexerMissedLaborsStddevSampleBlockRangeDesc = 'INDEXER_MISSED_LABORS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  IndexerMissedLaborsStddevSampleCreateAtAsc = 'INDEXER_MISSED_LABORS_STDDEV_SAMPLE_CREATE_AT_ASC',
  IndexerMissedLaborsStddevSampleCreateAtDesc = 'INDEXER_MISSED_LABORS_STDDEV_SAMPLE_CREATE_AT_DESC',
  IndexerMissedLaborsStddevSampleDeploymentIdAsc = 'INDEXER_MISSED_LABORS_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC',
  IndexerMissedLaborsStddevSampleDeploymentIdDesc = 'INDEXER_MISSED_LABORS_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC',
  IndexerMissedLaborsStddevSampleEraIdxAsc = 'INDEXER_MISSED_LABORS_STDDEV_SAMPLE_ERA_IDX_ASC',
  IndexerMissedLaborsStddevSampleEraIdxDesc = 'INDEXER_MISSED_LABORS_STDDEV_SAMPLE_ERA_IDX_DESC',
  IndexerMissedLaborsStddevSampleIdAsc = 'INDEXER_MISSED_LABORS_STDDEV_SAMPLE_ID_ASC',
  IndexerMissedLaborsStddevSampleIdDesc = 'INDEXER_MISSED_LABORS_STDDEV_SAMPLE_ID_DESC',
  IndexerMissedLaborsStddevSampleIndexerIdAsc = 'INDEXER_MISSED_LABORS_STDDEV_SAMPLE_INDEXER_ID_ASC',
  IndexerMissedLaborsStddevSampleIndexerIdDesc = 'INDEXER_MISSED_LABORS_STDDEV_SAMPLE_INDEXER_ID_DESC',
  IndexerMissedLaborsStddevSampleMissedLaborAsc = 'INDEXER_MISSED_LABORS_STDDEV_SAMPLE_MISSED_LABOR_ASC',
  IndexerMissedLaborsStddevSampleMissedLaborDesc = 'INDEXER_MISSED_LABORS_STDDEV_SAMPLE_MISSED_LABOR_DESC',
  IndexerMissedLaborsSumBlockRangeAsc = 'INDEXER_MISSED_LABORS_SUM_BLOCK_RANGE_ASC',
  IndexerMissedLaborsSumBlockRangeDesc = 'INDEXER_MISSED_LABORS_SUM_BLOCK_RANGE_DESC',
  IndexerMissedLaborsSumCreateAtAsc = 'INDEXER_MISSED_LABORS_SUM_CREATE_AT_ASC',
  IndexerMissedLaborsSumCreateAtDesc = 'INDEXER_MISSED_LABORS_SUM_CREATE_AT_DESC',
  IndexerMissedLaborsSumDeploymentIdAsc = 'INDEXER_MISSED_LABORS_SUM_DEPLOYMENT_ID_ASC',
  IndexerMissedLaborsSumDeploymentIdDesc = 'INDEXER_MISSED_LABORS_SUM_DEPLOYMENT_ID_DESC',
  IndexerMissedLaborsSumEraIdxAsc = 'INDEXER_MISSED_LABORS_SUM_ERA_IDX_ASC',
  IndexerMissedLaborsSumEraIdxDesc = 'INDEXER_MISSED_LABORS_SUM_ERA_IDX_DESC',
  IndexerMissedLaborsSumIdAsc = 'INDEXER_MISSED_LABORS_SUM_ID_ASC',
  IndexerMissedLaborsSumIdDesc = 'INDEXER_MISSED_LABORS_SUM_ID_DESC',
  IndexerMissedLaborsSumIndexerIdAsc = 'INDEXER_MISSED_LABORS_SUM_INDEXER_ID_ASC',
  IndexerMissedLaborsSumIndexerIdDesc = 'INDEXER_MISSED_LABORS_SUM_INDEXER_ID_DESC',
  IndexerMissedLaborsSumMissedLaborAsc = 'INDEXER_MISSED_LABORS_SUM_MISSED_LABOR_ASC',
  IndexerMissedLaborsSumMissedLaborDesc = 'INDEXER_MISSED_LABORS_SUM_MISSED_LABOR_DESC',
  IndexerMissedLaborsVariancePopulationBlockRangeAsc = 'INDEXER_MISSED_LABORS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  IndexerMissedLaborsVariancePopulationBlockRangeDesc = 'INDEXER_MISSED_LABORS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  IndexerMissedLaborsVariancePopulationCreateAtAsc = 'INDEXER_MISSED_LABORS_VARIANCE_POPULATION_CREATE_AT_ASC',
  IndexerMissedLaborsVariancePopulationCreateAtDesc = 'INDEXER_MISSED_LABORS_VARIANCE_POPULATION_CREATE_AT_DESC',
  IndexerMissedLaborsVariancePopulationDeploymentIdAsc = 'INDEXER_MISSED_LABORS_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC',
  IndexerMissedLaborsVariancePopulationDeploymentIdDesc = 'INDEXER_MISSED_LABORS_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC',
  IndexerMissedLaborsVariancePopulationEraIdxAsc = 'INDEXER_MISSED_LABORS_VARIANCE_POPULATION_ERA_IDX_ASC',
  IndexerMissedLaborsVariancePopulationEraIdxDesc = 'INDEXER_MISSED_LABORS_VARIANCE_POPULATION_ERA_IDX_DESC',
  IndexerMissedLaborsVariancePopulationIdAsc = 'INDEXER_MISSED_LABORS_VARIANCE_POPULATION_ID_ASC',
  IndexerMissedLaborsVariancePopulationIdDesc = 'INDEXER_MISSED_LABORS_VARIANCE_POPULATION_ID_DESC',
  IndexerMissedLaborsVariancePopulationIndexerIdAsc = 'INDEXER_MISSED_LABORS_VARIANCE_POPULATION_INDEXER_ID_ASC',
  IndexerMissedLaborsVariancePopulationIndexerIdDesc = 'INDEXER_MISSED_LABORS_VARIANCE_POPULATION_INDEXER_ID_DESC',
  IndexerMissedLaborsVariancePopulationMissedLaborAsc = 'INDEXER_MISSED_LABORS_VARIANCE_POPULATION_MISSED_LABOR_ASC',
  IndexerMissedLaborsVariancePopulationMissedLaborDesc = 'INDEXER_MISSED_LABORS_VARIANCE_POPULATION_MISSED_LABOR_DESC',
  IndexerMissedLaborsVarianceSampleBlockRangeAsc = 'INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  IndexerMissedLaborsVarianceSampleBlockRangeDesc = 'INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  IndexerMissedLaborsVarianceSampleCreateAtAsc = 'INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_CREATE_AT_ASC',
  IndexerMissedLaborsVarianceSampleCreateAtDesc = 'INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_CREATE_AT_DESC',
  IndexerMissedLaborsVarianceSampleDeploymentIdAsc = 'INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC',
  IndexerMissedLaborsVarianceSampleDeploymentIdDesc = 'INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC',
  IndexerMissedLaborsVarianceSampleEraIdxAsc = 'INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_ERA_IDX_ASC',
  IndexerMissedLaborsVarianceSampleEraIdxDesc = 'INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_ERA_IDX_DESC',
  IndexerMissedLaborsVarianceSampleIdAsc = 'INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_ID_ASC',
  IndexerMissedLaborsVarianceSampleIdDesc = 'INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_ID_DESC',
  IndexerMissedLaborsVarianceSampleIndexerIdAsc = 'INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  IndexerMissedLaborsVarianceSampleIndexerIdDesc = 'INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  IndexerMissedLaborsVarianceSampleMissedLaborAsc = 'INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_MISSED_LABOR_ASC',
  IndexerMissedLaborsVarianceSampleMissedLaborDesc = 'INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_MISSED_LABOR_DESC',
  LastEventAsc = 'LAST_EVENT_ASC',
  LastEventDesc = 'LAST_EVENT_DESC',
  MetadataAsc = 'METADATA_ASC',
  MetadataDesc = 'METADATA_DESC',
  Natural = 'NATURAL',
  OffersAverageAcceptedAsc = 'OFFERS_AVERAGE_ACCEPTED_ASC',
  OffersAverageAcceptedDesc = 'OFFERS_AVERAGE_ACCEPTED_DESC',
  OffersAverageBlockRangeAsc = 'OFFERS_AVERAGE_BLOCK_RANGE_ASC',
  OffersAverageBlockRangeDesc = 'OFFERS_AVERAGE_BLOCK_RANGE_DESC',
  OffersAverageConsumerAsc = 'OFFERS_AVERAGE_CONSUMER_ASC',
  OffersAverageConsumerDesc = 'OFFERS_AVERAGE_CONSUMER_DESC',
  OffersAverageCreatedBlockAsc = 'OFFERS_AVERAGE_CREATED_BLOCK_ASC',
  OffersAverageCreatedBlockDesc = 'OFFERS_AVERAGE_CREATED_BLOCK_DESC',
  OffersAverageDeploymentIdAsc = 'OFFERS_AVERAGE_DEPLOYMENT_ID_ASC',
  OffersAverageDeploymentIdDesc = 'OFFERS_AVERAGE_DEPLOYMENT_ID_DESC',
  OffersAverageDepositAsc = 'OFFERS_AVERAGE_DEPOSIT_ASC',
  OffersAverageDepositDesc = 'OFFERS_AVERAGE_DEPOSIT_DESC',
  OffersAverageExpireDateAsc = 'OFFERS_AVERAGE_EXPIRE_DATE_ASC',
  OffersAverageExpireDateDesc = 'OFFERS_AVERAGE_EXPIRE_DATE_DESC',
  OffersAverageIdAsc = 'OFFERS_AVERAGE_ID_ASC',
  OffersAverageIdDesc = 'OFFERS_AVERAGE_ID_DESC',
  OffersAverageLastEventAsc = 'OFFERS_AVERAGE_LAST_EVENT_ASC',
  OffersAverageLastEventDesc = 'OFFERS_AVERAGE_LAST_EVENT_DESC',
  OffersAverageLimitAsc = 'OFFERS_AVERAGE_LIMIT_ASC',
  OffersAverageLimitDesc = 'OFFERS_AVERAGE_LIMIT_DESC',
  OffersAverageMinimumAcceptHeightAsc = 'OFFERS_AVERAGE_MINIMUM_ACCEPT_HEIGHT_ASC',
  OffersAverageMinimumAcceptHeightDesc = 'OFFERS_AVERAGE_MINIMUM_ACCEPT_HEIGHT_DESC',
  OffersAverageMinimumStakingAmountAsc = 'OFFERS_AVERAGE_MINIMUM_STAKING_AMOUNT_ASC',
  OffersAverageMinimumStakingAmountDesc = 'OFFERS_AVERAGE_MINIMUM_STAKING_AMOUNT_DESC',
  OffersAveragePlanTemplateIdAsc = 'OFFERS_AVERAGE_PLAN_TEMPLATE_ID_ASC',
  OffersAveragePlanTemplateIdDesc = 'OFFERS_AVERAGE_PLAN_TEMPLATE_ID_DESC',
  OffersAverageReachLimitAsc = 'OFFERS_AVERAGE_REACH_LIMIT_ASC',
  OffersAverageReachLimitDesc = 'OFFERS_AVERAGE_REACH_LIMIT_DESC',
  OffersAverageWithdrawnAsc = 'OFFERS_AVERAGE_WITHDRAWN_ASC',
  OffersAverageWithdrawnDesc = 'OFFERS_AVERAGE_WITHDRAWN_DESC',
  OffersAverageWithdrawPenaltyAsc = 'OFFERS_AVERAGE_WITHDRAW_PENALTY_ASC',
  OffersAverageWithdrawPenaltyDesc = 'OFFERS_AVERAGE_WITHDRAW_PENALTY_DESC',
  OffersByDeploymentIdCountAsc = 'OFFERS_BY_DEPLOYMENT_ID__COUNT_ASC',
  OffersByDeploymentIdCountDesc = 'OFFERS_BY_DEPLOYMENT_ID__COUNT_DESC',
  OffersCountAsc = 'OFFERS_COUNT_ASC',
  OffersCountDesc = 'OFFERS_COUNT_DESC',
  OffersDistinctCountAcceptedAsc = 'OFFERS_DISTINCT_COUNT_ACCEPTED_ASC',
  OffersDistinctCountAcceptedDesc = 'OFFERS_DISTINCT_COUNT_ACCEPTED_DESC',
  OffersDistinctCountBlockRangeAsc = 'OFFERS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  OffersDistinctCountBlockRangeDesc = 'OFFERS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  OffersDistinctCountConsumerAsc = 'OFFERS_DISTINCT_COUNT_CONSUMER_ASC',
  OffersDistinctCountConsumerDesc = 'OFFERS_DISTINCT_COUNT_CONSUMER_DESC',
  OffersDistinctCountCreatedBlockAsc = 'OFFERS_DISTINCT_COUNT_CREATED_BLOCK_ASC',
  OffersDistinctCountCreatedBlockDesc = 'OFFERS_DISTINCT_COUNT_CREATED_BLOCK_DESC',
  OffersDistinctCountDeploymentIdAsc = 'OFFERS_DISTINCT_COUNT_DEPLOYMENT_ID_ASC',
  OffersDistinctCountDeploymentIdDesc = 'OFFERS_DISTINCT_COUNT_DEPLOYMENT_ID_DESC',
  OffersDistinctCountDepositAsc = 'OFFERS_DISTINCT_COUNT_DEPOSIT_ASC',
  OffersDistinctCountDepositDesc = 'OFFERS_DISTINCT_COUNT_DEPOSIT_DESC',
  OffersDistinctCountExpireDateAsc = 'OFFERS_DISTINCT_COUNT_EXPIRE_DATE_ASC',
  OffersDistinctCountExpireDateDesc = 'OFFERS_DISTINCT_COUNT_EXPIRE_DATE_DESC',
  OffersDistinctCountIdAsc = 'OFFERS_DISTINCT_COUNT_ID_ASC',
  OffersDistinctCountIdDesc = 'OFFERS_DISTINCT_COUNT_ID_DESC',
  OffersDistinctCountLastEventAsc = 'OFFERS_DISTINCT_COUNT_LAST_EVENT_ASC',
  OffersDistinctCountLastEventDesc = 'OFFERS_DISTINCT_COUNT_LAST_EVENT_DESC',
  OffersDistinctCountLimitAsc = 'OFFERS_DISTINCT_COUNT_LIMIT_ASC',
  OffersDistinctCountLimitDesc = 'OFFERS_DISTINCT_COUNT_LIMIT_DESC',
  OffersDistinctCountMinimumAcceptHeightAsc = 'OFFERS_DISTINCT_COUNT_MINIMUM_ACCEPT_HEIGHT_ASC',
  OffersDistinctCountMinimumAcceptHeightDesc = 'OFFERS_DISTINCT_COUNT_MINIMUM_ACCEPT_HEIGHT_DESC',
  OffersDistinctCountMinimumStakingAmountAsc = 'OFFERS_DISTINCT_COUNT_MINIMUM_STAKING_AMOUNT_ASC',
  OffersDistinctCountMinimumStakingAmountDesc = 'OFFERS_DISTINCT_COUNT_MINIMUM_STAKING_AMOUNT_DESC',
  OffersDistinctCountPlanTemplateIdAsc = 'OFFERS_DISTINCT_COUNT_PLAN_TEMPLATE_ID_ASC',
  OffersDistinctCountPlanTemplateIdDesc = 'OFFERS_DISTINCT_COUNT_PLAN_TEMPLATE_ID_DESC',
  OffersDistinctCountReachLimitAsc = 'OFFERS_DISTINCT_COUNT_REACH_LIMIT_ASC',
  OffersDistinctCountReachLimitDesc = 'OFFERS_DISTINCT_COUNT_REACH_LIMIT_DESC',
  OffersDistinctCountWithdrawnAsc = 'OFFERS_DISTINCT_COUNT_WITHDRAWN_ASC',
  OffersDistinctCountWithdrawnDesc = 'OFFERS_DISTINCT_COUNT_WITHDRAWN_DESC',
  OffersDistinctCountWithdrawPenaltyAsc = 'OFFERS_DISTINCT_COUNT_WITHDRAW_PENALTY_ASC',
  OffersDistinctCountWithdrawPenaltyDesc = 'OFFERS_DISTINCT_COUNT_WITHDRAW_PENALTY_DESC',
  OffersMaxAcceptedAsc = 'OFFERS_MAX_ACCEPTED_ASC',
  OffersMaxAcceptedDesc = 'OFFERS_MAX_ACCEPTED_DESC',
  OffersMaxBlockRangeAsc = 'OFFERS_MAX_BLOCK_RANGE_ASC',
  OffersMaxBlockRangeDesc = 'OFFERS_MAX_BLOCK_RANGE_DESC',
  OffersMaxConsumerAsc = 'OFFERS_MAX_CONSUMER_ASC',
  OffersMaxConsumerDesc = 'OFFERS_MAX_CONSUMER_DESC',
  OffersMaxCreatedBlockAsc = 'OFFERS_MAX_CREATED_BLOCK_ASC',
  OffersMaxCreatedBlockDesc = 'OFFERS_MAX_CREATED_BLOCK_DESC',
  OffersMaxDeploymentIdAsc = 'OFFERS_MAX_DEPLOYMENT_ID_ASC',
  OffersMaxDeploymentIdDesc = 'OFFERS_MAX_DEPLOYMENT_ID_DESC',
  OffersMaxDepositAsc = 'OFFERS_MAX_DEPOSIT_ASC',
  OffersMaxDepositDesc = 'OFFERS_MAX_DEPOSIT_DESC',
  OffersMaxExpireDateAsc = 'OFFERS_MAX_EXPIRE_DATE_ASC',
  OffersMaxExpireDateDesc = 'OFFERS_MAX_EXPIRE_DATE_DESC',
  OffersMaxIdAsc = 'OFFERS_MAX_ID_ASC',
  OffersMaxIdDesc = 'OFFERS_MAX_ID_DESC',
  OffersMaxLastEventAsc = 'OFFERS_MAX_LAST_EVENT_ASC',
  OffersMaxLastEventDesc = 'OFFERS_MAX_LAST_EVENT_DESC',
  OffersMaxLimitAsc = 'OFFERS_MAX_LIMIT_ASC',
  OffersMaxLimitDesc = 'OFFERS_MAX_LIMIT_DESC',
  OffersMaxMinimumAcceptHeightAsc = 'OFFERS_MAX_MINIMUM_ACCEPT_HEIGHT_ASC',
  OffersMaxMinimumAcceptHeightDesc = 'OFFERS_MAX_MINIMUM_ACCEPT_HEIGHT_DESC',
  OffersMaxMinimumStakingAmountAsc = 'OFFERS_MAX_MINIMUM_STAKING_AMOUNT_ASC',
  OffersMaxMinimumStakingAmountDesc = 'OFFERS_MAX_MINIMUM_STAKING_AMOUNT_DESC',
  OffersMaxPlanTemplateIdAsc = 'OFFERS_MAX_PLAN_TEMPLATE_ID_ASC',
  OffersMaxPlanTemplateIdDesc = 'OFFERS_MAX_PLAN_TEMPLATE_ID_DESC',
  OffersMaxReachLimitAsc = 'OFFERS_MAX_REACH_LIMIT_ASC',
  OffersMaxReachLimitDesc = 'OFFERS_MAX_REACH_LIMIT_DESC',
  OffersMaxWithdrawnAsc = 'OFFERS_MAX_WITHDRAWN_ASC',
  OffersMaxWithdrawnDesc = 'OFFERS_MAX_WITHDRAWN_DESC',
  OffersMaxWithdrawPenaltyAsc = 'OFFERS_MAX_WITHDRAW_PENALTY_ASC',
  OffersMaxWithdrawPenaltyDesc = 'OFFERS_MAX_WITHDRAW_PENALTY_DESC',
  OffersMinAcceptedAsc = 'OFFERS_MIN_ACCEPTED_ASC',
  OffersMinAcceptedDesc = 'OFFERS_MIN_ACCEPTED_DESC',
  OffersMinBlockRangeAsc = 'OFFERS_MIN_BLOCK_RANGE_ASC',
  OffersMinBlockRangeDesc = 'OFFERS_MIN_BLOCK_RANGE_DESC',
  OffersMinConsumerAsc = 'OFFERS_MIN_CONSUMER_ASC',
  OffersMinConsumerDesc = 'OFFERS_MIN_CONSUMER_DESC',
  OffersMinCreatedBlockAsc = 'OFFERS_MIN_CREATED_BLOCK_ASC',
  OffersMinCreatedBlockDesc = 'OFFERS_MIN_CREATED_BLOCK_DESC',
  OffersMinDeploymentIdAsc = 'OFFERS_MIN_DEPLOYMENT_ID_ASC',
  OffersMinDeploymentIdDesc = 'OFFERS_MIN_DEPLOYMENT_ID_DESC',
  OffersMinDepositAsc = 'OFFERS_MIN_DEPOSIT_ASC',
  OffersMinDepositDesc = 'OFFERS_MIN_DEPOSIT_DESC',
  OffersMinExpireDateAsc = 'OFFERS_MIN_EXPIRE_DATE_ASC',
  OffersMinExpireDateDesc = 'OFFERS_MIN_EXPIRE_DATE_DESC',
  OffersMinIdAsc = 'OFFERS_MIN_ID_ASC',
  OffersMinIdDesc = 'OFFERS_MIN_ID_DESC',
  OffersMinLastEventAsc = 'OFFERS_MIN_LAST_EVENT_ASC',
  OffersMinLastEventDesc = 'OFFERS_MIN_LAST_EVENT_DESC',
  OffersMinLimitAsc = 'OFFERS_MIN_LIMIT_ASC',
  OffersMinLimitDesc = 'OFFERS_MIN_LIMIT_DESC',
  OffersMinMinimumAcceptHeightAsc = 'OFFERS_MIN_MINIMUM_ACCEPT_HEIGHT_ASC',
  OffersMinMinimumAcceptHeightDesc = 'OFFERS_MIN_MINIMUM_ACCEPT_HEIGHT_DESC',
  OffersMinMinimumStakingAmountAsc = 'OFFERS_MIN_MINIMUM_STAKING_AMOUNT_ASC',
  OffersMinMinimumStakingAmountDesc = 'OFFERS_MIN_MINIMUM_STAKING_AMOUNT_DESC',
  OffersMinPlanTemplateIdAsc = 'OFFERS_MIN_PLAN_TEMPLATE_ID_ASC',
  OffersMinPlanTemplateIdDesc = 'OFFERS_MIN_PLAN_TEMPLATE_ID_DESC',
  OffersMinReachLimitAsc = 'OFFERS_MIN_REACH_LIMIT_ASC',
  OffersMinReachLimitDesc = 'OFFERS_MIN_REACH_LIMIT_DESC',
  OffersMinWithdrawnAsc = 'OFFERS_MIN_WITHDRAWN_ASC',
  OffersMinWithdrawnDesc = 'OFFERS_MIN_WITHDRAWN_DESC',
  OffersMinWithdrawPenaltyAsc = 'OFFERS_MIN_WITHDRAW_PENALTY_ASC',
  OffersMinWithdrawPenaltyDesc = 'OFFERS_MIN_WITHDRAW_PENALTY_DESC',
  OffersStddevPopulationAcceptedAsc = 'OFFERS_STDDEV_POPULATION_ACCEPTED_ASC',
  OffersStddevPopulationAcceptedDesc = 'OFFERS_STDDEV_POPULATION_ACCEPTED_DESC',
  OffersStddevPopulationBlockRangeAsc = 'OFFERS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  OffersStddevPopulationBlockRangeDesc = 'OFFERS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  OffersStddevPopulationConsumerAsc = 'OFFERS_STDDEV_POPULATION_CONSUMER_ASC',
  OffersStddevPopulationConsumerDesc = 'OFFERS_STDDEV_POPULATION_CONSUMER_DESC',
  OffersStddevPopulationCreatedBlockAsc = 'OFFERS_STDDEV_POPULATION_CREATED_BLOCK_ASC',
  OffersStddevPopulationCreatedBlockDesc = 'OFFERS_STDDEV_POPULATION_CREATED_BLOCK_DESC',
  OffersStddevPopulationDeploymentIdAsc = 'OFFERS_STDDEV_POPULATION_DEPLOYMENT_ID_ASC',
  OffersStddevPopulationDeploymentIdDesc = 'OFFERS_STDDEV_POPULATION_DEPLOYMENT_ID_DESC',
  OffersStddevPopulationDepositAsc = 'OFFERS_STDDEV_POPULATION_DEPOSIT_ASC',
  OffersStddevPopulationDepositDesc = 'OFFERS_STDDEV_POPULATION_DEPOSIT_DESC',
  OffersStddevPopulationExpireDateAsc = 'OFFERS_STDDEV_POPULATION_EXPIRE_DATE_ASC',
  OffersStddevPopulationExpireDateDesc = 'OFFERS_STDDEV_POPULATION_EXPIRE_DATE_DESC',
  OffersStddevPopulationIdAsc = 'OFFERS_STDDEV_POPULATION_ID_ASC',
  OffersStddevPopulationIdDesc = 'OFFERS_STDDEV_POPULATION_ID_DESC',
  OffersStddevPopulationLastEventAsc = 'OFFERS_STDDEV_POPULATION_LAST_EVENT_ASC',
  OffersStddevPopulationLastEventDesc = 'OFFERS_STDDEV_POPULATION_LAST_EVENT_DESC',
  OffersStddevPopulationLimitAsc = 'OFFERS_STDDEV_POPULATION_LIMIT_ASC',
  OffersStddevPopulationLimitDesc = 'OFFERS_STDDEV_POPULATION_LIMIT_DESC',
  OffersStddevPopulationMinimumAcceptHeightAsc = 'OFFERS_STDDEV_POPULATION_MINIMUM_ACCEPT_HEIGHT_ASC',
  OffersStddevPopulationMinimumAcceptHeightDesc = 'OFFERS_STDDEV_POPULATION_MINIMUM_ACCEPT_HEIGHT_DESC',
  OffersStddevPopulationMinimumStakingAmountAsc = 'OFFERS_STDDEV_POPULATION_MINIMUM_STAKING_AMOUNT_ASC',
  OffersStddevPopulationMinimumStakingAmountDesc = 'OFFERS_STDDEV_POPULATION_MINIMUM_STAKING_AMOUNT_DESC',
  OffersStddevPopulationPlanTemplateIdAsc = 'OFFERS_STDDEV_POPULATION_PLAN_TEMPLATE_ID_ASC',
  OffersStddevPopulationPlanTemplateIdDesc = 'OFFERS_STDDEV_POPULATION_PLAN_TEMPLATE_ID_DESC',
  OffersStddevPopulationReachLimitAsc = 'OFFERS_STDDEV_POPULATION_REACH_LIMIT_ASC',
  OffersStddevPopulationReachLimitDesc = 'OFFERS_STDDEV_POPULATION_REACH_LIMIT_DESC',
  OffersStddevPopulationWithdrawnAsc = 'OFFERS_STDDEV_POPULATION_WITHDRAWN_ASC',
  OffersStddevPopulationWithdrawnDesc = 'OFFERS_STDDEV_POPULATION_WITHDRAWN_DESC',
  OffersStddevPopulationWithdrawPenaltyAsc = 'OFFERS_STDDEV_POPULATION_WITHDRAW_PENALTY_ASC',
  OffersStddevPopulationWithdrawPenaltyDesc = 'OFFERS_STDDEV_POPULATION_WITHDRAW_PENALTY_DESC',
  OffersStddevSampleAcceptedAsc = 'OFFERS_STDDEV_SAMPLE_ACCEPTED_ASC',
  OffersStddevSampleAcceptedDesc = 'OFFERS_STDDEV_SAMPLE_ACCEPTED_DESC',
  OffersStddevSampleBlockRangeAsc = 'OFFERS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  OffersStddevSampleBlockRangeDesc = 'OFFERS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  OffersStddevSampleConsumerAsc = 'OFFERS_STDDEV_SAMPLE_CONSUMER_ASC',
  OffersStddevSampleConsumerDesc = 'OFFERS_STDDEV_SAMPLE_CONSUMER_DESC',
  OffersStddevSampleCreatedBlockAsc = 'OFFERS_STDDEV_SAMPLE_CREATED_BLOCK_ASC',
  OffersStddevSampleCreatedBlockDesc = 'OFFERS_STDDEV_SAMPLE_CREATED_BLOCK_DESC',
  OffersStddevSampleDeploymentIdAsc = 'OFFERS_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC',
  OffersStddevSampleDeploymentIdDesc = 'OFFERS_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC',
  OffersStddevSampleDepositAsc = 'OFFERS_STDDEV_SAMPLE_DEPOSIT_ASC',
  OffersStddevSampleDepositDesc = 'OFFERS_STDDEV_SAMPLE_DEPOSIT_DESC',
  OffersStddevSampleExpireDateAsc = 'OFFERS_STDDEV_SAMPLE_EXPIRE_DATE_ASC',
  OffersStddevSampleExpireDateDesc = 'OFFERS_STDDEV_SAMPLE_EXPIRE_DATE_DESC',
  OffersStddevSampleIdAsc = 'OFFERS_STDDEV_SAMPLE_ID_ASC',
  OffersStddevSampleIdDesc = 'OFFERS_STDDEV_SAMPLE_ID_DESC',
  OffersStddevSampleLastEventAsc = 'OFFERS_STDDEV_SAMPLE_LAST_EVENT_ASC',
  OffersStddevSampleLastEventDesc = 'OFFERS_STDDEV_SAMPLE_LAST_EVENT_DESC',
  OffersStddevSampleLimitAsc = 'OFFERS_STDDEV_SAMPLE_LIMIT_ASC',
  OffersStddevSampleLimitDesc = 'OFFERS_STDDEV_SAMPLE_LIMIT_DESC',
  OffersStddevSampleMinimumAcceptHeightAsc = 'OFFERS_STDDEV_SAMPLE_MINIMUM_ACCEPT_HEIGHT_ASC',
  OffersStddevSampleMinimumAcceptHeightDesc = 'OFFERS_STDDEV_SAMPLE_MINIMUM_ACCEPT_HEIGHT_DESC',
  OffersStddevSampleMinimumStakingAmountAsc = 'OFFERS_STDDEV_SAMPLE_MINIMUM_STAKING_AMOUNT_ASC',
  OffersStddevSampleMinimumStakingAmountDesc = 'OFFERS_STDDEV_SAMPLE_MINIMUM_STAKING_AMOUNT_DESC',
  OffersStddevSamplePlanTemplateIdAsc = 'OFFERS_STDDEV_SAMPLE_PLAN_TEMPLATE_ID_ASC',
  OffersStddevSamplePlanTemplateIdDesc = 'OFFERS_STDDEV_SAMPLE_PLAN_TEMPLATE_ID_DESC',
  OffersStddevSampleReachLimitAsc = 'OFFERS_STDDEV_SAMPLE_REACH_LIMIT_ASC',
  OffersStddevSampleReachLimitDesc = 'OFFERS_STDDEV_SAMPLE_REACH_LIMIT_DESC',
  OffersStddevSampleWithdrawnAsc = 'OFFERS_STDDEV_SAMPLE_WITHDRAWN_ASC',
  OffersStddevSampleWithdrawnDesc = 'OFFERS_STDDEV_SAMPLE_WITHDRAWN_DESC',
  OffersStddevSampleWithdrawPenaltyAsc = 'OFFERS_STDDEV_SAMPLE_WITHDRAW_PENALTY_ASC',
  OffersStddevSampleWithdrawPenaltyDesc = 'OFFERS_STDDEV_SAMPLE_WITHDRAW_PENALTY_DESC',
  OffersSumAcceptedAsc = 'OFFERS_SUM_ACCEPTED_ASC',
  OffersSumAcceptedDesc = 'OFFERS_SUM_ACCEPTED_DESC',
  OffersSumBlockRangeAsc = 'OFFERS_SUM_BLOCK_RANGE_ASC',
  OffersSumBlockRangeDesc = 'OFFERS_SUM_BLOCK_RANGE_DESC',
  OffersSumConsumerAsc = 'OFFERS_SUM_CONSUMER_ASC',
  OffersSumConsumerDesc = 'OFFERS_SUM_CONSUMER_DESC',
  OffersSumCreatedBlockAsc = 'OFFERS_SUM_CREATED_BLOCK_ASC',
  OffersSumCreatedBlockDesc = 'OFFERS_SUM_CREATED_BLOCK_DESC',
  OffersSumDeploymentIdAsc = 'OFFERS_SUM_DEPLOYMENT_ID_ASC',
  OffersSumDeploymentIdDesc = 'OFFERS_SUM_DEPLOYMENT_ID_DESC',
  OffersSumDepositAsc = 'OFFERS_SUM_DEPOSIT_ASC',
  OffersSumDepositDesc = 'OFFERS_SUM_DEPOSIT_DESC',
  OffersSumExpireDateAsc = 'OFFERS_SUM_EXPIRE_DATE_ASC',
  OffersSumExpireDateDesc = 'OFFERS_SUM_EXPIRE_DATE_DESC',
  OffersSumIdAsc = 'OFFERS_SUM_ID_ASC',
  OffersSumIdDesc = 'OFFERS_SUM_ID_DESC',
  OffersSumLastEventAsc = 'OFFERS_SUM_LAST_EVENT_ASC',
  OffersSumLastEventDesc = 'OFFERS_SUM_LAST_EVENT_DESC',
  OffersSumLimitAsc = 'OFFERS_SUM_LIMIT_ASC',
  OffersSumLimitDesc = 'OFFERS_SUM_LIMIT_DESC',
  OffersSumMinimumAcceptHeightAsc = 'OFFERS_SUM_MINIMUM_ACCEPT_HEIGHT_ASC',
  OffersSumMinimumAcceptHeightDesc = 'OFFERS_SUM_MINIMUM_ACCEPT_HEIGHT_DESC',
  OffersSumMinimumStakingAmountAsc = 'OFFERS_SUM_MINIMUM_STAKING_AMOUNT_ASC',
  OffersSumMinimumStakingAmountDesc = 'OFFERS_SUM_MINIMUM_STAKING_AMOUNT_DESC',
  OffersSumPlanTemplateIdAsc = 'OFFERS_SUM_PLAN_TEMPLATE_ID_ASC',
  OffersSumPlanTemplateIdDesc = 'OFFERS_SUM_PLAN_TEMPLATE_ID_DESC',
  OffersSumReachLimitAsc = 'OFFERS_SUM_REACH_LIMIT_ASC',
  OffersSumReachLimitDesc = 'OFFERS_SUM_REACH_LIMIT_DESC',
  OffersSumWithdrawnAsc = 'OFFERS_SUM_WITHDRAWN_ASC',
  OffersSumWithdrawnDesc = 'OFFERS_SUM_WITHDRAWN_DESC',
  OffersSumWithdrawPenaltyAsc = 'OFFERS_SUM_WITHDRAW_PENALTY_ASC',
  OffersSumWithdrawPenaltyDesc = 'OFFERS_SUM_WITHDRAW_PENALTY_DESC',
  OffersVariancePopulationAcceptedAsc = 'OFFERS_VARIANCE_POPULATION_ACCEPTED_ASC',
  OffersVariancePopulationAcceptedDesc = 'OFFERS_VARIANCE_POPULATION_ACCEPTED_DESC',
  OffersVariancePopulationBlockRangeAsc = 'OFFERS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  OffersVariancePopulationBlockRangeDesc = 'OFFERS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  OffersVariancePopulationConsumerAsc = 'OFFERS_VARIANCE_POPULATION_CONSUMER_ASC',
  OffersVariancePopulationConsumerDesc = 'OFFERS_VARIANCE_POPULATION_CONSUMER_DESC',
  OffersVariancePopulationCreatedBlockAsc = 'OFFERS_VARIANCE_POPULATION_CREATED_BLOCK_ASC',
  OffersVariancePopulationCreatedBlockDesc = 'OFFERS_VARIANCE_POPULATION_CREATED_BLOCK_DESC',
  OffersVariancePopulationDeploymentIdAsc = 'OFFERS_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC',
  OffersVariancePopulationDeploymentIdDesc = 'OFFERS_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC',
  OffersVariancePopulationDepositAsc = 'OFFERS_VARIANCE_POPULATION_DEPOSIT_ASC',
  OffersVariancePopulationDepositDesc = 'OFFERS_VARIANCE_POPULATION_DEPOSIT_DESC',
  OffersVariancePopulationExpireDateAsc = 'OFFERS_VARIANCE_POPULATION_EXPIRE_DATE_ASC',
  OffersVariancePopulationExpireDateDesc = 'OFFERS_VARIANCE_POPULATION_EXPIRE_DATE_DESC',
  OffersVariancePopulationIdAsc = 'OFFERS_VARIANCE_POPULATION_ID_ASC',
  OffersVariancePopulationIdDesc = 'OFFERS_VARIANCE_POPULATION_ID_DESC',
  OffersVariancePopulationLastEventAsc = 'OFFERS_VARIANCE_POPULATION_LAST_EVENT_ASC',
  OffersVariancePopulationLastEventDesc = 'OFFERS_VARIANCE_POPULATION_LAST_EVENT_DESC',
  OffersVariancePopulationLimitAsc = 'OFFERS_VARIANCE_POPULATION_LIMIT_ASC',
  OffersVariancePopulationLimitDesc = 'OFFERS_VARIANCE_POPULATION_LIMIT_DESC',
  OffersVariancePopulationMinimumAcceptHeightAsc = 'OFFERS_VARIANCE_POPULATION_MINIMUM_ACCEPT_HEIGHT_ASC',
  OffersVariancePopulationMinimumAcceptHeightDesc = 'OFFERS_VARIANCE_POPULATION_MINIMUM_ACCEPT_HEIGHT_DESC',
  OffersVariancePopulationMinimumStakingAmountAsc = 'OFFERS_VARIANCE_POPULATION_MINIMUM_STAKING_AMOUNT_ASC',
  OffersVariancePopulationMinimumStakingAmountDesc = 'OFFERS_VARIANCE_POPULATION_MINIMUM_STAKING_AMOUNT_DESC',
  OffersVariancePopulationPlanTemplateIdAsc = 'OFFERS_VARIANCE_POPULATION_PLAN_TEMPLATE_ID_ASC',
  OffersVariancePopulationPlanTemplateIdDesc = 'OFFERS_VARIANCE_POPULATION_PLAN_TEMPLATE_ID_DESC',
  OffersVariancePopulationReachLimitAsc = 'OFFERS_VARIANCE_POPULATION_REACH_LIMIT_ASC',
  OffersVariancePopulationReachLimitDesc = 'OFFERS_VARIANCE_POPULATION_REACH_LIMIT_DESC',
  OffersVariancePopulationWithdrawnAsc = 'OFFERS_VARIANCE_POPULATION_WITHDRAWN_ASC',
  OffersVariancePopulationWithdrawnDesc = 'OFFERS_VARIANCE_POPULATION_WITHDRAWN_DESC',
  OffersVariancePopulationWithdrawPenaltyAsc = 'OFFERS_VARIANCE_POPULATION_WITHDRAW_PENALTY_ASC',
  OffersVariancePopulationWithdrawPenaltyDesc = 'OFFERS_VARIANCE_POPULATION_WITHDRAW_PENALTY_DESC',
  OffersVarianceSampleAcceptedAsc = 'OFFERS_VARIANCE_SAMPLE_ACCEPTED_ASC',
  OffersVarianceSampleAcceptedDesc = 'OFFERS_VARIANCE_SAMPLE_ACCEPTED_DESC',
  OffersVarianceSampleBlockRangeAsc = 'OFFERS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  OffersVarianceSampleBlockRangeDesc = 'OFFERS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  OffersVarianceSampleConsumerAsc = 'OFFERS_VARIANCE_SAMPLE_CONSUMER_ASC',
  OffersVarianceSampleConsumerDesc = 'OFFERS_VARIANCE_SAMPLE_CONSUMER_DESC',
  OffersVarianceSampleCreatedBlockAsc = 'OFFERS_VARIANCE_SAMPLE_CREATED_BLOCK_ASC',
  OffersVarianceSampleCreatedBlockDesc = 'OFFERS_VARIANCE_SAMPLE_CREATED_BLOCK_DESC',
  OffersVarianceSampleDeploymentIdAsc = 'OFFERS_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC',
  OffersVarianceSampleDeploymentIdDesc = 'OFFERS_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC',
  OffersVarianceSampleDepositAsc = 'OFFERS_VARIANCE_SAMPLE_DEPOSIT_ASC',
  OffersVarianceSampleDepositDesc = 'OFFERS_VARIANCE_SAMPLE_DEPOSIT_DESC',
  OffersVarianceSampleExpireDateAsc = 'OFFERS_VARIANCE_SAMPLE_EXPIRE_DATE_ASC',
  OffersVarianceSampleExpireDateDesc = 'OFFERS_VARIANCE_SAMPLE_EXPIRE_DATE_DESC',
  OffersVarianceSampleIdAsc = 'OFFERS_VARIANCE_SAMPLE_ID_ASC',
  OffersVarianceSampleIdDesc = 'OFFERS_VARIANCE_SAMPLE_ID_DESC',
  OffersVarianceSampleLastEventAsc = 'OFFERS_VARIANCE_SAMPLE_LAST_EVENT_ASC',
  OffersVarianceSampleLastEventDesc = 'OFFERS_VARIANCE_SAMPLE_LAST_EVENT_DESC',
  OffersVarianceSampleLimitAsc = 'OFFERS_VARIANCE_SAMPLE_LIMIT_ASC',
  OffersVarianceSampleLimitDesc = 'OFFERS_VARIANCE_SAMPLE_LIMIT_DESC',
  OffersVarianceSampleMinimumAcceptHeightAsc = 'OFFERS_VARIANCE_SAMPLE_MINIMUM_ACCEPT_HEIGHT_ASC',
  OffersVarianceSampleMinimumAcceptHeightDesc = 'OFFERS_VARIANCE_SAMPLE_MINIMUM_ACCEPT_HEIGHT_DESC',
  OffersVarianceSampleMinimumStakingAmountAsc = 'OFFERS_VARIANCE_SAMPLE_MINIMUM_STAKING_AMOUNT_ASC',
  OffersVarianceSampleMinimumStakingAmountDesc = 'OFFERS_VARIANCE_SAMPLE_MINIMUM_STAKING_AMOUNT_DESC',
  OffersVarianceSamplePlanTemplateIdAsc = 'OFFERS_VARIANCE_SAMPLE_PLAN_TEMPLATE_ID_ASC',
  OffersVarianceSamplePlanTemplateIdDesc = 'OFFERS_VARIANCE_SAMPLE_PLAN_TEMPLATE_ID_DESC',
  OffersVarianceSampleReachLimitAsc = 'OFFERS_VARIANCE_SAMPLE_REACH_LIMIT_ASC',
  OffersVarianceSampleReachLimitDesc = 'OFFERS_VARIANCE_SAMPLE_REACH_LIMIT_DESC',
  OffersVarianceSampleWithdrawnAsc = 'OFFERS_VARIANCE_SAMPLE_WITHDRAWN_ASC',
  OffersVarianceSampleWithdrawnDesc = 'OFFERS_VARIANCE_SAMPLE_WITHDRAWN_DESC',
  OffersVarianceSampleWithdrawPenaltyAsc = 'OFFERS_VARIANCE_SAMPLE_WITHDRAW_PENALTY_ASC',
  OffersVarianceSampleWithdrawPenaltyDesc = 'OFFERS_VARIANCE_SAMPLE_WITHDRAW_PENALTY_DESC',
  PlansAverageActiveAsc = 'PLANS_AVERAGE_ACTIVE_ASC',
  PlansAverageActiveDesc = 'PLANS_AVERAGE_ACTIVE_DESC',
  PlansAverageBlockRangeAsc = 'PLANS_AVERAGE_BLOCK_RANGE_ASC',
  PlansAverageBlockRangeDesc = 'PLANS_AVERAGE_BLOCK_RANGE_DESC',
  PlansAverageCreatedBlockAsc = 'PLANS_AVERAGE_CREATED_BLOCK_ASC',
  PlansAverageCreatedBlockDesc = 'PLANS_AVERAGE_CREATED_BLOCK_DESC',
  PlansAverageCreatorAsc = 'PLANS_AVERAGE_CREATOR_ASC',
  PlansAverageCreatorDesc = 'PLANS_AVERAGE_CREATOR_DESC',
  PlansAverageDeploymentIdAsc = 'PLANS_AVERAGE_DEPLOYMENT_ID_ASC',
  PlansAverageDeploymentIdDesc = 'PLANS_AVERAGE_DEPLOYMENT_ID_DESC',
  PlansAverageIdAsc = 'PLANS_AVERAGE_ID_ASC',
  PlansAverageIdDesc = 'PLANS_AVERAGE_ID_DESC',
  PlansAverageLastEventAsc = 'PLANS_AVERAGE_LAST_EVENT_ASC',
  PlansAverageLastEventDesc = 'PLANS_AVERAGE_LAST_EVENT_DESC',
  PlansAveragePlanTemplateIdAsc = 'PLANS_AVERAGE_PLAN_TEMPLATE_ID_ASC',
  PlansAveragePlanTemplateIdDesc = 'PLANS_AVERAGE_PLAN_TEMPLATE_ID_DESC',
  PlansAveragePriceAsc = 'PLANS_AVERAGE_PRICE_ASC',
  PlansAveragePriceDesc = 'PLANS_AVERAGE_PRICE_DESC',
  PlansByDeploymentIdCountAsc = 'PLANS_BY_DEPLOYMENT_ID__COUNT_ASC',
  PlansByDeploymentIdCountDesc = 'PLANS_BY_DEPLOYMENT_ID__COUNT_DESC',
  PlansCountAsc = 'PLANS_COUNT_ASC',
  PlansCountDesc = 'PLANS_COUNT_DESC',
  PlansDistinctCountActiveAsc = 'PLANS_DISTINCT_COUNT_ACTIVE_ASC',
  PlansDistinctCountActiveDesc = 'PLANS_DISTINCT_COUNT_ACTIVE_DESC',
  PlansDistinctCountBlockRangeAsc = 'PLANS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  PlansDistinctCountBlockRangeDesc = 'PLANS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  PlansDistinctCountCreatedBlockAsc = 'PLANS_DISTINCT_COUNT_CREATED_BLOCK_ASC',
  PlansDistinctCountCreatedBlockDesc = 'PLANS_DISTINCT_COUNT_CREATED_BLOCK_DESC',
  PlansDistinctCountCreatorAsc = 'PLANS_DISTINCT_COUNT_CREATOR_ASC',
  PlansDistinctCountCreatorDesc = 'PLANS_DISTINCT_COUNT_CREATOR_DESC',
  PlansDistinctCountDeploymentIdAsc = 'PLANS_DISTINCT_COUNT_DEPLOYMENT_ID_ASC',
  PlansDistinctCountDeploymentIdDesc = 'PLANS_DISTINCT_COUNT_DEPLOYMENT_ID_DESC',
  PlansDistinctCountIdAsc = 'PLANS_DISTINCT_COUNT_ID_ASC',
  PlansDistinctCountIdDesc = 'PLANS_DISTINCT_COUNT_ID_DESC',
  PlansDistinctCountLastEventAsc = 'PLANS_DISTINCT_COUNT_LAST_EVENT_ASC',
  PlansDistinctCountLastEventDesc = 'PLANS_DISTINCT_COUNT_LAST_EVENT_DESC',
  PlansDistinctCountPlanTemplateIdAsc = 'PLANS_DISTINCT_COUNT_PLAN_TEMPLATE_ID_ASC',
  PlansDistinctCountPlanTemplateIdDesc = 'PLANS_DISTINCT_COUNT_PLAN_TEMPLATE_ID_DESC',
  PlansDistinctCountPriceAsc = 'PLANS_DISTINCT_COUNT_PRICE_ASC',
  PlansDistinctCountPriceDesc = 'PLANS_DISTINCT_COUNT_PRICE_DESC',
  PlansMaxActiveAsc = 'PLANS_MAX_ACTIVE_ASC',
  PlansMaxActiveDesc = 'PLANS_MAX_ACTIVE_DESC',
  PlansMaxBlockRangeAsc = 'PLANS_MAX_BLOCK_RANGE_ASC',
  PlansMaxBlockRangeDesc = 'PLANS_MAX_BLOCK_RANGE_DESC',
  PlansMaxCreatedBlockAsc = 'PLANS_MAX_CREATED_BLOCK_ASC',
  PlansMaxCreatedBlockDesc = 'PLANS_MAX_CREATED_BLOCK_DESC',
  PlansMaxCreatorAsc = 'PLANS_MAX_CREATOR_ASC',
  PlansMaxCreatorDesc = 'PLANS_MAX_CREATOR_DESC',
  PlansMaxDeploymentIdAsc = 'PLANS_MAX_DEPLOYMENT_ID_ASC',
  PlansMaxDeploymentIdDesc = 'PLANS_MAX_DEPLOYMENT_ID_DESC',
  PlansMaxIdAsc = 'PLANS_MAX_ID_ASC',
  PlansMaxIdDesc = 'PLANS_MAX_ID_DESC',
  PlansMaxLastEventAsc = 'PLANS_MAX_LAST_EVENT_ASC',
  PlansMaxLastEventDesc = 'PLANS_MAX_LAST_EVENT_DESC',
  PlansMaxPlanTemplateIdAsc = 'PLANS_MAX_PLAN_TEMPLATE_ID_ASC',
  PlansMaxPlanTemplateIdDesc = 'PLANS_MAX_PLAN_TEMPLATE_ID_DESC',
  PlansMaxPriceAsc = 'PLANS_MAX_PRICE_ASC',
  PlansMaxPriceDesc = 'PLANS_MAX_PRICE_DESC',
  PlansMinActiveAsc = 'PLANS_MIN_ACTIVE_ASC',
  PlansMinActiveDesc = 'PLANS_MIN_ACTIVE_DESC',
  PlansMinBlockRangeAsc = 'PLANS_MIN_BLOCK_RANGE_ASC',
  PlansMinBlockRangeDesc = 'PLANS_MIN_BLOCK_RANGE_DESC',
  PlansMinCreatedBlockAsc = 'PLANS_MIN_CREATED_BLOCK_ASC',
  PlansMinCreatedBlockDesc = 'PLANS_MIN_CREATED_BLOCK_DESC',
  PlansMinCreatorAsc = 'PLANS_MIN_CREATOR_ASC',
  PlansMinCreatorDesc = 'PLANS_MIN_CREATOR_DESC',
  PlansMinDeploymentIdAsc = 'PLANS_MIN_DEPLOYMENT_ID_ASC',
  PlansMinDeploymentIdDesc = 'PLANS_MIN_DEPLOYMENT_ID_DESC',
  PlansMinIdAsc = 'PLANS_MIN_ID_ASC',
  PlansMinIdDesc = 'PLANS_MIN_ID_DESC',
  PlansMinLastEventAsc = 'PLANS_MIN_LAST_EVENT_ASC',
  PlansMinLastEventDesc = 'PLANS_MIN_LAST_EVENT_DESC',
  PlansMinPlanTemplateIdAsc = 'PLANS_MIN_PLAN_TEMPLATE_ID_ASC',
  PlansMinPlanTemplateIdDesc = 'PLANS_MIN_PLAN_TEMPLATE_ID_DESC',
  PlansMinPriceAsc = 'PLANS_MIN_PRICE_ASC',
  PlansMinPriceDesc = 'PLANS_MIN_PRICE_DESC',
  PlansStddevPopulationActiveAsc = 'PLANS_STDDEV_POPULATION_ACTIVE_ASC',
  PlansStddevPopulationActiveDesc = 'PLANS_STDDEV_POPULATION_ACTIVE_DESC',
  PlansStddevPopulationBlockRangeAsc = 'PLANS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  PlansStddevPopulationBlockRangeDesc = 'PLANS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  PlansStddevPopulationCreatedBlockAsc = 'PLANS_STDDEV_POPULATION_CREATED_BLOCK_ASC',
  PlansStddevPopulationCreatedBlockDesc = 'PLANS_STDDEV_POPULATION_CREATED_BLOCK_DESC',
  PlansStddevPopulationCreatorAsc = 'PLANS_STDDEV_POPULATION_CREATOR_ASC',
  PlansStddevPopulationCreatorDesc = 'PLANS_STDDEV_POPULATION_CREATOR_DESC',
  PlansStddevPopulationDeploymentIdAsc = 'PLANS_STDDEV_POPULATION_DEPLOYMENT_ID_ASC',
  PlansStddevPopulationDeploymentIdDesc = 'PLANS_STDDEV_POPULATION_DEPLOYMENT_ID_DESC',
  PlansStddevPopulationIdAsc = 'PLANS_STDDEV_POPULATION_ID_ASC',
  PlansStddevPopulationIdDesc = 'PLANS_STDDEV_POPULATION_ID_DESC',
  PlansStddevPopulationLastEventAsc = 'PLANS_STDDEV_POPULATION_LAST_EVENT_ASC',
  PlansStddevPopulationLastEventDesc = 'PLANS_STDDEV_POPULATION_LAST_EVENT_DESC',
  PlansStddevPopulationPlanTemplateIdAsc = 'PLANS_STDDEV_POPULATION_PLAN_TEMPLATE_ID_ASC',
  PlansStddevPopulationPlanTemplateIdDesc = 'PLANS_STDDEV_POPULATION_PLAN_TEMPLATE_ID_DESC',
  PlansStddevPopulationPriceAsc = 'PLANS_STDDEV_POPULATION_PRICE_ASC',
  PlansStddevPopulationPriceDesc = 'PLANS_STDDEV_POPULATION_PRICE_DESC',
  PlansStddevSampleActiveAsc = 'PLANS_STDDEV_SAMPLE_ACTIVE_ASC',
  PlansStddevSampleActiveDesc = 'PLANS_STDDEV_SAMPLE_ACTIVE_DESC',
  PlansStddevSampleBlockRangeAsc = 'PLANS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  PlansStddevSampleBlockRangeDesc = 'PLANS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  PlansStddevSampleCreatedBlockAsc = 'PLANS_STDDEV_SAMPLE_CREATED_BLOCK_ASC',
  PlansStddevSampleCreatedBlockDesc = 'PLANS_STDDEV_SAMPLE_CREATED_BLOCK_DESC',
  PlansStddevSampleCreatorAsc = 'PLANS_STDDEV_SAMPLE_CREATOR_ASC',
  PlansStddevSampleCreatorDesc = 'PLANS_STDDEV_SAMPLE_CREATOR_DESC',
  PlansStddevSampleDeploymentIdAsc = 'PLANS_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC',
  PlansStddevSampleDeploymentIdDesc = 'PLANS_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC',
  PlansStddevSampleIdAsc = 'PLANS_STDDEV_SAMPLE_ID_ASC',
  PlansStddevSampleIdDesc = 'PLANS_STDDEV_SAMPLE_ID_DESC',
  PlansStddevSampleLastEventAsc = 'PLANS_STDDEV_SAMPLE_LAST_EVENT_ASC',
  PlansStddevSampleLastEventDesc = 'PLANS_STDDEV_SAMPLE_LAST_EVENT_DESC',
  PlansStddevSamplePlanTemplateIdAsc = 'PLANS_STDDEV_SAMPLE_PLAN_TEMPLATE_ID_ASC',
  PlansStddevSamplePlanTemplateIdDesc = 'PLANS_STDDEV_SAMPLE_PLAN_TEMPLATE_ID_DESC',
  PlansStddevSamplePriceAsc = 'PLANS_STDDEV_SAMPLE_PRICE_ASC',
  PlansStddevSamplePriceDesc = 'PLANS_STDDEV_SAMPLE_PRICE_DESC',
  PlansSumActiveAsc = 'PLANS_SUM_ACTIVE_ASC',
  PlansSumActiveDesc = 'PLANS_SUM_ACTIVE_DESC',
  PlansSumBlockRangeAsc = 'PLANS_SUM_BLOCK_RANGE_ASC',
  PlansSumBlockRangeDesc = 'PLANS_SUM_BLOCK_RANGE_DESC',
  PlansSumCreatedBlockAsc = 'PLANS_SUM_CREATED_BLOCK_ASC',
  PlansSumCreatedBlockDesc = 'PLANS_SUM_CREATED_BLOCK_DESC',
  PlansSumCreatorAsc = 'PLANS_SUM_CREATOR_ASC',
  PlansSumCreatorDesc = 'PLANS_SUM_CREATOR_DESC',
  PlansSumDeploymentIdAsc = 'PLANS_SUM_DEPLOYMENT_ID_ASC',
  PlansSumDeploymentIdDesc = 'PLANS_SUM_DEPLOYMENT_ID_DESC',
  PlansSumIdAsc = 'PLANS_SUM_ID_ASC',
  PlansSumIdDesc = 'PLANS_SUM_ID_DESC',
  PlansSumLastEventAsc = 'PLANS_SUM_LAST_EVENT_ASC',
  PlansSumLastEventDesc = 'PLANS_SUM_LAST_EVENT_DESC',
  PlansSumPlanTemplateIdAsc = 'PLANS_SUM_PLAN_TEMPLATE_ID_ASC',
  PlansSumPlanTemplateIdDesc = 'PLANS_SUM_PLAN_TEMPLATE_ID_DESC',
  PlansSumPriceAsc = 'PLANS_SUM_PRICE_ASC',
  PlansSumPriceDesc = 'PLANS_SUM_PRICE_DESC',
  PlansVariancePopulationActiveAsc = 'PLANS_VARIANCE_POPULATION_ACTIVE_ASC',
  PlansVariancePopulationActiveDesc = 'PLANS_VARIANCE_POPULATION_ACTIVE_DESC',
  PlansVariancePopulationBlockRangeAsc = 'PLANS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  PlansVariancePopulationBlockRangeDesc = 'PLANS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  PlansVariancePopulationCreatedBlockAsc = 'PLANS_VARIANCE_POPULATION_CREATED_BLOCK_ASC',
  PlansVariancePopulationCreatedBlockDesc = 'PLANS_VARIANCE_POPULATION_CREATED_BLOCK_DESC',
  PlansVariancePopulationCreatorAsc = 'PLANS_VARIANCE_POPULATION_CREATOR_ASC',
  PlansVariancePopulationCreatorDesc = 'PLANS_VARIANCE_POPULATION_CREATOR_DESC',
  PlansVariancePopulationDeploymentIdAsc = 'PLANS_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC',
  PlansVariancePopulationDeploymentIdDesc = 'PLANS_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC',
  PlansVariancePopulationIdAsc = 'PLANS_VARIANCE_POPULATION_ID_ASC',
  PlansVariancePopulationIdDesc = 'PLANS_VARIANCE_POPULATION_ID_DESC',
  PlansVariancePopulationLastEventAsc = 'PLANS_VARIANCE_POPULATION_LAST_EVENT_ASC',
  PlansVariancePopulationLastEventDesc = 'PLANS_VARIANCE_POPULATION_LAST_EVENT_DESC',
  PlansVariancePopulationPlanTemplateIdAsc = 'PLANS_VARIANCE_POPULATION_PLAN_TEMPLATE_ID_ASC',
  PlansVariancePopulationPlanTemplateIdDesc = 'PLANS_VARIANCE_POPULATION_PLAN_TEMPLATE_ID_DESC',
  PlansVariancePopulationPriceAsc = 'PLANS_VARIANCE_POPULATION_PRICE_ASC',
  PlansVariancePopulationPriceDesc = 'PLANS_VARIANCE_POPULATION_PRICE_DESC',
  PlansVarianceSampleActiveAsc = 'PLANS_VARIANCE_SAMPLE_ACTIVE_ASC',
  PlansVarianceSampleActiveDesc = 'PLANS_VARIANCE_SAMPLE_ACTIVE_DESC',
  PlansVarianceSampleBlockRangeAsc = 'PLANS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  PlansVarianceSampleBlockRangeDesc = 'PLANS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  PlansVarianceSampleCreatedBlockAsc = 'PLANS_VARIANCE_SAMPLE_CREATED_BLOCK_ASC',
  PlansVarianceSampleCreatedBlockDesc = 'PLANS_VARIANCE_SAMPLE_CREATED_BLOCK_DESC',
  PlansVarianceSampleCreatorAsc = 'PLANS_VARIANCE_SAMPLE_CREATOR_ASC',
  PlansVarianceSampleCreatorDesc = 'PLANS_VARIANCE_SAMPLE_CREATOR_DESC',
  PlansVarianceSampleDeploymentIdAsc = 'PLANS_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC',
  PlansVarianceSampleDeploymentIdDesc = 'PLANS_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC',
  PlansVarianceSampleIdAsc = 'PLANS_VARIANCE_SAMPLE_ID_ASC',
  PlansVarianceSampleIdDesc = 'PLANS_VARIANCE_SAMPLE_ID_DESC',
  PlansVarianceSampleLastEventAsc = 'PLANS_VARIANCE_SAMPLE_LAST_EVENT_ASC',
  PlansVarianceSampleLastEventDesc = 'PLANS_VARIANCE_SAMPLE_LAST_EVENT_DESC',
  PlansVarianceSamplePlanTemplateIdAsc = 'PLANS_VARIANCE_SAMPLE_PLAN_TEMPLATE_ID_ASC',
  PlansVarianceSamplePlanTemplateIdDesc = 'PLANS_VARIANCE_SAMPLE_PLAN_TEMPLATE_ID_DESC',
  PlansVarianceSamplePriceAsc = 'PLANS_VARIANCE_SAMPLE_PRICE_ASC',
  PlansVarianceSamplePriceDesc = 'PLANS_VARIANCE_SAMPLE_PRICE_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  ProjectByProjectIdBoostAllocationRatioAsc = 'PROJECT_BY_PROJECT_ID__BOOST_ALLOCATION_RATIO_ASC',
  ProjectByProjectIdBoostAllocationRatioDesc = 'PROJECT_BY_PROJECT_ID__BOOST_ALLOCATION_RATIO_DESC',
  ProjectByProjectIdCreatedBlockAsc = 'PROJECT_BY_PROJECT_ID__CREATED_BLOCK_ASC',
  ProjectByProjectIdCreatedBlockDesc = 'PROJECT_BY_PROJECT_ID__CREATED_BLOCK_DESC',
  ProjectByProjectIdCreatedTimestampAsc = 'PROJECT_BY_PROJECT_ID__CREATED_TIMESTAMP_ASC',
  ProjectByProjectIdCreatedTimestampDesc = 'PROJECT_BY_PROJECT_ID__CREATED_TIMESTAMP_DESC',
  ProjectByProjectIdDeploymentIdAsc = 'PROJECT_BY_PROJECT_ID__DEPLOYMENT_ID_ASC',
  ProjectByProjectIdDeploymentIdDesc = 'PROJECT_BY_PROJECT_ID__DEPLOYMENT_ID_DESC',
  ProjectByProjectIdDeploymentMetadataAsc = 'PROJECT_BY_PROJECT_ID__DEPLOYMENT_METADATA_ASC',
  ProjectByProjectIdDeploymentMetadataDesc = 'PROJECT_BY_PROJECT_ID__DEPLOYMENT_METADATA_DESC',
  ProjectByProjectIdIdAsc = 'PROJECT_BY_PROJECT_ID__ID_ASC',
  ProjectByProjectIdIdDesc = 'PROJECT_BY_PROJECT_ID__ID_DESC',
  ProjectByProjectIdLastEventAsc = 'PROJECT_BY_PROJECT_ID__LAST_EVENT_ASC',
  ProjectByProjectIdLastEventDesc = 'PROJECT_BY_PROJECT_ID__LAST_EVENT_DESC',
  ProjectByProjectIdMetadataAsc = 'PROJECT_BY_PROJECT_ID__METADATA_ASC',
  ProjectByProjectIdMetadataDesc = 'PROJECT_BY_PROJECT_ID__METADATA_DESC',
  ProjectByProjectIdOwnerAsc = 'PROJECT_BY_PROJECT_ID__OWNER_ASC',
  ProjectByProjectIdOwnerDesc = 'PROJECT_BY_PROJECT_ID__OWNER_DESC',
  ProjectByProjectIdTotalAllocationAsc = 'PROJECT_BY_PROJECT_ID__TOTAL_ALLOCATION_ASC',
  ProjectByProjectIdTotalAllocationDesc = 'PROJECT_BY_PROJECT_ID__TOTAL_ALLOCATION_DESC',
  ProjectByProjectIdTotalBoostAsc = 'PROJECT_BY_PROJECT_ID__TOTAL_BOOST_ASC',
  ProjectByProjectIdTotalBoostDesc = 'PROJECT_BY_PROJECT_ID__TOTAL_BOOST_DESC',
  ProjectByProjectIdTotalRewardAsc = 'PROJECT_BY_PROJECT_ID__TOTAL_REWARD_ASC',
  ProjectByProjectIdTotalRewardDesc = 'PROJECT_BY_PROJECT_ID__TOTAL_REWARD_DESC',
  ProjectByProjectIdTypeAsc = 'PROJECT_BY_PROJECT_ID__TYPE_ASC',
  ProjectByProjectIdTypeDesc = 'PROJECT_BY_PROJECT_ID__TYPE_DESC',
  ProjectByProjectIdUpdatedTimestampAsc = 'PROJECT_BY_PROJECT_ID__UPDATED_TIMESTAMP_ASC',
  ProjectByProjectIdUpdatedTimestampDesc = 'PROJECT_BY_PROJECT_ID__UPDATED_TIMESTAMP_DESC',
  ProjectIdAsc = 'PROJECT_ID_ASC',
  ProjectIdDesc = 'PROJECT_ID_DESC',
  ServiceAgreementsAverageBlockRangeAsc = 'SERVICE_AGREEMENTS_AVERAGE_BLOCK_RANGE_ASC',
  ServiceAgreementsAverageBlockRangeDesc = 'SERVICE_AGREEMENTS_AVERAGE_BLOCK_RANGE_DESC',
  ServiceAgreementsAverageConsumerAddressAsc = 'SERVICE_AGREEMENTS_AVERAGE_CONSUMER_ADDRESS_ASC',
  ServiceAgreementsAverageConsumerAddressDesc = 'SERVICE_AGREEMENTS_AVERAGE_CONSUMER_ADDRESS_DESC',
  ServiceAgreementsAverageCreatedBlockAsc = 'SERVICE_AGREEMENTS_AVERAGE_CREATED_BLOCK_ASC',
  ServiceAgreementsAverageCreatedBlockDesc = 'SERVICE_AGREEMENTS_AVERAGE_CREATED_BLOCK_DESC',
  ServiceAgreementsAverageDeploymentIdAsc = 'SERVICE_AGREEMENTS_AVERAGE_DEPLOYMENT_ID_ASC',
  ServiceAgreementsAverageDeploymentIdDesc = 'SERVICE_AGREEMENTS_AVERAGE_DEPLOYMENT_ID_DESC',
  ServiceAgreementsAverageEndTimeAsc = 'SERVICE_AGREEMENTS_AVERAGE_END_TIME_ASC',
  ServiceAgreementsAverageEndTimeDesc = 'SERVICE_AGREEMENTS_AVERAGE_END_TIME_DESC',
  ServiceAgreementsAverageIdAsc = 'SERVICE_AGREEMENTS_AVERAGE_ID_ASC',
  ServiceAgreementsAverageIdDesc = 'SERVICE_AGREEMENTS_AVERAGE_ID_DESC',
  ServiceAgreementsAverageIndexerAddressAsc = 'SERVICE_AGREEMENTS_AVERAGE_INDEXER_ADDRESS_ASC',
  ServiceAgreementsAverageIndexerAddressDesc = 'SERVICE_AGREEMENTS_AVERAGE_INDEXER_ADDRESS_DESC',
  ServiceAgreementsAverageLastEventAsc = 'SERVICE_AGREEMENTS_AVERAGE_LAST_EVENT_ASC',
  ServiceAgreementsAverageLastEventDesc = 'SERVICE_AGREEMENTS_AVERAGE_LAST_EVENT_DESC',
  ServiceAgreementsAverageLockedAmountAsc = 'SERVICE_AGREEMENTS_AVERAGE_LOCKED_AMOUNT_ASC',
  ServiceAgreementsAverageLockedAmountDesc = 'SERVICE_AGREEMENTS_AVERAGE_LOCKED_AMOUNT_DESC',
  ServiceAgreementsAveragePeriodAsc = 'SERVICE_AGREEMENTS_AVERAGE_PERIOD_ASC',
  ServiceAgreementsAveragePeriodDesc = 'SERVICE_AGREEMENTS_AVERAGE_PERIOD_DESC',
  ServiceAgreementsAveragePlanTemplateIdAsc = 'SERVICE_AGREEMENTS_AVERAGE_PLAN_TEMPLATE_ID_ASC',
  ServiceAgreementsAveragePlanTemplateIdDesc = 'SERVICE_AGREEMENTS_AVERAGE_PLAN_TEMPLATE_ID_DESC',
  ServiceAgreementsAverageStartTimeAsc = 'SERVICE_AGREEMENTS_AVERAGE_START_TIME_ASC',
  ServiceAgreementsAverageStartTimeDesc = 'SERVICE_AGREEMENTS_AVERAGE_START_TIME_DESC',
  ServiceAgreementsByDeploymentIdCountAsc = 'SERVICE_AGREEMENTS_BY_DEPLOYMENT_ID__COUNT_ASC',
  ServiceAgreementsByDeploymentIdCountDesc = 'SERVICE_AGREEMENTS_BY_DEPLOYMENT_ID__COUNT_DESC',
  ServiceAgreementsCountAsc = 'SERVICE_AGREEMENTS_COUNT_ASC',
  ServiceAgreementsCountDesc = 'SERVICE_AGREEMENTS_COUNT_DESC',
  ServiceAgreementsDistinctCountBlockRangeAsc = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  ServiceAgreementsDistinctCountBlockRangeDesc = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  ServiceAgreementsDistinctCountConsumerAddressAsc = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_CONSUMER_ADDRESS_ASC',
  ServiceAgreementsDistinctCountConsumerAddressDesc = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_CONSUMER_ADDRESS_DESC',
  ServiceAgreementsDistinctCountCreatedBlockAsc = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_CREATED_BLOCK_ASC',
  ServiceAgreementsDistinctCountCreatedBlockDesc = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_CREATED_BLOCK_DESC',
  ServiceAgreementsDistinctCountDeploymentIdAsc = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_DEPLOYMENT_ID_ASC',
  ServiceAgreementsDistinctCountDeploymentIdDesc = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_DEPLOYMENT_ID_DESC',
  ServiceAgreementsDistinctCountEndTimeAsc = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_END_TIME_ASC',
  ServiceAgreementsDistinctCountEndTimeDesc = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_END_TIME_DESC',
  ServiceAgreementsDistinctCountIdAsc = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_ID_ASC',
  ServiceAgreementsDistinctCountIdDesc = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_ID_DESC',
  ServiceAgreementsDistinctCountIndexerAddressAsc = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_INDEXER_ADDRESS_ASC',
  ServiceAgreementsDistinctCountIndexerAddressDesc = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_INDEXER_ADDRESS_DESC',
  ServiceAgreementsDistinctCountLastEventAsc = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_LAST_EVENT_ASC',
  ServiceAgreementsDistinctCountLastEventDesc = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_LAST_EVENT_DESC',
  ServiceAgreementsDistinctCountLockedAmountAsc = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_LOCKED_AMOUNT_ASC',
  ServiceAgreementsDistinctCountLockedAmountDesc = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_LOCKED_AMOUNT_DESC',
  ServiceAgreementsDistinctCountPeriodAsc = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_PERIOD_ASC',
  ServiceAgreementsDistinctCountPeriodDesc = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_PERIOD_DESC',
  ServiceAgreementsDistinctCountPlanTemplateIdAsc = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_PLAN_TEMPLATE_ID_ASC',
  ServiceAgreementsDistinctCountPlanTemplateIdDesc = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_PLAN_TEMPLATE_ID_DESC',
  ServiceAgreementsDistinctCountStartTimeAsc = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_START_TIME_ASC',
  ServiceAgreementsDistinctCountStartTimeDesc = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_START_TIME_DESC',
  ServiceAgreementsMaxBlockRangeAsc = 'SERVICE_AGREEMENTS_MAX_BLOCK_RANGE_ASC',
  ServiceAgreementsMaxBlockRangeDesc = 'SERVICE_AGREEMENTS_MAX_BLOCK_RANGE_DESC',
  ServiceAgreementsMaxConsumerAddressAsc = 'SERVICE_AGREEMENTS_MAX_CONSUMER_ADDRESS_ASC',
  ServiceAgreementsMaxConsumerAddressDesc = 'SERVICE_AGREEMENTS_MAX_CONSUMER_ADDRESS_DESC',
  ServiceAgreementsMaxCreatedBlockAsc = 'SERVICE_AGREEMENTS_MAX_CREATED_BLOCK_ASC',
  ServiceAgreementsMaxCreatedBlockDesc = 'SERVICE_AGREEMENTS_MAX_CREATED_BLOCK_DESC',
  ServiceAgreementsMaxDeploymentIdAsc = 'SERVICE_AGREEMENTS_MAX_DEPLOYMENT_ID_ASC',
  ServiceAgreementsMaxDeploymentIdDesc = 'SERVICE_AGREEMENTS_MAX_DEPLOYMENT_ID_DESC',
  ServiceAgreementsMaxEndTimeAsc = 'SERVICE_AGREEMENTS_MAX_END_TIME_ASC',
  ServiceAgreementsMaxEndTimeDesc = 'SERVICE_AGREEMENTS_MAX_END_TIME_DESC',
  ServiceAgreementsMaxIdAsc = 'SERVICE_AGREEMENTS_MAX_ID_ASC',
  ServiceAgreementsMaxIdDesc = 'SERVICE_AGREEMENTS_MAX_ID_DESC',
  ServiceAgreementsMaxIndexerAddressAsc = 'SERVICE_AGREEMENTS_MAX_INDEXER_ADDRESS_ASC',
  ServiceAgreementsMaxIndexerAddressDesc = 'SERVICE_AGREEMENTS_MAX_INDEXER_ADDRESS_DESC',
  ServiceAgreementsMaxLastEventAsc = 'SERVICE_AGREEMENTS_MAX_LAST_EVENT_ASC',
  ServiceAgreementsMaxLastEventDesc = 'SERVICE_AGREEMENTS_MAX_LAST_EVENT_DESC',
  ServiceAgreementsMaxLockedAmountAsc = 'SERVICE_AGREEMENTS_MAX_LOCKED_AMOUNT_ASC',
  ServiceAgreementsMaxLockedAmountDesc = 'SERVICE_AGREEMENTS_MAX_LOCKED_AMOUNT_DESC',
  ServiceAgreementsMaxPeriodAsc = 'SERVICE_AGREEMENTS_MAX_PERIOD_ASC',
  ServiceAgreementsMaxPeriodDesc = 'SERVICE_AGREEMENTS_MAX_PERIOD_DESC',
  ServiceAgreementsMaxPlanTemplateIdAsc = 'SERVICE_AGREEMENTS_MAX_PLAN_TEMPLATE_ID_ASC',
  ServiceAgreementsMaxPlanTemplateIdDesc = 'SERVICE_AGREEMENTS_MAX_PLAN_TEMPLATE_ID_DESC',
  ServiceAgreementsMaxStartTimeAsc = 'SERVICE_AGREEMENTS_MAX_START_TIME_ASC',
  ServiceAgreementsMaxStartTimeDesc = 'SERVICE_AGREEMENTS_MAX_START_TIME_DESC',
  ServiceAgreementsMinBlockRangeAsc = 'SERVICE_AGREEMENTS_MIN_BLOCK_RANGE_ASC',
  ServiceAgreementsMinBlockRangeDesc = 'SERVICE_AGREEMENTS_MIN_BLOCK_RANGE_DESC',
  ServiceAgreementsMinConsumerAddressAsc = 'SERVICE_AGREEMENTS_MIN_CONSUMER_ADDRESS_ASC',
  ServiceAgreementsMinConsumerAddressDesc = 'SERVICE_AGREEMENTS_MIN_CONSUMER_ADDRESS_DESC',
  ServiceAgreementsMinCreatedBlockAsc = 'SERVICE_AGREEMENTS_MIN_CREATED_BLOCK_ASC',
  ServiceAgreementsMinCreatedBlockDesc = 'SERVICE_AGREEMENTS_MIN_CREATED_BLOCK_DESC',
  ServiceAgreementsMinDeploymentIdAsc = 'SERVICE_AGREEMENTS_MIN_DEPLOYMENT_ID_ASC',
  ServiceAgreementsMinDeploymentIdDesc = 'SERVICE_AGREEMENTS_MIN_DEPLOYMENT_ID_DESC',
  ServiceAgreementsMinEndTimeAsc = 'SERVICE_AGREEMENTS_MIN_END_TIME_ASC',
  ServiceAgreementsMinEndTimeDesc = 'SERVICE_AGREEMENTS_MIN_END_TIME_DESC',
  ServiceAgreementsMinIdAsc = 'SERVICE_AGREEMENTS_MIN_ID_ASC',
  ServiceAgreementsMinIdDesc = 'SERVICE_AGREEMENTS_MIN_ID_DESC',
  ServiceAgreementsMinIndexerAddressAsc = 'SERVICE_AGREEMENTS_MIN_INDEXER_ADDRESS_ASC',
  ServiceAgreementsMinIndexerAddressDesc = 'SERVICE_AGREEMENTS_MIN_INDEXER_ADDRESS_DESC',
  ServiceAgreementsMinLastEventAsc = 'SERVICE_AGREEMENTS_MIN_LAST_EVENT_ASC',
  ServiceAgreementsMinLastEventDesc = 'SERVICE_AGREEMENTS_MIN_LAST_EVENT_DESC',
  ServiceAgreementsMinLockedAmountAsc = 'SERVICE_AGREEMENTS_MIN_LOCKED_AMOUNT_ASC',
  ServiceAgreementsMinLockedAmountDesc = 'SERVICE_AGREEMENTS_MIN_LOCKED_AMOUNT_DESC',
  ServiceAgreementsMinPeriodAsc = 'SERVICE_AGREEMENTS_MIN_PERIOD_ASC',
  ServiceAgreementsMinPeriodDesc = 'SERVICE_AGREEMENTS_MIN_PERIOD_DESC',
  ServiceAgreementsMinPlanTemplateIdAsc = 'SERVICE_AGREEMENTS_MIN_PLAN_TEMPLATE_ID_ASC',
  ServiceAgreementsMinPlanTemplateIdDesc = 'SERVICE_AGREEMENTS_MIN_PLAN_TEMPLATE_ID_DESC',
  ServiceAgreementsMinStartTimeAsc = 'SERVICE_AGREEMENTS_MIN_START_TIME_ASC',
  ServiceAgreementsMinStartTimeDesc = 'SERVICE_AGREEMENTS_MIN_START_TIME_DESC',
  ServiceAgreementsStddevPopulationBlockRangeAsc = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  ServiceAgreementsStddevPopulationBlockRangeDesc = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  ServiceAgreementsStddevPopulationConsumerAddressAsc = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_CONSUMER_ADDRESS_ASC',
  ServiceAgreementsStddevPopulationConsumerAddressDesc = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_CONSUMER_ADDRESS_DESC',
  ServiceAgreementsStddevPopulationCreatedBlockAsc = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_CREATED_BLOCK_ASC',
  ServiceAgreementsStddevPopulationCreatedBlockDesc = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_CREATED_BLOCK_DESC',
  ServiceAgreementsStddevPopulationDeploymentIdAsc = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_DEPLOYMENT_ID_ASC',
  ServiceAgreementsStddevPopulationDeploymentIdDesc = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_DEPLOYMENT_ID_DESC',
  ServiceAgreementsStddevPopulationEndTimeAsc = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_END_TIME_ASC',
  ServiceAgreementsStddevPopulationEndTimeDesc = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_END_TIME_DESC',
  ServiceAgreementsStddevPopulationIdAsc = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_ID_ASC',
  ServiceAgreementsStddevPopulationIdDesc = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_ID_DESC',
  ServiceAgreementsStddevPopulationIndexerAddressAsc = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_INDEXER_ADDRESS_ASC',
  ServiceAgreementsStddevPopulationIndexerAddressDesc = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_INDEXER_ADDRESS_DESC',
  ServiceAgreementsStddevPopulationLastEventAsc = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_LAST_EVENT_ASC',
  ServiceAgreementsStddevPopulationLastEventDesc = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_LAST_EVENT_DESC',
  ServiceAgreementsStddevPopulationLockedAmountAsc = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_LOCKED_AMOUNT_ASC',
  ServiceAgreementsStddevPopulationLockedAmountDesc = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_LOCKED_AMOUNT_DESC',
  ServiceAgreementsStddevPopulationPeriodAsc = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_PERIOD_ASC',
  ServiceAgreementsStddevPopulationPeriodDesc = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_PERIOD_DESC',
  ServiceAgreementsStddevPopulationPlanTemplateIdAsc = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_PLAN_TEMPLATE_ID_ASC',
  ServiceAgreementsStddevPopulationPlanTemplateIdDesc = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_PLAN_TEMPLATE_ID_DESC',
  ServiceAgreementsStddevPopulationStartTimeAsc = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_START_TIME_ASC',
  ServiceAgreementsStddevPopulationStartTimeDesc = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_START_TIME_DESC',
  ServiceAgreementsStddevSampleBlockRangeAsc = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  ServiceAgreementsStddevSampleBlockRangeDesc = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  ServiceAgreementsStddevSampleConsumerAddressAsc = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_CONSUMER_ADDRESS_ASC',
  ServiceAgreementsStddevSampleConsumerAddressDesc = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_CONSUMER_ADDRESS_DESC',
  ServiceAgreementsStddevSampleCreatedBlockAsc = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_CREATED_BLOCK_ASC',
  ServiceAgreementsStddevSampleCreatedBlockDesc = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_CREATED_BLOCK_DESC',
  ServiceAgreementsStddevSampleDeploymentIdAsc = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC',
  ServiceAgreementsStddevSampleDeploymentIdDesc = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC',
  ServiceAgreementsStddevSampleEndTimeAsc = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_END_TIME_ASC',
  ServiceAgreementsStddevSampleEndTimeDesc = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_END_TIME_DESC',
  ServiceAgreementsStddevSampleIdAsc = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_ID_ASC',
  ServiceAgreementsStddevSampleIdDesc = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_ID_DESC',
  ServiceAgreementsStddevSampleIndexerAddressAsc = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_INDEXER_ADDRESS_ASC',
  ServiceAgreementsStddevSampleIndexerAddressDesc = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_INDEXER_ADDRESS_DESC',
  ServiceAgreementsStddevSampleLastEventAsc = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_LAST_EVENT_ASC',
  ServiceAgreementsStddevSampleLastEventDesc = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_LAST_EVENT_DESC',
  ServiceAgreementsStddevSampleLockedAmountAsc = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_LOCKED_AMOUNT_ASC',
  ServiceAgreementsStddevSampleLockedAmountDesc = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_LOCKED_AMOUNT_DESC',
  ServiceAgreementsStddevSamplePeriodAsc = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_PERIOD_ASC',
  ServiceAgreementsStddevSamplePeriodDesc = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_PERIOD_DESC',
  ServiceAgreementsStddevSamplePlanTemplateIdAsc = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_PLAN_TEMPLATE_ID_ASC',
  ServiceAgreementsStddevSamplePlanTemplateIdDesc = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_PLAN_TEMPLATE_ID_DESC',
  ServiceAgreementsStddevSampleStartTimeAsc = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_START_TIME_ASC',
  ServiceAgreementsStddevSampleStartTimeDesc = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_START_TIME_DESC',
  ServiceAgreementsSumBlockRangeAsc = 'SERVICE_AGREEMENTS_SUM_BLOCK_RANGE_ASC',
  ServiceAgreementsSumBlockRangeDesc = 'SERVICE_AGREEMENTS_SUM_BLOCK_RANGE_DESC',
  ServiceAgreementsSumConsumerAddressAsc = 'SERVICE_AGREEMENTS_SUM_CONSUMER_ADDRESS_ASC',
  ServiceAgreementsSumConsumerAddressDesc = 'SERVICE_AGREEMENTS_SUM_CONSUMER_ADDRESS_DESC',
  ServiceAgreementsSumCreatedBlockAsc = 'SERVICE_AGREEMENTS_SUM_CREATED_BLOCK_ASC',
  ServiceAgreementsSumCreatedBlockDesc = 'SERVICE_AGREEMENTS_SUM_CREATED_BLOCK_DESC',
  ServiceAgreementsSumDeploymentIdAsc = 'SERVICE_AGREEMENTS_SUM_DEPLOYMENT_ID_ASC',
  ServiceAgreementsSumDeploymentIdDesc = 'SERVICE_AGREEMENTS_SUM_DEPLOYMENT_ID_DESC',
  ServiceAgreementsSumEndTimeAsc = 'SERVICE_AGREEMENTS_SUM_END_TIME_ASC',
  ServiceAgreementsSumEndTimeDesc = 'SERVICE_AGREEMENTS_SUM_END_TIME_DESC',
  ServiceAgreementsSumIdAsc = 'SERVICE_AGREEMENTS_SUM_ID_ASC',
  ServiceAgreementsSumIdDesc = 'SERVICE_AGREEMENTS_SUM_ID_DESC',
  ServiceAgreementsSumIndexerAddressAsc = 'SERVICE_AGREEMENTS_SUM_INDEXER_ADDRESS_ASC',
  ServiceAgreementsSumIndexerAddressDesc = 'SERVICE_AGREEMENTS_SUM_INDEXER_ADDRESS_DESC',
  ServiceAgreementsSumLastEventAsc = 'SERVICE_AGREEMENTS_SUM_LAST_EVENT_ASC',
  ServiceAgreementsSumLastEventDesc = 'SERVICE_AGREEMENTS_SUM_LAST_EVENT_DESC',
  ServiceAgreementsSumLockedAmountAsc = 'SERVICE_AGREEMENTS_SUM_LOCKED_AMOUNT_ASC',
  ServiceAgreementsSumLockedAmountDesc = 'SERVICE_AGREEMENTS_SUM_LOCKED_AMOUNT_DESC',
  ServiceAgreementsSumPeriodAsc = 'SERVICE_AGREEMENTS_SUM_PERIOD_ASC',
  ServiceAgreementsSumPeriodDesc = 'SERVICE_AGREEMENTS_SUM_PERIOD_DESC',
  ServiceAgreementsSumPlanTemplateIdAsc = 'SERVICE_AGREEMENTS_SUM_PLAN_TEMPLATE_ID_ASC',
  ServiceAgreementsSumPlanTemplateIdDesc = 'SERVICE_AGREEMENTS_SUM_PLAN_TEMPLATE_ID_DESC',
  ServiceAgreementsSumStartTimeAsc = 'SERVICE_AGREEMENTS_SUM_START_TIME_ASC',
  ServiceAgreementsSumStartTimeDesc = 'SERVICE_AGREEMENTS_SUM_START_TIME_DESC',
  ServiceAgreementsVariancePopulationBlockRangeAsc = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  ServiceAgreementsVariancePopulationBlockRangeDesc = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  ServiceAgreementsVariancePopulationConsumerAddressAsc = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_CONSUMER_ADDRESS_ASC',
  ServiceAgreementsVariancePopulationConsumerAddressDesc = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_CONSUMER_ADDRESS_DESC',
  ServiceAgreementsVariancePopulationCreatedBlockAsc = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_CREATED_BLOCK_ASC',
  ServiceAgreementsVariancePopulationCreatedBlockDesc = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_CREATED_BLOCK_DESC',
  ServiceAgreementsVariancePopulationDeploymentIdAsc = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC',
  ServiceAgreementsVariancePopulationDeploymentIdDesc = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC',
  ServiceAgreementsVariancePopulationEndTimeAsc = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_END_TIME_ASC',
  ServiceAgreementsVariancePopulationEndTimeDesc = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_END_TIME_DESC',
  ServiceAgreementsVariancePopulationIdAsc = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_ID_ASC',
  ServiceAgreementsVariancePopulationIdDesc = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_ID_DESC',
  ServiceAgreementsVariancePopulationIndexerAddressAsc = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_INDEXER_ADDRESS_ASC',
  ServiceAgreementsVariancePopulationIndexerAddressDesc = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_INDEXER_ADDRESS_DESC',
  ServiceAgreementsVariancePopulationLastEventAsc = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_LAST_EVENT_ASC',
  ServiceAgreementsVariancePopulationLastEventDesc = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_LAST_EVENT_DESC',
  ServiceAgreementsVariancePopulationLockedAmountAsc = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_LOCKED_AMOUNT_ASC',
  ServiceAgreementsVariancePopulationLockedAmountDesc = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_LOCKED_AMOUNT_DESC',
  ServiceAgreementsVariancePopulationPeriodAsc = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_PERIOD_ASC',
  ServiceAgreementsVariancePopulationPeriodDesc = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_PERIOD_DESC',
  ServiceAgreementsVariancePopulationPlanTemplateIdAsc = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_PLAN_TEMPLATE_ID_ASC',
  ServiceAgreementsVariancePopulationPlanTemplateIdDesc = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_PLAN_TEMPLATE_ID_DESC',
  ServiceAgreementsVariancePopulationStartTimeAsc = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_START_TIME_ASC',
  ServiceAgreementsVariancePopulationStartTimeDesc = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_START_TIME_DESC',
  ServiceAgreementsVarianceSampleBlockRangeAsc = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  ServiceAgreementsVarianceSampleBlockRangeDesc = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  ServiceAgreementsVarianceSampleConsumerAddressAsc = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_CONSUMER_ADDRESS_ASC',
  ServiceAgreementsVarianceSampleConsumerAddressDesc = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_CONSUMER_ADDRESS_DESC',
  ServiceAgreementsVarianceSampleCreatedBlockAsc = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_CREATED_BLOCK_ASC',
  ServiceAgreementsVarianceSampleCreatedBlockDesc = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_CREATED_BLOCK_DESC',
  ServiceAgreementsVarianceSampleDeploymentIdAsc = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC',
  ServiceAgreementsVarianceSampleDeploymentIdDesc = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC',
  ServiceAgreementsVarianceSampleEndTimeAsc = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_END_TIME_ASC',
  ServiceAgreementsVarianceSampleEndTimeDesc = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_END_TIME_DESC',
  ServiceAgreementsVarianceSampleIdAsc = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_ID_ASC',
  ServiceAgreementsVarianceSampleIdDesc = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_ID_DESC',
  ServiceAgreementsVarianceSampleIndexerAddressAsc = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_INDEXER_ADDRESS_ASC',
  ServiceAgreementsVarianceSampleIndexerAddressDesc = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_INDEXER_ADDRESS_DESC',
  ServiceAgreementsVarianceSampleLastEventAsc = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_LAST_EVENT_ASC',
  ServiceAgreementsVarianceSampleLastEventDesc = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_LAST_EVENT_DESC',
  ServiceAgreementsVarianceSampleLockedAmountAsc = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_LOCKED_AMOUNT_ASC',
  ServiceAgreementsVarianceSampleLockedAmountDesc = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_LOCKED_AMOUNT_DESC',
  ServiceAgreementsVarianceSamplePeriodAsc = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_PERIOD_ASC',
  ServiceAgreementsVarianceSamplePeriodDesc = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_PERIOD_DESC',
  ServiceAgreementsVarianceSamplePlanTemplateIdAsc = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_PLAN_TEMPLATE_ID_ASC',
  ServiceAgreementsVarianceSamplePlanTemplateIdDesc = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_PLAN_TEMPLATE_ID_DESC',
  ServiceAgreementsVarianceSampleStartTimeAsc = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_START_TIME_ASC',
  ServiceAgreementsVarianceSampleStartTimeDesc = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_START_TIME_DESC',
  StateChannelsAverageAgentAsc = 'STATE_CHANNELS_AVERAGE_AGENT_ASC',
  StateChannelsAverageAgentDesc = 'STATE_CHANNELS_AVERAGE_AGENT_DESC',
  StateChannelsAverageBlockRangeAsc = 'STATE_CHANNELS_AVERAGE_BLOCK_RANGE_ASC',
  StateChannelsAverageBlockRangeDesc = 'STATE_CHANNELS_AVERAGE_BLOCK_RANGE_DESC',
  StateChannelsAverageConsumerAsc = 'STATE_CHANNELS_AVERAGE_CONSUMER_ASC',
  StateChannelsAverageConsumerDesc = 'STATE_CHANNELS_AVERAGE_CONSUMER_DESC',
  StateChannelsAverageDeploymentIdAsc = 'STATE_CHANNELS_AVERAGE_DEPLOYMENT_ID_ASC',
  StateChannelsAverageDeploymentIdDesc = 'STATE_CHANNELS_AVERAGE_DEPLOYMENT_ID_DESC',
  StateChannelsAverageExpiredAtAsc = 'STATE_CHANNELS_AVERAGE_EXPIRED_AT_ASC',
  StateChannelsAverageExpiredAtDesc = 'STATE_CHANNELS_AVERAGE_EXPIRED_AT_DESC',
  StateChannelsAverageIdAsc = 'STATE_CHANNELS_AVERAGE_ID_ASC',
  StateChannelsAverageIdDesc = 'STATE_CHANNELS_AVERAGE_ID_DESC',
  StateChannelsAverageIndexerAsc = 'STATE_CHANNELS_AVERAGE_INDEXER_ASC',
  StateChannelsAverageIndexerDesc = 'STATE_CHANNELS_AVERAGE_INDEXER_DESC',
  StateChannelsAverageIsFinalAsc = 'STATE_CHANNELS_AVERAGE_IS_FINAL_ASC',
  StateChannelsAverageIsFinalDesc = 'STATE_CHANNELS_AVERAGE_IS_FINAL_DESC',
  StateChannelsAverageLastEventAsc = 'STATE_CHANNELS_AVERAGE_LAST_EVENT_ASC',
  StateChannelsAverageLastEventDesc = 'STATE_CHANNELS_AVERAGE_LAST_EVENT_DESC',
  StateChannelsAveragePriceAsc = 'STATE_CHANNELS_AVERAGE_PRICE_ASC',
  StateChannelsAveragePriceDesc = 'STATE_CHANNELS_AVERAGE_PRICE_DESC',
  StateChannelsAverageRealTotalAsc = 'STATE_CHANNELS_AVERAGE_REAL_TOTAL_ASC',
  StateChannelsAverageRealTotalDesc = 'STATE_CHANNELS_AVERAGE_REAL_TOTAL_DESC',
  StateChannelsAverageSpentAsc = 'STATE_CHANNELS_AVERAGE_SPENT_ASC',
  StateChannelsAverageSpentDesc = 'STATE_CHANNELS_AVERAGE_SPENT_DESC',
  StateChannelsAverageStartTimeAsc = 'STATE_CHANNELS_AVERAGE_START_TIME_ASC',
  StateChannelsAverageStartTimeDesc = 'STATE_CHANNELS_AVERAGE_START_TIME_DESC',
  StateChannelsAverageStatusAsc = 'STATE_CHANNELS_AVERAGE_STATUS_ASC',
  StateChannelsAverageStatusDesc = 'STATE_CHANNELS_AVERAGE_STATUS_DESC',
  StateChannelsAverageTerminatedAtAsc = 'STATE_CHANNELS_AVERAGE_TERMINATED_AT_ASC',
  StateChannelsAverageTerminatedAtDesc = 'STATE_CHANNELS_AVERAGE_TERMINATED_AT_DESC',
  StateChannelsAverageTerminateByIndexerAsc = 'STATE_CHANNELS_AVERAGE_TERMINATE_BY_INDEXER_ASC',
  StateChannelsAverageTerminateByIndexerDesc = 'STATE_CHANNELS_AVERAGE_TERMINATE_BY_INDEXER_DESC',
  StateChannelsAverageTotalAsc = 'STATE_CHANNELS_AVERAGE_TOTAL_ASC',
  StateChannelsAverageTotalDesc = 'STATE_CHANNELS_AVERAGE_TOTAL_DESC',
  StateChannelsByDeploymentIdCountAsc = 'STATE_CHANNELS_BY_DEPLOYMENT_ID__COUNT_ASC',
  StateChannelsByDeploymentIdCountDesc = 'STATE_CHANNELS_BY_DEPLOYMENT_ID__COUNT_DESC',
  StateChannelsCountAsc = 'STATE_CHANNELS_COUNT_ASC',
  StateChannelsCountDesc = 'STATE_CHANNELS_COUNT_DESC',
  StateChannelsDistinctCountAgentAsc = 'STATE_CHANNELS_DISTINCT_COUNT_AGENT_ASC',
  StateChannelsDistinctCountAgentDesc = 'STATE_CHANNELS_DISTINCT_COUNT_AGENT_DESC',
  StateChannelsDistinctCountBlockRangeAsc = 'STATE_CHANNELS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  StateChannelsDistinctCountBlockRangeDesc = 'STATE_CHANNELS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  StateChannelsDistinctCountConsumerAsc = 'STATE_CHANNELS_DISTINCT_COUNT_CONSUMER_ASC',
  StateChannelsDistinctCountConsumerDesc = 'STATE_CHANNELS_DISTINCT_COUNT_CONSUMER_DESC',
  StateChannelsDistinctCountDeploymentIdAsc = 'STATE_CHANNELS_DISTINCT_COUNT_DEPLOYMENT_ID_ASC',
  StateChannelsDistinctCountDeploymentIdDesc = 'STATE_CHANNELS_DISTINCT_COUNT_DEPLOYMENT_ID_DESC',
  StateChannelsDistinctCountExpiredAtAsc = 'STATE_CHANNELS_DISTINCT_COUNT_EXPIRED_AT_ASC',
  StateChannelsDistinctCountExpiredAtDesc = 'STATE_CHANNELS_DISTINCT_COUNT_EXPIRED_AT_DESC',
  StateChannelsDistinctCountIdAsc = 'STATE_CHANNELS_DISTINCT_COUNT_ID_ASC',
  StateChannelsDistinctCountIdDesc = 'STATE_CHANNELS_DISTINCT_COUNT_ID_DESC',
  StateChannelsDistinctCountIndexerAsc = 'STATE_CHANNELS_DISTINCT_COUNT_INDEXER_ASC',
  StateChannelsDistinctCountIndexerDesc = 'STATE_CHANNELS_DISTINCT_COUNT_INDEXER_DESC',
  StateChannelsDistinctCountIsFinalAsc = 'STATE_CHANNELS_DISTINCT_COUNT_IS_FINAL_ASC',
  StateChannelsDistinctCountIsFinalDesc = 'STATE_CHANNELS_DISTINCT_COUNT_IS_FINAL_DESC',
  StateChannelsDistinctCountLastEventAsc = 'STATE_CHANNELS_DISTINCT_COUNT_LAST_EVENT_ASC',
  StateChannelsDistinctCountLastEventDesc = 'STATE_CHANNELS_DISTINCT_COUNT_LAST_EVENT_DESC',
  StateChannelsDistinctCountPriceAsc = 'STATE_CHANNELS_DISTINCT_COUNT_PRICE_ASC',
  StateChannelsDistinctCountPriceDesc = 'STATE_CHANNELS_DISTINCT_COUNT_PRICE_DESC',
  StateChannelsDistinctCountRealTotalAsc = 'STATE_CHANNELS_DISTINCT_COUNT_REAL_TOTAL_ASC',
  StateChannelsDistinctCountRealTotalDesc = 'STATE_CHANNELS_DISTINCT_COUNT_REAL_TOTAL_DESC',
  StateChannelsDistinctCountSpentAsc = 'STATE_CHANNELS_DISTINCT_COUNT_SPENT_ASC',
  StateChannelsDistinctCountSpentDesc = 'STATE_CHANNELS_DISTINCT_COUNT_SPENT_DESC',
  StateChannelsDistinctCountStartTimeAsc = 'STATE_CHANNELS_DISTINCT_COUNT_START_TIME_ASC',
  StateChannelsDistinctCountStartTimeDesc = 'STATE_CHANNELS_DISTINCT_COUNT_START_TIME_DESC',
  StateChannelsDistinctCountStatusAsc = 'STATE_CHANNELS_DISTINCT_COUNT_STATUS_ASC',
  StateChannelsDistinctCountStatusDesc = 'STATE_CHANNELS_DISTINCT_COUNT_STATUS_DESC',
  StateChannelsDistinctCountTerminatedAtAsc = 'STATE_CHANNELS_DISTINCT_COUNT_TERMINATED_AT_ASC',
  StateChannelsDistinctCountTerminatedAtDesc = 'STATE_CHANNELS_DISTINCT_COUNT_TERMINATED_AT_DESC',
  StateChannelsDistinctCountTerminateByIndexerAsc = 'STATE_CHANNELS_DISTINCT_COUNT_TERMINATE_BY_INDEXER_ASC',
  StateChannelsDistinctCountTerminateByIndexerDesc = 'STATE_CHANNELS_DISTINCT_COUNT_TERMINATE_BY_INDEXER_DESC',
  StateChannelsDistinctCountTotalAsc = 'STATE_CHANNELS_DISTINCT_COUNT_TOTAL_ASC',
  StateChannelsDistinctCountTotalDesc = 'STATE_CHANNELS_DISTINCT_COUNT_TOTAL_DESC',
  StateChannelsMaxAgentAsc = 'STATE_CHANNELS_MAX_AGENT_ASC',
  StateChannelsMaxAgentDesc = 'STATE_CHANNELS_MAX_AGENT_DESC',
  StateChannelsMaxBlockRangeAsc = 'STATE_CHANNELS_MAX_BLOCK_RANGE_ASC',
  StateChannelsMaxBlockRangeDesc = 'STATE_CHANNELS_MAX_BLOCK_RANGE_DESC',
  StateChannelsMaxConsumerAsc = 'STATE_CHANNELS_MAX_CONSUMER_ASC',
  StateChannelsMaxConsumerDesc = 'STATE_CHANNELS_MAX_CONSUMER_DESC',
  StateChannelsMaxDeploymentIdAsc = 'STATE_CHANNELS_MAX_DEPLOYMENT_ID_ASC',
  StateChannelsMaxDeploymentIdDesc = 'STATE_CHANNELS_MAX_DEPLOYMENT_ID_DESC',
  StateChannelsMaxExpiredAtAsc = 'STATE_CHANNELS_MAX_EXPIRED_AT_ASC',
  StateChannelsMaxExpiredAtDesc = 'STATE_CHANNELS_MAX_EXPIRED_AT_DESC',
  StateChannelsMaxIdAsc = 'STATE_CHANNELS_MAX_ID_ASC',
  StateChannelsMaxIdDesc = 'STATE_CHANNELS_MAX_ID_DESC',
  StateChannelsMaxIndexerAsc = 'STATE_CHANNELS_MAX_INDEXER_ASC',
  StateChannelsMaxIndexerDesc = 'STATE_CHANNELS_MAX_INDEXER_DESC',
  StateChannelsMaxIsFinalAsc = 'STATE_CHANNELS_MAX_IS_FINAL_ASC',
  StateChannelsMaxIsFinalDesc = 'STATE_CHANNELS_MAX_IS_FINAL_DESC',
  StateChannelsMaxLastEventAsc = 'STATE_CHANNELS_MAX_LAST_EVENT_ASC',
  StateChannelsMaxLastEventDesc = 'STATE_CHANNELS_MAX_LAST_EVENT_DESC',
  StateChannelsMaxPriceAsc = 'STATE_CHANNELS_MAX_PRICE_ASC',
  StateChannelsMaxPriceDesc = 'STATE_CHANNELS_MAX_PRICE_DESC',
  StateChannelsMaxRealTotalAsc = 'STATE_CHANNELS_MAX_REAL_TOTAL_ASC',
  StateChannelsMaxRealTotalDesc = 'STATE_CHANNELS_MAX_REAL_TOTAL_DESC',
  StateChannelsMaxSpentAsc = 'STATE_CHANNELS_MAX_SPENT_ASC',
  StateChannelsMaxSpentDesc = 'STATE_CHANNELS_MAX_SPENT_DESC',
  StateChannelsMaxStartTimeAsc = 'STATE_CHANNELS_MAX_START_TIME_ASC',
  StateChannelsMaxStartTimeDesc = 'STATE_CHANNELS_MAX_START_TIME_DESC',
  StateChannelsMaxStatusAsc = 'STATE_CHANNELS_MAX_STATUS_ASC',
  StateChannelsMaxStatusDesc = 'STATE_CHANNELS_MAX_STATUS_DESC',
  StateChannelsMaxTerminatedAtAsc = 'STATE_CHANNELS_MAX_TERMINATED_AT_ASC',
  StateChannelsMaxTerminatedAtDesc = 'STATE_CHANNELS_MAX_TERMINATED_AT_DESC',
  StateChannelsMaxTerminateByIndexerAsc = 'STATE_CHANNELS_MAX_TERMINATE_BY_INDEXER_ASC',
  StateChannelsMaxTerminateByIndexerDesc = 'STATE_CHANNELS_MAX_TERMINATE_BY_INDEXER_DESC',
  StateChannelsMaxTotalAsc = 'STATE_CHANNELS_MAX_TOTAL_ASC',
  StateChannelsMaxTotalDesc = 'STATE_CHANNELS_MAX_TOTAL_DESC',
  StateChannelsMinAgentAsc = 'STATE_CHANNELS_MIN_AGENT_ASC',
  StateChannelsMinAgentDesc = 'STATE_CHANNELS_MIN_AGENT_DESC',
  StateChannelsMinBlockRangeAsc = 'STATE_CHANNELS_MIN_BLOCK_RANGE_ASC',
  StateChannelsMinBlockRangeDesc = 'STATE_CHANNELS_MIN_BLOCK_RANGE_DESC',
  StateChannelsMinConsumerAsc = 'STATE_CHANNELS_MIN_CONSUMER_ASC',
  StateChannelsMinConsumerDesc = 'STATE_CHANNELS_MIN_CONSUMER_DESC',
  StateChannelsMinDeploymentIdAsc = 'STATE_CHANNELS_MIN_DEPLOYMENT_ID_ASC',
  StateChannelsMinDeploymentIdDesc = 'STATE_CHANNELS_MIN_DEPLOYMENT_ID_DESC',
  StateChannelsMinExpiredAtAsc = 'STATE_CHANNELS_MIN_EXPIRED_AT_ASC',
  StateChannelsMinExpiredAtDesc = 'STATE_CHANNELS_MIN_EXPIRED_AT_DESC',
  StateChannelsMinIdAsc = 'STATE_CHANNELS_MIN_ID_ASC',
  StateChannelsMinIdDesc = 'STATE_CHANNELS_MIN_ID_DESC',
  StateChannelsMinIndexerAsc = 'STATE_CHANNELS_MIN_INDEXER_ASC',
  StateChannelsMinIndexerDesc = 'STATE_CHANNELS_MIN_INDEXER_DESC',
  StateChannelsMinIsFinalAsc = 'STATE_CHANNELS_MIN_IS_FINAL_ASC',
  StateChannelsMinIsFinalDesc = 'STATE_CHANNELS_MIN_IS_FINAL_DESC',
  StateChannelsMinLastEventAsc = 'STATE_CHANNELS_MIN_LAST_EVENT_ASC',
  StateChannelsMinLastEventDesc = 'STATE_CHANNELS_MIN_LAST_EVENT_DESC',
  StateChannelsMinPriceAsc = 'STATE_CHANNELS_MIN_PRICE_ASC',
  StateChannelsMinPriceDesc = 'STATE_CHANNELS_MIN_PRICE_DESC',
  StateChannelsMinRealTotalAsc = 'STATE_CHANNELS_MIN_REAL_TOTAL_ASC',
  StateChannelsMinRealTotalDesc = 'STATE_CHANNELS_MIN_REAL_TOTAL_DESC',
  StateChannelsMinSpentAsc = 'STATE_CHANNELS_MIN_SPENT_ASC',
  StateChannelsMinSpentDesc = 'STATE_CHANNELS_MIN_SPENT_DESC',
  StateChannelsMinStartTimeAsc = 'STATE_CHANNELS_MIN_START_TIME_ASC',
  StateChannelsMinStartTimeDesc = 'STATE_CHANNELS_MIN_START_TIME_DESC',
  StateChannelsMinStatusAsc = 'STATE_CHANNELS_MIN_STATUS_ASC',
  StateChannelsMinStatusDesc = 'STATE_CHANNELS_MIN_STATUS_DESC',
  StateChannelsMinTerminatedAtAsc = 'STATE_CHANNELS_MIN_TERMINATED_AT_ASC',
  StateChannelsMinTerminatedAtDesc = 'STATE_CHANNELS_MIN_TERMINATED_AT_DESC',
  StateChannelsMinTerminateByIndexerAsc = 'STATE_CHANNELS_MIN_TERMINATE_BY_INDEXER_ASC',
  StateChannelsMinTerminateByIndexerDesc = 'STATE_CHANNELS_MIN_TERMINATE_BY_INDEXER_DESC',
  StateChannelsMinTotalAsc = 'STATE_CHANNELS_MIN_TOTAL_ASC',
  StateChannelsMinTotalDesc = 'STATE_CHANNELS_MIN_TOTAL_DESC',
  StateChannelsStddevPopulationAgentAsc = 'STATE_CHANNELS_STDDEV_POPULATION_AGENT_ASC',
  StateChannelsStddevPopulationAgentDesc = 'STATE_CHANNELS_STDDEV_POPULATION_AGENT_DESC',
  StateChannelsStddevPopulationBlockRangeAsc = 'STATE_CHANNELS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  StateChannelsStddevPopulationBlockRangeDesc = 'STATE_CHANNELS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  StateChannelsStddevPopulationConsumerAsc = 'STATE_CHANNELS_STDDEV_POPULATION_CONSUMER_ASC',
  StateChannelsStddevPopulationConsumerDesc = 'STATE_CHANNELS_STDDEV_POPULATION_CONSUMER_DESC',
  StateChannelsStddevPopulationDeploymentIdAsc = 'STATE_CHANNELS_STDDEV_POPULATION_DEPLOYMENT_ID_ASC',
  StateChannelsStddevPopulationDeploymentIdDesc = 'STATE_CHANNELS_STDDEV_POPULATION_DEPLOYMENT_ID_DESC',
  StateChannelsStddevPopulationExpiredAtAsc = 'STATE_CHANNELS_STDDEV_POPULATION_EXPIRED_AT_ASC',
  StateChannelsStddevPopulationExpiredAtDesc = 'STATE_CHANNELS_STDDEV_POPULATION_EXPIRED_AT_DESC',
  StateChannelsStddevPopulationIdAsc = 'STATE_CHANNELS_STDDEV_POPULATION_ID_ASC',
  StateChannelsStddevPopulationIdDesc = 'STATE_CHANNELS_STDDEV_POPULATION_ID_DESC',
  StateChannelsStddevPopulationIndexerAsc = 'STATE_CHANNELS_STDDEV_POPULATION_INDEXER_ASC',
  StateChannelsStddevPopulationIndexerDesc = 'STATE_CHANNELS_STDDEV_POPULATION_INDEXER_DESC',
  StateChannelsStddevPopulationIsFinalAsc = 'STATE_CHANNELS_STDDEV_POPULATION_IS_FINAL_ASC',
  StateChannelsStddevPopulationIsFinalDesc = 'STATE_CHANNELS_STDDEV_POPULATION_IS_FINAL_DESC',
  StateChannelsStddevPopulationLastEventAsc = 'STATE_CHANNELS_STDDEV_POPULATION_LAST_EVENT_ASC',
  StateChannelsStddevPopulationLastEventDesc = 'STATE_CHANNELS_STDDEV_POPULATION_LAST_EVENT_DESC',
  StateChannelsStddevPopulationPriceAsc = 'STATE_CHANNELS_STDDEV_POPULATION_PRICE_ASC',
  StateChannelsStddevPopulationPriceDesc = 'STATE_CHANNELS_STDDEV_POPULATION_PRICE_DESC',
  StateChannelsStddevPopulationRealTotalAsc = 'STATE_CHANNELS_STDDEV_POPULATION_REAL_TOTAL_ASC',
  StateChannelsStddevPopulationRealTotalDesc = 'STATE_CHANNELS_STDDEV_POPULATION_REAL_TOTAL_DESC',
  StateChannelsStddevPopulationSpentAsc = 'STATE_CHANNELS_STDDEV_POPULATION_SPENT_ASC',
  StateChannelsStddevPopulationSpentDesc = 'STATE_CHANNELS_STDDEV_POPULATION_SPENT_DESC',
  StateChannelsStddevPopulationStartTimeAsc = 'STATE_CHANNELS_STDDEV_POPULATION_START_TIME_ASC',
  StateChannelsStddevPopulationStartTimeDesc = 'STATE_CHANNELS_STDDEV_POPULATION_START_TIME_DESC',
  StateChannelsStddevPopulationStatusAsc = 'STATE_CHANNELS_STDDEV_POPULATION_STATUS_ASC',
  StateChannelsStddevPopulationStatusDesc = 'STATE_CHANNELS_STDDEV_POPULATION_STATUS_DESC',
  StateChannelsStddevPopulationTerminatedAtAsc = 'STATE_CHANNELS_STDDEV_POPULATION_TERMINATED_AT_ASC',
  StateChannelsStddevPopulationTerminatedAtDesc = 'STATE_CHANNELS_STDDEV_POPULATION_TERMINATED_AT_DESC',
  StateChannelsStddevPopulationTerminateByIndexerAsc = 'STATE_CHANNELS_STDDEV_POPULATION_TERMINATE_BY_INDEXER_ASC',
  StateChannelsStddevPopulationTerminateByIndexerDesc = 'STATE_CHANNELS_STDDEV_POPULATION_TERMINATE_BY_INDEXER_DESC',
  StateChannelsStddevPopulationTotalAsc = 'STATE_CHANNELS_STDDEV_POPULATION_TOTAL_ASC',
  StateChannelsStddevPopulationTotalDesc = 'STATE_CHANNELS_STDDEV_POPULATION_TOTAL_DESC',
  StateChannelsStddevSampleAgentAsc = 'STATE_CHANNELS_STDDEV_SAMPLE_AGENT_ASC',
  StateChannelsStddevSampleAgentDesc = 'STATE_CHANNELS_STDDEV_SAMPLE_AGENT_DESC',
  StateChannelsStddevSampleBlockRangeAsc = 'STATE_CHANNELS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  StateChannelsStddevSampleBlockRangeDesc = 'STATE_CHANNELS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  StateChannelsStddevSampleConsumerAsc = 'STATE_CHANNELS_STDDEV_SAMPLE_CONSUMER_ASC',
  StateChannelsStddevSampleConsumerDesc = 'STATE_CHANNELS_STDDEV_SAMPLE_CONSUMER_DESC',
  StateChannelsStddevSampleDeploymentIdAsc = 'STATE_CHANNELS_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC',
  StateChannelsStddevSampleDeploymentIdDesc = 'STATE_CHANNELS_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC',
  StateChannelsStddevSampleExpiredAtAsc = 'STATE_CHANNELS_STDDEV_SAMPLE_EXPIRED_AT_ASC',
  StateChannelsStddevSampleExpiredAtDesc = 'STATE_CHANNELS_STDDEV_SAMPLE_EXPIRED_AT_DESC',
  StateChannelsStddevSampleIdAsc = 'STATE_CHANNELS_STDDEV_SAMPLE_ID_ASC',
  StateChannelsStddevSampleIdDesc = 'STATE_CHANNELS_STDDEV_SAMPLE_ID_DESC',
  StateChannelsStddevSampleIndexerAsc = 'STATE_CHANNELS_STDDEV_SAMPLE_INDEXER_ASC',
  StateChannelsStddevSampleIndexerDesc = 'STATE_CHANNELS_STDDEV_SAMPLE_INDEXER_DESC',
  StateChannelsStddevSampleIsFinalAsc = 'STATE_CHANNELS_STDDEV_SAMPLE_IS_FINAL_ASC',
  StateChannelsStddevSampleIsFinalDesc = 'STATE_CHANNELS_STDDEV_SAMPLE_IS_FINAL_DESC',
  StateChannelsStddevSampleLastEventAsc = 'STATE_CHANNELS_STDDEV_SAMPLE_LAST_EVENT_ASC',
  StateChannelsStddevSampleLastEventDesc = 'STATE_CHANNELS_STDDEV_SAMPLE_LAST_EVENT_DESC',
  StateChannelsStddevSamplePriceAsc = 'STATE_CHANNELS_STDDEV_SAMPLE_PRICE_ASC',
  StateChannelsStddevSamplePriceDesc = 'STATE_CHANNELS_STDDEV_SAMPLE_PRICE_DESC',
  StateChannelsStddevSampleRealTotalAsc = 'STATE_CHANNELS_STDDEV_SAMPLE_REAL_TOTAL_ASC',
  StateChannelsStddevSampleRealTotalDesc = 'STATE_CHANNELS_STDDEV_SAMPLE_REAL_TOTAL_DESC',
  StateChannelsStddevSampleSpentAsc = 'STATE_CHANNELS_STDDEV_SAMPLE_SPENT_ASC',
  StateChannelsStddevSampleSpentDesc = 'STATE_CHANNELS_STDDEV_SAMPLE_SPENT_DESC',
  StateChannelsStddevSampleStartTimeAsc = 'STATE_CHANNELS_STDDEV_SAMPLE_START_TIME_ASC',
  StateChannelsStddevSampleStartTimeDesc = 'STATE_CHANNELS_STDDEV_SAMPLE_START_TIME_DESC',
  StateChannelsStddevSampleStatusAsc = 'STATE_CHANNELS_STDDEV_SAMPLE_STATUS_ASC',
  StateChannelsStddevSampleStatusDesc = 'STATE_CHANNELS_STDDEV_SAMPLE_STATUS_DESC',
  StateChannelsStddevSampleTerminatedAtAsc = 'STATE_CHANNELS_STDDEV_SAMPLE_TERMINATED_AT_ASC',
  StateChannelsStddevSampleTerminatedAtDesc = 'STATE_CHANNELS_STDDEV_SAMPLE_TERMINATED_AT_DESC',
  StateChannelsStddevSampleTerminateByIndexerAsc = 'STATE_CHANNELS_STDDEV_SAMPLE_TERMINATE_BY_INDEXER_ASC',
  StateChannelsStddevSampleTerminateByIndexerDesc = 'STATE_CHANNELS_STDDEV_SAMPLE_TERMINATE_BY_INDEXER_DESC',
  StateChannelsStddevSampleTotalAsc = 'STATE_CHANNELS_STDDEV_SAMPLE_TOTAL_ASC',
  StateChannelsStddevSampleTotalDesc = 'STATE_CHANNELS_STDDEV_SAMPLE_TOTAL_DESC',
  StateChannelsSumAgentAsc = 'STATE_CHANNELS_SUM_AGENT_ASC',
  StateChannelsSumAgentDesc = 'STATE_CHANNELS_SUM_AGENT_DESC',
  StateChannelsSumBlockRangeAsc = 'STATE_CHANNELS_SUM_BLOCK_RANGE_ASC',
  StateChannelsSumBlockRangeDesc = 'STATE_CHANNELS_SUM_BLOCK_RANGE_DESC',
  StateChannelsSumConsumerAsc = 'STATE_CHANNELS_SUM_CONSUMER_ASC',
  StateChannelsSumConsumerDesc = 'STATE_CHANNELS_SUM_CONSUMER_DESC',
  StateChannelsSumDeploymentIdAsc = 'STATE_CHANNELS_SUM_DEPLOYMENT_ID_ASC',
  StateChannelsSumDeploymentIdDesc = 'STATE_CHANNELS_SUM_DEPLOYMENT_ID_DESC',
  StateChannelsSumExpiredAtAsc = 'STATE_CHANNELS_SUM_EXPIRED_AT_ASC',
  StateChannelsSumExpiredAtDesc = 'STATE_CHANNELS_SUM_EXPIRED_AT_DESC',
  StateChannelsSumIdAsc = 'STATE_CHANNELS_SUM_ID_ASC',
  StateChannelsSumIdDesc = 'STATE_CHANNELS_SUM_ID_DESC',
  StateChannelsSumIndexerAsc = 'STATE_CHANNELS_SUM_INDEXER_ASC',
  StateChannelsSumIndexerDesc = 'STATE_CHANNELS_SUM_INDEXER_DESC',
  StateChannelsSumIsFinalAsc = 'STATE_CHANNELS_SUM_IS_FINAL_ASC',
  StateChannelsSumIsFinalDesc = 'STATE_CHANNELS_SUM_IS_FINAL_DESC',
  StateChannelsSumLastEventAsc = 'STATE_CHANNELS_SUM_LAST_EVENT_ASC',
  StateChannelsSumLastEventDesc = 'STATE_CHANNELS_SUM_LAST_EVENT_DESC',
  StateChannelsSumPriceAsc = 'STATE_CHANNELS_SUM_PRICE_ASC',
  StateChannelsSumPriceDesc = 'STATE_CHANNELS_SUM_PRICE_DESC',
  StateChannelsSumRealTotalAsc = 'STATE_CHANNELS_SUM_REAL_TOTAL_ASC',
  StateChannelsSumRealTotalDesc = 'STATE_CHANNELS_SUM_REAL_TOTAL_DESC',
  StateChannelsSumSpentAsc = 'STATE_CHANNELS_SUM_SPENT_ASC',
  StateChannelsSumSpentDesc = 'STATE_CHANNELS_SUM_SPENT_DESC',
  StateChannelsSumStartTimeAsc = 'STATE_CHANNELS_SUM_START_TIME_ASC',
  StateChannelsSumStartTimeDesc = 'STATE_CHANNELS_SUM_START_TIME_DESC',
  StateChannelsSumStatusAsc = 'STATE_CHANNELS_SUM_STATUS_ASC',
  StateChannelsSumStatusDesc = 'STATE_CHANNELS_SUM_STATUS_DESC',
  StateChannelsSumTerminatedAtAsc = 'STATE_CHANNELS_SUM_TERMINATED_AT_ASC',
  StateChannelsSumTerminatedAtDesc = 'STATE_CHANNELS_SUM_TERMINATED_AT_DESC',
  StateChannelsSumTerminateByIndexerAsc = 'STATE_CHANNELS_SUM_TERMINATE_BY_INDEXER_ASC',
  StateChannelsSumTerminateByIndexerDesc = 'STATE_CHANNELS_SUM_TERMINATE_BY_INDEXER_DESC',
  StateChannelsSumTotalAsc = 'STATE_CHANNELS_SUM_TOTAL_ASC',
  StateChannelsSumTotalDesc = 'STATE_CHANNELS_SUM_TOTAL_DESC',
  StateChannelsVariancePopulationAgentAsc = 'STATE_CHANNELS_VARIANCE_POPULATION_AGENT_ASC',
  StateChannelsVariancePopulationAgentDesc = 'STATE_CHANNELS_VARIANCE_POPULATION_AGENT_DESC',
  StateChannelsVariancePopulationBlockRangeAsc = 'STATE_CHANNELS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  StateChannelsVariancePopulationBlockRangeDesc = 'STATE_CHANNELS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  StateChannelsVariancePopulationConsumerAsc = 'STATE_CHANNELS_VARIANCE_POPULATION_CONSUMER_ASC',
  StateChannelsVariancePopulationConsumerDesc = 'STATE_CHANNELS_VARIANCE_POPULATION_CONSUMER_DESC',
  StateChannelsVariancePopulationDeploymentIdAsc = 'STATE_CHANNELS_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC',
  StateChannelsVariancePopulationDeploymentIdDesc = 'STATE_CHANNELS_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC',
  StateChannelsVariancePopulationExpiredAtAsc = 'STATE_CHANNELS_VARIANCE_POPULATION_EXPIRED_AT_ASC',
  StateChannelsVariancePopulationExpiredAtDesc = 'STATE_CHANNELS_VARIANCE_POPULATION_EXPIRED_AT_DESC',
  StateChannelsVariancePopulationIdAsc = 'STATE_CHANNELS_VARIANCE_POPULATION_ID_ASC',
  StateChannelsVariancePopulationIdDesc = 'STATE_CHANNELS_VARIANCE_POPULATION_ID_DESC',
  StateChannelsVariancePopulationIndexerAsc = 'STATE_CHANNELS_VARIANCE_POPULATION_INDEXER_ASC',
  StateChannelsVariancePopulationIndexerDesc = 'STATE_CHANNELS_VARIANCE_POPULATION_INDEXER_DESC',
  StateChannelsVariancePopulationIsFinalAsc = 'STATE_CHANNELS_VARIANCE_POPULATION_IS_FINAL_ASC',
  StateChannelsVariancePopulationIsFinalDesc = 'STATE_CHANNELS_VARIANCE_POPULATION_IS_FINAL_DESC',
  StateChannelsVariancePopulationLastEventAsc = 'STATE_CHANNELS_VARIANCE_POPULATION_LAST_EVENT_ASC',
  StateChannelsVariancePopulationLastEventDesc = 'STATE_CHANNELS_VARIANCE_POPULATION_LAST_EVENT_DESC',
  StateChannelsVariancePopulationPriceAsc = 'STATE_CHANNELS_VARIANCE_POPULATION_PRICE_ASC',
  StateChannelsVariancePopulationPriceDesc = 'STATE_CHANNELS_VARIANCE_POPULATION_PRICE_DESC',
  StateChannelsVariancePopulationRealTotalAsc = 'STATE_CHANNELS_VARIANCE_POPULATION_REAL_TOTAL_ASC',
  StateChannelsVariancePopulationRealTotalDesc = 'STATE_CHANNELS_VARIANCE_POPULATION_REAL_TOTAL_DESC',
  StateChannelsVariancePopulationSpentAsc = 'STATE_CHANNELS_VARIANCE_POPULATION_SPENT_ASC',
  StateChannelsVariancePopulationSpentDesc = 'STATE_CHANNELS_VARIANCE_POPULATION_SPENT_DESC',
  StateChannelsVariancePopulationStartTimeAsc = 'STATE_CHANNELS_VARIANCE_POPULATION_START_TIME_ASC',
  StateChannelsVariancePopulationStartTimeDesc = 'STATE_CHANNELS_VARIANCE_POPULATION_START_TIME_DESC',
  StateChannelsVariancePopulationStatusAsc = 'STATE_CHANNELS_VARIANCE_POPULATION_STATUS_ASC',
  StateChannelsVariancePopulationStatusDesc = 'STATE_CHANNELS_VARIANCE_POPULATION_STATUS_DESC',
  StateChannelsVariancePopulationTerminatedAtAsc = 'STATE_CHANNELS_VARIANCE_POPULATION_TERMINATED_AT_ASC',
  StateChannelsVariancePopulationTerminatedAtDesc = 'STATE_CHANNELS_VARIANCE_POPULATION_TERMINATED_AT_DESC',
  StateChannelsVariancePopulationTerminateByIndexerAsc = 'STATE_CHANNELS_VARIANCE_POPULATION_TERMINATE_BY_INDEXER_ASC',
  StateChannelsVariancePopulationTerminateByIndexerDesc = 'STATE_CHANNELS_VARIANCE_POPULATION_TERMINATE_BY_INDEXER_DESC',
  StateChannelsVariancePopulationTotalAsc = 'STATE_CHANNELS_VARIANCE_POPULATION_TOTAL_ASC',
  StateChannelsVariancePopulationTotalDesc = 'STATE_CHANNELS_VARIANCE_POPULATION_TOTAL_DESC',
  StateChannelsVarianceSampleAgentAsc = 'STATE_CHANNELS_VARIANCE_SAMPLE_AGENT_ASC',
  StateChannelsVarianceSampleAgentDesc = 'STATE_CHANNELS_VARIANCE_SAMPLE_AGENT_DESC',
  StateChannelsVarianceSampleBlockRangeAsc = 'STATE_CHANNELS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  StateChannelsVarianceSampleBlockRangeDesc = 'STATE_CHANNELS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  StateChannelsVarianceSampleConsumerAsc = 'STATE_CHANNELS_VARIANCE_SAMPLE_CONSUMER_ASC',
  StateChannelsVarianceSampleConsumerDesc = 'STATE_CHANNELS_VARIANCE_SAMPLE_CONSUMER_DESC',
  StateChannelsVarianceSampleDeploymentIdAsc = 'STATE_CHANNELS_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC',
  StateChannelsVarianceSampleDeploymentIdDesc = 'STATE_CHANNELS_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC',
  StateChannelsVarianceSampleExpiredAtAsc = 'STATE_CHANNELS_VARIANCE_SAMPLE_EXPIRED_AT_ASC',
  StateChannelsVarianceSampleExpiredAtDesc = 'STATE_CHANNELS_VARIANCE_SAMPLE_EXPIRED_AT_DESC',
  StateChannelsVarianceSampleIdAsc = 'STATE_CHANNELS_VARIANCE_SAMPLE_ID_ASC',
  StateChannelsVarianceSampleIdDesc = 'STATE_CHANNELS_VARIANCE_SAMPLE_ID_DESC',
  StateChannelsVarianceSampleIndexerAsc = 'STATE_CHANNELS_VARIANCE_SAMPLE_INDEXER_ASC',
  StateChannelsVarianceSampleIndexerDesc = 'STATE_CHANNELS_VARIANCE_SAMPLE_INDEXER_DESC',
  StateChannelsVarianceSampleIsFinalAsc = 'STATE_CHANNELS_VARIANCE_SAMPLE_IS_FINAL_ASC',
  StateChannelsVarianceSampleIsFinalDesc = 'STATE_CHANNELS_VARIANCE_SAMPLE_IS_FINAL_DESC',
  StateChannelsVarianceSampleLastEventAsc = 'STATE_CHANNELS_VARIANCE_SAMPLE_LAST_EVENT_ASC',
  StateChannelsVarianceSampleLastEventDesc = 'STATE_CHANNELS_VARIANCE_SAMPLE_LAST_EVENT_DESC',
  StateChannelsVarianceSamplePriceAsc = 'STATE_CHANNELS_VARIANCE_SAMPLE_PRICE_ASC',
  StateChannelsVarianceSamplePriceDesc = 'STATE_CHANNELS_VARIANCE_SAMPLE_PRICE_DESC',
  StateChannelsVarianceSampleRealTotalAsc = 'STATE_CHANNELS_VARIANCE_SAMPLE_REAL_TOTAL_ASC',
  StateChannelsVarianceSampleRealTotalDesc = 'STATE_CHANNELS_VARIANCE_SAMPLE_REAL_TOTAL_DESC',
  StateChannelsVarianceSampleSpentAsc = 'STATE_CHANNELS_VARIANCE_SAMPLE_SPENT_ASC',
  StateChannelsVarianceSampleSpentDesc = 'STATE_CHANNELS_VARIANCE_SAMPLE_SPENT_DESC',
  StateChannelsVarianceSampleStartTimeAsc = 'STATE_CHANNELS_VARIANCE_SAMPLE_START_TIME_ASC',
  StateChannelsVarianceSampleStartTimeDesc = 'STATE_CHANNELS_VARIANCE_SAMPLE_START_TIME_DESC',
  StateChannelsVarianceSampleStatusAsc = 'STATE_CHANNELS_VARIANCE_SAMPLE_STATUS_ASC',
  StateChannelsVarianceSampleStatusDesc = 'STATE_CHANNELS_VARIANCE_SAMPLE_STATUS_DESC',
  StateChannelsVarianceSampleTerminatedAtAsc = 'STATE_CHANNELS_VARIANCE_SAMPLE_TERMINATED_AT_ASC',
  StateChannelsVarianceSampleTerminatedAtDesc = 'STATE_CHANNELS_VARIANCE_SAMPLE_TERMINATED_AT_DESC',
  StateChannelsVarianceSampleTerminateByIndexerAsc = 'STATE_CHANNELS_VARIANCE_SAMPLE_TERMINATE_BY_INDEXER_ASC',
  StateChannelsVarianceSampleTerminateByIndexerDesc = 'STATE_CHANNELS_VARIANCE_SAMPLE_TERMINATE_BY_INDEXER_DESC',
  StateChannelsVarianceSampleTotalAsc = 'STATE_CHANNELS_VARIANCE_SAMPLE_TOTAL_ASC',
  StateChannelsVarianceSampleTotalDesc = 'STATE_CHANNELS_VARIANCE_SAMPLE_TOTAL_DESC'
}

export type Dispute = Node & {
  __typename?: 'Dispute';
  disputeType: DisputeType;
  fisherman: Scalars['String']['output'];
  id: Scalars['String']['output'];
  isFinalized: Scalars['Boolean']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  returnAmount?: Maybe<Scalars['BigFloat']['output']>;
  runner: Scalars['String']['output'];
  slashAmount?: Maybe<Scalars['BigFloat']['output']>;
  state: DisputeState;
};

export type DisputeAggregates = {
  __typename?: 'DisputeAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  average?: Maybe<DisputeAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  distinctCount?: Maybe<DisputeDistinctCountAggregates>;
  keys?: Maybe<Array<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  max?: Maybe<DisputeMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  min?: Maybe<DisputeMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevPopulation?: Maybe<DisputeStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevSample?: Maybe<DisputeStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  sum?: Maybe<DisputeSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  variancePopulation?: Maybe<DisputeVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  varianceSample?: Maybe<DisputeVarianceSampleAggregates>;
};

export type DisputeAverageAggregates = {
  __typename?: 'DisputeAverageAggregates';
  /** Mean average of returnAmount across the matching connection */
  returnAmount?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of slashAmount across the matching connection */
  slashAmount?: Maybe<Scalars['BigFloat']['output']>;
};

export type DisputeDistinctCountAggregates = {
  __typename?: 'DisputeDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  _blockRange?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  _id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of disputeType across the matching connection */
  disputeType?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of fisherman across the matching connection */
  fisherman?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of isFinalized across the matching connection */
  isFinalized?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of returnAmount across the matching connection */
  returnAmount?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of runner across the matching connection */
  runner?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of slashAmount across the matching connection */
  slashAmount?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of state across the matching connection */
  state?: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `Dispute` object types. All fields are combined with a logical ‘and.’ */
export type DisputeFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<DisputeFilter>>;
  /** Filter by the object’s `disputeType` field. */
  disputeType?: InputMaybe<DisputeTypeFilter>;
  /** Filter by the object’s `fisherman` field. */
  fisherman?: InputMaybe<StringFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<StringFilter>;
  /** Filter by the object’s `isFinalized` field. */
  isFinalized?: InputMaybe<BooleanFilter>;
  /** Negates the expression. */
  not?: InputMaybe<DisputeFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<DisputeFilter>>;
  /** Filter by the object’s `returnAmount` field. */
  returnAmount?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `runner` field. */
  runner?: InputMaybe<StringFilter>;
  /** Filter by the object’s `slashAmount` field. */
  slashAmount?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `state` field. */
  state?: InputMaybe<DisputeStateFilter>;
};

export type DisputeMaxAggregates = {
  __typename?: 'DisputeMaxAggregates';
  /** Maximum of returnAmount across the matching connection */
  returnAmount?: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of slashAmount across the matching connection */
  slashAmount?: Maybe<Scalars['BigFloat']['output']>;
};

export type DisputeMinAggregates = {
  __typename?: 'DisputeMinAggregates';
  /** Minimum of returnAmount across the matching connection */
  returnAmount?: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of slashAmount across the matching connection */
  slashAmount?: Maybe<Scalars['BigFloat']['output']>;
};

export enum DisputeState {
  Accepted = 'ACCEPTED',
  Cancelled = 'CANCELLED',
  Ongoing = 'ONGOING',
  Rejected = 'REJECTED'
}

/** A filter to be used against DisputeState fields. All fields are combined with a logical ‘and.’ */
export type DisputeStateFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: InputMaybe<DisputeState>;
  /** Equal to the specified value. */
  equalTo?: InputMaybe<DisputeState>;
  /** Greater than the specified value. */
  greaterThan?: InputMaybe<DisputeState>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: InputMaybe<DisputeState>;
  /** Included in the specified list. */
  in?: InputMaybe<Array<DisputeState>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: InputMaybe<Scalars['Boolean']['input']>;
  /** Less than the specified value. */
  lessThan?: InputMaybe<DisputeState>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: InputMaybe<DisputeState>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: InputMaybe<DisputeState>;
  /** Not equal to the specified value. */
  notEqualTo?: InputMaybe<DisputeState>;
  /** Not included in the specified list. */
  notIn?: InputMaybe<Array<DisputeState>>;
};

export type DisputeStddevPopulationAggregates = {
  __typename?: 'DisputeStddevPopulationAggregates';
  /** Population standard deviation of returnAmount across the matching connection */
  returnAmount?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of slashAmount across the matching connection */
  slashAmount?: Maybe<Scalars['BigFloat']['output']>;
};

export type DisputeStddevSampleAggregates = {
  __typename?: 'DisputeStddevSampleAggregates';
  /** Sample standard deviation of returnAmount across the matching connection */
  returnAmount?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of slashAmount across the matching connection */
  slashAmount?: Maybe<Scalars['BigFloat']['output']>;
};

export type DisputeSumAggregates = {
  __typename?: 'DisputeSumAggregates';
  /** Sum of returnAmount across the matching connection */
  returnAmount: Scalars['BigFloat']['output'];
  /** Sum of slashAmount across the matching connection */
  slashAmount: Scalars['BigFloat']['output'];
};

export enum DisputeType {
  Poi = 'POI',
  Query = 'QUERY'
}

/** A filter to be used against DisputeType fields. All fields are combined with a logical ‘and.’ */
export type DisputeTypeFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: InputMaybe<DisputeType>;
  /** Equal to the specified value. */
  equalTo?: InputMaybe<DisputeType>;
  /** Greater than the specified value. */
  greaterThan?: InputMaybe<DisputeType>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: InputMaybe<DisputeType>;
  /** Included in the specified list. */
  in?: InputMaybe<Array<DisputeType>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: InputMaybe<Scalars['Boolean']['input']>;
  /** Less than the specified value. */
  lessThan?: InputMaybe<DisputeType>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: InputMaybe<DisputeType>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: InputMaybe<DisputeType>;
  /** Not equal to the specified value. */
  notEqualTo?: InputMaybe<DisputeType>;
  /** Not included in the specified list. */
  notIn?: InputMaybe<Array<DisputeType>>;
};

export type DisputeVariancePopulationAggregates = {
  __typename?: 'DisputeVariancePopulationAggregates';
  /** Population variance of returnAmount across the matching connection */
  returnAmount?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of slashAmount across the matching connection */
  slashAmount?: Maybe<Scalars['BigFloat']['output']>;
};

export type DisputeVarianceSampleAggregates = {
  __typename?: 'DisputeVarianceSampleAggregates';
  /** Sample variance of returnAmount across the matching connection */
  returnAmount?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of slashAmount across the matching connection */
  slashAmount?: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `Dispute` values. */
export type DisputesConnection = {
  __typename?: 'DisputesConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<DisputeAggregates>;
  /** A list of edges which contains the `Dispute` and cursor to aid in pagination. */
  edges: Array<DisputesEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<DisputeAggregates>>;
  /** A list of `Dispute` objects. */
  nodes: Array<Maybe<Dispute>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Dispute` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Dispute` values. */
export type DisputesConnectionGroupedAggregatesArgs = {
  groupBy: Array<DisputesGroupBy>;
  having?: InputMaybe<DisputesHavingInput>;
};

/** A `Dispute` edge in the connection. */
export type DisputesEdge = {
  __typename?: 'DisputesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `Dispute` at the end of the edge. */
  node?: Maybe<Dispute>;
};

/** Grouping methods for `Dispute` for usage during aggregation. */
export enum DisputesGroupBy {
  DisputeType = 'DISPUTE_TYPE',
  Fisherman = 'FISHERMAN',
  Id = 'ID',
  IsFinalized = 'IS_FINALIZED',
  ReturnAmount = 'RETURN_AMOUNT',
  Runner = 'RUNNER',
  SlashAmount = 'SLASH_AMOUNT',
  State = 'STATE'
}

export type DisputesHavingAverageInput = {
  returnAmount?: InputMaybe<HavingBigfloatFilter>;
  slashAmount?: InputMaybe<HavingBigfloatFilter>;
};

export type DisputesHavingDistinctCountInput = {
  returnAmount?: InputMaybe<HavingBigfloatFilter>;
  slashAmount?: InputMaybe<HavingBigfloatFilter>;
};

/** Conditions for `Dispute` aggregates. */
export type DisputesHavingInput = {
  AND?: InputMaybe<Array<DisputesHavingInput>>;
  OR?: InputMaybe<Array<DisputesHavingInput>>;
  average?: InputMaybe<DisputesHavingAverageInput>;
  distinctCount?: InputMaybe<DisputesHavingDistinctCountInput>;
  max?: InputMaybe<DisputesHavingMaxInput>;
  min?: InputMaybe<DisputesHavingMinInput>;
  stddevPopulation?: InputMaybe<DisputesHavingStddevPopulationInput>;
  stddevSample?: InputMaybe<DisputesHavingStddevSampleInput>;
  sum?: InputMaybe<DisputesHavingSumInput>;
  variancePopulation?: InputMaybe<DisputesHavingVariancePopulationInput>;
  varianceSample?: InputMaybe<DisputesHavingVarianceSampleInput>;
};

export type DisputesHavingMaxInput = {
  returnAmount?: InputMaybe<HavingBigfloatFilter>;
  slashAmount?: InputMaybe<HavingBigfloatFilter>;
};

export type DisputesHavingMinInput = {
  returnAmount?: InputMaybe<HavingBigfloatFilter>;
  slashAmount?: InputMaybe<HavingBigfloatFilter>;
};

export type DisputesHavingStddevPopulationInput = {
  returnAmount?: InputMaybe<HavingBigfloatFilter>;
  slashAmount?: InputMaybe<HavingBigfloatFilter>;
};

export type DisputesHavingStddevSampleInput = {
  returnAmount?: InputMaybe<HavingBigfloatFilter>;
  slashAmount?: InputMaybe<HavingBigfloatFilter>;
};

export type DisputesHavingSumInput = {
  returnAmount?: InputMaybe<HavingBigfloatFilter>;
  slashAmount?: InputMaybe<HavingBigfloatFilter>;
};

export type DisputesHavingVariancePopulationInput = {
  returnAmount?: InputMaybe<HavingBigfloatFilter>;
  slashAmount?: InputMaybe<HavingBigfloatFilter>;
};

export type DisputesHavingVarianceSampleInput = {
  returnAmount?: InputMaybe<HavingBigfloatFilter>;
  slashAmount?: InputMaybe<HavingBigfloatFilter>;
};

/** Methods to use when ordering `Dispute`. */
export enum DisputesOrderBy {
  DisputeTypeAsc = 'DISPUTE_TYPE_ASC',
  DisputeTypeDesc = 'DISPUTE_TYPE_DESC',
  FishermanAsc = 'FISHERMAN_ASC',
  FishermanDesc = 'FISHERMAN_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  IsFinalizedAsc = 'IS_FINALIZED_ASC',
  IsFinalizedDesc = 'IS_FINALIZED_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  ReturnAmountAsc = 'RETURN_AMOUNT_ASC',
  ReturnAmountDesc = 'RETURN_AMOUNT_DESC',
  RunnerAsc = 'RUNNER_ASC',
  RunnerDesc = 'RUNNER_DESC',
  SlashAmountAsc = 'SLASH_AMOUNT_ASC',
  SlashAmountDesc = 'SLASH_AMOUNT_DESC',
  StateAsc = 'STATE_ASC',
  StateDesc = 'STATE_DESC'
}

export type Era = Node & {
  __typename?: 'Era';
  createdBlock?: Maybe<Scalars['Int']['output']>;
  /** Reads and enables pagination through a set of `Delegator`. */
  delegatorsByEraRewardEraIdAndDelegatorId: EraDelegatorsByEraRewardEraIdAndDelegatorIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Delegator`. */
  delegatorsByEraStakeEraIdAndDelegatorId: EraDelegatorsByEraStakeEraIdAndDelegatorIdManyToManyConnection;
  endTime?: Maybe<Scalars['Datetime']['output']>;
  eraPeriod?: Maybe<Scalars['String']['output']>;
  /** Reads and enables pagination through a set of `EraReward`. */
  eraRewards: EraRewardsConnection;
  /** Reads and enables pagination through a set of `EraStakeUpdate`. */
  eraStakeUpdatesByLastUpdateEraId: EraStakeUpdatesConnection;
  /** Reads and enables pagination through a set of `EraStake`. */
  eraStakes: EraStakesConnection;
  forceNext?: Maybe<Scalars['Boolean']['output']>;
  id: Scalars['String']['output'];
  /** Reads and enables pagination through a set of `IndexerCommissionRate`. */
  indexerCommissionRates: IndexerCommissionRatesConnection;
  /** Reads and enables pagination through a set of `IndexerStakeSummary`. */
  indexerStakeSummaries: IndexerStakeSummariesConnection;
  /** Reads and enables pagination through a set of `IndexerStake`. */
  indexerStakes: IndexerStakesConnection;
  /** Reads and enables pagination through a set of `Indexer`. */
  indexersByEraRewardEraIdAndIndexerId: EraIndexersByEraRewardEraIdAndIndexerIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Indexer`. */
  indexersByEraStakeEraIdAndIndexerId: EraIndexersByEraStakeEraIdAndIndexerIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Indexer`. */
  indexersByIndexerCommissionRateEraIdAndIndexerId: EraIndexersByIndexerCommissionRateEraIdAndIndexerIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Indexer`. */
  indexersByIndexerStakeEraIdAndIndexerId: EraIndexersByIndexerStakeEraIdAndIndexerIdManyToManyConnection;
  lastEvent?: Maybe<Scalars['String']['output']>;
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  startTime: Scalars['Datetime']['output'];
};


export type EraDelegatorsByEraRewardEraIdAndDelegatorIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Delegators_Distinct_Enum>>>;
  filter?: InputMaybe<DelegatorFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<DelegatorsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type EraDelegatorsByEraStakeEraIdAndDelegatorIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Delegators_Distinct_Enum>>>;
  filter?: InputMaybe<DelegatorFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<DelegatorsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type EraEraRewardsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Era_Rewards_Distinct_Enum>>>;
  filter?: InputMaybe<EraRewardFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<EraRewardsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type EraEraStakeUpdatesByLastUpdateEraIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Era_Stake_Updates_Distinct_Enum>>>;
  filter?: InputMaybe<EraStakeUpdateFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<EraStakeUpdatesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type EraEraStakesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Era_Stakes_Distinct_Enum>>>;
  filter?: InputMaybe<EraStakeFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<EraStakesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type EraIndexerCommissionRatesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Commission_Rates_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerCommissionRateFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexerCommissionRatesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type EraIndexerStakeSummariesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Stake_Summaries_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerStakeSummaryFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexerStakeSummariesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type EraIndexerStakesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Stakes_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerStakeFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexerStakesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type EraIndexersByEraRewardEraIdAndIndexerIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexers_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexersOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type EraIndexersByEraStakeEraIdAndIndexerIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexers_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexersOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type EraIndexersByIndexerCommissionRateEraIdAndIndexerIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexers_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexersOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type EraIndexersByIndexerStakeEraIdAndIndexerIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexers_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexersOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

export type EraAggregates = {
  __typename?: 'EraAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  average?: Maybe<EraAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  distinctCount?: Maybe<EraDistinctCountAggregates>;
  keys?: Maybe<Array<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  max?: Maybe<EraMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  min?: Maybe<EraMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevPopulation?: Maybe<EraStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevSample?: Maybe<EraStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  sum?: Maybe<EraSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  variancePopulation?: Maybe<EraVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  varianceSample?: Maybe<EraVarianceSampleAggregates>;
};

export type EraAverageAggregates = {
  __typename?: 'EraAverageAggregates';
  /** Mean average of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `EraDelegatorApy` values. */
export type EraDelegatorApiesConnection = {
  __typename?: 'EraDelegatorApiesConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<EraDelegatorApyAggregates>;
  /** A list of edges which contains the `EraDelegatorApy` and cursor to aid in pagination. */
  edges: Array<EraDelegatorApiesEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<EraDelegatorApyAggregates>>;
  /** A list of `EraDelegatorApy` objects. */
  nodes: Array<Maybe<EraDelegatorApy>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `EraDelegatorApy` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `EraDelegatorApy` values. */
export type EraDelegatorApiesConnectionGroupedAggregatesArgs = {
  groupBy: Array<EraDelegatorApiesGroupBy>;
  having?: InputMaybe<EraDelegatorApiesHavingInput>;
};

/** A `EraDelegatorApy` edge in the connection. */
export type EraDelegatorApiesEdge = {
  __typename?: 'EraDelegatorApiesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `EraDelegatorApy` at the end of the edge. */
  node?: Maybe<EraDelegatorApy>;
};

/** Grouping methods for `EraDelegatorApy` for usage during aggregation. */
export enum EraDelegatorApiesGroupBy {
  Apy = 'APY',
  CreateAt = 'CREATE_AT',
  CreateAtTruncatedToDay = 'CREATE_AT_TRUNCATED_TO_DAY',
  CreateAtTruncatedToHour = 'CREATE_AT_TRUNCATED_TO_HOUR',
  DelegatorId = 'DELEGATOR_ID',
  EraIdx = 'ERA_IDX',
  Id = 'ID',
  Reward = 'REWARD',
  UpdateAt = 'UPDATE_AT',
  UpdateAtTruncatedToDay = 'UPDATE_AT_TRUNCATED_TO_DAY',
  UpdateAtTruncatedToHour = 'UPDATE_AT_TRUNCATED_TO_HOUR'
}

export type EraDelegatorApiesHavingAverageInput = {
  apy?: InputMaybe<HavingBigfloatFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  reward?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type EraDelegatorApiesHavingDistinctCountInput = {
  apy?: InputMaybe<HavingBigfloatFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  reward?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

/** Conditions for `EraDelegatorApy` aggregates. */
export type EraDelegatorApiesHavingInput = {
  AND?: InputMaybe<Array<EraDelegatorApiesHavingInput>>;
  OR?: InputMaybe<Array<EraDelegatorApiesHavingInput>>;
  average?: InputMaybe<EraDelegatorApiesHavingAverageInput>;
  distinctCount?: InputMaybe<EraDelegatorApiesHavingDistinctCountInput>;
  max?: InputMaybe<EraDelegatorApiesHavingMaxInput>;
  min?: InputMaybe<EraDelegatorApiesHavingMinInput>;
  stddevPopulation?: InputMaybe<EraDelegatorApiesHavingStddevPopulationInput>;
  stddevSample?: InputMaybe<EraDelegatorApiesHavingStddevSampleInput>;
  sum?: InputMaybe<EraDelegatorApiesHavingSumInput>;
  variancePopulation?: InputMaybe<EraDelegatorApiesHavingVariancePopulationInput>;
  varianceSample?: InputMaybe<EraDelegatorApiesHavingVarianceSampleInput>;
};

export type EraDelegatorApiesHavingMaxInput = {
  apy?: InputMaybe<HavingBigfloatFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  reward?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type EraDelegatorApiesHavingMinInput = {
  apy?: InputMaybe<HavingBigfloatFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  reward?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type EraDelegatorApiesHavingStddevPopulationInput = {
  apy?: InputMaybe<HavingBigfloatFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  reward?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type EraDelegatorApiesHavingStddevSampleInput = {
  apy?: InputMaybe<HavingBigfloatFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  reward?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type EraDelegatorApiesHavingSumInput = {
  apy?: InputMaybe<HavingBigfloatFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  reward?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type EraDelegatorApiesHavingVariancePopulationInput = {
  apy?: InputMaybe<HavingBigfloatFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  reward?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type EraDelegatorApiesHavingVarianceSampleInput = {
  apy?: InputMaybe<HavingBigfloatFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  reward?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

/** Methods to use when ordering `EraDelegatorApy`. */
export enum EraDelegatorApiesOrderBy {
  ApyAsc = 'APY_ASC',
  ApyDesc = 'APY_DESC',
  CreateAtAsc = 'CREATE_AT_ASC',
  CreateAtDesc = 'CREATE_AT_DESC',
  DelegatorByDelegatorIdCreatedBlockAsc = 'DELEGATOR_BY_DELEGATOR_ID__CREATED_BLOCK_ASC',
  DelegatorByDelegatorIdCreatedBlockDesc = 'DELEGATOR_BY_DELEGATOR_ID__CREATED_BLOCK_DESC',
  DelegatorByDelegatorIdExitEraAsc = 'DELEGATOR_BY_DELEGATOR_ID__EXIT_ERA_ASC',
  DelegatorByDelegatorIdExitEraDesc = 'DELEGATOR_BY_DELEGATOR_ID__EXIT_ERA_DESC',
  DelegatorByDelegatorIdIdAsc = 'DELEGATOR_BY_DELEGATOR_ID__ID_ASC',
  DelegatorByDelegatorIdIdDesc = 'DELEGATOR_BY_DELEGATOR_ID__ID_DESC',
  DelegatorByDelegatorIdLastEventAsc = 'DELEGATOR_BY_DELEGATOR_ID__LAST_EVENT_ASC',
  DelegatorByDelegatorIdLastEventDesc = 'DELEGATOR_BY_DELEGATOR_ID__LAST_EVENT_DESC',
  DelegatorByDelegatorIdStartEraAsc = 'DELEGATOR_BY_DELEGATOR_ID__START_ERA_ASC',
  DelegatorByDelegatorIdStartEraDesc = 'DELEGATOR_BY_DELEGATOR_ID__START_ERA_DESC',
  DelegatorByDelegatorIdTotalDelegationsAsc = 'DELEGATOR_BY_DELEGATOR_ID__TOTAL_DELEGATIONS_ASC',
  DelegatorByDelegatorIdTotalDelegationsDesc = 'DELEGATOR_BY_DELEGATOR_ID__TOTAL_DELEGATIONS_DESC',
  DelegatorIdAsc = 'DELEGATOR_ID_ASC',
  DelegatorIdDesc = 'DELEGATOR_ID_DESC',
  EraIdxAsc = 'ERA_IDX_ASC',
  EraIdxDesc = 'ERA_IDX_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  RewardAsc = 'REWARD_ASC',
  RewardDesc = 'REWARD_DESC',
  UpdateAtAsc = 'UPDATE_AT_ASC',
  UpdateAtDesc = 'UPDATE_AT_DESC'
}

export type EraDelegatorApy = Node & {
  __typename?: 'EraDelegatorApy';
  apy: Scalars['BigFloat']['output'];
  createAt: Scalars['Datetime']['output'];
  /** Reads a single `Delegator` that is related to this `EraDelegatorApy`. */
  delegator?: Maybe<Delegator>;
  delegatorId: Scalars['String']['output'];
  eraIdx: Scalars['Int']['output'];
  id: Scalars['String']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  reward: Scalars['BigFloat']['output'];
  updateAt: Scalars['Datetime']['output'];
};

export type EraDelegatorApyAggregates = {
  __typename?: 'EraDelegatorApyAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  average?: Maybe<EraDelegatorApyAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  distinctCount?: Maybe<EraDelegatorApyDistinctCountAggregates>;
  keys?: Maybe<Array<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  max?: Maybe<EraDelegatorApyMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  min?: Maybe<EraDelegatorApyMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevPopulation?: Maybe<EraDelegatorApyStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevSample?: Maybe<EraDelegatorApyStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  sum?: Maybe<EraDelegatorApySumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  variancePopulation?: Maybe<EraDelegatorApyVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  varianceSample?: Maybe<EraDelegatorApyVarianceSampleAggregates>;
};

/** A filter to be used against aggregates of `EraDelegatorApy` object types. */
export type EraDelegatorApyAggregatesFilter = {
  /** Mean average aggregate over matching `EraDelegatorApy` objects. */
  average?: InputMaybe<EraDelegatorApyAverageAggregateFilter>;
  /** Distinct count aggregate over matching `EraDelegatorApy` objects. */
  distinctCount?: InputMaybe<EraDelegatorApyDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `EraDelegatorApy` object to be included within the aggregate. */
  filter?: InputMaybe<EraDelegatorApyFilter>;
  /** Maximum aggregate over matching `EraDelegatorApy` objects. */
  max?: InputMaybe<EraDelegatorApyMaxAggregateFilter>;
  /** Minimum aggregate over matching `EraDelegatorApy` objects. */
  min?: InputMaybe<EraDelegatorApyMinAggregateFilter>;
  /** Population standard deviation aggregate over matching `EraDelegatorApy` objects. */
  stddevPopulation?: InputMaybe<EraDelegatorApyStddevPopulationAggregateFilter>;
  /** Sample standard deviation aggregate over matching `EraDelegatorApy` objects. */
  stddevSample?: InputMaybe<EraDelegatorApyStddevSampleAggregateFilter>;
  /** Sum aggregate over matching `EraDelegatorApy` objects. */
  sum?: InputMaybe<EraDelegatorApySumAggregateFilter>;
  /** Population variance aggregate over matching `EraDelegatorApy` objects. */
  variancePopulation?: InputMaybe<EraDelegatorApyVariancePopulationAggregateFilter>;
  /** Sample variance aggregate over matching `EraDelegatorApy` objects. */
  varianceSample?: InputMaybe<EraDelegatorApyVarianceSampleAggregateFilter>;
};

export type EraDelegatorApyAverageAggregateFilter = {
  apy?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigFloatFilter>;
  reward?: InputMaybe<BigFloatFilter>;
};

export type EraDelegatorApyAverageAggregates = {
  __typename?: 'EraDelegatorApyAverageAggregates';
  /** Mean average of apy across the matching connection */
  apy?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of reward across the matching connection */
  reward?: Maybe<Scalars['BigFloat']['output']>;
};

export type EraDelegatorApyDistinctCountAggregateFilter = {
  _blockRange?: InputMaybe<BigIntFilter>;
  _id?: InputMaybe<BigIntFilter>;
  apy?: InputMaybe<BigIntFilter>;
  createAt?: InputMaybe<BigIntFilter>;
  delegatorId?: InputMaybe<BigIntFilter>;
  eraIdx?: InputMaybe<BigIntFilter>;
  id?: InputMaybe<BigIntFilter>;
  reward?: InputMaybe<BigIntFilter>;
  updateAt?: InputMaybe<BigIntFilter>;
};

export type EraDelegatorApyDistinctCountAggregates = {
  __typename?: 'EraDelegatorApyDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  _blockRange?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  _id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of apy across the matching connection */
  apy?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createAt across the matching connection */
  createAt?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of delegatorId across the matching connection */
  delegatorId?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of reward across the matching connection */
  reward?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of updateAt across the matching connection */
  updateAt?: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `EraDelegatorApy` object types. All fields are combined with a logical ‘and.’ */
export type EraDelegatorApyFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<EraDelegatorApyFilter>>;
  /** Filter by the object’s `apy` field. */
  apy?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `createAt` field. */
  createAt?: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `delegator` relation. */
  delegator?: InputMaybe<DelegatorFilter>;
  /** Filter by the object’s `delegatorId` field. */
  delegatorId?: InputMaybe<StringFilter>;
  /** Filter by the object’s `eraIdx` field. */
  eraIdx?: InputMaybe<IntFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<EraDelegatorApyFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<EraDelegatorApyFilter>>;
  /** Filter by the object’s `reward` field. */
  reward?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `updateAt` field. */
  updateAt?: InputMaybe<DatetimeFilter>;
};

export type EraDelegatorApyMaxAggregateFilter = {
  apy?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<IntFilter>;
  reward?: InputMaybe<BigFloatFilter>;
};

export type EraDelegatorApyMaxAggregates = {
  __typename?: 'EraDelegatorApyMaxAggregates';
  /** Maximum of apy across the matching connection */
  apy?: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['Int']['output']>;
  /** Maximum of reward across the matching connection */
  reward?: Maybe<Scalars['BigFloat']['output']>;
};

export type EraDelegatorApyMinAggregateFilter = {
  apy?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<IntFilter>;
  reward?: InputMaybe<BigFloatFilter>;
};

export type EraDelegatorApyMinAggregates = {
  __typename?: 'EraDelegatorApyMinAggregates';
  /** Minimum of apy across the matching connection */
  apy?: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['Int']['output']>;
  /** Minimum of reward across the matching connection */
  reward?: Maybe<Scalars['BigFloat']['output']>;
};

export type EraDelegatorApyStddevPopulationAggregateFilter = {
  apy?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigFloatFilter>;
  reward?: InputMaybe<BigFloatFilter>;
};

export type EraDelegatorApyStddevPopulationAggregates = {
  __typename?: 'EraDelegatorApyStddevPopulationAggregates';
  /** Population standard deviation of apy across the matching connection */
  apy?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of reward across the matching connection */
  reward?: Maybe<Scalars['BigFloat']['output']>;
};

export type EraDelegatorApyStddevSampleAggregateFilter = {
  apy?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigFloatFilter>;
  reward?: InputMaybe<BigFloatFilter>;
};

export type EraDelegatorApyStddevSampleAggregates = {
  __typename?: 'EraDelegatorApyStddevSampleAggregates';
  /** Sample standard deviation of apy across the matching connection */
  apy?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of reward across the matching connection */
  reward?: Maybe<Scalars['BigFloat']['output']>;
};

export type EraDelegatorApySumAggregateFilter = {
  apy?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigIntFilter>;
  reward?: InputMaybe<BigFloatFilter>;
};

export type EraDelegatorApySumAggregates = {
  __typename?: 'EraDelegatorApySumAggregates';
  /** Sum of apy across the matching connection */
  apy: Scalars['BigFloat']['output'];
  /** Sum of eraIdx across the matching connection */
  eraIdx: Scalars['BigInt']['output'];
  /** Sum of reward across the matching connection */
  reward: Scalars['BigFloat']['output'];
};

export type EraDelegatorApyVariancePopulationAggregateFilter = {
  apy?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigFloatFilter>;
  reward?: InputMaybe<BigFloatFilter>;
};

export type EraDelegatorApyVariancePopulationAggregates = {
  __typename?: 'EraDelegatorApyVariancePopulationAggregates';
  /** Population variance of apy across the matching connection */
  apy?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of reward across the matching connection */
  reward?: Maybe<Scalars['BigFloat']['output']>;
};

export type EraDelegatorApyVarianceSampleAggregateFilter = {
  apy?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigFloatFilter>;
  reward?: InputMaybe<BigFloatFilter>;
};

export type EraDelegatorApyVarianceSampleAggregates = {
  __typename?: 'EraDelegatorApyVarianceSampleAggregates';
  /** Sample variance of apy across the matching connection */
  apy?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of reward across the matching connection */
  reward?: Maybe<Scalars['BigFloat']['output']>;
};

export type EraDelegatorIndexer = Node & {
  __typename?: 'EraDelegatorIndexer';
  delegator: Scalars['String']['output'];
  era: Scalars['Int']['output'];
  id: Scalars['String']['output'];
  indexers: Scalars['JSON']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  selfStake: Scalars['BigFloat']['output'];
  totalStake: Scalars['BigFloat']['output'];
};


export type EraDelegatorIndexerIndexersArgs = {
  distinct?: InputMaybe<Array<InputMaybe<Indexers_Distinct_Enum>>>;
};

export type EraDelegatorIndexerAggregates = {
  __typename?: 'EraDelegatorIndexerAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  average?: Maybe<EraDelegatorIndexerAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  distinctCount?: Maybe<EraDelegatorIndexerDistinctCountAggregates>;
  keys?: Maybe<Array<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  max?: Maybe<EraDelegatorIndexerMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  min?: Maybe<EraDelegatorIndexerMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevPopulation?: Maybe<EraDelegatorIndexerStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevSample?: Maybe<EraDelegatorIndexerStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  sum?: Maybe<EraDelegatorIndexerSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  variancePopulation?: Maybe<EraDelegatorIndexerVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  varianceSample?: Maybe<EraDelegatorIndexerVarianceSampleAggregates>;
};

/** A connection to a list of `EraDelegatorIndexerApy` values. */
export type EraDelegatorIndexerApiesConnection = {
  __typename?: 'EraDelegatorIndexerApiesConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<EraDelegatorIndexerApyAggregates>;
  /** A list of edges which contains the `EraDelegatorIndexerApy` and cursor to aid in pagination. */
  edges: Array<EraDelegatorIndexerApiesEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<EraDelegatorIndexerApyAggregates>>;
  /** A list of `EraDelegatorIndexerApy` objects. */
  nodes: Array<Maybe<EraDelegatorIndexerApy>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `EraDelegatorIndexerApy` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `EraDelegatorIndexerApy` values. */
export type EraDelegatorIndexerApiesConnectionGroupedAggregatesArgs = {
  groupBy: Array<EraDelegatorIndexerApiesGroupBy>;
  having?: InputMaybe<EraDelegatorIndexerApiesHavingInput>;
};

/** A `EraDelegatorIndexerApy` edge in the connection. */
export type EraDelegatorIndexerApiesEdge = {
  __typename?: 'EraDelegatorIndexerApiesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `EraDelegatorIndexerApy` at the end of the edge. */
  node?: Maybe<EraDelegatorIndexerApy>;
};

/** Grouping methods for `EraDelegatorIndexerApy` for usage during aggregation. */
export enum EraDelegatorIndexerApiesGroupBy {
  Apy = 'APY',
  CreateAt = 'CREATE_AT',
  CreateAtTruncatedToDay = 'CREATE_AT_TRUNCATED_TO_DAY',
  CreateAtTruncatedToHour = 'CREATE_AT_TRUNCATED_TO_HOUR',
  DelegatorId = 'DELEGATOR_ID',
  EraIdx = 'ERA_IDX',
  Id = 'ID',
  IndexerId = 'INDEXER_ID',
  Reward = 'REWARD',
  Stake = 'STAKE',
  UpdateAt = 'UPDATE_AT',
  UpdateAtTruncatedToDay = 'UPDATE_AT_TRUNCATED_TO_DAY',
  UpdateAtTruncatedToHour = 'UPDATE_AT_TRUNCATED_TO_HOUR'
}

export type EraDelegatorIndexerApiesHavingAverageInput = {
  apy?: InputMaybe<HavingBigfloatFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  reward?: InputMaybe<HavingBigfloatFilter>;
  stake?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type EraDelegatorIndexerApiesHavingDistinctCountInput = {
  apy?: InputMaybe<HavingBigfloatFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  reward?: InputMaybe<HavingBigfloatFilter>;
  stake?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

/** Conditions for `EraDelegatorIndexerApy` aggregates. */
export type EraDelegatorIndexerApiesHavingInput = {
  AND?: InputMaybe<Array<EraDelegatorIndexerApiesHavingInput>>;
  OR?: InputMaybe<Array<EraDelegatorIndexerApiesHavingInput>>;
  average?: InputMaybe<EraDelegatorIndexerApiesHavingAverageInput>;
  distinctCount?: InputMaybe<EraDelegatorIndexerApiesHavingDistinctCountInput>;
  max?: InputMaybe<EraDelegatorIndexerApiesHavingMaxInput>;
  min?: InputMaybe<EraDelegatorIndexerApiesHavingMinInput>;
  stddevPopulation?: InputMaybe<EraDelegatorIndexerApiesHavingStddevPopulationInput>;
  stddevSample?: InputMaybe<EraDelegatorIndexerApiesHavingStddevSampleInput>;
  sum?: InputMaybe<EraDelegatorIndexerApiesHavingSumInput>;
  variancePopulation?: InputMaybe<EraDelegatorIndexerApiesHavingVariancePopulationInput>;
  varianceSample?: InputMaybe<EraDelegatorIndexerApiesHavingVarianceSampleInput>;
};

export type EraDelegatorIndexerApiesHavingMaxInput = {
  apy?: InputMaybe<HavingBigfloatFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  reward?: InputMaybe<HavingBigfloatFilter>;
  stake?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type EraDelegatorIndexerApiesHavingMinInput = {
  apy?: InputMaybe<HavingBigfloatFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  reward?: InputMaybe<HavingBigfloatFilter>;
  stake?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type EraDelegatorIndexerApiesHavingStddevPopulationInput = {
  apy?: InputMaybe<HavingBigfloatFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  reward?: InputMaybe<HavingBigfloatFilter>;
  stake?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type EraDelegatorIndexerApiesHavingStddevSampleInput = {
  apy?: InputMaybe<HavingBigfloatFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  reward?: InputMaybe<HavingBigfloatFilter>;
  stake?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type EraDelegatorIndexerApiesHavingSumInput = {
  apy?: InputMaybe<HavingBigfloatFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  reward?: InputMaybe<HavingBigfloatFilter>;
  stake?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type EraDelegatorIndexerApiesHavingVariancePopulationInput = {
  apy?: InputMaybe<HavingBigfloatFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  reward?: InputMaybe<HavingBigfloatFilter>;
  stake?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type EraDelegatorIndexerApiesHavingVarianceSampleInput = {
  apy?: InputMaybe<HavingBigfloatFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  reward?: InputMaybe<HavingBigfloatFilter>;
  stake?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

/** Methods to use when ordering `EraDelegatorIndexerApy`. */
export enum EraDelegatorIndexerApiesOrderBy {
  ApyAsc = 'APY_ASC',
  ApyDesc = 'APY_DESC',
  CreateAtAsc = 'CREATE_AT_ASC',
  CreateAtDesc = 'CREATE_AT_DESC',
  DelegatorByDelegatorIdCreatedBlockAsc = 'DELEGATOR_BY_DELEGATOR_ID__CREATED_BLOCK_ASC',
  DelegatorByDelegatorIdCreatedBlockDesc = 'DELEGATOR_BY_DELEGATOR_ID__CREATED_BLOCK_DESC',
  DelegatorByDelegatorIdExitEraAsc = 'DELEGATOR_BY_DELEGATOR_ID__EXIT_ERA_ASC',
  DelegatorByDelegatorIdExitEraDesc = 'DELEGATOR_BY_DELEGATOR_ID__EXIT_ERA_DESC',
  DelegatorByDelegatorIdIdAsc = 'DELEGATOR_BY_DELEGATOR_ID__ID_ASC',
  DelegatorByDelegatorIdIdDesc = 'DELEGATOR_BY_DELEGATOR_ID__ID_DESC',
  DelegatorByDelegatorIdLastEventAsc = 'DELEGATOR_BY_DELEGATOR_ID__LAST_EVENT_ASC',
  DelegatorByDelegatorIdLastEventDesc = 'DELEGATOR_BY_DELEGATOR_ID__LAST_EVENT_DESC',
  DelegatorByDelegatorIdStartEraAsc = 'DELEGATOR_BY_DELEGATOR_ID__START_ERA_ASC',
  DelegatorByDelegatorIdStartEraDesc = 'DELEGATOR_BY_DELEGATOR_ID__START_ERA_DESC',
  DelegatorByDelegatorIdTotalDelegationsAsc = 'DELEGATOR_BY_DELEGATOR_ID__TOTAL_DELEGATIONS_ASC',
  DelegatorByDelegatorIdTotalDelegationsDesc = 'DELEGATOR_BY_DELEGATOR_ID__TOTAL_DELEGATIONS_DESC',
  DelegatorIdAsc = 'DELEGATOR_ID_ASC',
  DelegatorIdDesc = 'DELEGATOR_ID_DESC',
  EraIdxAsc = 'ERA_IDX_ASC',
  EraIdxDesc = 'ERA_IDX_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  IndexerByIndexerIdActiveAsc = 'INDEXER_BY_INDEXER_ID__ACTIVE_ASC',
  IndexerByIndexerIdActiveDesc = 'INDEXER_BY_INDEXER_ID__ACTIVE_DESC',
  IndexerByIndexerIdCapacityAsc = 'INDEXER_BY_INDEXER_ID__CAPACITY_ASC',
  IndexerByIndexerIdCapacityDesc = 'INDEXER_BY_INDEXER_ID__CAPACITY_DESC',
  IndexerByIndexerIdCommissionAsc = 'INDEXER_BY_INDEXER_ID__COMMISSION_ASC',
  IndexerByIndexerIdCommissionDesc = 'INDEXER_BY_INDEXER_ID__COMMISSION_DESC',
  IndexerByIndexerIdControllerAsc = 'INDEXER_BY_INDEXER_ID__CONTROLLER_ASC',
  IndexerByIndexerIdControllerDesc = 'INDEXER_BY_INDEXER_ID__CONTROLLER_DESC',
  IndexerByIndexerIdCreatedBlockAsc = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_ASC',
  IndexerByIndexerIdCreatedBlockDesc = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_DESC',
  IndexerByIndexerIdIdAsc = 'INDEXER_BY_INDEXER_ID__ID_ASC',
  IndexerByIndexerIdIdDesc = 'INDEXER_BY_INDEXER_ID__ID_DESC',
  IndexerByIndexerIdLastClaimEraAsc = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_ASC',
  IndexerByIndexerIdLastClaimEraDesc = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_DESC',
  IndexerByIndexerIdLastEventAsc = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_ASC',
  IndexerByIndexerIdLastEventDesc = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_DESC',
  IndexerByIndexerIdLastSettledEraAsc = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_ASC',
  IndexerByIndexerIdLastSettledEraDesc = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_DESC',
  IndexerByIndexerIdMaxUnstakeAmountAsc = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_ASC',
  IndexerByIndexerIdMaxUnstakeAmountDesc = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_DESC',
  IndexerByIndexerIdMetadataAsc = 'INDEXER_BY_INDEXER_ID__METADATA_ASC',
  IndexerByIndexerIdMetadataDesc = 'INDEXER_BY_INDEXER_ID__METADATA_DESC',
  IndexerByIndexerIdSelfStakeAsc = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_ASC',
  IndexerByIndexerIdSelfStakeDesc = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_DESC',
  IndexerByIndexerIdTotalStakeAsc = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_ASC',
  IndexerByIndexerIdTotalStakeDesc = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_DESC',
  IndexerIdAsc = 'INDEXER_ID_ASC',
  IndexerIdDesc = 'INDEXER_ID_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  RewardAsc = 'REWARD_ASC',
  RewardDesc = 'REWARD_DESC',
  StakeAsc = 'STAKE_ASC',
  StakeDesc = 'STAKE_DESC',
  UpdateAtAsc = 'UPDATE_AT_ASC',
  UpdateAtDesc = 'UPDATE_AT_DESC'
}

export type EraDelegatorIndexerApy = Node & {
  __typename?: 'EraDelegatorIndexerApy';
  apy: Scalars['BigFloat']['output'];
  createAt: Scalars['Datetime']['output'];
  /** Reads a single `Delegator` that is related to this `EraDelegatorIndexerApy`. */
  delegator?: Maybe<Delegator>;
  delegatorId: Scalars['String']['output'];
  eraIdx: Scalars['Int']['output'];
  id: Scalars['String']['output'];
  /** Reads a single `Indexer` that is related to this `EraDelegatorIndexerApy`. */
  indexer?: Maybe<Indexer>;
  indexerId: Scalars['String']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  reward: Scalars['BigFloat']['output'];
  stake: Scalars['BigFloat']['output'];
  updateAt: Scalars['Datetime']['output'];
};

export type EraDelegatorIndexerApyAggregates = {
  __typename?: 'EraDelegatorIndexerApyAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  average?: Maybe<EraDelegatorIndexerApyAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  distinctCount?: Maybe<EraDelegatorIndexerApyDistinctCountAggregates>;
  keys?: Maybe<Array<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  max?: Maybe<EraDelegatorIndexerApyMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  min?: Maybe<EraDelegatorIndexerApyMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevPopulation?: Maybe<EraDelegatorIndexerApyStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevSample?: Maybe<EraDelegatorIndexerApyStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  sum?: Maybe<EraDelegatorIndexerApySumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  variancePopulation?: Maybe<EraDelegatorIndexerApyVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  varianceSample?: Maybe<EraDelegatorIndexerApyVarianceSampleAggregates>;
};

/** A filter to be used against aggregates of `EraDelegatorIndexerApy` object types. */
export type EraDelegatorIndexerApyAggregatesFilter = {
  /** Mean average aggregate over matching `EraDelegatorIndexerApy` objects. */
  average?: InputMaybe<EraDelegatorIndexerApyAverageAggregateFilter>;
  /** Distinct count aggregate over matching `EraDelegatorIndexerApy` objects. */
  distinctCount?: InputMaybe<EraDelegatorIndexerApyDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `EraDelegatorIndexerApy` object to be included within the aggregate. */
  filter?: InputMaybe<EraDelegatorIndexerApyFilter>;
  /** Maximum aggregate over matching `EraDelegatorIndexerApy` objects. */
  max?: InputMaybe<EraDelegatorIndexerApyMaxAggregateFilter>;
  /** Minimum aggregate over matching `EraDelegatorIndexerApy` objects. */
  min?: InputMaybe<EraDelegatorIndexerApyMinAggregateFilter>;
  /** Population standard deviation aggregate over matching `EraDelegatorIndexerApy` objects. */
  stddevPopulation?: InputMaybe<EraDelegatorIndexerApyStddevPopulationAggregateFilter>;
  /** Sample standard deviation aggregate over matching `EraDelegatorIndexerApy` objects. */
  stddevSample?: InputMaybe<EraDelegatorIndexerApyStddevSampleAggregateFilter>;
  /** Sum aggregate over matching `EraDelegatorIndexerApy` objects. */
  sum?: InputMaybe<EraDelegatorIndexerApySumAggregateFilter>;
  /** Population variance aggregate over matching `EraDelegatorIndexerApy` objects. */
  variancePopulation?: InputMaybe<EraDelegatorIndexerApyVariancePopulationAggregateFilter>;
  /** Sample variance aggregate over matching `EraDelegatorIndexerApy` objects. */
  varianceSample?: InputMaybe<EraDelegatorIndexerApyVarianceSampleAggregateFilter>;
};

export type EraDelegatorIndexerApyAverageAggregateFilter = {
  apy?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigFloatFilter>;
  reward?: InputMaybe<BigFloatFilter>;
  stake?: InputMaybe<BigFloatFilter>;
};

export type EraDelegatorIndexerApyAverageAggregates = {
  __typename?: 'EraDelegatorIndexerApyAverageAggregates';
  /** Mean average of apy across the matching connection */
  apy?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of reward across the matching connection */
  reward?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of stake across the matching connection */
  stake?: Maybe<Scalars['BigFloat']['output']>;
};

export type EraDelegatorIndexerApyDistinctCountAggregateFilter = {
  _blockRange?: InputMaybe<BigIntFilter>;
  _id?: InputMaybe<BigIntFilter>;
  apy?: InputMaybe<BigIntFilter>;
  createAt?: InputMaybe<BigIntFilter>;
  delegatorId?: InputMaybe<BigIntFilter>;
  eraIdx?: InputMaybe<BigIntFilter>;
  id?: InputMaybe<BigIntFilter>;
  indexerId?: InputMaybe<BigIntFilter>;
  reward?: InputMaybe<BigIntFilter>;
  stake?: InputMaybe<BigIntFilter>;
  updateAt?: InputMaybe<BigIntFilter>;
};

export type EraDelegatorIndexerApyDistinctCountAggregates = {
  __typename?: 'EraDelegatorIndexerApyDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  _blockRange?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  _id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of apy across the matching connection */
  apy?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createAt across the matching connection */
  createAt?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of delegatorId across the matching connection */
  delegatorId?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of indexerId across the matching connection */
  indexerId?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of reward across the matching connection */
  reward?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of stake across the matching connection */
  stake?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of updateAt across the matching connection */
  updateAt?: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `EraDelegatorIndexerApy` object types. All fields are combined with a logical ‘and.’ */
export type EraDelegatorIndexerApyFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<EraDelegatorIndexerApyFilter>>;
  /** Filter by the object’s `apy` field. */
  apy?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `createAt` field. */
  createAt?: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `delegator` relation. */
  delegator?: InputMaybe<DelegatorFilter>;
  /** Filter by the object’s `delegatorId` field. */
  delegatorId?: InputMaybe<StringFilter>;
  /** Filter by the object’s `eraIdx` field. */
  eraIdx?: InputMaybe<IntFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<StringFilter>;
  /** Filter by the object’s `indexer` relation. */
  indexer?: InputMaybe<IndexerFilter>;
  /** Filter by the object’s `indexerId` field. */
  indexerId?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<EraDelegatorIndexerApyFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<EraDelegatorIndexerApyFilter>>;
  /** Filter by the object’s `reward` field. */
  reward?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `stake` field. */
  stake?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `updateAt` field. */
  updateAt?: InputMaybe<DatetimeFilter>;
};

export type EraDelegatorIndexerApyMaxAggregateFilter = {
  apy?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<IntFilter>;
  reward?: InputMaybe<BigFloatFilter>;
  stake?: InputMaybe<BigFloatFilter>;
};

export type EraDelegatorIndexerApyMaxAggregates = {
  __typename?: 'EraDelegatorIndexerApyMaxAggregates';
  /** Maximum of apy across the matching connection */
  apy?: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['Int']['output']>;
  /** Maximum of reward across the matching connection */
  reward?: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of stake across the matching connection */
  stake?: Maybe<Scalars['BigFloat']['output']>;
};

export type EraDelegatorIndexerApyMinAggregateFilter = {
  apy?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<IntFilter>;
  reward?: InputMaybe<BigFloatFilter>;
  stake?: InputMaybe<BigFloatFilter>;
};

export type EraDelegatorIndexerApyMinAggregates = {
  __typename?: 'EraDelegatorIndexerApyMinAggregates';
  /** Minimum of apy across the matching connection */
  apy?: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['Int']['output']>;
  /** Minimum of reward across the matching connection */
  reward?: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of stake across the matching connection */
  stake?: Maybe<Scalars['BigFloat']['output']>;
};

export type EraDelegatorIndexerApyStddevPopulationAggregateFilter = {
  apy?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigFloatFilter>;
  reward?: InputMaybe<BigFloatFilter>;
  stake?: InputMaybe<BigFloatFilter>;
};

export type EraDelegatorIndexerApyStddevPopulationAggregates = {
  __typename?: 'EraDelegatorIndexerApyStddevPopulationAggregates';
  /** Population standard deviation of apy across the matching connection */
  apy?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of reward across the matching connection */
  reward?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of stake across the matching connection */
  stake?: Maybe<Scalars['BigFloat']['output']>;
};

export type EraDelegatorIndexerApyStddevSampleAggregateFilter = {
  apy?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigFloatFilter>;
  reward?: InputMaybe<BigFloatFilter>;
  stake?: InputMaybe<BigFloatFilter>;
};

export type EraDelegatorIndexerApyStddevSampleAggregates = {
  __typename?: 'EraDelegatorIndexerApyStddevSampleAggregates';
  /** Sample standard deviation of apy across the matching connection */
  apy?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of reward across the matching connection */
  reward?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of stake across the matching connection */
  stake?: Maybe<Scalars['BigFloat']['output']>;
};

export type EraDelegatorIndexerApySumAggregateFilter = {
  apy?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigIntFilter>;
  reward?: InputMaybe<BigFloatFilter>;
  stake?: InputMaybe<BigFloatFilter>;
};

export type EraDelegatorIndexerApySumAggregates = {
  __typename?: 'EraDelegatorIndexerApySumAggregates';
  /** Sum of apy across the matching connection */
  apy: Scalars['BigFloat']['output'];
  /** Sum of eraIdx across the matching connection */
  eraIdx: Scalars['BigInt']['output'];
  /** Sum of reward across the matching connection */
  reward: Scalars['BigFloat']['output'];
  /** Sum of stake across the matching connection */
  stake: Scalars['BigFloat']['output'];
};

export type EraDelegatorIndexerApyVariancePopulationAggregateFilter = {
  apy?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigFloatFilter>;
  reward?: InputMaybe<BigFloatFilter>;
  stake?: InputMaybe<BigFloatFilter>;
};

export type EraDelegatorIndexerApyVariancePopulationAggregates = {
  __typename?: 'EraDelegatorIndexerApyVariancePopulationAggregates';
  /** Population variance of apy across the matching connection */
  apy?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of reward across the matching connection */
  reward?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of stake across the matching connection */
  stake?: Maybe<Scalars['BigFloat']['output']>;
};

export type EraDelegatorIndexerApyVarianceSampleAggregateFilter = {
  apy?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigFloatFilter>;
  reward?: InputMaybe<BigFloatFilter>;
  stake?: InputMaybe<BigFloatFilter>;
};

export type EraDelegatorIndexerApyVarianceSampleAggregates = {
  __typename?: 'EraDelegatorIndexerApyVarianceSampleAggregates';
  /** Sample variance of apy across the matching connection */
  apy?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of reward across the matching connection */
  reward?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of stake across the matching connection */
  stake?: Maybe<Scalars['BigFloat']['output']>;
};

export type EraDelegatorIndexerAverageAggregates = {
  __typename?: 'EraDelegatorIndexerAverageAggregates';
  /** Mean average of era across the matching connection */
  era?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of selfStake across the matching connection */
  selfStake?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of totalStake across the matching connection */
  totalStake?: Maybe<Scalars['BigFloat']['output']>;
};

export type EraDelegatorIndexerDistinctCountAggregates = {
  __typename?: 'EraDelegatorIndexerDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  _blockRange?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  _id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of delegator across the matching connection */
  delegator?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of era across the matching connection */
  era?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of indexers across the matching connection */
  indexers?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of selfStake across the matching connection */
  selfStake?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of totalStake across the matching connection */
  totalStake?: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `EraDelegatorIndexer` object types. All fields are combined with a logical ‘and.’ */
export type EraDelegatorIndexerFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<EraDelegatorIndexerFilter>>;
  /** Filter by the object’s `delegator` field. */
  delegator?: InputMaybe<StringFilter>;
  /** Filter by the object’s `era` field. */
  era?: InputMaybe<IntFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<StringFilter>;
  /** Filter by the object’s `indexers` field. */
  indexers?: InputMaybe<JsonFilter>;
  /** Negates the expression. */
  not?: InputMaybe<EraDelegatorIndexerFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<EraDelegatorIndexerFilter>>;
  /** Filter by the object’s `selfStake` field. */
  selfStake?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `totalStake` field. */
  totalStake?: InputMaybe<BigFloatFilter>;
};

export type EraDelegatorIndexerMaxAggregates = {
  __typename?: 'EraDelegatorIndexerMaxAggregates';
  /** Maximum of era across the matching connection */
  era?: Maybe<Scalars['Int']['output']>;
  /** Maximum of selfStake across the matching connection */
  selfStake?: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of totalStake across the matching connection */
  totalStake?: Maybe<Scalars['BigFloat']['output']>;
};

export type EraDelegatorIndexerMinAggregates = {
  __typename?: 'EraDelegatorIndexerMinAggregates';
  /** Minimum of era across the matching connection */
  era?: Maybe<Scalars['Int']['output']>;
  /** Minimum of selfStake across the matching connection */
  selfStake?: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of totalStake across the matching connection */
  totalStake?: Maybe<Scalars['BigFloat']['output']>;
};

export type EraDelegatorIndexerStddevPopulationAggregates = {
  __typename?: 'EraDelegatorIndexerStddevPopulationAggregates';
  /** Population standard deviation of era across the matching connection */
  era?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of selfStake across the matching connection */
  selfStake?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of totalStake across the matching connection */
  totalStake?: Maybe<Scalars['BigFloat']['output']>;
};

export type EraDelegatorIndexerStddevSampleAggregates = {
  __typename?: 'EraDelegatorIndexerStddevSampleAggregates';
  /** Sample standard deviation of era across the matching connection */
  era?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of selfStake across the matching connection */
  selfStake?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of totalStake across the matching connection */
  totalStake?: Maybe<Scalars['BigFloat']['output']>;
};

export type EraDelegatorIndexerSumAggregates = {
  __typename?: 'EraDelegatorIndexerSumAggregates';
  /** Sum of era across the matching connection */
  era: Scalars['BigInt']['output'];
  /** Sum of selfStake across the matching connection */
  selfStake: Scalars['BigFloat']['output'];
  /** Sum of totalStake across the matching connection */
  totalStake: Scalars['BigFloat']['output'];
};

export type EraDelegatorIndexerVariancePopulationAggregates = {
  __typename?: 'EraDelegatorIndexerVariancePopulationAggregates';
  /** Population variance of era across the matching connection */
  era?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of selfStake across the matching connection */
  selfStake?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of totalStake across the matching connection */
  totalStake?: Maybe<Scalars['BigFloat']['output']>;
};

export type EraDelegatorIndexerVarianceSampleAggregates = {
  __typename?: 'EraDelegatorIndexerVarianceSampleAggregates';
  /** Sample variance of era across the matching connection */
  era?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of selfStake across the matching connection */
  selfStake?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of totalStake across the matching connection */
  totalStake?: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `EraDelegatorIndexer` values. */
export type EraDelegatorIndexersConnection = {
  __typename?: 'EraDelegatorIndexersConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<EraDelegatorIndexerAggregates>;
  /** A list of edges which contains the `EraDelegatorIndexer` and cursor to aid in pagination. */
  edges: Array<EraDelegatorIndexersEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<EraDelegatorIndexerAggregates>>;
  /** A list of `EraDelegatorIndexer` objects. */
  nodes: Array<Maybe<EraDelegatorIndexer>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `EraDelegatorIndexer` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `EraDelegatorIndexer` values. */
export type EraDelegatorIndexersConnectionGroupedAggregatesArgs = {
  groupBy: Array<EraDelegatorIndexersGroupBy>;
  having?: InputMaybe<EraDelegatorIndexersHavingInput>;
};

/** A `EraDelegatorIndexer` edge in the connection. */
export type EraDelegatorIndexersEdge = {
  __typename?: 'EraDelegatorIndexersEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `EraDelegatorIndexer` at the end of the edge. */
  node?: Maybe<EraDelegatorIndexer>;
};

/** Grouping methods for `EraDelegatorIndexer` for usage during aggregation. */
export enum EraDelegatorIndexersGroupBy {
  Delegator = 'DELEGATOR',
  Era = 'ERA',
  Id = 'ID',
  Indexers = 'INDEXERS',
  SelfStake = 'SELF_STAKE',
  TotalStake = 'TOTAL_STAKE'
}

export type EraDelegatorIndexersHavingAverageInput = {
  era?: InputMaybe<HavingIntFilter>;
  selfStake?: InputMaybe<HavingBigfloatFilter>;
  totalStake?: InputMaybe<HavingBigfloatFilter>;
};

export type EraDelegatorIndexersHavingDistinctCountInput = {
  era?: InputMaybe<HavingIntFilter>;
  selfStake?: InputMaybe<HavingBigfloatFilter>;
  totalStake?: InputMaybe<HavingBigfloatFilter>;
};

/** Conditions for `EraDelegatorIndexer` aggregates. */
export type EraDelegatorIndexersHavingInput = {
  AND?: InputMaybe<Array<EraDelegatorIndexersHavingInput>>;
  OR?: InputMaybe<Array<EraDelegatorIndexersHavingInput>>;
  average?: InputMaybe<EraDelegatorIndexersHavingAverageInput>;
  distinctCount?: InputMaybe<EraDelegatorIndexersHavingDistinctCountInput>;
  max?: InputMaybe<EraDelegatorIndexersHavingMaxInput>;
  min?: InputMaybe<EraDelegatorIndexersHavingMinInput>;
  stddevPopulation?: InputMaybe<EraDelegatorIndexersHavingStddevPopulationInput>;
  stddevSample?: InputMaybe<EraDelegatorIndexersHavingStddevSampleInput>;
  sum?: InputMaybe<EraDelegatorIndexersHavingSumInput>;
  variancePopulation?: InputMaybe<EraDelegatorIndexersHavingVariancePopulationInput>;
  varianceSample?: InputMaybe<EraDelegatorIndexersHavingVarianceSampleInput>;
};

export type EraDelegatorIndexersHavingMaxInput = {
  era?: InputMaybe<HavingIntFilter>;
  selfStake?: InputMaybe<HavingBigfloatFilter>;
  totalStake?: InputMaybe<HavingBigfloatFilter>;
};

export type EraDelegatorIndexersHavingMinInput = {
  era?: InputMaybe<HavingIntFilter>;
  selfStake?: InputMaybe<HavingBigfloatFilter>;
  totalStake?: InputMaybe<HavingBigfloatFilter>;
};

export type EraDelegatorIndexersHavingStddevPopulationInput = {
  era?: InputMaybe<HavingIntFilter>;
  selfStake?: InputMaybe<HavingBigfloatFilter>;
  totalStake?: InputMaybe<HavingBigfloatFilter>;
};

export type EraDelegatorIndexersHavingStddevSampleInput = {
  era?: InputMaybe<HavingIntFilter>;
  selfStake?: InputMaybe<HavingBigfloatFilter>;
  totalStake?: InputMaybe<HavingBigfloatFilter>;
};

export type EraDelegatorIndexersHavingSumInput = {
  era?: InputMaybe<HavingIntFilter>;
  selfStake?: InputMaybe<HavingBigfloatFilter>;
  totalStake?: InputMaybe<HavingBigfloatFilter>;
};

export type EraDelegatorIndexersHavingVariancePopulationInput = {
  era?: InputMaybe<HavingIntFilter>;
  selfStake?: InputMaybe<HavingBigfloatFilter>;
  totalStake?: InputMaybe<HavingBigfloatFilter>;
};

export type EraDelegatorIndexersHavingVarianceSampleInput = {
  era?: InputMaybe<HavingIntFilter>;
  selfStake?: InputMaybe<HavingBigfloatFilter>;
  totalStake?: InputMaybe<HavingBigfloatFilter>;
};

/** Methods to use when ordering `EraDelegatorIndexer`. */
export enum EraDelegatorIndexersOrderBy {
  DelegatorAsc = 'DELEGATOR_ASC',
  DelegatorDesc = 'DELEGATOR_DESC',
  EraAsc = 'ERA_ASC',
  EraDesc = 'ERA_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  IndexersAsc = 'INDEXERS_ASC',
  IndexersDesc = 'INDEXERS_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  SelfStakeAsc = 'SELF_STAKE_ASC',
  SelfStakeDesc = 'SELF_STAKE_DESC',
  TotalStakeAsc = 'TOTAL_STAKE_ASC',
  TotalStakeDesc = 'TOTAL_STAKE_DESC'
}

/** A connection to a list of `Delegator` values, with data from `EraReward`. */
export type EraDelegatorsByEraRewardEraIdAndDelegatorIdManyToManyConnection = {
  __typename?: 'EraDelegatorsByEraRewardEraIdAndDelegatorIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<DelegatorAggregates>;
  /** A list of edges which contains the `Delegator`, info from the `EraReward`, and the cursor to aid in pagination. */
  edges: Array<EraDelegatorsByEraRewardEraIdAndDelegatorIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<DelegatorAggregates>>;
  /** A list of `Delegator` objects. */
  nodes: Array<Maybe<Delegator>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Delegator` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Delegator` values, with data from `EraReward`. */
export type EraDelegatorsByEraRewardEraIdAndDelegatorIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: Array<DelegatorsGroupBy>;
  having?: InputMaybe<DelegatorsHavingInput>;
};

/** A `Delegator` edge in the connection, with data from `EraReward`. */
export type EraDelegatorsByEraRewardEraIdAndDelegatorIdManyToManyEdge = {
  __typename?: 'EraDelegatorsByEraRewardEraIdAndDelegatorIdManyToManyEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `EraReward`. */
  eraRewards: EraRewardsConnection;
  /** The `Delegator` at the end of the edge. */
  node?: Maybe<Delegator>;
};


/** A `Delegator` edge in the connection, with data from `EraReward`. */
export type EraDelegatorsByEraRewardEraIdAndDelegatorIdManyToManyEdgeEraRewardsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Era_Rewards_Distinct_Enum>>>;
  filter?: InputMaybe<EraRewardFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<EraRewardsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

/** A connection to a list of `Delegator` values, with data from `EraStake`. */
export type EraDelegatorsByEraStakeEraIdAndDelegatorIdManyToManyConnection = {
  __typename?: 'EraDelegatorsByEraStakeEraIdAndDelegatorIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<DelegatorAggregates>;
  /** A list of edges which contains the `Delegator`, info from the `EraStake`, and the cursor to aid in pagination. */
  edges: Array<EraDelegatorsByEraStakeEraIdAndDelegatorIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<DelegatorAggregates>>;
  /** A list of `Delegator` objects. */
  nodes: Array<Maybe<Delegator>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Delegator` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Delegator` values, with data from `EraStake`. */
export type EraDelegatorsByEraStakeEraIdAndDelegatorIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: Array<DelegatorsGroupBy>;
  having?: InputMaybe<DelegatorsHavingInput>;
};

/** A `Delegator` edge in the connection, with data from `EraStake`. */
export type EraDelegatorsByEraStakeEraIdAndDelegatorIdManyToManyEdge = {
  __typename?: 'EraDelegatorsByEraStakeEraIdAndDelegatorIdManyToManyEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `EraStake`. */
  eraStakes: EraStakesConnection;
  /** The `Delegator` at the end of the edge. */
  node?: Maybe<Delegator>;
};


/** A `Delegator` edge in the connection, with data from `EraStake`. */
export type EraDelegatorsByEraStakeEraIdAndDelegatorIdManyToManyEdgeEraStakesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Era_Stakes_Distinct_Enum>>>;
  filter?: InputMaybe<EraStakeFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<EraStakesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

export type EraDeploymentReward = Node & {
  __typename?: 'EraDeploymentReward';
  agreementRewards: Scalars['BigFloat']['output'];
  allocationRewards: Scalars['BigFloat']['output'];
  changesHeight?: Maybe<Scalars['String']['output']>;
  deploymentId: Scalars['String']['output'];
  eraIdx: Scalars['Int']['output'];
  id: Scalars['String']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  queryRewards: Scalars['BigFloat']['output'];
  stateChannelRewards: Scalars['BigFloat']['output'];
  totalRewards: Scalars['BigFloat']['output'];
};

export type EraDeploymentRewardAggregates = {
  __typename?: 'EraDeploymentRewardAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  average?: Maybe<EraDeploymentRewardAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  distinctCount?: Maybe<EraDeploymentRewardDistinctCountAggregates>;
  keys?: Maybe<Array<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  max?: Maybe<EraDeploymentRewardMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  min?: Maybe<EraDeploymentRewardMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevPopulation?: Maybe<EraDeploymentRewardStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevSample?: Maybe<EraDeploymentRewardStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  sum?: Maybe<EraDeploymentRewardSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  variancePopulation?: Maybe<EraDeploymentRewardVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  varianceSample?: Maybe<EraDeploymentRewardVarianceSampleAggregates>;
};

export type EraDeploymentRewardAverageAggregates = {
  __typename?: 'EraDeploymentRewardAverageAggregates';
  /** Mean average of agreementRewards across the matching connection */
  agreementRewards?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of allocationRewards across the matching connection */
  allocationRewards?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of queryRewards across the matching connection */
  queryRewards?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of stateChannelRewards across the matching connection */
  stateChannelRewards?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of totalRewards across the matching connection */
  totalRewards?: Maybe<Scalars['BigFloat']['output']>;
};

export type EraDeploymentRewardDistinctCountAggregates = {
  __typename?: 'EraDeploymentRewardDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  _blockRange?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  _id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of agreementRewards across the matching connection */
  agreementRewards?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of allocationRewards across the matching connection */
  allocationRewards?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of changesHeight across the matching connection */
  changesHeight?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of deploymentId across the matching connection */
  deploymentId?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of queryRewards across the matching connection */
  queryRewards?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of stateChannelRewards across the matching connection */
  stateChannelRewards?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of totalRewards across the matching connection */
  totalRewards?: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `EraDeploymentReward` object types. All fields are combined with a logical ‘and.’ */
export type EraDeploymentRewardFilter = {
  /** Filter by the object’s `agreementRewards` field. */
  agreementRewards?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `allocationRewards` field. */
  allocationRewards?: InputMaybe<BigFloatFilter>;
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<EraDeploymentRewardFilter>>;
  /** Filter by the object’s `changesHeight` field. */
  changesHeight?: InputMaybe<StringFilter>;
  /** Filter by the object’s `deploymentId` field. */
  deploymentId?: InputMaybe<StringFilter>;
  /** Filter by the object’s `eraIdx` field. */
  eraIdx?: InputMaybe<IntFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<EraDeploymentRewardFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<EraDeploymentRewardFilter>>;
  /** Filter by the object’s `queryRewards` field. */
  queryRewards?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `stateChannelRewards` field. */
  stateChannelRewards?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `totalRewards` field. */
  totalRewards?: InputMaybe<BigFloatFilter>;
};

export type EraDeploymentRewardMaxAggregates = {
  __typename?: 'EraDeploymentRewardMaxAggregates';
  /** Maximum of agreementRewards across the matching connection */
  agreementRewards?: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of allocationRewards across the matching connection */
  allocationRewards?: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['Int']['output']>;
  /** Maximum of queryRewards across the matching connection */
  queryRewards?: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of stateChannelRewards across the matching connection */
  stateChannelRewards?: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of totalRewards across the matching connection */
  totalRewards?: Maybe<Scalars['BigFloat']['output']>;
};

export type EraDeploymentRewardMinAggregates = {
  __typename?: 'EraDeploymentRewardMinAggregates';
  /** Minimum of agreementRewards across the matching connection */
  agreementRewards?: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of allocationRewards across the matching connection */
  allocationRewards?: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['Int']['output']>;
  /** Minimum of queryRewards across the matching connection */
  queryRewards?: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of stateChannelRewards across the matching connection */
  stateChannelRewards?: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of totalRewards across the matching connection */
  totalRewards?: Maybe<Scalars['BigFloat']['output']>;
};

export type EraDeploymentRewardStddevPopulationAggregates = {
  __typename?: 'EraDeploymentRewardStddevPopulationAggregates';
  /** Population standard deviation of agreementRewards across the matching connection */
  agreementRewards?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of allocationRewards across the matching connection */
  allocationRewards?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of queryRewards across the matching connection */
  queryRewards?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of stateChannelRewards across the matching connection */
  stateChannelRewards?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of totalRewards across the matching connection */
  totalRewards?: Maybe<Scalars['BigFloat']['output']>;
};

export type EraDeploymentRewardStddevSampleAggregates = {
  __typename?: 'EraDeploymentRewardStddevSampleAggregates';
  /** Sample standard deviation of agreementRewards across the matching connection */
  agreementRewards?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of allocationRewards across the matching connection */
  allocationRewards?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of queryRewards across the matching connection */
  queryRewards?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of stateChannelRewards across the matching connection */
  stateChannelRewards?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of totalRewards across the matching connection */
  totalRewards?: Maybe<Scalars['BigFloat']['output']>;
};

export type EraDeploymentRewardSumAggregates = {
  __typename?: 'EraDeploymentRewardSumAggregates';
  /** Sum of agreementRewards across the matching connection */
  agreementRewards: Scalars['BigFloat']['output'];
  /** Sum of allocationRewards across the matching connection */
  allocationRewards: Scalars['BigFloat']['output'];
  /** Sum of eraIdx across the matching connection */
  eraIdx: Scalars['BigInt']['output'];
  /** Sum of queryRewards across the matching connection */
  queryRewards: Scalars['BigFloat']['output'];
  /** Sum of stateChannelRewards across the matching connection */
  stateChannelRewards: Scalars['BigFloat']['output'];
  /** Sum of totalRewards across the matching connection */
  totalRewards: Scalars['BigFloat']['output'];
};

export type EraDeploymentRewardVariancePopulationAggregates = {
  __typename?: 'EraDeploymentRewardVariancePopulationAggregates';
  /** Population variance of agreementRewards across the matching connection */
  agreementRewards?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of allocationRewards across the matching connection */
  allocationRewards?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of queryRewards across the matching connection */
  queryRewards?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of stateChannelRewards across the matching connection */
  stateChannelRewards?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of totalRewards across the matching connection */
  totalRewards?: Maybe<Scalars['BigFloat']['output']>;
};

export type EraDeploymentRewardVarianceSampleAggregates = {
  __typename?: 'EraDeploymentRewardVarianceSampleAggregates';
  /** Sample variance of agreementRewards across the matching connection */
  agreementRewards?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of allocationRewards across the matching connection */
  allocationRewards?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of queryRewards across the matching connection */
  queryRewards?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of stateChannelRewards across the matching connection */
  stateChannelRewards?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of totalRewards across the matching connection */
  totalRewards?: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `EraDeploymentReward` values. */
export type EraDeploymentRewardsConnection = {
  __typename?: 'EraDeploymentRewardsConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<EraDeploymentRewardAggregates>;
  /** A list of edges which contains the `EraDeploymentReward` and cursor to aid in pagination. */
  edges: Array<EraDeploymentRewardsEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<EraDeploymentRewardAggregates>>;
  /** A list of `EraDeploymentReward` objects. */
  nodes: Array<Maybe<EraDeploymentReward>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `EraDeploymentReward` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `EraDeploymentReward` values. */
export type EraDeploymentRewardsConnectionGroupedAggregatesArgs = {
  groupBy: Array<EraDeploymentRewardsGroupBy>;
  having?: InputMaybe<EraDeploymentRewardsHavingInput>;
};

/** A `EraDeploymentReward` edge in the connection. */
export type EraDeploymentRewardsEdge = {
  __typename?: 'EraDeploymentRewardsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `EraDeploymentReward` at the end of the edge. */
  node?: Maybe<EraDeploymentReward>;
};

/** Grouping methods for `EraDeploymentReward` for usage during aggregation. */
export enum EraDeploymentRewardsGroupBy {
  AgreementRewards = 'AGREEMENT_REWARDS',
  AllocationRewards = 'ALLOCATION_REWARDS',
  ChangesHeight = 'CHANGES_HEIGHT',
  DeploymentId = 'DEPLOYMENT_ID',
  EraIdx = 'ERA_IDX',
  Id = 'ID',
  QueryRewards = 'QUERY_REWARDS',
  StateChannelRewards = 'STATE_CHANNEL_REWARDS',
  TotalRewards = 'TOTAL_REWARDS'
}

export type EraDeploymentRewardsHavingAverageInput = {
  agreementRewards?: InputMaybe<HavingBigfloatFilter>;
  allocationRewards?: InputMaybe<HavingBigfloatFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  queryRewards?: InputMaybe<HavingBigfloatFilter>;
  stateChannelRewards?: InputMaybe<HavingBigfloatFilter>;
  totalRewards?: InputMaybe<HavingBigfloatFilter>;
};

export type EraDeploymentRewardsHavingDistinctCountInput = {
  agreementRewards?: InputMaybe<HavingBigfloatFilter>;
  allocationRewards?: InputMaybe<HavingBigfloatFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  queryRewards?: InputMaybe<HavingBigfloatFilter>;
  stateChannelRewards?: InputMaybe<HavingBigfloatFilter>;
  totalRewards?: InputMaybe<HavingBigfloatFilter>;
};

/** Conditions for `EraDeploymentReward` aggregates. */
export type EraDeploymentRewardsHavingInput = {
  AND?: InputMaybe<Array<EraDeploymentRewardsHavingInput>>;
  OR?: InputMaybe<Array<EraDeploymentRewardsHavingInput>>;
  average?: InputMaybe<EraDeploymentRewardsHavingAverageInput>;
  distinctCount?: InputMaybe<EraDeploymentRewardsHavingDistinctCountInput>;
  max?: InputMaybe<EraDeploymentRewardsHavingMaxInput>;
  min?: InputMaybe<EraDeploymentRewardsHavingMinInput>;
  stddevPopulation?: InputMaybe<EraDeploymentRewardsHavingStddevPopulationInput>;
  stddevSample?: InputMaybe<EraDeploymentRewardsHavingStddevSampleInput>;
  sum?: InputMaybe<EraDeploymentRewardsHavingSumInput>;
  variancePopulation?: InputMaybe<EraDeploymentRewardsHavingVariancePopulationInput>;
  varianceSample?: InputMaybe<EraDeploymentRewardsHavingVarianceSampleInput>;
};

export type EraDeploymentRewardsHavingMaxInput = {
  agreementRewards?: InputMaybe<HavingBigfloatFilter>;
  allocationRewards?: InputMaybe<HavingBigfloatFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  queryRewards?: InputMaybe<HavingBigfloatFilter>;
  stateChannelRewards?: InputMaybe<HavingBigfloatFilter>;
  totalRewards?: InputMaybe<HavingBigfloatFilter>;
};

export type EraDeploymentRewardsHavingMinInput = {
  agreementRewards?: InputMaybe<HavingBigfloatFilter>;
  allocationRewards?: InputMaybe<HavingBigfloatFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  queryRewards?: InputMaybe<HavingBigfloatFilter>;
  stateChannelRewards?: InputMaybe<HavingBigfloatFilter>;
  totalRewards?: InputMaybe<HavingBigfloatFilter>;
};

export type EraDeploymentRewardsHavingStddevPopulationInput = {
  agreementRewards?: InputMaybe<HavingBigfloatFilter>;
  allocationRewards?: InputMaybe<HavingBigfloatFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  queryRewards?: InputMaybe<HavingBigfloatFilter>;
  stateChannelRewards?: InputMaybe<HavingBigfloatFilter>;
  totalRewards?: InputMaybe<HavingBigfloatFilter>;
};

export type EraDeploymentRewardsHavingStddevSampleInput = {
  agreementRewards?: InputMaybe<HavingBigfloatFilter>;
  allocationRewards?: InputMaybe<HavingBigfloatFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  queryRewards?: InputMaybe<HavingBigfloatFilter>;
  stateChannelRewards?: InputMaybe<HavingBigfloatFilter>;
  totalRewards?: InputMaybe<HavingBigfloatFilter>;
};

export type EraDeploymentRewardsHavingSumInput = {
  agreementRewards?: InputMaybe<HavingBigfloatFilter>;
  allocationRewards?: InputMaybe<HavingBigfloatFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  queryRewards?: InputMaybe<HavingBigfloatFilter>;
  stateChannelRewards?: InputMaybe<HavingBigfloatFilter>;
  totalRewards?: InputMaybe<HavingBigfloatFilter>;
};

export type EraDeploymentRewardsHavingVariancePopulationInput = {
  agreementRewards?: InputMaybe<HavingBigfloatFilter>;
  allocationRewards?: InputMaybe<HavingBigfloatFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  queryRewards?: InputMaybe<HavingBigfloatFilter>;
  stateChannelRewards?: InputMaybe<HavingBigfloatFilter>;
  totalRewards?: InputMaybe<HavingBigfloatFilter>;
};

export type EraDeploymentRewardsHavingVarianceSampleInput = {
  agreementRewards?: InputMaybe<HavingBigfloatFilter>;
  allocationRewards?: InputMaybe<HavingBigfloatFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  queryRewards?: InputMaybe<HavingBigfloatFilter>;
  stateChannelRewards?: InputMaybe<HavingBigfloatFilter>;
  totalRewards?: InputMaybe<HavingBigfloatFilter>;
};

/** Methods to use when ordering `EraDeploymentReward`. */
export enum EraDeploymentRewardsOrderBy {
  AgreementRewardsAsc = 'AGREEMENT_REWARDS_ASC',
  AgreementRewardsDesc = 'AGREEMENT_REWARDS_DESC',
  AllocationRewardsAsc = 'ALLOCATION_REWARDS_ASC',
  AllocationRewardsDesc = 'ALLOCATION_REWARDS_DESC',
  ChangesHeightAsc = 'CHANGES_HEIGHT_ASC',
  ChangesHeightDesc = 'CHANGES_HEIGHT_DESC',
  DeploymentIdAsc = 'DEPLOYMENT_ID_ASC',
  DeploymentIdDesc = 'DEPLOYMENT_ID_DESC',
  EraIdxAsc = 'ERA_IDX_ASC',
  EraIdxDesc = 'ERA_IDX_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  QueryRewardsAsc = 'QUERY_REWARDS_ASC',
  QueryRewardsDesc = 'QUERY_REWARDS_DESC',
  StateChannelRewardsAsc = 'STATE_CHANNEL_REWARDS_ASC',
  StateChannelRewardsDesc = 'STATE_CHANNEL_REWARDS_DESC',
  TotalRewardsAsc = 'TOTAL_REWARDS_ASC',
  TotalRewardsDesc = 'TOTAL_REWARDS_DESC'
}

export type EraDistinctCountAggregates = {
  __typename?: 'EraDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  _blockRange?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  _id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of endTime across the matching connection */
  endTime?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of eraPeriod across the matching connection */
  eraPeriod?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of forceNext across the matching connection */
  forceNext?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of lastEvent across the matching connection */
  lastEvent?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of startTime across the matching connection */
  startTime?: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `Era` object types. All fields are combined with a logical ‘and.’ */
export type EraFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<EraFilter>>;
  /** Filter by the object’s `createdBlock` field. */
  createdBlock?: InputMaybe<IntFilter>;
  /** Filter by the object’s `endTime` field. */
  endTime?: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `eraPeriod` field. */
  eraPeriod?: InputMaybe<StringFilter>;
  /** Filter by the object’s `eraRewards` relation. */
  eraRewards?: InputMaybe<EraToManyEraRewardFilter>;
  /** Some related `eraRewards` exist. */
  eraRewardsExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `eraStakeUpdatesByLastUpdateEraId` relation. */
  eraStakeUpdatesByLastUpdateEraId?: InputMaybe<EraToManyEraStakeUpdateFilter>;
  /** Some related `eraStakeUpdatesByLastUpdateEraId` exist. */
  eraStakeUpdatesByLastUpdateEraIdExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `eraStakes` relation. */
  eraStakes?: InputMaybe<EraToManyEraStakeFilter>;
  /** Some related `eraStakes` exist. */
  eraStakesExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `forceNext` field. */
  forceNext?: InputMaybe<BooleanFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<StringFilter>;
  /** Filter by the object’s `indexerCommissionRates` relation. */
  indexerCommissionRates?: InputMaybe<EraToManyIndexerCommissionRateFilter>;
  /** Some related `indexerCommissionRates` exist. */
  indexerCommissionRatesExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `indexerStakeSummaries` relation. */
  indexerStakeSummaries?: InputMaybe<EraToManyIndexerStakeSummaryFilter>;
  /** Some related `indexerStakeSummaries` exist. */
  indexerStakeSummariesExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `indexerStakes` relation. */
  indexerStakes?: InputMaybe<EraToManyIndexerStakeFilter>;
  /** Some related `indexerStakes` exist. */
  indexerStakesExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `lastEvent` field. */
  lastEvent?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<EraFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<EraFilter>>;
  /** Filter by the object’s `startTime` field. */
  startTime?: InputMaybe<DatetimeFilter>;
};

/** A connection to a list of `EraIndexerApy` values. */
export type EraIndexerApiesConnection = {
  __typename?: 'EraIndexerApiesConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<EraIndexerApyAggregates>;
  /** A list of edges which contains the `EraIndexerApy` and cursor to aid in pagination. */
  edges: Array<EraIndexerApiesEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<EraIndexerApyAggregates>>;
  /** A list of `EraIndexerApy` objects. */
  nodes: Array<Maybe<EraIndexerApy>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `EraIndexerApy` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `EraIndexerApy` values. */
export type EraIndexerApiesConnectionGroupedAggregatesArgs = {
  groupBy: Array<EraIndexerApiesGroupBy>;
  having?: InputMaybe<EraIndexerApiesHavingInput>;
};

/** A `EraIndexerApy` edge in the connection. */
export type EraIndexerApiesEdge = {
  __typename?: 'EraIndexerApiesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `EraIndexerApy` at the end of the edge. */
  node?: Maybe<EraIndexerApy>;
};

/** Grouping methods for `EraIndexerApy` for usage during aggregation. */
export enum EraIndexerApiesGroupBy {
  CreateAt = 'CREATE_AT',
  CreateAtTruncatedToDay = 'CREATE_AT_TRUNCATED_TO_DAY',
  CreateAtTruncatedToHour = 'CREATE_AT_TRUNCATED_TO_HOUR',
  DelegatorApy = 'DELEGATOR_APY',
  DelegatorReward = 'DELEGATOR_REWARD',
  EraIdx = 'ERA_IDX',
  Id = 'ID',
  IndexerApy = 'INDEXER_APY',
  IndexerId = 'INDEXER_ID',
  IndexerReward = 'INDEXER_REWARD',
  UpdateAt = 'UPDATE_AT',
  UpdateAtTruncatedToDay = 'UPDATE_AT_TRUNCATED_TO_DAY',
  UpdateAtTruncatedToHour = 'UPDATE_AT_TRUNCATED_TO_HOUR'
}

export type EraIndexerApiesHavingAverageInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  delegatorApy?: InputMaybe<HavingBigfloatFilter>;
  delegatorReward?: InputMaybe<HavingBigfloatFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  indexerApy?: InputMaybe<HavingBigfloatFilter>;
  indexerReward?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type EraIndexerApiesHavingDistinctCountInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  delegatorApy?: InputMaybe<HavingBigfloatFilter>;
  delegatorReward?: InputMaybe<HavingBigfloatFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  indexerApy?: InputMaybe<HavingBigfloatFilter>;
  indexerReward?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

/** Conditions for `EraIndexerApy` aggregates. */
export type EraIndexerApiesHavingInput = {
  AND?: InputMaybe<Array<EraIndexerApiesHavingInput>>;
  OR?: InputMaybe<Array<EraIndexerApiesHavingInput>>;
  average?: InputMaybe<EraIndexerApiesHavingAverageInput>;
  distinctCount?: InputMaybe<EraIndexerApiesHavingDistinctCountInput>;
  max?: InputMaybe<EraIndexerApiesHavingMaxInput>;
  min?: InputMaybe<EraIndexerApiesHavingMinInput>;
  stddevPopulation?: InputMaybe<EraIndexerApiesHavingStddevPopulationInput>;
  stddevSample?: InputMaybe<EraIndexerApiesHavingStddevSampleInput>;
  sum?: InputMaybe<EraIndexerApiesHavingSumInput>;
  variancePopulation?: InputMaybe<EraIndexerApiesHavingVariancePopulationInput>;
  varianceSample?: InputMaybe<EraIndexerApiesHavingVarianceSampleInput>;
};

export type EraIndexerApiesHavingMaxInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  delegatorApy?: InputMaybe<HavingBigfloatFilter>;
  delegatorReward?: InputMaybe<HavingBigfloatFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  indexerApy?: InputMaybe<HavingBigfloatFilter>;
  indexerReward?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type EraIndexerApiesHavingMinInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  delegatorApy?: InputMaybe<HavingBigfloatFilter>;
  delegatorReward?: InputMaybe<HavingBigfloatFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  indexerApy?: InputMaybe<HavingBigfloatFilter>;
  indexerReward?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type EraIndexerApiesHavingStddevPopulationInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  delegatorApy?: InputMaybe<HavingBigfloatFilter>;
  delegatorReward?: InputMaybe<HavingBigfloatFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  indexerApy?: InputMaybe<HavingBigfloatFilter>;
  indexerReward?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type EraIndexerApiesHavingStddevSampleInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  delegatorApy?: InputMaybe<HavingBigfloatFilter>;
  delegatorReward?: InputMaybe<HavingBigfloatFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  indexerApy?: InputMaybe<HavingBigfloatFilter>;
  indexerReward?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type EraIndexerApiesHavingSumInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  delegatorApy?: InputMaybe<HavingBigfloatFilter>;
  delegatorReward?: InputMaybe<HavingBigfloatFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  indexerApy?: InputMaybe<HavingBigfloatFilter>;
  indexerReward?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type EraIndexerApiesHavingVariancePopulationInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  delegatorApy?: InputMaybe<HavingBigfloatFilter>;
  delegatorReward?: InputMaybe<HavingBigfloatFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  indexerApy?: InputMaybe<HavingBigfloatFilter>;
  indexerReward?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type EraIndexerApiesHavingVarianceSampleInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  delegatorApy?: InputMaybe<HavingBigfloatFilter>;
  delegatorReward?: InputMaybe<HavingBigfloatFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  indexerApy?: InputMaybe<HavingBigfloatFilter>;
  indexerReward?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

/** Methods to use when ordering `EraIndexerApy`. */
export enum EraIndexerApiesOrderBy {
  CreateAtAsc = 'CREATE_AT_ASC',
  CreateAtDesc = 'CREATE_AT_DESC',
  DelegatorApyAsc = 'DELEGATOR_APY_ASC',
  DelegatorApyDesc = 'DELEGATOR_APY_DESC',
  DelegatorRewardAsc = 'DELEGATOR_REWARD_ASC',
  DelegatorRewardDesc = 'DELEGATOR_REWARD_DESC',
  EraIdxAsc = 'ERA_IDX_ASC',
  EraIdxDesc = 'ERA_IDX_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  IndexerApyAsc = 'INDEXER_APY_ASC',
  IndexerApyDesc = 'INDEXER_APY_DESC',
  IndexerByIndexerIdActiveAsc = 'INDEXER_BY_INDEXER_ID__ACTIVE_ASC',
  IndexerByIndexerIdActiveDesc = 'INDEXER_BY_INDEXER_ID__ACTIVE_DESC',
  IndexerByIndexerIdCapacityAsc = 'INDEXER_BY_INDEXER_ID__CAPACITY_ASC',
  IndexerByIndexerIdCapacityDesc = 'INDEXER_BY_INDEXER_ID__CAPACITY_DESC',
  IndexerByIndexerIdCommissionAsc = 'INDEXER_BY_INDEXER_ID__COMMISSION_ASC',
  IndexerByIndexerIdCommissionDesc = 'INDEXER_BY_INDEXER_ID__COMMISSION_DESC',
  IndexerByIndexerIdControllerAsc = 'INDEXER_BY_INDEXER_ID__CONTROLLER_ASC',
  IndexerByIndexerIdControllerDesc = 'INDEXER_BY_INDEXER_ID__CONTROLLER_DESC',
  IndexerByIndexerIdCreatedBlockAsc = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_ASC',
  IndexerByIndexerIdCreatedBlockDesc = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_DESC',
  IndexerByIndexerIdIdAsc = 'INDEXER_BY_INDEXER_ID__ID_ASC',
  IndexerByIndexerIdIdDesc = 'INDEXER_BY_INDEXER_ID__ID_DESC',
  IndexerByIndexerIdLastClaimEraAsc = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_ASC',
  IndexerByIndexerIdLastClaimEraDesc = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_DESC',
  IndexerByIndexerIdLastEventAsc = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_ASC',
  IndexerByIndexerIdLastEventDesc = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_DESC',
  IndexerByIndexerIdLastSettledEraAsc = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_ASC',
  IndexerByIndexerIdLastSettledEraDesc = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_DESC',
  IndexerByIndexerIdMaxUnstakeAmountAsc = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_ASC',
  IndexerByIndexerIdMaxUnstakeAmountDesc = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_DESC',
  IndexerByIndexerIdMetadataAsc = 'INDEXER_BY_INDEXER_ID__METADATA_ASC',
  IndexerByIndexerIdMetadataDesc = 'INDEXER_BY_INDEXER_ID__METADATA_DESC',
  IndexerByIndexerIdSelfStakeAsc = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_ASC',
  IndexerByIndexerIdSelfStakeDesc = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_DESC',
  IndexerByIndexerIdTotalStakeAsc = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_ASC',
  IndexerByIndexerIdTotalStakeDesc = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_DESC',
  IndexerIdAsc = 'INDEXER_ID_ASC',
  IndexerIdDesc = 'INDEXER_ID_DESC',
  IndexerRewardAsc = 'INDEXER_REWARD_ASC',
  IndexerRewardDesc = 'INDEXER_REWARD_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  UpdateAtAsc = 'UPDATE_AT_ASC',
  UpdateAtDesc = 'UPDATE_AT_DESC'
}

export type EraIndexerApy = Node & {
  __typename?: 'EraIndexerApy';
  createAt: Scalars['Datetime']['output'];
  delegatorApy: Scalars['BigFloat']['output'];
  delegatorReward: Scalars['BigFloat']['output'];
  eraIdx: Scalars['Int']['output'];
  id: Scalars['String']['output'];
  /** Reads a single `Indexer` that is related to this `EraIndexerApy`. */
  indexer?: Maybe<Indexer>;
  indexerApy: Scalars['BigFloat']['output'];
  indexerId: Scalars['String']['output'];
  indexerReward: Scalars['BigFloat']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  updateAt: Scalars['Datetime']['output'];
};

export type EraIndexerApyAggregates = {
  __typename?: 'EraIndexerApyAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  average?: Maybe<EraIndexerApyAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  distinctCount?: Maybe<EraIndexerApyDistinctCountAggregates>;
  keys?: Maybe<Array<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  max?: Maybe<EraIndexerApyMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  min?: Maybe<EraIndexerApyMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevPopulation?: Maybe<EraIndexerApyStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevSample?: Maybe<EraIndexerApyStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  sum?: Maybe<EraIndexerApySumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  variancePopulation?: Maybe<EraIndexerApyVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  varianceSample?: Maybe<EraIndexerApyVarianceSampleAggregates>;
};

/** A filter to be used against aggregates of `EraIndexerApy` object types. */
export type EraIndexerApyAggregatesFilter = {
  /** Mean average aggregate over matching `EraIndexerApy` objects. */
  average?: InputMaybe<EraIndexerApyAverageAggregateFilter>;
  /** Distinct count aggregate over matching `EraIndexerApy` objects. */
  distinctCount?: InputMaybe<EraIndexerApyDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `EraIndexerApy` object to be included within the aggregate. */
  filter?: InputMaybe<EraIndexerApyFilter>;
  /** Maximum aggregate over matching `EraIndexerApy` objects. */
  max?: InputMaybe<EraIndexerApyMaxAggregateFilter>;
  /** Minimum aggregate over matching `EraIndexerApy` objects. */
  min?: InputMaybe<EraIndexerApyMinAggregateFilter>;
  /** Population standard deviation aggregate over matching `EraIndexerApy` objects. */
  stddevPopulation?: InputMaybe<EraIndexerApyStddevPopulationAggregateFilter>;
  /** Sample standard deviation aggregate over matching `EraIndexerApy` objects. */
  stddevSample?: InputMaybe<EraIndexerApyStddevSampleAggregateFilter>;
  /** Sum aggregate over matching `EraIndexerApy` objects. */
  sum?: InputMaybe<EraIndexerApySumAggregateFilter>;
  /** Population variance aggregate over matching `EraIndexerApy` objects. */
  variancePopulation?: InputMaybe<EraIndexerApyVariancePopulationAggregateFilter>;
  /** Sample variance aggregate over matching `EraIndexerApy` objects. */
  varianceSample?: InputMaybe<EraIndexerApyVarianceSampleAggregateFilter>;
};

export type EraIndexerApyAverageAggregateFilter = {
  delegatorApy?: InputMaybe<BigFloatFilter>;
  delegatorReward?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigFloatFilter>;
  indexerApy?: InputMaybe<BigFloatFilter>;
  indexerReward?: InputMaybe<BigFloatFilter>;
};

export type EraIndexerApyAverageAggregates = {
  __typename?: 'EraIndexerApyAverageAggregates';
  /** Mean average of delegatorApy across the matching connection */
  delegatorApy?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of delegatorReward across the matching connection */
  delegatorReward?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of indexerApy across the matching connection */
  indexerApy?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of indexerReward across the matching connection */
  indexerReward?: Maybe<Scalars['BigFloat']['output']>;
};

export type EraIndexerApyDistinctCountAggregateFilter = {
  _blockRange?: InputMaybe<BigIntFilter>;
  _id?: InputMaybe<BigIntFilter>;
  createAt?: InputMaybe<BigIntFilter>;
  delegatorApy?: InputMaybe<BigIntFilter>;
  delegatorReward?: InputMaybe<BigIntFilter>;
  eraIdx?: InputMaybe<BigIntFilter>;
  id?: InputMaybe<BigIntFilter>;
  indexerApy?: InputMaybe<BigIntFilter>;
  indexerId?: InputMaybe<BigIntFilter>;
  indexerReward?: InputMaybe<BigIntFilter>;
  updateAt?: InputMaybe<BigIntFilter>;
};

export type EraIndexerApyDistinctCountAggregates = {
  __typename?: 'EraIndexerApyDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  _blockRange?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  _id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createAt across the matching connection */
  createAt?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of delegatorApy across the matching connection */
  delegatorApy?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of delegatorReward across the matching connection */
  delegatorReward?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of indexerApy across the matching connection */
  indexerApy?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of indexerId across the matching connection */
  indexerId?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of indexerReward across the matching connection */
  indexerReward?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of updateAt across the matching connection */
  updateAt?: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `EraIndexerApy` object types. All fields are combined with a logical ‘and.’ */
export type EraIndexerApyFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<EraIndexerApyFilter>>;
  /** Filter by the object’s `createAt` field. */
  createAt?: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `delegatorApy` field. */
  delegatorApy?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `delegatorReward` field. */
  delegatorReward?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `eraIdx` field. */
  eraIdx?: InputMaybe<IntFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<StringFilter>;
  /** Filter by the object’s `indexer` relation. */
  indexer?: InputMaybe<IndexerFilter>;
  /** Filter by the object’s `indexerApy` field. */
  indexerApy?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `indexerId` field. */
  indexerId?: InputMaybe<StringFilter>;
  /** Filter by the object’s `indexerReward` field. */
  indexerReward?: InputMaybe<BigFloatFilter>;
  /** Negates the expression. */
  not?: InputMaybe<EraIndexerApyFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<EraIndexerApyFilter>>;
  /** Filter by the object’s `updateAt` field. */
  updateAt?: InputMaybe<DatetimeFilter>;
};

export type EraIndexerApyMaxAggregateFilter = {
  delegatorApy?: InputMaybe<BigFloatFilter>;
  delegatorReward?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<IntFilter>;
  indexerApy?: InputMaybe<BigFloatFilter>;
  indexerReward?: InputMaybe<BigFloatFilter>;
};

export type EraIndexerApyMaxAggregates = {
  __typename?: 'EraIndexerApyMaxAggregates';
  /** Maximum of delegatorApy across the matching connection */
  delegatorApy?: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of delegatorReward across the matching connection */
  delegatorReward?: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['Int']['output']>;
  /** Maximum of indexerApy across the matching connection */
  indexerApy?: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of indexerReward across the matching connection */
  indexerReward?: Maybe<Scalars['BigFloat']['output']>;
};

export type EraIndexerApyMinAggregateFilter = {
  delegatorApy?: InputMaybe<BigFloatFilter>;
  delegatorReward?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<IntFilter>;
  indexerApy?: InputMaybe<BigFloatFilter>;
  indexerReward?: InputMaybe<BigFloatFilter>;
};

export type EraIndexerApyMinAggregates = {
  __typename?: 'EraIndexerApyMinAggregates';
  /** Minimum of delegatorApy across the matching connection */
  delegatorApy?: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of delegatorReward across the matching connection */
  delegatorReward?: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['Int']['output']>;
  /** Minimum of indexerApy across the matching connection */
  indexerApy?: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of indexerReward across the matching connection */
  indexerReward?: Maybe<Scalars['BigFloat']['output']>;
};

export type EraIndexerApyStddevPopulationAggregateFilter = {
  delegatorApy?: InputMaybe<BigFloatFilter>;
  delegatorReward?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigFloatFilter>;
  indexerApy?: InputMaybe<BigFloatFilter>;
  indexerReward?: InputMaybe<BigFloatFilter>;
};

export type EraIndexerApyStddevPopulationAggregates = {
  __typename?: 'EraIndexerApyStddevPopulationAggregates';
  /** Population standard deviation of delegatorApy across the matching connection */
  delegatorApy?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of delegatorReward across the matching connection */
  delegatorReward?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of indexerApy across the matching connection */
  indexerApy?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of indexerReward across the matching connection */
  indexerReward?: Maybe<Scalars['BigFloat']['output']>;
};

export type EraIndexerApyStddevSampleAggregateFilter = {
  delegatorApy?: InputMaybe<BigFloatFilter>;
  delegatorReward?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigFloatFilter>;
  indexerApy?: InputMaybe<BigFloatFilter>;
  indexerReward?: InputMaybe<BigFloatFilter>;
};

export type EraIndexerApyStddevSampleAggregates = {
  __typename?: 'EraIndexerApyStddevSampleAggregates';
  /** Sample standard deviation of delegatorApy across the matching connection */
  delegatorApy?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of delegatorReward across the matching connection */
  delegatorReward?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of indexerApy across the matching connection */
  indexerApy?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of indexerReward across the matching connection */
  indexerReward?: Maybe<Scalars['BigFloat']['output']>;
};

export type EraIndexerApySumAggregateFilter = {
  delegatorApy?: InputMaybe<BigFloatFilter>;
  delegatorReward?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigIntFilter>;
  indexerApy?: InputMaybe<BigFloatFilter>;
  indexerReward?: InputMaybe<BigFloatFilter>;
};

export type EraIndexerApySumAggregates = {
  __typename?: 'EraIndexerApySumAggregates';
  /** Sum of delegatorApy across the matching connection */
  delegatorApy: Scalars['BigFloat']['output'];
  /** Sum of delegatorReward across the matching connection */
  delegatorReward: Scalars['BigFloat']['output'];
  /** Sum of eraIdx across the matching connection */
  eraIdx: Scalars['BigInt']['output'];
  /** Sum of indexerApy across the matching connection */
  indexerApy: Scalars['BigFloat']['output'];
  /** Sum of indexerReward across the matching connection */
  indexerReward: Scalars['BigFloat']['output'];
};

export type EraIndexerApyVariancePopulationAggregateFilter = {
  delegatorApy?: InputMaybe<BigFloatFilter>;
  delegatorReward?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigFloatFilter>;
  indexerApy?: InputMaybe<BigFloatFilter>;
  indexerReward?: InputMaybe<BigFloatFilter>;
};

export type EraIndexerApyVariancePopulationAggregates = {
  __typename?: 'EraIndexerApyVariancePopulationAggregates';
  /** Population variance of delegatorApy across the matching connection */
  delegatorApy?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of delegatorReward across the matching connection */
  delegatorReward?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of indexerApy across the matching connection */
  indexerApy?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of indexerReward across the matching connection */
  indexerReward?: Maybe<Scalars['BigFloat']['output']>;
};

export type EraIndexerApyVarianceSampleAggregateFilter = {
  delegatorApy?: InputMaybe<BigFloatFilter>;
  delegatorReward?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigFloatFilter>;
  indexerApy?: InputMaybe<BigFloatFilter>;
  indexerReward?: InputMaybe<BigFloatFilter>;
};

export type EraIndexerApyVarianceSampleAggregates = {
  __typename?: 'EraIndexerApyVarianceSampleAggregates';
  /** Sample variance of delegatorApy across the matching connection */
  delegatorApy?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of delegatorReward across the matching connection */
  delegatorReward?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of indexerApy across the matching connection */
  indexerApy?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of indexerReward across the matching connection */
  indexerReward?: Maybe<Scalars['BigFloat']['output']>;
};

export type EraIndexerDelegator = Node & {
  __typename?: 'EraIndexerDelegator';
  delegators: Scalars['JSON']['output'];
  era: Scalars['Int']['output'];
  id: Scalars['String']['output'];
  indexer: Scalars['String']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  selfStake: Scalars['BigFloat']['output'];
  totalStake: Scalars['BigFloat']['output'];
};


export type EraIndexerDelegatorDelegatorsArgs = {
  distinct?: InputMaybe<Array<InputMaybe<Delegators_Distinct_Enum>>>;
};

export type EraIndexerDelegatorAggregates = {
  __typename?: 'EraIndexerDelegatorAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  average?: Maybe<EraIndexerDelegatorAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  distinctCount?: Maybe<EraIndexerDelegatorDistinctCountAggregates>;
  keys?: Maybe<Array<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  max?: Maybe<EraIndexerDelegatorMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  min?: Maybe<EraIndexerDelegatorMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevPopulation?: Maybe<EraIndexerDelegatorStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevSample?: Maybe<EraIndexerDelegatorStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  sum?: Maybe<EraIndexerDelegatorSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  variancePopulation?: Maybe<EraIndexerDelegatorVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  varianceSample?: Maybe<EraIndexerDelegatorVarianceSampleAggregates>;
};

export type EraIndexerDelegatorAverageAggregates = {
  __typename?: 'EraIndexerDelegatorAverageAggregates';
  /** Mean average of era across the matching connection */
  era?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of selfStake across the matching connection */
  selfStake?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of totalStake across the matching connection */
  totalStake?: Maybe<Scalars['BigFloat']['output']>;
};

export type EraIndexerDelegatorDistinctCountAggregates = {
  __typename?: 'EraIndexerDelegatorDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  _blockRange?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  _id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of delegators across the matching connection */
  delegators?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of era across the matching connection */
  era?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of indexer across the matching connection */
  indexer?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of selfStake across the matching connection */
  selfStake?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of totalStake across the matching connection */
  totalStake?: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `EraIndexerDelegator` object types. All fields are combined with a logical ‘and.’ */
export type EraIndexerDelegatorFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<EraIndexerDelegatorFilter>>;
  /** Filter by the object’s `delegators` field. */
  delegators?: InputMaybe<JsonFilter>;
  /** Filter by the object’s `era` field. */
  era?: InputMaybe<IntFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<StringFilter>;
  /** Filter by the object’s `indexer` field. */
  indexer?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<EraIndexerDelegatorFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<EraIndexerDelegatorFilter>>;
  /** Filter by the object’s `selfStake` field. */
  selfStake?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `totalStake` field. */
  totalStake?: InputMaybe<BigFloatFilter>;
};

export type EraIndexerDelegatorMaxAggregates = {
  __typename?: 'EraIndexerDelegatorMaxAggregates';
  /** Maximum of era across the matching connection */
  era?: Maybe<Scalars['Int']['output']>;
  /** Maximum of selfStake across the matching connection */
  selfStake?: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of totalStake across the matching connection */
  totalStake?: Maybe<Scalars['BigFloat']['output']>;
};

export type EraIndexerDelegatorMinAggregates = {
  __typename?: 'EraIndexerDelegatorMinAggregates';
  /** Minimum of era across the matching connection */
  era?: Maybe<Scalars['Int']['output']>;
  /** Minimum of selfStake across the matching connection */
  selfStake?: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of totalStake across the matching connection */
  totalStake?: Maybe<Scalars['BigFloat']['output']>;
};

export type EraIndexerDelegatorStddevPopulationAggregates = {
  __typename?: 'EraIndexerDelegatorStddevPopulationAggregates';
  /** Population standard deviation of era across the matching connection */
  era?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of selfStake across the matching connection */
  selfStake?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of totalStake across the matching connection */
  totalStake?: Maybe<Scalars['BigFloat']['output']>;
};

export type EraIndexerDelegatorStddevSampleAggregates = {
  __typename?: 'EraIndexerDelegatorStddevSampleAggregates';
  /** Sample standard deviation of era across the matching connection */
  era?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of selfStake across the matching connection */
  selfStake?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of totalStake across the matching connection */
  totalStake?: Maybe<Scalars['BigFloat']['output']>;
};

export type EraIndexerDelegatorSumAggregates = {
  __typename?: 'EraIndexerDelegatorSumAggregates';
  /** Sum of era across the matching connection */
  era: Scalars['BigInt']['output'];
  /** Sum of selfStake across the matching connection */
  selfStake: Scalars['BigFloat']['output'];
  /** Sum of totalStake across the matching connection */
  totalStake: Scalars['BigFloat']['output'];
};

export type EraIndexerDelegatorVariancePopulationAggregates = {
  __typename?: 'EraIndexerDelegatorVariancePopulationAggregates';
  /** Population variance of era across the matching connection */
  era?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of selfStake across the matching connection */
  selfStake?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of totalStake across the matching connection */
  totalStake?: Maybe<Scalars['BigFloat']['output']>;
};

export type EraIndexerDelegatorVarianceSampleAggregates = {
  __typename?: 'EraIndexerDelegatorVarianceSampleAggregates';
  /** Sample variance of era across the matching connection */
  era?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of selfStake across the matching connection */
  selfStake?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of totalStake across the matching connection */
  totalStake?: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `EraIndexerDelegator` values. */
export type EraIndexerDelegatorsConnection = {
  __typename?: 'EraIndexerDelegatorsConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<EraIndexerDelegatorAggregates>;
  /** A list of edges which contains the `EraIndexerDelegator` and cursor to aid in pagination. */
  edges: Array<EraIndexerDelegatorsEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<EraIndexerDelegatorAggregates>>;
  /** A list of `EraIndexerDelegator` objects. */
  nodes: Array<Maybe<EraIndexerDelegator>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `EraIndexerDelegator` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `EraIndexerDelegator` values. */
export type EraIndexerDelegatorsConnectionGroupedAggregatesArgs = {
  groupBy: Array<EraIndexerDelegatorsGroupBy>;
  having?: InputMaybe<EraIndexerDelegatorsHavingInput>;
};

/** A `EraIndexerDelegator` edge in the connection. */
export type EraIndexerDelegatorsEdge = {
  __typename?: 'EraIndexerDelegatorsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `EraIndexerDelegator` at the end of the edge. */
  node?: Maybe<EraIndexerDelegator>;
};

/** Grouping methods for `EraIndexerDelegator` for usage during aggregation. */
export enum EraIndexerDelegatorsGroupBy {
  Delegators = 'DELEGATORS',
  Era = 'ERA',
  Id = 'ID',
  Indexer = 'INDEXER',
  SelfStake = 'SELF_STAKE',
  TotalStake = 'TOTAL_STAKE'
}

export type EraIndexerDelegatorsHavingAverageInput = {
  era?: InputMaybe<HavingIntFilter>;
  selfStake?: InputMaybe<HavingBigfloatFilter>;
  totalStake?: InputMaybe<HavingBigfloatFilter>;
};

export type EraIndexerDelegatorsHavingDistinctCountInput = {
  era?: InputMaybe<HavingIntFilter>;
  selfStake?: InputMaybe<HavingBigfloatFilter>;
  totalStake?: InputMaybe<HavingBigfloatFilter>;
};

/** Conditions for `EraIndexerDelegator` aggregates. */
export type EraIndexerDelegatorsHavingInput = {
  AND?: InputMaybe<Array<EraIndexerDelegatorsHavingInput>>;
  OR?: InputMaybe<Array<EraIndexerDelegatorsHavingInput>>;
  average?: InputMaybe<EraIndexerDelegatorsHavingAverageInput>;
  distinctCount?: InputMaybe<EraIndexerDelegatorsHavingDistinctCountInput>;
  max?: InputMaybe<EraIndexerDelegatorsHavingMaxInput>;
  min?: InputMaybe<EraIndexerDelegatorsHavingMinInput>;
  stddevPopulation?: InputMaybe<EraIndexerDelegatorsHavingStddevPopulationInput>;
  stddevSample?: InputMaybe<EraIndexerDelegatorsHavingStddevSampleInput>;
  sum?: InputMaybe<EraIndexerDelegatorsHavingSumInput>;
  variancePopulation?: InputMaybe<EraIndexerDelegatorsHavingVariancePopulationInput>;
  varianceSample?: InputMaybe<EraIndexerDelegatorsHavingVarianceSampleInput>;
};

export type EraIndexerDelegatorsHavingMaxInput = {
  era?: InputMaybe<HavingIntFilter>;
  selfStake?: InputMaybe<HavingBigfloatFilter>;
  totalStake?: InputMaybe<HavingBigfloatFilter>;
};

export type EraIndexerDelegatorsHavingMinInput = {
  era?: InputMaybe<HavingIntFilter>;
  selfStake?: InputMaybe<HavingBigfloatFilter>;
  totalStake?: InputMaybe<HavingBigfloatFilter>;
};

export type EraIndexerDelegatorsHavingStddevPopulationInput = {
  era?: InputMaybe<HavingIntFilter>;
  selfStake?: InputMaybe<HavingBigfloatFilter>;
  totalStake?: InputMaybe<HavingBigfloatFilter>;
};

export type EraIndexerDelegatorsHavingStddevSampleInput = {
  era?: InputMaybe<HavingIntFilter>;
  selfStake?: InputMaybe<HavingBigfloatFilter>;
  totalStake?: InputMaybe<HavingBigfloatFilter>;
};

export type EraIndexerDelegatorsHavingSumInput = {
  era?: InputMaybe<HavingIntFilter>;
  selfStake?: InputMaybe<HavingBigfloatFilter>;
  totalStake?: InputMaybe<HavingBigfloatFilter>;
};

export type EraIndexerDelegatorsHavingVariancePopulationInput = {
  era?: InputMaybe<HavingIntFilter>;
  selfStake?: InputMaybe<HavingBigfloatFilter>;
  totalStake?: InputMaybe<HavingBigfloatFilter>;
};

export type EraIndexerDelegatorsHavingVarianceSampleInput = {
  era?: InputMaybe<HavingIntFilter>;
  selfStake?: InputMaybe<HavingBigfloatFilter>;
  totalStake?: InputMaybe<HavingBigfloatFilter>;
};

/** Methods to use when ordering `EraIndexerDelegator`. */
export enum EraIndexerDelegatorsOrderBy {
  DelegatorsAsc = 'DELEGATORS_ASC',
  DelegatorsDesc = 'DELEGATORS_DESC',
  EraAsc = 'ERA_ASC',
  EraDesc = 'ERA_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  IndexerAsc = 'INDEXER_ASC',
  IndexerDesc = 'INDEXER_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  SelfStakeAsc = 'SELF_STAKE_ASC',
  SelfStakeDesc = 'SELF_STAKE_DESC',
  TotalStakeAsc = 'TOTAL_STAKE_ASC',
  TotalStakeDesc = 'TOTAL_STAKE_DESC'
}

/** A connection to a list of `EraIndexerDeploymentApy` values. */
export type EraIndexerDeploymentApiesConnection = {
  __typename?: 'EraIndexerDeploymentApiesConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<EraIndexerDeploymentApyAggregates>;
  /** A list of edges which contains the `EraIndexerDeploymentApy` and cursor to aid in pagination. */
  edges: Array<EraIndexerDeploymentApiesEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<EraIndexerDeploymentApyAggregates>>;
  /** A list of `EraIndexerDeploymentApy` objects. */
  nodes: Array<Maybe<EraIndexerDeploymentApy>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `EraIndexerDeploymentApy` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `EraIndexerDeploymentApy` values. */
export type EraIndexerDeploymentApiesConnectionGroupedAggregatesArgs = {
  groupBy: Array<EraIndexerDeploymentApiesGroupBy>;
  having?: InputMaybe<EraIndexerDeploymentApiesHavingInput>;
};

/** A `EraIndexerDeploymentApy` edge in the connection. */
export type EraIndexerDeploymentApiesEdge = {
  __typename?: 'EraIndexerDeploymentApiesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `EraIndexerDeploymentApy` at the end of the edge. */
  node?: Maybe<EraIndexerDeploymentApy>;
};

/** Grouping methods for `EraIndexerDeploymentApy` for usage during aggregation. */
export enum EraIndexerDeploymentApiesGroupBy {
  AgreementReward = 'AGREEMENT_REWARD',
  AllocationReward = 'ALLOCATION_REWARD',
  Apy = 'APY',
  ApyCalcAdded = 'APY_CALC_ADDED',
  ApyCalcAllocation = 'APY_CALC_ALLOCATION',
  ApyCalcAllocationRecordAt = 'APY_CALC_ALLOCATION_RECORD_AT',
  ApyCalcAllocationRecordAtTruncatedToDay = 'APY_CALC_ALLOCATION_RECORD_AT_TRUNCATED_TO_DAY',
  ApyCalcAllocationRecordAtTruncatedToHour = 'APY_CALC_ALLOCATION_RECORD_AT_TRUNCATED_TO_HOUR',
  ApyCalcHistory = 'APY_CALC_HISTORY',
  ApyCalcRemoval = 'APY_CALC_REMOVAL',
  CreateAt = 'CREATE_AT',
  CreateAtTruncatedToDay = 'CREATE_AT_TRUNCATED_TO_DAY',
  CreateAtTruncatedToHour = 'CREATE_AT_TRUNCATED_TO_HOUR',
  DeploymentId = 'DEPLOYMENT_ID',
  EraIdx = 'ERA_IDX',
  FlexPlanReward = 'FLEX_PLAN_REWARD',
  Id = 'ID',
  IndexerId = 'INDEXER_ID',
  UpdateAt = 'UPDATE_AT',
  UpdateAtTruncatedToDay = 'UPDATE_AT_TRUNCATED_TO_DAY',
  UpdateAtTruncatedToHour = 'UPDATE_AT_TRUNCATED_TO_HOUR'
}

export type EraIndexerDeploymentApiesHavingAverageInput = {
  agreementReward?: InputMaybe<HavingBigfloatFilter>;
  allocationReward?: InputMaybe<HavingBigfloatFilter>;
  apy?: InputMaybe<HavingBigfloatFilter>;
  apyCalcAdded?: InputMaybe<HavingBigfloatFilter>;
  apyCalcAllocation?: InputMaybe<HavingBigfloatFilter>;
  apyCalcAllocationRecordAt?: InputMaybe<HavingDatetimeFilter>;
  apyCalcRemoval?: InputMaybe<HavingBigfloatFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  flexPlanReward?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type EraIndexerDeploymentApiesHavingDistinctCountInput = {
  agreementReward?: InputMaybe<HavingBigfloatFilter>;
  allocationReward?: InputMaybe<HavingBigfloatFilter>;
  apy?: InputMaybe<HavingBigfloatFilter>;
  apyCalcAdded?: InputMaybe<HavingBigfloatFilter>;
  apyCalcAllocation?: InputMaybe<HavingBigfloatFilter>;
  apyCalcAllocationRecordAt?: InputMaybe<HavingDatetimeFilter>;
  apyCalcRemoval?: InputMaybe<HavingBigfloatFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  flexPlanReward?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

/** Conditions for `EraIndexerDeploymentApy` aggregates. */
export type EraIndexerDeploymentApiesHavingInput = {
  AND?: InputMaybe<Array<EraIndexerDeploymentApiesHavingInput>>;
  OR?: InputMaybe<Array<EraIndexerDeploymentApiesHavingInput>>;
  average?: InputMaybe<EraIndexerDeploymentApiesHavingAverageInput>;
  distinctCount?: InputMaybe<EraIndexerDeploymentApiesHavingDistinctCountInput>;
  max?: InputMaybe<EraIndexerDeploymentApiesHavingMaxInput>;
  min?: InputMaybe<EraIndexerDeploymentApiesHavingMinInput>;
  stddevPopulation?: InputMaybe<EraIndexerDeploymentApiesHavingStddevPopulationInput>;
  stddevSample?: InputMaybe<EraIndexerDeploymentApiesHavingStddevSampleInput>;
  sum?: InputMaybe<EraIndexerDeploymentApiesHavingSumInput>;
  variancePopulation?: InputMaybe<EraIndexerDeploymentApiesHavingVariancePopulationInput>;
  varianceSample?: InputMaybe<EraIndexerDeploymentApiesHavingVarianceSampleInput>;
};

export type EraIndexerDeploymentApiesHavingMaxInput = {
  agreementReward?: InputMaybe<HavingBigfloatFilter>;
  allocationReward?: InputMaybe<HavingBigfloatFilter>;
  apy?: InputMaybe<HavingBigfloatFilter>;
  apyCalcAdded?: InputMaybe<HavingBigfloatFilter>;
  apyCalcAllocation?: InputMaybe<HavingBigfloatFilter>;
  apyCalcAllocationRecordAt?: InputMaybe<HavingDatetimeFilter>;
  apyCalcRemoval?: InputMaybe<HavingBigfloatFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  flexPlanReward?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type EraIndexerDeploymentApiesHavingMinInput = {
  agreementReward?: InputMaybe<HavingBigfloatFilter>;
  allocationReward?: InputMaybe<HavingBigfloatFilter>;
  apy?: InputMaybe<HavingBigfloatFilter>;
  apyCalcAdded?: InputMaybe<HavingBigfloatFilter>;
  apyCalcAllocation?: InputMaybe<HavingBigfloatFilter>;
  apyCalcAllocationRecordAt?: InputMaybe<HavingDatetimeFilter>;
  apyCalcRemoval?: InputMaybe<HavingBigfloatFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  flexPlanReward?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type EraIndexerDeploymentApiesHavingStddevPopulationInput = {
  agreementReward?: InputMaybe<HavingBigfloatFilter>;
  allocationReward?: InputMaybe<HavingBigfloatFilter>;
  apy?: InputMaybe<HavingBigfloatFilter>;
  apyCalcAdded?: InputMaybe<HavingBigfloatFilter>;
  apyCalcAllocation?: InputMaybe<HavingBigfloatFilter>;
  apyCalcAllocationRecordAt?: InputMaybe<HavingDatetimeFilter>;
  apyCalcRemoval?: InputMaybe<HavingBigfloatFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  flexPlanReward?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type EraIndexerDeploymentApiesHavingStddevSampleInput = {
  agreementReward?: InputMaybe<HavingBigfloatFilter>;
  allocationReward?: InputMaybe<HavingBigfloatFilter>;
  apy?: InputMaybe<HavingBigfloatFilter>;
  apyCalcAdded?: InputMaybe<HavingBigfloatFilter>;
  apyCalcAllocation?: InputMaybe<HavingBigfloatFilter>;
  apyCalcAllocationRecordAt?: InputMaybe<HavingDatetimeFilter>;
  apyCalcRemoval?: InputMaybe<HavingBigfloatFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  flexPlanReward?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type EraIndexerDeploymentApiesHavingSumInput = {
  agreementReward?: InputMaybe<HavingBigfloatFilter>;
  allocationReward?: InputMaybe<HavingBigfloatFilter>;
  apy?: InputMaybe<HavingBigfloatFilter>;
  apyCalcAdded?: InputMaybe<HavingBigfloatFilter>;
  apyCalcAllocation?: InputMaybe<HavingBigfloatFilter>;
  apyCalcAllocationRecordAt?: InputMaybe<HavingDatetimeFilter>;
  apyCalcRemoval?: InputMaybe<HavingBigfloatFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  flexPlanReward?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type EraIndexerDeploymentApiesHavingVariancePopulationInput = {
  agreementReward?: InputMaybe<HavingBigfloatFilter>;
  allocationReward?: InputMaybe<HavingBigfloatFilter>;
  apy?: InputMaybe<HavingBigfloatFilter>;
  apyCalcAdded?: InputMaybe<HavingBigfloatFilter>;
  apyCalcAllocation?: InputMaybe<HavingBigfloatFilter>;
  apyCalcAllocationRecordAt?: InputMaybe<HavingDatetimeFilter>;
  apyCalcRemoval?: InputMaybe<HavingBigfloatFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  flexPlanReward?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type EraIndexerDeploymentApiesHavingVarianceSampleInput = {
  agreementReward?: InputMaybe<HavingBigfloatFilter>;
  allocationReward?: InputMaybe<HavingBigfloatFilter>;
  apy?: InputMaybe<HavingBigfloatFilter>;
  apyCalcAdded?: InputMaybe<HavingBigfloatFilter>;
  apyCalcAllocation?: InputMaybe<HavingBigfloatFilter>;
  apyCalcAllocationRecordAt?: InputMaybe<HavingDatetimeFilter>;
  apyCalcRemoval?: InputMaybe<HavingBigfloatFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  flexPlanReward?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

/** Methods to use when ordering `EraIndexerDeploymentApy`. */
export enum EraIndexerDeploymentApiesOrderBy {
  AgreementRewardAsc = 'AGREEMENT_REWARD_ASC',
  AgreementRewardDesc = 'AGREEMENT_REWARD_DESC',
  AllocationRewardAsc = 'ALLOCATION_REWARD_ASC',
  AllocationRewardDesc = 'ALLOCATION_REWARD_DESC',
  ApyAsc = 'APY_ASC',
  ApyCalcAddedAsc = 'APY_CALC_ADDED_ASC',
  ApyCalcAddedDesc = 'APY_CALC_ADDED_DESC',
  ApyCalcAllocationAsc = 'APY_CALC_ALLOCATION_ASC',
  ApyCalcAllocationDesc = 'APY_CALC_ALLOCATION_DESC',
  ApyCalcAllocationRecordAtAsc = 'APY_CALC_ALLOCATION_RECORD_AT_ASC',
  ApyCalcAllocationRecordAtDesc = 'APY_CALC_ALLOCATION_RECORD_AT_DESC',
  ApyCalcHistoryAsc = 'APY_CALC_HISTORY_ASC',
  ApyCalcHistoryDesc = 'APY_CALC_HISTORY_DESC',
  ApyCalcRemovalAsc = 'APY_CALC_REMOVAL_ASC',
  ApyCalcRemovalDesc = 'APY_CALC_REMOVAL_DESC',
  ApyDesc = 'APY_DESC',
  CreateAtAsc = 'CREATE_AT_ASC',
  CreateAtDesc = 'CREATE_AT_DESC',
  DeploymentByDeploymentIdCreatedBlockAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_ASC',
  DeploymentByDeploymentIdCreatedBlockDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_DESC',
  DeploymentByDeploymentIdCreatedTimestampAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_ASC',
  DeploymentByDeploymentIdCreatedTimestampDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_DESC',
  DeploymentByDeploymentIdIdAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__ID_ASC',
  DeploymentByDeploymentIdIdDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__ID_DESC',
  DeploymentByDeploymentIdLastEventAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_ASC',
  DeploymentByDeploymentIdLastEventDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_DESC',
  DeploymentByDeploymentIdMetadataAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_ASC',
  DeploymentByDeploymentIdMetadataDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_DESC',
  DeploymentByDeploymentIdProjectIdAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_ASC',
  DeploymentByDeploymentIdProjectIdDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_DESC',
  DeploymentIdAsc = 'DEPLOYMENT_ID_ASC',
  DeploymentIdDesc = 'DEPLOYMENT_ID_DESC',
  EraIdxAsc = 'ERA_IDX_ASC',
  EraIdxDesc = 'ERA_IDX_DESC',
  FlexPlanRewardAsc = 'FLEX_PLAN_REWARD_ASC',
  FlexPlanRewardDesc = 'FLEX_PLAN_REWARD_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  IndexerByIndexerIdActiveAsc = 'INDEXER_BY_INDEXER_ID__ACTIVE_ASC',
  IndexerByIndexerIdActiveDesc = 'INDEXER_BY_INDEXER_ID__ACTIVE_DESC',
  IndexerByIndexerIdCapacityAsc = 'INDEXER_BY_INDEXER_ID__CAPACITY_ASC',
  IndexerByIndexerIdCapacityDesc = 'INDEXER_BY_INDEXER_ID__CAPACITY_DESC',
  IndexerByIndexerIdCommissionAsc = 'INDEXER_BY_INDEXER_ID__COMMISSION_ASC',
  IndexerByIndexerIdCommissionDesc = 'INDEXER_BY_INDEXER_ID__COMMISSION_DESC',
  IndexerByIndexerIdControllerAsc = 'INDEXER_BY_INDEXER_ID__CONTROLLER_ASC',
  IndexerByIndexerIdControllerDesc = 'INDEXER_BY_INDEXER_ID__CONTROLLER_DESC',
  IndexerByIndexerIdCreatedBlockAsc = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_ASC',
  IndexerByIndexerIdCreatedBlockDesc = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_DESC',
  IndexerByIndexerIdIdAsc = 'INDEXER_BY_INDEXER_ID__ID_ASC',
  IndexerByIndexerIdIdDesc = 'INDEXER_BY_INDEXER_ID__ID_DESC',
  IndexerByIndexerIdLastClaimEraAsc = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_ASC',
  IndexerByIndexerIdLastClaimEraDesc = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_DESC',
  IndexerByIndexerIdLastEventAsc = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_ASC',
  IndexerByIndexerIdLastEventDesc = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_DESC',
  IndexerByIndexerIdLastSettledEraAsc = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_ASC',
  IndexerByIndexerIdLastSettledEraDesc = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_DESC',
  IndexerByIndexerIdMaxUnstakeAmountAsc = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_ASC',
  IndexerByIndexerIdMaxUnstakeAmountDesc = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_DESC',
  IndexerByIndexerIdMetadataAsc = 'INDEXER_BY_INDEXER_ID__METADATA_ASC',
  IndexerByIndexerIdMetadataDesc = 'INDEXER_BY_INDEXER_ID__METADATA_DESC',
  IndexerByIndexerIdSelfStakeAsc = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_ASC',
  IndexerByIndexerIdSelfStakeDesc = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_DESC',
  IndexerByIndexerIdTotalStakeAsc = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_ASC',
  IndexerByIndexerIdTotalStakeDesc = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_DESC',
  IndexerIdAsc = 'INDEXER_ID_ASC',
  IndexerIdDesc = 'INDEXER_ID_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  UpdateAtAsc = 'UPDATE_AT_ASC',
  UpdateAtDesc = 'UPDATE_AT_DESC'
}

export type EraIndexerDeploymentApy = Node & {
  __typename?: 'EraIndexerDeploymentApy';
  agreementReward: Scalars['BigFloat']['output'];
  allocationReward: Scalars['BigFloat']['output'];
  apy: Scalars['BigFloat']['output'];
  apyCalcAdded: Scalars['BigFloat']['output'];
  apyCalcAllocation: Scalars['BigFloat']['output'];
  apyCalcAllocationRecordAt: Scalars['Datetime']['output'];
  apyCalcHistory: Scalars['String']['output'];
  apyCalcRemoval: Scalars['BigFloat']['output'];
  createAt: Scalars['Datetime']['output'];
  /** Reads a single `Deployment` that is related to this `EraIndexerDeploymentApy`. */
  deployment?: Maybe<Deployment>;
  deploymentId: Scalars['String']['output'];
  eraIdx: Scalars['Int']['output'];
  flexPlanReward: Scalars['BigFloat']['output'];
  id: Scalars['String']['output'];
  /** Reads a single `Indexer` that is related to this `EraIndexerDeploymentApy`. */
  indexer?: Maybe<Indexer>;
  indexerId: Scalars['String']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  updateAt: Scalars['Datetime']['output'];
};

export type EraIndexerDeploymentApyAggregates = {
  __typename?: 'EraIndexerDeploymentApyAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  average?: Maybe<EraIndexerDeploymentApyAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  distinctCount?: Maybe<EraIndexerDeploymentApyDistinctCountAggregates>;
  keys?: Maybe<Array<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  max?: Maybe<EraIndexerDeploymentApyMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  min?: Maybe<EraIndexerDeploymentApyMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevPopulation?: Maybe<EraIndexerDeploymentApyStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevSample?: Maybe<EraIndexerDeploymentApyStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  sum?: Maybe<EraIndexerDeploymentApySumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  variancePopulation?: Maybe<EraIndexerDeploymentApyVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  varianceSample?: Maybe<EraIndexerDeploymentApyVarianceSampleAggregates>;
};

/** A filter to be used against aggregates of `EraIndexerDeploymentApy` object types. */
export type EraIndexerDeploymentApyAggregatesFilter = {
  /** Mean average aggregate over matching `EraIndexerDeploymentApy` objects. */
  average?: InputMaybe<EraIndexerDeploymentApyAverageAggregateFilter>;
  /** Distinct count aggregate over matching `EraIndexerDeploymentApy` objects. */
  distinctCount?: InputMaybe<EraIndexerDeploymentApyDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `EraIndexerDeploymentApy` object to be included within the aggregate. */
  filter?: InputMaybe<EraIndexerDeploymentApyFilter>;
  /** Maximum aggregate over matching `EraIndexerDeploymentApy` objects. */
  max?: InputMaybe<EraIndexerDeploymentApyMaxAggregateFilter>;
  /** Minimum aggregate over matching `EraIndexerDeploymentApy` objects. */
  min?: InputMaybe<EraIndexerDeploymentApyMinAggregateFilter>;
  /** Population standard deviation aggregate over matching `EraIndexerDeploymentApy` objects. */
  stddevPopulation?: InputMaybe<EraIndexerDeploymentApyStddevPopulationAggregateFilter>;
  /** Sample standard deviation aggregate over matching `EraIndexerDeploymentApy` objects. */
  stddevSample?: InputMaybe<EraIndexerDeploymentApyStddevSampleAggregateFilter>;
  /** Sum aggregate over matching `EraIndexerDeploymentApy` objects. */
  sum?: InputMaybe<EraIndexerDeploymentApySumAggregateFilter>;
  /** Population variance aggregate over matching `EraIndexerDeploymentApy` objects. */
  variancePopulation?: InputMaybe<EraIndexerDeploymentApyVariancePopulationAggregateFilter>;
  /** Sample variance aggregate over matching `EraIndexerDeploymentApy` objects. */
  varianceSample?: InputMaybe<EraIndexerDeploymentApyVarianceSampleAggregateFilter>;
};

export type EraIndexerDeploymentApyAverageAggregateFilter = {
  agreementReward?: InputMaybe<BigFloatFilter>;
  allocationReward?: InputMaybe<BigFloatFilter>;
  apy?: InputMaybe<BigFloatFilter>;
  apyCalcAdded?: InputMaybe<BigFloatFilter>;
  apyCalcAllocation?: InputMaybe<BigFloatFilter>;
  apyCalcRemoval?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigFloatFilter>;
  flexPlanReward?: InputMaybe<BigFloatFilter>;
};

export type EraIndexerDeploymentApyAverageAggregates = {
  __typename?: 'EraIndexerDeploymentApyAverageAggregates';
  /** Mean average of agreementReward across the matching connection */
  agreementReward?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of allocationReward across the matching connection */
  allocationReward?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of apy across the matching connection */
  apy?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of apyCalcAdded across the matching connection */
  apyCalcAdded?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of apyCalcAllocation across the matching connection */
  apyCalcAllocation?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of apyCalcRemoval across the matching connection */
  apyCalcRemoval?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of flexPlanReward across the matching connection */
  flexPlanReward?: Maybe<Scalars['BigFloat']['output']>;
};

export type EraIndexerDeploymentApyDistinctCountAggregateFilter = {
  _blockRange?: InputMaybe<BigIntFilter>;
  _id?: InputMaybe<BigIntFilter>;
  agreementReward?: InputMaybe<BigIntFilter>;
  allocationReward?: InputMaybe<BigIntFilter>;
  apy?: InputMaybe<BigIntFilter>;
  apyCalcAdded?: InputMaybe<BigIntFilter>;
  apyCalcAllocation?: InputMaybe<BigIntFilter>;
  apyCalcAllocationRecordAt?: InputMaybe<BigIntFilter>;
  apyCalcHistory?: InputMaybe<BigIntFilter>;
  apyCalcRemoval?: InputMaybe<BigIntFilter>;
  createAt?: InputMaybe<BigIntFilter>;
  deploymentId?: InputMaybe<BigIntFilter>;
  eraIdx?: InputMaybe<BigIntFilter>;
  flexPlanReward?: InputMaybe<BigIntFilter>;
  id?: InputMaybe<BigIntFilter>;
  indexerId?: InputMaybe<BigIntFilter>;
  updateAt?: InputMaybe<BigIntFilter>;
};

export type EraIndexerDeploymentApyDistinctCountAggregates = {
  __typename?: 'EraIndexerDeploymentApyDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  _blockRange?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  _id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of agreementReward across the matching connection */
  agreementReward?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of allocationReward across the matching connection */
  allocationReward?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of apy across the matching connection */
  apy?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of apyCalcAdded across the matching connection */
  apyCalcAdded?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of apyCalcAllocation across the matching connection */
  apyCalcAllocation?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of apyCalcAllocationRecordAt across the matching connection */
  apyCalcAllocationRecordAt?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of apyCalcHistory across the matching connection */
  apyCalcHistory?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of apyCalcRemoval across the matching connection */
  apyCalcRemoval?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createAt across the matching connection */
  createAt?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of deploymentId across the matching connection */
  deploymentId?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of flexPlanReward across the matching connection */
  flexPlanReward?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of indexerId across the matching connection */
  indexerId?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of updateAt across the matching connection */
  updateAt?: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `EraIndexerDeploymentApy` object types. All fields are combined with a logical ‘and.’ */
export type EraIndexerDeploymentApyFilter = {
  /** Filter by the object’s `agreementReward` field. */
  agreementReward?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `allocationReward` field. */
  allocationReward?: InputMaybe<BigFloatFilter>;
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<EraIndexerDeploymentApyFilter>>;
  /** Filter by the object’s `apy` field. */
  apy?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `apyCalcAdded` field. */
  apyCalcAdded?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `apyCalcAllocation` field. */
  apyCalcAllocation?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `apyCalcAllocationRecordAt` field. */
  apyCalcAllocationRecordAt?: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `apyCalcHistory` field. */
  apyCalcHistory?: InputMaybe<StringFilter>;
  /** Filter by the object’s `apyCalcRemoval` field. */
  apyCalcRemoval?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `createAt` field. */
  createAt?: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `deployment` relation. */
  deployment?: InputMaybe<DeploymentFilter>;
  /** Filter by the object’s `deploymentId` field. */
  deploymentId?: InputMaybe<StringFilter>;
  /** Filter by the object’s `eraIdx` field. */
  eraIdx?: InputMaybe<IntFilter>;
  /** Filter by the object’s `flexPlanReward` field. */
  flexPlanReward?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<StringFilter>;
  /** Filter by the object’s `indexer` relation. */
  indexer?: InputMaybe<IndexerFilter>;
  /** Filter by the object’s `indexerId` field. */
  indexerId?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<EraIndexerDeploymentApyFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<EraIndexerDeploymentApyFilter>>;
  /** Filter by the object’s `updateAt` field. */
  updateAt?: InputMaybe<DatetimeFilter>;
};

export type EraIndexerDeploymentApyMaxAggregateFilter = {
  agreementReward?: InputMaybe<BigFloatFilter>;
  allocationReward?: InputMaybe<BigFloatFilter>;
  apy?: InputMaybe<BigFloatFilter>;
  apyCalcAdded?: InputMaybe<BigFloatFilter>;
  apyCalcAllocation?: InputMaybe<BigFloatFilter>;
  apyCalcRemoval?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<IntFilter>;
  flexPlanReward?: InputMaybe<BigFloatFilter>;
};

export type EraIndexerDeploymentApyMaxAggregates = {
  __typename?: 'EraIndexerDeploymentApyMaxAggregates';
  /** Maximum of agreementReward across the matching connection */
  agreementReward?: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of allocationReward across the matching connection */
  allocationReward?: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of apy across the matching connection */
  apy?: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of apyCalcAdded across the matching connection */
  apyCalcAdded?: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of apyCalcAllocation across the matching connection */
  apyCalcAllocation?: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of apyCalcRemoval across the matching connection */
  apyCalcRemoval?: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['Int']['output']>;
  /** Maximum of flexPlanReward across the matching connection */
  flexPlanReward?: Maybe<Scalars['BigFloat']['output']>;
};

export type EraIndexerDeploymentApyMinAggregateFilter = {
  agreementReward?: InputMaybe<BigFloatFilter>;
  allocationReward?: InputMaybe<BigFloatFilter>;
  apy?: InputMaybe<BigFloatFilter>;
  apyCalcAdded?: InputMaybe<BigFloatFilter>;
  apyCalcAllocation?: InputMaybe<BigFloatFilter>;
  apyCalcRemoval?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<IntFilter>;
  flexPlanReward?: InputMaybe<BigFloatFilter>;
};

export type EraIndexerDeploymentApyMinAggregates = {
  __typename?: 'EraIndexerDeploymentApyMinAggregates';
  /** Minimum of agreementReward across the matching connection */
  agreementReward?: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of allocationReward across the matching connection */
  allocationReward?: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of apy across the matching connection */
  apy?: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of apyCalcAdded across the matching connection */
  apyCalcAdded?: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of apyCalcAllocation across the matching connection */
  apyCalcAllocation?: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of apyCalcRemoval across the matching connection */
  apyCalcRemoval?: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['Int']['output']>;
  /** Minimum of flexPlanReward across the matching connection */
  flexPlanReward?: Maybe<Scalars['BigFloat']['output']>;
};

export type EraIndexerDeploymentApyStddevPopulationAggregateFilter = {
  agreementReward?: InputMaybe<BigFloatFilter>;
  allocationReward?: InputMaybe<BigFloatFilter>;
  apy?: InputMaybe<BigFloatFilter>;
  apyCalcAdded?: InputMaybe<BigFloatFilter>;
  apyCalcAllocation?: InputMaybe<BigFloatFilter>;
  apyCalcRemoval?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigFloatFilter>;
  flexPlanReward?: InputMaybe<BigFloatFilter>;
};

export type EraIndexerDeploymentApyStddevPopulationAggregates = {
  __typename?: 'EraIndexerDeploymentApyStddevPopulationAggregates';
  /** Population standard deviation of agreementReward across the matching connection */
  agreementReward?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of allocationReward across the matching connection */
  allocationReward?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of apy across the matching connection */
  apy?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of apyCalcAdded across the matching connection */
  apyCalcAdded?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of apyCalcAllocation across the matching connection */
  apyCalcAllocation?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of apyCalcRemoval across the matching connection */
  apyCalcRemoval?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of flexPlanReward across the matching connection */
  flexPlanReward?: Maybe<Scalars['BigFloat']['output']>;
};

export type EraIndexerDeploymentApyStddevSampleAggregateFilter = {
  agreementReward?: InputMaybe<BigFloatFilter>;
  allocationReward?: InputMaybe<BigFloatFilter>;
  apy?: InputMaybe<BigFloatFilter>;
  apyCalcAdded?: InputMaybe<BigFloatFilter>;
  apyCalcAllocation?: InputMaybe<BigFloatFilter>;
  apyCalcRemoval?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigFloatFilter>;
  flexPlanReward?: InputMaybe<BigFloatFilter>;
};

export type EraIndexerDeploymentApyStddevSampleAggregates = {
  __typename?: 'EraIndexerDeploymentApyStddevSampleAggregates';
  /** Sample standard deviation of agreementReward across the matching connection */
  agreementReward?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of allocationReward across the matching connection */
  allocationReward?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of apy across the matching connection */
  apy?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of apyCalcAdded across the matching connection */
  apyCalcAdded?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of apyCalcAllocation across the matching connection */
  apyCalcAllocation?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of apyCalcRemoval across the matching connection */
  apyCalcRemoval?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of flexPlanReward across the matching connection */
  flexPlanReward?: Maybe<Scalars['BigFloat']['output']>;
};

export type EraIndexerDeploymentApySumAggregateFilter = {
  agreementReward?: InputMaybe<BigFloatFilter>;
  allocationReward?: InputMaybe<BigFloatFilter>;
  apy?: InputMaybe<BigFloatFilter>;
  apyCalcAdded?: InputMaybe<BigFloatFilter>;
  apyCalcAllocation?: InputMaybe<BigFloatFilter>;
  apyCalcRemoval?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigIntFilter>;
  flexPlanReward?: InputMaybe<BigFloatFilter>;
};

export type EraIndexerDeploymentApySumAggregates = {
  __typename?: 'EraIndexerDeploymentApySumAggregates';
  /** Sum of agreementReward across the matching connection */
  agreementReward: Scalars['BigFloat']['output'];
  /** Sum of allocationReward across the matching connection */
  allocationReward: Scalars['BigFloat']['output'];
  /** Sum of apy across the matching connection */
  apy: Scalars['BigFloat']['output'];
  /** Sum of apyCalcAdded across the matching connection */
  apyCalcAdded: Scalars['BigFloat']['output'];
  /** Sum of apyCalcAllocation across the matching connection */
  apyCalcAllocation: Scalars['BigFloat']['output'];
  /** Sum of apyCalcRemoval across the matching connection */
  apyCalcRemoval: Scalars['BigFloat']['output'];
  /** Sum of eraIdx across the matching connection */
  eraIdx: Scalars['BigInt']['output'];
  /** Sum of flexPlanReward across the matching connection */
  flexPlanReward: Scalars['BigFloat']['output'];
};

export type EraIndexerDeploymentApyVariancePopulationAggregateFilter = {
  agreementReward?: InputMaybe<BigFloatFilter>;
  allocationReward?: InputMaybe<BigFloatFilter>;
  apy?: InputMaybe<BigFloatFilter>;
  apyCalcAdded?: InputMaybe<BigFloatFilter>;
  apyCalcAllocation?: InputMaybe<BigFloatFilter>;
  apyCalcRemoval?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigFloatFilter>;
  flexPlanReward?: InputMaybe<BigFloatFilter>;
};

export type EraIndexerDeploymentApyVariancePopulationAggregates = {
  __typename?: 'EraIndexerDeploymentApyVariancePopulationAggregates';
  /** Population variance of agreementReward across the matching connection */
  agreementReward?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of allocationReward across the matching connection */
  allocationReward?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of apy across the matching connection */
  apy?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of apyCalcAdded across the matching connection */
  apyCalcAdded?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of apyCalcAllocation across the matching connection */
  apyCalcAllocation?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of apyCalcRemoval across the matching connection */
  apyCalcRemoval?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of flexPlanReward across the matching connection */
  flexPlanReward?: Maybe<Scalars['BigFloat']['output']>;
};

export type EraIndexerDeploymentApyVarianceSampleAggregateFilter = {
  agreementReward?: InputMaybe<BigFloatFilter>;
  allocationReward?: InputMaybe<BigFloatFilter>;
  apy?: InputMaybe<BigFloatFilter>;
  apyCalcAdded?: InputMaybe<BigFloatFilter>;
  apyCalcAllocation?: InputMaybe<BigFloatFilter>;
  apyCalcRemoval?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigFloatFilter>;
  flexPlanReward?: InputMaybe<BigFloatFilter>;
};

export type EraIndexerDeploymentApyVarianceSampleAggregates = {
  __typename?: 'EraIndexerDeploymentApyVarianceSampleAggregates';
  /** Sample variance of agreementReward across the matching connection */
  agreementReward?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of allocationReward across the matching connection */
  allocationReward?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of apy across the matching connection */
  apy?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of apyCalcAdded across the matching connection */
  apyCalcAdded?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of apyCalcAllocation across the matching connection */
  apyCalcAllocation?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of apyCalcRemoval across the matching connection */
  apyCalcRemoval?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of flexPlanReward across the matching connection */
  flexPlanReward?: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `Indexer` values, with data from `EraReward`. */
export type EraIndexersByEraRewardEraIdAndIndexerIdManyToManyConnection = {
  __typename?: 'EraIndexersByEraRewardEraIdAndIndexerIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<IndexerAggregates>;
  /** A list of edges which contains the `Indexer`, info from the `EraReward`, and the cursor to aid in pagination. */
  edges: Array<EraIndexersByEraRewardEraIdAndIndexerIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<IndexerAggregates>>;
  /** A list of `Indexer` objects. */
  nodes: Array<Maybe<Indexer>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Indexer` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Indexer` values, with data from `EraReward`. */
export type EraIndexersByEraRewardEraIdAndIndexerIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: Array<IndexersGroupBy>;
  having?: InputMaybe<IndexersHavingInput>;
};

/** A `Indexer` edge in the connection, with data from `EraReward`. */
export type EraIndexersByEraRewardEraIdAndIndexerIdManyToManyEdge = {
  __typename?: 'EraIndexersByEraRewardEraIdAndIndexerIdManyToManyEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `EraReward`. */
  eraRewards: EraRewardsConnection;
  /** The `Indexer` at the end of the edge. */
  node?: Maybe<Indexer>;
};


/** A `Indexer` edge in the connection, with data from `EraReward`. */
export type EraIndexersByEraRewardEraIdAndIndexerIdManyToManyEdgeEraRewardsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Era_Rewards_Distinct_Enum>>>;
  filter?: InputMaybe<EraRewardFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<EraRewardsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

/** A connection to a list of `Indexer` values, with data from `EraStake`. */
export type EraIndexersByEraStakeEraIdAndIndexerIdManyToManyConnection = {
  __typename?: 'EraIndexersByEraStakeEraIdAndIndexerIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<IndexerAggregates>;
  /** A list of edges which contains the `Indexer`, info from the `EraStake`, and the cursor to aid in pagination. */
  edges: Array<EraIndexersByEraStakeEraIdAndIndexerIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<IndexerAggregates>>;
  /** A list of `Indexer` objects. */
  nodes: Array<Maybe<Indexer>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Indexer` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Indexer` values, with data from `EraStake`. */
export type EraIndexersByEraStakeEraIdAndIndexerIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: Array<IndexersGroupBy>;
  having?: InputMaybe<IndexersHavingInput>;
};

/** A `Indexer` edge in the connection, with data from `EraStake`. */
export type EraIndexersByEraStakeEraIdAndIndexerIdManyToManyEdge = {
  __typename?: 'EraIndexersByEraStakeEraIdAndIndexerIdManyToManyEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `EraStake`. */
  eraStakes: EraStakesConnection;
  /** The `Indexer` at the end of the edge. */
  node?: Maybe<Indexer>;
};


/** A `Indexer` edge in the connection, with data from `EraStake`. */
export type EraIndexersByEraStakeEraIdAndIndexerIdManyToManyEdgeEraStakesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Era_Stakes_Distinct_Enum>>>;
  filter?: InputMaybe<EraStakeFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<EraStakesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

/** A connection to a list of `Indexer` values, with data from `IndexerCommissionRate`. */
export type EraIndexersByIndexerCommissionRateEraIdAndIndexerIdManyToManyConnection = {
  __typename?: 'EraIndexersByIndexerCommissionRateEraIdAndIndexerIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<IndexerAggregates>;
  /** A list of edges which contains the `Indexer`, info from the `IndexerCommissionRate`, and the cursor to aid in pagination. */
  edges: Array<EraIndexersByIndexerCommissionRateEraIdAndIndexerIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<IndexerAggregates>>;
  /** A list of `Indexer` objects. */
  nodes: Array<Maybe<Indexer>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Indexer` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Indexer` values, with data from `IndexerCommissionRate`. */
export type EraIndexersByIndexerCommissionRateEraIdAndIndexerIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: Array<IndexersGroupBy>;
  having?: InputMaybe<IndexersHavingInput>;
};

/** A `Indexer` edge in the connection, with data from `IndexerCommissionRate`. */
export type EraIndexersByIndexerCommissionRateEraIdAndIndexerIdManyToManyEdge = {
  __typename?: 'EraIndexersByIndexerCommissionRateEraIdAndIndexerIdManyToManyEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `IndexerCommissionRate`. */
  indexerCommissionRates: IndexerCommissionRatesConnection;
  /** The `Indexer` at the end of the edge. */
  node?: Maybe<Indexer>;
};


/** A `Indexer` edge in the connection, with data from `IndexerCommissionRate`. */
export type EraIndexersByIndexerCommissionRateEraIdAndIndexerIdManyToManyEdgeIndexerCommissionRatesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Commission_Rates_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerCommissionRateFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexerCommissionRatesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

/** A connection to a list of `Indexer` values, with data from `IndexerStake`. */
export type EraIndexersByIndexerStakeEraIdAndIndexerIdManyToManyConnection = {
  __typename?: 'EraIndexersByIndexerStakeEraIdAndIndexerIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<IndexerAggregates>;
  /** A list of edges which contains the `Indexer`, info from the `IndexerStake`, and the cursor to aid in pagination. */
  edges: Array<EraIndexersByIndexerStakeEraIdAndIndexerIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<IndexerAggregates>>;
  /** A list of `Indexer` objects. */
  nodes: Array<Maybe<Indexer>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Indexer` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Indexer` values, with data from `IndexerStake`. */
export type EraIndexersByIndexerStakeEraIdAndIndexerIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: Array<IndexersGroupBy>;
  having?: InputMaybe<IndexersHavingInput>;
};

/** A `Indexer` edge in the connection, with data from `IndexerStake`. */
export type EraIndexersByIndexerStakeEraIdAndIndexerIdManyToManyEdge = {
  __typename?: 'EraIndexersByIndexerStakeEraIdAndIndexerIdManyToManyEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `IndexerStake`. */
  indexerStakes: IndexerStakesConnection;
  /** The `Indexer` at the end of the edge. */
  node?: Maybe<Indexer>;
};


/** A `Indexer` edge in the connection, with data from `IndexerStake`. */
export type EraIndexersByIndexerStakeEraIdAndIndexerIdManyToManyEdgeIndexerStakesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Stakes_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerStakeFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexerStakesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

export type EraMaxAggregates = {
  __typename?: 'EraMaxAggregates';
  /** Maximum of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['Int']['output']>;
};

export type EraMinAggregates = {
  __typename?: 'EraMinAggregates';
  /** Minimum of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['Int']['output']>;
};

export type EraReward = Node & {
  __typename?: 'EraReward';
  amount: Scalars['BigFloat']['output'];
  claimed: Scalars['Boolean']['output'];
  createdBlock?: Maybe<Scalars['Int']['output']>;
  createdTimestamp: Scalars['Datetime']['output'];
  /** Reads a single `Delegator` that is related to this `EraReward`. */
  delegator?: Maybe<Delegator>;
  delegatorId: Scalars['String']['output'];
  /** Reads a single `Era` that is related to this `EraReward`. */
  era?: Maybe<Era>;
  eraId: Scalars['String']['output'];
  eraIdx: Scalars['Int']['output'];
  id: Scalars['String']['output'];
  /** Reads a single `Indexer` that is related to this `EraReward`. */
  indexer?: Maybe<Indexer>;
  indexerId: Scalars['String']['output'];
  isCommission: Scalars['Boolean']['output'];
  isIndexer: Scalars['Boolean']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
};

export type EraRewardAggregates = {
  __typename?: 'EraRewardAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  average?: Maybe<EraRewardAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  distinctCount?: Maybe<EraRewardDistinctCountAggregates>;
  keys?: Maybe<Array<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  max?: Maybe<EraRewardMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  min?: Maybe<EraRewardMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevPopulation?: Maybe<EraRewardStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevSample?: Maybe<EraRewardStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  sum?: Maybe<EraRewardSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  variancePopulation?: Maybe<EraRewardVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  varianceSample?: Maybe<EraRewardVarianceSampleAggregates>;
};

/** A filter to be used against aggregates of `EraReward` object types. */
export type EraRewardAggregatesFilter = {
  /** Mean average aggregate over matching `EraReward` objects. */
  average?: InputMaybe<EraRewardAverageAggregateFilter>;
  /** Distinct count aggregate over matching `EraReward` objects. */
  distinctCount?: InputMaybe<EraRewardDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `EraReward` object to be included within the aggregate. */
  filter?: InputMaybe<EraRewardFilter>;
  /** Maximum aggregate over matching `EraReward` objects. */
  max?: InputMaybe<EraRewardMaxAggregateFilter>;
  /** Minimum aggregate over matching `EraReward` objects. */
  min?: InputMaybe<EraRewardMinAggregateFilter>;
  /** Population standard deviation aggregate over matching `EraReward` objects. */
  stddevPopulation?: InputMaybe<EraRewardStddevPopulationAggregateFilter>;
  /** Sample standard deviation aggregate over matching `EraReward` objects. */
  stddevSample?: InputMaybe<EraRewardStddevSampleAggregateFilter>;
  /** Sum aggregate over matching `EraReward` objects. */
  sum?: InputMaybe<EraRewardSumAggregateFilter>;
  /** Population variance aggregate over matching `EraReward` objects. */
  variancePopulation?: InputMaybe<EraRewardVariancePopulationAggregateFilter>;
  /** Sample variance aggregate over matching `EraReward` objects. */
  varianceSample?: InputMaybe<EraRewardVarianceSampleAggregateFilter>;
};

export type EraRewardAverageAggregateFilter = {
  amount?: InputMaybe<BigFloatFilter>;
  createdBlock?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigFloatFilter>;
};

export type EraRewardAverageAggregates = {
  __typename?: 'EraRewardAverageAggregates';
  /** Mean average of amount across the matching connection */
  amount?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
};

export type EraRewardClaimed = Node & {
  __typename?: 'EraRewardClaimed';
  id: Scalars['String']['output'];
  lastClaimedEra: Scalars['Int']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
};

export type EraRewardClaimedAggregates = {
  __typename?: 'EraRewardClaimedAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  average?: Maybe<EraRewardClaimedAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  distinctCount?: Maybe<EraRewardClaimedDistinctCountAggregates>;
  keys?: Maybe<Array<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  max?: Maybe<EraRewardClaimedMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  min?: Maybe<EraRewardClaimedMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevPopulation?: Maybe<EraRewardClaimedStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevSample?: Maybe<EraRewardClaimedStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  sum?: Maybe<EraRewardClaimedSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  variancePopulation?: Maybe<EraRewardClaimedVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  varianceSample?: Maybe<EraRewardClaimedVarianceSampleAggregates>;
};

export type EraRewardClaimedAverageAggregates = {
  __typename?: 'EraRewardClaimedAverageAggregates';
  /** Mean average of lastClaimedEra across the matching connection */
  lastClaimedEra?: Maybe<Scalars['BigFloat']['output']>;
};

export type EraRewardClaimedDistinctCountAggregates = {
  __typename?: 'EraRewardClaimedDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  _blockRange?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  _id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of lastClaimedEra across the matching connection */
  lastClaimedEra?: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `EraRewardClaimed` object types. All fields are combined with a logical ‘and.’ */
export type EraRewardClaimedFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<EraRewardClaimedFilter>>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<StringFilter>;
  /** Filter by the object’s `lastClaimedEra` field. */
  lastClaimedEra?: InputMaybe<IntFilter>;
  /** Negates the expression. */
  not?: InputMaybe<EraRewardClaimedFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<EraRewardClaimedFilter>>;
};

export type EraRewardClaimedMaxAggregates = {
  __typename?: 'EraRewardClaimedMaxAggregates';
  /** Maximum of lastClaimedEra across the matching connection */
  lastClaimedEra?: Maybe<Scalars['Int']['output']>;
};

export type EraRewardClaimedMinAggregates = {
  __typename?: 'EraRewardClaimedMinAggregates';
  /** Minimum of lastClaimedEra across the matching connection */
  lastClaimedEra?: Maybe<Scalars['Int']['output']>;
};

export type EraRewardClaimedStddevPopulationAggregates = {
  __typename?: 'EraRewardClaimedStddevPopulationAggregates';
  /** Population standard deviation of lastClaimedEra across the matching connection */
  lastClaimedEra?: Maybe<Scalars['BigFloat']['output']>;
};

export type EraRewardClaimedStddevSampleAggregates = {
  __typename?: 'EraRewardClaimedStddevSampleAggregates';
  /** Sample standard deviation of lastClaimedEra across the matching connection */
  lastClaimedEra?: Maybe<Scalars['BigFloat']['output']>;
};

export type EraRewardClaimedSumAggregates = {
  __typename?: 'EraRewardClaimedSumAggregates';
  /** Sum of lastClaimedEra across the matching connection */
  lastClaimedEra: Scalars['BigInt']['output'];
};

export type EraRewardClaimedVariancePopulationAggregates = {
  __typename?: 'EraRewardClaimedVariancePopulationAggregates';
  /** Population variance of lastClaimedEra across the matching connection */
  lastClaimedEra?: Maybe<Scalars['BigFloat']['output']>;
};

export type EraRewardClaimedVarianceSampleAggregates = {
  __typename?: 'EraRewardClaimedVarianceSampleAggregates';
  /** Sample variance of lastClaimedEra across the matching connection */
  lastClaimedEra?: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `EraRewardClaimed` values. */
export type EraRewardClaimedsConnection = {
  __typename?: 'EraRewardClaimedsConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<EraRewardClaimedAggregates>;
  /** A list of edges which contains the `EraRewardClaimed` and cursor to aid in pagination. */
  edges: Array<EraRewardClaimedsEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<EraRewardClaimedAggregates>>;
  /** A list of `EraRewardClaimed` objects. */
  nodes: Array<Maybe<EraRewardClaimed>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `EraRewardClaimed` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `EraRewardClaimed` values. */
export type EraRewardClaimedsConnectionGroupedAggregatesArgs = {
  groupBy: Array<EraRewardClaimedsGroupBy>;
  having?: InputMaybe<EraRewardClaimedsHavingInput>;
};

/** A `EraRewardClaimed` edge in the connection. */
export type EraRewardClaimedsEdge = {
  __typename?: 'EraRewardClaimedsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `EraRewardClaimed` at the end of the edge. */
  node?: Maybe<EraRewardClaimed>;
};

/** Grouping methods for `EraRewardClaimed` for usage during aggregation. */
export enum EraRewardClaimedsGroupBy {
  Id = 'ID',
  LastClaimedEra = 'LAST_CLAIMED_ERA'
}

export type EraRewardClaimedsHavingAverageInput = {
  lastClaimedEra?: InputMaybe<HavingIntFilter>;
};

export type EraRewardClaimedsHavingDistinctCountInput = {
  lastClaimedEra?: InputMaybe<HavingIntFilter>;
};

/** Conditions for `EraRewardClaimed` aggregates. */
export type EraRewardClaimedsHavingInput = {
  AND?: InputMaybe<Array<EraRewardClaimedsHavingInput>>;
  OR?: InputMaybe<Array<EraRewardClaimedsHavingInput>>;
  average?: InputMaybe<EraRewardClaimedsHavingAverageInput>;
  distinctCount?: InputMaybe<EraRewardClaimedsHavingDistinctCountInput>;
  max?: InputMaybe<EraRewardClaimedsHavingMaxInput>;
  min?: InputMaybe<EraRewardClaimedsHavingMinInput>;
  stddevPopulation?: InputMaybe<EraRewardClaimedsHavingStddevPopulationInput>;
  stddevSample?: InputMaybe<EraRewardClaimedsHavingStddevSampleInput>;
  sum?: InputMaybe<EraRewardClaimedsHavingSumInput>;
  variancePopulation?: InputMaybe<EraRewardClaimedsHavingVariancePopulationInput>;
  varianceSample?: InputMaybe<EraRewardClaimedsHavingVarianceSampleInput>;
};

export type EraRewardClaimedsHavingMaxInput = {
  lastClaimedEra?: InputMaybe<HavingIntFilter>;
};

export type EraRewardClaimedsHavingMinInput = {
  lastClaimedEra?: InputMaybe<HavingIntFilter>;
};

export type EraRewardClaimedsHavingStddevPopulationInput = {
  lastClaimedEra?: InputMaybe<HavingIntFilter>;
};

export type EraRewardClaimedsHavingStddevSampleInput = {
  lastClaimedEra?: InputMaybe<HavingIntFilter>;
};

export type EraRewardClaimedsHavingSumInput = {
  lastClaimedEra?: InputMaybe<HavingIntFilter>;
};

export type EraRewardClaimedsHavingVariancePopulationInput = {
  lastClaimedEra?: InputMaybe<HavingIntFilter>;
};

export type EraRewardClaimedsHavingVarianceSampleInput = {
  lastClaimedEra?: InputMaybe<HavingIntFilter>;
};

/** Methods to use when ordering `EraRewardClaimed`. */
export enum EraRewardClaimedsOrderBy {
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  LastClaimedEraAsc = 'LAST_CLAIMED_ERA_ASC',
  LastClaimedEraDesc = 'LAST_CLAIMED_ERA_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

export type EraRewardDistinctCountAggregateFilter = {
  _blockRange?: InputMaybe<BigIntFilter>;
  _id?: InputMaybe<BigIntFilter>;
  amount?: InputMaybe<BigIntFilter>;
  claimed?: InputMaybe<BigIntFilter>;
  createdBlock?: InputMaybe<BigIntFilter>;
  createdTimestamp?: InputMaybe<BigIntFilter>;
  delegatorId?: InputMaybe<BigIntFilter>;
  eraId?: InputMaybe<BigIntFilter>;
  eraIdx?: InputMaybe<BigIntFilter>;
  id?: InputMaybe<BigIntFilter>;
  indexerId?: InputMaybe<BigIntFilter>;
  isCommission?: InputMaybe<BigIntFilter>;
  isIndexer?: InputMaybe<BigIntFilter>;
};

export type EraRewardDistinctCountAggregates = {
  __typename?: 'EraRewardDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  _blockRange?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  _id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of amount across the matching connection */
  amount?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of claimed across the matching connection */
  claimed?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createdTimestamp across the matching connection */
  createdTimestamp?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of delegatorId across the matching connection */
  delegatorId?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of eraId across the matching connection */
  eraId?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of indexerId across the matching connection */
  indexerId?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of isCommission across the matching connection */
  isCommission?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of isIndexer across the matching connection */
  isIndexer?: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `EraReward` object types. All fields are combined with a logical ‘and.’ */
export type EraRewardFilter = {
  /** Filter by the object’s `amount` field. */
  amount?: InputMaybe<BigFloatFilter>;
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<EraRewardFilter>>;
  /** Filter by the object’s `claimed` field. */
  claimed?: InputMaybe<BooleanFilter>;
  /** Filter by the object’s `createdBlock` field. */
  createdBlock?: InputMaybe<IntFilter>;
  /** Filter by the object’s `createdTimestamp` field. */
  createdTimestamp?: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `delegator` relation. */
  delegator?: InputMaybe<DelegatorFilter>;
  /** Filter by the object’s `delegatorId` field. */
  delegatorId?: InputMaybe<StringFilter>;
  /** Filter by the object’s `era` relation. */
  era?: InputMaybe<EraFilter>;
  /** Filter by the object’s `eraId` field. */
  eraId?: InputMaybe<StringFilter>;
  /** Filter by the object’s `eraIdx` field. */
  eraIdx?: InputMaybe<IntFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<StringFilter>;
  /** Filter by the object’s `indexer` relation. */
  indexer?: InputMaybe<IndexerFilter>;
  /** Filter by the object’s `indexerId` field. */
  indexerId?: InputMaybe<StringFilter>;
  /** Filter by the object’s `isCommission` field. */
  isCommission?: InputMaybe<BooleanFilter>;
  /** Filter by the object’s `isIndexer` field. */
  isIndexer?: InputMaybe<BooleanFilter>;
  /** Negates the expression. */
  not?: InputMaybe<EraRewardFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<EraRewardFilter>>;
};

export type EraRewardMaxAggregateFilter = {
  amount?: InputMaybe<BigFloatFilter>;
  createdBlock?: InputMaybe<IntFilter>;
  eraIdx?: InputMaybe<IntFilter>;
};

export type EraRewardMaxAggregates = {
  __typename?: 'EraRewardMaxAggregates';
  /** Maximum of amount across the matching connection */
  amount?: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['Int']['output']>;
  /** Maximum of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['Int']['output']>;
};

export type EraRewardMinAggregateFilter = {
  amount?: InputMaybe<BigFloatFilter>;
  createdBlock?: InputMaybe<IntFilter>;
  eraIdx?: InputMaybe<IntFilter>;
};

export type EraRewardMinAggregates = {
  __typename?: 'EraRewardMinAggregates';
  /** Minimum of amount across the matching connection */
  amount?: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['Int']['output']>;
  /** Minimum of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['Int']['output']>;
};

export type EraRewardStddevPopulationAggregateFilter = {
  amount?: InputMaybe<BigFloatFilter>;
  createdBlock?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigFloatFilter>;
};

export type EraRewardStddevPopulationAggregates = {
  __typename?: 'EraRewardStddevPopulationAggregates';
  /** Population standard deviation of amount across the matching connection */
  amount?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
};

export type EraRewardStddevSampleAggregateFilter = {
  amount?: InputMaybe<BigFloatFilter>;
  createdBlock?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigFloatFilter>;
};

export type EraRewardStddevSampleAggregates = {
  __typename?: 'EraRewardStddevSampleAggregates';
  /** Sample standard deviation of amount across the matching connection */
  amount?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
};

export type EraRewardSumAggregateFilter = {
  amount?: InputMaybe<BigFloatFilter>;
  createdBlock?: InputMaybe<BigIntFilter>;
  eraIdx?: InputMaybe<BigIntFilter>;
};

export type EraRewardSumAggregates = {
  __typename?: 'EraRewardSumAggregates';
  /** Sum of amount across the matching connection */
  amount: Scalars['BigFloat']['output'];
  /** Sum of createdBlock across the matching connection */
  createdBlock: Scalars['BigInt']['output'];
  /** Sum of eraIdx across the matching connection */
  eraIdx: Scalars['BigInt']['output'];
};

export type EraRewardVariancePopulationAggregateFilter = {
  amount?: InputMaybe<BigFloatFilter>;
  createdBlock?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigFloatFilter>;
};

export type EraRewardVariancePopulationAggregates = {
  __typename?: 'EraRewardVariancePopulationAggregates';
  /** Population variance of amount across the matching connection */
  amount?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
};

export type EraRewardVarianceSampleAggregateFilter = {
  amount?: InputMaybe<BigFloatFilter>;
  createdBlock?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigFloatFilter>;
};

export type EraRewardVarianceSampleAggregates = {
  __typename?: 'EraRewardVarianceSampleAggregates';
  /** Sample variance of amount across the matching connection */
  amount?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `EraReward` values. */
export type EraRewardsConnection = {
  __typename?: 'EraRewardsConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<EraRewardAggregates>;
  /** A list of edges which contains the `EraReward` and cursor to aid in pagination. */
  edges: Array<EraRewardsEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<EraRewardAggregates>>;
  /** A list of `EraReward` objects. */
  nodes: Array<Maybe<EraReward>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `EraReward` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `EraReward` values. */
export type EraRewardsConnectionGroupedAggregatesArgs = {
  groupBy: Array<EraRewardsGroupBy>;
  having?: InputMaybe<EraRewardsHavingInput>;
};

/** A `EraReward` edge in the connection. */
export type EraRewardsEdge = {
  __typename?: 'EraRewardsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `EraReward` at the end of the edge. */
  node?: Maybe<EraReward>;
};

/** Grouping methods for `EraReward` for usage during aggregation. */
export enum EraRewardsGroupBy {
  Amount = 'AMOUNT',
  Claimed = 'CLAIMED',
  CreatedBlock = 'CREATED_BLOCK',
  CreatedTimestamp = 'CREATED_TIMESTAMP',
  CreatedTimestampTruncatedToDay = 'CREATED_TIMESTAMP_TRUNCATED_TO_DAY',
  CreatedTimestampTruncatedToHour = 'CREATED_TIMESTAMP_TRUNCATED_TO_HOUR',
  DelegatorId = 'DELEGATOR_ID',
  EraId = 'ERA_ID',
  EraIdx = 'ERA_IDX',
  Id = 'ID',
  IndexerId = 'INDEXER_ID',
  IsCommission = 'IS_COMMISSION',
  IsIndexer = 'IS_INDEXER'
}

export type EraRewardsHavingAverageInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
  createdBlock?: InputMaybe<HavingIntFilter>;
  createdTimestamp?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
};

export type EraRewardsHavingDistinctCountInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
  createdBlock?: InputMaybe<HavingIntFilter>;
  createdTimestamp?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
};

/** Conditions for `EraReward` aggregates. */
export type EraRewardsHavingInput = {
  AND?: InputMaybe<Array<EraRewardsHavingInput>>;
  OR?: InputMaybe<Array<EraRewardsHavingInput>>;
  average?: InputMaybe<EraRewardsHavingAverageInput>;
  distinctCount?: InputMaybe<EraRewardsHavingDistinctCountInput>;
  max?: InputMaybe<EraRewardsHavingMaxInput>;
  min?: InputMaybe<EraRewardsHavingMinInput>;
  stddevPopulation?: InputMaybe<EraRewardsHavingStddevPopulationInput>;
  stddevSample?: InputMaybe<EraRewardsHavingStddevSampleInput>;
  sum?: InputMaybe<EraRewardsHavingSumInput>;
  variancePopulation?: InputMaybe<EraRewardsHavingVariancePopulationInput>;
  varianceSample?: InputMaybe<EraRewardsHavingVarianceSampleInput>;
};

export type EraRewardsHavingMaxInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
  createdBlock?: InputMaybe<HavingIntFilter>;
  createdTimestamp?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
};

export type EraRewardsHavingMinInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
  createdBlock?: InputMaybe<HavingIntFilter>;
  createdTimestamp?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
};

export type EraRewardsHavingStddevPopulationInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
  createdBlock?: InputMaybe<HavingIntFilter>;
  createdTimestamp?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
};

export type EraRewardsHavingStddevSampleInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
  createdBlock?: InputMaybe<HavingIntFilter>;
  createdTimestamp?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
};

export type EraRewardsHavingSumInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
  createdBlock?: InputMaybe<HavingIntFilter>;
  createdTimestamp?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
};

export type EraRewardsHavingVariancePopulationInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
  createdBlock?: InputMaybe<HavingIntFilter>;
  createdTimestamp?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
};

export type EraRewardsHavingVarianceSampleInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
  createdBlock?: InputMaybe<HavingIntFilter>;
  createdTimestamp?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
};

/** Methods to use when ordering `EraReward`. */
export enum EraRewardsOrderBy {
  AmountAsc = 'AMOUNT_ASC',
  AmountDesc = 'AMOUNT_DESC',
  ClaimedAsc = 'CLAIMED_ASC',
  ClaimedDesc = 'CLAIMED_DESC',
  CreatedBlockAsc = 'CREATED_BLOCK_ASC',
  CreatedBlockDesc = 'CREATED_BLOCK_DESC',
  CreatedTimestampAsc = 'CREATED_TIMESTAMP_ASC',
  CreatedTimestampDesc = 'CREATED_TIMESTAMP_DESC',
  DelegatorByDelegatorIdCreatedBlockAsc = 'DELEGATOR_BY_DELEGATOR_ID__CREATED_BLOCK_ASC',
  DelegatorByDelegatorIdCreatedBlockDesc = 'DELEGATOR_BY_DELEGATOR_ID__CREATED_BLOCK_DESC',
  DelegatorByDelegatorIdExitEraAsc = 'DELEGATOR_BY_DELEGATOR_ID__EXIT_ERA_ASC',
  DelegatorByDelegatorIdExitEraDesc = 'DELEGATOR_BY_DELEGATOR_ID__EXIT_ERA_DESC',
  DelegatorByDelegatorIdIdAsc = 'DELEGATOR_BY_DELEGATOR_ID__ID_ASC',
  DelegatorByDelegatorIdIdDesc = 'DELEGATOR_BY_DELEGATOR_ID__ID_DESC',
  DelegatorByDelegatorIdLastEventAsc = 'DELEGATOR_BY_DELEGATOR_ID__LAST_EVENT_ASC',
  DelegatorByDelegatorIdLastEventDesc = 'DELEGATOR_BY_DELEGATOR_ID__LAST_EVENT_DESC',
  DelegatorByDelegatorIdStartEraAsc = 'DELEGATOR_BY_DELEGATOR_ID__START_ERA_ASC',
  DelegatorByDelegatorIdStartEraDesc = 'DELEGATOR_BY_DELEGATOR_ID__START_ERA_DESC',
  DelegatorByDelegatorIdTotalDelegationsAsc = 'DELEGATOR_BY_DELEGATOR_ID__TOTAL_DELEGATIONS_ASC',
  DelegatorByDelegatorIdTotalDelegationsDesc = 'DELEGATOR_BY_DELEGATOR_ID__TOTAL_DELEGATIONS_DESC',
  DelegatorIdAsc = 'DELEGATOR_ID_ASC',
  DelegatorIdDesc = 'DELEGATOR_ID_DESC',
  EraByEraIdCreatedBlockAsc = 'ERA_BY_ERA_ID__CREATED_BLOCK_ASC',
  EraByEraIdCreatedBlockDesc = 'ERA_BY_ERA_ID__CREATED_BLOCK_DESC',
  EraByEraIdEndTimeAsc = 'ERA_BY_ERA_ID__END_TIME_ASC',
  EraByEraIdEndTimeDesc = 'ERA_BY_ERA_ID__END_TIME_DESC',
  EraByEraIdEraPeriodAsc = 'ERA_BY_ERA_ID__ERA_PERIOD_ASC',
  EraByEraIdEraPeriodDesc = 'ERA_BY_ERA_ID__ERA_PERIOD_DESC',
  EraByEraIdForceNextAsc = 'ERA_BY_ERA_ID__FORCE_NEXT_ASC',
  EraByEraIdForceNextDesc = 'ERA_BY_ERA_ID__FORCE_NEXT_DESC',
  EraByEraIdIdAsc = 'ERA_BY_ERA_ID__ID_ASC',
  EraByEraIdIdDesc = 'ERA_BY_ERA_ID__ID_DESC',
  EraByEraIdLastEventAsc = 'ERA_BY_ERA_ID__LAST_EVENT_ASC',
  EraByEraIdLastEventDesc = 'ERA_BY_ERA_ID__LAST_EVENT_DESC',
  EraByEraIdStartTimeAsc = 'ERA_BY_ERA_ID__START_TIME_ASC',
  EraByEraIdStartTimeDesc = 'ERA_BY_ERA_ID__START_TIME_DESC',
  EraIdxAsc = 'ERA_IDX_ASC',
  EraIdxDesc = 'ERA_IDX_DESC',
  EraIdAsc = 'ERA_ID_ASC',
  EraIdDesc = 'ERA_ID_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  IndexerByIndexerIdActiveAsc = 'INDEXER_BY_INDEXER_ID__ACTIVE_ASC',
  IndexerByIndexerIdActiveDesc = 'INDEXER_BY_INDEXER_ID__ACTIVE_DESC',
  IndexerByIndexerIdCapacityAsc = 'INDEXER_BY_INDEXER_ID__CAPACITY_ASC',
  IndexerByIndexerIdCapacityDesc = 'INDEXER_BY_INDEXER_ID__CAPACITY_DESC',
  IndexerByIndexerIdCommissionAsc = 'INDEXER_BY_INDEXER_ID__COMMISSION_ASC',
  IndexerByIndexerIdCommissionDesc = 'INDEXER_BY_INDEXER_ID__COMMISSION_DESC',
  IndexerByIndexerIdControllerAsc = 'INDEXER_BY_INDEXER_ID__CONTROLLER_ASC',
  IndexerByIndexerIdControllerDesc = 'INDEXER_BY_INDEXER_ID__CONTROLLER_DESC',
  IndexerByIndexerIdCreatedBlockAsc = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_ASC',
  IndexerByIndexerIdCreatedBlockDesc = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_DESC',
  IndexerByIndexerIdIdAsc = 'INDEXER_BY_INDEXER_ID__ID_ASC',
  IndexerByIndexerIdIdDesc = 'INDEXER_BY_INDEXER_ID__ID_DESC',
  IndexerByIndexerIdLastClaimEraAsc = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_ASC',
  IndexerByIndexerIdLastClaimEraDesc = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_DESC',
  IndexerByIndexerIdLastEventAsc = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_ASC',
  IndexerByIndexerIdLastEventDesc = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_DESC',
  IndexerByIndexerIdLastSettledEraAsc = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_ASC',
  IndexerByIndexerIdLastSettledEraDesc = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_DESC',
  IndexerByIndexerIdMaxUnstakeAmountAsc = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_ASC',
  IndexerByIndexerIdMaxUnstakeAmountDesc = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_DESC',
  IndexerByIndexerIdMetadataAsc = 'INDEXER_BY_INDEXER_ID__METADATA_ASC',
  IndexerByIndexerIdMetadataDesc = 'INDEXER_BY_INDEXER_ID__METADATA_DESC',
  IndexerByIndexerIdSelfStakeAsc = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_ASC',
  IndexerByIndexerIdSelfStakeDesc = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_DESC',
  IndexerByIndexerIdTotalStakeAsc = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_ASC',
  IndexerByIndexerIdTotalStakeDesc = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_DESC',
  IndexerIdAsc = 'INDEXER_ID_ASC',
  IndexerIdDesc = 'INDEXER_ID_DESC',
  IsCommissionAsc = 'IS_COMMISSION_ASC',
  IsCommissionDesc = 'IS_COMMISSION_DESC',
  IsIndexerAsc = 'IS_INDEXER_ASC',
  IsIndexerDesc = 'IS_INDEXER_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

export type EraStake = Node & {
  __typename?: 'EraStake';
  /** Reads a single `Delegator` that is related to this `EraStake`. */
  delegator?: Maybe<Delegator>;
  delegatorId: Scalars['String']['output'];
  /** Reads a single `Era` that is related to this `EraStake`. */
  era?: Maybe<Era>;
  eraId: Scalars['String']['output'];
  eraIdx: Scalars['Int']['output'];
  id: Scalars['String']['output'];
  /** Reads a single `Indexer` that is related to this `EraStake`. */
  indexer?: Maybe<Indexer>;
  indexerId: Scalars['String']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  stake: Scalars['BigFloat']['output'];
};

export type EraStakeAggregates = {
  __typename?: 'EraStakeAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  average?: Maybe<EraStakeAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  distinctCount?: Maybe<EraStakeDistinctCountAggregates>;
  keys?: Maybe<Array<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  max?: Maybe<EraStakeMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  min?: Maybe<EraStakeMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevPopulation?: Maybe<EraStakeStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevSample?: Maybe<EraStakeStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  sum?: Maybe<EraStakeSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  variancePopulation?: Maybe<EraStakeVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  varianceSample?: Maybe<EraStakeVarianceSampleAggregates>;
};

/** A filter to be used against aggregates of `EraStake` object types. */
export type EraStakeAggregatesFilter = {
  /** Mean average aggregate over matching `EraStake` objects. */
  average?: InputMaybe<EraStakeAverageAggregateFilter>;
  /** Distinct count aggregate over matching `EraStake` objects. */
  distinctCount?: InputMaybe<EraStakeDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `EraStake` object to be included within the aggregate. */
  filter?: InputMaybe<EraStakeFilter>;
  /** Maximum aggregate over matching `EraStake` objects. */
  max?: InputMaybe<EraStakeMaxAggregateFilter>;
  /** Minimum aggregate over matching `EraStake` objects. */
  min?: InputMaybe<EraStakeMinAggregateFilter>;
  /** Population standard deviation aggregate over matching `EraStake` objects. */
  stddevPopulation?: InputMaybe<EraStakeStddevPopulationAggregateFilter>;
  /** Sample standard deviation aggregate over matching `EraStake` objects. */
  stddevSample?: InputMaybe<EraStakeStddevSampleAggregateFilter>;
  /** Sum aggregate over matching `EraStake` objects. */
  sum?: InputMaybe<EraStakeSumAggregateFilter>;
  /** Population variance aggregate over matching `EraStake` objects. */
  variancePopulation?: InputMaybe<EraStakeVariancePopulationAggregateFilter>;
  /** Sample variance aggregate over matching `EraStake` objects. */
  varianceSample?: InputMaybe<EraStakeVarianceSampleAggregateFilter>;
};

export type EraStakeAverageAggregateFilter = {
  eraIdx?: InputMaybe<BigFloatFilter>;
  stake?: InputMaybe<BigFloatFilter>;
};

export type EraStakeAverageAggregates = {
  __typename?: 'EraStakeAverageAggregates';
  /** Mean average of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of stake across the matching connection */
  stake?: Maybe<Scalars['BigFloat']['output']>;
};

export type EraStakeDistinctCountAggregateFilter = {
  _blockRange?: InputMaybe<BigIntFilter>;
  _id?: InputMaybe<BigIntFilter>;
  delegatorId?: InputMaybe<BigIntFilter>;
  eraId?: InputMaybe<BigIntFilter>;
  eraIdx?: InputMaybe<BigIntFilter>;
  id?: InputMaybe<BigIntFilter>;
  indexerId?: InputMaybe<BigIntFilter>;
  stake?: InputMaybe<BigIntFilter>;
};

export type EraStakeDistinctCountAggregates = {
  __typename?: 'EraStakeDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  _blockRange?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  _id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of delegatorId across the matching connection */
  delegatorId?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of eraId across the matching connection */
  eraId?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of indexerId across the matching connection */
  indexerId?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of stake across the matching connection */
  stake?: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `EraStake` object types. All fields are combined with a logical ‘and.’ */
export type EraStakeFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<EraStakeFilter>>;
  /** Filter by the object’s `delegator` relation. */
  delegator?: InputMaybe<DelegatorFilter>;
  /** Filter by the object’s `delegatorId` field. */
  delegatorId?: InputMaybe<StringFilter>;
  /** Filter by the object’s `era` relation. */
  era?: InputMaybe<EraFilter>;
  /** Filter by the object’s `eraId` field. */
  eraId?: InputMaybe<StringFilter>;
  /** Filter by the object’s `eraIdx` field. */
  eraIdx?: InputMaybe<IntFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<StringFilter>;
  /** Filter by the object’s `indexer` relation. */
  indexer?: InputMaybe<IndexerFilter>;
  /** Filter by the object’s `indexerId` field. */
  indexerId?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<EraStakeFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<EraStakeFilter>>;
  /** Filter by the object’s `stake` field. */
  stake?: InputMaybe<BigFloatFilter>;
};

export type EraStakeMaxAggregateFilter = {
  eraIdx?: InputMaybe<IntFilter>;
  stake?: InputMaybe<BigFloatFilter>;
};

export type EraStakeMaxAggregates = {
  __typename?: 'EraStakeMaxAggregates';
  /** Maximum of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['Int']['output']>;
  /** Maximum of stake across the matching connection */
  stake?: Maybe<Scalars['BigFloat']['output']>;
};

export type EraStakeMinAggregateFilter = {
  eraIdx?: InputMaybe<IntFilter>;
  stake?: InputMaybe<BigFloatFilter>;
};

export type EraStakeMinAggregates = {
  __typename?: 'EraStakeMinAggregates';
  /** Minimum of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['Int']['output']>;
  /** Minimum of stake across the matching connection */
  stake?: Maybe<Scalars['BigFloat']['output']>;
};

export type EraStakeStddevPopulationAggregateFilter = {
  eraIdx?: InputMaybe<BigFloatFilter>;
  stake?: InputMaybe<BigFloatFilter>;
};

export type EraStakeStddevPopulationAggregates = {
  __typename?: 'EraStakeStddevPopulationAggregates';
  /** Population standard deviation of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of stake across the matching connection */
  stake?: Maybe<Scalars['BigFloat']['output']>;
};

export type EraStakeStddevSampleAggregateFilter = {
  eraIdx?: InputMaybe<BigFloatFilter>;
  stake?: InputMaybe<BigFloatFilter>;
};

export type EraStakeStddevSampleAggregates = {
  __typename?: 'EraStakeStddevSampleAggregates';
  /** Sample standard deviation of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of stake across the matching connection */
  stake?: Maybe<Scalars['BigFloat']['output']>;
};

export type EraStakeSumAggregateFilter = {
  eraIdx?: InputMaybe<BigIntFilter>;
  stake?: InputMaybe<BigFloatFilter>;
};

export type EraStakeSumAggregates = {
  __typename?: 'EraStakeSumAggregates';
  /** Sum of eraIdx across the matching connection */
  eraIdx: Scalars['BigInt']['output'];
  /** Sum of stake across the matching connection */
  stake: Scalars['BigFloat']['output'];
};

export type EraStakeUpdate = Node & {
  __typename?: 'EraStakeUpdate';
  id: Scalars['String']['output'];
  /** Reads a single `Era` that is related to this `EraStakeUpdate`. */
  lastUpdateEra?: Maybe<Era>;
  lastUpdateEraId: Scalars['String']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
};

export type EraStakeUpdateAggregates = {
  __typename?: 'EraStakeUpdateAggregates';
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  distinctCount?: Maybe<EraStakeUpdateDistinctCountAggregates>;
  keys?: Maybe<Array<Scalars['String']['output']>>;
};

/** A filter to be used against aggregates of `EraStakeUpdate` object types. */
export type EraStakeUpdateAggregatesFilter = {
  /** Distinct count aggregate over matching `EraStakeUpdate` objects. */
  distinctCount?: InputMaybe<EraStakeUpdateDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `EraStakeUpdate` object to be included within the aggregate. */
  filter?: InputMaybe<EraStakeUpdateFilter>;
};

export type EraStakeUpdateDistinctCountAggregateFilter = {
  _blockRange?: InputMaybe<BigIntFilter>;
  _id?: InputMaybe<BigIntFilter>;
  id?: InputMaybe<BigIntFilter>;
  lastUpdateEraId?: InputMaybe<BigIntFilter>;
};

export type EraStakeUpdateDistinctCountAggregates = {
  __typename?: 'EraStakeUpdateDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  _blockRange?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  _id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of lastUpdateEraId across the matching connection */
  lastUpdateEraId?: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `EraStakeUpdate` object types. All fields are combined with a logical ‘and.’ */
export type EraStakeUpdateFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<EraStakeUpdateFilter>>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<StringFilter>;
  /** Filter by the object’s `lastUpdateEra` relation. */
  lastUpdateEra?: InputMaybe<EraFilter>;
  /** Filter by the object’s `lastUpdateEraId` field. */
  lastUpdateEraId?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<EraStakeUpdateFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<EraStakeUpdateFilter>>;
};

/** A connection to a list of `EraStakeUpdate` values. */
export type EraStakeUpdatesConnection = {
  __typename?: 'EraStakeUpdatesConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<EraStakeUpdateAggregates>;
  /** A list of edges which contains the `EraStakeUpdate` and cursor to aid in pagination. */
  edges: Array<EraStakeUpdatesEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<EraStakeUpdateAggregates>>;
  /** A list of `EraStakeUpdate` objects. */
  nodes: Array<Maybe<EraStakeUpdate>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `EraStakeUpdate` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `EraStakeUpdate` values. */
export type EraStakeUpdatesConnectionGroupedAggregatesArgs = {
  groupBy: Array<EraStakeUpdatesGroupBy>;
  having?: InputMaybe<EraStakeUpdatesHavingInput>;
};

/** A `EraStakeUpdate` edge in the connection. */
export type EraStakeUpdatesEdge = {
  __typename?: 'EraStakeUpdatesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `EraStakeUpdate` at the end of the edge. */
  node?: Maybe<EraStakeUpdate>;
};

/** Grouping methods for `EraStakeUpdate` for usage during aggregation. */
export enum EraStakeUpdatesGroupBy {
  Id = 'ID',
  LastUpdateEraId = 'LAST_UPDATE_ERA_ID'
}

/** Conditions for `EraStakeUpdate` aggregates. */
export type EraStakeUpdatesHavingInput = {
  AND?: InputMaybe<Array<EraStakeUpdatesHavingInput>>;
  OR?: InputMaybe<Array<EraStakeUpdatesHavingInput>>;
};

/** Methods to use when ordering `EraStakeUpdate`. */
export enum EraStakeUpdatesOrderBy {
  EraByLastUpdateEraIdCreatedBlockAsc = 'ERA_BY_LAST_UPDATE_ERA_ID__CREATED_BLOCK_ASC',
  EraByLastUpdateEraIdCreatedBlockDesc = 'ERA_BY_LAST_UPDATE_ERA_ID__CREATED_BLOCK_DESC',
  EraByLastUpdateEraIdEndTimeAsc = 'ERA_BY_LAST_UPDATE_ERA_ID__END_TIME_ASC',
  EraByLastUpdateEraIdEndTimeDesc = 'ERA_BY_LAST_UPDATE_ERA_ID__END_TIME_DESC',
  EraByLastUpdateEraIdEraPeriodAsc = 'ERA_BY_LAST_UPDATE_ERA_ID__ERA_PERIOD_ASC',
  EraByLastUpdateEraIdEraPeriodDesc = 'ERA_BY_LAST_UPDATE_ERA_ID__ERA_PERIOD_DESC',
  EraByLastUpdateEraIdForceNextAsc = 'ERA_BY_LAST_UPDATE_ERA_ID__FORCE_NEXT_ASC',
  EraByLastUpdateEraIdForceNextDesc = 'ERA_BY_LAST_UPDATE_ERA_ID__FORCE_NEXT_DESC',
  EraByLastUpdateEraIdIdAsc = 'ERA_BY_LAST_UPDATE_ERA_ID__ID_ASC',
  EraByLastUpdateEraIdIdDesc = 'ERA_BY_LAST_UPDATE_ERA_ID__ID_DESC',
  EraByLastUpdateEraIdLastEventAsc = 'ERA_BY_LAST_UPDATE_ERA_ID__LAST_EVENT_ASC',
  EraByLastUpdateEraIdLastEventDesc = 'ERA_BY_LAST_UPDATE_ERA_ID__LAST_EVENT_DESC',
  EraByLastUpdateEraIdStartTimeAsc = 'ERA_BY_LAST_UPDATE_ERA_ID__START_TIME_ASC',
  EraByLastUpdateEraIdStartTimeDesc = 'ERA_BY_LAST_UPDATE_ERA_ID__START_TIME_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  LastUpdateEraIdAsc = 'LAST_UPDATE_ERA_ID_ASC',
  LastUpdateEraIdDesc = 'LAST_UPDATE_ERA_ID_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

export type EraStakeVariancePopulationAggregateFilter = {
  eraIdx?: InputMaybe<BigFloatFilter>;
  stake?: InputMaybe<BigFloatFilter>;
};

export type EraStakeVariancePopulationAggregates = {
  __typename?: 'EraStakeVariancePopulationAggregates';
  /** Population variance of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of stake across the matching connection */
  stake?: Maybe<Scalars['BigFloat']['output']>;
};

export type EraStakeVarianceSampleAggregateFilter = {
  eraIdx?: InputMaybe<BigFloatFilter>;
  stake?: InputMaybe<BigFloatFilter>;
};

export type EraStakeVarianceSampleAggregates = {
  __typename?: 'EraStakeVarianceSampleAggregates';
  /** Sample variance of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of stake across the matching connection */
  stake?: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `EraStake` values. */
export type EraStakesConnection = {
  __typename?: 'EraStakesConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<EraStakeAggregates>;
  /** A list of edges which contains the `EraStake` and cursor to aid in pagination. */
  edges: Array<EraStakesEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<EraStakeAggregates>>;
  /** A list of `EraStake` objects. */
  nodes: Array<Maybe<EraStake>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `EraStake` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `EraStake` values. */
export type EraStakesConnectionGroupedAggregatesArgs = {
  groupBy: Array<EraStakesGroupBy>;
  having?: InputMaybe<EraStakesHavingInput>;
};

/** A `EraStake` edge in the connection. */
export type EraStakesEdge = {
  __typename?: 'EraStakesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `EraStake` at the end of the edge. */
  node?: Maybe<EraStake>;
};

/** Grouping methods for `EraStake` for usage during aggregation. */
export enum EraStakesGroupBy {
  DelegatorId = 'DELEGATOR_ID',
  EraId = 'ERA_ID',
  EraIdx = 'ERA_IDX',
  Id = 'ID',
  IndexerId = 'INDEXER_ID',
  Stake = 'STAKE'
}

export type EraStakesHavingAverageInput = {
  eraIdx?: InputMaybe<HavingIntFilter>;
  stake?: InputMaybe<HavingBigfloatFilter>;
};

export type EraStakesHavingDistinctCountInput = {
  eraIdx?: InputMaybe<HavingIntFilter>;
  stake?: InputMaybe<HavingBigfloatFilter>;
};

/** Conditions for `EraStake` aggregates. */
export type EraStakesHavingInput = {
  AND?: InputMaybe<Array<EraStakesHavingInput>>;
  OR?: InputMaybe<Array<EraStakesHavingInput>>;
  average?: InputMaybe<EraStakesHavingAverageInput>;
  distinctCount?: InputMaybe<EraStakesHavingDistinctCountInput>;
  max?: InputMaybe<EraStakesHavingMaxInput>;
  min?: InputMaybe<EraStakesHavingMinInput>;
  stddevPopulation?: InputMaybe<EraStakesHavingStddevPopulationInput>;
  stddevSample?: InputMaybe<EraStakesHavingStddevSampleInput>;
  sum?: InputMaybe<EraStakesHavingSumInput>;
  variancePopulation?: InputMaybe<EraStakesHavingVariancePopulationInput>;
  varianceSample?: InputMaybe<EraStakesHavingVarianceSampleInput>;
};

export type EraStakesHavingMaxInput = {
  eraIdx?: InputMaybe<HavingIntFilter>;
  stake?: InputMaybe<HavingBigfloatFilter>;
};

export type EraStakesHavingMinInput = {
  eraIdx?: InputMaybe<HavingIntFilter>;
  stake?: InputMaybe<HavingBigfloatFilter>;
};

export type EraStakesHavingStddevPopulationInput = {
  eraIdx?: InputMaybe<HavingIntFilter>;
  stake?: InputMaybe<HavingBigfloatFilter>;
};

export type EraStakesHavingStddevSampleInput = {
  eraIdx?: InputMaybe<HavingIntFilter>;
  stake?: InputMaybe<HavingBigfloatFilter>;
};

export type EraStakesHavingSumInput = {
  eraIdx?: InputMaybe<HavingIntFilter>;
  stake?: InputMaybe<HavingBigfloatFilter>;
};

export type EraStakesHavingVariancePopulationInput = {
  eraIdx?: InputMaybe<HavingIntFilter>;
  stake?: InputMaybe<HavingBigfloatFilter>;
};

export type EraStakesHavingVarianceSampleInput = {
  eraIdx?: InputMaybe<HavingIntFilter>;
  stake?: InputMaybe<HavingBigfloatFilter>;
};

/** Methods to use when ordering `EraStake`. */
export enum EraStakesOrderBy {
  DelegatorByDelegatorIdCreatedBlockAsc = 'DELEGATOR_BY_DELEGATOR_ID__CREATED_BLOCK_ASC',
  DelegatorByDelegatorIdCreatedBlockDesc = 'DELEGATOR_BY_DELEGATOR_ID__CREATED_BLOCK_DESC',
  DelegatorByDelegatorIdExitEraAsc = 'DELEGATOR_BY_DELEGATOR_ID__EXIT_ERA_ASC',
  DelegatorByDelegatorIdExitEraDesc = 'DELEGATOR_BY_DELEGATOR_ID__EXIT_ERA_DESC',
  DelegatorByDelegatorIdIdAsc = 'DELEGATOR_BY_DELEGATOR_ID__ID_ASC',
  DelegatorByDelegatorIdIdDesc = 'DELEGATOR_BY_DELEGATOR_ID__ID_DESC',
  DelegatorByDelegatorIdLastEventAsc = 'DELEGATOR_BY_DELEGATOR_ID__LAST_EVENT_ASC',
  DelegatorByDelegatorIdLastEventDesc = 'DELEGATOR_BY_DELEGATOR_ID__LAST_EVENT_DESC',
  DelegatorByDelegatorIdStartEraAsc = 'DELEGATOR_BY_DELEGATOR_ID__START_ERA_ASC',
  DelegatorByDelegatorIdStartEraDesc = 'DELEGATOR_BY_DELEGATOR_ID__START_ERA_DESC',
  DelegatorByDelegatorIdTotalDelegationsAsc = 'DELEGATOR_BY_DELEGATOR_ID__TOTAL_DELEGATIONS_ASC',
  DelegatorByDelegatorIdTotalDelegationsDesc = 'DELEGATOR_BY_DELEGATOR_ID__TOTAL_DELEGATIONS_DESC',
  DelegatorIdAsc = 'DELEGATOR_ID_ASC',
  DelegatorIdDesc = 'DELEGATOR_ID_DESC',
  EraByEraIdCreatedBlockAsc = 'ERA_BY_ERA_ID__CREATED_BLOCK_ASC',
  EraByEraIdCreatedBlockDesc = 'ERA_BY_ERA_ID__CREATED_BLOCK_DESC',
  EraByEraIdEndTimeAsc = 'ERA_BY_ERA_ID__END_TIME_ASC',
  EraByEraIdEndTimeDesc = 'ERA_BY_ERA_ID__END_TIME_DESC',
  EraByEraIdEraPeriodAsc = 'ERA_BY_ERA_ID__ERA_PERIOD_ASC',
  EraByEraIdEraPeriodDesc = 'ERA_BY_ERA_ID__ERA_PERIOD_DESC',
  EraByEraIdForceNextAsc = 'ERA_BY_ERA_ID__FORCE_NEXT_ASC',
  EraByEraIdForceNextDesc = 'ERA_BY_ERA_ID__FORCE_NEXT_DESC',
  EraByEraIdIdAsc = 'ERA_BY_ERA_ID__ID_ASC',
  EraByEraIdIdDesc = 'ERA_BY_ERA_ID__ID_DESC',
  EraByEraIdLastEventAsc = 'ERA_BY_ERA_ID__LAST_EVENT_ASC',
  EraByEraIdLastEventDesc = 'ERA_BY_ERA_ID__LAST_EVENT_DESC',
  EraByEraIdStartTimeAsc = 'ERA_BY_ERA_ID__START_TIME_ASC',
  EraByEraIdStartTimeDesc = 'ERA_BY_ERA_ID__START_TIME_DESC',
  EraIdxAsc = 'ERA_IDX_ASC',
  EraIdxDesc = 'ERA_IDX_DESC',
  EraIdAsc = 'ERA_ID_ASC',
  EraIdDesc = 'ERA_ID_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  IndexerByIndexerIdActiveAsc = 'INDEXER_BY_INDEXER_ID__ACTIVE_ASC',
  IndexerByIndexerIdActiveDesc = 'INDEXER_BY_INDEXER_ID__ACTIVE_DESC',
  IndexerByIndexerIdCapacityAsc = 'INDEXER_BY_INDEXER_ID__CAPACITY_ASC',
  IndexerByIndexerIdCapacityDesc = 'INDEXER_BY_INDEXER_ID__CAPACITY_DESC',
  IndexerByIndexerIdCommissionAsc = 'INDEXER_BY_INDEXER_ID__COMMISSION_ASC',
  IndexerByIndexerIdCommissionDesc = 'INDEXER_BY_INDEXER_ID__COMMISSION_DESC',
  IndexerByIndexerIdControllerAsc = 'INDEXER_BY_INDEXER_ID__CONTROLLER_ASC',
  IndexerByIndexerIdControllerDesc = 'INDEXER_BY_INDEXER_ID__CONTROLLER_DESC',
  IndexerByIndexerIdCreatedBlockAsc = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_ASC',
  IndexerByIndexerIdCreatedBlockDesc = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_DESC',
  IndexerByIndexerIdIdAsc = 'INDEXER_BY_INDEXER_ID__ID_ASC',
  IndexerByIndexerIdIdDesc = 'INDEXER_BY_INDEXER_ID__ID_DESC',
  IndexerByIndexerIdLastClaimEraAsc = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_ASC',
  IndexerByIndexerIdLastClaimEraDesc = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_DESC',
  IndexerByIndexerIdLastEventAsc = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_ASC',
  IndexerByIndexerIdLastEventDesc = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_DESC',
  IndexerByIndexerIdLastSettledEraAsc = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_ASC',
  IndexerByIndexerIdLastSettledEraDesc = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_DESC',
  IndexerByIndexerIdMaxUnstakeAmountAsc = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_ASC',
  IndexerByIndexerIdMaxUnstakeAmountDesc = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_DESC',
  IndexerByIndexerIdMetadataAsc = 'INDEXER_BY_INDEXER_ID__METADATA_ASC',
  IndexerByIndexerIdMetadataDesc = 'INDEXER_BY_INDEXER_ID__METADATA_DESC',
  IndexerByIndexerIdSelfStakeAsc = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_ASC',
  IndexerByIndexerIdSelfStakeDesc = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_DESC',
  IndexerByIndexerIdTotalStakeAsc = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_ASC',
  IndexerByIndexerIdTotalStakeDesc = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_DESC',
  IndexerIdAsc = 'INDEXER_ID_ASC',
  IndexerIdDesc = 'INDEXER_ID_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  StakeAsc = 'STAKE_ASC',
  StakeDesc = 'STAKE_DESC'
}

export type EraStddevPopulationAggregates = {
  __typename?: 'EraStddevPopulationAggregates';
  /** Population standard deviation of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
};

export type EraStddevSampleAggregates = {
  __typename?: 'EraStddevSampleAggregates';
  /** Sample standard deviation of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
};

export type EraSumAggregates = {
  __typename?: 'EraSumAggregates';
  /** Sum of createdBlock across the matching connection */
  createdBlock: Scalars['BigInt']['output'];
};

/** A filter to be used against many `EraReward` object types. All fields are combined with a logical ‘and.’ */
export type EraToManyEraRewardFilter = {
  /** Aggregates across related `EraReward` match the filter criteria. */
  aggregates?: InputMaybe<EraRewardAggregatesFilter>;
  /** Every related `EraReward` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<EraRewardFilter>;
  /** No related `EraReward` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<EraRewardFilter>;
  /** Some related `EraReward` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<EraRewardFilter>;
};

/** A filter to be used against many `EraStake` object types. All fields are combined with a logical ‘and.’ */
export type EraToManyEraStakeFilter = {
  /** Aggregates across related `EraStake` match the filter criteria. */
  aggregates?: InputMaybe<EraStakeAggregatesFilter>;
  /** Every related `EraStake` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<EraStakeFilter>;
  /** No related `EraStake` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<EraStakeFilter>;
  /** Some related `EraStake` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<EraStakeFilter>;
};

/** A filter to be used against many `EraStakeUpdate` object types. All fields are combined with a logical ‘and.’ */
export type EraToManyEraStakeUpdateFilter = {
  /** Aggregates across related `EraStakeUpdate` match the filter criteria. */
  aggregates?: InputMaybe<EraStakeUpdateAggregatesFilter>;
  /** Every related `EraStakeUpdate` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<EraStakeUpdateFilter>;
  /** No related `EraStakeUpdate` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<EraStakeUpdateFilter>;
  /** Some related `EraStakeUpdate` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<EraStakeUpdateFilter>;
};

/** A filter to be used against many `IndexerCommissionRate` object types. All fields are combined with a logical ‘and.’ */
export type EraToManyIndexerCommissionRateFilter = {
  /** Aggregates across related `IndexerCommissionRate` match the filter criteria. */
  aggregates?: InputMaybe<IndexerCommissionRateAggregatesFilter>;
  /** Every related `IndexerCommissionRate` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<IndexerCommissionRateFilter>;
  /** No related `IndexerCommissionRate` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<IndexerCommissionRateFilter>;
  /** Some related `IndexerCommissionRate` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<IndexerCommissionRateFilter>;
};

/** A filter to be used against many `IndexerStake` object types. All fields are combined with a logical ‘and.’ */
export type EraToManyIndexerStakeFilter = {
  /** Aggregates across related `IndexerStake` match the filter criteria. */
  aggregates?: InputMaybe<IndexerStakeAggregatesFilter>;
  /** Every related `IndexerStake` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<IndexerStakeFilter>;
  /** No related `IndexerStake` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<IndexerStakeFilter>;
  /** Some related `IndexerStake` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<IndexerStakeFilter>;
};

/** A filter to be used against many `IndexerStakeSummary` object types. All fields are combined with a logical ‘and.’ */
export type EraToManyIndexerStakeSummaryFilter = {
  /** Aggregates across related `IndexerStakeSummary` match the filter criteria. */
  aggregates?: InputMaybe<IndexerStakeSummaryAggregatesFilter>;
  /** Every related `IndexerStakeSummary` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<IndexerStakeSummaryFilter>;
  /** No related `IndexerStakeSummary` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<IndexerStakeSummaryFilter>;
  /** Some related `IndexerStakeSummary` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<IndexerStakeSummaryFilter>;
};

export type EraVariancePopulationAggregates = {
  __typename?: 'EraVariancePopulationAggregates';
  /** Population variance of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
};

export type EraVarianceSampleAggregates = {
  __typename?: 'EraVarianceSampleAggregates';
  /** Sample variance of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `Era` values. */
export type ErasConnection = {
  __typename?: 'ErasConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<EraAggregates>;
  /** A list of edges which contains the `Era` and cursor to aid in pagination. */
  edges: Array<ErasEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<EraAggregates>>;
  /** A list of `Era` objects. */
  nodes: Array<Maybe<Era>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Era` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Era` values. */
export type ErasConnectionGroupedAggregatesArgs = {
  groupBy: Array<ErasGroupBy>;
  having?: InputMaybe<ErasHavingInput>;
};

/** A `Era` edge in the connection. */
export type ErasEdge = {
  __typename?: 'ErasEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `Era` at the end of the edge. */
  node?: Maybe<Era>;
};

/** Grouping methods for `Era` for usage during aggregation. */
export enum ErasGroupBy {
  CreatedBlock = 'CREATED_BLOCK',
  EndTime = 'END_TIME',
  EndTimeTruncatedToDay = 'END_TIME_TRUNCATED_TO_DAY',
  EndTimeTruncatedToHour = 'END_TIME_TRUNCATED_TO_HOUR',
  EraPeriod = 'ERA_PERIOD',
  ForceNext = 'FORCE_NEXT',
  Id = 'ID',
  LastEvent = 'LAST_EVENT',
  StartTime = 'START_TIME',
  StartTimeTruncatedToDay = 'START_TIME_TRUNCATED_TO_DAY',
  StartTimeTruncatedToHour = 'START_TIME_TRUNCATED_TO_HOUR'
}

export type ErasHavingAverageInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
  endTime?: InputMaybe<HavingDatetimeFilter>;
  startTime?: InputMaybe<HavingDatetimeFilter>;
};

export type ErasHavingDistinctCountInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
  endTime?: InputMaybe<HavingDatetimeFilter>;
  startTime?: InputMaybe<HavingDatetimeFilter>;
};

/** Conditions for `Era` aggregates. */
export type ErasHavingInput = {
  AND?: InputMaybe<Array<ErasHavingInput>>;
  OR?: InputMaybe<Array<ErasHavingInput>>;
  average?: InputMaybe<ErasHavingAverageInput>;
  distinctCount?: InputMaybe<ErasHavingDistinctCountInput>;
  max?: InputMaybe<ErasHavingMaxInput>;
  min?: InputMaybe<ErasHavingMinInput>;
  stddevPopulation?: InputMaybe<ErasHavingStddevPopulationInput>;
  stddevSample?: InputMaybe<ErasHavingStddevSampleInput>;
  sum?: InputMaybe<ErasHavingSumInput>;
  variancePopulation?: InputMaybe<ErasHavingVariancePopulationInput>;
  varianceSample?: InputMaybe<ErasHavingVarianceSampleInput>;
};

export type ErasHavingMaxInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
  endTime?: InputMaybe<HavingDatetimeFilter>;
  startTime?: InputMaybe<HavingDatetimeFilter>;
};

export type ErasHavingMinInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
  endTime?: InputMaybe<HavingDatetimeFilter>;
  startTime?: InputMaybe<HavingDatetimeFilter>;
};

export type ErasHavingStddevPopulationInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
  endTime?: InputMaybe<HavingDatetimeFilter>;
  startTime?: InputMaybe<HavingDatetimeFilter>;
};

export type ErasHavingStddevSampleInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
  endTime?: InputMaybe<HavingDatetimeFilter>;
  startTime?: InputMaybe<HavingDatetimeFilter>;
};

export type ErasHavingSumInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
  endTime?: InputMaybe<HavingDatetimeFilter>;
  startTime?: InputMaybe<HavingDatetimeFilter>;
};

export type ErasHavingVariancePopulationInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
  endTime?: InputMaybe<HavingDatetimeFilter>;
  startTime?: InputMaybe<HavingDatetimeFilter>;
};

export type ErasHavingVarianceSampleInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
  endTime?: InputMaybe<HavingDatetimeFilter>;
  startTime?: InputMaybe<HavingDatetimeFilter>;
};

/** Methods to use when ordering `Era`. */
export enum ErasOrderBy {
  CreatedBlockAsc = 'CREATED_BLOCK_ASC',
  CreatedBlockDesc = 'CREATED_BLOCK_DESC',
  EndTimeAsc = 'END_TIME_ASC',
  EndTimeDesc = 'END_TIME_DESC',
  EraPeriodAsc = 'ERA_PERIOD_ASC',
  EraPeriodDesc = 'ERA_PERIOD_DESC',
  EraRewardsAverageAmountAsc = 'ERA_REWARDS_AVERAGE_AMOUNT_ASC',
  EraRewardsAverageAmountDesc = 'ERA_REWARDS_AVERAGE_AMOUNT_DESC',
  EraRewardsAverageBlockRangeAsc = 'ERA_REWARDS_AVERAGE_BLOCK_RANGE_ASC',
  EraRewardsAverageBlockRangeDesc = 'ERA_REWARDS_AVERAGE_BLOCK_RANGE_DESC',
  EraRewardsAverageClaimedAsc = 'ERA_REWARDS_AVERAGE_CLAIMED_ASC',
  EraRewardsAverageClaimedDesc = 'ERA_REWARDS_AVERAGE_CLAIMED_DESC',
  EraRewardsAverageCreatedBlockAsc = 'ERA_REWARDS_AVERAGE_CREATED_BLOCK_ASC',
  EraRewardsAverageCreatedBlockDesc = 'ERA_REWARDS_AVERAGE_CREATED_BLOCK_DESC',
  EraRewardsAverageCreatedTimestampAsc = 'ERA_REWARDS_AVERAGE_CREATED_TIMESTAMP_ASC',
  EraRewardsAverageCreatedTimestampDesc = 'ERA_REWARDS_AVERAGE_CREATED_TIMESTAMP_DESC',
  EraRewardsAverageDelegatorIdAsc = 'ERA_REWARDS_AVERAGE_DELEGATOR_ID_ASC',
  EraRewardsAverageDelegatorIdDesc = 'ERA_REWARDS_AVERAGE_DELEGATOR_ID_DESC',
  EraRewardsAverageEraIdxAsc = 'ERA_REWARDS_AVERAGE_ERA_IDX_ASC',
  EraRewardsAverageEraIdxDesc = 'ERA_REWARDS_AVERAGE_ERA_IDX_DESC',
  EraRewardsAverageEraIdAsc = 'ERA_REWARDS_AVERAGE_ERA_ID_ASC',
  EraRewardsAverageEraIdDesc = 'ERA_REWARDS_AVERAGE_ERA_ID_DESC',
  EraRewardsAverageIdAsc = 'ERA_REWARDS_AVERAGE_ID_ASC',
  EraRewardsAverageIdDesc = 'ERA_REWARDS_AVERAGE_ID_DESC',
  EraRewardsAverageIndexerIdAsc = 'ERA_REWARDS_AVERAGE_INDEXER_ID_ASC',
  EraRewardsAverageIndexerIdDesc = 'ERA_REWARDS_AVERAGE_INDEXER_ID_DESC',
  EraRewardsAverageIsCommissionAsc = 'ERA_REWARDS_AVERAGE_IS_COMMISSION_ASC',
  EraRewardsAverageIsCommissionDesc = 'ERA_REWARDS_AVERAGE_IS_COMMISSION_DESC',
  EraRewardsAverageIsIndexerAsc = 'ERA_REWARDS_AVERAGE_IS_INDEXER_ASC',
  EraRewardsAverageIsIndexerDesc = 'ERA_REWARDS_AVERAGE_IS_INDEXER_DESC',
  EraRewardsByEraIdCountAsc = 'ERA_REWARDS_BY_ERA_ID__COUNT_ASC',
  EraRewardsByEraIdCountDesc = 'ERA_REWARDS_BY_ERA_ID__COUNT_DESC',
  EraRewardsCountAsc = 'ERA_REWARDS_COUNT_ASC',
  EraRewardsCountDesc = 'ERA_REWARDS_COUNT_DESC',
  EraRewardsDistinctCountAmountAsc = 'ERA_REWARDS_DISTINCT_COUNT_AMOUNT_ASC',
  EraRewardsDistinctCountAmountDesc = 'ERA_REWARDS_DISTINCT_COUNT_AMOUNT_DESC',
  EraRewardsDistinctCountBlockRangeAsc = 'ERA_REWARDS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  EraRewardsDistinctCountBlockRangeDesc = 'ERA_REWARDS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  EraRewardsDistinctCountClaimedAsc = 'ERA_REWARDS_DISTINCT_COUNT_CLAIMED_ASC',
  EraRewardsDistinctCountClaimedDesc = 'ERA_REWARDS_DISTINCT_COUNT_CLAIMED_DESC',
  EraRewardsDistinctCountCreatedBlockAsc = 'ERA_REWARDS_DISTINCT_COUNT_CREATED_BLOCK_ASC',
  EraRewardsDistinctCountCreatedBlockDesc = 'ERA_REWARDS_DISTINCT_COUNT_CREATED_BLOCK_DESC',
  EraRewardsDistinctCountCreatedTimestampAsc = 'ERA_REWARDS_DISTINCT_COUNT_CREATED_TIMESTAMP_ASC',
  EraRewardsDistinctCountCreatedTimestampDesc = 'ERA_REWARDS_DISTINCT_COUNT_CREATED_TIMESTAMP_DESC',
  EraRewardsDistinctCountDelegatorIdAsc = 'ERA_REWARDS_DISTINCT_COUNT_DELEGATOR_ID_ASC',
  EraRewardsDistinctCountDelegatorIdDesc = 'ERA_REWARDS_DISTINCT_COUNT_DELEGATOR_ID_DESC',
  EraRewardsDistinctCountEraIdxAsc = 'ERA_REWARDS_DISTINCT_COUNT_ERA_IDX_ASC',
  EraRewardsDistinctCountEraIdxDesc = 'ERA_REWARDS_DISTINCT_COUNT_ERA_IDX_DESC',
  EraRewardsDistinctCountEraIdAsc = 'ERA_REWARDS_DISTINCT_COUNT_ERA_ID_ASC',
  EraRewardsDistinctCountEraIdDesc = 'ERA_REWARDS_DISTINCT_COUNT_ERA_ID_DESC',
  EraRewardsDistinctCountIdAsc = 'ERA_REWARDS_DISTINCT_COUNT_ID_ASC',
  EraRewardsDistinctCountIdDesc = 'ERA_REWARDS_DISTINCT_COUNT_ID_DESC',
  EraRewardsDistinctCountIndexerIdAsc = 'ERA_REWARDS_DISTINCT_COUNT_INDEXER_ID_ASC',
  EraRewardsDistinctCountIndexerIdDesc = 'ERA_REWARDS_DISTINCT_COUNT_INDEXER_ID_DESC',
  EraRewardsDistinctCountIsCommissionAsc = 'ERA_REWARDS_DISTINCT_COUNT_IS_COMMISSION_ASC',
  EraRewardsDistinctCountIsCommissionDesc = 'ERA_REWARDS_DISTINCT_COUNT_IS_COMMISSION_DESC',
  EraRewardsDistinctCountIsIndexerAsc = 'ERA_REWARDS_DISTINCT_COUNT_IS_INDEXER_ASC',
  EraRewardsDistinctCountIsIndexerDesc = 'ERA_REWARDS_DISTINCT_COUNT_IS_INDEXER_DESC',
  EraRewardsMaxAmountAsc = 'ERA_REWARDS_MAX_AMOUNT_ASC',
  EraRewardsMaxAmountDesc = 'ERA_REWARDS_MAX_AMOUNT_DESC',
  EraRewardsMaxBlockRangeAsc = 'ERA_REWARDS_MAX_BLOCK_RANGE_ASC',
  EraRewardsMaxBlockRangeDesc = 'ERA_REWARDS_MAX_BLOCK_RANGE_DESC',
  EraRewardsMaxClaimedAsc = 'ERA_REWARDS_MAX_CLAIMED_ASC',
  EraRewardsMaxClaimedDesc = 'ERA_REWARDS_MAX_CLAIMED_DESC',
  EraRewardsMaxCreatedBlockAsc = 'ERA_REWARDS_MAX_CREATED_BLOCK_ASC',
  EraRewardsMaxCreatedBlockDesc = 'ERA_REWARDS_MAX_CREATED_BLOCK_DESC',
  EraRewardsMaxCreatedTimestampAsc = 'ERA_REWARDS_MAX_CREATED_TIMESTAMP_ASC',
  EraRewardsMaxCreatedTimestampDesc = 'ERA_REWARDS_MAX_CREATED_TIMESTAMP_DESC',
  EraRewardsMaxDelegatorIdAsc = 'ERA_REWARDS_MAX_DELEGATOR_ID_ASC',
  EraRewardsMaxDelegatorIdDesc = 'ERA_REWARDS_MAX_DELEGATOR_ID_DESC',
  EraRewardsMaxEraIdxAsc = 'ERA_REWARDS_MAX_ERA_IDX_ASC',
  EraRewardsMaxEraIdxDesc = 'ERA_REWARDS_MAX_ERA_IDX_DESC',
  EraRewardsMaxEraIdAsc = 'ERA_REWARDS_MAX_ERA_ID_ASC',
  EraRewardsMaxEraIdDesc = 'ERA_REWARDS_MAX_ERA_ID_DESC',
  EraRewardsMaxIdAsc = 'ERA_REWARDS_MAX_ID_ASC',
  EraRewardsMaxIdDesc = 'ERA_REWARDS_MAX_ID_DESC',
  EraRewardsMaxIndexerIdAsc = 'ERA_REWARDS_MAX_INDEXER_ID_ASC',
  EraRewardsMaxIndexerIdDesc = 'ERA_REWARDS_MAX_INDEXER_ID_DESC',
  EraRewardsMaxIsCommissionAsc = 'ERA_REWARDS_MAX_IS_COMMISSION_ASC',
  EraRewardsMaxIsCommissionDesc = 'ERA_REWARDS_MAX_IS_COMMISSION_DESC',
  EraRewardsMaxIsIndexerAsc = 'ERA_REWARDS_MAX_IS_INDEXER_ASC',
  EraRewardsMaxIsIndexerDesc = 'ERA_REWARDS_MAX_IS_INDEXER_DESC',
  EraRewardsMinAmountAsc = 'ERA_REWARDS_MIN_AMOUNT_ASC',
  EraRewardsMinAmountDesc = 'ERA_REWARDS_MIN_AMOUNT_DESC',
  EraRewardsMinBlockRangeAsc = 'ERA_REWARDS_MIN_BLOCK_RANGE_ASC',
  EraRewardsMinBlockRangeDesc = 'ERA_REWARDS_MIN_BLOCK_RANGE_DESC',
  EraRewardsMinClaimedAsc = 'ERA_REWARDS_MIN_CLAIMED_ASC',
  EraRewardsMinClaimedDesc = 'ERA_REWARDS_MIN_CLAIMED_DESC',
  EraRewardsMinCreatedBlockAsc = 'ERA_REWARDS_MIN_CREATED_BLOCK_ASC',
  EraRewardsMinCreatedBlockDesc = 'ERA_REWARDS_MIN_CREATED_BLOCK_DESC',
  EraRewardsMinCreatedTimestampAsc = 'ERA_REWARDS_MIN_CREATED_TIMESTAMP_ASC',
  EraRewardsMinCreatedTimestampDesc = 'ERA_REWARDS_MIN_CREATED_TIMESTAMP_DESC',
  EraRewardsMinDelegatorIdAsc = 'ERA_REWARDS_MIN_DELEGATOR_ID_ASC',
  EraRewardsMinDelegatorIdDesc = 'ERA_REWARDS_MIN_DELEGATOR_ID_DESC',
  EraRewardsMinEraIdxAsc = 'ERA_REWARDS_MIN_ERA_IDX_ASC',
  EraRewardsMinEraIdxDesc = 'ERA_REWARDS_MIN_ERA_IDX_DESC',
  EraRewardsMinEraIdAsc = 'ERA_REWARDS_MIN_ERA_ID_ASC',
  EraRewardsMinEraIdDesc = 'ERA_REWARDS_MIN_ERA_ID_DESC',
  EraRewardsMinIdAsc = 'ERA_REWARDS_MIN_ID_ASC',
  EraRewardsMinIdDesc = 'ERA_REWARDS_MIN_ID_DESC',
  EraRewardsMinIndexerIdAsc = 'ERA_REWARDS_MIN_INDEXER_ID_ASC',
  EraRewardsMinIndexerIdDesc = 'ERA_REWARDS_MIN_INDEXER_ID_DESC',
  EraRewardsMinIsCommissionAsc = 'ERA_REWARDS_MIN_IS_COMMISSION_ASC',
  EraRewardsMinIsCommissionDesc = 'ERA_REWARDS_MIN_IS_COMMISSION_DESC',
  EraRewardsMinIsIndexerAsc = 'ERA_REWARDS_MIN_IS_INDEXER_ASC',
  EraRewardsMinIsIndexerDesc = 'ERA_REWARDS_MIN_IS_INDEXER_DESC',
  EraRewardsStddevPopulationAmountAsc = 'ERA_REWARDS_STDDEV_POPULATION_AMOUNT_ASC',
  EraRewardsStddevPopulationAmountDesc = 'ERA_REWARDS_STDDEV_POPULATION_AMOUNT_DESC',
  EraRewardsStddevPopulationBlockRangeAsc = 'ERA_REWARDS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  EraRewardsStddevPopulationBlockRangeDesc = 'ERA_REWARDS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  EraRewardsStddevPopulationClaimedAsc = 'ERA_REWARDS_STDDEV_POPULATION_CLAIMED_ASC',
  EraRewardsStddevPopulationClaimedDesc = 'ERA_REWARDS_STDDEV_POPULATION_CLAIMED_DESC',
  EraRewardsStddevPopulationCreatedBlockAsc = 'ERA_REWARDS_STDDEV_POPULATION_CREATED_BLOCK_ASC',
  EraRewardsStddevPopulationCreatedBlockDesc = 'ERA_REWARDS_STDDEV_POPULATION_CREATED_BLOCK_DESC',
  EraRewardsStddevPopulationCreatedTimestampAsc = 'ERA_REWARDS_STDDEV_POPULATION_CREATED_TIMESTAMP_ASC',
  EraRewardsStddevPopulationCreatedTimestampDesc = 'ERA_REWARDS_STDDEV_POPULATION_CREATED_TIMESTAMP_DESC',
  EraRewardsStddevPopulationDelegatorIdAsc = 'ERA_REWARDS_STDDEV_POPULATION_DELEGATOR_ID_ASC',
  EraRewardsStddevPopulationDelegatorIdDesc = 'ERA_REWARDS_STDDEV_POPULATION_DELEGATOR_ID_DESC',
  EraRewardsStddevPopulationEraIdxAsc = 'ERA_REWARDS_STDDEV_POPULATION_ERA_IDX_ASC',
  EraRewardsStddevPopulationEraIdxDesc = 'ERA_REWARDS_STDDEV_POPULATION_ERA_IDX_DESC',
  EraRewardsStddevPopulationEraIdAsc = 'ERA_REWARDS_STDDEV_POPULATION_ERA_ID_ASC',
  EraRewardsStddevPopulationEraIdDesc = 'ERA_REWARDS_STDDEV_POPULATION_ERA_ID_DESC',
  EraRewardsStddevPopulationIdAsc = 'ERA_REWARDS_STDDEV_POPULATION_ID_ASC',
  EraRewardsStddevPopulationIdDesc = 'ERA_REWARDS_STDDEV_POPULATION_ID_DESC',
  EraRewardsStddevPopulationIndexerIdAsc = 'ERA_REWARDS_STDDEV_POPULATION_INDEXER_ID_ASC',
  EraRewardsStddevPopulationIndexerIdDesc = 'ERA_REWARDS_STDDEV_POPULATION_INDEXER_ID_DESC',
  EraRewardsStddevPopulationIsCommissionAsc = 'ERA_REWARDS_STDDEV_POPULATION_IS_COMMISSION_ASC',
  EraRewardsStddevPopulationIsCommissionDesc = 'ERA_REWARDS_STDDEV_POPULATION_IS_COMMISSION_DESC',
  EraRewardsStddevPopulationIsIndexerAsc = 'ERA_REWARDS_STDDEV_POPULATION_IS_INDEXER_ASC',
  EraRewardsStddevPopulationIsIndexerDesc = 'ERA_REWARDS_STDDEV_POPULATION_IS_INDEXER_DESC',
  EraRewardsStddevSampleAmountAsc = 'ERA_REWARDS_STDDEV_SAMPLE_AMOUNT_ASC',
  EraRewardsStddevSampleAmountDesc = 'ERA_REWARDS_STDDEV_SAMPLE_AMOUNT_DESC',
  EraRewardsStddevSampleBlockRangeAsc = 'ERA_REWARDS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  EraRewardsStddevSampleBlockRangeDesc = 'ERA_REWARDS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  EraRewardsStddevSampleClaimedAsc = 'ERA_REWARDS_STDDEV_SAMPLE_CLAIMED_ASC',
  EraRewardsStddevSampleClaimedDesc = 'ERA_REWARDS_STDDEV_SAMPLE_CLAIMED_DESC',
  EraRewardsStddevSampleCreatedBlockAsc = 'ERA_REWARDS_STDDEV_SAMPLE_CREATED_BLOCK_ASC',
  EraRewardsStddevSampleCreatedBlockDesc = 'ERA_REWARDS_STDDEV_SAMPLE_CREATED_BLOCK_DESC',
  EraRewardsStddevSampleCreatedTimestampAsc = 'ERA_REWARDS_STDDEV_SAMPLE_CREATED_TIMESTAMP_ASC',
  EraRewardsStddevSampleCreatedTimestampDesc = 'ERA_REWARDS_STDDEV_SAMPLE_CREATED_TIMESTAMP_DESC',
  EraRewardsStddevSampleDelegatorIdAsc = 'ERA_REWARDS_STDDEV_SAMPLE_DELEGATOR_ID_ASC',
  EraRewardsStddevSampleDelegatorIdDesc = 'ERA_REWARDS_STDDEV_SAMPLE_DELEGATOR_ID_DESC',
  EraRewardsStddevSampleEraIdxAsc = 'ERA_REWARDS_STDDEV_SAMPLE_ERA_IDX_ASC',
  EraRewardsStddevSampleEraIdxDesc = 'ERA_REWARDS_STDDEV_SAMPLE_ERA_IDX_DESC',
  EraRewardsStddevSampleEraIdAsc = 'ERA_REWARDS_STDDEV_SAMPLE_ERA_ID_ASC',
  EraRewardsStddevSampleEraIdDesc = 'ERA_REWARDS_STDDEV_SAMPLE_ERA_ID_DESC',
  EraRewardsStddevSampleIdAsc = 'ERA_REWARDS_STDDEV_SAMPLE_ID_ASC',
  EraRewardsStddevSampleIdDesc = 'ERA_REWARDS_STDDEV_SAMPLE_ID_DESC',
  EraRewardsStddevSampleIndexerIdAsc = 'ERA_REWARDS_STDDEV_SAMPLE_INDEXER_ID_ASC',
  EraRewardsStddevSampleIndexerIdDesc = 'ERA_REWARDS_STDDEV_SAMPLE_INDEXER_ID_DESC',
  EraRewardsStddevSampleIsCommissionAsc = 'ERA_REWARDS_STDDEV_SAMPLE_IS_COMMISSION_ASC',
  EraRewardsStddevSampleIsCommissionDesc = 'ERA_REWARDS_STDDEV_SAMPLE_IS_COMMISSION_DESC',
  EraRewardsStddevSampleIsIndexerAsc = 'ERA_REWARDS_STDDEV_SAMPLE_IS_INDEXER_ASC',
  EraRewardsStddevSampleIsIndexerDesc = 'ERA_REWARDS_STDDEV_SAMPLE_IS_INDEXER_DESC',
  EraRewardsSumAmountAsc = 'ERA_REWARDS_SUM_AMOUNT_ASC',
  EraRewardsSumAmountDesc = 'ERA_REWARDS_SUM_AMOUNT_DESC',
  EraRewardsSumBlockRangeAsc = 'ERA_REWARDS_SUM_BLOCK_RANGE_ASC',
  EraRewardsSumBlockRangeDesc = 'ERA_REWARDS_SUM_BLOCK_RANGE_DESC',
  EraRewardsSumClaimedAsc = 'ERA_REWARDS_SUM_CLAIMED_ASC',
  EraRewardsSumClaimedDesc = 'ERA_REWARDS_SUM_CLAIMED_DESC',
  EraRewardsSumCreatedBlockAsc = 'ERA_REWARDS_SUM_CREATED_BLOCK_ASC',
  EraRewardsSumCreatedBlockDesc = 'ERA_REWARDS_SUM_CREATED_BLOCK_DESC',
  EraRewardsSumCreatedTimestampAsc = 'ERA_REWARDS_SUM_CREATED_TIMESTAMP_ASC',
  EraRewardsSumCreatedTimestampDesc = 'ERA_REWARDS_SUM_CREATED_TIMESTAMP_DESC',
  EraRewardsSumDelegatorIdAsc = 'ERA_REWARDS_SUM_DELEGATOR_ID_ASC',
  EraRewardsSumDelegatorIdDesc = 'ERA_REWARDS_SUM_DELEGATOR_ID_DESC',
  EraRewardsSumEraIdxAsc = 'ERA_REWARDS_SUM_ERA_IDX_ASC',
  EraRewardsSumEraIdxDesc = 'ERA_REWARDS_SUM_ERA_IDX_DESC',
  EraRewardsSumEraIdAsc = 'ERA_REWARDS_SUM_ERA_ID_ASC',
  EraRewardsSumEraIdDesc = 'ERA_REWARDS_SUM_ERA_ID_DESC',
  EraRewardsSumIdAsc = 'ERA_REWARDS_SUM_ID_ASC',
  EraRewardsSumIdDesc = 'ERA_REWARDS_SUM_ID_DESC',
  EraRewardsSumIndexerIdAsc = 'ERA_REWARDS_SUM_INDEXER_ID_ASC',
  EraRewardsSumIndexerIdDesc = 'ERA_REWARDS_SUM_INDEXER_ID_DESC',
  EraRewardsSumIsCommissionAsc = 'ERA_REWARDS_SUM_IS_COMMISSION_ASC',
  EraRewardsSumIsCommissionDesc = 'ERA_REWARDS_SUM_IS_COMMISSION_DESC',
  EraRewardsSumIsIndexerAsc = 'ERA_REWARDS_SUM_IS_INDEXER_ASC',
  EraRewardsSumIsIndexerDesc = 'ERA_REWARDS_SUM_IS_INDEXER_DESC',
  EraRewardsVariancePopulationAmountAsc = 'ERA_REWARDS_VARIANCE_POPULATION_AMOUNT_ASC',
  EraRewardsVariancePopulationAmountDesc = 'ERA_REWARDS_VARIANCE_POPULATION_AMOUNT_DESC',
  EraRewardsVariancePopulationBlockRangeAsc = 'ERA_REWARDS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  EraRewardsVariancePopulationBlockRangeDesc = 'ERA_REWARDS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  EraRewardsVariancePopulationClaimedAsc = 'ERA_REWARDS_VARIANCE_POPULATION_CLAIMED_ASC',
  EraRewardsVariancePopulationClaimedDesc = 'ERA_REWARDS_VARIANCE_POPULATION_CLAIMED_DESC',
  EraRewardsVariancePopulationCreatedBlockAsc = 'ERA_REWARDS_VARIANCE_POPULATION_CREATED_BLOCK_ASC',
  EraRewardsVariancePopulationCreatedBlockDesc = 'ERA_REWARDS_VARIANCE_POPULATION_CREATED_BLOCK_DESC',
  EraRewardsVariancePopulationCreatedTimestampAsc = 'ERA_REWARDS_VARIANCE_POPULATION_CREATED_TIMESTAMP_ASC',
  EraRewardsVariancePopulationCreatedTimestampDesc = 'ERA_REWARDS_VARIANCE_POPULATION_CREATED_TIMESTAMP_DESC',
  EraRewardsVariancePopulationDelegatorIdAsc = 'ERA_REWARDS_VARIANCE_POPULATION_DELEGATOR_ID_ASC',
  EraRewardsVariancePopulationDelegatorIdDesc = 'ERA_REWARDS_VARIANCE_POPULATION_DELEGATOR_ID_DESC',
  EraRewardsVariancePopulationEraIdxAsc = 'ERA_REWARDS_VARIANCE_POPULATION_ERA_IDX_ASC',
  EraRewardsVariancePopulationEraIdxDesc = 'ERA_REWARDS_VARIANCE_POPULATION_ERA_IDX_DESC',
  EraRewardsVariancePopulationEraIdAsc = 'ERA_REWARDS_VARIANCE_POPULATION_ERA_ID_ASC',
  EraRewardsVariancePopulationEraIdDesc = 'ERA_REWARDS_VARIANCE_POPULATION_ERA_ID_DESC',
  EraRewardsVariancePopulationIdAsc = 'ERA_REWARDS_VARIANCE_POPULATION_ID_ASC',
  EraRewardsVariancePopulationIdDesc = 'ERA_REWARDS_VARIANCE_POPULATION_ID_DESC',
  EraRewardsVariancePopulationIndexerIdAsc = 'ERA_REWARDS_VARIANCE_POPULATION_INDEXER_ID_ASC',
  EraRewardsVariancePopulationIndexerIdDesc = 'ERA_REWARDS_VARIANCE_POPULATION_INDEXER_ID_DESC',
  EraRewardsVariancePopulationIsCommissionAsc = 'ERA_REWARDS_VARIANCE_POPULATION_IS_COMMISSION_ASC',
  EraRewardsVariancePopulationIsCommissionDesc = 'ERA_REWARDS_VARIANCE_POPULATION_IS_COMMISSION_DESC',
  EraRewardsVariancePopulationIsIndexerAsc = 'ERA_REWARDS_VARIANCE_POPULATION_IS_INDEXER_ASC',
  EraRewardsVariancePopulationIsIndexerDesc = 'ERA_REWARDS_VARIANCE_POPULATION_IS_INDEXER_DESC',
  EraRewardsVarianceSampleAmountAsc = 'ERA_REWARDS_VARIANCE_SAMPLE_AMOUNT_ASC',
  EraRewardsVarianceSampleAmountDesc = 'ERA_REWARDS_VARIANCE_SAMPLE_AMOUNT_DESC',
  EraRewardsVarianceSampleBlockRangeAsc = 'ERA_REWARDS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  EraRewardsVarianceSampleBlockRangeDesc = 'ERA_REWARDS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  EraRewardsVarianceSampleClaimedAsc = 'ERA_REWARDS_VARIANCE_SAMPLE_CLAIMED_ASC',
  EraRewardsVarianceSampleClaimedDesc = 'ERA_REWARDS_VARIANCE_SAMPLE_CLAIMED_DESC',
  EraRewardsVarianceSampleCreatedBlockAsc = 'ERA_REWARDS_VARIANCE_SAMPLE_CREATED_BLOCK_ASC',
  EraRewardsVarianceSampleCreatedBlockDesc = 'ERA_REWARDS_VARIANCE_SAMPLE_CREATED_BLOCK_DESC',
  EraRewardsVarianceSampleCreatedTimestampAsc = 'ERA_REWARDS_VARIANCE_SAMPLE_CREATED_TIMESTAMP_ASC',
  EraRewardsVarianceSampleCreatedTimestampDesc = 'ERA_REWARDS_VARIANCE_SAMPLE_CREATED_TIMESTAMP_DESC',
  EraRewardsVarianceSampleDelegatorIdAsc = 'ERA_REWARDS_VARIANCE_SAMPLE_DELEGATOR_ID_ASC',
  EraRewardsVarianceSampleDelegatorIdDesc = 'ERA_REWARDS_VARIANCE_SAMPLE_DELEGATOR_ID_DESC',
  EraRewardsVarianceSampleEraIdxAsc = 'ERA_REWARDS_VARIANCE_SAMPLE_ERA_IDX_ASC',
  EraRewardsVarianceSampleEraIdxDesc = 'ERA_REWARDS_VARIANCE_SAMPLE_ERA_IDX_DESC',
  EraRewardsVarianceSampleEraIdAsc = 'ERA_REWARDS_VARIANCE_SAMPLE_ERA_ID_ASC',
  EraRewardsVarianceSampleEraIdDesc = 'ERA_REWARDS_VARIANCE_SAMPLE_ERA_ID_DESC',
  EraRewardsVarianceSampleIdAsc = 'ERA_REWARDS_VARIANCE_SAMPLE_ID_ASC',
  EraRewardsVarianceSampleIdDesc = 'ERA_REWARDS_VARIANCE_SAMPLE_ID_DESC',
  EraRewardsVarianceSampleIndexerIdAsc = 'ERA_REWARDS_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  EraRewardsVarianceSampleIndexerIdDesc = 'ERA_REWARDS_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  EraRewardsVarianceSampleIsCommissionAsc = 'ERA_REWARDS_VARIANCE_SAMPLE_IS_COMMISSION_ASC',
  EraRewardsVarianceSampleIsCommissionDesc = 'ERA_REWARDS_VARIANCE_SAMPLE_IS_COMMISSION_DESC',
  EraRewardsVarianceSampleIsIndexerAsc = 'ERA_REWARDS_VARIANCE_SAMPLE_IS_INDEXER_ASC',
  EraRewardsVarianceSampleIsIndexerDesc = 'ERA_REWARDS_VARIANCE_SAMPLE_IS_INDEXER_DESC',
  EraStakesAverageBlockRangeAsc = 'ERA_STAKES_AVERAGE_BLOCK_RANGE_ASC',
  EraStakesAverageBlockRangeDesc = 'ERA_STAKES_AVERAGE_BLOCK_RANGE_DESC',
  EraStakesAverageDelegatorIdAsc = 'ERA_STAKES_AVERAGE_DELEGATOR_ID_ASC',
  EraStakesAverageDelegatorIdDesc = 'ERA_STAKES_AVERAGE_DELEGATOR_ID_DESC',
  EraStakesAverageEraIdxAsc = 'ERA_STAKES_AVERAGE_ERA_IDX_ASC',
  EraStakesAverageEraIdxDesc = 'ERA_STAKES_AVERAGE_ERA_IDX_DESC',
  EraStakesAverageEraIdAsc = 'ERA_STAKES_AVERAGE_ERA_ID_ASC',
  EraStakesAverageEraIdDesc = 'ERA_STAKES_AVERAGE_ERA_ID_DESC',
  EraStakesAverageIdAsc = 'ERA_STAKES_AVERAGE_ID_ASC',
  EraStakesAverageIdDesc = 'ERA_STAKES_AVERAGE_ID_DESC',
  EraStakesAverageIndexerIdAsc = 'ERA_STAKES_AVERAGE_INDEXER_ID_ASC',
  EraStakesAverageIndexerIdDesc = 'ERA_STAKES_AVERAGE_INDEXER_ID_DESC',
  EraStakesAverageStakeAsc = 'ERA_STAKES_AVERAGE_STAKE_ASC',
  EraStakesAverageStakeDesc = 'ERA_STAKES_AVERAGE_STAKE_DESC',
  EraStakesByEraIdCountAsc = 'ERA_STAKES_BY_ERA_ID__COUNT_ASC',
  EraStakesByEraIdCountDesc = 'ERA_STAKES_BY_ERA_ID__COUNT_DESC',
  EraStakesCountAsc = 'ERA_STAKES_COUNT_ASC',
  EraStakesCountDesc = 'ERA_STAKES_COUNT_DESC',
  EraStakesDistinctCountBlockRangeAsc = 'ERA_STAKES_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  EraStakesDistinctCountBlockRangeDesc = 'ERA_STAKES_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  EraStakesDistinctCountDelegatorIdAsc = 'ERA_STAKES_DISTINCT_COUNT_DELEGATOR_ID_ASC',
  EraStakesDistinctCountDelegatorIdDesc = 'ERA_STAKES_DISTINCT_COUNT_DELEGATOR_ID_DESC',
  EraStakesDistinctCountEraIdxAsc = 'ERA_STAKES_DISTINCT_COUNT_ERA_IDX_ASC',
  EraStakesDistinctCountEraIdxDesc = 'ERA_STAKES_DISTINCT_COUNT_ERA_IDX_DESC',
  EraStakesDistinctCountEraIdAsc = 'ERA_STAKES_DISTINCT_COUNT_ERA_ID_ASC',
  EraStakesDistinctCountEraIdDesc = 'ERA_STAKES_DISTINCT_COUNT_ERA_ID_DESC',
  EraStakesDistinctCountIdAsc = 'ERA_STAKES_DISTINCT_COUNT_ID_ASC',
  EraStakesDistinctCountIdDesc = 'ERA_STAKES_DISTINCT_COUNT_ID_DESC',
  EraStakesDistinctCountIndexerIdAsc = 'ERA_STAKES_DISTINCT_COUNT_INDEXER_ID_ASC',
  EraStakesDistinctCountIndexerIdDesc = 'ERA_STAKES_DISTINCT_COUNT_INDEXER_ID_DESC',
  EraStakesDistinctCountStakeAsc = 'ERA_STAKES_DISTINCT_COUNT_STAKE_ASC',
  EraStakesDistinctCountStakeDesc = 'ERA_STAKES_DISTINCT_COUNT_STAKE_DESC',
  EraStakesMaxBlockRangeAsc = 'ERA_STAKES_MAX_BLOCK_RANGE_ASC',
  EraStakesMaxBlockRangeDesc = 'ERA_STAKES_MAX_BLOCK_RANGE_DESC',
  EraStakesMaxDelegatorIdAsc = 'ERA_STAKES_MAX_DELEGATOR_ID_ASC',
  EraStakesMaxDelegatorIdDesc = 'ERA_STAKES_MAX_DELEGATOR_ID_DESC',
  EraStakesMaxEraIdxAsc = 'ERA_STAKES_MAX_ERA_IDX_ASC',
  EraStakesMaxEraIdxDesc = 'ERA_STAKES_MAX_ERA_IDX_DESC',
  EraStakesMaxEraIdAsc = 'ERA_STAKES_MAX_ERA_ID_ASC',
  EraStakesMaxEraIdDesc = 'ERA_STAKES_MAX_ERA_ID_DESC',
  EraStakesMaxIdAsc = 'ERA_STAKES_MAX_ID_ASC',
  EraStakesMaxIdDesc = 'ERA_STAKES_MAX_ID_DESC',
  EraStakesMaxIndexerIdAsc = 'ERA_STAKES_MAX_INDEXER_ID_ASC',
  EraStakesMaxIndexerIdDesc = 'ERA_STAKES_MAX_INDEXER_ID_DESC',
  EraStakesMaxStakeAsc = 'ERA_STAKES_MAX_STAKE_ASC',
  EraStakesMaxStakeDesc = 'ERA_STAKES_MAX_STAKE_DESC',
  EraStakesMinBlockRangeAsc = 'ERA_STAKES_MIN_BLOCK_RANGE_ASC',
  EraStakesMinBlockRangeDesc = 'ERA_STAKES_MIN_BLOCK_RANGE_DESC',
  EraStakesMinDelegatorIdAsc = 'ERA_STAKES_MIN_DELEGATOR_ID_ASC',
  EraStakesMinDelegatorIdDesc = 'ERA_STAKES_MIN_DELEGATOR_ID_DESC',
  EraStakesMinEraIdxAsc = 'ERA_STAKES_MIN_ERA_IDX_ASC',
  EraStakesMinEraIdxDesc = 'ERA_STAKES_MIN_ERA_IDX_DESC',
  EraStakesMinEraIdAsc = 'ERA_STAKES_MIN_ERA_ID_ASC',
  EraStakesMinEraIdDesc = 'ERA_STAKES_MIN_ERA_ID_DESC',
  EraStakesMinIdAsc = 'ERA_STAKES_MIN_ID_ASC',
  EraStakesMinIdDesc = 'ERA_STAKES_MIN_ID_DESC',
  EraStakesMinIndexerIdAsc = 'ERA_STAKES_MIN_INDEXER_ID_ASC',
  EraStakesMinIndexerIdDesc = 'ERA_STAKES_MIN_INDEXER_ID_DESC',
  EraStakesMinStakeAsc = 'ERA_STAKES_MIN_STAKE_ASC',
  EraStakesMinStakeDesc = 'ERA_STAKES_MIN_STAKE_DESC',
  EraStakesStddevPopulationBlockRangeAsc = 'ERA_STAKES_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  EraStakesStddevPopulationBlockRangeDesc = 'ERA_STAKES_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  EraStakesStddevPopulationDelegatorIdAsc = 'ERA_STAKES_STDDEV_POPULATION_DELEGATOR_ID_ASC',
  EraStakesStddevPopulationDelegatorIdDesc = 'ERA_STAKES_STDDEV_POPULATION_DELEGATOR_ID_DESC',
  EraStakesStddevPopulationEraIdxAsc = 'ERA_STAKES_STDDEV_POPULATION_ERA_IDX_ASC',
  EraStakesStddevPopulationEraIdxDesc = 'ERA_STAKES_STDDEV_POPULATION_ERA_IDX_DESC',
  EraStakesStddevPopulationEraIdAsc = 'ERA_STAKES_STDDEV_POPULATION_ERA_ID_ASC',
  EraStakesStddevPopulationEraIdDesc = 'ERA_STAKES_STDDEV_POPULATION_ERA_ID_DESC',
  EraStakesStddevPopulationIdAsc = 'ERA_STAKES_STDDEV_POPULATION_ID_ASC',
  EraStakesStddevPopulationIdDesc = 'ERA_STAKES_STDDEV_POPULATION_ID_DESC',
  EraStakesStddevPopulationIndexerIdAsc = 'ERA_STAKES_STDDEV_POPULATION_INDEXER_ID_ASC',
  EraStakesStddevPopulationIndexerIdDesc = 'ERA_STAKES_STDDEV_POPULATION_INDEXER_ID_DESC',
  EraStakesStddevPopulationStakeAsc = 'ERA_STAKES_STDDEV_POPULATION_STAKE_ASC',
  EraStakesStddevPopulationStakeDesc = 'ERA_STAKES_STDDEV_POPULATION_STAKE_DESC',
  EraStakesStddevSampleBlockRangeAsc = 'ERA_STAKES_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  EraStakesStddevSampleBlockRangeDesc = 'ERA_STAKES_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  EraStakesStddevSampleDelegatorIdAsc = 'ERA_STAKES_STDDEV_SAMPLE_DELEGATOR_ID_ASC',
  EraStakesStddevSampleDelegatorIdDesc = 'ERA_STAKES_STDDEV_SAMPLE_DELEGATOR_ID_DESC',
  EraStakesStddevSampleEraIdxAsc = 'ERA_STAKES_STDDEV_SAMPLE_ERA_IDX_ASC',
  EraStakesStddevSampleEraIdxDesc = 'ERA_STAKES_STDDEV_SAMPLE_ERA_IDX_DESC',
  EraStakesStddevSampleEraIdAsc = 'ERA_STAKES_STDDEV_SAMPLE_ERA_ID_ASC',
  EraStakesStddevSampleEraIdDesc = 'ERA_STAKES_STDDEV_SAMPLE_ERA_ID_DESC',
  EraStakesStddevSampleIdAsc = 'ERA_STAKES_STDDEV_SAMPLE_ID_ASC',
  EraStakesStddevSampleIdDesc = 'ERA_STAKES_STDDEV_SAMPLE_ID_DESC',
  EraStakesStddevSampleIndexerIdAsc = 'ERA_STAKES_STDDEV_SAMPLE_INDEXER_ID_ASC',
  EraStakesStddevSampleIndexerIdDesc = 'ERA_STAKES_STDDEV_SAMPLE_INDEXER_ID_DESC',
  EraStakesStddevSampleStakeAsc = 'ERA_STAKES_STDDEV_SAMPLE_STAKE_ASC',
  EraStakesStddevSampleStakeDesc = 'ERA_STAKES_STDDEV_SAMPLE_STAKE_DESC',
  EraStakesSumBlockRangeAsc = 'ERA_STAKES_SUM_BLOCK_RANGE_ASC',
  EraStakesSumBlockRangeDesc = 'ERA_STAKES_SUM_BLOCK_RANGE_DESC',
  EraStakesSumDelegatorIdAsc = 'ERA_STAKES_SUM_DELEGATOR_ID_ASC',
  EraStakesSumDelegatorIdDesc = 'ERA_STAKES_SUM_DELEGATOR_ID_DESC',
  EraStakesSumEraIdxAsc = 'ERA_STAKES_SUM_ERA_IDX_ASC',
  EraStakesSumEraIdxDesc = 'ERA_STAKES_SUM_ERA_IDX_DESC',
  EraStakesSumEraIdAsc = 'ERA_STAKES_SUM_ERA_ID_ASC',
  EraStakesSumEraIdDesc = 'ERA_STAKES_SUM_ERA_ID_DESC',
  EraStakesSumIdAsc = 'ERA_STAKES_SUM_ID_ASC',
  EraStakesSumIdDesc = 'ERA_STAKES_SUM_ID_DESC',
  EraStakesSumIndexerIdAsc = 'ERA_STAKES_SUM_INDEXER_ID_ASC',
  EraStakesSumIndexerIdDesc = 'ERA_STAKES_SUM_INDEXER_ID_DESC',
  EraStakesSumStakeAsc = 'ERA_STAKES_SUM_STAKE_ASC',
  EraStakesSumStakeDesc = 'ERA_STAKES_SUM_STAKE_DESC',
  EraStakesVariancePopulationBlockRangeAsc = 'ERA_STAKES_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  EraStakesVariancePopulationBlockRangeDesc = 'ERA_STAKES_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  EraStakesVariancePopulationDelegatorIdAsc = 'ERA_STAKES_VARIANCE_POPULATION_DELEGATOR_ID_ASC',
  EraStakesVariancePopulationDelegatorIdDesc = 'ERA_STAKES_VARIANCE_POPULATION_DELEGATOR_ID_DESC',
  EraStakesVariancePopulationEraIdxAsc = 'ERA_STAKES_VARIANCE_POPULATION_ERA_IDX_ASC',
  EraStakesVariancePopulationEraIdxDesc = 'ERA_STAKES_VARIANCE_POPULATION_ERA_IDX_DESC',
  EraStakesVariancePopulationEraIdAsc = 'ERA_STAKES_VARIANCE_POPULATION_ERA_ID_ASC',
  EraStakesVariancePopulationEraIdDesc = 'ERA_STAKES_VARIANCE_POPULATION_ERA_ID_DESC',
  EraStakesVariancePopulationIdAsc = 'ERA_STAKES_VARIANCE_POPULATION_ID_ASC',
  EraStakesVariancePopulationIdDesc = 'ERA_STAKES_VARIANCE_POPULATION_ID_DESC',
  EraStakesVariancePopulationIndexerIdAsc = 'ERA_STAKES_VARIANCE_POPULATION_INDEXER_ID_ASC',
  EraStakesVariancePopulationIndexerIdDesc = 'ERA_STAKES_VARIANCE_POPULATION_INDEXER_ID_DESC',
  EraStakesVariancePopulationStakeAsc = 'ERA_STAKES_VARIANCE_POPULATION_STAKE_ASC',
  EraStakesVariancePopulationStakeDesc = 'ERA_STAKES_VARIANCE_POPULATION_STAKE_DESC',
  EraStakesVarianceSampleBlockRangeAsc = 'ERA_STAKES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  EraStakesVarianceSampleBlockRangeDesc = 'ERA_STAKES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  EraStakesVarianceSampleDelegatorIdAsc = 'ERA_STAKES_VARIANCE_SAMPLE_DELEGATOR_ID_ASC',
  EraStakesVarianceSampleDelegatorIdDesc = 'ERA_STAKES_VARIANCE_SAMPLE_DELEGATOR_ID_DESC',
  EraStakesVarianceSampleEraIdxAsc = 'ERA_STAKES_VARIANCE_SAMPLE_ERA_IDX_ASC',
  EraStakesVarianceSampleEraIdxDesc = 'ERA_STAKES_VARIANCE_SAMPLE_ERA_IDX_DESC',
  EraStakesVarianceSampleEraIdAsc = 'ERA_STAKES_VARIANCE_SAMPLE_ERA_ID_ASC',
  EraStakesVarianceSampleEraIdDesc = 'ERA_STAKES_VARIANCE_SAMPLE_ERA_ID_DESC',
  EraStakesVarianceSampleIdAsc = 'ERA_STAKES_VARIANCE_SAMPLE_ID_ASC',
  EraStakesVarianceSampleIdDesc = 'ERA_STAKES_VARIANCE_SAMPLE_ID_DESC',
  EraStakesVarianceSampleIndexerIdAsc = 'ERA_STAKES_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  EraStakesVarianceSampleIndexerIdDesc = 'ERA_STAKES_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  EraStakesVarianceSampleStakeAsc = 'ERA_STAKES_VARIANCE_SAMPLE_STAKE_ASC',
  EraStakesVarianceSampleStakeDesc = 'ERA_STAKES_VARIANCE_SAMPLE_STAKE_DESC',
  EraStakeUpdatesByLastUpdateEraIdAverageBlockRangeAsc = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_AVERAGE_BLOCK_RANGE_ASC',
  EraStakeUpdatesByLastUpdateEraIdAverageBlockRangeDesc = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_AVERAGE_BLOCK_RANGE_DESC',
  EraStakeUpdatesByLastUpdateEraIdAverageIdAsc = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_AVERAGE_ID_ASC',
  EraStakeUpdatesByLastUpdateEraIdAverageIdDesc = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_AVERAGE_ID_DESC',
  EraStakeUpdatesByLastUpdateEraIdAverageLastUpdateEraIdAsc = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_AVERAGE_LAST_UPDATE_ERA_ID_ASC',
  EraStakeUpdatesByLastUpdateEraIdAverageLastUpdateEraIdDesc = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_AVERAGE_LAST_UPDATE_ERA_ID_DESC',
  EraStakeUpdatesByLastUpdateEraIdCountAsc = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_COUNT_ASC',
  EraStakeUpdatesByLastUpdateEraIdCountDesc = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_COUNT_DESC',
  EraStakeUpdatesByLastUpdateEraIdDistinctCountBlockRangeAsc = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  EraStakeUpdatesByLastUpdateEraIdDistinctCountBlockRangeDesc = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  EraStakeUpdatesByLastUpdateEraIdDistinctCountIdAsc = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_DISTINCT_COUNT_ID_ASC',
  EraStakeUpdatesByLastUpdateEraIdDistinctCountIdDesc = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_DISTINCT_COUNT_ID_DESC',
  EraStakeUpdatesByLastUpdateEraIdDistinctCountLastUpdateEraIdAsc = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_DISTINCT_COUNT_LAST_UPDATE_ERA_ID_ASC',
  EraStakeUpdatesByLastUpdateEraIdDistinctCountLastUpdateEraIdDesc = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_DISTINCT_COUNT_LAST_UPDATE_ERA_ID_DESC',
  EraStakeUpdatesByLastUpdateEraIdMaxBlockRangeAsc = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_MAX_BLOCK_RANGE_ASC',
  EraStakeUpdatesByLastUpdateEraIdMaxBlockRangeDesc = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_MAX_BLOCK_RANGE_DESC',
  EraStakeUpdatesByLastUpdateEraIdMaxIdAsc = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_MAX_ID_ASC',
  EraStakeUpdatesByLastUpdateEraIdMaxIdDesc = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_MAX_ID_DESC',
  EraStakeUpdatesByLastUpdateEraIdMaxLastUpdateEraIdAsc = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_MAX_LAST_UPDATE_ERA_ID_ASC',
  EraStakeUpdatesByLastUpdateEraIdMaxLastUpdateEraIdDesc = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_MAX_LAST_UPDATE_ERA_ID_DESC',
  EraStakeUpdatesByLastUpdateEraIdMinBlockRangeAsc = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_MIN_BLOCK_RANGE_ASC',
  EraStakeUpdatesByLastUpdateEraIdMinBlockRangeDesc = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_MIN_BLOCK_RANGE_DESC',
  EraStakeUpdatesByLastUpdateEraIdMinIdAsc = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_MIN_ID_ASC',
  EraStakeUpdatesByLastUpdateEraIdMinIdDesc = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_MIN_ID_DESC',
  EraStakeUpdatesByLastUpdateEraIdMinLastUpdateEraIdAsc = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_MIN_LAST_UPDATE_ERA_ID_ASC',
  EraStakeUpdatesByLastUpdateEraIdMinLastUpdateEraIdDesc = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_MIN_LAST_UPDATE_ERA_ID_DESC',
  EraStakeUpdatesByLastUpdateEraIdStddevPopulationBlockRangeAsc = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  EraStakeUpdatesByLastUpdateEraIdStddevPopulationBlockRangeDesc = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  EraStakeUpdatesByLastUpdateEraIdStddevPopulationIdAsc = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_STDDEV_POPULATION_ID_ASC',
  EraStakeUpdatesByLastUpdateEraIdStddevPopulationIdDesc = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_STDDEV_POPULATION_ID_DESC',
  EraStakeUpdatesByLastUpdateEraIdStddevPopulationLastUpdateEraIdAsc = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_STDDEV_POPULATION_LAST_UPDATE_ERA_ID_ASC',
  EraStakeUpdatesByLastUpdateEraIdStddevPopulationLastUpdateEraIdDesc = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_STDDEV_POPULATION_LAST_UPDATE_ERA_ID_DESC',
  EraStakeUpdatesByLastUpdateEraIdStddevSampleBlockRangeAsc = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  EraStakeUpdatesByLastUpdateEraIdStddevSampleBlockRangeDesc = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  EraStakeUpdatesByLastUpdateEraIdStddevSampleIdAsc = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_STDDEV_SAMPLE_ID_ASC',
  EraStakeUpdatesByLastUpdateEraIdStddevSampleIdDesc = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_STDDEV_SAMPLE_ID_DESC',
  EraStakeUpdatesByLastUpdateEraIdStddevSampleLastUpdateEraIdAsc = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_STDDEV_SAMPLE_LAST_UPDATE_ERA_ID_ASC',
  EraStakeUpdatesByLastUpdateEraIdStddevSampleLastUpdateEraIdDesc = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_STDDEV_SAMPLE_LAST_UPDATE_ERA_ID_DESC',
  EraStakeUpdatesByLastUpdateEraIdSumBlockRangeAsc = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_SUM_BLOCK_RANGE_ASC',
  EraStakeUpdatesByLastUpdateEraIdSumBlockRangeDesc = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_SUM_BLOCK_RANGE_DESC',
  EraStakeUpdatesByLastUpdateEraIdSumIdAsc = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_SUM_ID_ASC',
  EraStakeUpdatesByLastUpdateEraIdSumIdDesc = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_SUM_ID_DESC',
  EraStakeUpdatesByLastUpdateEraIdSumLastUpdateEraIdAsc = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_SUM_LAST_UPDATE_ERA_ID_ASC',
  EraStakeUpdatesByLastUpdateEraIdSumLastUpdateEraIdDesc = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_SUM_LAST_UPDATE_ERA_ID_DESC',
  EraStakeUpdatesByLastUpdateEraIdVariancePopulationBlockRangeAsc = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  EraStakeUpdatesByLastUpdateEraIdVariancePopulationBlockRangeDesc = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  EraStakeUpdatesByLastUpdateEraIdVariancePopulationIdAsc = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_VARIANCE_POPULATION_ID_ASC',
  EraStakeUpdatesByLastUpdateEraIdVariancePopulationIdDesc = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_VARIANCE_POPULATION_ID_DESC',
  EraStakeUpdatesByLastUpdateEraIdVariancePopulationLastUpdateEraIdAsc = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_VARIANCE_POPULATION_LAST_UPDATE_ERA_ID_ASC',
  EraStakeUpdatesByLastUpdateEraIdVariancePopulationLastUpdateEraIdDesc = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_VARIANCE_POPULATION_LAST_UPDATE_ERA_ID_DESC',
  EraStakeUpdatesByLastUpdateEraIdVarianceSampleBlockRangeAsc = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  EraStakeUpdatesByLastUpdateEraIdVarianceSampleBlockRangeDesc = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  EraStakeUpdatesByLastUpdateEraIdVarianceSampleIdAsc = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_VARIANCE_SAMPLE_ID_ASC',
  EraStakeUpdatesByLastUpdateEraIdVarianceSampleIdDesc = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_VARIANCE_SAMPLE_ID_DESC',
  EraStakeUpdatesByLastUpdateEraIdVarianceSampleLastUpdateEraIdAsc = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_VARIANCE_SAMPLE_LAST_UPDATE_ERA_ID_ASC',
  EraStakeUpdatesByLastUpdateEraIdVarianceSampleLastUpdateEraIdDesc = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID_VARIANCE_SAMPLE_LAST_UPDATE_ERA_ID_DESC',
  EraStakeUpdatesByLastUpdateEraIdCountAsc = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID__COUNT_ASC',
  EraStakeUpdatesByLastUpdateEraIdCountDesc = 'ERA_STAKE_UPDATES_BY_LAST_UPDATE_ERA_ID__COUNT_DESC',
  ForceNextAsc = 'FORCE_NEXT_ASC',
  ForceNextDesc = 'FORCE_NEXT_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  IndexerCommissionRatesAverageBlockRangeAsc = 'INDEXER_COMMISSION_RATES_AVERAGE_BLOCK_RANGE_ASC',
  IndexerCommissionRatesAverageBlockRangeDesc = 'INDEXER_COMMISSION_RATES_AVERAGE_BLOCK_RANGE_DESC',
  IndexerCommissionRatesAverageCommissionRateAsc = 'INDEXER_COMMISSION_RATES_AVERAGE_COMMISSION_RATE_ASC',
  IndexerCommissionRatesAverageCommissionRateDesc = 'INDEXER_COMMISSION_RATES_AVERAGE_COMMISSION_RATE_DESC',
  IndexerCommissionRatesAverageEraIdxAsc = 'INDEXER_COMMISSION_RATES_AVERAGE_ERA_IDX_ASC',
  IndexerCommissionRatesAverageEraIdxDesc = 'INDEXER_COMMISSION_RATES_AVERAGE_ERA_IDX_DESC',
  IndexerCommissionRatesAverageEraIdAsc = 'INDEXER_COMMISSION_RATES_AVERAGE_ERA_ID_ASC',
  IndexerCommissionRatesAverageEraIdDesc = 'INDEXER_COMMISSION_RATES_AVERAGE_ERA_ID_DESC',
  IndexerCommissionRatesAverageIdAsc = 'INDEXER_COMMISSION_RATES_AVERAGE_ID_ASC',
  IndexerCommissionRatesAverageIdDesc = 'INDEXER_COMMISSION_RATES_AVERAGE_ID_DESC',
  IndexerCommissionRatesAverageIndexerIdAsc = 'INDEXER_COMMISSION_RATES_AVERAGE_INDEXER_ID_ASC',
  IndexerCommissionRatesAverageIndexerIdDesc = 'INDEXER_COMMISSION_RATES_AVERAGE_INDEXER_ID_DESC',
  IndexerCommissionRatesByEraIdCountAsc = 'INDEXER_COMMISSION_RATES_BY_ERA_ID__COUNT_ASC',
  IndexerCommissionRatesByEraIdCountDesc = 'INDEXER_COMMISSION_RATES_BY_ERA_ID__COUNT_DESC',
  IndexerCommissionRatesCountAsc = 'INDEXER_COMMISSION_RATES_COUNT_ASC',
  IndexerCommissionRatesCountDesc = 'INDEXER_COMMISSION_RATES_COUNT_DESC',
  IndexerCommissionRatesDistinctCountBlockRangeAsc = 'INDEXER_COMMISSION_RATES_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  IndexerCommissionRatesDistinctCountBlockRangeDesc = 'INDEXER_COMMISSION_RATES_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  IndexerCommissionRatesDistinctCountCommissionRateAsc = 'INDEXER_COMMISSION_RATES_DISTINCT_COUNT_COMMISSION_RATE_ASC',
  IndexerCommissionRatesDistinctCountCommissionRateDesc = 'INDEXER_COMMISSION_RATES_DISTINCT_COUNT_COMMISSION_RATE_DESC',
  IndexerCommissionRatesDistinctCountEraIdxAsc = 'INDEXER_COMMISSION_RATES_DISTINCT_COUNT_ERA_IDX_ASC',
  IndexerCommissionRatesDistinctCountEraIdxDesc = 'INDEXER_COMMISSION_RATES_DISTINCT_COUNT_ERA_IDX_DESC',
  IndexerCommissionRatesDistinctCountEraIdAsc = 'INDEXER_COMMISSION_RATES_DISTINCT_COUNT_ERA_ID_ASC',
  IndexerCommissionRatesDistinctCountEraIdDesc = 'INDEXER_COMMISSION_RATES_DISTINCT_COUNT_ERA_ID_DESC',
  IndexerCommissionRatesDistinctCountIdAsc = 'INDEXER_COMMISSION_RATES_DISTINCT_COUNT_ID_ASC',
  IndexerCommissionRatesDistinctCountIdDesc = 'INDEXER_COMMISSION_RATES_DISTINCT_COUNT_ID_DESC',
  IndexerCommissionRatesDistinctCountIndexerIdAsc = 'INDEXER_COMMISSION_RATES_DISTINCT_COUNT_INDEXER_ID_ASC',
  IndexerCommissionRatesDistinctCountIndexerIdDesc = 'INDEXER_COMMISSION_RATES_DISTINCT_COUNT_INDEXER_ID_DESC',
  IndexerCommissionRatesMaxBlockRangeAsc = 'INDEXER_COMMISSION_RATES_MAX_BLOCK_RANGE_ASC',
  IndexerCommissionRatesMaxBlockRangeDesc = 'INDEXER_COMMISSION_RATES_MAX_BLOCK_RANGE_DESC',
  IndexerCommissionRatesMaxCommissionRateAsc = 'INDEXER_COMMISSION_RATES_MAX_COMMISSION_RATE_ASC',
  IndexerCommissionRatesMaxCommissionRateDesc = 'INDEXER_COMMISSION_RATES_MAX_COMMISSION_RATE_DESC',
  IndexerCommissionRatesMaxEraIdxAsc = 'INDEXER_COMMISSION_RATES_MAX_ERA_IDX_ASC',
  IndexerCommissionRatesMaxEraIdxDesc = 'INDEXER_COMMISSION_RATES_MAX_ERA_IDX_DESC',
  IndexerCommissionRatesMaxEraIdAsc = 'INDEXER_COMMISSION_RATES_MAX_ERA_ID_ASC',
  IndexerCommissionRatesMaxEraIdDesc = 'INDEXER_COMMISSION_RATES_MAX_ERA_ID_DESC',
  IndexerCommissionRatesMaxIdAsc = 'INDEXER_COMMISSION_RATES_MAX_ID_ASC',
  IndexerCommissionRatesMaxIdDesc = 'INDEXER_COMMISSION_RATES_MAX_ID_DESC',
  IndexerCommissionRatesMaxIndexerIdAsc = 'INDEXER_COMMISSION_RATES_MAX_INDEXER_ID_ASC',
  IndexerCommissionRatesMaxIndexerIdDesc = 'INDEXER_COMMISSION_RATES_MAX_INDEXER_ID_DESC',
  IndexerCommissionRatesMinBlockRangeAsc = 'INDEXER_COMMISSION_RATES_MIN_BLOCK_RANGE_ASC',
  IndexerCommissionRatesMinBlockRangeDesc = 'INDEXER_COMMISSION_RATES_MIN_BLOCK_RANGE_DESC',
  IndexerCommissionRatesMinCommissionRateAsc = 'INDEXER_COMMISSION_RATES_MIN_COMMISSION_RATE_ASC',
  IndexerCommissionRatesMinCommissionRateDesc = 'INDEXER_COMMISSION_RATES_MIN_COMMISSION_RATE_DESC',
  IndexerCommissionRatesMinEraIdxAsc = 'INDEXER_COMMISSION_RATES_MIN_ERA_IDX_ASC',
  IndexerCommissionRatesMinEraIdxDesc = 'INDEXER_COMMISSION_RATES_MIN_ERA_IDX_DESC',
  IndexerCommissionRatesMinEraIdAsc = 'INDEXER_COMMISSION_RATES_MIN_ERA_ID_ASC',
  IndexerCommissionRatesMinEraIdDesc = 'INDEXER_COMMISSION_RATES_MIN_ERA_ID_DESC',
  IndexerCommissionRatesMinIdAsc = 'INDEXER_COMMISSION_RATES_MIN_ID_ASC',
  IndexerCommissionRatesMinIdDesc = 'INDEXER_COMMISSION_RATES_MIN_ID_DESC',
  IndexerCommissionRatesMinIndexerIdAsc = 'INDEXER_COMMISSION_RATES_MIN_INDEXER_ID_ASC',
  IndexerCommissionRatesMinIndexerIdDesc = 'INDEXER_COMMISSION_RATES_MIN_INDEXER_ID_DESC',
  IndexerCommissionRatesStddevPopulationBlockRangeAsc = 'INDEXER_COMMISSION_RATES_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  IndexerCommissionRatesStddevPopulationBlockRangeDesc = 'INDEXER_COMMISSION_RATES_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  IndexerCommissionRatesStddevPopulationCommissionRateAsc = 'INDEXER_COMMISSION_RATES_STDDEV_POPULATION_COMMISSION_RATE_ASC',
  IndexerCommissionRatesStddevPopulationCommissionRateDesc = 'INDEXER_COMMISSION_RATES_STDDEV_POPULATION_COMMISSION_RATE_DESC',
  IndexerCommissionRatesStddevPopulationEraIdxAsc = 'INDEXER_COMMISSION_RATES_STDDEV_POPULATION_ERA_IDX_ASC',
  IndexerCommissionRatesStddevPopulationEraIdxDesc = 'INDEXER_COMMISSION_RATES_STDDEV_POPULATION_ERA_IDX_DESC',
  IndexerCommissionRatesStddevPopulationEraIdAsc = 'INDEXER_COMMISSION_RATES_STDDEV_POPULATION_ERA_ID_ASC',
  IndexerCommissionRatesStddevPopulationEraIdDesc = 'INDEXER_COMMISSION_RATES_STDDEV_POPULATION_ERA_ID_DESC',
  IndexerCommissionRatesStddevPopulationIdAsc = 'INDEXER_COMMISSION_RATES_STDDEV_POPULATION_ID_ASC',
  IndexerCommissionRatesStddevPopulationIdDesc = 'INDEXER_COMMISSION_RATES_STDDEV_POPULATION_ID_DESC',
  IndexerCommissionRatesStddevPopulationIndexerIdAsc = 'INDEXER_COMMISSION_RATES_STDDEV_POPULATION_INDEXER_ID_ASC',
  IndexerCommissionRatesStddevPopulationIndexerIdDesc = 'INDEXER_COMMISSION_RATES_STDDEV_POPULATION_INDEXER_ID_DESC',
  IndexerCommissionRatesStddevSampleBlockRangeAsc = 'INDEXER_COMMISSION_RATES_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  IndexerCommissionRatesStddevSampleBlockRangeDesc = 'INDEXER_COMMISSION_RATES_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  IndexerCommissionRatesStddevSampleCommissionRateAsc = 'INDEXER_COMMISSION_RATES_STDDEV_SAMPLE_COMMISSION_RATE_ASC',
  IndexerCommissionRatesStddevSampleCommissionRateDesc = 'INDEXER_COMMISSION_RATES_STDDEV_SAMPLE_COMMISSION_RATE_DESC',
  IndexerCommissionRatesStddevSampleEraIdxAsc = 'INDEXER_COMMISSION_RATES_STDDEV_SAMPLE_ERA_IDX_ASC',
  IndexerCommissionRatesStddevSampleEraIdxDesc = 'INDEXER_COMMISSION_RATES_STDDEV_SAMPLE_ERA_IDX_DESC',
  IndexerCommissionRatesStddevSampleEraIdAsc = 'INDEXER_COMMISSION_RATES_STDDEV_SAMPLE_ERA_ID_ASC',
  IndexerCommissionRatesStddevSampleEraIdDesc = 'INDEXER_COMMISSION_RATES_STDDEV_SAMPLE_ERA_ID_DESC',
  IndexerCommissionRatesStddevSampleIdAsc = 'INDEXER_COMMISSION_RATES_STDDEV_SAMPLE_ID_ASC',
  IndexerCommissionRatesStddevSampleIdDesc = 'INDEXER_COMMISSION_RATES_STDDEV_SAMPLE_ID_DESC',
  IndexerCommissionRatesStddevSampleIndexerIdAsc = 'INDEXER_COMMISSION_RATES_STDDEV_SAMPLE_INDEXER_ID_ASC',
  IndexerCommissionRatesStddevSampleIndexerIdDesc = 'INDEXER_COMMISSION_RATES_STDDEV_SAMPLE_INDEXER_ID_DESC',
  IndexerCommissionRatesSumBlockRangeAsc = 'INDEXER_COMMISSION_RATES_SUM_BLOCK_RANGE_ASC',
  IndexerCommissionRatesSumBlockRangeDesc = 'INDEXER_COMMISSION_RATES_SUM_BLOCK_RANGE_DESC',
  IndexerCommissionRatesSumCommissionRateAsc = 'INDEXER_COMMISSION_RATES_SUM_COMMISSION_RATE_ASC',
  IndexerCommissionRatesSumCommissionRateDesc = 'INDEXER_COMMISSION_RATES_SUM_COMMISSION_RATE_DESC',
  IndexerCommissionRatesSumEraIdxAsc = 'INDEXER_COMMISSION_RATES_SUM_ERA_IDX_ASC',
  IndexerCommissionRatesSumEraIdxDesc = 'INDEXER_COMMISSION_RATES_SUM_ERA_IDX_DESC',
  IndexerCommissionRatesSumEraIdAsc = 'INDEXER_COMMISSION_RATES_SUM_ERA_ID_ASC',
  IndexerCommissionRatesSumEraIdDesc = 'INDEXER_COMMISSION_RATES_SUM_ERA_ID_DESC',
  IndexerCommissionRatesSumIdAsc = 'INDEXER_COMMISSION_RATES_SUM_ID_ASC',
  IndexerCommissionRatesSumIdDesc = 'INDEXER_COMMISSION_RATES_SUM_ID_DESC',
  IndexerCommissionRatesSumIndexerIdAsc = 'INDEXER_COMMISSION_RATES_SUM_INDEXER_ID_ASC',
  IndexerCommissionRatesSumIndexerIdDesc = 'INDEXER_COMMISSION_RATES_SUM_INDEXER_ID_DESC',
  IndexerCommissionRatesVariancePopulationBlockRangeAsc = 'INDEXER_COMMISSION_RATES_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  IndexerCommissionRatesVariancePopulationBlockRangeDesc = 'INDEXER_COMMISSION_RATES_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  IndexerCommissionRatesVariancePopulationCommissionRateAsc = 'INDEXER_COMMISSION_RATES_VARIANCE_POPULATION_COMMISSION_RATE_ASC',
  IndexerCommissionRatesVariancePopulationCommissionRateDesc = 'INDEXER_COMMISSION_RATES_VARIANCE_POPULATION_COMMISSION_RATE_DESC',
  IndexerCommissionRatesVariancePopulationEraIdxAsc = 'INDEXER_COMMISSION_RATES_VARIANCE_POPULATION_ERA_IDX_ASC',
  IndexerCommissionRatesVariancePopulationEraIdxDesc = 'INDEXER_COMMISSION_RATES_VARIANCE_POPULATION_ERA_IDX_DESC',
  IndexerCommissionRatesVariancePopulationEraIdAsc = 'INDEXER_COMMISSION_RATES_VARIANCE_POPULATION_ERA_ID_ASC',
  IndexerCommissionRatesVariancePopulationEraIdDesc = 'INDEXER_COMMISSION_RATES_VARIANCE_POPULATION_ERA_ID_DESC',
  IndexerCommissionRatesVariancePopulationIdAsc = 'INDEXER_COMMISSION_RATES_VARIANCE_POPULATION_ID_ASC',
  IndexerCommissionRatesVariancePopulationIdDesc = 'INDEXER_COMMISSION_RATES_VARIANCE_POPULATION_ID_DESC',
  IndexerCommissionRatesVariancePopulationIndexerIdAsc = 'INDEXER_COMMISSION_RATES_VARIANCE_POPULATION_INDEXER_ID_ASC',
  IndexerCommissionRatesVariancePopulationIndexerIdDesc = 'INDEXER_COMMISSION_RATES_VARIANCE_POPULATION_INDEXER_ID_DESC',
  IndexerCommissionRatesVarianceSampleBlockRangeAsc = 'INDEXER_COMMISSION_RATES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  IndexerCommissionRatesVarianceSampleBlockRangeDesc = 'INDEXER_COMMISSION_RATES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  IndexerCommissionRatesVarianceSampleCommissionRateAsc = 'INDEXER_COMMISSION_RATES_VARIANCE_SAMPLE_COMMISSION_RATE_ASC',
  IndexerCommissionRatesVarianceSampleCommissionRateDesc = 'INDEXER_COMMISSION_RATES_VARIANCE_SAMPLE_COMMISSION_RATE_DESC',
  IndexerCommissionRatesVarianceSampleEraIdxAsc = 'INDEXER_COMMISSION_RATES_VARIANCE_SAMPLE_ERA_IDX_ASC',
  IndexerCommissionRatesVarianceSampleEraIdxDesc = 'INDEXER_COMMISSION_RATES_VARIANCE_SAMPLE_ERA_IDX_DESC',
  IndexerCommissionRatesVarianceSampleEraIdAsc = 'INDEXER_COMMISSION_RATES_VARIANCE_SAMPLE_ERA_ID_ASC',
  IndexerCommissionRatesVarianceSampleEraIdDesc = 'INDEXER_COMMISSION_RATES_VARIANCE_SAMPLE_ERA_ID_DESC',
  IndexerCommissionRatesVarianceSampleIdAsc = 'INDEXER_COMMISSION_RATES_VARIANCE_SAMPLE_ID_ASC',
  IndexerCommissionRatesVarianceSampleIdDesc = 'INDEXER_COMMISSION_RATES_VARIANCE_SAMPLE_ID_DESC',
  IndexerCommissionRatesVarianceSampleIndexerIdAsc = 'INDEXER_COMMISSION_RATES_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  IndexerCommissionRatesVarianceSampleIndexerIdDesc = 'INDEXER_COMMISSION_RATES_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  IndexerStakesAverageBlockRangeAsc = 'INDEXER_STAKES_AVERAGE_BLOCK_RANGE_ASC',
  IndexerStakesAverageBlockRangeDesc = 'INDEXER_STAKES_AVERAGE_BLOCK_RANGE_DESC',
  IndexerStakesAverageDelegatorStakeAsc = 'INDEXER_STAKES_AVERAGE_DELEGATOR_STAKE_ASC',
  IndexerStakesAverageDelegatorStakeDesc = 'INDEXER_STAKES_AVERAGE_DELEGATOR_STAKE_DESC',
  IndexerStakesAverageEraIdxAsc = 'INDEXER_STAKES_AVERAGE_ERA_IDX_ASC',
  IndexerStakesAverageEraIdxDesc = 'INDEXER_STAKES_AVERAGE_ERA_IDX_DESC',
  IndexerStakesAverageEraIdAsc = 'INDEXER_STAKES_AVERAGE_ERA_ID_ASC',
  IndexerStakesAverageEraIdDesc = 'INDEXER_STAKES_AVERAGE_ERA_ID_DESC',
  IndexerStakesAverageIdAsc = 'INDEXER_STAKES_AVERAGE_ID_ASC',
  IndexerStakesAverageIdDesc = 'INDEXER_STAKES_AVERAGE_ID_DESC',
  IndexerStakesAverageIndexerIdAsc = 'INDEXER_STAKES_AVERAGE_INDEXER_ID_ASC',
  IndexerStakesAverageIndexerIdDesc = 'INDEXER_STAKES_AVERAGE_INDEXER_ID_DESC',
  IndexerStakesAverageIndexerStakeAsc = 'INDEXER_STAKES_AVERAGE_INDEXER_STAKE_ASC',
  IndexerStakesAverageIndexerStakeDesc = 'INDEXER_STAKES_AVERAGE_INDEXER_STAKE_DESC',
  IndexerStakesAverageTotalStakeAsc = 'INDEXER_STAKES_AVERAGE_TOTAL_STAKE_ASC',
  IndexerStakesAverageTotalStakeDesc = 'INDEXER_STAKES_AVERAGE_TOTAL_STAKE_DESC',
  IndexerStakesByEraIdCountAsc = 'INDEXER_STAKES_BY_ERA_ID__COUNT_ASC',
  IndexerStakesByEraIdCountDesc = 'INDEXER_STAKES_BY_ERA_ID__COUNT_DESC',
  IndexerStakesCountAsc = 'INDEXER_STAKES_COUNT_ASC',
  IndexerStakesCountDesc = 'INDEXER_STAKES_COUNT_DESC',
  IndexerStakesDistinctCountBlockRangeAsc = 'INDEXER_STAKES_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  IndexerStakesDistinctCountBlockRangeDesc = 'INDEXER_STAKES_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  IndexerStakesDistinctCountDelegatorStakeAsc = 'INDEXER_STAKES_DISTINCT_COUNT_DELEGATOR_STAKE_ASC',
  IndexerStakesDistinctCountDelegatorStakeDesc = 'INDEXER_STAKES_DISTINCT_COUNT_DELEGATOR_STAKE_DESC',
  IndexerStakesDistinctCountEraIdxAsc = 'INDEXER_STAKES_DISTINCT_COUNT_ERA_IDX_ASC',
  IndexerStakesDistinctCountEraIdxDesc = 'INDEXER_STAKES_DISTINCT_COUNT_ERA_IDX_DESC',
  IndexerStakesDistinctCountEraIdAsc = 'INDEXER_STAKES_DISTINCT_COUNT_ERA_ID_ASC',
  IndexerStakesDistinctCountEraIdDesc = 'INDEXER_STAKES_DISTINCT_COUNT_ERA_ID_DESC',
  IndexerStakesDistinctCountIdAsc = 'INDEXER_STAKES_DISTINCT_COUNT_ID_ASC',
  IndexerStakesDistinctCountIdDesc = 'INDEXER_STAKES_DISTINCT_COUNT_ID_DESC',
  IndexerStakesDistinctCountIndexerIdAsc = 'INDEXER_STAKES_DISTINCT_COUNT_INDEXER_ID_ASC',
  IndexerStakesDistinctCountIndexerIdDesc = 'INDEXER_STAKES_DISTINCT_COUNT_INDEXER_ID_DESC',
  IndexerStakesDistinctCountIndexerStakeAsc = 'INDEXER_STAKES_DISTINCT_COUNT_INDEXER_STAKE_ASC',
  IndexerStakesDistinctCountIndexerStakeDesc = 'INDEXER_STAKES_DISTINCT_COUNT_INDEXER_STAKE_DESC',
  IndexerStakesDistinctCountTotalStakeAsc = 'INDEXER_STAKES_DISTINCT_COUNT_TOTAL_STAKE_ASC',
  IndexerStakesDistinctCountTotalStakeDesc = 'INDEXER_STAKES_DISTINCT_COUNT_TOTAL_STAKE_DESC',
  IndexerStakesMaxBlockRangeAsc = 'INDEXER_STAKES_MAX_BLOCK_RANGE_ASC',
  IndexerStakesMaxBlockRangeDesc = 'INDEXER_STAKES_MAX_BLOCK_RANGE_DESC',
  IndexerStakesMaxDelegatorStakeAsc = 'INDEXER_STAKES_MAX_DELEGATOR_STAKE_ASC',
  IndexerStakesMaxDelegatorStakeDesc = 'INDEXER_STAKES_MAX_DELEGATOR_STAKE_DESC',
  IndexerStakesMaxEraIdxAsc = 'INDEXER_STAKES_MAX_ERA_IDX_ASC',
  IndexerStakesMaxEraIdxDesc = 'INDEXER_STAKES_MAX_ERA_IDX_DESC',
  IndexerStakesMaxEraIdAsc = 'INDEXER_STAKES_MAX_ERA_ID_ASC',
  IndexerStakesMaxEraIdDesc = 'INDEXER_STAKES_MAX_ERA_ID_DESC',
  IndexerStakesMaxIdAsc = 'INDEXER_STAKES_MAX_ID_ASC',
  IndexerStakesMaxIdDesc = 'INDEXER_STAKES_MAX_ID_DESC',
  IndexerStakesMaxIndexerIdAsc = 'INDEXER_STAKES_MAX_INDEXER_ID_ASC',
  IndexerStakesMaxIndexerIdDesc = 'INDEXER_STAKES_MAX_INDEXER_ID_DESC',
  IndexerStakesMaxIndexerStakeAsc = 'INDEXER_STAKES_MAX_INDEXER_STAKE_ASC',
  IndexerStakesMaxIndexerStakeDesc = 'INDEXER_STAKES_MAX_INDEXER_STAKE_DESC',
  IndexerStakesMaxTotalStakeAsc = 'INDEXER_STAKES_MAX_TOTAL_STAKE_ASC',
  IndexerStakesMaxTotalStakeDesc = 'INDEXER_STAKES_MAX_TOTAL_STAKE_DESC',
  IndexerStakesMinBlockRangeAsc = 'INDEXER_STAKES_MIN_BLOCK_RANGE_ASC',
  IndexerStakesMinBlockRangeDesc = 'INDEXER_STAKES_MIN_BLOCK_RANGE_DESC',
  IndexerStakesMinDelegatorStakeAsc = 'INDEXER_STAKES_MIN_DELEGATOR_STAKE_ASC',
  IndexerStakesMinDelegatorStakeDesc = 'INDEXER_STAKES_MIN_DELEGATOR_STAKE_DESC',
  IndexerStakesMinEraIdxAsc = 'INDEXER_STAKES_MIN_ERA_IDX_ASC',
  IndexerStakesMinEraIdxDesc = 'INDEXER_STAKES_MIN_ERA_IDX_DESC',
  IndexerStakesMinEraIdAsc = 'INDEXER_STAKES_MIN_ERA_ID_ASC',
  IndexerStakesMinEraIdDesc = 'INDEXER_STAKES_MIN_ERA_ID_DESC',
  IndexerStakesMinIdAsc = 'INDEXER_STAKES_MIN_ID_ASC',
  IndexerStakesMinIdDesc = 'INDEXER_STAKES_MIN_ID_DESC',
  IndexerStakesMinIndexerIdAsc = 'INDEXER_STAKES_MIN_INDEXER_ID_ASC',
  IndexerStakesMinIndexerIdDesc = 'INDEXER_STAKES_MIN_INDEXER_ID_DESC',
  IndexerStakesMinIndexerStakeAsc = 'INDEXER_STAKES_MIN_INDEXER_STAKE_ASC',
  IndexerStakesMinIndexerStakeDesc = 'INDEXER_STAKES_MIN_INDEXER_STAKE_DESC',
  IndexerStakesMinTotalStakeAsc = 'INDEXER_STAKES_MIN_TOTAL_STAKE_ASC',
  IndexerStakesMinTotalStakeDesc = 'INDEXER_STAKES_MIN_TOTAL_STAKE_DESC',
  IndexerStakesStddevPopulationBlockRangeAsc = 'INDEXER_STAKES_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  IndexerStakesStddevPopulationBlockRangeDesc = 'INDEXER_STAKES_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  IndexerStakesStddevPopulationDelegatorStakeAsc = 'INDEXER_STAKES_STDDEV_POPULATION_DELEGATOR_STAKE_ASC',
  IndexerStakesStddevPopulationDelegatorStakeDesc = 'INDEXER_STAKES_STDDEV_POPULATION_DELEGATOR_STAKE_DESC',
  IndexerStakesStddevPopulationEraIdxAsc = 'INDEXER_STAKES_STDDEV_POPULATION_ERA_IDX_ASC',
  IndexerStakesStddevPopulationEraIdxDesc = 'INDEXER_STAKES_STDDEV_POPULATION_ERA_IDX_DESC',
  IndexerStakesStddevPopulationEraIdAsc = 'INDEXER_STAKES_STDDEV_POPULATION_ERA_ID_ASC',
  IndexerStakesStddevPopulationEraIdDesc = 'INDEXER_STAKES_STDDEV_POPULATION_ERA_ID_DESC',
  IndexerStakesStddevPopulationIdAsc = 'INDEXER_STAKES_STDDEV_POPULATION_ID_ASC',
  IndexerStakesStddevPopulationIdDesc = 'INDEXER_STAKES_STDDEV_POPULATION_ID_DESC',
  IndexerStakesStddevPopulationIndexerIdAsc = 'INDEXER_STAKES_STDDEV_POPULATION_INDEXER_ID_ASC',
  IndexerStakesStddevPopulationIndexerIdDesc = 'INDEXER_STAKES_STDDEV_POPULATION_INDEXER_ID_DESC',
  IndexerStakesStddevPopulationIndexerStakeAsc = 'INDEXER_STAKES_STDDEV_POPULATION_INDEXER_STAKE_ASC',
  IndexerStakesStddevPopulationIndexerStakeDesc = 'INDEXER_STAKES_STDDEV_POPULATION_INDEXER_STAKE_DESC',
  IndexerStakesStddevPopulationTotalStakeAsc = 'INDEXER_STAKES_STDDEV_POPULATION_TOTAL_STAKE_ASC',
  IndexerStakesStddevPopulationTotalStakeDesc = 'INDEXER_STAKES_STDDEV_POPULATION_TOTAL_STAKE_DESC',
  IndexerStakesStddevSampleBlockRangeAsc = 'INDEXER_STAKES_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  IndexerStakesStddevSampleBlockRangeDesc = 'INDEXER_STAKES_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  IndexerStakesStddevSampleDelegatorStakeAsc = 'INDEXER_STAKES_STDDEV_SAMPLE_DELEGATOR_STAKE_ASC',
  IndexerStakesStddevSampleDelegatorStakeDesc = 'INDEXER_STAKES_STDDEV_SAMPLE_DELEGATOR_STAKE_DESC',
  IndexerStakesStddevSampleEraIdxAsc = 'INDEXER_STAKES_STDDEV_SAMPLE_ERA_IDX_ASC',
  IndexerStakesStddevSampleEraIdxDesc = 'INDEXER_STAKES_STDDEV_SAMPLE_ERA_IDX_DESC',
  IndexerStakesStddevSampleEraIdAsc = 'INDEXER_STAKES_STDDEV_SAMPLE_ERA_ID_ASC',
  IndexerStakesStddevSampleEraIdDesc = 'INDEXER_STAKES_STDDEV_SAMPLE_ERA_ID_DESC',
  IndexerStakesStddevSampleIdAsc = 'INDEXER_STAKES_STDDEV_SAMPLE_ID_ASC',
  IndexerStakesStddevSampleIdDesc = 'INDEXER_STAKES_STDDEV_SAMPLE_ID_DESC',
  IndexerStakesStddevSampleIndexerIdAsc = 'INDEXER_STAKES_STDDEV_SAMPLE_INDEXER_ID_ASC',
  IndexerStakesStddevSampleIndexerIdDesc = 'INDEXER_STAKES_STDDEV_SAMPLE_INDEXER_ID_DESC',
  IndexerStakesStddevSampleIndexerStakeAsc = 'INDEXER_STAKES_STDDEV_SAMPLE_INDEXER_STAKE_ASC',
  IndexerStakesStddevSampleIndexerStakeDesc = 'INDEXER_STAKES_STDDEV_SAMPLE_INDEXER_STAKE_DESC',
  IndexerStakesStddevSampleTotalStakeAsc = 'INDEXER_STAKES_STDDEV_SAMPLE_TOTAL_STAKE_ASC',
  IndexerStakesStddevSampleTotalStakeDesc = 'INDEXER_STAKES_STDDEV_SAMPLE_TOTAL_STAKE_DESC',
  IndexerStakesSumBlockRangeAsc = 'INDEXER_STAKES_SUM_BLOCK_RANGE_ASC',
  IndexerStakesSumBlockRangeDesc = 'INDEXER_STAKES_SUM_BLOCK_RANGE_DESC',
  IndexerStakesSumDelegatorStakeAsc = 'INDEXER_STAKES_SUM_DELEGATOR_STAKE_ASC',
  IndexerStakesSumDelegatorStakeDesc = 'INDEXER_STAKES_SUM_DELEGATOR_STAKE_DESC',
  IndexerStakesSumEraIdxAsc = 'INDEXER_STAKES_SUM_ERA_IDX_ASC',
  IndexerStakesSumEraIdxDesc = 'INDEXER_STAKES_SUM_ERA_IDX_DESC',
  IndexerStakesSumEraIdAsc = 'INDEXER_STAKES_SUM_ERA_ID_ASC',
  IndexerStakesSumEraIdDesc = 'INDEXER_STAKES_SUM_ERA_ID_DESC',
  IndexerStakesSumIdAsc = 'INDEXER_STAKES_SUM_ID_ASC',
  IndexerStakesSumIdDesc = 'INDEXER_STAKES_SUM_ID_DESC',
  IndexerStakesSumIndexerIdAsc = 'INDEXER_STAKES_SUM_INDEXER_ID_ASC',
  IndexerStakesSumIndexerIdDesc = 'INDEXER_STAKES_SUM_INDEXER_ID_DESC',
  IndexerStakesSumIndexerStakeAsc = 'INDEXER_STAKES_SUM_INDEXER_STAKE_ASC',
  IndexerStakesSumIndexerStakeDesc = 'INDEXER_STAKES_SUM_INDEXER_STAKE_DESC',
  IndexerStakesSumTotalStakeAsc = 'INDEXER_STAKES_SUM_TOTAL_STAKE_ASC',
  IndexerStakesSumTotalStakeDesc = 'INDEXER_STAKES_SUM_TOTAL_STAKE_DESC',
  IndexerStakesVariancePopulationBlockRangeAsc = 'INDEXER_STAKES_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  IndexerStakesVariancePopulationBlockRangeDesc = 'INDEXER_STAKES_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  IndexerStakesVariancePopulationDelegatorStakeAsc = 'INDEXER_STAKES_VARIANCE_POPULATION_DELEGATOR_STAKE_ASC',
  IndexerStakesVariancePopulationDelegatorStakeDesc = 'INDEXER_STAKES_VARIANCE_POPULATION_DELEGATOR_STAKE_DESC',
  IndexerStakesVariancePopulationEraIdxAsc = 'INDEXER_STAKES_VARIANCE_POPULATION_ERA_IDX_ASC',
  IndexerStakesVariancePopulationEraIdxDesc = 'INDEXER_STAKES_VARIANCE_POPULATION_ERA_IDX_DESC',
  IndexerStakesVariancePopulationEraIdAsc = 'INDEXER_STAKES_VARIANCE_POPULATION_ERA_ID_ASC',
  IndexerStakesVariancePopulationEraIdDesc = 'INDEXER_STAKES_VARIANCE_POPULATION_ERA_ID_DESC',
  IndexerStakesVariancePopulationIdAsc = 'INDEXER_STAKES_VARIANCE_POPULATION_ID_ASC',
  IndexerStakesVariancePopulationIdDesc = 'INDEXER_STAKES_VARIANCE_POPULATION_ID_DESC',
  IndexerStakesVariancePopulationIndexerIdAsc = 'INDEXER_STAKES_VARIANCE_POPULATION_INDEXER_ID_ASC',
  IndexerStakesVariancePopulationIndexerIdDesc = 'INDEXER_STAKES_VARIANCE_POPULATION_INDEXER_ID_DESC',
  IndexerStakesVariancePopulationIndexerStakeAsc = 'INDEXER_STAKES_VARIANCE_POPULATION_INDEXER_STAKE_ASC',
  IndexerStakesVariancePopulationIndexerStakeDesc = 'INDEXER_STAKES_VARIANCE_POPULATION_INDEXER_STAKE_DESC',
  IndexerStakesVariancePopulationTotalStakeAsc = 'INDEXER_STAKES_VARIANCE_POPULATION_TOTAL_STAKE_ASC',
  IndexerStakesVariancePopulationTotalStakeDesc = 'INDEXER_STAKES_VARIANCE_POPULATION_TOTAL_STAKE_DESC',
  IndexerStakesVarianceSampleBlockRangeAsc = 'INDEXER_STAKES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  IndexerStakesVarianceSampleBlockRangeDesc = 'INDEXER_STAKES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  IndexerStakesVarianceSampleDelegatorStakeAsc = 'INDEXER_STAKES_VARIANCE_SAMPLE_DELEGATOR_STAKE_ASC',
  IndexerStakesVarianceSampleDelegatorStakeDesc = 'INDEXER_STAKES_VARIANCE_SAMPLE_DELEGATOR_STAKE_DESC',
  IndexerStakesVarianceSampleEraIdxAsc = 'INDEXER_STAKES_VARIANCE_SAMPLE_ERA_IDX_ASC',
  IndexerStakesVarianceSampleEraIdxDesc = 'INDEXER_STAKES_VARIANCE_SAMPLE_ERA_IDX_DESC',
  IndexerStakesVarianceSampleEraIdAsc = 'INDEXER_STAKES_VARIANCE_SAMPLE_ERA_ID_ASC',
  IndexerStakesVarianceSampleEraIdDesc = 'INDEXER_STAKES_VARIANCE_SAMPLE_ERA_ID_DESC',
  IndexerStakesVarianceSampleIdAsc = 'INDEXER_STAKES_VARIANCE_SAMPLE_ID_ASC',
  IndexerStakesVarianceSampleIdDesc = 'INDEXER_STAKES_VARIANCE_SAMPLE_ID_DESC',
  IndexerStakesVarianceSampleIndexerIdAsc = 'INDEXER_STAKES_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  IndexerStakesVarianceSampleIndexerIdDesc = 'INDEXER_STAKES_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  IndexerStakesVarianceSampleIndexerStakeAsc = 'INDEXER_STAKES_VARIANCE_SAMPLE_INDEXER_STAKE_ASC',
  IndexerStakesVarianceSampleIndexerStakeDesc = 'INDEXER_STAKES_VARIANCE_SAMPLE_INDEXER_STAKE_DESC',
  IndexerStakesVarianceSampleTotalStakeAsc = 'INDEXER_STAKES_VARIANCE_SAMPLE_TOTAL_STAKE_ASC',
  IndexerStakesVarianceSampleTotalStakeDesc = 'INDEXER_STAKES_VARIANCE_SAMPLE_TOTAL_STAKE_DESC',
  IndexerStakeSummariesAverageBlockRangeAsc = 'INDEXER_STAKE_SUMMARIES_AVERAGE_BLOCK_RANGE_ASC',
  IndexerStakeSummariesAverageBlockRangeDesc = 'INDEXER_STAKE_SUMMARIES_AVERAGE_BLOCK_RANGE_DESC',
  IndexerStakeSummariesAverageDelegatorStakeAsc = 'INDEXER_STAKE_SUMMARIES_AVERAGE_DELEGATOR_STAKE_ASC',
  IndexerStakeSummariesAverageDelegatorStakeDesc = 'INDEXER_STAKE_SUMMARIES_AVERAGE_DELEGATOR_STAKE_DESC',
  IndexerStakeSummariesAverageEraIdxAsc = 'INDEXER_STAKE_SUMMARIES_AVERAGE_ERA_IDX_ASC',
  IndexerStakeSummariesAverageEraIdxDesc = 'INDEXER_STAKE_SUMMARIES_AVERAGE_ERA_IDX_DESC',
  IndexerStakeSummariesAverageEraIdAsc = 'INDEXER_STAKE_SUMMARIES_AVERAGE_ERA_ID_ASC',
  IndexerStakeSummariesAverageEraIdDesc = 'INDEXER_STAKE_SUMMARIES_AVERAGE_ERA_ID_DESC',
  IndexerStakeSummariesAverageIdAsc = 'INDEXER_STAKE_SUMMARIES_AVERAGE_ID_ASC',
  IndexerStakeSummariesAverageIdDesc = 'INDEXER_STAKE_SUMMARIES_AVERAGE_ID_DESC',
  IndexerStakeSummariesAverageIndexerStakeAsc = 'INDEXER_STAKE_SUMMARIES_AVERAGE_INDEXER_STAKE_ASC',
  IndexerStakeSummariesAverageIndexerStakeDesc = 'INDEXER_STAKE_SUMMARIES_AVERAGE_INDEXER_STAKE_DESC',
  IndexerStakeSummariesAverageNextDelegatorStakeAsc = 'INDEXER_STAKE_SUMMARIES_AVERAGE_NEXT_DELEGATOR_STAKE_ASC',
  IndexerStakeSummariesAverageNextDelegatorStakeDesc = 'INDEXER_STAKE_SUMMARIES_AVERAGE_NEXT_DELEGATOR_STAKE_DESC',
  IndexerStakeSummariesAverageNextIndexerStakeAsc = 'INDEXER_STAKE_SUMMARIES_AVERAGE_NEXT_INDEXER_STAKE_ASC',
  IndexerStakeSummariesAverageNextIndexerStakeDesc = 'INDEXER_STAKE_SUMMARIES_AVERAGE_NEXT_INDEXER_STAKE_DESC',
  IndexerStakeSummariesAverageNextTotalStakeAsc = 'INDEXER_STAKE_SUMMARIES_AVERAGE_NEXT_TOTAL_STAKE_ASC',
  IndexerStakeSummariesAverageNextTotalStakeDesc = 'INDEXER_STAKE_SUMMARIES_AVERAGE_NEXT_TOTAL_STAKE_DESC',
  IndexerStakeSummariesAverageTotalStakeAsc = 'INDEXER_STAKE_SUMMARIES_AVERAGE_TOTAL_STAKE_ASC',
  IndexerStakeSummariesAverageTotalStakeDesc = 'INDEXER_STAKE_SUMMARIES_AVERAGE_TOTAL_STAKE_DESC',
  IndexerStakeSummariesByEraIdCountAsc = 'INDEXER_STAKE_SUMMARIES_BY_ERA_ID__COUNT_ASC',
  IndexerStakeSummariesByEraIdCountDesc = 'INDEXER_STAKE_SUMMARIES_BY_ERA_ID__COUNT_DESC',
  IndexerStakeSummariesCountAsc = 'INDEXER_STAKE_SUMMARIES_COUNT_ASC',
  IndexerStakeSummariesCountDesc = 'INDEXER_STAKE_SUMMARIES_COUNT_DESC',
  IndexerStakeSummariesDistinctCountBlockRangeAsc = 'INDEXER_STAKE_SUMMARIES_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  IndexerStakeSummariesDistinctCountBlockRangeDesc = 'INDEXER_STAKE_SUMMARIES_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  IndexerStakeSummariesDistinctCountDelegatorStakeAsc = 'INDEXER_STAKE_SUMMARIES_DISTINCT_COUNT_DELEGATOR_STAKE_ASC',
  IndexerStakeSummariesDistinctCountDelegatorStakeDesc = 'INDEXER_STAKE_SUMMARIES_DISTINCT_COUNT_DELEGATOR_STAKE_DESC',
  IndexerStakeSummariesDistinctCountEraIdxAsc = 'INDEXER_STAKE_SUMMARIES_DISTINCT_COUNT_ERA_IDX_ASC',
  IndexerStakeSummariesDistinctCountEraIdxDesc = 'INDEXER_STAKE_SUMMARIES_DISTINCT_COUNT_ERA_IDX_DESC',
  IndexerStakeSummariesDistinctCountEraIdAsc = 'INDEXER_STAKE_SUMMARIES_DISTINCT_COUNT_ERA_ID_ASC',
  IndexerStakeSummariesDistinctCountEraIdDesc = 'INDEXER_STAKE_SUMMARIES_DISTINCT_COUNT_ERA_ID_DESC',
  IndexerStakeSummariesDistinctCountIdAsc = 'INDEXER_STAKE_SUMMARIES_DISTINCT_COUNT_ID_ASC',
  IndexerStakeSummariesDistinctCountIdDesc = 'INDEXER_STAKE_SUMMARIES_DISTINCT_COUNT_ID_DESC',
  IndexerStakeSummariesDistinctCountIndexerStakeAsc = 'INDEXER_STAKE_SUMMARIES_DISTINCT_COUNT_INDEXER_STAKE_ASC',
  IndexerStakeSummariesDistinctCountIndexerStakeDesc = 'INDEXER_STAKE_SUMMARIES_DISTINCT_COUNT_INDEXER_STAKE_DESC',
  IndexerStakeSummariesDistinctCountNextDelegatorStakeAsc = 'INDEXER_STAKE_SUMMARIES_DISTINCT_COUNT_NEXT_DELEGATOR_STAKE_ASC',
  IndexerStakeSummariesDistinctCountNextDelegatorStakeDesc = 'INDEXER_STAKE_SUMMARIES_DISTINCT_COUNT_NEXT_DELEGATOR_STAKE_DESC',
  IndexerStakeSummariesDistinctCountNextIndexerStakeAsc = 'INDEXER_STAKE_SUMMARIES_DISTINCT_COUNT_NEXT_INDEXER_STAKE_ASC',
  IndexerStakeSummariesDistinctCountNextIndexerStakeDesc = 'INDEXER_STAKE_SUMMARIES_DISTINCT_COUNT_NEXT_INDEXER_STAKE_DESC',
  IndexerStakeSummariesDistinctCountNextTotalStakeAsc = 'INDEXER_STAKE_SUMMARIES_DISTINCT_COUNT_NEXT_TOTAL_STAKE_ASC',
  IndexerStakeSummariesDistinctCountNextTotalStakeDesc = 'INDEXER_STAKE_SUMMARIES_DISTINCT_COUNT_NEXT_TOTAL_STAKE_DESC',
  IndexerStakeSummariesDistinctCountTotalStakeAsc = 'INDEXER_STAKE_SUMMARIES_DISTINCT_COUNT_TOTAL_STAKE_ASC',
  IndexerStakeSummariesDistinctCountTotalStakeDesc = 'INDEXER_STAKE_SUMMARIES_DISTINCT_COUNT_TOTAL_STAKE_DESC',
  IndexerStakeSummariesMaxBlockRangeAsc = 'INDEXER_STAKE_SUMMARIES_MAX_BLOCK_RANGE_ASC',
  IndexerStakeSummariesMaxBlockRangeDesc = 'INDEXER_STAKE_SUMMARIES_MAX_BLOCK_RANGE_DESC',
  IndexerStakeSummariesMaxDelegatorStakeAsc = 'INDEXER_STAKE_SUMMARIES_MAX_DELEGATOR_STAKE_ASC',
  IndexerStakeSummariesMaxDelegatorStakeDesc = 'INDEXER_STAKE_SUMMARIES_MAX_DELEGATOR_STAKE_DESC',
  IndexerStakeSummariesMaxEraIdxAsc = 'INDEXER_STAKE_SUMMARIES_MAX_ERA_IDX_ASC',
  IndexerStakeSummariesMaxEraIdxDesc = 'INDEXER_STAKE_SUMMARIES_MAX_ERA_IDX_DESC',
  IndexerStakeSummariesMaxEraIdAsc = 'INDEXER_STAKE_SUMMARIES_MAX_ERA_ID_ASC',
  IndexerStakeSummariesMaxEraIdDesc = 'INDEXER_STAKE_SUMMARIES_MAX_ERA_ID_DESC',
  IndexerStakeSummariesMaxIdAsc = 'INDEXER_STAKE_SUMMARIES_MAX_ID_ASC',
  IndexerStakeSummariesMaxIdDesc = 'INDEXER_STAKE_SUMMARIES_MAX_ID_DESC',
  IndexerStakeSummariesMaxIndexerStakeAsc = 'INDEXER_STAKE_SUMMARIES_MAX_INDEXER_STAKE_ASC',
  IndexerStakeSummariesMaxIndexerStakeDesc = 'INDEXER_STAKE_SUMMARIES_MAX_INDEXER_STAKE_DESC',
  IndexerStakeSummariesMaxNextDelegatorStakeAsc = 'INDEXER_STAKE_SUMMARIES_MAX_NEXT_DELEGATOR_STAKE_ASC',
  IndexerStakeSummariesMaxNextDelegatorStakeDesc = 'INDEXER_STAKE_SUMMARIES_MAX_NEXT_DELEGATOR_STAKE_DESC',
  IndexerStakeSummariesMaxNextIndexerStakeAsc = 'INDEXER_STAKE_SUMMARIES_MAX_NEXT_INDEXER_STAKE_ASC',
  IndexerStakeSummariesMaxNextIndexerStakeDesc = 'INDEXER_STAKE_SUMMARIES_MAX_NEXT_INDEXER_STAKE_DESC',
  IndexerStakeSummariesMaxNextTotalStakeAsc = 'INDEXER_STAKE_SUMMARIES_MAX_NEXT_TOTAL_STAKE_ASC',
  IndexerStakeSummariesMaxNextTotalStakeDesc = 'INDEXER_STAKE_SUMMARIES_MAX_NEXT_TOTAL_STAKE_DESC',
  IndexerStakeSummariesMaxTotalStakeAsc = 'INDEXER_STAKE_SUMMARIES_MAX_TOTAL_STAKE_ASC',
  IndexerStakeSummariesMaxTotalStakeDesc = 'INDEXER_STAKE_SUMMARIES_MAX_TOTAL_STAKE_DESC',
  IndexerStakeSummariesMinBlockRangeAsc = 'INDEXER_STAKE_SUMMARIES_MIN_BLOCK_RANGE_ASC',
  IndexerStakeSummariesMinBlockRangeDesc = 'INDEXER_STAKE_SUMMARIES_MIN_BLOCK_RANGE_DESC',
  IndexerStakeSummariesMinDelegatorStakeAsc = 'INDEXER_STAKE_SUMMARIES_MIN_DELEGATOR_STAKE_ASC',
  IndexerStakeSummariesMinDelegatorStakeDesc = 'INDEXER_STAKE_SUMMARIES_MIN_DELEGATOR_STAKE_DESC',
  IndexerStakeSummariesMinEraIdxAsc = 'INDEXER_STAKE_SUMMARIES_MIN_ERA_IDX_ASC',
  IndexerStakeSummariesMinEraIdxDesc = 'INDEXER_STAKE_SUMMARIES_MIN_ERA_IDX_DESC',
  IndexerStakeSummariesMinEraIdAsc = 'INDEXER_STAKE_SUMMARIES_MIN_ERA_ID_ASC',
  IndexerStakeSummariesMinEraIdDesc = 'INDEXER_STAKE_SUMMARIES_MIN_ERA_ID_DESC',
  IndexerStakeSummariesMinIdAsc = 'INDEXER_STAKE_SUMMARIES_MIN_ID_ASC',
  IndexerStakeSummariesMinIdDesc = 'INDEXER_STAKE_SUMMARIES_MIN_ID_DESC',
  IndexerStakeSummariesMinIndexerStakeAsc = 'INDEXER_STAKE_SUMMARIES_MIN_INDEXER_STAKE_ASC',
  IndexerStakeSummariesMinIndexerStakeDesc = 'INDEXER_STAKE_SUMMARIES_MIN_INDEXER_STAKE_DESC',
  IndexerStakeSummariesMinNextDelegatorStakeAsc = 'INDEXER_STAKE_SUMMARIES_MIN_NEXT_DELEGATOR_STAKE_ASC',
  IndexerStakeSummariesMinNextDelegatorStakeDesc = 'INDEXER_STAKE_SUMMARIES_MIN_NEXT_DELEGATOR_STAKE_DESC',
  IndexerStakeSummariesMinNextIndexerStakeAsc = 'INDEXER_STAKE_SUMMARIES_MIN_NEXT_INDEXER_STAKE_ASC',
  IndexerStakeSummariesMinNextIndexerStakeDesc = 'INDEXER_STAKE_SUMMARIES_MIN_NEXT_INDEXER_STAKE_DESC',
  IndexerStakeSummariesMinNextTotalStakeAsc = 'INDEXER_STAKE_SUMMARIES_MIN_NEXT_TOTAL_STAKE_ASC',
  IndexerStakeSummariesMinNextTotalStakeDesc = 'INDEXER_STAKE_SUMMARIES_MIN_NEXT_TOTAL_STAKE_DESC',
  IndexerStakeSummariesMinTotalStakeAsc = 'INDEXER_STAKE_SUMMARIES_MIN_TOTAL_STAKE_ASC',
  IndexerStakeSummariesMinTotalStakeDesc = 'INDEXER_STAKE_SUMMARIES_MIN_TOTAL_STAKE_DESC',
  IndexerStakeSummariesStddevPopulationBlockRangeAsc = 'INDEXER_STAKE_SUMMARIES_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  IndexerStakeSummariesStddevPopulationBlockRangeDesc = 'INDEXER_STAKE_SUMMARIES_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  IndexerStakeSummariesStddevPopulationDelegatorStakeAsc = 'INDEXER_STAKE_SUMMARIES_STDDEV_POPULATION_DELEGATOR_STAKE_ASC',
  IndexerStakeSummariesStddevPopulationDelegatorStakeDesc = 'INDEXER_STAKE_SUMMARIES_STDDEV_POPULATION_DELEGATOR_STAKE_DESC',
  IndexerStakeSummariesStddevPopulationEraIdxAsc = 'INDEXER_STAKE_SUMMARIES_STDDEV_POPULATION_ERA_IDX_ASC',
  IndexerStakeSummariesStddevPopulationEraIdxDesc = 'INDEXER_STAKE_SUMMARIES_STDDEV_POPULATION_ERA_IDX_DESC',
  IndexerStakeSummariesStddevPopulationEraIdAsc = 'INDEXER_STAKE_SUMMARIES_STDDEV_POPULATION_ERA_ID_ASC',
  IndexerStakeSummariesStddevPopulationEraIdDesc = 'INDEXER_STAKE_SUMMARIES_STDDEV_POPULATION_ERA_ID_DESC',
  IndexerStakeSummariesStddevPopulationIdAsc = 'INDEXER_STAKE_SUMMARIES_STDDEV_POPULATION_ID_ASC',
  IndexerStakeSummariesStddevPopulationIdDesc = 'INDEXER_STAKE_SUMMARIES_STDDEV_POPULATION_ID_DESC',
  IndexerStakeSummariesStddevPopulationIndexerStakeAsc = 'INDEXER_STAKE_SUMMARIES_STDDEV_POPULATION_INDEXER_STAKE_ASC',
  IndexerStakeSummariesStddevPopulationIndexerStakeDesc = 'INDEXER_STAKE_SUMMARIES_STDDEV_POPULATION_INDEXER_STAKE_DESC',
  IndexerStakeSummariesStddevPopulationNextDelegatorStakeAsc = 'INDEXER_STAKE_SUMMARIES_STDDEV_POPULATION_NEXT_DELEGATOR_STAKE_ASC',
  IndexerStakeSummariesStddevPopulationNextDelegatorStakeDesc = 'INDEXER_STAKE_SUMMARIES_STDDEV_POPULATION_NEXT_DELEGATOR_STAKE_DESC',
  IndexerStakeSummariesStddevPopulationNextIndexerStakeAsc = 'INDEXER_STAKE_SUMMARIES_STDDEV_POPULATION_NEXT_INDEXER_STAKE_ASC',
  IndexerStakeSummariesStddevPopulationNextIndexerStakeDesc = 'INDEXER_STAKE_SUMMARIES_STDDEV_POPULATION_NEXT_INDEXER_STAKE_DESC',
  IndexerStakeSummariesStddevPopulationNextTotalStakeAsc = 'INDEXER_STAKE_SUMMARIES_STDDEV_POPULATION_NEXT_TOTAL_STAKE_ASC',
  IndexerStakeSummariesStddevPopulationNextTotalStakeDesc = 'INDEXER_STAKE_SUMMARIES_STDDEV_POPULATION_NEXT_TOTAL_STAKE_DESC',
  IndexerStakeSummariesStddevPopulationTotalStakeAsc = 'INDEXER_STAKE_SUMMARIES_STDDEV_POPULATION_TOTAL_STAKE_ASC',
  IndexerStakeSummariesStddevPopulationTotalStakeDesc = 'INDEXER_STAKE_SUMMARIES_STDDEV_POPULATION_TOTAL_STAKE_DESC',
  IndexerStakeSummariesStddevSampleBlockRangeAsc = 'INDEXER_STAKE_SUMMARIES_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  IndexerStakeSummariesStddevSampleBlockRangeDesc = 'INDEXER_STAKE_SUMMARIES_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  IndexerStakeSummariesStddevSampleDelegatorStakeAsc = 'INDEXER_STAKE_SUMMARIES_STDDEV_SAMPLE_DELEGATOR_STAKE_ASC',
  IndexerStakeSummariesStddevSampleDelegatorStakeDesc = 'INDEXER_STAKE_SUMMARIES_STDDEV_SAMPLE_DELEGATOR_STAKE_DESC',
  IndexerStakeSummariesStddevSampleEraIdxAsc = 'INDEXER_STAKE_SUMMARIES_STDDEV_SAMPLE_ERA_IDX_ASC',
  IndexerStakeSummariesStddevSampleEraIdxDesc = 'INDEXER_STAKE_SUMMARIES_STDDEV_SAMPLE_ERA_IDX_DESC',
  IndexerStakeSummariesStddevSampleEraIdAsc = 'INDEXER_STAKE_SUMMARIES_STDDEV_SAMPLE_ERA_ID_ASC',
  IndexerStakeSummariesStddevSampleEraIdDesc = 'INDEXER_STAKE_SUMMARIES_STDDEV_SAMPLE_ERA_ID_DESC',
  IndexerStakeSummariesStddevSampleIdAsc = 'INDEXER_STAKE_SUMMARIES_STDDEV_SAMPLE_ID_ASC',
  IndexerStakeSummariesStddevSampleIdDesc = 'INDEXER_STAKE_SUMMARIES_STDDEV_SAMPLE_ID_DESC',
  IndexerStakeSummariesStddevSampleIndexerStakeAsc = 'INDEXER_STAKE_SUMMARIES_STDDEV_SAMPLE_INDEXER_STAKE_ASC',
  IndexerStakeSummariesStddevSampleIndexerStakeDesc = 'INDEXER_STAKE_SUMMARIES_STDDEV_SAMPLE_INDEXER_STAKE_DESC',
  IndexerStakeSummariesStddevSampleNextDelegatorStakeAsc = 'INDEXER_STAKE_SUMMARIES_STDDEV_SAMPLE_NEXT_DELEGATOR_STAKE_ASC',
  IndexerStakeSummariesStddevSampleNextDelegatorStakeDesc = 'INDEXER_STAKE_SUMMARIES_STDDEV_SAMPLE_NEXT_DELEGATOR_STAKE_DESC',
  IndexerStakeSummariesStddevSampleNextIndexerStakeAsc = 'INDEXER_STAKE_SUMMARIES_STDDEV_SAMPLE_NEXT_INDEXER_STAKE_ASC',
  IndexerStakeSummariesStddevSampleNextIndexerStakeDesc = 'INDEXER_STAKE_SUMMARIES_STDDEV_SAMPLE_NEXT_INDEXER_STAKE_DESC',
  IndexerStakeSummariesStddevSampleNextTotalStakeAsc = 'INDEXER_STAKE_SUMMARIES_STDDEV_SAMPLE_NEXT_TOTAL_STAKE_ASC',
  IndexerStakeSummariesStddevSampleNextTotalStakeDesc = 'INDEXER_STAKE_SUMMARIES_STDDEV_SAMPLE_NEXT_TOTAL_STAKE_DESC',
  IndexerStakeSummariesStddevSampleTotalStakeAsc = 'INDEXER_STAKE_SUMMARIES_STDDEV_SAMPLE_TOTAL_STAKE_ASC',
  IndexerStakeSummariesStddevSampleTotalStakeDesc = 'INDEXER_STAKE_SUMMARIES_STDDEV_SAMPLE_TOTAL_STAKE_DESC',
  IndexerStakeSummariesSumBlockRangeAsc = 'INDEXER_STAKE_SUMMARIES_SUM_BLOCK_RANGE_ASC',
  IndexerStakeSummariesSumBlockRangeDesc = 'INDEXER_STAKE_SUMMARIES_SUM_BLOCK_RANGE_DESC',
  IndexerStakeSummariesSumDelegatorStakeAsc = 'INDEXER_STAKE_SUMMARIES_SUM_DELEGATOR_STAKE_ASC',
  IndexerStakeSummariesSumDelegatorStakeDesc = 'INDEXER_STAKE_SUMMARIES_SUM_DELEGATOR_STAKE_DESC',
  IndexerStakeSummariesSumEraIdxAsc = 'INDEXER_STAKE_SUMMARIES_SUM_ERA_IDX_ASC',
  IndexerStakeSummariesSumEraIdxDesc = 'INDEXER_STAKE_SUMMARIES_SUM_ERA_IDX_DESC',
  IndexerStakeSummariesSumEraIdAsc = 'INDEXER_STAKE_SUMMARIES_SUM_ERA_ID_ASC',
  IndexerStakeSummariesSumEraIdDesc = 'INDEXER_STAKE_SUMMARIES_SUM_ERA_ID_DESC',
  IndexerStakeSummariesSumIdAsc = 'INDEXER_STAKE_SUMMARIES_SUM_ID_ASC',
  IndexerStakeSummariesSumIdDesc = 'INDEXER_STAKE_SUMMARIES_SUM_ID_DESC',
  IndexerStakeSummariesSumIndexerStakeAsc = 'INDEXER_STAKE_SUMMARIES_SUM_INDEXER_STAKE_ASC',
  IndexerStakeSummariesSumIndexerStakeDesc = 'INDEXER_STAKE_SUMMARIES_SUM_INDEXER_STAKE_DESC',
  IndexerStakeSummariesSumNextDelegatorStakeAsc = 'INDEXER_STAKE_SUMMARIES_SUM_NEXT_DELEGATOR_STAKE_ASC',
  IndexerStakeSummariesSumNextDelegatorStakeDesc = 'INDEXER_STAKE_SUMMARIES_SUM_NEXT_DELEGATOR_STAKE_DESC',
  IndexerStakeSummariesSumNextIndexerStakeAsc = 'INDEXER_STAKE_SUMMARIES_SUM_NEXT_INDEXER_STAKE_ASC',
  IndexerStakeSummariesSumNextIndexerStakeDesc = 'INDEXER_STAKE_SUMMARIES_SUM_NEXT_INDEXER_STAKE_DESC',
  IndexerStakeSummariesSumNextTotalStakeAsc = 'INDEXER_STAKE_SUMMARIES_SUM_NEXT_TOTAL_STAKE_ASC',
  IndexerStakeSummariesSumNextTotalStakeDesc = 'INDEXER_STAKE_SUMMARIES_SUM_NEXT_TOTAL_STAKE_DESC',
  IndexerStakeSummariesSumTotalStakeAsc = 'INDEXER_STAKE_SUMMARIES_SUM_TOTAL_STAKE_ASC',
  IndexerStakeSummariesSumTotalStakeDesc = 'INDEXER_STAKE_SUMMARIES_SUM_TOTAL_STAKE_DESC',
  IndexerStakeSummariesVariancePopulationBlockRangeAsc = 'INDEXER_STAKE_SUMMARIES_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  IndexerStakeSummariesVariancePopulationBlockRangeDesc = 'INDEXER_STAKE_SUMMARIES_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  IndexerStakeSummariesVariancePopulationDelegatorStakeAsc = 'INDEXER_STAKE_SUMMARIES_VARIANCE_POPULATION_DELEGATOR_STAKE_ASC',
  IndexerStakeSummariesVariancePopulationDelegatorStakeDesc = 'INDEXER_STAKE_SUMMARIES_VARIANCE_POPULATION_DELEGATOR_STAKE_DESC',
  IndexerStakeSummariesVariancePopulationEraIdxAsc = 'INDEXER_STAKE_SUMMARIES_VARIANCE_POPULATION_ERA_IDX_ASC',
  IndexerStakeSummariesVariancePopulationEraIdxDesc = 'INDEXER_STAKE_SUMMARIES_VARIANCE_POPULATION_ERA_IDX_DESC',
  IndexerStakeSummariesVariancePopulationEraIdAsc = 'INDEXER_STAKE_SUMMARIES_VARIANCE_POPULATION_ERA_ID_ASC',
  IndexerStakeSummariesVariancePopulationEraIdDesc = 'INDEXER_STAKE_SUMMARIES_VARIANCE_POPULATION_ERA_ID_DESC',
  IndexerStakeSummariesVariancePopulationIdAsc = 'INDEXER_STAKE_SUMMARIES_VARIANCE_POPULATION_ID_ASC',
  IndexerStakeSummariesVariancePopulationIdDesc = 'INDEXER_STAKE_SUMMARIES_VARIANCE_POPULATION_ID_DESC',
  IndexerStakeSummariesVariancePopulationIndexerStakeAsc = 'INDEXER_STAKE_SUMMARIES_VARIANCE_POPULATION_INDEXER_STAKE_ASC',
  IndexerStakeSummariesVariancePopulationIndexerStakeDesc = 'INDEXER_STAKE_SUMMARIES_VARIANCE_POPULATION_INDEXER_STAKE_DESC',
  IndexerStakeSummariesVariancePopulationNextDelegatorStakeAsc = 'INDEXER_STAKE_SUMMARIES_VARIANCE_POPULATION_NEXT_DELEGATOR_STAKE_ASC',
  IndexerStakeSummariesVariancePopulationNextDelegatorStakeDesc = 'INDEXER_STAKE_SUMMARIES_VARIANCE_POPULATION_NEXT_DELEGATOR_STAKE_DESC',
  IndexerStakeSummariesVariancePopulationNextIndexerStakeAsc = 'INDEXER_STAKE_SUMMARIES_VARIANCE_POPULATION_NEXT_INDEXER_STAKE_ASC',
  IndexerStakeSummariesVariancePopulationNextIndexerStakeDesc = 'INDEXER_STAKE_SUMMARIES_VARIANCE_POPULATION_NEXT_INDEXER_STAKE_DESC',
  IndexerStakeSummariesVariancePopulationNextTotalStakeAsc = 'INDEXER_STAKE_SUMMARIES_VARIANCE_POPULATION_NEXT_TOTAL_STAKE_ASC',
  IndexerStakeSummariesVariancePopulationNextTotalStakeDesc = 'INDEXER_STAKE_SUMMARIES_VARIANCE_POPULATION_NEXT_TOTAL_STAKE_DESC',
  IndexerStakeSummariesVariancePopulationTotalStakeAsc = 'INDEXER_STAKE_SUMMARIES_VARIANCE_POPULATION_TOTAL_STAKE_ASC',
  IndexerStakeSummariesVariancePopulationTotalStakeDesc = 'INDEXER_STAKE_SUMMARIES_VARIANCE_POPULATION_TOTAL_STAKE_DESC',
  IndexerStakeSummariesVarianceSampleBlockRangeAsc = 'INDEXER_STAKE_SUMMARIES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  IndexerStakeSummariesVarianceSampleBlockRangeDesc = 'INDEXER_STAKE_SUMMARIES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  IndexerStakeSummariesVarianceSampleDelegatorStakeAsc = 'INDEXER_STAKE_SUMMARIES_VARIANCE_SAMPLE_DELEGATOR_STAKE_ASC',
  IndexerStakeSummariesVarianceSampleDelegatorStakeDesc = 'INDEXER_STAKE_SUMMARIES_VARIANCE_SAMPLE_DELEGATOR_STAKE_DESC',
  IndexerStakeSummariesVarianceSampleEraIdxAsc = 'INDEXER_STAKE_SUMMARIES_VARIANCE_SAMPLE_ERA_IDX_ASC',
  IndexerStakeSummariesVarianceSampleEraIdxDesc = 'INDEXER_STAKE_SUMMARIES_VARIANCE_SAMPLE_ERA_IDX_DESC',
  IndexerStakeSummariesVarianceSampleEraIdAsc = 'INDEXER_STAKE_SUMMARIES_VARIANCE_SAMPLE_ERA_ID_ASC',
  IndexerStakeSummariesVarianceSampleEraIdDesc = 'INDEXER_STAKE_SUMMARIES_VARIANCE_SAMPLE_ERA_ID_DESC',
  IndexerStakeSummariesVarianceSampleIdAsc = 'INDEXER_STAKE_SUMMARIES_VARIANCE_SAMPLE_ID_ASC',
  IndexerStakeSummariesVarianceSampleIdDesc = 'INDEXER_STAKE_SUMMARIES_VARIANCE_SAMPLE_ID_DESC',
  IndexerStakeSummariesVarianceSampleIndexerStakeAsc = 'INDEXER_STAKE_SUMMARIES_VARIANCE_SAMPLE_INDEXER_STAKE_ASC',
  IndexerStakeSummariesVarianceSampleIndexerStakeDesc = 'INDEXER_STAKE_SUMMARIES_VARIANCE_SAMPLE_INDEXER_STAKE_DESC',
  IndexerStakeSummariesVarianceSampleNextDelegatorStakeAsc = 'INDEXER_STAKE_SUMMARIES_VARIANCE_SAMPLE_NEXT_DELEGATOR_STAKE_ASC',
  IndexerStakeSummariesVarianceSampleNextDelegatorStakeDesc = 'INDEXER_STAKE_SUMMARIES_VARIANCE_SAMPLE_NEXT_DELEGATOR_STAKE_DESC',
  IndexerStakeSummariesVarianceSampleNextIndexerStakeAsc = 'INDEXER_STAKE_SUMMARIES_VARIANCE_SAMPLE_NEXT_INDEXER_STAKE_ASC',
  IndexerStakeSummariesVarianceSampleNextIndexerStakeDesc = 'INDEXER_STAKE_SUMMARIES_VARIANCE_SAMPLE_NEXT_INDEXER_STAKE_DESC',
  IndexerStakeSummariesVarianceSampleNextTotalStakeAsc = 'INDEXER_STAKE_SUMMARIES_VARIANCE_SAMPLE_NEXT_TOTAL_STAKE_ASC',
  IndexerStakeSummariesVarianceSampleNextTotalStakeDesc = 'INDEXER_STAKE_SUMMARIES_VARIANCE_SAMPLE_NEXT_TOTAL_STAKE_DESC',
  IndexerStakeSummariesVarianceSampleTotalStakeAsc = 'INDEXER_STAKE_SUMMARIES_VARIANCE_SAMPLE_TOTAL_STAKE_ASC',
  IndexerStakeSummariesVarianceSampleTotalStakeDesc = 'INDEXER_STAKE_SUMMARIES_VARIANCE_SAMPLE_TOTAL_STAKE_DESC',
  LastEventAsc = 'LAST_EVENT_ASC',
  LastEventDesc = 'LAST_EVENT_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  StartTimeAsc = 'START_TIME_ASC',
  StartTimeDesc = 'START_TIME_DESC'
}

export type Exception = Node & {
  __typename?: 'Exception';
  error: Scalars['String']['output'];
  handler: Scalars['String']['output'];
  id: Scalars['String']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
};

export type ExceptionAggregates = {
  __typename?: 'ExceptionAggregates';
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  distinctCount?: Maybe<ExceptionDistinctCountAggregates>;
  keys?: Maybe<Array<Scalars['String']['output']>>;
};

export type ExceptionDistinctCountAggregates = {
  __typename?: 'ExceptionDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  _blockRange?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  _id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of error across the matching connection */
  error?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of handler across the matching connection */
  handler?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  id?: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `Exception` object types. All fields are combined with a logical ‘and.’ */
export type ExceptionFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<ExceptionFilter>>;
  /** Filter by the object’s `error` field. */
  error?: InputMaybe<StringFilter>;
  /** Filter by the object’s `handler` field. */
  handler?: InputMaybe<StringFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<ExceptionFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<ExceptionFilter>>;
};

/** A connection to a list of `Exception` values. */
export type ExceptionsConnection = {
  __typename?: 'ExceptionsConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<ExceptionAggregates>;
  /** A list of edges which contains the `Exception` and cursor to aid in pagination. */
  edges: Array<ExceptionsEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<ExceptionAggregates>>;
  /** A list of `Exception` objects. */
  nodes: Array<Maybe<Exception>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Exception` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Exception` values. */
export type ExceptionsConnectionGroupedAggregatesArgs = {
  groupBy: Array<ExceptionsGroupBy>;
  having?: InputMaybe<ExceptionsHavingInput>;
};

/** A `Exception` edge in the connection. */
export type ExceptionsEdge = {
  __typename?: 'ExceptionsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `Exception` at the end of the edge. */
  node?: Maybe<Exception>;
};

/** Grouping methods for `Exception` for usage during aggregation. */
export enum ExceptionsGroupBy {
  Error = 'ERROR',
  Handler = 'HANDLER',
  Id = 'ID'
}

/** Conditions for `Exception` aggregates. */
export type ExceptionsHavingInput = {
  AND?: InputMaybe<Array<ExceptionsHavingInput>>;
  OR?: InputMaybe<Array<ExceptionsHavingInput>>;
};

/** Methods to use when ordering `Exception`. */
export enum ExceptionsOrderBy {
  ErrorAsc = 'ERROR_ASC',
  ErrorDesc = 'ERROR_DESC',
  HandlerAsc = 'HANDLER_ASC',
  HandlerDesc = 'HANDLER_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

export type HavingBigfloatFilter = {
  equalTo?: InputMaybe<Scalars['BigFloat']['input']>;
  greaterThan?: InputMaybe<Scalars['BigFloat']['input']>;
  greaterThanOrEqualTo?: InputMaybe<Scalars['BigFloat']['input']>;
  lessThan?: InputMaybe<Scalars['BigFloat']['input']>;
  lessThanOrEqualTo?: InputMaybe<Scalars['BigFloat']['input']>;
  notEqualTo?: InputMaybe<Scalars['BigFloat']['input']>;
};

export type HavingDatetimeFilter = {
  equalTo?: InputMaybe<Scalars['Datetime']['input']>;
  greaterThan?: InputMaybe<Scalars['Datetime']['input']>;
  greaterThanOrEqualTo?: InputMaybe<Scalars['Datetime']['input']>;
  lessThan?: InputMaybe<Scalars['Datetime']['input']>;
  lessThanOrEqualTo?: InputMaybe<Scalars['Datetime']['input']>;
  notEqualTo?: InputMaybe<Scalars['Datetime']['input']>;
};

export type HavingIntFilter = {
  equalTo?: InputMaybe<Scalars['Int']['input']>;
  greaterThan?: InputMaybe<Scalars['Int']['input']>;
  greaterThanOrEqualTo?: InputMaybe<Scalars['Int']['input']>;
  lessThan?: InputMaybe<Scalars['Int']['input']>;
  lessThanOrEqualTo?: InputMaybe<Scalars['Int']['input']>;
  notEqualTo?: InputMaybe<Scalars['Int']['input']>;
};

export type Indexer = Node & {
  __typename?: 'Indexer';
  /** Reads and enables pagination through a set of `AcceptedOffer`. */
  acceptedOffers: AcceptedOffersConnection;
  active: Scalars['Boolean']['output'];
  capacity: Scalars['JSON']['output'];
  commission: Scalars['JSON']['output'];
  controller?: Maybe<Scalars['String']['output']>;
  /** Reads and enables pagination through a set of `Controller`. */
  controllers: ControllersConnection;
  createdBlock?: Maybe<Scalars['Int']['output']>;
  /** Reads and enables pagination through a set of `Delegation`. */
  delegations: DelegationsConnection;
  /** Reads and enables pagination through a set of `Delegator`. */
  delegatorsByDelegationIndexerIdAndDelegatorId: IndexerDelegatorsByDelegationIndexerIdAndDelegatorIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Delegator`. */
  delegatorsByEraDelegatorIndexerApyIndexerIdAndDelegatorId: IndexerDelegatorsByEraDelegatorIndexerApyIndexerIdAndDelegatorIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Delegator`. */
  delegatorsByEraRewardIndexerIdAndDelegatorId: IndexerDelegatorsByEraRewardIndexerIdAndDelegatorIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Delegator`. */
  delegatorsByEraStakeIndexerIdAndDelegatorId: IndexerDelegatorsByEraStakeIndexerIdAndDelegatorIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Deployment`. */
  deploymentsByEraIndexerDeploymentApyIndexerIdAndDeploymentId: IndexerDeploymentsByEraIndexerDeploymentApyIndexerIdAndDeploymentIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Deployment`. */
  deploymentsByIndexerAllocationIndexerIdAndDeploymentId: IndexerDeploymentsByIndexerAllocationIndexerIdAndDeploymentIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Deployment`. */
  deploymentsByIndexerAllocationRewardIndexerIdAndDeploymentId: IndexerDeploymentsByIndexerAllocationRewardIndexerIdAndDeploymentIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Deployment`. */
  deploymentsByIndexerAllocationRewardSummaryIndexerIdAndDeploymentId: IndexerDeploymentsByIndexerAllocationRewardSummaryIndexerIdAndDeploymentIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Deployment`. */
  deploymentsByIndexerAllocationSummaryIndexerIdAndDeploymentId: IndexerDeploymentsByIndexerAllocationSummaryIndexerIdAndDeploymentIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Deployment`. */
  deploymentsByIndexerDeploymentIndexerIdAndDeploymentId: IndexerDeploymentsByIndexerDeploymentIndexerIdAndDeploymentIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Deployment`. */
  deploymentsByIndexerMissedLaborIndexerIdAndDeploymentId: IndexerDeploymentsByIndexerMissedLaborIndexerIdAndDeploymentIdManyToManyConnection;
  /** Reads and enables pagination through a set of `EraDelegatorIndexerApy`. */
  eraDelegatorIndexerApies: EraDelegatorIndexerApiesConnection;
  /** Reads and enables pagination through a set of `EraIndexerApy`. */
  eraIndexerApies: EraIndexerApiesConnection;
  /** Reads and enables pagination through a set of `EraIndexerDeploymentApy`. */
  eraIndexerDeploymentApies: EraIndexerDeploymentApiesConnection;
  /** Reads and enables pagination through a set of `EraReward`. */
  eraRewards: EraRewardsConnection;
  /** Reads and enables pagination through a set of `EraStake`. */
  eraStakes: EraStakesConnection;
  /** Reads and enables pagination through a set of `Era`. */
  erasByEraRewardIndexerIdAndEraId: IndexerErasByEraRewardIndexerIdAndEraIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Era`. */
  erasByEraStakeIndexerIdAndEraId: IndexerErasByEraStakeIndexerIdAndEraIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Era`. */
  erasByIndexerCommissionRateIndexerIdAndEraId: IndexerErasByIndexerCommissionRateIndexerIdAndEraIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Era`. */
  erasByIndexerStakeIndexerIdAndEraId: IndexerErasByIndexerStakeIndexerIdAndEraIdManyToManyConnection;
  id: Scalars['String']['output'];
  /** Reads and enables pagination through a set of `IndexerAllocationOverflow`. */
  indexerAllocationOverflows: IndexerAllocationOverflowsConnection;
  /** Reads and enables pagination through a set of `IndexerAllocationRewardSummary`. */
  indexerAllocationRewardSummaries: IndexerAllocationRewardSummariesConnection;
  /** Reads and enables pagination through a set of `IndexerAllocationReward`. */
  indexerAllocationRewards: IndexerAllocationRewardsConnection;
  /** Reads and enables pagination through a set of `IndexerAllocationSummary`. */
  indexerAllocationSummaries: IndexerAllocationSummariesConnection;
  /** Reads and enables pagination through a set of `IndexerAllocation`. */
  indexerAllocations: IndexerAllocationsConnection;
  /** Reads and enables pagination through a set of `IndexerApySummary`. */
  indexerApySummaries: IndexerApySummariesConnection;
  /** Reads and enables pagination through a set of `IndexerCommissionRate`. */
  indexerCommissionRates: IndexerCommissionRatesConnection;
  /** Reads and enables pagination through a set of `IndexerEraDeploymentReward`. */
  indexerEraDeploymentRewards: IndexerEraDeploymentRewardsConnection;
  /** Reads and enables pagination through a set of `IndexerLaborHistory`. */
  indexerLaborHistories: IndexerLaborHistoriesConnection;
  /** Reads and enables pagination through a set of `IndexerMissedLabor`. */
  indexerMissedLabors: IndexerMissedLaborsConnection;
  /** Reads and enables pagination through a set of `IndexerStakeWeight`. */
  indexerStakeWeights: IndexerStakeWeightsConnection;
  /** Reads and enables pagination through a set of `IndexerStake`. */
  indexerStakes: IndexerStakesConnection;
  lastClaimEra?: Maybe<Scalars['String']['output']>;
  lastEvent?: Maybe<Scalars['String']['output']>;
  lastSettledEra?: Maybe<Scalars['String']['output']>;
  maxUnstakeAmount: Scalars['JSON']['output'];
  metadata: Scalars['String']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  /** Reads and enables pagination through a set of `Offer`. */
  offersByAcceptedOfferIndexerIdAndOfferId: IndexerOffersByAcceptedOfferIndexerIdAndOfferIdManyToManyConnection;
  /** Reads and enables pagination through a set of `IndexerDeployment`. */
  projects: IndexerDeploymentsConnection;
  /** Reads and enables pagination through a set of `Project`. */
  projectsByIndexerAllocationIndexerIdAndProjectId: IndexerProjectsByIndexerAllocationIndexerIdAndProjectIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Project`. */
  projectsByIndexerAllocationRewardIndexerIdAndProjectId: IndexerProjectsByIndexerAllocationRewardIndexerIdAndProjectIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Project`. */
  projectsByIndexerAllocationRewardSummaryIndexerIdAndProjectId: IndexerProjectsByIndexerAllocationRewardSummaryIndexerIdAndProjectIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Project`. */
  projectsByIndexerAllocationSummaryIndexerIdAndProjectId: IndexerProjectsByIndexerAllocationSummaryIndexerIdAndProjectIdManyToManyConnection;
  /** Reads and enables pagination through a set of `IndexerReward`. */
  rewards: IndexerRewardsConnection;
  selfStake: Scalars['JSON']['output'];
  /** Reads and enables pagination through a set of `ServiceAgreement`. */
  serviceAgreementsByAcceptedOfferIndexerIdAndServiceAgreementId: IndexerServiceAgreementsByAcceptedOfferIndexerIdAndServiceAgreementIdManyToManyConnection;
  totalStake: Scalars['JSON']['output'];
};


export type IndexerAcceptedOffersArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Accepted_Offers_Distinct_Enum>>>;
  filter?: InputMaybe<AcceptedOfferFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<AcceptedOffersOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type IndexerControllersArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Controllers_Distinct_Enum>>>;
  filter?: InputMaybe<ControllerFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ControllersOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type IndexerDelegationsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Delegations_Distinct_Enum>>>;
  filter?: InputMaybe<DelegationFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<DelegationsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type IndexerDelegatorsByDelegationIndexerIdAndDelegatorIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Delegators_Distinct_Enum>>>;
  filter?: InputMaybe<DelegatorFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<DelegatorsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type IndexerDelegatorsByEraDelegatorIndexerApyIndexerIdAndDelegatorIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Delegators_Distinct_Enum>>>;
  filter?: InputMaybe<DelegatorFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<DelegatorsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type IndexerDelegatorsByEraRewardIndexerIdAndDelegatorIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Delegators_Distinct_Enum>>>;
  filter?: InputMaybe<DelegatorFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<DelegatorsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type IndexerDelegatorsByEraStakeIndexerIdAndDelegatorIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Delegators_Distinct_Enum>>>;
  filter?: InputMaybe<DelegatorFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<DelegatorsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type IndexerDeploymentsByEraIndexerDeploymentApyIndexerIdAndDeploymentIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Deployments_Distinct_Enum>>>;
  filter?: InputMaybe<DeploymentFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<DeploymentsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type IndexerDeploymentsByIndexerAllocationIndexerIdAndDeploymentIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Deployments_Distinct_Enum>>>;
  filter?: InputMaybe<DeploymentFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<DeploymentsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type IndexerDeploymentsByIndexerAllocationRewardIndexerIdAndDeploymentIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Deployments_Distinct_Enum>>>;
  filter?: InputMaybe<DeploymentFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<DeploymentsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type IndexerDeploymentsByIndexerAllocationRewardSummaryIndexerIdAndDeploymentIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Deployments_Distinct_Enum>>>;
  filter?: InputMaybe<DeploymentFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<DeploymentsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type IndexerDeploymentsByIndexerAllocationSummaryIndexerIdAndDeploymentIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Deployments_Distinct_Enum>>>;
  filter?: InputMaybe<DeploymentFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<DeploymentsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type IndexerDeploymentsByIndexerDeploymentIndexerIdAndDeploymentIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Deployments_Distinct_Enum>>>;
  filter?: InputMaybe<DeploymentFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<DeploymentsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type IndexerDeploymentsByIndexerMissedLaborIndexerIdAndDeploymentIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Deployments_Distinct_Enum>>>;
  filter?: InputMaybe<DeploymentFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<DeploymentsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type IndexerEraDelegatorIndexerApiesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Era_Delegator_Indexer_Apies_Distinct_Enum>>>;
  filter?: InputMaybe<EraDelegatorIndexerApyFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<EraDelegatorIndexerApiesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type IndexerEraIndexerApiesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Era_Indexer_Apies_Distinct_Enum>>>;
  filter?: InputMaybe<EraIndexerApyFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<EraIndexerApiesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type IndexerEraIndexerDeploymentApiesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Era_Indexer_Deployment_Apies_Distinct_Enum>>>;
  filter?: InputMaybe<EraIndexerDeploymentApyFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<EraIndexerDeploymentApiesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type IndexerEraRewardsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Era_Rewards_Distinct_Enum>>>;
  filter?: InputMaybe<EraRewardFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<EraRewardsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type IndexerEraStakesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Era_Stakes_Distinct_Enum>>>;
  filter?: InputMaybe<EraStakeFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<EraStakesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type IndexerErasByEraRewardIndexerIdAndEraIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Eras_Distinct_Enum>>>;
  filter?: InputMaybe<EraFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ErasOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type IndexerErasByEraStakeIndexerIdAndEraIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Eras_Distinct_Enum>>>;
  filter?: InputMaybe<EraFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ErasOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type IndexerErasByIndexerCommissionRateIndexerIdAndEraIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Eras_Distinct_Enum>>>;
  filter?: InputMaybe<EraFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ErasOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type IndexerErasByIndexerStakeIndexerIdAndEraIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Eras_Distinct_Enum>>>;
  filter?: InputMaybe<EraFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ErasOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type IndexerIndexerAllocationOverflowsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Allocation_Overflows_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerAllocationOverflowFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexerAllocationOverflowsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type IndexerIndexerAllocationRewardSummariesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Allocation_Reward_Summaries_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerAllocationRewardSummaryFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexerAllocationRewardSummariesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type IndexerIndexerAllocationRewardsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Allocation_Rewards_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerAllocationRewardFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexerAllocationRewardsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type IndexerIndexerAllocationSummariesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Allocation_Summaries_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerAllocationSummaryFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexerAllocationSummariesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type IndexerIndexerAllocationsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Allocations_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerAllocationFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexerAllocationsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type IndexerIndexerApySummariesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Apy_Summaries_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerApySummaryFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexerApySummariesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type IndexerIndexerCommissionRatesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Commission_Rates_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerCommissionRateFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexerCommissionRatesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type IndexerIndexerEraDeploymentRewardsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Era_Deployment_Rewards_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerEraDeploymentRewardFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexerEraDeploymentRewardsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type IndexerIndexerLaborHistoriesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Labor_Histories_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerLaborHistoryFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexerLaborHistoriesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type IndexerIndexerMissedLaborsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Missed_Labors_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerMissedLaborFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexerMissedLaborsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type IndexerIndexerStakeWeightsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Stake_Weights_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerStakeWeightFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexerStakeWeightsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type IndexerIndexerStakesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Stakes_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerStakeFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexerStakesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type IndexerOffersByAcceptedOfferIndexerIdAndOfferIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Offers_Distinct_Enum>>>;
  filter?: InputMaybe<OfferFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<OffersOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type IndexerProjectsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Deployments_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerDeploymentFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexerDeploymentsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type IndexerProjectsByIndexerAllocationIndexerIdAndProjectIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Projects_Distinct_Enum>>>;
  filter?: InputMaybe<ProjectFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ProjectsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type IndexerProjectsByIndexerAllocationRewardIndexerIdAndProjectIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Projects_Distinct_Enum>>>;
  filter?: InputMaybe<ProjectFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ProjectsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type IndexerProjectsByIndexerAllocationRewardSummaryIndexerIdAndProjectIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Projects_Distinct_Enum>>>;
  filter?: InputMaybe<ProjectFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ProjectsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type IndexerProjectsByIndexerAllocationSummaryIndexerIdAndProjectIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Projects_Distinct_Enum>>>;
  filter?: InputMaybe<ProjectFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ProjectsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type IndexerRewardsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Rewards_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerRewardFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexerRewardsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type IndexerServiceAgreementsByAcceptedOfferIndexerIdAndServiceAgreementIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Service_Agreements_Distinct_Enum>>>;
  filter?: InputMaybe<ServiceAgreementFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ServiceAgreementsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

export type IndexerAggregates = {
  __typename?: 'IndexerAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  average?: Maybe<IndexerAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  distinctCount?: Maybe<IndexerDistinctCountAggregates>;
  keys?: Maybe<Array<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  max?: Maybe<IndexerMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  min?: Maybe<IndexerMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevPopulation?: Maybe<IndexerStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevSample?: Maybe<IndexerStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  sum?: Maybe<IndexerSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  variancePopulation?: Maybe<IndexerVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  varianceSample?: Maybe<IndexerVarianceSampleAggregates>;
};

export type IndexerAllocation = Node & {
  __typename?: 'IndexerAllocation';
  amountAdded: Scalars['BigFloat']['output'];
  amountRemoved: Scalars['BigFloat']['output'];
  createAt: Scalars['Datetime']['output'];
  /** Reads a single `Deployment` that is related to this `IndexerAllocation`. */
  deployment?: Maybe<Deployment>;
  deploymentId: Scalars['String']['output'];
  eraIdx: Scalars['Int']['output'];
  id: Scalars['String']['output'];
  /** Reads a single `Indexer` that is related to this `IndexerAllocation`. */
  indexer?: Maybe<Indexer>;
  indexerId: Scalars['String']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  /** Reads a single `Project` that is related to this `IndexerAllocation`. */
  project?: Maybe<Project>;
  projectId: Scalars['String']['output'];
};

export type IndexerAllocationAggregates = {
  __typename?: 'IndexerAllocationAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  average?: Maybe<IndexerAllocationAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  distinctCount?: Maybe<IndexerAllocationDistinctCountAggregates>;
  keys?: Maybe<Array<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  max?: Maybe<IndexerAllocationMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  min?: Maybe<IndexerAllocationMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevPopulation?: Maybe<IndexerAllocationStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevSample?: Maybe<IndexerAllocationStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  sum?: Maybe<IndexerAllocationSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  variancePopulation?: Maybe<IndexerAllocationVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  varianceSample?: Maybe<IndexerAllocationVarianceSampleAggregates>;
};

/** A filter to be used against aggregates of `IndexerAllocation` object types. */
export type IndexerAllocationAggregatesFilter = {
  /** Mean average aggregate over matching `IndexerAllocation` objects. */
  average?: InputMaybe<IndexerAllocationAverageAggregateFilter>;
  /** Distinct count aggregate over matching `IndexerAllocation` objects. */
  distinctCount?: InputMaybe<IndexerAllocationDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `IndexerAllocation` object to be included within the aggregate. */
  filter?: InputMaybe<IndexerAllocationFilter>;
  /** Maximum aggregate over matching `IndexerAllocation` objects. */
  max?: InputMaybe<IndexerAllocationMaxAggregateFilter>;
  /** Minimum aggregate over matching `IndexerAllocation` objects. */
  min?: InputMaybe<IndexerAllocationMinAggregateFilter>;
  /** Population standard deviation aggregate over matching `IndexerAllocation` objects. */
  stddevPopulation?: InputMaybe<IndexerAllocationStddevPopulationAggregateFilter>;
  /** Sample standard deviation aggregate over matching `IndexerAllocation` objects. */
  stddevSample?: InputMaybe<IndexerAllocationStddevSampleAggregateFilter>;
  /** Sum aggregate over matching `IndexerAllocation` objects. */
  sum?: InputMaybe<IndexerAllocationSumAggregateFilter>;
  /** Population variance aggregate over matching `IndexerAllocation` objects. */
  variancePopulation?: InputMaybe<IndexerAllocationVariancePopulationAggregateFilter>;
  /** Sample variance aggregate over matching `IndexerAllocation` objects. */
  varianceSample?: InputMaybe<IndexerAllocationVarianceSampleAggregateFilter>;
};

export type IndexerAllocationAverageAggregateFilter = {
  amountAdded?: InputMaybe<BigFloatFilter>;
  amountRemoved?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigFloatFilter>;
};

export type IndexerAllocationAverageAggregates = {
  __typename?: 'IndexerAllocationAverageAggregates';
  /** Mean average of amountAdded across the matching connection */
  amountAdded?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of amountRemoved across the matching connection */
  amountRemoved?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerAllocationDistinctCountAggregateFilter = {
  _blockRange?: InputMaybe<BigIntFilter>;
  _id?: InputMaybe<BigIntFilter>;
  amountAdded?: InputMaybe<BigIntFilter>;
  amountRemoved?: InputMaybe<BigIntFilter>;
  createAt?: InputMaybe<BigIntFilter>;
  deploymentId?: InputMaybe<BigIntFilter>;
  eraIdx?: InputMaybe<BigIntFilter>;
  id?: InputMaybe<BigIntFilter>;
  indexerId?: InputMaybe<BigIntFilter>;
  projectId?: InputMaybe<BigIntFilter>;
};

export type IndexerAllocationDistinctCountAggregates = {
  __typename?: 'IndexerAllocationDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  _blockRange?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  _id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of amountAdded across the matching connection */
  amountAdded?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of amountRemoved across the matching connection */
  amountRemoved?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createAt across the matching connection */
  createAt?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of deploymentId across the matching connection */
  deploymentId?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of indexerId across the matching connection */
  indexerId?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of projectId across the matching connection */
  projectId?: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `IndexerAllocation` object types. All fields are combined with a logical ‘and.’ */
export type IndexerAllocationFilter = {
  /** Filter by the object’s `amountAdded` field. */
  amountAdded?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `amountRemoved` field. */
  amountRemoved?: InputMaybe<BigFloatFilter>;
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<IndexerAllocationFilter>>;
  /** Filter by the object’s `createAt` field. */
  createAt?: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `deployment` relation. */
  deployment?: InputMaybe<DeploymentFilter>;
  /** Filter by the object’s `deploymentId` field. */
  deploymentId?: InputMaybe<StringFilter>;
  /** Filter by the object’s `eraIdx` field. */
  eraIdx?: InputMaybe<IntFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<StringFilter>;
  /** Filter by the object’s `indexer` relation. */
  indexer?: InputMaybe<IndexerFilter>;
  /** Filter by the object’s `indexerId` field. */
  indexerId?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<IndexerAllocationFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<IndexerAllocationFilter>>;
  /** Filter by the object’s `project` relation. */
  project?: InputMaybe<ProjectFilter>;
  /** Filter by the object’s `projectId` field. */
  projectId?: InputMaybe<StringFilter>;
};

export type IndexerAllocationMaxAggregateFilter = {
  amountAdded?: InputMaybe<BigFloatFilter>;
  amountRemoved?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<IntFilter>;
};

export type IndexerAllocationMaxAggregates = {
  __typename?: 'IndexerAllocationMaxAggregates';
  /** Maximum of amountAdded across the matching connection */
  amountAdded?: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of amountRemoved across the matching connection */
  amountRemoved?: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['Int']['output']>;
};

export type IndexerAllocationMinAggregateFilter = {
  amountAdded?: InputMaybe<BigFloatFilter>;
  amountRemoved?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<IntFilter>;
};

export type IndexerAllocationMinAggregates = {
  __typename?: 'IndexerAllocationMinAggregates';
  /** Minimum of amountAdded across the matching connection */
  amountAdded?: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of amountRemoved across the matching connection */
  amountRemoved?: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['Int']['output']>;
};

export type IndexerAllocationOverflow = Node & {
  __typename?: 'IndexerAllocationOverflow';
  createAt: Scalars['Datetime']['output'];
  eraIdxEnd: Scalars['Int']['output'];
  eraIdxStart: Scalars['Int']['output'];
  id: Scalars['String']['output'];
  /** Reads a single `Indexer` that is related to this `IndexerAllocationOverflow`. */
  indexer?: Maybe<Indexer>;
  indexerId: Scalars['String']['output'];
  /** Reads and enables pagination through a set of `IndexerLatestAllocationOverflow`. */
  indexerLatestAllocationOverflowsByOverflowIdId: IndexerLatestAllocationOverflowsConnection;
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  overflowEnd: Scalars['Datetime']['output'];
  overflowStart: Scalars['Datetime']['output'];
  overflowTime: Scalars['BigFloat']['output'];
  updateAt: Scalars['Datetime']['output'];
};


export type IndexerAllocationOverflowIndexerLatestAllocationOverflowsByOverflowIdIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Latest_Allocation_Overflows_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerLatestAllocationOverflowFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexerLatestAllocationOverflowsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

export type IndexerAllocationOverflowAggregates = {
  __typename?: 'IndexerAllocationOverflowAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  average?: Maybe<IndexerAllocationOverflowAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  distinctCount?: Maybe<IndexerAllocationOverflowDistinctCountAggregates>;
  keys?: Maybe<Array<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  max?: Maybe<IndexerAllocationOverflowMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  min?: Maybe<IndexerAllocationOverflowMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevPopulation?: Maybe<IndexerAllocationOverflowStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevSample?: Maybe<IndexerAllocationOverflowStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  sum?: Maybe<IndexerAllocationOverflowSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  variancePopulation?: Maybe<IndexerAllocationOverflowVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  varianceSample?: Maybe<IndexerAllocationOverflowVarianceSampleAggregates>;
};

/** A filter to be used against aggregates of `IndexerAllocationOverflow` object types. */
export type IndexerAllocationOverflowAggregatesFilter = {
  /** Mean average aggregate over matching `IndexerAllocationOverflow` objects. */
  average?: InputMaybe<IndexerAllocationOverflowAverageAggregateFilter>;
  /** Distinct count aggregate over matching `IndexerAllocationOverflow` objects. */
  distinctCount?: InputMaybe<IndexerAllocationOverflowDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `IndexerAllocationOverflow` object to be included within the aggregate. */
  filter?: InputMaybe<IndexerAllocationOverflowFilter>;
  /** Maximum aggregate over matching `IndexerAllocationOverflow` objects. */
  max?: InputMaybe<IndexerAllocationOverflowMaxAggregateFilter>;
  /** Minimum aggregate over matching `IndexerAllocationOverflow` objects. */
  min?: InputMaybe<IndexerAllocationOverflowMinAggregateFilter>;
  /** Population standard deviation aggregate over matching `IndexerAllocationOverflow` objects. */
  stddevPopulation?: InputMaybe<IndexerAllocationOverflowStddevPopulationAggregateFilter>;
  /** Sample standard deviation aggregate over matching `IndexerAllocationOverflow` objects. */
  stddevSample?: InputMaybe<IndexerAllocationOverflowStddevSampleAggregateFilter>;
  /** Sum aggregate over matching `IndexerAllocationOverflow` objects. */
  sum?: InputMaybe<IndexerAllocationOverflowSumAggregateFilter>;
  /** Population variance aggregate over matching `IndexerAllocationOverflow` objects. */
  variancePopulation?: InputMaybe<IndexerAllocationOverflowVariancePopulationAggregateFilter>;
  /** Sample variance aggregate over matching `IndexerAllocationOverflow` objects. */
  varianceSample?: InputMaybe<IndexerAllocationOverflowVarianceSampleAggregateFilter>;
};

export type IndexerAllocationOverflowAverageAggregateFilter = {
  eraIdxEnd?: InputMaybe<BigFloatFilter>;
  eraIdxStart?: InputMaybe<BigFloatFilter>;
  overflowTime?: InputMaybe<BigFloatFilter>;
};

export type IndexerAllocationOverflowAverageAggregates = {
  __typename?: 'IndexerAllocationOverflowAverageAggregates';
  /** Mean average of eraIdxEnd across the matching connection */
  eraIdxEnd?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of eraIdxStart across the matching connection */
  eraIdxStart?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of overflowTime across the matching connection */
  overflowTime?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerAllocationOverflowDistinctCountAggregateFilter = {
  _blockRange?: InputMaybe<BigIntFilter>;
  _id?: InputMaybe<BigIntFilter>;
  createAt?: InputMaybe<BigIntFilter>;
  eraIdxEnd?: InputMaybe<BigIntFilter>;
  eraIdxStart?: InputMaybe<BigIntFilter>;
  id?: InputMaybe<BigIntFilter>;
  indexerId?: InputMaybe<BigIntFilter>;
  overflowEnd?: InputMaybe<BigIntFilter>;
  overflowStart?: InputMaybe<BigIntFilter>;
  overflowTime?: InputMaybe<BigIntFilter>;
  updateAt?: InputMaybe<BigIntFilter>;
};

export type IndexerAllocationOverflowDistinctCountAggregates = {
  __typename?: 'IndexerAllocationOverflowDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  _blockRange?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  _id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createAt across the matching connection */
  createAt?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of eraIdxEnd across the matching connection */
  eraIdxEnd?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of eraIdxStart across the matching connection */
  eraIdxStart?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of indexerId across the matching connection */
  indexerId?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of overflowEnd across the matching connection */
  overflowEnd?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of overflowStart across the matching connection */
  overflowStart?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of overflowTime across the matching connection */
  overflowTime?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of updateAt across the matching connection */
  updateAt?: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `IndexerAllocationOverflow` object types. All fields are combined with a logical ‘and.’ */
export type IndexerAllocationOverflowFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<IndexerAllocationOverflowFilter>>;
  /** Filter by the object’s `createAt` field. */
  createAt?: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `eraIdxEnd` field. */
  eraIdxEnd?: InputMaybe<IntFilter>;
  /** Filter by the object’s `eraIdxStart` field. */
  eraIdxStart?: InputMaybe<IntFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<StringFilter>;
  /** Filter by the object’s `indexer` relation. */
  indexer?: InputMaybe<IndexerFilter>;
  /** Filter by the object’s `indexerId` field. */
  indexerId?: InputMaybe<StringFilter>;
  /** Filter by the object’s `indexerLatestAllocationOverflowsByOverflowIdId` relation. */
  indexerLatestAllocationOverflowsByOverflowIdId?: InputMaybe<IndexerAllocationOverflowToManyIndexerLatestAllocationOverflowFilter>;
  /** Some related `indexerLatestAllocationOverflowsByOverflowIdId` exist. */
  indexerLatestAllocationOverflowsByOverflowIdIdExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Negates the expression. */
  not?: InputMaybe<IndexerAllocationOverflowFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<IndexerAllocationOverflowFilter>>;
  /** Filter by the object’s `overflowEnd` field. */
  overflowEnd?: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `overflowStart` field. */
  overflowStart?: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `overflowTime` field. */
  overflowTime?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `updateAt` field. */
  updateAt?: InputMaybe<DatetimeFilter>;
};

export type IndexerAllocationOverflowMaxAggregateFilter = {
  eraIdxEnd?: InputMaybe<IntFilter>;
  eraIdxStart?: InputMaybe<IntFilter>;
  overflowTime?: InputMaybe<BigFloatFilter>;
};

export type IndexerAllocationOverflowMaxAggregates = {
  __typename?: 'IndexerAllocationOverflowMaxAggregates';
  /** Maximum of eraIdxEnd across the matching connection */
  eraIdxEnd?: Maybe<Scalars['Int']['output']>;
  /** Maximum of eraIdxStart across the matching connection */
  eraIdxStart?: Maybe<Scalars['Int']['output']>;
  /** Maximum of overflowTime across the matching connection */
  overflowTime?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerAllocationOverflowMinAggregateFilter = {
  eraIdxEnd?: InputMaybe<IntFilter>;
  eraIdxStart?: InputMaybe<IntFilter>;
  overflowTime?: InputMaybe<BigFloatFilter>;
};

export type IndexerAllocationOverflowMinAggregates = {
  __typename?: 'IndexerAllocationOverflowMinAggregates';
  /** Minimum of eraIdxEnd across the matching connection */
  eraIdxEnd?: Maybe<Scalars['Int']['output']>;
  /** Minimum of eraIdxStart across the matching connection */
  eraIdxStart?: Maybe<Scalars['Int']['output']>;
  /** Minimum of overflowTime across the matching connection */
  overflowTime?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerAllocationOverflowStddevPopulationAggregateFilter = {
  eraIdxEnd?: InputMaybe<BigFloatFilter>;
  eraIdxStart?: InputMaybe<BigFloatFilter>;
  overflowTime?: InputMaybe<BigFloatFilter>;
};

export type IndexerAllocationOverflowStddevPopulationAggregates = {
  __typename?: 'IndexerAllocationOverflowStddevPopulationAggregates';
  /** Population standard deviation of eraIdxEnd across the matching connection */
  eraIdxEnd?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of eraIdxStart across the matching connection */
  eraIdxStart?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of overflowTime across the matching connection */
  overflowTime?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerAllocationOverflowStddevSampleAggregateFilter = {
  eraIdxEnd?: InputMaybe<BigFloatFilter>;
  eraIdxStart?: InputMaybe<BigFloatFilter>;
  overflowTime?: InputMaybe<BigFloatFilter>;
};

export type IndexerAllocationOverflowStddevSampleAggregates = {
  __typename?: 'IndexerAllocationOverflowStddevSampleAggregates';
  /** Sample standard deviation of eraIdxEnd across the matching connection */
  eraIdxEnd?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of eraIdxStart across the matching connection */
  eraIdxStart?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of overflowTime across the matching connection */
  overflowTime?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerAllocationOverflowSumAggregateFilter = {
  eraIdxEnd?: InputMaybe<BigIntFilter>;
  eraIdxStart?: InputMaybe<BigIntFilter>;
  overflowTime?: InputMaybe<BigFloatFilter>;
};

export type IndexerAllocationOverflowSumAggregates = {
  __typename?: 'IndexerAllocationOverflowSumAggregates';
  /** Sum of eraIdxEnd across the matching connection */
  eraIdxEnd: Scalars['BigInt']['output'];
  /** Sum of eraIdxStart across the matching connection */
  eraIdxStart: Scalars['BigInt']['output'];
  /** Sum of overflowTime across the matching connection */
  overflowTime: Scalars['BigFloat']['output'];
};

/** A filter to be used against many `IndexerLatestAllocationOverflow` object types. All fields are combined with a logical ‘and.’ */
export type IndexerAllocationOverflowToManyIndexerLatestAllocationOverflowFilter = {
  /** Aggregates across related `IndexerLatestAllocationOverflow` match the filter criteria. */
  aggregates?: InputMaybe<IndexerLatestAllocationOverflowAggregatesFilter>;
  /** Every related `IndexerLatestAllocationOverflow` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<IndexerLatestAllocationOverflowFilter>;
  /** No related `IndexerLatestAllocationOverflow` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<IndexerLatestAllocationOverflowFilter>;
  /** Some related `IndexerLatestAllocationOverflow` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<IndexerLatestAllocationOverflowFilter>;
};

export type IndexerAllocationOverflowVariancePopulationAggregateFilter = {
  eraIdxEnd?: InputMaybe<BigFloatFilter>;
  eraIdxStart?: InputMaybe<BigFloatFilter>;
  overflowTime?: InputMaybe<BigFloatFilter>;
};

export type IndexerAllocationOverflowVariancePopulationAggregates = {
  __typename?: 'IndexerAllocationOverflowVariancePopulationAggregates';
  /** Population variance of eraIdxEnd across the matching connection */
  eraIdxEnd?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of eraIdxStart across the matching connection */
  eraIdxStart?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of overflowTime across the matching connection */
  overflowTime?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerAllocationOverflowVarianceSampleAggregateFilter = {
  eraIdxEnd?: InputMaybe<BigFloatFilter>;
  eraIdxStart?: InputMaybe<BigFloatFilter>;
  overflowTime?: InputMaybe<BigFloatFilter>;
};

export type IndexerAllocationOverflowVarianceSampleAggregates = {
  __typename?: 'IndexerAllocationOverflowVarianceSampleAggregates';
  /** Sample variance of eraIdxEnd across the matching connection */
  eraIdxEnd?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of eraIdxStart across the matching connection */
  eraIdxStart?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of overflowTime across the matching connection */
  overflowTime?: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `IndexerAllocationOverflow` values. */
export type IndexerAllocationOverflowsConnection = {
  __typename?: 'IndexerAllocationOverflowsConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<IndexerAllocationOverflowAggregates>;
  /** A list of edges which contains the `IndexerAllocationOverflow` and cursor to aid in pagination. */
  edges: Array<IndexerAllocationOverflowsEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<IndexerAllocationOverflowAggregates>>;
  /** A list of `IndexerAllocationOverflow` objects. */
  nodes: Array<Maybe<IndexerAllocationOverflow>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `IndexerAllocationOverflow` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `IndexerAllocationOverflow` values. */
export type IndexerAllocationOverflowsConnectionGroupedAggregatesArgs = {
  groupBy: Array<IndexerAllocationOverflowsGroupBy>;
  having?: InputMaybe<IndexerAllocationOverflowsHavingInput>;
};

/** A `IndexerAllocationOverflow` edge in the connection. */
export type IndexerAllocationOverflowsEdge = {
  __typename?: 'IndexerAllocationOverflowsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `IndexerAllocationOverflow` at the end of the edge. */
  node?: Maybe<IndexerAllocationOverflow>;
};

/** Grouping methods for `IndexerAllocationOverflow` for usage during aggregation. */
export enum IndexerAllocationOverflowsGroupBy {
  CreateAt = 'CREATE_AT',
  CreateAtTruncatedToDay = 'CREATE_AT_TRUNCATED_TO_DAY',
  CreateAtTruncatedToHour = 'CREATE_AT_TRUNCATED_TO_HOUR',
  EraIdxEnd = 'ERA_IDX_END',
  EraIdxStart = 'ERA_IDX_START',
  Id = 'ID',
  IndexerId = 'INDEXER_ID',
  OverflowEnd = 'OVERFLOW_END',
  OverflowEndTruncatedToDay = 'OVERFLOW_END_TRUNCATED_TO_DAY',
  OverflowEndTruncatedToHour = 'OVERFLOW_END_TRUNCATED_TO_HOUR',
  OverflowStart = 'OVERFLOW_START',
  OverflowStartTruncatedToDay = 'OVERFLOW_START_TRUNCATED_TO_DAY',
  OverflowStartTruncatedToHour = 'OVERFLOW_START_TRUNCATED_TO_HOUR',
  OverflowTime = 'OVERFLOW_TIME',
  UpdateAt = 'UPDATE_AT',
  UpdateAtTruncatedToDay = 'UPDATE_AT_TRUNCATED_TO_DAY',
  UpdateAtTruncatedToHour = 'UPDATE_AT_TRUNCATED_TO_HOUR'
}

export type IndexerAllocationOverflowsHavingAverageInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdxEnd?: InputMaybe<HavingIntFilter>;
  eraIdxStart?: InputMaybe<HavingIntFilter>;
  overflowEnd?: InputMaybe<HavingDatetimeFilter>;
  overflowStart?: InputMaybe<HavingDatetimeFilter>;
  overflowTime?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerAllocationOverflowsHavingDistinctCountInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdxEnd?: InputMaybe<HavingIntFilter>;
  eraIdxStart?: InputMaybe<HavingIntFilter>;
  overflowEnd?: InputMaybe<HavingDatetimeFilter>;
  overflowStart?: InputMaybe<HavingDatetimeFilter>;
  overflowTime?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

/** Conditions for `IndexerAllocationOverflow` aggregates. */
export type IndexerAllocationOverflowsHavingInput = {
  AND?: InputMaybe<Array<IndexerAllocationOverflowsHavingInput>>;
  OR?: InputMaybe<Array<IndexerAllocationOverflowsHavingInput>>;
  average?: InputMaybe<IndexerAllocationOverflowsHavingAverageInput>;
  distinctCount?: InputMaybe<IndexerAllocationOverflowsHavingDistinctCountInput>;
  max?: InputMaybe<IndexerAllocationOverflowsHavingMaxInput>;
  min?: InputMaybe<IndexerAllocationOverflowsHavingMinInput>;
  stddevPopulation?: InputMaybe<IndexerAllocationOverflowsHavingStddevPopulationInput>;
  stddevSample?: InputMaybe<IndexerAllocationOverflowsHavingStddevSampleInput>;
  sum?: InputMaybe<IndexerAllocationOverflowsHavingSumInput>;
  variancePopulation?: InputMaybe<IndexerAllocationOverflowsHavingVariancePopulationInput>;
  varianceSample?: InputMaybe<IndexerAllocationOverflowsHavingVarianceSampleInput>;
};

export type IndexerAllocationOverflowsHavingMaxInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdxEnd?: InputMaybe<HavingIntFilter>;
  eraIdxStart?: InputMaybe<HavingIntFilter>;
  overflowEnd?: InputMaybe<HavingDatetimeFilter>;
  overflowStart?: InputMaybe<HavingDatetimeFilter>;
  overflowTime?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerAllocationOverflowsHavingMinInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdxEnd?: InputMaybe<HavingIntFilter>;
  eraIdxStart?: InputMaybe<HavingIntFilter>;
  overflowEnd?: InputMaybe<HavingDatetimeFilter>;
  overflowStart?: InputMaybe<HavingDatetimeFilter>;
  overflowTime?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerAllocationOverflowsHavingStddevPopulationInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdxEnd?: InputMaybe<HavingIntFilter>;
  eraIdxStart?: InputMaybe<HavingIntFilter>;
  overflowEnd?: InputMaybe<HavingDatetimeFilter>;
  overflowStart?: InputMaybe<HavingDatetimeFilter>;
  overflowTime?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerAllocationOverflowsHavingStddevSampleInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdxEnd?: InputMaybe<HavingIntFilter>;
  eraIdxStart?: InputMaybe<HavingIntFilter>;
  overflowEnd?: InputMaybe<HavingDatetimeFilter>;
  overflowStart?: InputMaybe<HavingDatetimeFilter>;
  overflowTime?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerAllocationOverflowsHavingSumInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdxEnd?: InputMaybe<HavingIntFilter>;
  eraIdxStart?: InputMaybe<HavingIntFilter>;
  overflowEnd?: InputMaybe<HavingDatetimeFilter>;
  overflowStart?: InputMaybe<HavingDatetimeFilter>;
  overflowTime?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerAllocationOverflowsHavingVariancePopulationInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdxEnd?: InputMaybe<HavingIntFilter>;
  eraIdxStart?: InputMaybe<HavingIntFilter>;
  overflowEnd?: InputMaybe<HavingDatetimeFilter>;
  overflowStart?: InputMaybe<HavingDatetimeFilter>;
  overflowTime?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerAllocationOverflowsHavingVarianceSampleInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdxEnd?: InputMaybe<HavingIntFilter>;
  eraIdxStart?: InputMaybe<HavingIntFilter>;
  overflowEnd?: InputMaybe<HavingDatetimeFilter>;
  overflowStart?: InputMaybe<HavingDatetimeFilter>;
  overflowTime?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

/** Methods to use when ordering `IndexerAllocationOverflow`. */
export enum IndexerAllocationOverflowsOrderBy {
  CreateAtAsc = 'CREATE_AT_ASC',
  CreateAtDesc = 'CREATE_AT_DESC',
  EraIdxEndAsc = 'ERA_IDX_END_ASC',
  EraIdxEndDesc = 'ERA_IDX_END_DESC',
  EraIdxStartAsc = 'ERA_IDX_START_ASC',
  EraIdxStartDesc = 'ERA_IDX_START_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  IndexerByIndexerIdActiveAsc = 'INDEXER_BY_INDEXER_ID__ACTIVE_ASC',
  IndexerByIndexerIdActiveDesc = 'INDEXER_BY_INDEXER_ID__ACTIVE_DESC',
  IndexerByIndexerIdCapacityAsc = 'INDEXER_BY_INDEXER_ID__CAPACITY_ASC',
  IndexerByIndexerIdCapacityDesc = 'INDEXER_BY_INDEXER_ID__CAPACITY_DESC',
  IndexerByIndexerIdCommissionAsc = 'INDEXER_BY_INDEXER_ID__COMMISSION_ASC',
  IndexerByIndexerIdCommissionDesc = 'INDEXER_BY_INDEXER_ID__COMMISSION_DESC',
  IndexerByIndexerIdControllerAsc = 'INDEXER_BY_INDEXER_ID__CONTROLLER_ASC',
  IndexerByIndexerIdControllerDesc = 'INDEXER_BY_INDEXER_ID__CONTROLLER_DESC',
  IndexerByIndexerIdCreatedBlockAsc = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_ASC',
  IndexerByIndexerIdCreatedBlockDesc = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_DESC',
  IndexerByIndexerIdIdAsc = 'INDEXER_BY_INDEXER_ID__ID_ASC',
  IndexerByIndexerIdIdDesc = 'INDEXER_BY_INDEXER_ID__ID_DESC',
  IndexerByIndexerIdLastClaimEraAsc = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_ASC',
  IndexerByIndexerIdLastClaimEraDesc = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_DESC',
  IndexerByIndexerIdLastEventAsc = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_ASC',
  IndexerByIndexerIdLastEventDesc = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_DESC',
  IndexerByIndexerIdLastSettledEraAsc = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_ASC',
  IndexerByIndexerIdLastSettledEraDesc = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_DESC',
  IndexerByIndexerIdMaxUnstakeAmountAsc = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_ASC',
  IndexerByIndexerIdMaxUnstakeAmountDesc = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_DESC',
  IndexerByIndexerIdMetadataAsc = 'INDEXER_BY_INDEXER_ID__METADATA_ASC',
  IndexerByIndexerIdMetadataDesc = 'INDEXER_BY_INDEXER_ID__METADATA_DESC',
  IndexerByIndexerIdSelfStakeAsc = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_ASC',
  IndexerByIndexerIdSelfStakeDesc = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_DESC',
  IndexerByIndexerIdTotalStakeAsc = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_ASC',
  IndexerByIndexerIdTotalStakeDesc = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_DESC',
  IndexerIdAsc = 'INDEXER_ID_ASC',
  IndexerIdDesc = 'INDEXER_ID_DESC',
  IndexerLatestAllocationOverflowsByOverflowIdIdAverageBlockRangeAsc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_AVERAGE_BLOCK_RANGE_ASC',
  IndexerLatestAllocationOverflowsByOverflowIdIdAverageBlockRangeDesc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_AVERAGE_BLOCK_RANGE_DESC',
  IndexerLatestAllocationOverflowsByOverflowIdIdAverageCreateAtAsc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_AVERAGE_CREATE_AT_ASC',
  IndexerLatestAllocationOverflowsByOverflowIdIdAverageCreateAtDesc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_AVERAGE_CREATE_AT_DESC',
  IndexerLatestAllocationOverflowsByOverflowIdIdAverageIdAsc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_AVERAGE_ID_ASC',
  IndexerLatestAllocationOverflowsByOverflowIdIdAverageIdDesc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_AVERAGE_ID_DESC',
  IndexerLatestAllocationOverflowsByOverflowIdIdAverageOverflowIdIdAsc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_AVERAGE_OVERFLOW_ID_ID_ASC',
  IndexerLatestAllocationOverflowsByOverflowIdIdAverageOverflowIdIdDesc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_AVERAGE_OVERFLOW_ID_ID_DESC',
  IndexerLatestAllocationOverflowsByOverflowIdIdAverageUpdateAtAsc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_AVERAGE_UPDATE_AT_ASC',
  IndexerLatestAllocationOverflowsByOverflowIdIdAverageUpdateAtDesc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_AVERAGE_UPDATE_AT_DESC',
  IndexerLatestAllocationOverflowsByOverflowIdIdCountAsc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_COUNT_ASC',
  IndexerLatestAllocationOverflowsByOverflowIdIdCountDesc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_COUNT_DESC',
  IndexerLatestAllocationOverflowsByOverflowIdIdDistinctCountBlockRangeAsc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  IndexerLatestAllocationOverflowsByOverflowIdIdDistinctCountBlockRangeDesc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  IndexerLatestAllocationOverflowsByOverflowIdIdDistinctCountCreateAtAsc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_DISTINCT_COUNT_CREATE_AT_ASC',
  IndexerLatestAllocationOverflowsByOverflowIdIdDistinctCountCreateAtDesc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_DISTINCT_COUNT_CREATE_AT_DESC',
  IndexerLatestAllocationOverflowsByOverflowIdIdDistinctCountIdAsc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_DISTINCT_COUNT_ID_ASC',
  IndexerLatestAllocationOverflowsByOverflowIdIdDistinctCountIdDesc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_DISTINCT_COUNT_ID_DESC',
  IndexerLatestAllocationOverflowsByOverflowIdIdDistinctCountOverflowIdIdAsc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_DISTINCT_COUNT_OVERFLOW_ID_ID_ASC',
  IndexerLatestAllocationOverflowsByOverflowIdIdDistinctCountOverflowIdIdDesc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_DISTINCT_COUNT_OVERFLOW_ID_ID_DESC',
  IndexerLatestAllocationOverflowsByOverflowIdIdDistinctCountUpdateAtAsc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_DISTINCT_COUNT_UPDATE_AT_ASC',
  IndexerLatestAllocationOverflowsByOverflowIdIdDistinctCountUpdateAtDesc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_DISTINCT_COUNT_UPDATE_AT_DESC',
  IndexerLatestAllocationOverflowsByOverflowIdIdMaxBlockRangeAsc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_MAX_BLOCK_RANGE_ASC',
  IndexerLatestAllocationOverflowsByOverflowIdIdMaxBlockRangeDesc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_MAX_BLOCK_RANGE_DESC',
  IndexerLatestAllocationOverflowsByOverflowIdIdMaxCreateAtAsc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_MAX_CREATE_AT_ASC',
  IndexerLatestAllocationOverflowsByOverflowIdIdMaxCreateAtDesc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_MAX_CREATE_AT_DESC',
  IndexerLatestAllocationOverflowsByOverflowIdIdMaxIdAsc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_MAX_ID_ASC',
  IndexerLatestAllocationOverflowsByOverflowIdIdMaxIdDesc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_MAX_ID_DESC',
  IndexerLatestAllocationOverflowsByOverflowIdIdMaxOverflowIdIdAsc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_MAX_OVERFLOW_ID_ID_ASC',
  IndexerLatestAllocationOverflowsByOverflowIdIdMaxOverflowIdIdDesc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_MAX_OVERFLOW_ID_ID_DESC',
  IndexerLatestAllocationOverflowsByOverflowIdIdMaxUpdateAtAsc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_MAX_UPDATE_AT_ASC',
  IndexerLatestAllocationOverflowsByOverflowIdIdMaxUpdateAtDesc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_MAX_UPDATE_AT_DESC',
  IndexerLatestAllocationOverflowsByOverflowIdIdMinBlockRangeAsc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_MIN_BLOCK_RANGE_ASC',
  IndexerLatestAllocationOverflowsByOverflowIdIdMinBlockRangeDesc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_MIN_BLOCK_RANGE_DESC',
  IndexerLatestAllocationOverflowsByOverflowIdIdMinCreateAtAsc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_MIN_CREATE_AT_ASC',
  IndexerLatestAllocationOverflowsByOverflowIdIdMinCreateAtDesc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_MIN_CREATE_AT_DESC',
  IndexerLatestAllocationOverflowsByOverflowIdIdMinIdAsc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_MIN_ID_ASC',
  IndexerLatestAllocationOverflowsByOverflowIdIdMinIdDesc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_MIN_ID_DESC',
  IndexerLatestAllocationOverflowsByOverflowIdIdMinOverflowIdIdAsc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_MIN_OVERFLOW_ID_ID_ASC',
  IndexerLatestAllocationOverflowsByOverflowIdIdMinOverflowIdIdDesc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_MIN_OVERFLOW_ID_ID_DESC',
  IndexerLatestAllocationOverflowsByOverflowIdIdMinUpdateAtAsc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_MIN_UPDATE_AT_ASC',
  IndexerLatestAllocationOverflowsByOverflowIdIdMinUpdateAtDesc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_MIN_UPDATE_AT_DESC',
  IndexerLatestAllocationOverflowsByOverflowIdIdStddevPopulationBlockRangeAsc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  IndexerLatestAllocationOverflowsByOverflowIdIdStddevPopulationBlockRangeDesc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  IndexerLatestAllocationOverflowsByOverflowIdIdStddevPopulationCreateAtAsc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_STDDEV_POPULATION_CREATE_AT_ASC',
  IndexerLatestAllocationOverflowsByOverflowIdIdStddevPopulationCreateAtDesc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_STDDEV_POPULATION_CREATE_AT_DESC',
  IndexerLatestAllocationOverflowsByOverflowIdIdStddevPopulationIdAsc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_STDDEV_POPULATION_ID_ASC',
  IndexerLatestAllocationOverflowsByOverflowIdIdStddevPopulationIdDesc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_STDDEV_POPULATION_ID_DESC',
  IndexerLatestAllocationOverflowsByOverflowIdIdStddevPopulationOverflowIdIdAsc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_STDDEV_POPULATION_OVERFLOW_ID_ID_ASC',
  IndexerLatestAllocationOverflowsByOverflowIdIdStddevPopulationOverflowIdIdDesc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_STDDEV_POPULATION_OVERFLOW_ID_ID_DESC',
  IndexerLatestAllocationOverflowsByOverflowIdIdStddevPopulationUpdateAtAsc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_STDDEV_POPULATION_UPDATE_AT_ASC',
  IndexerLatestAllocationOverflowsByOverflowIdIdStddevPopulationUpdateAtDesc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_STDDEV_POPULATION_UPDATE_AT_DESC',
  IndexerLatestAllocationOverflowsByOverflowIdIdStddevSampleBlockRangeAsc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  IndexerLatestAllocationOverflowsByOverflowIdIdStddevSampleBlockRangeDesc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  IndexerLatestAllocationOverflowsByOverflowIdIdStddevSampleCreateAtAsc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_STDDEV_SAMPLE_CREATE_AT_ASC',
  IndexerLatestAllocationOverflowsByOverflowIdIdStddevSampleCreateAtDesc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_STDDEV_SAMPLE_CREATE_AT_DESC',
  IndexerLatestAllocationOverflowsByOverflowIdIdStddevSampleIdAsc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_STDDEV_SAMPLE_ID_ASC',
  IndexerLatestAllocationOverflowsByOverflowIdIdStddevSampleIdDesc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_STDDEV_SAMPLE_ID_DESC',
  IndexerLatestAllocationOverflowsByOverflowIdIdStddevSampleOverflowIdIdAsc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_STDDEV_SAMPLE_OVERFLOW_ID_ID_ASC',
  IndexerLatestAllocationOverflowsByOverflowIdIdStddevSampleOverflowIdIdDesc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_STDDEV_SAMPLE_OVERFLOW_ID_ID_DESC',
  IndexerLatestAllocationOverflowsByOverflowIdIdStddevSampleUpdateAtAsc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_STDDEV_SAMPLE_UPDATE_AT_ASC',
  IndexerLatestAllocationOverflowsByOverflowIdIdStddevSampleUpdateAtDesc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_STDDEV_SAMPLE_UPDATE_AT_DESC',
  IndexerLatestAllocationOverflowsByOverflowIdIdSumBlockRangeAsc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_SUM_BLOCK_RANGE_ASC',
  IndexerLatestAllocationOverflowsByOverflowIdIdSumBlockRangeDesc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_SUM_BLOCK_RANGE_DESC',
  IndexerLatestAllocationOverflowsByOverflowIdIdSumCreateAtAsc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_SUM_CREATE_AT_ASC',
  IndexerLatestAllocationOverflowsByOverflowIdIdSumCreateAtDesc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_SUM_CREATE_AT_DESC',
  IndexerLatestAllocationOverflowsByOverflowIdIdSumIdAsc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_SUM_ID_ASC',
  IndexerLatestAllocationOverflowsByOverflowIdIdSumIdDesc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_SUM_ID_DESC',
  IndexerLatestAllocationOverflowsByOverflowIdIdSumOverflowIdIdAsc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_SUM_OVERFLOW_ID_ID_ASC',
  IndexerLatestAllocationOverflowsByOverflowIdIdSumOverflowIdIdDesc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_SUM_OVERFLOW_ID_ID_DESC',
  IndexerLatestAllocationOverflowsByOverflowIdIdSumUpdateAtAsc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_SUM_UPDATE_AT_ASC',
  IndexerLatestAllocationOverflowsByOverflowIdIdSumUpdateAtDesc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_SUM_UPDATE_AT_DESC',
  IndexerLatestAllocationOverflowsByOverflowIdIdVariancePopulationBlockRangeAsc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  IndexerLatestAllocationOverflowsByOverflowIdIdVariancePopulationBlockRangeDesc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  IndexerLatestAllocationOverflowsByOverflowIdIdVariancePopulationCreateAtAsc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_VARIANCE_POPULATION_CREATE_AT_ASC',
  IndexerLatestAllocationOverflowsByOverflowIdIdVariancePopulationCreateAtDesc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_VARIANCE_POPULATION_CREATE_AT_DESC',
  IndexerLatestAllocationOverflowsByOverflowIdIdVariancePopulationIdAsc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_VARIANCE_POPULATION_ID_ASC',
  IndexerLatestAllocationOverflowsByOverflowIdIdVariancePopulationIdDesc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_VARIANCE_POPULATION_ID_DESC',
  IndexerLatestAllocationOverflowsByOverflowIdIdVariancePopulationOverflowIdIdAsc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_VARIANCE_POPULATION_OVERFLOW_ID_ID_ASC',
  IndexerLatestAllocationOverflowsByOverflowIdIdVariancePopulationOverflowIdIdDesc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_VARIANCE_POPULATION_OVERFLOW_ID_ID_DESC',
  IndexerLatestAllocationOverflowsByOverflowIdIdVariancePopulationUpdateAtAsc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_VARIANCE_POPULATION_UPDATE_AT_ASC',
  IndexerLatestAllocationOverflowsByOverflowIdIdVariancePopulationUpdateAtDesc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_VARIANCE_POPULATION_UPDATE_AT_DESC',
  IndexerLatestAllocationOverflowsByOverflowIdIdVarianceSampleBlockRangeAsc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  IndexerLatestAllocationOverflowsByOverflowIdIdVarianceSampleBlockRangeDesc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  IndexerLatestAllocationOverflowsByOverflowIdIdVarianceSampleCreateAtAsc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_VARIANCE_SAMPLE_CREATE_AT_ASC',
  IndexerLatestAllocationOverflowsByOverflowIdIdVarianceSampleCreateAtDesc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_VARIANCE_SAMPLE_CREATE_AT_DESC',
  IndexerLatestAllocationOverflowsByOverflowIdIdVarianceSampleIdAsc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_VARIANCE_SAMPLE_ID_ASC',
  IndexerLatestAllocationOverflowsByOverflowIdIdVarianceSampleIdDesc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_VARIANCE_SAMPLE_ID_DESC',
  IndexerLatestAllocationOverflowsByOverflowIdIdVarianceSampleOverflowIdIdAsc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_VARIANCE_SAMPLE_OVERFLOW_ID_ID_ASC',
  IndexerLatestAllocationOverflowsByOverflowIdIdVarianceSampleOverflowIdIdDesc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_VARIANCE_SAMPLE_OVERFLOW_ID_ID_DESC',
  IndexerLatestAllocationOverflowsByOverflowIdIdVarianceSampleUpdateAtAsc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_VARIANCE_SAMPLE_UPDATE_AT_ASC',
  IndexerLatestAllocationOverflowsByOverflowIdIdVarianceSampleUpdateAtDesc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID_VARIANCE_SAMPLE_UPDATE_AT_DESC',
  IndexerLatestAllocationOverflowsByOverflowIdIdCountAsc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID__COUNT_ASC',
  IndexerLatestAllocationOverflowsByOverflowIdIdCountDesc = 'INDEXER_LATEST_ALLOCATION_OVERFLOWS_BY_OVERFLOW_ID_ID__COUNT_DESC',
  Natural = 'NATURAL',
  OverflowEndAsc = 'OVERFLOW_END_ASC',
  OverflowEndDesc = 'OVERFLOW_END_DESC',
  OverflowStartAsc = 'OVERFLOW_START_ASC',
  OverflowStartDesc = 'OVERFLOW_START_DESC',
  OverflowTimeAsc = 'OVERFLOW_TIME_ASC',
  OverflowTimeDesc = 'OVERFLOW_TIME_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  UpdateAtAsc = 'UPDATE_AT_ASC',
  UpdateAtDesc = 'UPDATE_AT_DESC'
}

export type IndexerAllocationReward = Node & {
  __typename?: 'IndexerAllocationReward';
  burnt: Scalars['BigFloat']['output'];
  createAt: Scalars['Datetime']['output'];
  /** Reads a single `Deployment` that is related to this `IndexerAllocationReward`. */
  deployment?: Maybe<Deployment>;
  deploymentId: Scalars['String']['output'];
  eraIdx: Scalars['Int']['output'];
  id: Scalars['String']['output'];
  /** Reads a single `Indexer` that is related to this `IndexerAllocationReward`. */
  indexer?: Maybe<Indexer>;
  indexerId: Scalars['String']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  /** Reads a single `Project` that is related to this `IndexerAllocationReward`. */
  project?: Maybe<Project>;
  projectId: Scalars['String']['output'];
  reward: Scalars['BigFloat']['output'];
};

export type IndexerAllocationRewardAggregates = {
  __typename?: 'IndexerAllocationRewardAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  average?: Maybe<IndexerAllocationRewardAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  distinctCount?: Maybe<IndexerAllocationRewardDistinctCountAggregates>;
  keys?: Maybe<Array<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  max?: Maybe<IndexerAllocationRewardMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  min?: Maybe<IndexerAllocationRewardMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevPopulation?: Maybe<IndexerAllocationRewardStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevSample?: Maybe<IndexerAllocationRewardStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  sum?: Maybe<IndexerAllocationRewardSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  variancePopulation?: Maybe<IndexerAllocationRewardVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  varianceSample?: Maybe<IndexerAllocationRewardVarianceSampleAggregates>;
};

/** A filter to be used against aggregates of `IndexerAllocationReward` object types. */
export type IndexerAllocationRewardAggregatesFilter = {
  /** Mean average aggregate over matching `IndexerAllocationReward` objects. */
  average?: InputMaybe<IndexerAllocationRewardAverageAggregateFilter>;
  /** Distinct count aggregate over matching `IndexerAllocationReward` objects. */
  distinctCount?: InputMaybe<IndexerAllocationRewardDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `IndexerAllocationReward` object to be included within the aggregate. */
  filter?: InputMaybe<IndexerAllocationRewardFilter>;
  /** Maximum aggregate over matching `IndexerAllocationReward` objects. */
  max?: InputMaybe<IndexerAllocationRewardMaxAggregateFilter>;
  /** Minimum aggregate over matching `IndexerAllocationReward` objects. */
  min?: InputMaybe<IndexerAllocationRewardMinAggregateFilter>;
  /** Population standard deviation aggregate over matching `IndexerAllocationReward` objects. */
  stddevPopulation?: InputMaybe<IndexerAllocationRewardStddevPopulationAggregateFilter>;
  /** Sample standard deviation aggregate over matching `IndexerAllocationReward` objects. */
  stddevSample?: InputMaybe<IndexerAllocationRewardStddevSampleAggregateFilter>;
  /** Sum aggregate over matching `IndexerAllocationReward` objects. */
  sum?: InputMaybe<IndexerAllocationRewardSumAggregateFilter>;
  /** Population variance aggregate over matching `IndexerAllocationReward` objects. */
  variancePopulation?: InputMaybe<IndexerAllocationRewardVariancePopulationAggregateFilter>;
  /** Sample variance aggregate over matching `IndexerAllocationReward` objects. */
  varianceSample?: InputMaybe<IndexerAllocationRewardVarianceSampleAggregateFilter>;
};

export type IndexerAllocationRewardAverageAggregateFilter = {
  burnt?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigFloatFilter>;
  reward?: InputMaybe<BigFloatFilter>;
};

export type IndexerAllocationRewardAverageAggregates = {
  __typename?: 'IndexerAllocationRewardAverageAggregates';
  /** Mean average of burnt across the matching connection */
  burnt?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of reward across the matching connection */
  reward?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerAllocationRewardDistinctCountAggregateFilter = {
  _blockRange?: InputMaybe<BigIntFilter>;
  _id?: InputMaybe<BigIntFilter>;
  burnt?: InputMaybe<BigIntFilter>;
  createAt?: InputMaybe<BigIntFilter>;
  deploymentId?: InputMaybe<BigIntFilter>;
  eraIdx?: InputMaybe<BigIntFilter>;
  id?: InputMaybe<BigIntFilter>;
  indexerId?: InputMaybe<BigIntFilter>;
  projectId?: InputMaybe<BigIntFilter>;
  reward?: InputMaybe<BigIntFilter>;
};

export type IndexerAllocationRewardDistinctCountAggregates = {
  __typename?: 'IndexerAllocationRewardDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  _blockRange?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  _id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of burnt across the matching connection */
  burnt?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createAt across the matching connection */
  createAt?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of deploymentId across the matching connection */
  deploymentId?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of indexerId across the matching connection */
  indexerId?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of projectId across the matching connection */
  projectId?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of reward across the matching connection */
  reward?: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `IndexerAllocationReward` object types. All fields are combined with a logical ‘and.’ */
export type IndexerAllocationRewardFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<IndexerAllocationRewardFilter>>;
  /** Filter by the object’s `burnt` field. */
  burnt?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `createAt` field. */
  createAt?: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `deployment` relation. */
  deployment?: InputMaybe<DeploymentFilter>;
  /** Filter by the object’s `deploymentId` field. */
  deploymentId?: InputMaybe<StringFilter>;
  /** Filter by the object’s `eraIdx` field. */
  eraIdx?: InputMaybe<IntFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<StringFilter>;
  /** Filter by the object’s `indexer` relation. */
  indexer?: InputMaybe<IndexerFilter>;
  /** Filter by the object’s `indexerId` field. */
  indexerId?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<IndexerAllocationRewardFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<IndexerAllocationRewardFilter>>;
  /** Filter by the object’s `project` relation. */
  project?: InputMaybe<ProjectFilter>;
  /** Filter by the object’s `projectId` field. */
  projectId?: InputMaybe<StringFilter>;
  /** Filter by the object’s `reward` field. */
  reward?: InputMaybe<BigFloatFilter>;
};

export type IndexerAllocationRewardMaxAggregateFilter = {
  burnt?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<IntFilter>;
  reward?: InputMaybe<BigFloatFilter>;
};

export type IndexerAllocationRewardMaxAggregates = {
  __typename?: 'IndexerAllocationRewardMaxAggregates';
  /** Maximum of burnt across the matching connection */
  burnt?: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['Int']['output']>;
  /** Maximum of reward across the matching connection */
  reward?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerAllocationRewardMinAggregateFilter = {
  burnt?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<IntFilter>;
  reward?: InputMaybe<BigFloatFilter>;
};

export type IndexerAllocationRewardMinAggregates = {
  __typename?: 'IndexerAllocationRewardMinAggregates';
  /** Minimum of burnt across the matching connection */
  burnt?: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['Int']['output']>;
  /** Minimum of reward across the matching connection */
  reward?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerAllocationRewardStddevPopulationAggregateFilter = {
  burnt?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigFloatFilter>;
  reward?: InputMaybe<BigFloatFilter>;
};

export type IndexerAllocationRewardStddevPopulationAggregates = {
  __typename?: 'IndexerAllocationRewardStddevPopulationAggregates';
  /** Population standard deviation of burnt across the matching connection */
  burnt?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of reward across the matching connection */
  reward?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerAllocationRewardStddevSampleAggregateFilter = {
  burnt?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigFloatFilter>;
  reward?: InputMaybe<BigFloatFilter>;
};

export type IndexerAllocationRewardStddevSampleAggregates = {
  __typename?: 'IndexerAllocationRewardStddevSampleAggregates';
  /** Sample standard deviation of burnt across the matching connection */
  burnt?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of reward across the matching connection */
  reward?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerAllocationRewardSumAggregateFilter = {
  burnt?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigIntFilter>;
  reward?: InputMaybe<BigFloatFilter>;
};

export type IndexerAllocationRewardSumAggregates = {
  __typename?: 'IndexerAllocationRewardSumAggregates';
  /** Sum of burnt across the matching connection */
  burnt: Scalars['BigFloat']['output'];
  /** Sum of eraIdx across the matching connection */
  eraIdx: Scalars['BigInt']['output'];
  /** Sum of reward across the matching connection */
  reward: Scalars['BigFloat']['output'];
};

/** A connection to a list of `IndexerAllocationRewardSummary` values. */
export type IndexerAllocationRewardSummariesConnection = {
  __typename?: 'IndexerAllocationRewardSummariesConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<IndexerAllocationRewardSummaryAggregates>;
  /** A list of edges which contains the `IndexerAllocationRewardSummary` and cursor to aid in pagination. */
  edges: Array<IndexerAllocationRewardSummariesEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<IndexerAllocationRewardSummaryAggregates>>;
  /** A list of `IndexerAllocationRewardSummary` objects. */
  nodes: Array<Maybe<IndexerAllocationRewardSummary>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `IndexerAllocationRewardSummary` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `IndexerAllocationRewardSummary` values. */
export type IndexerAllocationRewardSummariesConnectionGroupedAggregatesArgs = {
  groupBy: Array<IndexerAllocationRewardSummariesGroupBy>;
  having?: InputMaybe<IndexerAllocationRewardSummariesHavingInput>;
};

/** A `IndexerAllocationRewardSummary` edge in the connection. */
export type IndexerAllocationRewardSummariesEdge = {
  __typename?: 'IndexerAllocationRewardSummariesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `IndexerAllocationRewardSummary` at the end of the edge. */
  node?: Maybe<IndexerAllocationRewardSummary>;
};

/** Grouping methods for `IndexerAllocationRewardSummary` for usage during aggregation. */
export enum IndexerAllocationRewardSummariesGroupBy {
  CreateAt = 'CREATE_AT',
  CreateAtTruncatedToDay = 'CREATE_AT_TRUNCATED_TO_DAY',
  CreateAtTruncatedToHour = 'CREATE_AT_TRUNCATED_TO_HOUR',
  DeploymentId = 'DEPLOYMENT_ID',
  Id = 'ID',
  IndexerId = 'INDEXER_ID',
  ProjectId = 'PROJECT_ID',
  TotalBurnt = 'TOTAL_BURNT',
  TotalReward = 'TOTAL_REWARD',
  UpdateAt = 'UPDATE_AT',
  UpdateAtTruncatedToDay = 'UPDATE_AT_TRUNCATED_TO_DAY',
  UpdateAtTruncatedToHour = 'UPDATE_AT_TRUNCATED_TO_HOUR'
}

export type IndexerAllocationRewardSummariesHavingAverageInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  totalBurnt?: InputMaybe<HavingBigfloatFilter>;
  totalReward?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerAllocationRewardSummariesHavingDistinctCountInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  totalBurnt?: InputMaybe<HavingBigfloatFilter>;
  totalReward?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

/** Conditions for `IndexerAllocationRewardSummary` aggregates. */
export type IndexerAllocationRewardSummariesHavingInput = {
  AND?: InputMaybe<Array<IndexerAllocationRewardSummariesHavingInput>>;
  OR?: InputMaybe<Array<IndexerAllocationRewardSummariesHavingInput>>;
  average?: InputMaybe<IndexerAllocationRewardSummariesHavingAverageInput>;
  distinctCount?: InputMaybe<IndexerAllocationRewardSummariesHavingDistinctCountInput>;
  max?: InputMaybe<IndexerAllocationRewardSummariesHavingMaxInput>;
  min?: InputMaybe<IndexerAllocationRewardSummariesHavingMinInput>;
  stddevPopulation?: InputMaybe<IndexerAllocationRewardSummariesHavingStddevPopulationInput>;
  stddevSample?: InputMaybe<IndexerAllocationRewardSummariesHavingStddevSampleInput>;
  sum?: InputMaybe<IndexerAllocationRewardSummariesHavingSumInput>;
  variancePopulation?: InputMaybe<IndexerAllocationRewardSummariesHavingVariancePopulationInput>;
  varianceSample?: InputMaybe<IndexerAllocationRewardSummariesHavingVarianceSampleInput>;
};

export type IndexerAllocationRewardSummariesHavingMaxInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  totalBurnt?: InputMaybe<HavingBigfloatFilter>;
  totalReward?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerAllocationRewardSummariesHavingMinInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  totalBurnt?: InputMaybe<HavingBigfloatFilter>;
  totalReward?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerAllocationRewardSummariesHavingStddevPopulationInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  totalBurnt?: InputMaybe<HavingBigfloatFilter>;
  totalReward?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerAllocationRewardSummariesHavingStddevSampleInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  totalBurnt?: InputMaybe<HavingBigfloatFilter>;
  totalReward?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerAllocationRewardSummariesHavingSumInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  totalBurnt?: InputMaybe<HavingBigfloatFilter>;
  totalReward?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerAllocationRewardSummariesHavingVariancePopulationInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  totalBurnt?: InputMaybe<HavingBigfloatFilter>;
  totalReward?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerAllocationRewardSummariesHavingVarianceSampleInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  totalBurnt?: InputMaybe<HavingBigfloatFilter>;
  totalReward?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

/** Methods to use when ordering `IndexerAllocationRewardSummary`. */
export enum IndexerAllocationRewardSummariesOrderBy {
  CreateAtAsc = 'CREATE_AT_ASC',
  CreateAtDesc = 'CREATE_AT_DESC',
  DeploymentByDeploymentIdCreatedBlockAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_ASC',
  DeploymentByDeploymentIdCreatedBlockDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_DESC',
  DeploymentByDeploymentIdCreatedTimestampAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_ASC',
  DeploymentByDeploymentIdCreatedTimestampDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_DESC',
  DeploymentByDeploymentIdIdAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__ID_ASC',
  DeploymentByDeploymentIdIdDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__ID_DESC',
  DeploymentByDeploymentIdLastEventAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_ASC',
  DeploymentByDeploymentIdLastEventDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_DESC',
  DeploymentByDeploymentIdMetadataAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_ASC',
  DeploymentByDeploymentIdMetadataDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_DESC',
  DeploymentByDeploymentIdProjectIdAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_ASC',
  DeploymentByDeploymentIdProjectIdDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_DESC',
  DeploymentIdAsc = 'DEPLOYMENT_ID_ASC',
  DeploymentIdDesc = 'DEPLOYMENT_ID_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  IndexerByIndexerIdActiveAsc = 'INDEXER_BY_INDEXER_ID__ACTIVE_ASC',
  IndexerByIndexerIdActiveDesc = 'INDEXER_BY_INDEXER_ID__ACTIVE_DESC',
  IndexerByIndexerIdCapacityAsc = 'INDEXER_BY_INDEXER_ID__CAPACITY_ASC',
  IndexerByIndexerIdCapacityDesc = 'INDEXER_BY_INDEXER_ID__CAPACITY_DESC',
  IndexerByIndexerIdCommissionAsc = 'INDEXER_BY_INDEXER_ID__COMMISSION_ASC',
  IndexerByIndexerIdCommissionDesc = 'INDEXER_BY_INDEXER_ID__COMMISSION_DESC',
  IndexerByIndexerIdControllerAsc = 'INDEXER_BY_INDEXER_ID__CONTROLLER_ASC',
  IndexerByIndexerIdControllerDesc = 'INDEXER_BY_INDEXER_ID__CONTROLLER_DESC',
  IndexerByIndexerIdCreatedBlockAsc = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_ASC',
  IndexerByIndexerIdCreatedBlockDesc = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_DESC',
  IndexerByIndexerIdIdAsc = 'INDEXER_BY_INDEXER_ID__ID_ASC',
  IndexerByIndexerIdIdDesc = 'INDEXER_BY_INDEXER_ID__ID_DESC',
  IndexerByIndexerIdLastClaimEraAsc = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_ASC',
  IndexerByIndexerIdLastClaimEraDesc = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_DESC',
  IndexerByIndexerIdLastEventAsc = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_ASC',
  IndexerByIndexerIdLastEventDesc = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_DESC',
  IndexerByIndexerIdLastSettledEraAsc = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_ASC',
  IndexerByIndexerIdLastSettledEraDesc = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_DESC',
  IndexerByIndexerIdMaxUnstakeAmountAsc = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_ASC',
  IndexerByIndexerIdMaxUnstakeAmountDesc = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_DESC',
  IndexerByIndexerIdMetadataAsc = 'INDEXER_BY_INDEXER_ID__METADATA_ASC',
  IndexerByIndexerIdMetadataDesc = 'INDEXER_BY_INDEXER_ID__METADATA_DESC',
  IndexerByIndexerIdSelfStakeAsc = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_ASC',
  IndexerByIndexerIdSelfStakeDesc = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_DESC',
  IndexerByIndexerIdTotalStakeAsc = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_ASC',
  IndexerByIndexerIdTotalStakeDesc = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_DESC',
  IndexerIdAsc = 'INDEXER_ID_ASC',
  IndexerIdDesc = 'INDEXER_ID_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  ProjectByProjectIdBoostAllocationRatioAsc = 'PROJECT_BY_PROJECT_ID__BOOST_ALLOCATION_RATIO_ASC',
  ProjectByProjectIdBoostAllocationRatioDesc = 'PROJECT_BY_PROJECT_ID__BOOST_ALLOCATION_RATIO_DESC',
  ProjectByProjectIdCreatedBlockAsc = 'PROJECT_BY_PROJECT_ID__CREATED_BLOCK_ASC',
  ProjectByProjectIdCreatedBlockDesc = 'PROJECT_BY_PROJECT_ID__CREATED_BLOCK_DESC',
  ProjectByProjectIdCreatedTimestampAsc = 'PROJECT_BY_PROJECT_ID__CREATED_TIMESTAMP_ASC',
  ProjectByProjectIdCreatedTimestampDesc = 'PROJECT_BY_PROJECT_ID__CREATED_TIMESTAMP_DESC',
  ProjectByProjectIdDeploymentIdAsc = 'PROJECT_BY_PROJECT_ID__DEPLOYMENT_ID_ASC',
  ProjectByProjectIdDeploymentIdDesc = 'PROJECT_BY_PROJECT_ID__DEPLOYMENT_ID_DESC',
  ProjectByProjectIdDeploymentMetadataAsc = 'PROJECT_BY_PROJECT_ID__DEPLOYMENT_METADATA_ASC',
  ProjectByProjectIdDeploymentMetadataDesc = 'PROJECT_BY_PROJECT_ID__DEPLOYMENT_METADATA_DESC',
  ProjectByProjectIdIdAsc = 'PROJECT_BY_PROJECT_ID__ID_ASC',
  ProjectByProjectIdIdDesc = 'PROJECT_BY_PROJECT_ID__ID_DESC',
  ProjectByProjectIdLastEventAsc = 'PROJECT_BY_PROJECT_ID__LAST_EVENT_ASC',
  ProjectByProjectIdLastEventDesc = 'PROJECT_BY_PROJECT_ID__LAST_EVENT_DESC',
  ProjectByProjectIdMetadataAsc = 'PROJECT_BY_PROJECT_ID__METADATA_ASC',
  ProjectByProjectIdMetadataDesc = 'PROJECT_BY_PROJECT_ID__METADATA_DESC',
  ProjectByProjectIdOwnerAsc = 'PROJECT_BY_PROJECT_ID__OWNER_ASC',
  ProjectByProjectIdOwnerDesc = 'PROJECT_BY_PROJECT_ID__OWNER_DESC',
  ProjectByProjectIdTotalAllocationAsc = 'PROJECT_BY_PROJECT_ID__TOTAL_ALLOCATION_ASC',
  ProjectByProjectIdTotalAllocationDesc = 'PROJECT_BY_PROJECT_ID__TOTAL_ALLOCATION_DESC',
  ProjectByProjectIdTotalBoostAsc = 'PROJECT_BY_PROJECT_ID__TOTAL_BOOST_ASC',
  ProjectByProjectIdTotalBoostDesc = 'PROJECT_BY_PROJECT_ID__TOTAL_BOOST_DESC',
  ProjectByProjectIdTotalRewardAsc = 'PROJECT_BY_PROJECT_ID__TOTAL_REWARD_ASC',
  ProjectByProjectIdTotalRewardDesc = 'PROJECT_BY_PROJECT_ID__TOTAL_REWARD_DESC',
  ProjectByProjectIdTypeAsc = 'PROJECT_BY_PROJECT_ID__TYPE_ASC',
  ProjectByProjectIdTypeDesc = 'PROJECT_BY_PROJECT_ID__TYPE_DESC',
  ProjectByProjectIdUpdatedTimestampAsc = 'PROJECT_BY_PROJECT_ID__UPDATED_TIMESTAMP_ASC',
  ProjectByProjectIdUpdatedTimestampDesc = 'PROJECT_BY_PROJECT_ID__UPDATED_TIMESTAMP_DESC',
  ProjectIdAsc = 'PROJECT_ID_ASC',
  ProjectIdDesc = 'PROJECT_ID_DESC',
  TotalBurntAsc = 'TOTAL_BURNT_ASC',
  TotalBurntDesc = 'TOTAL_BURNT_DESC',
  TotalRewardAsc = 'TOTAL_REWARD_ASC',
  TotalRewardDesc = 'TOTAL_REWARD_DESC',
  UpdateAtAsc = 'UPDATE_AT_ASC',
  UpdateAtDesc = 'UPDATE_AT_DESC'
}

export type IndexerAllocationRewardSummary = Node & {
  __typename?: 'IndexerAllocationRewardSummary';
  createAt: Scalars['Datetime']['output'];
  /** Reads a single `Deployment` that is related to this `IndexerAllocationRewardSummary`. */
  deployment?: Maybe<Deployment>;
  deploymentId: Scalars['String']['output'];
  id: Scalars['String']['output'];
  /** Reads a single `Indexer` that is related to this `IndexerAllocationRewardSummary`. */
  indexer?: Maybe<Indexer>;
  indexerId: Scalars['String']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  /** Reads a single `Project` that is related to this `IndexerAllocationRewardSummary`. */
  project?: Maybe<Project>;
  projectId: Scalars['String']['output'];
  totalBurnt: Scalars['BigFloat']['output'];
  totalReward: Scalars['BigFloat']['output'];
  updateAt: Scalars['Datetime']['output'];
};

export type IndexerAllocationRewardSummaryAggregates = {
  __typename?: 'IndexerAllocationRewardSummaryAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  average?: Maybe<IndexerAllocationRewardSummaryAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  distinctCount?: Maybe<IndexerAllocationRewardSummaryDistinctCountAggregates>;
  keys?: Maybe<Array<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  max?: Maybe<IndexerAllocationRewardSummaryMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  min?: Maybe<IndexerAllocationRewardSummaryMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevPopulation?: Maybe<IndexerAllocationRewardSummaryStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevSample?: Maybe<IndexerAllocationRewardSummaryStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  sum?: Maybe<IndexerAllocationRewardSummarySumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  variancePopulation?: Maybe<IndexerAllocationRewardSummaryVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  varianceSample?: Maybe<IndexerAllocationRewardSummaryVarianceSampleAggregates>;
};

/** A filter to be used against aggregates of `IndexerAllocationRewardSummary` object types. */
export type IndexerAllocationRewardSummaryAggregatesFilter = {
  /** Mean average aggregate over matching `IndexerAllocationRewardSummary` objects. */
  average?: InputMaybe<IndexerAllocationRewardSummaryAverageAggregateFilter>;
  /** Distinct count aggregate over matching `IndexerAllocationRewardSummary` objects. */
  distinctCount?: InputMaybe<IndexerAllocationRewardSummaryDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `IndexerAllocationRewardSummary` object to be included within the aggregate. */
  filter?: InputMaybe<IndexerAllocationRewardSummaryFilter>;
  /** Maximum aggregate over matching `IndexerAllocationRewardSummary` objects. */
  max?: InputMaybe<IndexerAllocationRewardSummaryMaxAggregateFilter>;
  /** Minimum aggregate over matching `IndexerAllocationRewardSummary` objects. */
  min?: InputMaybe<IndexerAllocationRewardSummaryMinAggregateFilter>;
  /** Population standard deviation aggregate over matching `IndexerAllocationRewardSummary` objects. */
  stddevPopulation?: InputMaybe<IndexerAllocationRewardSummaryStddevPopulationAggregateFilter>;
  /** Sample standard deviation aggregate over matching `IndexerAllocationRewardSummary` objects. */
  stddevSample?: InputMaybe<IndexerAllocationRewardSummaryStddevSampleAggregateFilter>;
  /** Sum aggregate over matching `IndexerAllocationRewardSummary` objects. */
  sum?: InputMaybe<IndexerAllocationRewardSummarySumAggregateFilter>;
  /** Population variance aggregate over matching `IndexerAllocationRewardSummary` objects. */
  variancePopulation?: InputMaybe<IndexerAllocationRewardSummaryVariancePopulationAggregateFilter>;
  /** Sample variance aggregate over matching `IndexerAllocationRewardSummary` objects. */
  varianceSample?: InputMaybe<IndexerAllocationRewardSummaryVarianceSampleAggregateFilter>;
};

export type IndexerAllocationRewardSummaryAverageAggregateFilter = {
  totalBurnt?: InputMaybe<BigFloatFilter>;
  totalReward?: InputMaybe<BigFloatFilter>;
};

export type IndexerAllocationRewardSummaryAverageAggregates = {
  __typename?: 'IndexerAllocationRewardSummaryAverageAggregates';
  /** Mean average of totalBurnt across the matching connection */
  totalBurnt?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of totalReward across the matching connection */
  totalReward?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerAllocationRewardSummaryDistinctCountAggregateFilter = {
  _blockRange?: InputMaybe<BigIntFilter>;
  _id?: InputMaybe<BigIntFilter>;
  createAt?: InputMaybe<BigIntFilter>;
  deploymentId?: InputMaybe<BigIntFilter>;
  id?: InputMaybe<BigIntFilter>;
  indexerId?: InputMaybe<BigIntFilter>;
  projectId?: InputMaybe<BigIntFilter>;
  totalBurnt?: InputMaybe<BigIntFilter>;
  totalReward?: InputMaybe<BigIntFilter>;
  updateAt?: InputMaybe<BigIntFilter>;
};

export type IndexerAllocationRewardSummaryDistinctCountAggregates = {
  __typename?: 'IndexerAllocationRewardSummaryDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  _blockRange?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  _id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createAt across the matching connection */
  createAt?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of deploymentId across the matching connection */
  deploymentId?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of indexerId across the matching connection */
  indexerId?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of projectId across the matching connection */
  projectId?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of totalBurnt across the matching connection */
  totalBurnt?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of totalReward across the matching connection */
  totalReward?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of updateAt across the matching connection */
  updateAt?: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `IndexerAllocationRewardSummary` object types. All fields are combined with a logical ‘and.’ */
export type IndexerAllocationRewardSummaryFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<IndexerAllocationRewardSummaryFilter>>;
  /** Filter by the object’s `createAt` field. */
  createAt?: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `deployment` relation. */
  deployment?: InputMaybe<DeploymentFilter>;
  /** Filter by the object’s `deploymentId` field. */
  deploymentId?: InputMaybe<StringFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<StringFilter>;
  /** Filter by the object’s `indexer` relation. */
  indexer?: InputMaybe<IndexerFilter>;
  /** Filter by the object’s `indexerId` field. */
  indexerId?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<IndexerAllocationRewardSummaryFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<IndexerAllocationRewardSummaryFilter>>;
  /** Filter by the object’s `project` relation. */
  project?: InputMaybe<ProjectFilter>;
  /** Filter by the object’s `projectId` field. */
  projectId?: InputMaybe<StringFilter>;
  /** Filter by the object’s `totalBurnt` field. */
  totalBurnt?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `totalReward` field. */
  totalReward?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `updateAt` field. */
  updateAt?: InputMaybe<DatetimeFilter>;
};

export type IndexerAllocationRewardSummaryMaxAggregateFilter = {
  totalBurnt?: InputMaybe<BigFloatFilter>;
  totalReward?: InputMaybe<BigFloatFilter>;
};

export type IndexerAllocationRewardSummaryMaxAggregates = {
  __typename?: 'IndexerAllocationRewardSummaryMaxAggregates';
  /** Maximum of totalBurnt across the matching connection */
  totalBurnt?: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of totalReward across the matching connection */
  totalReward?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerAllocationRewardSummaryMinAggregateFilter = {
  totalBurnt?: InputMaybe<BigFloatFilter>;
  totalReward?: InputMaybe<BigFloatFilter>;
};

export type IndexerAllocationRewardSummaryMinAggregates = {
  __typename?: 'IndexerAllocationRewardSummaryMinAggregates';
  /** Minimum of totalBurnt across the matching connection */
  totalBurnt?: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of totalReward across the matching connection */
  totalReward?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerAllocationRewardSummaryStddevPopulationAggregateFilter = {
  totalBurnt?: InputMaybe<BigFloatFilter>;
  totalReward?: InputMaybe<BigFloatFilter>;
};

export type IndexerAllocationRewardSummaryStddevPopulationAggregates = {
  __typename?: 'IndexerAllocationRewardSummaryStddevPopulationAggregates';
  /** Population standard deviation of totalBurnt across the matching connection */
  totalBurnt?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of totalReward across the matching connection */
  totalReward?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerAllocationRewardSummaryStddevSampleAggregateFilter = {
  totalBurnt?: InputMaybe<BigFloatFilter>;
  totalReward?: InputMaybe<BigFloatFilter>;
};

export type IndexerAllocationRewardSummaryStddevSampleAggregates = {
  __typename?: 'IndexerAllocationRewardSummaryStddevSampleAggregates';
  /** Sample standard deviation of totalBurnt across the matching connection */
  totalBurnt?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of totalReward across the matching connection */
  totalReward?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerAllocationRewardSummarySumAggregateFilter = {
  totalBurnt?: InputMaybe<BigFloatFilter>;
  totalReward?: InputMaybe<BigFloatFilter>;
};

export type IndexerAllocationRewardSummarySumAggregates = {
  __typename?: 'IndexerAllocationRewardSummarySumAggregates';
  /** Sum of totalBurnt across the matching connection */
  totalBurnt: Scalars['BigFloat']['output'];
  /** Sum of totalReward across the matching connection */
  totalReward: Scalars['BigFloat']['output'];
};

export type IndexerAllocationRewardSummaryVariancePopulationAggregateFilter = {
  totalBurnt?: InputMaybe<BigFloatFilter>;
  totalReward?: InputMaybe<BigFloatFilter>;
};

export type IndexerAllocationRewardSummaryVariancePopulationAggregates = {
  __typename?: 'IndexerAllocationRewardSummaryVariancePopulationAggregates';
  /** Population variance of totalBurnt across the matching connection */
  totalBurnt?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of totalReward across the matching connection */
  totalReward?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerAllocationRewardSummaryVarianceSampleAggregateFilter = {
  totalBurnt?: InputMaybe<BigFloatFilter>;
  totalReward?: InputMaybe<BigFloatFilter>;
};

export type IndexerAllocationRewardSummaryVarianceSampleAggregates = {
  __typename?: 'IndexerAllocationRewardSummaryVarianceSampleAggregates';
  /** Sample variance of totalBurnt across the matching connection */
  totalBurnt?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of totalReward across the matching connection */
  totalReward?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerAllocationRewardVariancePopulationAggregateFilter = {
  burnt?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigFloatFilter>;
  reward?: InputMaybe<BigFloatFilter>;
};

export type IndexerAllocationRewardVariancePopulationAggregates = {
  __typename?: 'IndexerAllocationRewardVariancePopulationAggregates';
  /** Population variance of burnt across the matching connection */
  burnt?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of reward across the matching connection */
  reward?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerAllocationRewardVarianceSampleAggregateFilter = {
  burnt?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigFloatFilter>;
  reward?: InputMaybe<BigFloatFilter>;
};

export type IndexerAllocationRewardVarianceSampleAggregates = {
  __typename?: 'IndexerAllocationRewardVarianceSampleAggregates';
  /** Sample variance of burnt across the matching connection */
  burnt?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of reward across the matching connection */
  reward?: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `IndexerAllocationReward` values. */
export type IndexerAllocationRewardsConnection = {
  __typename?: 'IndexerAllocationRewardsConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<IndexerAllocationRewardAggregates>;
  /** A list of edges which contains the `IndexerAllocationReward` and cursor to aid in pagination. */
  edges: Array<IndexerAllocationRewardsEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<IndexerAllocationRewardAggregates>>;
  /** A list of `IndexerAllocationReward` objects. */
  nodes: Array<Maybe<IndexerAllocationReward>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `IndexerAllocationReward` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `IndexerAllocationReward` values. */
export type IndexerAllocationRewardsConnectionGroupedAggregatesArgs = {
  groupBy: Array<IndexerAllocationRewardsGroupBy>;
  having?: InputMaybe<IndexerAllocationRewardsHavingInput>;
};

/** A `IndexerAllocationReward` edge in the connection. */
export type IndexerAllocationRewardsEdge = {
  __typename?: 'IndexerAllocationRewardsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `IndexerAllocationReward` at the end of the edge. */
  node?: Maybe<IndexerAllocationReward>;
};

/** Grouping methods for `IndexerAllocationReward` for usage during aggregation. */
export enum IndexerAllocationRewardsGroupBy {
  Burnt = 'BURNT',
  CreateAt = 'CREATE_AT',
  CreateAtTruncatedToDay = 'CREATE_AT_TRUNCATED_TO_DAY',
  CreateAtTruncatedToHour = 'CREATE_AT_TRUNCATED_TO_HOUR',
  DeploymentId = 'DEPLOYMENT_ID',
  EraIdx = 'ERA_IDX',
  Id = 'ID',
  IndexerId = 'INDEXER_ID',
  ProjectId = 'PROJECT_ID',
  Reward = 'REWARD'
}

export type IndexerAllocationRewardsHavingAverageInput = {
  burnt?: InputMaybe<HavingBigfloatFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  reward?: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerAllocationRewardsHavingDistinctCountInput = {
  burnt?: InputMaybe<HavingBigfloatFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  reward?: InputMaybe<HavingBigfloatFilter>;
};

/** Conditions for `IndexerAllocationReward` aggregates. */
export type IndexerAllocationRewardsHavingInput = {
  AND?: InputMaybe<Array<IndexerAllocationRewardsHavingInput>>;
  OR?: InputMaybe<Array<IndexerAllocationRewardsHavingInput>>;
  average?: InputMaybe<IndexerAllocationRewardsHavingAverageInput>;
  distinctCount?: InputMaybe<IndexerAllocationRewardsHavingDistinctCountInput>;
  max?: InputMaybe<IndexerAllocationRewardsHavingMaxInput>;
  min?: InputMaybe<IndexerAllocationRewardsHavingMinInput>;
  stddevPopulation?: InputMaybe<IndexerAllocationRewardsHavingStddevPopulationInput>;
  stddevSample?: InputMaybe<IndexerAllocationRewardsHavingStddevSampleInput>;
  sum?: InputMaybe<IndexerAllocationRewardsHavingSumInput>;
  variancePopulation?: InputMaybe<IndexerAllocationRewardsHavingVariancePopulationInput>;
  varianceSample?: InputMaybe<IndexerAllocationRewardsHavingVarianceSampleInput>;
};

export type IndexerAllocationRewardsHavingMaxInput = {
  burnt?: InputMaybe<HavingBigfloatFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  reward?: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerAllocationRewardsHavingMinInput = {
  burnt?: InputMaybe<HavingBigfloatFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  reward?: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerAllocationRewardsHavingStddevPopulationInput = {
  burnt?: InputMaybe<HavingBigfloatFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  reward?: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerAllocationRewardsHavingStddevSampleInput = {
  burnt?: InputMaybe<HavingBigfloatFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  reward?: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerAllocationRewardsHavingSumInput = {
  burnt?: InputMaybe<HavingBigfloatFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  reward?: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerAllocationRewardsHavingVariancePopulationInput = {
  burnt?: InputMaybe<HavingBigfloatFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  reward?: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerAllocationRewardsHavingVarianceSampleInput = {
  burnt?: InputMaybe<HavingBigfloatFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  reward?: InputMaybe<HavingBigfloatFilter>;
};

/** Methods to use when ordering `IndexerAllocationReward`. */
export enum IndexerAllocationRewardsOrderBy {
  BurntAsc = 'BURNT_ASC',
  BurntDesc = 'BURNT_DESC',
  CreateAtAsc = 'CREATE_AT_ASC',
  CreateAtDesc = 'CREATE_AT_DESC',
  DeploymentByDeploymentIdCreatedBlockAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_ASC',
  DeploymentByDeploymentIdCreatedBlockDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_DESC',
  DeploymentByDeploymentIdCreatedTimestampAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_ASC',
  DeploymentByDeploymentIdCreatedTimestampDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_DESC',
  DeploymentByDeploymentIdIdAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__ID_ASC',
  DeploymentByDeploymentIdIdDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__ID_DESC',
  DeploymentByDeploymentIdLastEventAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_ASC',
  DeploymentByDeploymentIdLastEventDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_DESC',
  DeploymentByDeploymentIdMetadataAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_ASC',
  DeploymentByDeploymentIdMetadataDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_DESC',
  DeploymentByDeploymentIdProjectIdAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_ASC',
  DeploymentByDeploymentIdProjectIdDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_DESC',
  DeploymentIdAsc = 'DEPLOYMENT_ID_ASC',
  DeploymentIdDesc = 'DEPLOYMENT_ID_DESC',
  EraIdxAsc = 'ERA_IDX_ASC',
  EraIdxDesc = 'ERA_IDX_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  IndexerByIndexerIdActiveAsc = 'INDEXER_BY_INDEXER_ID__ACTIVE_ASC',
  IndexerByIndexerIdActiveDesc = 'INDEXER_BY_INDEXER_ID__ACTIVE_DESC',
  IndexerByIndexerIdCapacityAsc = 'INDEXER_BY_INDEXER_ID__CAPACITY_ASC',
  IndexerByIndexerIdCapacityDesc = 'INDEXER_BY_INDEXER_ID__CAPACITY_DESC',
  IndexerByIndexerIdCommissionAsc = 'INDEXER_BY_INDEXER_ID__COMMISSION_ASC',
  IndexerByIndexerIdCommissionDesc = 'INDEXER_BY_INDEXER_ID__COMMISSION_DESC',
  IndexerByIndexerIdControllerAsc = 'INDEXER_BY_INDEXER_ID__CONTROLLER_ASC',
  IndexerByIndexerIdControllerDesc = 'INDEXER_BY_INDEXER_ID__CONTROLLER_DESC',
  IndexerByIndexerIdCreatedBlockAsc = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_ASC',
  IndexerByIndexerIdCreatedBlockDesc = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_DESC',
  IndexerByIndexerIdIdAsc = 'INDEXER_BY_INDEXER_ID__ID_ASC',
  IndexerByIndexerIdIdDesc = 'INDEXER_BY_INDEXER_ID__ID_DESC',
  IndexerByIndexerIdLastClaimEraAsc = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_ASC',
  IndexerByIndexerIdLastClaimEraDesc = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_DESC',
  IndexerByIndexerIdLastEventAsc = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_ASC',
  IndexerByIndexerIdLastEventDesc = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_DESC',
  IndexerByIndexerIdLastSettledEraAsc = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_ASC',
  IndexerByIndexerIdLastSettledEraDesc = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_DESC',
  IndexerByIndexerIdMaxUnstakeAmountAsc = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_ASC',
  IndexerByIndexerIdMaxUnstakeAmountDesc = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_DESC',
  IndexerByIndexerIdMetadataAsc = 'INDEXER_BY_INDEXER_ID__METADATA_ASC',
  IndexerByIndexerIdMetadataDesc = 'INDEXER_BY_INDEXER_ID__METADATA_DESC',
  IndexerByIndexerIdSelfStakeAsc = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_ASC',
  IndexerByIndexerIdSelfStakeDesc = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_DESC',
  IndexerByIndexerIdTotalStakeAsc = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_ASC',
  IndexerByIndexerIdTotalStakeDesc = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_DESC',
  IndexerIdAsc = 'INDEXER_ID_ASC',
  IndexerIdDesc = 'INDEXER_ID_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  ProjectByProjectIdBoostAllocationRatioAsc = 'PROJECT_BY_PROJECT_ID__BOOST_ALLOCATION_RATIO_ASC',
  ProjectByProjectIdBoostAllocationRatioDesc = 'PROJECT_BY_PROJECT_ID__BOOST_ALLOCATION_RATIO_DESC',
  ProjectByProjectIdCreatedBlockAsc = 'PROJECT_BY_PROJECT_ID__CREATED_BLOCK_ASC',
  ProjectByProjectIdCreatedBlockDesc = 'PROJECT_BY_PROJECT_ID__CREATED_BLOCK_DESC',
  ProjectByProjectIdCreatedTimestampAsc = 'PROJECT_BY_PROJECT_ID__CREATED_TIMESTAMP_ASC',
  ProjectByProjectIdCreatedTimestampDesc = 'PROJECT_BY_PROJECT_ID__CREATED_TIMESTAMP_DESC',
  ProjectByProjectIdDeploymentIdAsc = 'PROJECT_BY_PROJECT_ID__DEPLOYMENT_ID_ASC',
  ProjectByProjectIdDeploymentIdDesc = 'PROJECT_BY_PROJECT_ID__DEPLOYMENT_ID_DESC',
  ProjectByProjectIdDeploymentMetadataAsc = 'PROJECT_BY_PROJECT_ID__DEPLOYMENT_METADATA_ASC',
  ProjectByProjectIdDeploymentMetadataDesc = 'PROJECT_BY_PROJECT_ID__DEPLOYMENT_METADATA_DESC',
  ProjectByProjectIdIdAsc = 'PROJECT_BY_PROJECT_ID__ID_ASC',
  ProjectByProjectIdIdDesc = 'PROJECT_BY_PROJECT_ID__ID_DESC',
  ProjectByProjectIdLastEventAsc = 'PROJECT_BY_PROJECT_ID__LAST_EVENT_ASC',
  ProjectByProjectIdLastEventDesc = 'PROJECT_BY_PROJECT_ID__LAST_EVENT_DESC',
  ProjectByProjectIdMetadataAsc = 'PROJECT_BY_PROJECT_ID__METADATA_ASC',
  ProjectByProjectIdMetadataDesc = 'PROJECT_BY_PROJECT_ID__METADATA_DESC',
  ProjectByProjectIdOwnerAsc = 'PROJECT_BY_PROJECT_ID__OWNER_ASC',
  ProjectByProjectIdOwnerDesc = 'PROJECT_BY_PROJECT_ID__OWNER_DESC',
  ProjectByProjectIdTotalAllocationAsc = 'PROJECT_BY_PROJECT_ID__TOTAL_ALLOCATION_ASC',
  ProjectByProjectIdTotalAllocationDesc = 'PROJECT_BY_PROJECT_ID__TOTAL_ALLOCATION_DESC',
  ProjectByProjectIdTotalBoostAsc = 'PROJECT_BY_PROJECT_ID__TOTAL_BOOST_ASC',
  ProjectByProjectIdTotalBoostDesc = 'PROJECT_BY_PROJECT_ID__TOTAL_BOOST_DESC',
  ProjectByProjectIdTotalRewardAsc = 'PROJECT_BY_PROJECT_ID__TOTAL_REWARD_ASC',
  ProjectByProjectIdTotalRewardDesc = 'PROJECT_BY_PROJECT_ID__TOTAL_REWARD_DESC',
  ProjectByProjectIdTypeAsc = 'PROJECT_BY_PROJECT_ID__TYPE_ASC',
  ProjectByProjectIdTypeDesc = 'PROJECT_BY_PROJECT_ID__TYPE_DESC',
  ProjectByProjectIdUpdatedTimestampAsc = 'PROJECT_BY_PROJECT_ID__UPDATED_TIMESTAMP_ASC',
  ProjectByProjectIdUpdatedTimestampDesc = 'PROJECT_BY_PROJECT_ID__UPDATED_TIMESTAMP_DESC',
  ProjectIdAsc = 'PROJECT_ID_ASC',
  ProjectIdDesc = 'PROJECT_ID_DESC',
  RewardAsc = 'REWARD_ASC',
  RewardDesc = 'REWARD_DESC'
}

export type IndexerAllocationStddevPopulationAggregateFilter = {
  amountAdded?: InputMaybe<BigFloatFilter>;
  amountRemoved?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigFloatFilter>;
};

export type IndexerAllocationStddevPopulationAggregates = {
  __typename?: 'IndexerAllocationStddevPopulationAggregates';
  /** Population standard deviation of amountAdded across the matching connection */
  amountAdded?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of amountRemoved across the matching connection */
  amountRemoved?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerAllocationStddevSampleAggregateFilter = {
  amountAdded?: InputMaybe<BigFloatFilter>;
  amountRemoved?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigFloatFilter>;
};

export type IndexerAllocationStddevSampleAggregates = {
  __typename?: 'IndexerAllocationStddevSampleAggregates';
  /** Sample standard deviation of amountAdded across the matching connection */
  amountAdded?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of amountRemoved across the matching connection */
  amountRemoved?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerAllocationSumAggregateFilter = {
  amountAdded?: InputMaybe<BigFloatFilter>;
  amountRemoved?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigIntFilter>;
};

export type IndexerAllocationSumAggregates = {
  __typename?: 'IndexerAllocationSumAggregates';
  /** Sum of amountAdded across the matching connection */
  amountAdded: Scalars['BigFloat']['output'];
  /** Sum of amountRemoved across the matching connection */
  amountRemoved: Scalars['BigFloat']['output'];
  /** Sum of eraIdx across the matching connection */
  eraIdx: Scalars['BigInt']['output'];
};

/** A connection to a list of `IndexerAllocationSummary` values. */
export type IndexerAllocationSummariesConnection = {
  __typename?: 'IndexerAllocationSummariesConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<IndexerAllocationSummaryAggregates>;
  /** A list of edges which contains the `IndexerAllocationSummary` and cursor to aid in pagination. */
  edges: Array<IndexerAllocationSummariesEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<IndexerAllocationSummaryAggregates>>;
  /** A list of `IndexerAllocationSummary` objects. */
  nodes: Array<Maybe<IndexerAllocationSummary>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `IndexerAllocationSummary` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `IndexerAllocationSummary` values. */
export type IndexerAllocationSummariesConnectionGroupedAggregatesArgs = {
  groupBy: Array<IndexerAllocationSummariesGroupBy>;
  having?: InputMaybe<IndexerAllocationSummariesHavingInput>;
};

/** A `IndexerAllocationSummary` edge in the connection. */
export type IndexerAllocationSummariesEdge = {
  __typename?: 'IndexerAllocationSummariesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `IndexerAllocationSummary` at the end of the edge. */
  node?: Maybe<IndexerAllocationSummary>;
};

/** Grouping methods for `IndexerAllocationSummary` for usage during aggregation. */
export enum IndexerAllocationSummariesGroupBy {
  CreateAt = 'CREATE_AT',
  CreateAtTruncatedToDay = 'CREATE_AT_TRUNCATED_TO_DAY',
  CreateAtTruncatedToHour = 'CREATE_AT_TRUNCATED_TO_HOUR',
  DeploymentId = 'DEPLOYMENT_ID',
  Id = 'ID',
  IndexerId = 'INDEXER_ID',
  ProjectId = 'PROJECT_ID',
  TotalAdded = 'TOTAL_ADDED',
  TotalAmount = 'TOTAL_AMOUNT',
  TotalRemoved = 'TOTAL_REMOVED',
  UpdateAt = 'UPDATE_AT',
  UpdateAtTruncatedToDay = 'UPDATE_AT_TRUNCATED_TO_DAY',
  UpdateAtTruncatedToHour = 'UPDATE_AT_TRUNCATED_TO_HOUR'
}

export type IndexerAllocationSummariesHavingAverageInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  totalAdded?: InputMaybe<HavingBigfloatFilter>;
  totalAmount?: InputMaybe<HavingBigfloatFilter>;
  totalRemoved?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerAllocationSummariesHavingDistinctCountInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  totalAdded?: InputMaybe<HavingBigfloatFilter>;
  totalAmount?: InputMaybe<HavingBigfloatFilter>;
  totalRemoved?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

/** Conditions for `IndexerAllocationSummary` aggregates. */
export type IndexerAllocationSummariesHavingInput = {
  AND?: InputMaybe<Array<IndexerAllocationSummariesHavingInput>>;
  OR?: InputMaybe<Array<IndexerAllocationSummariesHavingInput>>;
  average?: InputMaybe<IndexerAllocationSummariesHavingAverageInput>;
  distinctCount?: InputMaybe<IndexerAllocationSummariesHavingDistinctCountInput>;
  max?: InputMaybe<IndexerAllocationSummariesHavingMaxInput>;
  min?: InputMaybe<IndexerAllocationSummariesHavingMinInput>;
  stddevPopulation?: InputMaybe<IndexerAllocationSummariesHavingStddevPopulationInput>;
  stddevSample?: InputMaybe<IndexerAllocationSummariesHavingStddevSampleInput>;
  sum?: InputMaybe<IndexerAllocationSummariesHavingSumInput>;
  variancePopulation?: InputMaybe<IndexerAllocationSummariesHavingVariancePopulationInput>;
  varianceSample?: InputMaybe<IndexerAllocationSummariesHavingVarianceSampleInput>;
};

export type IndexerAllocationSummariesHavingMaxInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  totalAdded?: InputMaybe<HavingBigfloatFilter>;
  totalAmount?: InputMaybe<HavingBigfloatFilter>;
  totalRemoved?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerAllocationSummariesHavingMinInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  totalAdded?: InputMaybe<HavingBigfloatFilter>;
  totalAmount?: InputMaybe<HavingBigfloatFilter>;
  totalRemoved?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerAllocationSummariesHavingStddevPopulationInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  totalAdded?: InputMaybe<HavingBigfloatFilter>;
  totalAmount?: InputMaybe<HavingBigfloatFilter>;
  totalRemoved?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerAllocationSummariesHavingStddevSampleInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  totalAdded?: InputMaybe<HavingBigfloatFilter>;
  totalAmount?: InputMaybe<HavingBigfloatFilter>;
  totalRemoved?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerAllocationSummariesHavingSumInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  totalAdded?: InputMaybe<HavingBigfloatFilter>;
  totalAmount?: InputMaybe<HavingBigfloatFilter>;
  totalRemoved?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerAllocationSummariesHavingVariancePopulationInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  totalAdded?: InputMaybe<HavingBigfloatFilter>;
  totalAmount?: InputMaybe<HavingBigfloatFilter>;
  totalRemoved?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerAllocationSummariesHavingVarianceSampleInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  totalAdded?: InputMaybe<HavingBigfloatFilter>;
  totalAmount?: InputMaybe<HavingBigfloatFilter>;
  totalRemoved?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

/** Methods to use when ordering `IndexerAllocationSummary`. */
export enum IndexerAllocationSummariesOrderBy {
  CreateAtAsc = 'CREATE_AT_ASC',
  CreateAtDesc = 'CREATE_AT_DESC',
  DeploymentByDeploymentIdCreatedBlockAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_ASC',
  DeploymentByDeploymentIdCreatedBlockDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_DESC',
  DeploymentByDeploymentIdCreatedTimestampAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_ASC',
  DeploymentByDeploymentIdCreatedTimestampDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_DESC',
  DeploymentByDeploymentIdIdAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__ID_ASC',
  DeploymentByDeploymentIdIdDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__ID_DESC',
  DeploymentByDeploymentIdLastEventAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_ASC',
  DeploymentByDeploymentIdLastEventDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_DESC',
  DeploymentByDeploymentIdMetadataAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_ASC',
  DeploymentByDeploymentIdMetadataDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_DESC',
  DeploymentByDeploymentIdProjectIdAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_ASC',
  DeploymentByDeploymentIdProjectIdDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_DESC',
  DeploymentIdAsc = 'DEPLOYMENT_ID_ASC',
  DeploymentIdDesc = 'DEPLOYMENT_ID_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  IndexerByIndexerIdActiveAsc = 'INDEXER_BY_INDEXER_ID__ACTIVE_ASC',
  IndexerByIndexerIdActiveDesc = 'INDEXER_BY_INDEXER_ID__ACTIVE_DESC',
  IndexerByIndexerIdCapacityAsc = 'INDEXER_BY_INDEXER_ID__CAPACITY_ASC',
  IndexerByIndexerIdCapacityDesc = 'INDEXER_BY_INDEXER_ID__CAPACITY_DESC',
  IndexerByIndexerIdCommissionAsc = 'INDEXER_BY_INDEXER_ID__COMMISSION_ASC',
  IndexerByIndexerIdCommissionDesc = 'INDEXER_BY_INDEXER_ID__COMMISSION_DESC',
  IndexerByIndexerIdControllerAsc = 'INDEXER_BY_INDEXER_ID__CONTROLLER_ASC',
  IndexerByIndexerIdControllerDesc = 'INDEXER_BY_INDEXER_ID__CONTROLLER_DESC',
  IndexerByIndexerIdCreatedBlockAsc = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_ASC',
  IndexerByIndexerIdCreatedBlockDesc = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_DESC',
  IndexerByIndexerIdIdAsc = 'INDEXER_BY_INDEXER_ID__ID_ASC',
  IndexerByIndexerIdIdDesc = 'INDEXER_BY_INDEXER_ID__ID_DESC',
  IndexerByIndexerIdLastClaimEraAsc = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_ASC',
  IndexerByIndexerIdLastClaimEraDesc = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_DESC',
  IndexerByIndexerIdLastEventAsc = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_ASC',
  IndexerByIndexerIdLastEventDesc = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_DESC',
  IndexerByIndexerIdLastSettledEraAsc = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_ASC',
  IndexerByIndexerIdLastSettledEraDesc = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_DESC',
  IndexerByIndexerIdMaxUnstakeAmountAsc = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_ASC',
  IndexerByIndexerIdMaxUnstakeAmountDesc = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_DESC',
  IndexerByIndexerIdMetadataAsc = 'INDEXER_BY_INDEXER_ID__METADATA_ASC',
  IndexerByIndexerIdMetadataDesc = 'INDEXER_BY_INDEXER_ID__METADATA_DESC',
  IndexerByIndexerIdSelfStakeAsc = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_ASC',
  IndexerByIndexerIdSelfStakeDesc = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_DESC',
  IndexerByIndexerIdTotalStakeAsc = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_ASC',
  IndexerByIndexerIdTotalStakeDesc = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_DESC',
  IndexerIdAsc = 'INDEXER_ID_ASC',
  IndexerIdDesc = 'INDEXER_ID_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  ProjectByProjectIdBoostAllocationRatioAsc = 'PROJECT_BY_PROJECT_ID__BOOST_ALLOCATION_RATIO_ASC',
  ProjectByProjectIdBoostAllocationRatioDesc = 'PROJECT_BY_PROJECT_ID__BOOST_ALLOCATION_RATIO_DESC',
  ProjectByProjectIdCreatedBlockAsc = 'PROJECT_BY_PROJECT_ID__CREATED_BLOCK_ASC',
  ProjectByProjectIdCreatedBlockDesc = 'PROJECT_BY_PROJECT_ID__CREATED_BLOCK_DESC',
  ProjectByProjectIdCreatedTimestampAsc = 'PROJECT_BY_PROJECT_ID__CREATED_TIMESTAMP_ASC',
  ProjectByProjectIdCreatedTimestampDesc = 'PROJECT_BY_PROJECT_ID__CREATED_TIMESTAMP_DESC',
  ProjectByProjectIdDeploymentIdAsc = 'PROJECT_BY_PROJECT_ID__DEPLOYMENT_ID_ASC',
  ProjectByProjectIdDeploymentIdDesc = 'PROJECT_BY_PROJECT_ID__DEPLOYMENT_ID_DESC',
  ProjectByProjectIdDeploymentMetadataAsc = 'PROJECT_BY_PROJECT_ID__DEPLOYMENT_METADATA_ASC',
  ProjectByProjectIdDeploymentMetadataDesc = 'PROJECT_BY_PROJECT_ID__DEPLOYMENT_METADATA_DESC',
  ProjectByProjectIdIdAsc = 'PROJECT_BY_PROJECT_ID__ID_ASC',
  ProjectByProjectIdIdDesc = 'PROJECT_BY_PROJECT_ID__ID_DESC',
  ProjectByProjectIdLastEventAsc = 'PROJECT_BY_PROJECT_ID__LAST_EVENT_ASC',
  ProjectByProjectIdLastEventDesc = 'PROJECT_BY_PROJECT_ID__LAST_EVENT_DESC',
  ProjectByProjectIdMetadataAsc = 'PROJECT_BY_PROJECT_ID__METADATA_ASC',
  ProjectByProjectIdMetadataDesc = 'PROJECT_BY_PROJECT_ID__METADATA_DESC',
  ProjectByProjectIdOwnerAsc = 'PROJECT_BY_PROJECT_ID__OWNER_ASC',
  ProjectByProjectIdOwnerDesc = 'PROJECT_BY_PROJECT_ID__OWNER_DESC',
  ProjectByProjectIdTotalAllocationAsc = 'PROJECT_BY_PROJECT_ID__TOTAL_ALLOCATION_ASC',
  ProjectByProjectIdTotalAllocationDesc = 'PROJECT_BY_PROJECT_ID__TOTAL_ALLOCATION_DESC',
  ProjectByProjectIdTotalBoostAsc = 'PROJECT_BY_PROJECT_ID__TOTAL_BOOST_ASC',
  ProjectByProjectIdTotalBoostDesc = 'PROJECT_BY_PROJECT_ID__TOTAL_BOOST_DESC',
  ProjectByProjectIdTotalRewardAsc = 'PROJECT_BY_PROJECT_ID__TOTAL_REWARD_ASC',
  ProjectByProjectIdTotalRewardDesc = 'PROJECT_BY_PROJECT_ID__TOTAL_REWARD_DESC',
  ProjectByProjectIdTypeAsc = 'PROJECT_BY_PROJECT_ID__TYPE_ASC',
  ProjectByProjectIdTypeDesc = 'PROJECT_BY_PROJECT_ID__TYPE_DESC',
  ProjectByProjectIdUpdatedTimestampAsc = 'PROJECT_BY_PROJECT_ID__UPDATED_TIMESTAMP_ASC',
  ProjectByProjectIdUpdatedTimestampDesc = 'PROJECT_BY_PROJECT_ID__UPDATED_TIMESTAMP_DESC',
  ProjectIdAsc = 'PROJECT_ID_ASC',
  ProjectIdDesc = 'PROJECT_ID_DESC',
  TotalAddedAsc = 'TOTAL_ADDED_ASC',
  TotalAddedDesc = 'TOTAL_ADDED_DESC',
  TotalAmountAsc = 'TOTAL_AMOUNT_ASC',
  TotalAmountDesc = 'TOTAL_AMOUNT_DESC',
  TotalRemovedAsc = 'TOTAL_REMOVED_ASC',
  TotalRemovedDesc = 'TOTAL_REMOVED_DESC',
  UpdateAtAsc = 'UPDATE_AT_ASC',
  UpdateAtDesc = 'UPDATE_AT_DESC'
}

export type IndexerAllocationSummary = Node & {
  __typename?: 'IndexerAllocationSummary';
  createAt: Scalars['Datetime']['output'];
  /** Reads a single `Deployment` that is related to this `IndexerAllocationSummary`. */
  deployment?: Maybe<Deployment>;
  deploymentId: Scalars['String']['output'];
  id: Scalars['String']['output'];
  /** Reads a single `Indexer` that is related to this `IndexerAllocationSummary`. */
  indexer?: Maybe<Indexer>;
  indexerId: Scalars['String']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  /** Reads a single `Project` that is related to this `IndexerAllocationSummary`. */
  project?: Maybe<Project>;
  projectId: Scalars['String']['output'];
  totalAdded: Scalars['BigFloat']['output'];
  totalAmount: Scalars['BigFloat']['output'];
  totalRemoved: Scalars['BigFloat']['output'];
  updateAt: Scalars['Datetime']['output'];
};

export type IndexerAllocationSummaryAggregates = {
  __typename?: 'IndexerAllocationSummaryAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  average?: Maybe<IndexerAllocationSummaryAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  distinctCount?: Maybe<IndexerAllocationSummaryDistinctCountAggregates>;
  keys?: Maybe<Array<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  max?: Maybe<IndexerAllocationSummaryMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  min?: Maybe<IndexerAllocationSummaryMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevPopulation?: Maybe<IndexerAllocationSummaryStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevSample?: Maybe<IndexerAllocationSummaryStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  sum?: Maybe<IndexerAllocationSummarySumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  variancePopulation?: Maybe<IndexerAllocationSummaryVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  varianceSample?: Maybe<IndexerAllocationSummaryVarianceSampleAggregates>;
};

/** A filter to be used against aggregates of `IndexerAllocationSummary` object types. */
export type IndexerAllocationSummaryAggregatesFilter = {
  /** Mean average aggregate over matching `IndexerAllocationSummary` objects. */
  average?: InputMaybe<IndexerAllocationSummaryAverageAggregateFilter>;
  /** Distinct count aggregate over matching `IndexerAllocationSummary` objects. */
  distinctCount?: InputMaybe<IndexerAllocationSummaryDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `IndexerAllocationSummary` object to be included within the aggregate. */
  filter?: InputMaybe<IndexerAllocationSummaryFilter>;
  /** Maximum aggregate over matching `IndexerAllocationSummary` objects. */
  max?: InputMaybe<IndexerAllocationSummaryMaxAggregateFilter>;
  /** Minimum aggregate over matching `IndexerAllocationSummary` objects. */
  min?: InputMaybe<IndexerAllocationSummaryMinAggregateFilter>;
  /** Population standard deviation aggregate over matching `IndexerAllocationSummary` objects. */
  stddevPopulation?: InputMaybe<IndexerAllocationSummaryStddevPopulationAggregateFilter>;
  /** Sample standard deviation aggregate over matching `IndexerAllocationSummary` objects. */
  stddevSample?: InputMaybe<IndexerAllocationSummaryStddevSampleAggregateFilter>;
  /** Sum aggregate over matching `IndexerAllocationSummary` objects. */
  sum?: InputMaybe<IndexerAllocationSummarySumAggregateFilter>;
  /** Population variance aggregate over matching `IndexerAllocationSummary` objects. */
  variancePopulation?: InputMaybe<IndexerAllocationSummaryVariancePopulationAggregateFilter>;
  /** Sample variance aggregate over matching `IndexerAllocationSummary` objects. */
  varianceSample?: InputMaybe<IndexerAllocationSummaryVarianceSampleAggregateFilter>;
};

export type IndexerAllocationSummaryAverageAggregateFilter = {
  totalAdded?: InputMaybe<BigFloatFilter>;
  totalAmount?: InputMaybe<BigFloatFilter>;
  totalRemoved?: InputMaybe<BigFloatFilter>;
};

export type IndexerAllocationSummaryAverageAggregates = {
  __typename?: 'IndexerAllocationSummaryAverageAggregates';
  /** Mean average of totalAdded across the matching connection */
  totalAdded?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of totalAmount across the matching connection */
  totalAmount?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of totalRemoved across the matching connection */
  totalRemoved?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerAllocationSummaryDistinctCountAggregateFilter = {
  _blockRange?: InputMaybe<BigIntFilter>;
  _id?: InputMaybe<BigIntFilter>;
  createAt?: InputMaybe<BigIntFilter>;
  deploymentId?: InputMaybe<BigIntFilter>;
  id?: InputMaybe<BigIntFilter>;
  indexerId?: InputMaybe<BigIntFilter>;
  projectId?: InputMaybe<BigIntFilter>;
  totalAdded?: InputMaybe<BigIntFilter>;
  totalAmount?: InputMaybe<BigIntFilter>;
  totalRemoved?: InputMaybe<BigIntFilter>;
  updateAt?: InputMaybe<BigIntFilter>;
};

export type IndexerAllocationSummaryDistinctCountAggregates = {
  __typename?: 'IndexerAllocationSummaryDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  _blockRange?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  _id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createAt across the matching connection */
  createAt?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of deploymentId across the matching connection */
  deploymentId?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of indexerId across the matching connection */
  indexerId?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of projectId across the matching connection */
  projectId?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of totalAdded across the matching connection */
  totalAdded?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of totalAmount across the matching connection */
  totalAmount?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of totalRemoved across the matching connection */
  totalRemoved?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of updateAt across the matching connection */
  updateAt?: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `IndexerAllocationSummary` object types. All fields are combined with a logical ‘and.’ */
export type IndexerAllocationSummaryFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<IndexerAllocationSummaryFilter>>;
  /** Filter by the object’s `createAt` field. */
  createAt?: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `deployment` relation. */
  deployment?: InputMaybe<DeploymentFilter>;
  /** Filter by the object’s `deploymentId` field. */
  deploymentId?: InputMaybe<StringFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<StringFilter>;
  /** Filter by the object’s `indexer` relation. */
  indexer?: InputMaybe<IndexerFilter>;
  /** Filter by the object’s `indexerId` field. */
  indexerId?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<IndexerAllocationSummaryFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<IndexerAllocationSummaryFilter>>;
  /** Filter by the object’s `project` relation. */
  project?: InputMaybe<ProjectFilter>;
  /** Filter by the object’s `projectId` field. */
  projectId?: InputMaybe<StringFilter>;
  /** Filter by the object’s `totalAdded` field. */
  totalAdded?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `totalAmount` field. */
  totalAmount?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `totalRemoved` field. */
  totalRemoved?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `updateAt` field. */
  updateAt?: InputMaybe<DatetimeFilter>;
};

export type IndexerAllocationSummaryMaxAggregateFilter = {
  totalAdded?: InputMaybe<BigFloatFilter>;
  totalAmount?: InputMaybe<BigFloatFilter>;
  totalRemoved?: InputMaybe<BigFloatFilter>;
};

export type IndexerAllocationSummaryMaxAggregates = {
  __typename?: 'IndexerAllocationSummaryMaxAggregates';
  /** Maximum of totalAdded across the matching connection */
  totalAdded?: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of totalAmount across the matching connection */
  totalAmount?: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of totalRemoved across the matching connection */
  totalRemoved?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerAllocationSummaryMinAggregateFilter = {
  totalAdded?: InputMaybe<BigFloatFilter>;
  totalAmount?: InputMaybe<BigFloatFilter>;
  totalRemoved?: InputMaybe<BigFloatFilter>;
};

export type IndexerAllocationSummaryMinAggregates = {
  __typename?: 'IndexerAllocationSummaryMinAggregates';
  /** Minimum of totalAdded across the matching connection */
  totalAdded?: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of totalAmount across the matching connection */
  totalAmount?: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of totalRemoved across the matching connection */
  totalRemoved?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerAllocationSummaryStddevPopulationAggregateFilter = {
  totalAdded?: InputMaybe<BigFloatFilter>;
  totalAmount?: InputMaybe<BigFloatFilter>;
  totalRemoved?: InputMaybe<BigFloatFilter>;
};

export type IndexerAllocationSummaryStddevPopulationAggregates = {
  __typename?: 'IndexerAllocationSummaryStddevPopulationAggregates';
  /** Population standard deviation of totalAdded across the matching connection */
  totalAdded?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of totalAmount across the matching connection */
  totalAmount?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of totalRemoved across the matching connection */
  totalRemoved?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerAllocationSummaryStddevSampleAggregateFilter = {
  totalAdded?: InputMaybe<BigFloatFilter>;
  totalAmount?: InputMaybe<BigFloatFilter>;
  totalRemoved?: InputMaybe<BigFloatFilter>;
};

export type IndexerAllocationSummaryStddevSampleAggregates = {
  __typename?: 'IndexerAllocationSummaryStddevSampleAggregates';
  /** Sample standard deviation of totalAdded across the matching connection */
  totalAdded?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of totalAmount across the matching connection */
  totalAmount?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of totalRemoved across the matching connection */
  totalRemoved?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerAllocationSummarySumAggregateFilter = {
  totalAdded?: InputMaybe<BigFloatFilter>;
  totalAmount?: InputMaybe<BigFloatFilter>;
  totalRemoved?: InputMaybe<BigFloatFilter>;
};

export type IndexerAllocationSummarySumAggregates = {
  __typename?: 'IndexerAllocationSummarySumAggregates';
  /** Sum of totalAdded across the matching connection */
  totalAdded: Scalars['BigFloat']['output'];
  /** Sum of totalAmount across the matching connection */
  totalAmount: Scalars['BigFloat']['output'];
  /** Sum of totalRemoved across the matching connection */
  totalRemoved: Scalars['BigFloat']['output'];
};

export type IndexerAllocationSummaryVariancePopulationAggregateFilter = {
  totalAdded?: InputMaybe<BigFloatFilter>;
  totalAmount?: InputMaybe<BigFloatFilter>;
  totalRemoved?: InputMaybe<BigFloatFilter>;
};

export type IndexerAllocationSummaryVariancePopulationAggregates = {
  __typename?: 'IndexerAllocationSummaryVariancePopulationAggregates';
  /** Population variance of totalAdded across the matching connection */
  totalAdded?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of totalAmount across the matching connection */
  totalAmount?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of totalRemoved across the matching connection */
  totalRemoved?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerAllocationSummaryVarianceSampleAggregateFilter = {
  totalAdded?: InputMaybe<BigFloatFilter>;
  totalAmount?: InputMaybe<BigFloatFilter>;
  totalRemoved?: InputMaybe<BigFloatFilter>;
};

export type IndexerAllocationSummaryVarianceSampleAggregates = {
  __typename?: 'IndexerAllocationSummaryVarianceSampleAggregates';
  /** Sample variance of totalAdded across the matching connection */
  totalAdded?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of totalAmount across the matching connection */
  totalAmount?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of totalRemoved across the matching connection */
  totalRemoved?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerAllocationVariancePopulationAggregateFilter = {
  amountAdded?: InputMaybe<BigFloatFilter>;
  amountRemoved?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigFloatFilter>;
};

export type IndexerAllocationVariancePopulationAggregates = {
  __typename?: 'IndexerAllocationVariancePopulationAggregates';
  /** Population variance of amountAdded across the matching connection */
  amountAdded?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of amountRemoved across the matching connection */
  amountRemoved?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerAllocationVarianceSampleAggregateFilter = {
  amountAdded?: InputMaybe<BigFloatFilter>;
  amountRemoved?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigFloatFilter>;
};

export type IndexerAllocationVarianceSampleAggregates = {
  __typename?: 'IndexerAllocationVarianceSampleAggregates';
  /** Sample variance of amountAdded across the matching connection */
  amountAdded?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of amountRemoved across the matching connection */
  amountRemoved?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `IndexerAllocation` values. */
export type IndexerAllocationsConnection = {
  __typename?: 'IndexerAllocationsConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<IndexerAllocationAggregates>;
  /** A list of edges which contains the `IndexerAllocation` and cursor to aid in pagination. */
  edges: Array<IndexerAllocationsEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<IndexerAllocationAggregates>>;
  /** A list of `IndexerAllocation` objects. */
  nodes: Array<Maybe<IndexerAllocation>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `IndexerAllocation` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `IndexerAllocation` values. */
export type IndexerAllocationsConnectionGroupedAggregatesArgs = {
  groupBy: Array<IndexerAllocationsGroupBy>;
  having?: InputMaybe<IndexerAllocationsHavingInput>;
};

/** A `IndexerAllocation` edge in the connection. */
export type IndexerAllocationsEdge = {
  __typename?: 'IndexerAllocationsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `IndexerAllocation` at the end of the edge. */
  node?: Maybe<IndexerAllocation>;
};

/** Grouping methods for `IndexerAllocation` for usage during aggregation. */
export enum IndexerAllocationsGroupBy {
  AmountAdded = 'AMOUNT_ADDED',
  AmountRemoved = 'AMOUNT_REMOVED',
  CreateAt = 'CREATE_AT',
  CreateAtTruncatedToDay = 'CREATE_AT_TRUNCATED_TO_DAY',
  CreateAtTruncatedToHour = 'CREATE_AT_TRUNCATED_TO_HOUR',
  DeploymentId = 'DEPLOYMENT_ID',
  EraIdx = 'ERA_IDX',
  Id = 'ID',
  IndexerId = 'INDEXER_ID',
  ProjectId = 'PROJECT_ID'
}

export type IndexerAllocationsHavingAverageInput = {
  amountAdded?: InputMaybe<HavingBigfloatFilter>;
  amountRemoved?: InputMaybe<HavingBigfloatFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
};

export type IndexerAllocationsHavingDistinctCountInput = {
  amountAdded?: InputMaybe<HavingBigfloatFilter>;
  amountRemoved?: InputMaybe<HavingBigfloatFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
};

/** Conditions for `IndexerAllocation` aggregates. */
export type IndexerAllocationsHavingInput = {
  AND?: InputMaybe<Array<IndexerAllocationsHavingInput>>;
  OR?: InputMaybe<Array<IndexerAllocationsHavingInput>>;
  average?: InputMaybe<IndexerAllocationsHavingAverageInput>;
  distinctCount?: InputMaybe<IndexerAllocationsHavingDistinctCountInput>;
  max?: InputMaybe<IndexerAllocationsHavingMaxInput>;
  min?: InputMaybe<IndexerAllocationsHavingMinInput>;
  stddevPopulation?: InputMaybe<IndexerAllocationsHavingStddevPopulationInput>;
  stddevSample?: InputMaybe<IndexerAllocationsHavingStddevSampleInput>;
  sum?: InputMaybe<IndexerAllocationsHavingSumInput>;
  variancePopulation?: InputMaybe<IndexerAllocationsHavingVariancePopulationInput>;
  varianceSample?: InputMaybe<IndexerAllocationsHavingVarianceSampleInput>;
};

export type IndexerAllocationsHavingMaxInput = {
  amountAdded?: InputMaybe<HavingBigfloatFilter>;
  amountRemoved?: InputMaybe<HavingBigfloatFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
};

export type IndexerAllocationsHavingMinInput = {
  amountAdded?: InputMaybe<HavingBigfloatFilter>;
  amountRemoved?: InputMaybe<HavingBigfloatFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
};

export type IndexerAllocationsHavingStddevPopulationInput = {
  amountAdded?: InputMaybe<HavingBigfloatFilter>;
  amountRemoved?: InputMaybe<HavingBigfloatFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
};

export type IndexerAllocationsHavingStddevSampleInput = {
  amountAdded?: InputMaybe<HavingBigfloatFilter>;
  amountRemoved?: InputMaybe<HavingBigfloatFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
};

export type IndexerAllocationsHavingSumInput = {
  amountAdded?: InputMaybe<HavingBigfloatFilter>;
  amountRemoved?: InputMaybe<HavingBigfloatFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
};

export type IndexerAllocationsHavingVariancePopulationInput = {
  amountAdded?: InputMaybe<HavingBigfloatFilter>;
  amountRemoved?: InputMaybe<HavingBigfloatFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
};

export type IndexerAllocationsHavingVarianceSampleInput = {
  amountAdded?: InputMaybe<HavingBigfloatFilter>;
  amountRemoved?: InputMaybe<HavingBigfloatFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
};

/** Methods to use when ordering `IndexerAllocation`. */
export enum IndexerAllocationsOrderBy {
  AmountAddedAsc = 'AMOUNT_ADDED_ASC',
  AmountAddedDesc = 'AMOUNT_ADDED_DESC',
  AmountRemovedAsc = 'AMOUNT_REMOVED_ASC',
  AmountRemovedDesc = 'AMOUNT_REMOVED_DESC',
  CreateAtAsc = 'CREATE_AT_ASC',
  CreateAtDesc = 'CREATE_AT_DESC',
  DeploymentByDeploymentIdCreatedBlockAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_ASC',
  DeploymentByDeploymentIdCreatedBlockDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_DESC',
  DeploymentByDeploymentIdCreatedTimestampAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_ASC',
  DeploymentByDeploymentIdCreatedTimestampDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_DESC',
  DeploymentByDeploymentIdIdAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__ID_ASC',
  DeploymentByDeploymentIdIdDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__ID_DESC',
  DeploymentByDeploymentIdLastEventAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_ASC',
  DeploymentByDeploymentIdLastEventDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_DESC',
  DeploymentByDeploymentIdMetadataAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_ASC',
  DeploymentByDeploymentIdMetadataDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_DESC',
  DeploymentByDeploymentIdProjectIdAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_ASC',
  DeploymentByDeploymentIdProjectIdDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_DESC',
  DeploymentIdAsc = 'DEPLOYMENT_ID_ASC',
  DeploymentIdDesc = 'DEPLOYMENT_ID_DESC',
  EraIdxAsc = 'ERA_IDX_ASC',
  EraIdxDesc = 'ERA_IDX_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  IndexerByIndexerIdActiveAsc = 'INDEXER_BY_INDEXER_ID__ACTIVE_ASC',
  IndexerByIndexerIdActiveDesc = 'INDEXER_BY_INDEXER_ID__ACTIVE_DESC',
  IndexerByIndexerIdCapacityAsc = 'INDEXER_BY_INDEXER_ID__CAPACITY_ASC',
  IndexerByIndexerIdCapacityDesc = 'INDEXER_BY_INDEXER_ID__CAPACITY_DESC',
  IndexerByIndexerIdCommissionAsc = 'INDEXER_BY_INDEXER_ID__COMMISSION_ASC',
  IndexerByIndexerIdCommissionDesc = 'INDEXER_BY_INDEXER_ID__COMMISSION_DESC',
  IndexerByIndexerIdControllerAsc = 'INDEXER_BY_INDEXER_ID__CONTROLLER_ASC',
  IndexerByIndexerIdControllerDesc = 'INDEXER_BY_INDEXER_ID__CONTROLLER_DESC',
  IndexerByIndexerIdCreatedBlockAsc = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_ASC',
  IndexerByIndexerIdCreatedBlockDesc = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_DESC',
  IndexerByIndexerIdIdAsc = 'INDEXER_BY_INDEXER_ID__ID_ASC',
  IndexerByIndexerIdIdDesc = 'INDEXER_BY_INDEXER_ID__ID_DESC',
  IndexerByIndexerIdLastClaimEraAsc = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_ASC',
  IndexerByIndexerIdLastClaimEraDesc = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_DESC',
  IndexerByIndexerIdLastEventAsc = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_ASC',
  IndexerByIndexerIdLastEventDesc = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_DESC',
  IndexerByIndexerIdLastSettledEraAsc = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_ASC',
  IndexerByIndexerIdLastSettledEraDesc = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_DESC',
  IndexerByIndexerIdMaxUnstakeAmountAsc = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_ASC',
  IndexerByIndexerIdMaxUnstakeAmountDesc = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_DESC',
  IndexerByIndexerIdMetadataAsc = 'INDEXER_BY_INDEXER_ID__METADATA_ASC',
  IndexerByIndexerIdMetadataDesc = 'INDEXER_BY_INDEXER_ID__METADATA_DESC',
  IndexerByIndexerIdSelfStakeAsc = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_ASC',
  IndexerByIndexerIdSelfStakeDesc = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_DESC',
  IndexerByIndexerIdTotalStakeAsc = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_ASC',
  IndexerByIndexerIdTotalStakeDesc = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_DESC',
  IndexerIdAsc = 'INDEXER_ID_ASC',
  IndexerIdDesc = 'INDEXER_ID_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  ProjectByProjectIdBoostAllocationRatioAsc = 'PROJECT_BY_PROJECT_ID__BOOST_ALLOCATION_RATIO_ASC',
  ProjectByProjectIdBoostAllocationRatioDesc = 'PROJECT_BY_PROJECT_ID__BOOST_ALLOCATION_RATIO_DESC',
  ProjectByProjectIdCreatedBlockAsc = 'PROJECT_BY_PROJECT_ID__CREATED_BLOCK_ASC',
  ProjectByProjectIdCreatedBlockDesc = 'PROJECT_BY_PROJECT_ID__CREATED_BLOCK_DESC',
  ProjectByProjectIdCreatedTimestampAsc = 'PROJECT_BY_PROJECT_ID__CREATED_TIMESTAMP_ASC',
  ProjectByProjectIdCreatedTimestampDesc = 'PROJECT_BY_PROJECT_ID__CREATED_TIMESTAMP_DESC',
  ProjectByProjectIdDeploymentIdAsc = 'PROJECT_BY_PROJECT_ID__DEPLOYMENT_ID_ASC',
  ProjectByProjectIdDeploymentIdDesc = 'PROJECT_BY_PROJECT_ID__DEPLOYMENT_ID_DESC',
  ProjectByProjectIdDeploymentMetadataAsc = 'PROJECT_BY_PROJECT_ID__DEPLOYMENT_METADATA_ASC',
  ProjectByProjectIdDeploymentMetadataDesc = 'PROJECT_BY_PROJECT_ID__DEPLOYMENT_METADATA_DESC',
  ProjectByProjectIdIdAsc = 'PROJECT_BY_PROJECT_ID__ID_ASC',
  ProjectByProjectIdIdDesc = 'PROJECT_BY_PROJECT_ID__ID_DESC',
  ProjectByProjectIdLastEventAsc = 'PROJECT_BY_PROJECT_ID__LAST_EVENT_ASC',
  ProjectByProjectIdLastEventDesc = 'PROJECT_BY_PROJECT_ID__LAST_EVENT_DESC',
  ProjectByProjectIdMetadataAsc = 'PROJECT_BY_PROJECT_ID__METADATA_ASC',
  ProjectByProjectIdMetadataDesc = 'PROJECT_BY_PROJECT_ID__METADATA_DESC',
  ProjectByProjectIdOwnerAsc = 'PROJECT_BY_PROJECT_ID__OWNER_ASC',
  ProjectByProjectIdOwnerDesc = 'PROJECT_BY_PROJECT_ID__OWNER_DESC',
  ProjectByProjectIdTotalAllocationAsc = 'PROJECT_BY_PROJECT_ID__TOTAL_ALLOCATION_ASC',
  ProjectByProjectIdTotalAllocationDesc = 'PROJECT_BY_PROJECT_ID__TOTAL_ALLOCATION_DESC',
  ProjectByProjectIdTotalBoostAsc = 'PROJECT_BY_PROJECT_ID__TOTAL_BOOST_ASC',
  ProjectByProjectIdTotalBoostDesc = 'PROJECT_BY_PROJECT_ID__TOTAL_BOOST_DESC',
  ProjectByProjectIdTotalRewardAsc = 'PROJECT_BY_PROJECT_ID__TOTAL_REWARD_ASC',
  ProjectByProjectIdTotalRewardDesc = 'PROJECT_BY_PROJECT_ID__TOTAL_REWARD_DESC',
  ProjectByProjectIdTypeAsc = 'PROJECT_BY_PROJECT_ID__TYPE_ASC',
  ProjectByProjectIdTypeDesc = 'PROJECT_BY_PROJECT_ID__TYPE_DESC',
  ProjectByProjectIdUpdatedTimestampAsc = 'PROJECT_BY_PROJECT_ID__UPDATED_TIMESTAMP_ASC',
  ProjectByProjectIdUpdatedTimestampDesc = 'PROJECT_BY_PROJECT_ID__UPDATED_TIMESTAMP_DESC',
  ProjectIdAsc = 'PROJECT_ID_ASC',
  ProjectIdDesc = 'PROJECT_ID_DESC'
}

/** A connection to a list of `IndexerApySummary` values. */
export type IndexerApySummariesConnection = {
  __typename?: 'IndexerApySummariesConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<IndexerApySummaryAggregates>;
  /** A list of edges which contains the `IndexerApySummary` and cursor to aid in pagination. */
  edges: Array<IndexerApySummariesEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<IndexerApySummaryAggregates>>;
  /** A list of `IndexerApySummary` objects. */
  nodes: Array<Maybe<IndexerApySummary>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `IndexerApySummary` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `IndexerApySummary` values. */
export type IndexerApySummariesConnectionGroupedAggregatesArgs = {
  groupBy: Array<IndexerApySummariesGroupBy>;
  having?: InputMaybe<IndexerApySummariesHavingInput>;
};

/** A `IndexerApySummary` edge in the connection. */
export type IndexerApySummariesEdge = {
  __typename?: 'IndexerApySummariesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `IndexerApySummary` at the end of the edge. */
  node?: Maybe<IndexerApySummary>;
};

/** Grouping methods for `IndexerApySummary` for usage during aggregation. */
export enum IndexerApySummariesGroupBy {
  CreateAt = 'CREATE_AT',
  CreateAtTruncatedToDay = 'CREATE_AT_TRUNCATED_TO_DAY',
  CreateAtTruncatedToHour = 'CREATE_AT_TRUNCATED_TO_HOUR',
  DelegatorApy = 'DELEGATOR_APY',
  DelegatorReward = 'DELEGATOR_REWARD',
  EraIdx = 'ERA_IDX',
  Id = 'ID',
  IndexerApy = 'INDEXER_APY',
  IndexerId = 'INDEXER_ID',
  IndexerReward = 'INDEXER_REWARD',
  UpdateAt = 'UPDATE_AT',
  UpdateAtTruncatedToDay = 'UPDATE_AT_TRUNCATED_TO_DAY',
  UpdateAtTruncatedToHour = 'UPDATE_AT_TRUNCATED_TO_HOUR'
}

export type IndexerApySummariesHavingAverageInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  delegatorApy?: InputMaybe<HavingBigfloatFilter>;
  delegatorReward?: InputMaybe<HavingBigfloatFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  indexerApy?: InputMaybe<HavingBigfloatFilter>;
  indexerReward?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerApySummariesHavingDistinctCountInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  delegatorApy?: InputMaybe<HavingBigfloatFilter>;
  delegatorReward?: InputMaybe<HavingBigfloatFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  indexerApy?: InputMaybe<HavingBigfloatFilter>;
  indexerReward?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

/** Conditions for `IndexerApySummary` aggregates. */
export type IndexerApySummariesHavingInput = {
  AND?: InputMaybe<Array<IndexerApySummariesHavingInput>>;
  OR?: InputMaybe<Array<IndexerApySummariesHavingInput>>;
  average?: InputMaybe<IndexerApySummariesHavingAverageInput>;
  distinctCount?: InputMaybe<IndexerApySummariesHavingDistinctCountInput>;
  max?: InputMaybe<IndexerApySummariesHavingMaxInput>;
  min?: InputMaybe<IndexerApySummariesHavingMinInput>;
  stddevPopulation?: InputMaybe<IndexerApySummariesHavingStddevPopulationInput>;
  stddevSample?: InputMaybe<IndexerApySummariesHavingStddevSampleInput>;
  sum?: InputMaybe<IndexerApySummariesHavingSumInput>;
  variancePopulation?: InputMaybe<IndexerApySummariesHavingVariancePopulationInput>;
  varianceSample?: InputMaybe<IndexerApySummariesHavingVarianceSampleInput>;
};

export type IndexerApySummariesHavingMaxInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  delegatorApy?: InputMaybe<HavingBigfloatFilter>;
  delegatorReward?: InputMaybe<HavingBigfloatFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  indexerApy?: InputMaybe<HavingBigfloatFilter>;
  indexerReward?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerApySummariesHavingMinInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  delegatorApy?: InputMaybe<HavingBigfloatFilter>;
  delegatorReward?: InputMaybe<HavingBigfloatFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  indexerApy?: InputMaybe<HavingBigfloatFilter>;
  indexerReward?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerApySummariesHavingStddevPopulationInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  delegatorApy?: InputMaybe<HavingBigfloatFilter>;
  delegatorReward?: InputMaybe<HavingBigfloatFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  indexerApy?: InputMaybe<HavingBigfloatFilter>;
  indexerReward?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerApySummariesHavingStddevSampleInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  delegatorApy?: InputMaybe<HavingBigfloatFilter>;
  delegatorReward?: InputMaybe<HavingBigfloatFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  indexerApy?: InputMaybe<HavingBigfloatFilter>;
  indexerReward?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerApySummariesHavingSumInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  delegatorApy?: InputMaybe<HavingBigfloatFilter>;
  delegatorReward?: InputMaybe<HavingBigfloatFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  indexerApy?: InputMaybe<HavingBigfloatFilter>;
  indexerReward?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerApySummariesHavingVariancePopulationInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  delegatorApy?: InputMaybe<HavingBigfloatFilter>;
  delegatorReward?: InputMaybe<HavingBigfloatFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  indexerApy?: InputMaybe<HavingBigfloatFilter>;
  indexerReward?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerApySummariesHavingVarianceSampleInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  delegatorApy?: InputMaybe<HavingBigfloatFilter>;
  delegatorReward?: InputMaybe<HavingBigfloatFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  indexerApy?: InputMaybe<HavingBigfloatFilter>;
  indexerReward?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

/** Methods to use when ordering `IndexerApySummary`. */
export enum IndexerApySummariesOrderBy {
  CreateAtAsc = 'CREATE_AT_ASC',
  CreateAtDesc = 'CREATE_AT_DESC',
  DelegatorApyAsc = 'DELEGATOR_APY_ASC',
  DelegatorApyDesc = 'DELEGATOR_APY_DESC',
  DelegatorRewardAsc = 'DELEGATOR_REWARD_ASC',
  DelegatorRewardDesc = 'DELEGATOR_REWARD_DESC',
  EraIdxAsc = 'ERA_IDX_ASC',
  EraIdxDesc = 'ERA_IDX_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  IndexerApyAsc = 'INDEXER_APY_ASC',
  IndexerApyDesc = 'INDEXER_APY_DESC',
  IndexerByIndexerIdActiveAsc = 'INDEXER_BY_INDEXER_ID__ACTIVE_ASC',
  IndexerByIndexerIdActiveDesc = 'INDEXER_BY_INDEXER_ID__ACTIVE_DESC',
  IndexerByIndexerIdCapacityAsc = 'INDEXER_BY_INDEXER_ID__CAPACITY_ASC',
  IndexerByIndexerIdCapacityDesc = 'INDEXER_BY_INDEXER_ID__CAPACITY_DESC',
  IndexerByIndexerIdCommissionAsc = 'INDEXER_BY_INDEXER_ID__COMMISSION_ASC',
  IndexerByIndexerIdCommissionDesc = 'INDEXER_BY_INDEXER_ID__COMMISSION_DESC',
  IndexerByIndexerIdControllerAsc = 'INDEXER_BY_INDEXER_ID__CONTROLLER_ASC',
  IndexerByIndexerIdControllerDesc = 'INDEXER_BY_INDEXER_ID__CONTROLLER_DESC',
  IndexerByIndexerIdCreatedBlockAsc = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_ASC',
  IndexerByIndexerIdCreatedBlockDesc = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_DESC',
  IndexerByIndexerIdIdAsc = 'INDEXER_BY_INDEXER_ID__ID_ASC',
  IndexerByIndexerIdIdDesc = 'INDEXER_BY_INDEXER_ID__ID_DESC',
  IndexerByIndexerIdLastClaimEraAsc = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_ASC',
  IndexerByIndexerIdLastClaimEraDesc = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_DESC',
  IndexerByIndexerIdLastEventAsc = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_ASC',
  IndexerByIndexerIdLastEventDesc = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_DESC',
  IndexerByIndexerIdLastSettledEraAsc = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_ASC',
  IndexerByIndexerIdLastSettledEraDesc = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_DESC',
  IndexerByIndexerIdMaxUnstakeAmountAsc = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_ASC',
  IndexerByIndexerIdMaxUnstakeAmountDesc = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_DESC',
  IndexerByIndexerIdMetadataAsc = 'INDEXER_BY_INDEXER_ID__METADATA_ASC',
  IndexerByIndexerIdMetadataDesc = 'INDEXER_BY_INDEXER_ID__METADATA_DESC',
  IndexerByIndexerIdSelfStakeAsc = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_ASC',
  IndexerByIndexerIdSelfStakeDesc = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_DESC',
  IndexerByIndexerIdTotalStakeAsc = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_ASC',
  IndexerByIndexerIdTotalStakeDesc = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_DESC',
  IndexerIdAsc = 'INDEXER_ID_ASC',
  IndexerIdDesc = 'INDEXER_ID_DESC',
  IndexerRewardAsc = 'INDEXER_REWARD_ASC',
  IndexerRewardDesc = 'INDEXER_REWARD_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  UpdateAtAsc = 'UPDATE_AT_ASC',
  UpdateAtDesc = 'UPDATE_AT_DESC'
}

export type IndexerApySummary = Node & {
  __typename?: 'IndexerApySummary';
  createAt: Scalars['Datetime']['output'];
  delegatorApy: Scalars['BigFloat']['output'];
  delegatorReward: Scalars['BigFloat']['output'];
  eraIdx: Scalars['Int']['output'];
  id: Scalars['String']['output'];
  /** Reads a single `Indexer` that is related to this `IndexerApySummary`. */
  indexer?: Maybe<Indexer>;
  indexerApy: Scalars['BigFloat']['output'];
  indexerId: Scalars['String']['output'];
  indexerReward: Scalars['BigFloat']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  updateAt: Scalars['Datetime']['output'];
};

export type IndexerApySummaryAggregates = {
  __typename?: 'IndexerApySummaryAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  average?: Maybe<IndexerApySummaryAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  distinctCount?: Maybe<IndexerApySummaryDistinctCountAggregates>;
  keys?: Maybe<Array<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  max?: Maybe<IndexerApySummaryMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  min?: Maybe<IndexerApySummaryMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevPopulation?: Maybe<IndexerApySummaryStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevSample?: Maybe<IndexerApySummaryStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  sum?: Maybe<IndexerApySummarySumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  variancePopulation?: Maybe<IndexerApySummaryVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  varianceSample?: Maybe<IndexerApySummaryVarianceSampleAggregates>;
};

/** A filter to be used against aggregates of `IndexerApySummary` object types. */
export type IndexerApySummaryAggregatesFilter = {
  /** Mean average aggregate over matching `IndexerApySummary` objects. */
  average?: InputMaybe<IndexerApySummaryAverageAggregateFilter>;
  /** Distinct count aggregate over matching `IndexerApySummary` objects. */
  distinctCount?: InputMaybe<IndexerApySummaryDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `IndexerApySummary` object to be included within the aggregate. */
  filter?: InputMaybe<IndexerApySummaryFilter>;
  /** Maximum aggregate over matching `IndexerApySummary` objects. */
  max?: InputMaybe<IndexerApySummaryMaxAggregateFilter>;
  /** Minimum aggregate over matching `IndexerApySummary` objects. */
  min?: InputMaybe<IndexerApySummaryMinAggregateFilter>;
  /** Population standard deviation aggregate over matching `IndexerApySummary` objects. */
  stddevPopulation?: InputMaybe<IndexerApySummaryStddevPopulationAggregateFilter>;
  /** Sample standard deviation aggregate over matching `IndexerApySummary` objects. */
  stddevSample?: InputMaybe<IndexerApySummaryStddevSampleAggregateFilter>;
  /** Sum aggregate over matching `IndexerApySummary` objects. */
  sum?: InputMaybe<IndexerApySummarySumAggregateFilter>;
  /** Population variance aggregate over matching `IndexerApySummary` objects. */
  variancePopulation?: InputMaybe<IndexerApySummaryVariancePopulationAggregateFilter>;
  /** Sample variance aggregate over matching `IndexerApySummary` objects. */
  varianceSample?: InputMaybe<IndexerApySummaryVarianceSampleAggregateFilter>;
};

export type IndexerApySummaryAverageAggregateFilter = {
  delegatorApy?: InputMaybe<BigFloatFilter>;
  delegatorReward?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigFloatFilter>;
  indexerApy?: InputMaybe<BigFloatFilter>;
  indexerReward?: InputMaybe<BigFloatFilter>;
};

export type IndexerApySummaryAverageAggregates = {
  __typename?: 'IndexerApySummaryAverageAggregates';
  /** Mean average of delegatorApy across the matching connection */
  delegatorApy?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of delegatorReward across the matching connection */
  delegatorReward?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of indexerApy across the matching connection */
  indexerApy?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of indexerReward across the matching connection */
  indexerReward?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerApySummaryDistinctCountAggregateFilter = {
  _blockRange?: InputMaybe<BigIntFilter>;
  _id?: InputMaybe<BigIntFilter>;
  createAt?: InputMaybe<BigIntFilter>;
  delegatorApy?: InputMaybe<BigIntFilter>;
  delegatorReward?: InputMaybe<BigIntFilter>;
  eraIdx?: InputMaybe<BigIntFilter>;
  id?: InputMaybe<BigIntFilter>;
  indexerApy?: InputMaybe<BigIntFilter>;
  indexerId?: InputMaybe<BigIntFilter>;
  indexerReward?: InputMaybe<BigIntFilter>;
  updateAt?: InputMaybe<BigIntFilter>;
};

export type IndexerApySummaryDistinctCountAggregates = {
  __typename?: 'IndexerApySummaryDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  _blockRange?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  _id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createAt across the matching connection */
  createAt?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of delegatorApy across the matching connection */
  delegatorApy?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of delegatorReward across the matching connection */
  delegatorReward?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of indexerApy across the matching connection */
  indexerApy?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of indexerId across the matching connection */
  indexerId?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of indexerReward across the matching connection */
  indexerReward?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of updateAt across the matching connection */
  updateAt?: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `IndexerApySummary` object types. All fields are combined with a logical ‘and.’ */
export type IndexerApySummaryFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<IndexerApySummaryFilter>>;
  /** Filter by the object’s `createAt` field. */
  createAt?: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `delegatorApy` field. */
  delegatorApy?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `delegatorReward` field. */
  delegatorReward?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `eraIdx` field. */
  eraIdx?: InputMaybe<IntFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<StringFilter>;
  /** Filter by the object’s `indexer` relation. */
  indexer?: InputMaybe<IndexerFilter>;
  /** Filter by the object’s `indexerApy` field. */
  indexerApy?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `indexerId` field. */
  indexerId?: InputMaybe<StringFilter>;
  /** Filter by the object’s `indexerReward` field. */
  indexerReward?: InputMaybe<BigFloatFilter>;
  /** Negates the expression. */
  not?: InputMaybe<IndexerApySummaryFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<IndexerApySummaryFilter>>;
  /** Filter by the object’s `updateAt` field. */
  updateAt?: InputMaybe<DatetimeFilter>;
};

export type IndexerApySummaryMaxAggregateFilter = {
  delegatorApy?: InputMaybe<BigFloatFilter>;
  delegatorReward?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<IntFilter>;
  indexerApy?: InputMaybe<BigFloatFilter>;
  indexerReward?: InputMaybe<BigFloatFilter>;
};

export type IndexerApySummaryMaxAggregates = {
  __typename?: 'IndexerApySummaryMaxAggregates';
  /** Maximum of delegatorApy across the matching connection */
  delegatorApy?: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of delegatorReward across the matching connection */
  delegatorReward?: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['Int']['output']>;
  /** Maximum of indexerApy across the matching connection */
  indexerApy?: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of indexerReward across the matching connection */
  indexerReward?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerApySummaryMinAggregateFilter = {
  delegatorApy?: InputMaybe<BigFloatFilter>;
  delegatorReward?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<IntFilter>;
  indexerApy?: InputMaybe<BigFloatFilter>;
  indexerReward?: InputMaybe<BigFloatFilter>;
};

export type IndexerApySummaryMinAggregates = {
  __typename?: 'IndexerApySummaryMinAggregates';
  /** Minimum of delegatorApy across the matching connection */
  delegatorApy?: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of delegatorReward across the matching connection */
  delegatorReward?: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['Int']['output']>;
  /** Minimum of indexerApy across the matching connection */
  indexerApy?: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of indexerReward across the matching connection */
  indexerReward?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerApySummaryStddevPopulationAggregateFilter = {
  delegatorApy?: InputMaybe<BigFloatFilter>;
  delegatorReward?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigFloatFilter>;
  indexerApy?: InputMaybe<BigFloatFilter>;
  indexerReward?: InputMaybe<BigFloatFilter>;
};

export type IndexerApySummaryStddevPopulationAggregates = {
  __typename?: 'IndexerApySummaryStddevPopulationAggregates';
  /** Population standard deviation of delegatorApy across the matching connection */
  delegatorApy?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of delegatorReward across the matching connection */
  delegatorReward?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of indexerApy across the matching connection */
  indexerApy?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of indexerReward across the matching connection */
  indexerReward?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerApySummaryStddevSampleAggregateFilter = {
  delegatorApy?: InputMaybe<BigFloatFilter>;
  delegatorReward?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigFloatFilter>;
  indexerApy?: InputMaybe<BigFloatFilter>;
  indexerReward?: InputMaybe<BigFloatFilter>;
};

export type IndexerApySummaryStddevSampleAggregates = {
  __typename?: 'IndexerApySummaryStddevSampleAggregates';
  /** Sample standard deviation of delegatorApy across the matching connection */
  delegatorApy?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of delegatorReward across the matching connection */
  delegatorReward?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of indexerApy across the matching connection */
  indexerApy?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of indexerReward across the matching connection */
  indexerReward?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerApySummarySumAggregateFilter = {
  delegatorApy?: InputMaybe<BigFloatFilter>;
  delegatorReward?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigIntFilter>;
  indexerApy?: InputMaybe<BigFloatFilter>;
  indexerReward?: InputMaybe<BigFloatFilter>;
};

export type IndexerApySummarySumAggregates = {
  __typename?: 'IndexerApySummarySumAggregates';
  /** Sum of delegatorApy across the matching connection */
  delegatorApy: Scalars['BigFloat']['output'];
  /** Sum of delegatorReward across the matching connection */
  delegatorReward: Scalars['BigFloat']['output'];
  /** Sum of eraIdx across the matching connection */
  eraIdx: Scalars['BigInt']['output'];
  /** Sum of indexerApy across the matching connection */
  indexerApy: Scalars['BigFloat']['output'];
  /** Sum of indexerReward across the matching connection */
  indexerReward: Scalars['BigFloat']['output'];
};

export type IndexerApySummaryVariancePopulationAggregateFilter = {
  delegatorApy?: InputMaybe<BigFloatFilter>;
  delegatorReward?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigFloatFilter>;
  indexerApy?: InputMaybe<BigFloatFilter>;
  indexerReward?: InputMaybe<BigFloatFilter>;
};

export type IndexerApySummaryVariancePopulationAggregates = {
  __typename?: 'IndexerApySummaryVariancePopulationAggregates';
  /** Population variance of delegatorApy across the matching connection */
  delegatorApy?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of delegatorReward across the matching connection */
  delegatorReward?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of indexerApy across the matching connection */
  indexerApy?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of indexerReward across the matching connection */
  indexerReward?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerApySummaryVarianceSampleAggregateFilter = {
  delegatorApy?: InputMaybe<BigFloatFilter>;
  delegatorReward?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigFloatFilter>;
  indexerApy?: InputMaybe<BigFloatFilter>;
  indexerReward?: InputMaybe<BigFloatFilter>;
};

export type IndexerApySummaryVarianceSampleAggregates = {
  __typename?: 'IndexerApySummaryVarianceSampleAggregates';
  /** Sample variance of delegatorApy across the matching connection */
  delegatorApy?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of delegatorReward across the matching connection */
  delegatorReward?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of indexerApy across the matching connection */
  indexerApy?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of indexerReward across the matching connection */
  indexerReward?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerAverageAggregates = {
  __typename?: 'IndexerAverageAggregates';
  /** Mean average of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerCommissionRate = Node & {
  __typename?: 'IndexerCommissionRate';
  commissionRate: Scalars['Int']['output'];
  /** Reads a single `Era` that is related to this `IndexerCommissionRate`. */
  era?: Maybe<Era>;
  eraId: Scalars['String']['output'];
  eraIdx: Scalars['Int']['output'];
  id: Scalars['String']['output'];
  /** Reads a single `Indexer` that is related to this `IndexerCommissionRate`. */
  indexer?: Maybe<Indexer>;
  indexerId: Scalars['String']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
};

export type IndexerCommissionRateAggregates = {
  __typename?: 'IndexerCommissionRateAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  average?: Maybe<IndexerCommissionRateAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  distinctCount?: Maybe<IndexerCommissionRateDistinctCountAggregates>;
  keys?: Maybe<Array<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  max?: Maybe<IndexerCommissionRateMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  min?: Maybe<IndexerCommissionRateMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevPopulation?: Maybe<IndexerCommissionRateStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevSample?: Maybe<IndexerCommissionRateStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  sum?: Maybe<IndexerCommissionRateSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  variancePopulation?: Maybe<IndexerCommissionRateVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  varianceSample?: Maybe<IndexerCommissionRateVarianceSampleAggregates>;
};

/** A filter to be used against aggregates of `IndexerCommissionRate` object types. */
export type IndexerCommissionRateAggregatesFilter = {
  /** Mean average aggregate over matching `IndexerCommissionRate` objects. */
  average?: InputMaybe<IndexerCommissionRateAverageAggregateFilter>;
  /** Distinct count aggregate over matching `IndexerCommissionRate` objects. */
  distinctCount?: InputMaybe<IndexerCommissionRateDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `IndexerCommissionRate` object to be included within the aggregate. */
  filter?: InputMaybe<IndexerCommissionRateFilter>;
  /** Maximum aggregate over matching `IndexerCommissionRate` objects. */
  max?: InputMaybe<IndexerCommissionRateMaxAggregateFilter>;
  /** Minimum aggregate over matching `IndexerCommissionRate` objects. */
  min?: InputMaybe<IndexerCommissionRateMinAggregateFilter>;
  /** Population standard deviation aggregate over matching `IndexerCommissionRate` objects. */
  stddevPopulation?: InputMaybe<IndexerCommissionRateStddevPopulationAggregateFilter>;
  /** Sample standard deviation aggregate over matching `IndexerCommissionRate` objects. */
  stddevSample?: InputMaybe<IndexerCommissionRateStddevSampleAggregateFilter>;
  /** Sum aggregate over matching `IndexerCommissionRate` objects. */
  sum?: InputMaybe<IndexerCommissionRateSumAggregateFilter>;
  /** Population variance aggregate over matching `IndexerCommissionRate` objects. */
  variancePopulation?: InputMaybe<IndexerCommissionRateVariancePopulationAggregateFilter>;
  /** Sample variance aggregate over matching `IndexerCommissionRate` objects. */
  varianceSample?: InputMaybe<IndexerCommissionRateVarianceSampleAggregateFilter>;
};

export type IndexerCommissionRateAverageAggregateFilter = {
  commissionRate?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigFloatFilter>;
};

export type IndexerCommissionRateAverageAggregates = {
  __typename?: 'IndexerCommissionRateAverageAggregates';
  /** Mean average of commissionRate across the matching connection */
  commissionRate?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerCommissionRateDistinctCountAggregateFilter = {
  _blockRange?: InputMaybe<BigIntFilter>;
  _id?: InputMaybe<BigIntFilter>;
  commissionRate?: InputMaybe<BigIntFilter>;
  eraId?: InputMaybe<BigIntFilter>;
  eraIdx?: InputMaybe<BigIntFilter>;
  id?: InputMaybe<BigIntFilter>;
  indexerId?: InputMaybe<BigIntFilter>;
};

export type IndexerCommissionRateDistinctCountAggregates = {
  __typename?: 'IndexerCommissionRateDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  _blockRange?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  _id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of commissionRate across the matching connection */
  commissionRate?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of eraId across the matching connection */
  eraId?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of indexerId across the matching connection */
  indexerId?: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `IndexerCommissionRate` object types. All fields are combined with a logical ‘and.’ */
export type IndexerCommissionRateFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<IndexerCommissionRateFilter>>;
  /** Filter by the object’s `commissionRate` field. */
  commissionRate?: InputMaybe<IntFilter>;
  /** Filter by the object’s `era` relation. */
  era?: InputMaybe<EraFilter>;
  /** Filter by the object’s `eraId` field. */
  eraId?: InputMaybe<StringFilter>;
  /** Filter by the object’s `eraIdx` field. */
  eraIdx?: InputMaybe<IntFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<StringFilter>;
  /** Filter by the object’s `indexer` relation. */
  indexer?: InputMaybe<IndexerFilter>;
  /** Filter by the object’s `indexerId` field. */
  indexerId?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<IndexerCommissionRateFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<IndexerCommissionRateFilter>>;
};

export type IndexerCommissionRateMaxAggregateFilter = {
  commissionRate?: InputMaybe<IntFilter>;
  eraIdx?: InputMaybe<IntFilter>;
};

export type IndexerCommissionRateMaxAggregates = {
  __typename?: 'IndexerCommissionRateMaxAggregates';
  /** Maximum of commissionRate across the matching connection */
  commissionRate?: Maybe<Scalars['Int']['output']>;
  /** Maximum of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['Int']['output']>;
};

export type IndexerCommissionRateMinAggregateFilter = {
  commissionRate?: InputMaybe<IntFilter>;
  eraIdx?: InputMaybe<IntFilter>;
};

export type IndexerCommissionRateMinAggregates = {
  __typename?: 'IndexerCommissionRateMinAggregates';
  /** Minimum of commissionRate across the matching connection */
  commissionRate?: Maybe<Scalars['Int']['output']>;
  /** Minimum of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['Int']['output']>;
};

export type IndexerCommissionRateStddevPopulationAggregateFilter = {
  commissionRate?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigFloatFilter>;
};

export type IndexerCommissionRateStddevPopulationAggregates = {
  __typename?: 'IndexerCommissionRateStddevPopulationAggregates';
  /** Population standard deviation of commissionRate across the matching connection */
  commissionRate?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerCommissionRateStddevSampleAggregateFilter = {
  commissionRate?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigFloatFilter>;
};

export type IndexerCommissionRateStddevSampleAggregates = {
  __typename?: 'IndexerCommissionRateStddevSampleAggregates';
  /** Sample standard deviation of commissionRate across the matching connection */
  commissionRate?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerCommissionRateSumAggregateFilter = {
  commissionRate?: InputMaybe<BigIntFilter>;
  eraIdx?: InputMaybe<BigIntFilter>;
};

export type IndexerCommissionRateSumAggregates = {
  __typename?: 'IndexerCommissionRateSumAggregates';
  /** Sum of commissionRate across the matching connection */
  commissionRate: Scalars['BigInt']['output'];
  /** Sum of eraIdx across the matching connection */
  eraIdx: Scalars['BigInt']['output'];
};

export type IndexerCommissionRateVariancePopulationAggregateFilter = {
  commissionRate?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigFloatFilter>;
};

export type IndexerCommissionRateVariancePopulationAggregates = {
  __typename?: 'IndexerCommissionRateVariancePopulationAggregates';
  /** Population variance of commissionRate across the matching connection */
  commissionRate?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerCommissionRateVarianceSampleAggregateFilter = {
  commissionRate?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigFloatFilter>;
};

export type IndexerCommissionRateVarianceSampleAggregates = {
  __typename?: 'IndexerCommissionRateVarianceSampleAggregates';
  /** Sample variance of commissionRate across the matching connection */
  commissionRate?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `IndexerCommissionRate` values. */
export type IndexerCommissionRatesConnection = {
  __typename?: 'IndexerCommissionRatesConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<IndexerCommissionRateAggregates>;
  /** A list of edges which contains the `IndexerCommissionRate` and cursor to aid in pagination. */
  edges: Array<IndexerCommissionRatesEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<IndexerCommissionRateAggregates>>;
  /** A list of `IndexerCommissionRate` objects. */
  nodes: Array<Maybe<IndexerCommissionRate>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `IndexerCommissionRate` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `IndexerCommissionRate` values. */
export type IndexerCommissionRatesConnectionGroupedAggregatesArgs = {
  groupBy: Array<IndexerCommissionRatesGroupBy>;
  having?: InputMaybe<IndexerCommissionRatesHavingInput>;
};

/** A `IndexerCommissionRate` edge in the connection. */
export type IndexerCommissionRatesEdge = {
  __typename?: 'IndexerCommissionRatesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `IndexerCommissionRate` at the end of the edge. */
  node?: Maybe<IndexerCommissionRate>;
};

/** Grouping methods for `IndexerCommissionRate` for usage during aggregation. */
export enum IndexerCommissionRatesGroupBy {
  CommissionRate = 'COMMISSION_RATE',
  EraId = 'ERA_ID',
  EraIdx = 'ERA_IDX',
  Id = 'ID',
  IndexerId = 'INDEXER_ID'
}

export type IndexerCommissionRatesHavingAverageInput = {
  commissionRate?: InputMaybe<HavingIntFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
};

export type IndexerCommissionRatesHavingDistinctCountInput = {
  commissionRate?: InputMaybe<HavingIntFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
};

/** Conditions for `IndexerCommissionRate` aggregates. */
export type IndexerCommissionRatesHavingInput = {
  AND?: InputMaybe<Array<IndexerCommissionRatesHavingInput>>;
  OR?: InputMaybe<Array<IndexerCommissionRatesHavingInput>>;
  average?: InputMaybe<IndexerCommissionRatesHavingAverageInput>;
  distinctCount?: InputMaybe<IndexerCommissionRatesHavingDistinctCountInput>;
  max?: InputMaybe<IndexerCommissionRatesHavingMaxInput>;
  min?: InputMaybe<IndexerCommissionRatesHavingMinInput>;
  stddevPopulation?: InputMaybe<IndexerCommissionRatesHavingStddevPopulationInput>;
  stddevSample?: InputMaybe<IndexerCommissionRatesHavingStddevSampleInput>;
  sum?: InputMaybe<IndexerCommissionRatesHavingSumInput>;
  variancePopulation?: InputMaybe<IndexerCommissionRatesHavingVariancePopulationInput>;
  varianceSample?: InputMaybe<IndexerCommissionRatesHavingVarianceSampleInput>;
};

export type IndexerCommissionRatesHavingMaxInput = {
  commissionRate?: InputMaybe<HavingIntFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
};

export type IndexerCommissionRatesHavingMinInput = {
  commissionRate?: InputMaybe<HavingIntFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
};

export type IndexerCommissionRatesHavingStddevPopulationInput = {
  commissionRate?: InputMaybe<HavingIntFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
};

export type IndexerCommissionRatesHavingStddevSampleInput = {
  commissionRate?: InputMaybe<HavingIntFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
};

export type IndexerCommissionRatesHavingSumInput = {
  commissionRate?: InputMaybe<HavingIntFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
};

export type IndexerCommissionRatesHavingVariancePopulationInput = {
  commissionRate?: InputMaybe<HavingIntFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
};

export type IndexerCommissionRatesHavingVarianceSampleInput = {
  commissionRate?: InputMaybe<HavingIntFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
};

/** Methods to use when ordering `IndexerCommissionRate`. */
export enum IndexerCommissionRatesOrderBy {
  CommissionRateAsc = 'COMMISSION_RATE_ASC',
  CommissionRateDesc = 'COMMISSION_RATE_DESC',
  EraByEraIdCreatedBlockAsc = 'ERA_BY_ERA_ID__CREATED_BLOCK_ASC',
  EraByEraIdCreatedBlockDesc = 'ERA_BY_ERA_ID__CREATED_BLOCK_DESC',
  EraByEraIdEndTimeAsc = 'ERA_BY_ERA_ID__END_TIME_ASC',
  EraByEraIdEndTimeDesc = 'ERA_BY_ERA_ID__END_TIME_DESC',
  EraByEraIdEraPeriodAsc = 'ERA_BY_ERA_ID__ERA_PERIOD_ASC',
  EraByEraIdEraPeriodDesc = 'ERA_BY_ERA_ID__ERA_PERIOD_DESC',
  EraByEraIdForceNextAsc = 'ERA_BY_ERA_ID__FORCE_NEXT_ASC',
  EraByEraIdForceNextDesc = 'ERA_BY_ERA_ID__FORCE_NEXT_DESC',
  EraByEraIdIdAsc = 'ERA_BY_ERA_ID__ID_ASC',
  EraByEraIdIdDesc = 'ERA_BY_ERA_ID__ID_DESC',
  EraByEraIdLastEventAsc = 'ERA_BY_ERA_ID__LAST_EVENT_ASC',
  EraByEraIdLastEventDesc = 'ERA_BY_ERA_ID__LAST_EVENT_DESC',
  EraByEraIdStartTimeAsc = 'ERA_BY_ERA_ID__START_TIME_ASC',
  EraByEraIdStartTimeDesc = 'ERA_BY_ERA_ID__START_TIME_DESC',
  EraIdxAsc = 'ERA_IDX_ASC',
  EraIdxDesc = 'ERA_IDX_DESC',
  EraIdAsc = 'ERA_ID_ASC',
  EraIdDesc = 'ERA_ID_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  IndexerByIndexerIdActiveAsc = 'INDEXER_BY_INDEXER_ID__ACTIVE_ASC',
  IndexerByIndexerIdActiveDesc = 'INDEXER_BY_INDEXER_ID__ACTIVE_DESC',
  IndexerByIndexerIdCapacityAsc = 'INDEXER_BY_INDEXER_ID__CAPACITY_ASC',
  IndexerByIndexerIdCapacityDesc = 'INDEXER_BY_INDEXER_ID__CAPACITY_DESC',
  IndexerByIndexerIdCommissionAsc = 'INDEXER_BY_INDEXER_ID__COMMISSION_ASC',
  IndexerByIndexerIdCommissionDesc = 'INDEXER_BY_INDEXER_ID__COMMISSION_DESC',
  IndexerByIndexerIdControllerAsc = 'INDEXER_BY_INDEXER_ID__CONTROLLER_ASC',
  IndexerByIndexerIdControllerDesc = 'INDEXER_BY_INDEXER_ID__CONTROLLER_DESC',
  IndexerByIndexerIdCreatedBlockAsc = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_ASC',
  IndexerByIndexerIdCreatedBlockDesc = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_DESC',
  IndexerByIndexerIdIdAsc = 'INDEXER_BY_INDEXER_ID__ID_ASC',
  IndexerByIndexerIdIdDesc = 'INDEXER_BY_INDEXER_ID__ID_DESC',
  IndexerByIndexerIdLastClaimEraAsc = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_ASC',
  IndexerByIndexerIdLastClaimEraDesc = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_DESC',
  IndexerByIndexerIdLastEventAsc = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_ASC',
  IndexerByIndexerIdLastEventDesc = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_DESC',
  IndexerByIndexerIdLastSettledEraAsc = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_ASC',
  IndexerByIndexerIdLastSettledEraDesc = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_DESC',
  IndexerByIndexerIdMaxUnstakeAmountAsc = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_ASC',
  IndexerByIndexerIdMaxUnstakeAmountDesc = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_DESC',
  IndexerByIndexerIdMetadataAsc = 'INDEXER_BY_INDEXER_ID__METADATA_ASC',
  IndexerByIndexerIdMetadataDesc = 'INDEXER_BY_INDEXER_ID__METADATA_DESC',
  IndexerByIndexerIdSelfStakeAsc = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_ASC',
  IndexerByIndexerIdSelfStakeDesc = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_DESC',
  IndexerByIndexerIdTotalStakeAsc = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_ASC',
  IndexerByIndexerIdTotalStakeDesc = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_DESC',
  IndexerIdAsc = 'INDEXER_ID_ASC',
  IndexerIdDesc = 'INDEXER_ID_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** A connection to a list of `Delegator` values, with data from `Delegation`. */
export type IndexerDelegatorsByDelegationIndexerIdAndDelegatorIdManyToManyConnection = {
  __typename?: 'IndexerDelegatorsByDelegationIndexerIdAndDelegatorIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<DelegatorAggregates>;
  /** A list of edges which contains the `Delegator`, info from the `Delegation`, and the cursor to aid in pagination. */
  edges: Array<IndexerDelegatorsByDelegationIndexerIdAndDelegatorIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<DelegatorAggregates>>;
  /** A list of `Delegator` objects. */
  nodes: Array<Maybe<Delegator>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Delegator` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Delegator` values, with data from `Delegation`. */
export type IndexerDelegatorsByDelegationIndexerIdAndDelegatorIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: Array<DelegatorsGroupBy>;
  having?: InputMaybe<DelegatorsHavingInput>;
};

/** A `Delegator` edge in the connection, with data from `Delegation`. */
export type IndexerDelegatorsByDelegationIndexerIdAndDelegatorIdManyToManyEdge = {
  __typename?: 'IndexerDelegatorsByDelegationIndexerIdAndDelegatorIdManyToManyEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `Delegation`. */
  delegations: DelegationsConnection;
  /** The `Delegator` at the end of the edge. */
  node?: Maybe<Delegator>;
};


/** A `Delegator` edge in the connection, with data from `Delegation`. */
export type IndexerDelegatorsByDelegationIndexerIdAndDelegatorIdManyToManyEdgeDelegationsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Delegations_Distinct_Enum>>>;
  filter?: InputMaybe<DelegationFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<DelegationsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

/** A connection to a list of `Delegator` values, with data from `EraDelegatorIndexerApy`. */
export type IndexerDelegatorsByEraDelegatorIndexerApyIndexerIdAndDelegatorIdManyToManyConnection = {
  __typename?: 'IndexerDelegatorsByEraDelegatorIndexerApyIndexerIdAndDelegatorIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<DelegatorAggregates>;
  /** A list of edges which contains the `Delegator`, info from the `EraDelegatorIndexerApy`, and the cursor to aid in pagination. */
  edges: Array<IndexerDelegatorsByEraDelegatorIndexerApyIndexerIdAndDelegatorIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<DelegatorAggregates>>;
  /** A list of `Delegator` objects. */
  nodes: Array<Maybe<Delegator>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Delegator` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Delegator` values, with data from `EraDelegatorIndexerApy`. */
export type IndexerDelegatorsByEraDelegatorIndexerApyIndexerIdAndDelegatorIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: Array<DelegatorsGroupBy>;
  having?: InputMaybe<DelegatorsHavingInput>;
};

/** A `Delegator` edge in the connection, with data from `EraDelegatorIndexerApy`. */
export type IndexerDelegatorsByEraDelegatorIndexerApyIndexerIdAndDelegatorIdManyToManyEdge = {
  __typename?: 'IndexerDelegatorsByEraDelegatorIndexerApyIndexerIdAndDelegatorIdManyToManyEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `EraDelegatorIndexerApy`. */
  eraDelegatorIndexerApies: EraDelegatorIndexerApiesConnection;
  /** The `Delegator` at the end of the edge. */
  node?: Maybe<Delegator>;
};


/** A `Delegator` edge in the connection, with data from `EraDelegatorIndexerApy`. */
export type IndexerDelegatorsByEraDelegatorIndexerApyIndexerIdAndDelegatorIdManyToManyEdgeEraDelegatorIndexerApiesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Era_Delegator_Indexer_Apies_Distinct_Enum>>>;
  filter?: InputMaybe<EraDelegatorIndexerApyFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<EraDelegatorIndexerApiesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

/** A connection to a list of `Delegator` values, with data from `EraReward`. */
export type IndexerDelegatorsByEraRewardIndexerIdAndDelegatorIdManyToManyConnection = {
  __typename?: 'IndexerDelegatorsByEraRewardIndexerIdAndDelegatorIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<DelegatorAggregates>;
  /** A list of edges which contains the `Delegator`, info from the `EraReward`, and the cursor to aid in pagination. */
  edges: Array<IndexerDelegatorsByEraRewardIndexerIdAndDelegatorIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<DelegatorAggregates>>;
  /** A list of `Delegator` objects. */
  nodes: Array<Maybe<Delegator>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Delegator` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Delegator` values, with data from `EraReward`. */
export type IndexerDelegatorsByEraRewardIndexerIdAndDelegatorIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: Array<DelegatorsGroupBy>;
  having?: InputMaybe<DelegatorsHavingInput>;
};

/** A `Delegator` edge in the connection, with data from `EraReward`. */
export type IndexerDelegatorsByEraRewardIndexerIdAndDelegatorIdManyToManyEdge = {
  __typename?: 'IndexerDelegatorsByEraRewardIndexerIdAndDelegatorIdManyToManyEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `EraReward`. */
  eraRewards: EraRewardsConnection;
  /** The `Delegator` at the end of the edge. */
  node?: Maybe<Delegator>;
};


/** A `Delegator` edge in the connection, with data from `EraReward`. */
export type IndexerDelegatorsByEraRewardIndexerIdAndDelegatorIdManyToManyEdgeEraRewardsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Era_Rewards_Distinct_Enum>>>;
  filter?: InputMaybe<EraRewardFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<EraRewardsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

/** A connection to a list of `Delegator` values, with data from `EraStake`. */
export type IndexerDelegatorsByEraStakeIndexerIdAndDelegatorIdManyToManyConnection = {
  __typename?: 'IndexerDelegatorsByEraStakeIndexerIdAndDelegatorIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<DelegatorAggregates>;
  /** A list of edges which contains the `Delegator`, info from the `EraStake`, and the cursor to aid in pagination. */
  edges: Array<IndexerDelegatorsByEraStakeIndexerIdAndDelegatorIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<DelegatorAggregates>>;
  /** A list of `Delegator` objects. */
  nodes: Array<Maybe<Delegator>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Delegator` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Delegator` values, with data from `EraStake`. */
export type IndexerDelegatorsByEraStakeIndexerIdAndDelegatorIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: Array<DelegatorsGroupBy>;
  having?: InputMaybe<DelegatorsHavingInput>;
};

/** A `Delegator` edge in the connection, with data from `EraStake`. */
export type IndexerDelegatorsByEraStakeIndexerIdAndDelegatorIdManyToManyEdge = {
  __typename?: 'IndexerDelegatorsByEraStakeIndexerIdAndDelegatorIdManyToManyEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `EraStake`. */
  eraStakes: EraStakesConnection;
  /** The `Delegator` at the end of the edge. */
  node?: Maybe<Delegator>;
};


/** A `Delegator` edge in the connection, with data from `EraStake`. */
export type IndexerDelegatorsByEraStakeIndexerIdAndDelegatorIdManyToManyEdgeEraStakesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Era_Stakes_Distinct_Enum>>>;
  filter?: InputMaybe<EraStakeFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<EraStakesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

export type IndexerDeployment = Node & {
  __typename?: 'IndexerDeployment';
  createdBlock?: Maybe<Scalars['Int']['output']>;
  /** Reads a single `Deployment` that is related to this `IndexerDeployment`. */
  deployment?: Maybe<Deployment>;
  deploymentId: Scalars['String']['output'];
  id: Scalars['String']['output'];
  /** Reads a single `Indexer` that is related to this `IndexerDeployment`. */
  indexer?: Maybe<Indexer>;
  indexerId: Scalars['String']['output'];
  lastEvent?: Maybe<Scalars['String']['output']>;
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  status: ServiceStatus;
  timestamp?: Maybe<Scalars['Datetime']['output']>;
};

export type IndexerDeploymentAggregates = {
  __typename?: 'IndexerDeploymentAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  average?: Maybe<IndexerDeploymentAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  distinctCount?: Maybe<IndexerDeploymentDistinctCountAggregates>;
  keys?: Maybe<Array<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  max?: Maybe<IndexerDeploymentMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  min?: Maybe<IndexerDeploymentMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevPopulation?: Maybe<IndexerDeploymentStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevSample?: Maybe<IndexerDeploymentStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  sum?: Maybe<IndexerDeploymentSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  variancePopulation?: Maybe<IndexerDeploymentVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  varianceSample?: Maybe<IndexerDeploymentVarianceSampleAggregates>;
};

/** A filter to be used against aggregates of `IndexerDeployment` object types. */
export type IndexerDeploymentAggregatesFilter = {
  /** Mean average aggregate over matching `IndexerDeployment` objects. */
  average?: InputMaybe<IndexerDeploymentAverageAggregateFilter>;
  /** Distinct count aggregate over matching `IndexerDeployment` objects. */
  distinctCount?: InputMaybe<IndexerDeploymentDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `IndexerDeployment` object to be included within the aggregate. */
  filter?: InputMaybe<IndexerDeploymentFilter>;
  /** Maximum aggregate over matching `IndexerDeployment` objects. */
  max?: InputMaybe<IndexerDeploymentMaxAggregateFilter>;
  /** Minimum aggregate over matching `IndexerDeployment` objects. */
  min?: InputMaybe<IndexerDeploymentMinAggregateFilter>;
  /** Population standard deviation aggregate over matching `IndexerDeployment` objects. */
  stddevPopulation?: InputMaybe<IndexerDeploymentStddevPopulationAggregateFilter>;
  /** Sample standard deviation aggregate over matching `IndexerDeployment` objects. */
  stddevSample?: InputMaybe<IndexerDeploymentStddevSampleAggregateFilter>;
  /** Sum aggregate over matching `IndexerDeployment` objects. */
  sum?: InputMaybe<IndexerDeploymentSumAggregateFilter>;
  /** Population variance aggregate over matching `IndexerDeployment` objects. */
  variancePopulation?: InputMaybe<IndexerDeploymentVariancePopulationAggregateFilter>;
  /** Sample variance aggregate over matching `IndexerDeployment` objects. */
  varianceSample?: InputMaybe<IndexerDeploymentVarianceSampleAggregateFilter>;
};

export type IndexerDeploymentAverageAggregateFilter = {
  createdBlock?: InputMaybe<BigFloatFilter>;
};

export type IndexerDeploymentAverageAggregates = {
  __typename?: 'IndexerDeploymentAverageAggregates';
  /** Mean average of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerDeploymentDistinctCountAggregateFilter = {
  _blockRange?: InputMaybe<BigIntFilter>;
  _id?: InputMaybe<BigIntFilter>;
  createdBlock?: InputMaybe<BigIntFilter>;
  deploymentId?: InputMaybe<BigIntFilter>;
  id?: InputMaybe<BigIntFilter>;
  indexerId?: InputMaybe<BigIntFilter>;
  lastEvent?: InputMaybe<BigIntFilter>;
  status?: InputMaybe<BigIntFilter>;
  timestamp?: InputMaybe<BigIntFilter>;
};

export type IndexerDeploymentDistinctCountAggregates = {
  __typename?: 'IndexerDeploymentDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  _blockRange?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  _id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of deploymentId across the matching connection */
  deploymentId?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of indexerId across the matching connection */
  indexerId?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of lastEvent across the matching connection */
  lastEvent?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of status across the matching connection */
  status?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of timestamp across the matching connection */
  timestamp?: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `IndexerDeployment` object types. All fields are combined with a logical ‘and.’ */
export type IndexerDeploymentFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<IndexerDeploymentFilter>>;
  /** Filter by the object’s `createdBlock` field. */
  createdBlock?: InputMaybe<IntFilter>;
  /** Filter by the object’s `deployment` relation. */
  deployment?: InputMaybe<DeploymentFilter>;
  /** Filter by the object’s `deploymentId` field. */
  deploymentId?: InputMaybe<StringFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<StringFilter>;
  /** Filter by the object’s `indexer` relation. */
  indexer?: InputMaybe<IndexerFilter>;
  /** Filter by the object’s `indexerId` field. */
  indexerId?: InputMaybe<StringFilter>;
  /** Filter by the object’s `lastEvent` field. */
  lastEvent?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<IndexerDeploymentFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<IndexerDeploymentFilter>>;
  /** Filter by the object’s `status` field. */
  status?: InputMaybe<ServiceStatusFilter>;
  /** Filter by the object’s `timestamp` field. */
  timestamp?: InputMaybe<DatetimeFilter>;
};

export type IndexerDeploymentMaxAggregateFilter = {
  createdBlock?: InputMaybe<IntFilter>;
};

export type IndexerDeploymentMaxAggregates = {
  __typename?: 'IndexerDeploymentMaxAggregates';
  /** Maximum of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['Int']['output']>;
};

export type IndexerDeploymentMinAggregateFilter = {
  createdBlock?: InputMaybe<IntFilter>;
};

export type IndexerDeploymentMinAggregates = {
  __typename?: 'IndexerDeploymentMinAggregates';
  /** Minimum of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['Int']['output']>;
};

export type IndexerDeploymentStddevPopulationAggregateFilter = {
  createdBlock?: InputMaybe<BigFloatFilter>;
};

export type IndexerDeploymentStddevPopulationAggregates = {
  __typename?: 'IndexerDeploymentStddevPopulationAggregates';
  /** Population standard deviation of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerDeploymentStddevSampleAggregateFilter = {
  createdBlock?: InputMaybe<BigFloatFilter>;
};

export type IndexerDeploymentStddevSampleAggregates = {
  __typename?: 'IndexerDeploymentStddevSampleAggregates';
  /** Sample standard deviation of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerDeploymentSumAggregateFilter = {
  createdBlock?: InputMaybe<BigIntFilter>;
};

export type IndexerDeploymentSumAggregates = {
  __typename?: 'IndexerDeploymentSumAggregates';
  /** Sum of createdBlock across the matching connection */
  createdBlock: Scalars['BigInt']['output'];
};

export type IndexerDeploymentVariancePopulationAggregateFilter = {
  createdBlock?: InputMaybe<BigFloatFilter>;
};

export type IndexerDeploymentVariancePopulationAggregates = {
  __typename?: 'IndexerDeploymentVariancePopulationAggregates';
  /** Population variance of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerDeploymentVarianceSampleAggregateFilter = {
  createdBlock?: InputMaybe<BigFloatFilter>;
};

export type IndexerDeploymentVarianceSampleAggregates = {
  __typename?: 'IndexerDeploymentVarianceSampleAggregates';
  /** Sample variance of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `Deployment` values, with data from `EraIndexerDeploymentApy`. */
export type IndexerDeploymentsByEraIndexerDeploymentApyIndexerIdAndDeploymentIdManyToManyConnection = {
  __typename?: 'IndexerDeploymentsByEraIndexerDeploymentApyIndexerIdAndDeploymentIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<DeploymentAggregates>;
  /** A list of edges which contains the `Deployment`, info from the `EraIndexerDeploymentApy`, and the cursor to aid in pagination. */
  edges: Array<IndexerDeploymentsByEraIndexerDeploymentApyIndexerIdAndDeploymentIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<DeploymentAggregates>>;
  /** A list of `Deployment` objects. */
  nodes: Array<Maybe<Deployment>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Deployment` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Deployment` values, with data from `EraIndexerDeploymentApy`. */
export type IndexerDeploymentsByEraIndexerDeploymentApyIndexerIdAndDeploymentIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: Array<DeploymentsGroupBy>;
  having?: InputMaybe<DeploymentsHavingInput>;
};

/** A `Deployment` edge in the connection, with data from `EraIndexerDeploymentApy`. */
export type IndexerDeploymentsByEraIndexerDeploymentApyIndexerIdAndDeploymentIdManyToManyEdge = {
  __typename?: 'IndexerDeploymentsByEraIndexerDeploymentApyIndexerIdAndDeploymentIdManyToManyEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `EraIndexerDeploymentApy`. */
  eraIndexerDeploymentApies: EraIndexerDeploymentApiesConnection;
  /** The `Deployment` at the end of the edge. */
  node?: Maybe<Deployment>;
};


/** A `Deployment` edge in the connection, with data from `EraIndexerDeploymentApy`. */
export type IndexerDeploymentsByEraIndexerDeploymentApyIndexerIdAndDeploymentIdManyToManyEdgeEraIndexerDeploymentApiesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Era_Indexer_Deployment_Apies_Distinct_Enum>>>;
  filter?: InputMaybe<EraIndexerDeploymentApyFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<EraIndexerDeploymentApiesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

/** A connection to a list of `Deployment` values, with data from `IndexerAllocation`. */
export type IndexerDeploymentsByIndexerAllocationIndexerIdAndDeploymentIdManyToManyConnection = {
  __typename?: 'IndexerDeploymentsByIndexerAllocationIndexerIdAndDeploymentIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<DeploymentAggregates>;
  /** A list of edges which contains the `Deployment`, info from the `IndexerAllocation`, and the cursor to aid in pagination. */
  edges: Array<IndexerDeploymentsByIndexerAllocationIndexerIdAndDeploymentIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<DeploymentAggregates>>;
  /** A list of `Deployment` objects. */
  nodes: Array<Maybe<Deployment>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Deployment` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Deployment` values, with data from `IndexerAllocation`. */
export type IndexerDeploymentsByIndexerAllocationIndexerIdAndDeploymentIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: Array<DeploymentsGroupBy>;
  having?: InputMaybe<DeploymentsHavingInput>;
};

/** A `Deployment` edge in the connection, with data from `IndexerAllocation`. */
export type IndexerDeploymentsByIndexerAllocationIndexerIdAndDeploymentIdManyToManyEdge = {
  __typename?: 'IndexerDeploymentsByIndexerAllocationIndexerIdAndDeploymentIdManyToManyEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `IndexerAllocation`. */
  indexerAllocations: IndexerAllocationsConnection;
  /** The `Deployment` at the end of the edge. */
  node?: Maybe<Deployment>;
};


/** A `Deployment` edge in the connection, with data from `IndexerAllocation`. */
export type IndexerDeploymentsByIndexerAllocationIndexerIdAndDeploymentIdManyToManyEdgeIndexerAllocationsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Allocations_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerAllocationFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexerAllocationsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

/** A connection to a list of `Deployment` values, with data from `IndexerAllocationReward`. */
export type IndexerDeploymentsByIndexerAllocationRewardIndexerIdAndDeploymentIdManyToManyConnection = {
  __typename?: 'IndexerDeploymentsByIndexerAllocationRewardIndexerIdAndDeploymentIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<DeploymentAggregates>;
  /** A list of edges which contains the `Deployment`, info from the `IndexerAllocationReward`, and the cursor to aid in pagination. */
  edges: Array<IndexerDeploymentsByIndexerAllocationRewardIndexerIdAndDeploymentIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<DeploymentAggregates>>;
  /** A list of `Deployment` objects. */
  nodes: Array<Maybe<Deployment>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Deployment` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Deployment` values, with data from `IndexerAllocationReward`. */
export type IndexerDeploymentsByIndexerAllocationRewardIndexerIdAndDeploymentIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: Array<DeploymentsGroupBy>;
  having?: InputMaybe<DeploymentsHavingInput>;
};

/** A `Deployment` edge in the connection, with data from `IndexerAllocationReward`. */
export type IndexerDeploymentsByIndexerAllocationRewardIndexerIdAndDeploymentIdManyToManyEdge = {
  __typename?: 'IndexerDeploymentsByIndexerAllocationRewardIndexerIdAndDeploymentIdManyToManyEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `IndexerAllocationReward`. */
  indexerAllocationRewards: IndexerAllocationRewardsConnection;
  /** The `Deployment` at the end of the edge. */
  node?: Maybe<Deployment>;
};


/** A `Deployment` edge in the connection, with data from `IndexerAllocationReward`. */
export type IndexerDeploymentsByIndexerAllocationRewardIndexerIdAndDeploymentIdManyToManyEdgeIndexerAllocationRewardsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Allocation_Rewards_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerAllocationRewardFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexerAllocationRewardsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

/** A connection to a list of `Deployment` values, with data from `IndexerAllocationRewardSummary`. */
export type IndexerDeploymentsByIndexerAllocationRewardSummaryIndexerIdAndDeploymentIdManyToManyConnection = {
  __typename?: 'IndexerDeploymentsByIndexerAllocationRewardSummaryIndexerIdAndDeploymentIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<DeploymentAggregates>;
  /** A list of edges which contains the `Deployment`, info from the `IndexerAllocationRewardSummary`, and the cursor to aid in pagination. */
  edges: Array<IndexerDeploymentsByIndexerAllocationRewardSummaryIndexerIdAndDeploymentIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<DeploymentAggregates>>;
  /** A list of `Deployment` objects. */
  nodes: Array<Maybe<Deployment>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Deployment` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Deployment` values, with data from `IndexerAllocationRewardSummary`. */
export type IndexerDeploymentsByIndexerAllocationRewardSummaryIndexerIdAndDeploymentIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: Array<DeploymentsGroupBy>;
  having?: InputMaybe<DeploymentsHavingInput>;
};

/** A `Deployment` edge in the connection, with data from `IndexerAllocationRewardSummary`. */
export type IndexerDeploymentsByIndexerAllocationRewardSummaryIndexerIdAndDeploymentIdManyToManyEdge = {
  __typename?: 'IndexerDeploymentsByIndexerAllocationRewardSummaryIndexerIdAndDeploymentIdManyToManyEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `IndexerAllocationRewardSummary`. */
  indexerAllocationRewardSummaries: IndexerAllocationRewardSummariesConnection;
  /** The `Deployment` at the end of the edge. */
  node?: Maybe<Deployment>;
};


/** A `Deployment` edge in the connection, with data from `IndexerAllocationRewardSummary`. */
export type IndexerDeploymentsByIndexerAllocationRewardSummaryIndexerIdAndDeploymentIdManyToManyEdgeIndexerAllocationRewardSummariesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Allocation_Reward_Summaries_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerAllocationRewardSummaryFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexerAllocationRewardSummariesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

/** A connection to a list of `Deployment` values, with data from `IndexerAllocationSummary`. */
export type IndexerDeploymentsByIndexerAllocationSummaryIndexerIdAndDeploymentIdManyToManyConnection = {
  __typename?: 'IndexerDeploymentsByIndexerAllocationSummaryIndexerIdAndDeploymentIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<DeploymentAggregates>;
  /** A list of edges which contains the `Deployment`, info from the `IndexerAllocationSummary`, and the cursor to aid in pagination. */
  edges: Array<IndexerDeploymentsByIndexerAllocationSummaryIndexerIdAndDeploymentIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<DeploymentAggregates>>;
  /** A list of `Deployment` objects. */
  nodes: Array<Maybe<Deployment>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Deployment` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Deployment` values, with data from `IndexerAllocationSummary`. */
export type IndexerDeploymentsByIndexerAllocationSummaryIndexerIdAndDeploymentIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: Array<DeploymentsGroupBy>;
  having?: InputMaybe<DeploymentsHavingInput>;
};

/** A `Deployment` edge in the connection, with data from `IndexerAllocationSummary`. */
export type IndexerDeploymentsByIndexerAllocationSummaryIndexerIdAndDeploymentIdManyToManyEdge = {
  __typename?: 'IndexerDeploymentsByIndexerAllocationSummaryIndexerIdAndDeploymentIdManyToManyEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `IndexerAllocationSummary`. */
  indexerAllocationSummaries: IndexerAllocationSummariesConnection;
  /** The `Deployment` at the end of the edge. */
  node?: Maybe<Deployment>;
};


/** A `Deployment` edge in the connection, with data from `IndexerAllocationSummary`. */
export type IndexerDeploymentsByIndexerAllocationSummaryIndexerIdAndDeploymentIdManyToManyEdgeIndexerAllocationSummariesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Allocation_Summaries_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerAllocationSummaryFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexerAllocationSummariesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

/** A connection to a list of `Deployment` values, with data from `IndexerDeployment`. */
export type IndexerDeploymentsByIndexerDeploymentIndexerIdAndDeploymentIdManyToManyConnection = {
  __typename?: 'IndexerDeploymentsByIndexerDeploymentIndexerIdAndDeploymentIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<DeploymentAggregates>;
  /** A list of edges which contains the `Deployment`, info from the `IndexerDeployment`, and the cursor to aid in pagination. */
  edges: Array<IndexerDeploymentsByIndexerDeploymentIndexerIdAndDeploymentIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<DeploymentAggregates>>;
  /** A list of `Deployment` objects. */
  nodes: Array<Maybe<Deployment>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Deployment` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Deployment` values, with data from `IndexerDeployment`. */
export type IndexerDeploymentsByIndexerDeploymentIndexerIdAndDeploymentIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: Array<DeploymentsGroupBy>;
  having?: InputMaybe<DeploymentsHavingInput>;
};

/** A `Deployment` edge in the connection, with data from `IndexerDeployment`. */
export type IndexerDeploymentsByIndexerDeploymentIndexerIdAndDeploymentIdManyToManyEdge = {
  __typename?: 'IndexerDeploymentsByIndexerDeploymentIndexerIdAndDeploymentIdManyToManyEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `IndexerDeployment`. */
  indexers: IndexerDeploymentsConnection;
  /** The `Deployment` at the end of the edge. */
  node?: Maybe<Deployment>;
};


/** A `Deployment` edge in the connection, with data from `IndexerDeployment`. */
export type IndexerDeploymentsByIndexerDeploymentIndexerIdAndDeploymentIdManyToManyEdgeIndexersArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Deployments_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerDeploymentFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexerDeploymentsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

/** A connection to a list of `Deployment` values, with data from `IndexerMissedLabor`. */
export type IndexerDeploymentsByIndexerMissedLaborIndexerIdAndDeploymentIdManyToManyConnection = {
  __typename?: 'IndexerDeploymentsByIndexerMissedLaborIndexerIdAndDeploymentIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<DeploymentAggregates>;
  /** A list of edges which contains the `Deployment`, info from the `IndexerMissedLabor`, and the cursor to aid in pagination. */
  edges: Array<IndexerDeploymentsByIndexerMissedLaborIndexerIdAndDeploymentIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<DeploymentAggregates>>;
  /** A list of `Deployment` objects. */
  nodes: Array<Maybe<Deployment>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Deployment` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Deployment` values, with data from `IndexerMissedLabor`. */
export type IndexerDeploymentsByIndexerMissedLaborIndexerIdAndDeploymentIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: Array<DeploymentsGroupBy>;
  having?: InputMaybe<DeploymentsHavingInput>;
};

/** A `Deployment` edge in the connection, with data from `IndexerMissedLabor`. */
export type IndexerDeploymentsByIndexerMissedLaborIndexerIdAndDeploymentIdManyToManyEdge = {
  __typename?: 'IndexerDeploymentsByIndexerMissedLaborIndexerIdAndDeploymentIdManyToManyEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `IndexerMissedLabor`. */
  indexerMissedLabors: IndexerMissedLaborsConnection;
  /** The `Deployment` at the end of the edge. */
  node?: Maybe<Deployment>;
};


/** A `Deployment` edge in the connection, with data from `IndexerMissedLabor`. */
export type IndexerDeploymentsByIndexerMissedLaborIndexerIdAndDeploymentIdManyToManyEdgeIndexerMissedLaborsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Missed_Labors_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerMissedLaborFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexerMissedLaborsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

/** A connection to a list of `IndexerDeployment` values. */
export type IndexerDeploymentsConnection = {
  __typename?: 'IndexerDeploymentsConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<IndexerDeploymentAggregates>;
  /** A list of edges which contains the `IndexerDeployment` and cursor to aid in pagination. */
  edges: Array<IndexerDeploymentsEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<IndexerDeploymentAggregates>>;
  /** A list of `IndexerDeployment` objects. */
  nodes: Array<Maybe<IndexerDeployment>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `IndexerDeployment` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `IndexerDeployment` values. */
export type IndexerDeploymentsConnectionGroupedAggregatesArgs = {
  groupBy: Array<IndexerDeploymentsGroupBy>;
  having?: InputMaybe<IndexerDeploymentsHavingInput>;
};

/** A `IndexerDeployment` edge in the connection. */
export type IndexerDeploymentsEdge = {
  __typename?: 'IndexerDeploymentsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `IndexerDeployment` at the end of the edge. */
  node?: Maybe<IndexerDeployment>;
};

/** Grouping methods for `IndexerDeployment` for usage during aggregation. */
export enum IndexerDeploymentsGroupBy {
  CreatedBlock = 'CREATED_BLOCK',
  DeploymentId = 'DEPLOYMENT_ID',
  Id = 'ID',
  IndexerId = 'INDEXER_ID',
  LastEvent = 'LAST_EVENT',
  Status = 'STATUS',
  Timestamp = 'TIMESTAMP',
  TimestampTruncatedToDay = 'TIMESTAMP_TRUNCATED_TO_DAY',
  TimestampTruncatedToHour = 'TIMESTAMP_TRUNCATED_TO_HOUR'
}

export type IndexerDeploymentsHavingAverageInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
  timestamp?: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerDeploymentsHavingDistinctCountInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
  timestamp?: InputMaybe<HavingDatetimeFilter>;
};

/** Conditions for `IndexerDeployment` aggregates. */
export type IndexerDeploymentsHavingInput = {
  AND?: InputMaybe<Array<IndexerDeploymentsHavingInput>>;
  OR?: InputMaybe<Array<IndexerDeploymentsHavingInput>>;
  average?: InputMaybe<IndexerDeploymentsHavingAverageInput>;
  distinctCount?: InputMaybe<IndexerDeploymentsHavingDistinctCountInput>;
  max?: InputMaybe<IndexerDeploymentsHavingMaxInput>;
  min?: InputMaybe<IndexerDeploymentsHavingMinInput>;
  stddevPopulation?: InputMaybe<IndexerDeploymentsHavingStddevPopulationInput>;
  stddevSample?: InputMaybe<IndexerDeploymentsHavingStddevSampleInput>;
  sum?: InputMaybe<IndexerDeploymentsHavingSumInput>;
  variancePopulation?: InputMaybe<IndexerDeploymentsHavingVariancePopulationInput>;
  varianceSample?: InputMaybe<IndexerDeploymentsHavingVarianceSampleInput>;
};

export type IndexerDeploymentsHavingMaxInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
  timestamp?: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerDeploymentsHavingMinInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
  timestamp?: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerDeploymentsHavingStddevPopulationInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
  timestamp?: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerDeploymentsHavingStddevSampleInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
  timestamp?: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerDeploymentsHavingSumInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
  timestamp?: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerDeploymentsHavingVariancePopulationInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
  timestamp?: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerDeploymentsHavingVarianceSampleInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
  timestamp?: InputMaybe<HavingDatetimeFilter>;
};

/** Methods to use when ordering `IndexerDeployment`. */
export enum IndexerDeploymentsOrderBy {
  CreatedBlockAsc = 'CREATED_BLOCK_ASC',
  CreatedBlockDesc = 'CREATED_BLOCK_DESC',
  DeploymentByDeploymentIdCreatedBlockAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_ASC',
  DeploymentByDeploymentIdCreatedBlockDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_DESC',
  DeploymentByDeploymentIdCreatedTimestampAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_ASC',
  DeploymentByDeploymentIdCreatedTimestampDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_DESC',
  DeploymentByDeploymentIdIdAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__ID_ASC',
  DeploymentByDeploymentIdIdDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__ID_DESC',
  DeploymentByDeploymentIdLastEventAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_ASC',
  DeploymentByDeploymentIdLastEventDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_DESC',
  DeploymentByDeploymentIdMetadataAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_ASC',
  DeploymentByDeploymentIdMetadataDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_DESC',
  DeploymentByDeploymentIdProjectIdAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_ASC',
  DeploymentByDeploymentIdProjectIdDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_DESC',
  DeploymentIdAsc = 'DEPLOYMENT_ID_ASC',
  DeploymentIdDesc = 'DEPLOYMENT_ID_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  IndexerByIndexerIdActiveAsc = 'INDEXER_BY_INDEXER_ID__ACTIVE_ASC',
  IndexerByIndexerIdActiveDesc = 'INDEXER_BY_INDEXER_ID__ACTIVE_DESC',
  IndexerByIndexerIdCapacityAsc = 'INDEXER_BY_INDEXER_ID__CAPACITY_ASC',
  IndexerByIndexerIdCapacityDesc = 'INDEXER_BY_INDEXER_ID__CAPACITY_DESC',
  IndexerByIndexerIdCommissionAsc = 'INDEXER_BY_INDEXER_ID__COMMISSION_ASC',
  IndexerByIndexerIdCommissionDesc = 'INDEXER_BY_INDEXER_ID__COMMISSION_DESC',
  IndexerByIndexerIdControllerAsc = 'INDEXER_BY_INDEXER_ID__CONTROLLER_ASC',
  IndexerByIndexerIdControllerDesc = 'INDEXER_BY_INDEXER_ID__CONTROLLER_DESC',
  IndexerByIndexerIdCreatedBlockAsc = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_ASC',
  IndexerByIndexerIdCreatedBlockDesc = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_DESC',
  IndexerByIndexerIdIdAsc = 'INDEXER_BY_INDEXER_ID__ID_ASC',
  IndexerByIndexerIdIdDesc = 'INDEXER_BY_INDEXER_ID__ID_DESC',
  IndexerByIndexerIdLastClaimEraAsc = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_ASC',
  IndexerByIndexerIdLastClaimEraDesc = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_DESC',
  IndexerByIndexerIdLastEventAsc = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_ASC',
  IndexerByIndexerIdLastEventDesc = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_DESC',
  IndexerByIndexerIdLastSettledEraAsc = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_ASC',
  IndexerByIndexerIdLastSettledEraDesc = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_DESC',
  IndexerByIndexerIdMaxUnstakeAmountAsc = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_ASC',
  IndexerByIndexerIdMaxUnstakeAmountDesc = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_DESC',
  IndexerByIndexerIdMetadataAsc = 'INDEXER_BY_INDEXER_ID__METADATA_ASC',
  IndexerByIndexerIdMetadataDesc = 'INDEXER_BY_INDEXER_ID__METADATA_DESC',
  IndexerByIndexerIdSelfStakeAsc = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_ASC',
  IndexerByIndexerIdSelfStakeDesc = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_DESC',
  IndexerByIndexerIdTotalStakeAsc = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_ASC',
  IndexerByIndexerIdTotalStakeDesc = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_DESC',
  IndexerIdAsc = 'INDEXER_ID_ASC',
  IndexerIdDesc = 'INDEXER_ID_DESC',
  LastEventAsc = 'LAST_EVENT_ASC',
  LastEventDesc = 'LAST_EVENT_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  StatusAsc = 'STATUS_ASC',
  StatusDesc = 'STATUS_DESC',
  TimestampAsc = 'TIMESTAMP_ASC',
  TimestampDesc = 'TIMESTAMP_DESC'
}

export type IndexerDistinctCountAggregates = {
  __typename?: 'IndexerDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  _blockRange?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  _id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of active across the matching connection */
  active?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of capacity across the matching connection */
  capacity?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of commission across the matching connection */
  commission?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of controller across the matching connection */
  controller?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of lastClaimEra across the matching connection */
  lastClaimEra?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of lastEvent across the matching connection */
  lastEvent?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of lastSettledEra across the matching connection */
  lastSettledEra?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of maxUnstakeAmount across the matching connection */
  maxUnstakeAmount?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of metadata across the matching connection */
  metadata?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of selfStake across the matching connection */
  selfStake?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of totalStake across the matching connection */
  totalStake?: Maybe<Scalars['BigInt']['output']>;
};

export type IndexerEraDeploymentReward = Node & {
  __typename?: 'IndexerEraDeploymentReward';
  agreementRewards: Scalars['BigFloat']['output'];
  allocationRewards: Scalars['BigFloat']['output'];
  changesHeight?: Maybe<Scalars['String']['output']>;
  deploymentId: Scalars['String']['output'];
  eraIdx: Scalars['Int']['output'];
  id: Scalars['String']['output'];
  /** Reads a single `Indexer` that is related to this `IndexerEraDeploymentReward`. */
  indexer?: Maybe<Indexer>;
  indexerId: Scalars['String']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  queryRewards: Scalars['BigFloat']['output'];
  stateChannelRewards: Scalars['BigFloat']['output'];
  totalRewards: Scalars['BigFloat']['output'];
};

export type IndexerEraDeploymentRewardAggregates = {
  __typename?: 'IndexerEraDeploymentRewardAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  average?: Maybe<IndexerEraDeploymentRewardAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  distinctCount?: Maybe<IndexerEraDeploymentRewardDistinctCountAggregates>;
  keys?: Maybe<Array<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  max?: Maybe<IndexerEraDeploymentRewardMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  min?: Maybe<IndexerEraDeploymentRewardMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevPopulation?: Maybe<IndexerEraDeploymentRewardStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevSample?: Maybe<IndexerEraDeploymentRewardStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  sum?: Maybe<IndexerEraDeploymentRewardSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  variancePopulation?: Maybe<IndexerEraDeploymentRewardVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  varianceSample?: Maybe<IndexerEraDeploymentRewardVarianceSampleAggregates>;
};

/** A filter to be used against aggregates of `IndexerEraDeploymentReward` object types. */
export type IndexerEraDeploymentRewardAggregatesFilter = {
  /** Mean average aggregate over matching `IndexerEraDeploymentReward` objects. */
  average?: InputMaybe<IndexerEraDeploymentRewardAverageAggregateFilter>;
  /** Distinct count aggregate over matching `IndexerEraDeploymentReward` objects. */
  distinctCount?: InputMaybe<IndexerEraDeploymentRewardDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `IndexerEraDeploymentReward` object to be included within the aggregate. */
  filter?: InputMaybe<IndexerEraDeploymentRewardFilter>;
  /** Maximum aggregate over matching `IndexerEraDeploymentReward` objects. */
  max?: InputMaybe<IndexerEraDeploymentRewardMaxAggregateFilter>;
  /** Minimum aggregate over matching `IndexerEraDeploymentReward` objects. */
  min?: InputMaybe<IndexerEraDeploymentRewardMinAggregateFilter>;
  /** Population standard deviation aggregate over matching `IndexerEraDeploymentReward` objects. */
  stddevPopulation?: InputMaybe<IndexerEraDeploymentRewardStddevPopulationAggregateFilter>;
  /** Sample standard deviation aggregate over matching `IndexerEraDeploymentReward` objects. */
  stddevSample?: InputMaybe<IndexerEraDeploymentRewardStddevSampleAggregateFilter>;
  /** Sum aggregate over matching `IndexerEraDeploymentReward` objects. */
  sum?: InputMaybe<IndexerEraDeploymentRewardSumAggregateFilter>;
  /** Population variance aggregate over matching `IndexerEraDeploymentReward` objects. */
  variancePopulation?: InputMaybe<IndexerEraDeploymentRewardVariancePopulationAggregateFilter>;
  /** Sample variance aggregate over matching `IndexerEraDeploymentReward` objects. */
  varianceSample?: InputMaybe<IndexerEraDeploymentRewardVarianceSampleAggregateFilter>;
};

export type IndexerEraDeploymentRewardAverageAggregateFilter = {
  agreementRewards?: InputMaybe<BigFloatFilter>;
  allocationRewards?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigFloatFilter>;
  queryRewards?: InputMaybe<BigFloatFilter>;
  stateChannelRewards?: InputMaybe<BigFloatFilter>;
  totalRewards?: InputMaybe<BigFloatFilter>;
};

export type IndexerEraDeploymentRewardAverageAggregates = {
  __typename?: 'IndexerEraDeploymentRewardAverageAggregates';
  /** Mean average of agreementRewards across the matching connection */
  agreementRewards?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of allocationRewards across the matching connection */
  allocationRewards?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of queryRewards across the matching connection */
  queryRewards?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of stateChannelRewards across the matching connection */
  stateChannelRewards?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of totalRewards across the matching connection */
  totalRewards?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerEraDeploymentRewardDistinctCountAggregateFilter = {
  _blockRange?: InputMaybe<BigIntFilter>;
  _id?: InputMaybe<BigIntFilter>;
  agreementRewards?: InputMaybe<BigIntFilter>;
  allocationRewards?: InputMaybe<BigIntFilter>;
  changesHeight?: InputMaybe<BigIntFilter>;
  deploymentId?: InputMaybe<BigIntFilter>;
  eraIdx?: InputMaybe<BigIntFilter>;
  id?: InputMaybe<BigIntFilter>;
  indexerId?: InputMaybe<BigIntFilter>;
  queryRewards?: InputMaybe<BigIntFilter>;
  stateChannelRewards?: InputMaybe<BigIntFilter>;
  totalRewards?: InputMaybe<BigIntFilter>;
};

export type IndexerEraDeploymentRewardDistinctCountAggregates = {
  __typename?: 'IndexerEraDeploymentRewardDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  _blockRange?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  _id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of agreementRewards across the matching connection */
  agreementRewards?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of allocationRewards across the matching connection */
  allocationRewards?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of changesHeight across the matching connection */
  changesHeight?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of deploymentId across the matching connection */
  deploymentId?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of indexerId across the matching connection */
  indexerId?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of queryRewards across the matching connection */
  queryRewards?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of stateChannelRewards across the matching connection */
  stateChannelRewards?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of totalRewards across the matching connection */
  totalRewards?: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `IndexerEraDeploymentReward` object types. All fields are combined with a logical ‘and.’ */
export type IndexerEraDeploymentRewardFilter = {
  /** Filter by the object’s `agreementRewards` field. */
  agreementRewards?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `allocationRewards` field. */
  allocationRewards?: InputMaybe<BigFloatFilter>;
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<IndexerEraDeploymentRewardFilter>>;
  /** Filter by the object’s `changesHeight` field. */
  changesHeight?: InputMaybe<StringFilter>;
  /** Filter by the object’s `deploymentId` field. */
  deploymentId?: InputMaybe<StringFilter>;
  /** Filter by the object’s `eraIdx` field. */
  eraIdx?: InputMaybe<IntFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<StringFilter>;
  /** Filter by the object’s `indexer` relation. */
  indexer?: InputMaybe<IndexerFilter>;
  /** Filter by the object’s `indexerId` field. */
  indexerId?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<IndexerEraDeploymentRewardFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<IndexerEraDeploymentRewardFilter>>;
  /** Filter by the object’s `queryRewards` field. */
  queryRewards?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `stateChannelRewards` field. */
  stateChannelRewards?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `totalRewards` field. */
  totalRewards?: InputMaybe<BigFloatFilter>;
};

export type IndexerEraDeploymentRewardMaxAggregateFilter = {
  agreementRewards?: InputMaybe<BigFloatFilter>;
  allocationRewards?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<IntFilter>;
  queryRewards?: InputMaybe<BigFloatFilter>;
  stateChannelRewards?: InputMaybe<BigFloatFilter>;
  totalRewards?: InputMaybe<BigFloatFilter>;
};

export type IndexerEraDeploymentRewardMaxAggregates = {
  __typename?: 'IndexerEraDeploymentRewardMaxAggregates';
  /** Maximum of agreementRewards across the matching connection */
  agreementRewards?: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of allocationRewards across the matching connection */
  allocationRewards?: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['Int']['output']>;
  /** Maximum of queryRewards across the matching connection */
  queryRewards?: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of stateChannelRewards across the matching connection */
  stateChannelRewards?: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of totalRewards across the matching connection */
  totalRewards?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerEraDeploymentRewardMinAggregateFilter = {
  agreementRewards?: InputMaybe<BigFloatFilter>;
  allocationRewards?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<IntFilter>;
  queryRewards?: InputMaybe<BigFloatFilter>;
  stateChannelRewards?: InputMaybe<BigFloatFilter>;
  totalRewards?: InputMaybe<BigFloatFilter>;
};

export type IndexerEraDeploymentRewardMinAggregates = {
  __typename?: 'IndexerEraDeploymentRewardMinAggregates';
  /** Minimum of agreementRewards across the matching connection */
  agreementRewards?: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of allocationRewards across the matching connection */
  allocationRewards?: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['Int']['output']>;
  /** Minimum of queryRewards across the matching connection */
  queryRewards?: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of stateChannelRewards across the matching connection */
  stateChannelRewards?: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of totalRewards across the matching connection */
  totalRewards?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerEraDeploymentRewardStddevPopulationAggregateFilter = {
  agreementRewards?: InputMaybe<BigFloatFilter>;
  allocationRewards?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigFloatFilter>;
  queryRewards?: InputMaybe<BigFloatFilter>;
  stateChannelRewards?: InputMaybe<BigFloatFilter>;
  totalRewards?: InputMaybe<BigFloatFilter>;
};

export type IndexerEraDeploymentRewardStddevPopulationAggregates = {
  __typename?: 'IndexerEraDeploymentRewardStddevPopulationAggregates';
  /** Population standard deviation of agreementRewards across the matching connection */
  agreementRewards?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of allocationRewards across the matching connection */
  allocationRewards?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of queryRewards across the matching connection */
  queryRewards?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of stateChannelRewards across the matching connection */
  stateChannelRewards?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of totalRewards across the matching connection */
  totalRewards?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerEraDeploymentRewardStddevSampleAggregateFilter = {
  agreementRewards?: InputMaybe<BigFloatFilter>;
  allocationRewards?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigFloatFilter>;
  queryRewards?: InputMaybe<BigFloatFilter>;
  stateChannelRewards?: InputMaybe<BigFloatFilter>;
  totalRewards?: InputMaybe<BigFloatFilter>;
};

export type IndexerEraDeploymentRewardStddevSampleAggregates = {
  __typename?: 'IndexerEraDeploymentRewardStddevSampleAggregates';
  /** Sample standard deviation of agreementRewards across the matching connection */
  agreementRewards?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of allocationRewards across the matching connection */
  allocationRewards?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of queryRewards across the matching connection */
  queryRewards?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of stateChannelRewards across the matching connection */
  stateChannelRewards?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of totalRewards across the matching connection */
  totalRewards?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerEraDeploymentRewardSumAggregateFilter = {
  agreementRewards?: InputMaybe<BigFloatFilter>;
  allocationRewards?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigIntFilter>;
  queryRewards?: InputMaybe<BigFloatFilter>;
  stateChannelRewards?: InputMaybe<BigFloatFilter>;
  totalRewards?: InputMaybe<BigFloatFilter>;
};

export type IndexerEraDeploymentRewardSumAggregates = {
  __typename?: 'IndexerEraDeploymentRewardSumAggregates';
  /** Sum of agreementRewards across the matching connection */
  agreementRewards: Scalars['BigFloat']['output'];
  /** Sum of allocationRewards across the matching connection */
  allocationRewards: Scalars['BigFloat']['output'];
  /** Sum of eraIdx across the matching connection */
  eraIdx: Scalars['BigInt']['output'];
  /** Sum of queryRewards across the matching connection */
  queryRewards: Scalars['BigFloat']['output'];
  /** Sum of stateChannelRewards across the matching connection */
  stateChannelRewards: Scalars['BigFloat']['output'];
  /** Sum of totalRewards across the matching connection */
  totalRewards: Scalars['BigFloat']['output'];
};

export type IndexerEraDeploymentRewardVariancePopulationAggregateFilter = {
  agreementRewards?: InputMaybe<BigFloatFilter>;
  allocationRewards?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigFloatFilter>;
  queryRewards?: InputMaybe<BigFloatFilter>;
  stateChannelRewards?: InputMaybe<BigFloatFilter>;
  totalRewards?: InputMaybe<BigFloatFilter>;
};

export type IndexerEraDeploymentRewardVariancePopulationAggregates = {
  __typename?: 'IndexerEraDeploymentRewardVariancePopulationAggregates';
  /** Population variance of agreementRewards across the matching connection */
  agreementRewards?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of allocationRewards across the matching connection */
  allocationRewards?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of queryRewards across the matching connection */
  queryRewards?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of stateChannelRewards across the matching connection */
  stateChannelRewards?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of totalRewards across the matching connection */
  totalRewards?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerEraDeploymentRewardVarianceSampleAggregateFilter = {
  agreementRewards?: InputMaybe<BigFloatFilter>;
  allocationRewards?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigFloatFilter>;
  queryRewards?: InputMaybe<BigFloatFilter>;
  stateChannelRewards?: InputMaybe<BigFloatFilter>;
  totalRewards?: InputMaybe<BigFloatFilter>;
};

export type IndexerEraDeploymentRewardVarianceSampleAggregates = {
  __typename?: 'IndexerEraDeploymentRewardVarianceSampleAggregates';
  /** Sample variance of agreementRewards across the matching connection */
  agreementRewards?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of allocationRewards across the matching connection */
  allocationRewards?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of queryRewards across the matching connection */
  queryRewards?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of stateChannelRewards across the matching connection */
  stateChannelRewards?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of totalRewards across the matching connection */
  totalRewards?: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `IndexerEraDeploymentReward` values. */
export type IndexerEraDeploymentRewardsConnection = {
  __typename?: 'IndexerEraDeploymentRewardsConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<IndexerEraDeploymentRewardAggregates>;
  /** A list of edges which contains the `IndexerEraDeploymentReward` and cursor to aid in pagination. */
  edges: Array<IndexerEraDeploymentRewardsEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<IndexerEraDeploymentRewardAggregates>>;
  /** A list of `IndexerEraDeploymentReward` objects. */
  nodes: Array<Maybe<IndexerEraDeploymentReward>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `IndexerEraDeploymentReward` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `IndexerEraDeploymentReward` values. */
export type IndexerEraDeploymentRewardsConnectionGroupedAggregatesArgs = {
  groupBy: Array<IndexerEraDeploymentRewardsGroupBy>;
  having?: InputMaybe<IndexerEraDeploymentRewardsHavingInput>;
};

/** A `IndexerEraDeploymentReward` edge in the connection. */
export type IndexerEraDeploymentRewardsEdge = {
  __typename?: 'IndexerEraDeploymentRewardsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `IndexerEraDeploymentReward` at the end of the edge. */
  node?: Maybe<IndexerEraDeploymentReward>;
};

/** Grouping methods for `IndexerEraDeploymentReward` for usage during aggregation. */
export enum IndexerEraDeploymentRewardsGroupBy {
  AgreementRewards = 'AGREEMENT_REWARDS',
  AllocationRewards = 'ALLOCATION_REWARDS',
  ChangesHeight = 'CHANGES_HEIGHT',
  DeploymentId = 'DEPLOYMENT_ID',
  EraIdx = 'ERA_IDX',
  Id = 'ID',
  IndexerId = 'INDEXER_ID',
  QueryRewards = 'QUERY_REWARDS',
  StateChannelRewards = 'STATE_CHANNEL_REWARDS',
  TotalRewards = 'TOTAL_REWARDS'
}

export type IndexerEraDeploymentRewardsHavingAverageInput = {
  agreementRewards?: InputMaybe<HavingBigfloatFilter>;
  allocationRewards?: InputMaybe<HavingBigfloatFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  queryRewards?: InputMaybe<HavingBigfloatFilter>;
  stateChannelRewards?: InputMaybe<HavingBigfloatFilter>;
  totalRewards?: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerEraDeploymentRewardsHavingDistinctCountInput = {
  agreementRewards?: InputMaybe<HavingBigfloatFilter>;
  allocationRewards?: InputMaybe<HavingBigfloatFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  queryRewards?: InputMaybe<HavingBigfloatFilter>;
  stateChannelRewards?: InputMaybe<HavingBigfloatFilter>;
  totalRewards?: InputMaybe<HavingBigfloatFilter>;
};

/** Conditions for `IndexerEraDeploymentReward` aggregates. */
export type IndexerEraDeploymentRewardsHavingInput = {
  AND?: InputMaybe<Array<IndexerEraDeploymentRewardsHavingInput>>;
  OR?: InputMaybe<Array<IndexerEraDeploymentRewardsHavingInput>>;
  average?: InputMaybe<IndexerEraDeploymentRewardsHavingAverageInput>;
  distinctCount?: InputMaybe<IndexerEraDeploymentRewardsHavingDistinctCountInput>;
  max?: InputMaybe<IndexerEraDeploymentRewardsHavingMaxInput>;
  min?: InputMaybe<IndexerEraDeploymentRewardsHavingMinInput>;
  stddevPopulation?: InputMaybe<IndexerEraDeploymentRewardsHavingStddevPopulationInput>;
  stddevSample?: InputMaybe<IndexerEraDeploymentRewardsHavingStddevSampleInput>;
  sum?: InputMaybe<IndexerEraDeploymentRewardsHavingSumInput>;
  variancePopulation?: InputMaybe<IndexerEraDeploymentRewardsHavingVariancePopulationInput>;
  varianceSample?: InputMaybe<IndexerEraDeploymentRewardsHavingVarianceSampleInput>;
};

export type IndexerEraDeploymentRewardsHavingMaxInput = {
  agreementRewards?: InputMaybe<HavingBigfloatFilter>;
  allocationRewards?: InputMaybe<HavingBigfloatFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  queryRewards?: InputMaybe<HavingBigfloatFilter>;
  stateChannelRewards?: InputMaybe<HavingBigfloatFilter>;
  totalRewards?: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerEraDeploymentRewardsHavingMinInput = {
  agreementRewards?: InputMaybe<HavingBigfloatFilter>;
  allocationRewards?: InputMaybe<HavingBigfloatFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  queryRewards?: InputMaybe<HavingBigfloatFilter>;
  stateChannelRewards?: InputMaybe<HavingBigfloatFilter>;
  totalRewards?: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerEraDeploymentRewardsHavingStddevPopulationInput = {
  agreementRewards?: InputMaybe<HavingBigfloatFilter>;
  allocationRewards?: InputMaybe<HavingBigfloatFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  queryRewards?: InputMaybe<HavingBigfloatFilter>;
  stateChannelRewards?: InputMaybe<HavingBigfloatFilter>;
  totalRewards?: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerEraDeploymentRewardsHavingStddevSampleInput = {
  agreementRewards?: InputMaybe<HavingBigfloatFilter>;
  allocationRewards?: InputMaybe<HavingBigfloatFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  queryRewards?: InputMaybe<HavingBigfloatFilter>;
  stateChannelRewards?: InputMaybe<HavingBigfloatFilter>;
  totalRewards?: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerEraDeploymentRewardsHavingSumInput = {
  agreementRewards?: InputMaybe<HavingBigfloatFilter>;
  allocationRewards?: InputMaybe<HavingBigfloatFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  queryRewards?: InputMaybe<HavingBigfloatFilter>;
  stateChannelRewards?: InputMaybe<HavingBigfloatFilter>;
  totalRewards?: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerEraDeploymentRewardsHavingVariancePopulationInput = {
  agreementRewards?: InputMaybe<HavingBigfloatFilter>;
  allocationRewards?: InputMaybe<HavingBigfloatFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  queryRewards?: InputMaybe<HavingBigfloatFilter>;
  stateChannelRewards?: InputMaybe<HavingBigfloatFilter>;
  totalRewards?: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerEraDeploymentRewardsHavingVarianceSampleInput = {
  agreementRewards?: InputMaybe<HavingBigfloatFilter>;
  allocationRewards?: InputMaybe<HavingBigfloatFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  queryRewards?: InputMaybe<HavingBigfloatFilter>;
  stateChannelRewards?: InputMaybe<HavingBigfloatFilter>;
  totalRewards?: InputMaybe<HavingBigfloatFilter>;
};

/** Methods to use when ordering `IndexerEraDeploymentReward`. */
export enum IndexerEraDeploymentRewardsOrderBy {
  AgreementRewardsAsc = 'AGREEMENT_REWARDS_ASC',
  AgreementRewardsDesc = 'AGREEMENT_REWARDS_DESC',
  AllocationRewardsAsc = 'ALLOCATION_REWARDS_ASC',
  AllocationRewardsDesc = 'ALLOCATION_REWARDS_DESC',
  ChangesHeightAsc = 'CHANGES_HEIGHT_ASC',
  ChangesHeightDesc = 'CHANGES_HEIGHT_DESC',
  DeploymentIdAsc = 'DEPLOYMENT_ID_ASC',
  DeploymentIdDesc = 'DEPLOYMENT_ID_DESC',
  EraIdxAsc = 'ERA_IDX_ASC',
  EraIdxDesc = 'ERA_IDX_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  IndexerByIndexerIdActiveAsc = 'INDEXER_BY_INDEXER_ID__ACTIVE_ASC',
  IndexerByIndexerIdActiveDesc = 'INDEXER_BY_INDEXER_ID__ACTIVE_DESC',
  IndexerByIndexerIdCapacityAsc = 'INDEXER_BY_INDEXER_ID__CAPACITY_ASC',
  IndexerByIndexerIdCapacityDesc = 'INDEXER_BY_INDEXER_ID__CAPACITY_DESC',
  IndexerByIndexerIdCommissionAsc = 'INDEXER_BY_INDEXER_ID__COMMISSION_ASC',
  IndexerByIndexerIdCommissionDesc = 'INDEXER_BY_INDEXER_ID__COMMISSION_DESC',
  IndexerByIndexerIdControllerAsc = 'INDEXER_BY_INDEXER_ID__CONTROLLER_ASC',
  IndexerByIndexerIdControllerDesc = 'INDEXER_BY_INDEXER_ID__CONTROLLER_DESC',
  IndexerByIndexerIdCreatedBlockAsc = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_ASC',
  IndexerByIndexerIdCreatedBlockDesc = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_DESC',
  IndexerByIndexerIdIdAsc = 'INDEXER_BY_INDEXER_ID__ID_ASC',
  IndexerByIndexerIdIdDesc = 'INDEXER_BY_INDEXER_ID__ID_DESC',
  IndexerByIndexerIdLastClaimEraAsc = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_ASC',
  IndexerByIndexerIdLastClaimEraDesc = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_DESC',
  IndexerByIndexerIdLastEventAsc = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_ASC',
  IndexerByIndexerIdLastEventDesc = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_DESC',
  IndexerByIndexerIdLastSettledEraAsc = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_ASC',
  IndexerByIndexerIdLastSettledEraDesc = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_DESC',
  IndexerByIndexerIdMaxUnstakeAmountAsc = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_ASC',
  IndexerByIndexerIdMaxUnstakeAmountDesc = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_DESC',
  IndexerByIndexerIdMetadataAsc = 'INDEXER_BY_INDEXER_ID__METADATA_ASC',
  IndexerByIndexerIdMetadataDesc = 'INDEXER_BY_INDEXER_ID__METADATA_DESC',
  IndexerByIndexerIdSelfStakeAsc = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_ASC',
  IndexerByIndexerIdSelfStakeDesc = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_DESC',
  IndexerByIndexerIdTotalStakeAsc = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_ASC',
  IndexerByIndexerIdTotalStakeDesc = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_DESC',
  IndexerIdAsc = 'INDEXER_ID_ASC',
  IndexerIdDesc = 'INDEXER_ID_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  QueryRewardsAsc = 'QUERY_REWARDS_ASC',
  QueryRewardsDesc = 'QUERY_REWARDS_DESC',
  StateChannelRewardsAsc = 'STATE_CHANNEL_REWARDS_ASC',
  StateChannelRewardsDesc = 'STATE_CHANNEL_REWARDS_DESC',
  TotalRewardsAsc = 'TOTAL_REWARDS_ASC',
  TotalRewardsDesc = 'TOTAL_REWARDS_DESC'
}

/** A connection to a list of `Era` values, with data from `EraReward`. */
export type IndexerErasByEraRewardIndexerIdAndEraIdManyToManyConnection = {
  __typename?: 'IndexerErasByEraRewardIndexerIdAndEraIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<EraAggregates>;
  /** A list of edges which contains the `Era`, info from the `EraReward`, and the cursor to aid in pagination. */
  edges: Array<IndexerErasByEraRewardIndexerIdAndEraIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<EraAggregates>>;
  /** A list of `Era` objects. */
  nodes: Array<Maybe<Era>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Era` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Era` values, with data from `EraReward`. */
export type IndexerErasByEraRewardIndexerIdAndEraIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: Array<ErasGroupBy>;
  having?: InputMaybe<ErasHavingInput>;
};

/** A `Era` edge in the connection, with data from `EraReward`. */
export type IndexerErasByEraRewardIndexerIdAndEraIdManyToManyEdge = {
  __typename?: 'IndexerErasByEraRewardIndexerIdAndEraIdManyToManyEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `EraReward`. */
  eraRewards: EraRewardsConnection;
  /** The `Era` at the end of the edge. */
  node?: Maybe<Era>;
};


/** A `Era` edge in the connection, with data from `EraReward`. */
export type IndexerErasByEraRewardIndexerIdAndEraIdManyToManyEdgeEraRewardsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Era_Rewards_Distinct_Enum>>>;
  filter?: InputMaybe<EraRewardFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<EraRewardsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

/** A connection to a list of `Era` values, with data from `EraStake`. */
export type IndexerErasByEraStakeIndexerIdAndEraIdManyToManyConnection = {
  __typename?: 'IndexerErasByEraStakeIndexerIdAndEraIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<EraAggregates>;
  /** A list of edges which contains the `Era`, info from the `EraStake`, and the cursor to aid in pagination. */
  edges: Array<IndexerErasByEraStakeIndexerIdAndEraIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<EraAggregates>>;
  /** A list of `Era` objects. */
  nodes: Array<Maybe<Era>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Era` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Era` values, with data from `EraStake`. */
export type IndexerErasByEraStakeIndexerIdAndEraIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: Array<ErasGroupBy>;
  having?: InputMaybe<ErasHavingInput>;
};

/** A `Era` edge in the connection, with data from `EraStake`. */
export type IndexerErasByEraStakeIndexerIdAndEraIdManyToManyEdge = {
  __typename?: 'IndexerErasByEraStakeIndexerIdAndEraIdManyToManyEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `EraStake`. */
  eraStakes: EraStakesConnection;
  /** The `Era` at the end of the edge. */
  node?: Maybe<Era>;
};


/** A `Era` edge in the connection, with data from `EraStake`. */
export type IndexerErasByEraStakeIndexerIdAndEraIdManyToManyEdgeEraStakesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Era_Stakes_Distinct_Enum>>>;
  filter?: InputMaybe<EraStakeFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<EraStakesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

/** A connection to a list of `Era` values, with data from `IndexerCommissionRate`. */
export type IndexerErasByIndexerCommissionRateIndexerIdAndEraIdManyToManyConnection = {
  __typename?: 'IndexerErasByIndexerCommissionRateIndexerIdAndEraIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<EraAggregates>;
  /** A list of edges which contains the `Era`, info from the `IndexerCommissionRate`, and the cursor to aid in pagination. */
  edges: Array<IndexerErasByIndexerCommissionRateIndexerIdAndEraIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<EraAggregates>>;
  /** A list of `Era` objects. */
  nodes: Array<Maybe<Era>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Era` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Era` values, with data from `IndexerCommissionRate`. */
export type IndexerErasByIndexerCommissionRateIndexerIdAndEraIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: Array<ErasGroupBy>;
  having?: InputMaybe<ErasHavingInput>;
};

/** A `Era` edge in the connection, with data from `IndexerCommissionRate`. */
export type IndexerErasByIndexerCommissionRateIndexerIdAndEraIdManyToManyEdge = {
  __typename?: 'IndexerErasByIndexerCommissionRateIndexerIdAndEraIdManyToManyEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `IndexerCommissionRate`. */
  indexerCommissionRates: IndexerCommissionRatesConnection;
  /** The `Era` at the end of the edge. */
  node?: Maybe<Era>;
};


/** A `Era` edge in the connection, with data from `IndexerCommissionRate`. */
export type IndexerErasByIndexerCommissionRateIndexerIdAndEraIdManyToManyEdgeIndexerCommissionRatesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Commission_Rates_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerCommissionRateFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexerCommissionRatesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

/** A connection to a list of `Era` values, with data from `IndexerStake`. */
export type IndexerErasByIndexerStakeIndexerIdAndEraIdManyToManyConnection = {
  __typename?: 'IndexerErasByIndexerStakeIndexerIdAndEraIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<EraAggregates>;
  /** A list of edges which contains the `Era`, info from the `IndexerStake`, and the cursor to aid in pagination. */
  edges: Array<IndexerErasByIndexerStakeIndexerIdAndEraIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<EraAggregates>>;
  /** A list of `Era` objects. */
  nodes: Array<Maybe<Era>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Era` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Era` values, with data from `IndexerStake`. */
export type IndexerErasByIndexerStakeIndexerIdAndEraIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: Array<ErasGroupBy>;
  having?: InputMaybe<ErasHavingInput>;
};

/** A `Era` edge in the connection, with data from `IndexerStake`. */
export type IndexerErasByIndexerStakeIndexerIdAndEraIdManyToManyEdge = {
  __typename?: 'IndexerErasByIndexerStakeIndexerIdAndEraIdManyToManyEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `IndexerStake`. */
  indexerStakes: IndexerStakesConnection;
  /** The `Era` at the end of the edge. */
  node?: Maybe<Era>;
};


/** A `Era` edge in the connection, with data from `IndexerStake`. */
export type IndexerErasByIndexerStakeIndexerIdAndEraIdManyToManyEdgeIndexerStakesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Stakes_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerStakeFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexerStakesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

/** A filter to be used against `Indexer` object types. All fields are combined with a logical ‘and.’ */
export type IndexerFilter = {
  /** Filter by the object’s `acceptedOffers` relation. */
  acceptedOffers?: InputMaybe<IndexerToManyAcceptedOfferFilter>;
  /** Some related `acceptedOffers` exist. */
  acceptedOffersExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `active` field. */
  active?: InputMaybe<BooleanFilter>;
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<IndexerFilter>>;
  /** Filter by the object’s `capacity` field. */
  capacity?: InputMaybe<JsonFilter>;
  /** Filter by the object’s `commission` field. */
  commission?: InputMaybe<JsonFilter>;
  /** Filter by the object’s `controller` field. */
  controller?: InputMaybe<StringFilter>;
  /** Filter by the object’s `controllers` relation. */
  controllers?: InputMaybe<IndexerToManyControllerFilter>;
  /** Some related `controllers` exist. */
  controllersExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `createdBlock` field. */
  createdBlock?: InputMaybe<IntFilter>;
  /** Filter by the object’s `delegations` relation. */
  delegations?: InputMaybe<IndexerToManyDelegationFilter>;
  /** Some related `delegations` exist. */
  delegationsExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `eraDelegatorIndexerApies` relation. */
  eraDelegatorIndexerApies?: InputMaybe<IndexerToManyEraDelegatorIndexerApyFilter>;
  /** Some related `eraDelegatorIndexerApies` exist. */
  eraDelegatorIndexerApiesExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `eraIndexerApies` relation. */
  eraIndexerApies?: InputMaybe<IndexerToManyEraIndexerApyFilter>;
  /** Some related `eraIndexerApies` exist. */
  eraIndexerApiesExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `eraIndexerDeploymentApies` relation. */
  eraIndexerDeploymentApies?: InputMaybe<IndexerToManyEraIndexerDeploymentApyFilter>;
  /** Some related `eraIndexerDeploymentApies` exist. */
  eraIndexerDeploymentApiesExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `eraRewards` relation. */
  eraRewards?: InputMaybe<IndexerToManyEraRewardFilter>;
  /** Some related `eraRewards` exist. */
  eraRewardsExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `eraStakes` relation. */
  eraStakes?: InputMaybe<IndexerToManyEraStakeFilter>;
  /** Some related `eraStakes` exist. */
  eraStakesExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<StringFilter>;
  /** Filter by the object’s `indexerAllocationOverflows` relation. */
  indexerAllocationOverflows?: InputMaybe<IndexerToManyIndexerAllocationOverflowFilter>;
  /** Some related `indexerAllocationOverflows` exist. */
  indexerAllocationOverflowsExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `indexerAllocationRewardSummaries` relation. */
  indexerAllocationRewardSummaries?: InputMaybe<IndexerToManyIndexerAllocationRewardSummaryFilter>;
  /** Some related `indexerAllocationRewardSummaries` exist. */
  indexerAllocationRewardSummariesExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `indexerAllocationRewards` relation. */
  indexerAllocationRewards?: InputMaybe<IndexerToManyIndexerAllocationRewardFilter>;
  /** Some related `indexerAllocationRewards` exist. */
  indexerAllocationRewardsExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `indexerAllocationSummaries` relation. */
  indexerAllocationSummaries?: InputMaybe<IndexerToManyIndexerAllocationSummaryFilter>;
  /** Some related `indexerAllocationSummaries` exist. */
  indexerAllocationSummariesExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `indexerAllocations` relation. */
  indexerAllocations?: InputMaybe<IndexerToManyIndexerAllocationFilter>;
  /** Some related `indexerAllocations` exist. */
  indexerAllocationsExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `indexerApySummaries` relation. */
  indexerApySummaries?: InputMaybe<IndexerToManyIndexerApySummaryFilter>;
  /** Some related `indexerApySummaries` exist. */
  indexerApySummariesExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `indexerCommissionRates` relation. */
  indexerCommissionRates?: InputMaybe<IndexerToManyIndexerCommissionRateFilter>;
  /** Some related `indexerCommissionRates` exist. */
  indexerCommissionRatesExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `indexerEraDeploymentRewards` relation. */
  indexerEraDeploymentRewards?: InputMaybe<IndexerToManyIndexerEraDeploymentRewardFilter>;
  /** Some related `indexerEraDeploymentRewards` exist. */
  indexerEraDeploymentRewardsExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `indexerLaborHistories` relation. */
  indexerLaborHistories?: InputMaybe<IndexerToManyIndexerLaborHistoryFilter>;
  /** Some related `indexerLaborHistories` exist. */
  indexerLaborHistoriesExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `indexerMissedLabors` relation. */
  indexerMissedLabors?: InputMaybe<IndexerToManyIndexerMissedLaborFilter>;
  /** Some related `indexerMissedLabors` exist. */
  indexerMissedLaborsExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `indexerStakeWeights` relation. */
  indexerStakeWeights?: InputMaybe<IndexerToManyIndexerStakeWeightFilter>;
  /** Some related `indexerStakeWeights` exist. */
  indexerStakeWeightsExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `indexerStakes` relation. */
  indexerStakes?: InputMaybe<IndexerToManyIndexerStakeFilter>;
  /** Some related `indexerStakes` exist. */
  indexerStakesExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `lastClaimEra` field. */
  lastClaimEra?: InputMaybe<StringFilter>;
  /** Filter by the object’s `lastEvent` field. */
  lastEvent?: InputMaybe<StringFilter>;
  /** Filter by the object’s `lastSettledEra` field. */
  lastSettledEra?: InputMaybe<StringFilter>;
  /** Filter by the object’s `maxUnstakeAmount` field. */
  maxUnstakeAmount?: InputMaybe<JsonFilter>;
  /** Filter by the object’s `metadata` field. */
  metadata?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<IndexerFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<IndexerFilter>>;
  /** Filter by the object’s `projects` relation. */
  projects?: InputMaybe<IndexerToManyIndexerDeploymentFilter>;
  /** Some related `projects` exist. */
  projectsExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `rewards` relation. */
  rewards?: InputMaybe<IndexerToManyIndexerRewardFilter>;
  /** Some related `rewards` exist. */
  rewardsExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `selfStake` field. */
  selfStake?: InputMaybe<JsonFilter>;
  /** Filter by the object’s `totalStake` field. */
  totalStake?: InputMaybe<JsonFilter>;
};

/** A connection to a list of `IndexerLaborHistory` values. */
export type IndexerLaborHistoriesConnection = {
  __typename?: 'IndexerLaborHistoriesConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<IndexerLaborHistoryAggregates>;
  /** A list of edges which contains the `IndexerLaborHistory` and cursor to aid in pagination. */
  edges: Array<IndexerLaborHistoriesEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<IndexerLaborHistoryAggregates>>;
  /** A list of `IndexerLaborHistory` objects. */
  nodes: Array<Maybe<IndexerLaborHistory>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `IndexerLaborHistory` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `IndexerLaborHistory` values. */
export type IndexerLaborHistoriesConnectionGroupedAggregatesArgs = {
  groupBy: Array<IndexerLaborHistoriesGroupBy>;
  having?: InputMaybe<IndexerLaborHistoriesHavingInput>;
};

/** A `IndexerLaborHistory` edge in the connection. */
export type IndexerLaborHistoriesEdge = {
  __typename?: 'IndexerLaborHistoriesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `IndexerLaborHistory` at the end of the edge. */
  node?: Maybe<IndexerLaborHistory>;
};

/** Grouping methods for `IndexerLaborHistory` for usage during aggregation. */
export enum IndexerLaborHistoriesGroupBy {
  Amount = 'AMOUNT',
  CreateAt = 'CREATE_AT',
  CreateAtTruncatedToDay = 'CREATE_AT_TRUNCATED_TO_DAY',
  CreateAtTruncatedToHour = 'CREATE_AT_TRUNCATED_TO_HOUR',
  DeploymentId = 'DEPLOYMENT_ID',
  EraIdx = 'ERA_IDX',
  Id = 'ID',
  IndexerId = 'INDEXER_ID'
}

export type IndexerLaborHistoriesHavingAverageInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
};

export type IndexerLaborHistoriesHavingDistinctCountInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
};

/** Conditions for `IndexerLaborHistory` aggregates. */
export type IndexerLaborHistoriesHavingInput = {
  AND?: InputMaybe<Array<IndexerLaborHistoriesHavingInput>>;
  OR?: InputMaybe<Array<IndexerLaborHistoriesHavingInput>>;
  average?: InputMaybe<IndexerLaborHistoriesHavingAverageInput>;
  distinctCount?: InputMaybe<IndexerLaborHistoriesHavingDistinctCountInput>;
  max?: InputMaybe<IndexerLaborHistoriesHavingMaxInput>;
  min?: InputMaybe<IndexerLaborHistoriesHavingMinInput>;
  stddevPopulation?: InputMaybe<IndexerLaborHistoriesHavingStddevPopulationInput>;
  stddevSample?: InputMaybe<IndexerLaborHistoriesHavingStddevSampleInput>;
  sum?: InputMaybe<IndexerLaborHistoriesHavingSumInput>;
  variancePopulation?: InputMaybe<IndexerLaborHistoriesHavingVariancePopulationInput>;
  varianceSample?: InputMaybe<IndexerLaborHistoriesHavingVarianceSampleInput>;
};

export type IndexerLaborHistoriesHavingMaxInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
};

export type IndexerLaborHistoriesHavingMinInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
};

export type IndexerLaborHistoriesHavingStddevPopulationInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
};

export type IndexerLaborHistoriesHavingStddevSampleInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
};

export type IndexerLaborHistoriesHavingSumInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
};

export type IndexerLaborHistoriesHavingVariancePopulationInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
};

export type IndexerLaborHistoriesHavingVarianceSampleInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
};

/** Methods to use when ordering `IndexerLaborHistory`. */
export enum IndexerLaborHistoriesOrderBy {
  AmountAsc = 'AMOUNT_ASC',
  AmountDesc = 'AMOUNT_DESC',
  CreateAtAsc = 'CREATE_AT_ASC',
  CreateAtDesc = 'CREATE_AT_DESC',
  DeploymentIdAsc = 'DEPLOYMENT_ID_ASC',
  DeploymentIdDesc = 'DEPLOYMENT_ID_DESC',
  EraIdxAsc = 'ERA_IDX_ASC',
  EraIdxDesc = 'ERA_IDX_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  IndexerByIndexerIdActiveAsc = 'INDEXER_BY_INDEXER_ID__ACTIVE_ASC',
  IndexerByIndexerIdActiveDesc = 'INDEXER_BY_INDEXER_ID__ACTIVE_DESC',
  IndexerByIndexerIdCapacityAsc = 'INDEXER_BY_INDEXER_ID__CAPACITY_ASC',
  IndexerByIndexerIdCapacityDesc = 'INDEXER_BY_INDEXER_ID__CAPACITY_DESC',
  IndexerByIndexerIdCommissionAsc = 'INDEXER_BY_INDEXER_ID__COMMISSION_ASC',
  IndexerByIndexerIdCommissionDesc = 'INDEXER_BY_INDEXER_ID__COMMISSION_DESC',
  IndexerByIndexerIdControllerAsc = 'INDEXER_BY_INDEXER_ID__CONTROLLER_ASC',
  IndexerByIndexerIdControllerDesc = 'INDEXER_BY_INDEXER_ID__CONTROLLER_DESC',
  IndexerByIndexerIdCreatedBlockAsc = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_ASC',
  IndexerByIndexerIdCreatedBlockDesc = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_DESC',
  IndexerByIndexerIdIdAsc = 'INDEXER_BY_INDEXER_ID__ID_ASC',
  IndexerByIndexerIdIdDesc = 'INDEXER_BY_INDEXER_ID__ID_DESC',
  IndexerByIndexerIdLastClaimEraAsc = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_ASC',
  IndexerByIndexerIdLastClaimEraDesc = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_DESC',
  IndexerByIndexerIdLastEventAsc = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_ASC',
  IndexerByIndexerIdLastEventDesc = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_DESC',
  IndexerByIndexerIdLastSettledEraAsc = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_ASC',
  IndexerByIndexerIdLastSettledEraDesc = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_DESC',
  IndexerByIndexerIdMaxUnstakeAmountAsc = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_ASC',
  IndexerByIndexerIdMaxUnstakeAmountDesc = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_DESC',
  IndexerByIndexerIdMetadataAsc = 'INDEXER_BY_INDEXER_ID__METADATA_ASC',
  IndexerByIndexerIdMetadataDesc = 'INDEXER_BY_INDEXER_ID__METADATA_DESC',
  IndexerByIndexerIdSelfStakeAsc = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_ASC',
  IndexerByIndexerIdSelfStakeDesc = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_DESC',
  IndexerByIndexerIdTotalStakeAsc = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_ASC',
  IndexerByIndexerIdTotalStakeDesc = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_DESC',
  IndexerIdAsc = 'INDEXER_ID_ASC',
  IndexerIdDesc = 'INDEXER_ID_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

export type IndexerLaborHistory = Node & {
  __typename?: 'IndexerLaborHistory';
  amount: Scalars['BigFloat']['output'];
  createAt: Scalars['Datetime']['output'];
  deploymentId: Scalars['String']['output'];
  eraIdx: Scalars['Int']['output'];
  id: Scalars['String']['output'];
  /** Reads a single `Indexer` that is related to this `IndexerLaborHistory`. */
  indexer?: Maybe<Indexer>;
  indexerId: Scalars['String']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
};

export type IndexerLaborHistoryAggregates = {
  __typename?: 'IndexerLaborHistoryAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  average?: Maybe<IndexerLaborHistoryAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  distinctCount?: Maybe<IndexerLaborHistoryDistinctCountAggregates>;
  keys?: Maybe<Array<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  max?: Maybe<IndexerLaborHistoryMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  min?: Maybe<IndexerLaborHistoryMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevPopulation?: Maybe<IndexerLaborHistoryStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevSample?: Maybe<IndexerLaborHistoryStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  sum?: Maybe<IndexerLaborHistorySumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  variancePopulation?: Maybe<IndexerLaborHistoryVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  varianceSample?: Maybe<IndexerLaborHistoryVarianceSampleAggregates>;
};

/** A filter to be used against aggregates of `IndexerLaborHistory` object types. */
export type IndexerLaborHistoryAggregatesFilter = {
  /** Mean average aggregate over matching `IndexerLaborHistory` objects. */
  average?: InputMaybe<IndexerLaborHistoryAverageAggregateFilter>;
  /** Distinct count aggregate over matching `IndexerLaborHistory` objects. */
  distinctCount?: InputMaybe<IndexerLaborHistoryDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `IndexerLaborHistory` object to be included within the aggregate. */
  filter?: InputMaybe<IndexerLaborHistoryFilter>;
  /** Maximum aggregate over matching `IndexerLaborHistory` objects. */
  max?: InputMaybe<IndexerLaborHistoryMaxAggregateFilter>;
  /** Minimum aggregate over matching `IndexerLaborHistory` objects. */
  min?: InputMaybe<IndexerLaborHistoryMinAggregateFilter>;
  /** Population standard deviation aggregate over matching `IndexerLaborHistory` objects. */
  stddevPopulation?: InputMaybe<IndexerLaborHistoryStddevPopulationAggregateFilter>;
  /** Sample standard deviation aggregate over matching `IndexerLaborHistory` objects. */
  stddevSample?: InputMaybe<IndexerLaborHistoryStddevSampleAggregateFilter>;
  /** Sum aggregate over matching `IndexerLaborHistory` objects. */
  sum?: InputMaybe<IndexerLaborHistorySumAggregateFilter>;
  /** Population variance aggregate over matching `IndexerLaborHistory` objects. */
  variancePopulation?: InputMaybe<IndexerLaborHistoryVariancePopulationAggregateFilter>;
  /** Sample variance aggregate over matching `IndexerLaborHistory` objects. */
  varianceSample?: InputMaybe<IndexerLaborHistoryVarianceSampleAggregateFilter>;
};

export type IndexerLaborHistoryAverageAggregateFilter = {
  amount?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigFloatFilter>;
};

export type IndexerLaborHistoryAverageAggregates = {
  __typename?: 'IndexerLaborHistoryAverageAggregates';
  /** Mean average of amount across the matching connection */
  amount?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerLaborHistoryDistinctCountAggregateFilter = {
  _blockRange?: InputMaybe<BigIntFilter>;
  _id?: InputMaybe<BigIntFilter>;
  amount?: InputMaybe<BigIntFilter>;
  createAt?: InputMaybe<BigIntFilter>;
  deploymentId?: InputMaybe<BigIntFilter>;
  eraIdx?: InputMaybe<BigIntFilter>;
  id?: InputMaybe<BigIntFilter>;
  indexerId?: InputMaybe<BigIntFilter>;
};

export type IndexerLaborHistoryDistinctCountAggregates = {
  __typename?: 'IndexerLaborHistoryDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  _blockRange?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  _id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of amount across the matching connection */
  amount?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createAt across the matching connection */
  createAt?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of deploymentId across the matching connection */
  deploymentId?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of indexerId across the matching connection */
  indexerId?: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `IndexerLaborHistory` object types. All fields are combined with a logical ‘and.’ */
export type IndexerLaborHistoryFilter = {
  /** Filter by the object’s `amount` field. */
  amount?: InputMaybe<BigFloatFilter>;
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<IndexerLaborHistoryFilter>>;
  /** Filter by the object’s `createAt` field. */
  createAt?: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `deploymentId` field. */
  deploymentId?: InputMaybe<StringFilter>;
  /** Filter by the object’s `eraIdx` field. */
  eraIdx?: InputMaybe<IntFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<StringFilter>;
  /** Filter by the object’s `indexer` relation. */
  indexer?: InputMaybe<IndexerFilter>;
  /** Filter by the object’s `indexerId` field. */
  indexerId?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<IndexerLaborHistoryFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<IndexerLaborHistoryFilter>>;
};

export type IndexerLaborHistoryMaxAggregateFilter = {
  amount?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<IntFilter>;
};

export type IndexerLaborHistoryMaxAggregates = {
  __typename?: 'IndexerLaborHistoryMaxAggregates';
  /** Maximum of amount across the matching connection */
  amount?: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['Int']['output']>;
};

export type IndexerLaborHistoryMinAggregateFilter = {
  amount?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<IntFilter>;
};

export type IndexerLaborHistoryMinAggregates = {
  __typename?: 'IndexerLaborHistoryMinAggregates';
  /** Minimum of amount across the matching connection */
  amount?: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['Int']['output']>;
};

export type IndexerLaborHistoryStddevPopulationAggregateFilter = {
  amount?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigFloatFilter>;
};

export type IndexerLaborHistoryStddevPopulationAggregates = {
  __typename?: 'IndexerLaborHistoryStddevPopulationAggregates';
  /** Population standard deviation of amount across the matching connection */
  amount?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerLaborHistoryStddevSampleAggregateFilter = {
  amount?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigFloatFilter>;
};

export type IndexerLaborHistoryStddevSampleAggregates = {
  __typename?: 'IndexerLaborHistoryStddevSampleAggregates';
  /** Sample standard deviation of amount across the matching connection */
  amount?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerLaborHistorySumAggregateFilter = {
  amount?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigIntFilter>;
};

export type IndexerLaborHistorySumAggregates = {
  __typename?: 'IndexerLaborHistorySumAggregates';
  /** Sum of amount across the matching connection */
  amount: Scalars['BigFloat']['output'];
  /** Sum of eraIdx across the matching connection */
  eraIdx: Scalars['BigInt']['output'];
};

export type IndexerLaborHistoryVariancePopulationAggregateFilter = {
  amount?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigFloatFilter>;
};

export type IndexerLaborHistoryVariancePopulationAggregates = {
  __typename?: 'IndexerLaborHistoryVariancePopulationAggregates';
  /** Population variance of amount across the matching connection */
  amount?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerLaborHistoryVarianceSampleAggregateFilter = {
  amount?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigFloatFilter>;
};

export type IndexerLaborHistoryVarianceSampleAggregates = {
  __typename?: 'IndexerLaborHistoryVarianceSampleAggregates';
  /** Sample variance of amount across the matching connection */
  amount?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerLatestAllocationOverflow = Node & {
  __typename?: 'IndexerLatestAllocationOverflow';
  createAt: Scalars['Datetime']['output'];
  id: Scalars['String']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  /** Reads a single `IndexerAllocationOverflow` that is related to this `IndexerLatestAllocationOverflow`. */
  overflowId?: Maybe<IndexerAllocationOverflow>;
  overflowIdId: Scalars['String']['output'];
  updateAt: Scalars['Datetime']['output'];
};

export type IndexerLatestAllocationOverflowAggregates = {
  __typename?: 'IndexerLatestAllocationOverflowAggregates';
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  distinctCount?: Maybe<IndexerLatestAllocationOverflowDistinctCountAggregates>;
  keys?: Maybe<Array<Scalars['String']['output']>>;
};

/** A filter to be used against aggregates of `IndexerLatestAllocationOverflow` object types. */
export type IndexerLatestAllocationOverflowAggregatesFilter = {
  /** Distinct count aggregate over matching `IndexerLatestAllocationOverflow` objects. */
  distinctCount?: InputMaybe<IndexerLatestAllocationOverflowDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `IndexerLatestAllocationOverflow` object to be included within the aggregate. */
  filter?: InputMaybe<IndexerLatestAllocationOverflowFilter>;
};

export type IndexerLatestAllocationOverflowDistinctCountAggregateFilter = {
  _blockRange?: InputMaybe<BigIntFilter>;
  _id?: InputMaybe<BigIntFilter>;
  createAt?: InputMaybe<BigIntFilter>;
  id?: InputMaybe<BigIntFilter>;
  overflowIdId?: InputMaybe<BigIntFilter>;
  updateAt?: InputMaybe<BigIntFilter>;
};

export type IndexerLatestAllocationOverflowDistinctCountAggregates = {
  __typename?: 'IndexerLatestAllocationOverflowDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  _blockRange?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  _id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createAt across the matching connection */
  createAt?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of overflowIdId across the matching connection */
  overflowIdId?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of updateAt across the matching connection */
  updateAt?: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `IndexerLatestAllocationOverflow` object types. All fields are combined with a logical ‘and.’ */
export type IndexerLatestAllocationOverflowFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<IndexerLatestAllocationOverflowFilter>>;
  /** Filter by the object’s `createAt` field. */
  createAt?: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<IndexerLatestAllocationOverflowFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<IndexerLatestAllocationOverflowFilter>>;
  /** Filter by the object’s `overflowId` relation. */
  overflowId?: InputMaybe<IndexerAllocationOverflowFilter>;
  /** Filter by the object’s `overflowIdId` field. */
  overflowIdId?: InputMaybe<StringFilter>;
  /** Filter by the object’s `updateAt` field. */
  updateAt?: InputMaybe<DatetimeFilter>;
};

/** A connection to a list of `IndexerLatestAllocationOverflow` values. */
export type IndexerLatestAllocationOverflowsConnection = {
  __typename?: 'IndexerLatestAllocationOverflowsConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<IndexerLatestAllocationOverflowAggregates>;
  /** A list of edges which contains the `IndexerLatestAllocationOverflow` and cursor to aid in pagination. */
  edges: Array<IndexerLatestAllocationOverflowsEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<IndexerLatestAllocationOverflowAggregates>>;
  /** A list of `IndexerLatestAllocationOverflow` objects. */
  nodes: Array<Maybe<IndexerLatestAllocationOverflow>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `IndexerLatestAllocationOverflow` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `IndexerLatestAllocationOverflow` values. */
export type IndexerLatestAllocationOverflowsConnectionGroupedAggregatesArgs = {
  groupBy: Array<IndexerLatestAllocationOverflowsGroupBy>;
  having?: InputMaybe<IndexerLatestAllocationOverflowsHavingInput>;
};

/** A `IndexerLatestAllocationOverflow` edge in the connection. */
export type IndexerLatestAllocationOverflowsEdge = {
  __typename?: 'IndexerLatestAllocationOverflowsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `IndexerLatestAllocationOverflow` at the end of the edge. */
  node?: Maybe<IndexerLatestAllocationOverflow>;
};

/** Grouping methods for `IndexerLatestAllocationOverflow` for usage during aggregation. */
export enum IndexerLatestAllocationOverflowsGroupBy {
  CreateAt = 'CREATE_AT',
  CreateAtTruncatedToDay = 'CREATE_AT_TRUNCATED_TO_DAY',
  CreateAtTruncatedToHour = 'CREATE_AT_TRUNCATED_TO_HOUR',
  Id = 'ID',
  OverflowIdId = 'OVERFLOW_ID_ID',
  UpdateAt = 'UPDATE_AT',
  UpdateAtTruncatedToDay = 'UPDATE_AT_TRUNCATED_TO_DAY',
  UpdateAtTruncatedToHour = 'UPDATE_AT_TRUNCATED_TO_HOUR'
}

export type IndexerLatestAllocationOverflowsHavingAverageInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerLatestAllocationOverflowsHavingDistinctCountInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

/** Conditions for `IndexerLatestAllocationOverflow` aggregates. */
export type IndexerLatestAllocationOverflowsHavingInput = {
  AND?: InputMaybe<Array<IndexerLatestAllocationOverflowsHavingInput>>;
  OR?: InputMaybe<Array<IndexerLatestAllocationOverflowsHavingInput>>;
  average?: InputMaybe<IndexerLatestAllocationOverflowsHavingAverageInput>;
  distinctCount?: InputMaybe<IndexerLatestAllocationOverflowsHavingDistinctCountInput>;
  max?: InputMaybe<IndexerLatestAllocationOverflowsHavingMaxInput>;
  min?: InputMaybe<IndexerLatestAllocationOverflowsHavingMinInput>;
  stddevPopulation?: InputMaybe<IndexerLatestAllocationOverflowsHavingStddevPopulationInput>;
  stddevSample?: InputMaybe<IndexerLatestAllocationOverflowsHavingStddevSampleInput>;
  sum?: InputMaybe<IndexerLatestAllocationOverflowsHavingSumInput>;
  variancePopulation?: InputMaybe<IndexerLatestAllocationOverflowsHavingVariancePopulationInput>;
  varianceSample?: InputMaybe<IndexerLatestAllocationOverflowsHavingVarianceSampleInput>;
};

export type IndexerLatestAllocationOverflowsHavingMaxInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerLatestAllocationOverflowsHavingMinInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerLatestAllocationOverflowsHavingStddevPopulationInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerLatestAllocationOverflowsHavingStddevSampleInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerLatestAllocationOverflowsHavingSumInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerLatestAllocationOverflowsHavingVariancePopulationInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type IndexerLatestAllocationOverflowsHavingVarianceSampleInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

/** Methods to use when ordering `IndexerLatestAllocationOverflow`. */
export enum IndexerLatestAllocationOverflowsOrderBy {
  CreateAtAsc = 'CREATE_AT_ASC',
  CreateAtDesc = 'CREATE_AT_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  IndexerAllocationOverflowByOverflowIdIdCreateAtAsc = 'INDEXER_ALLOCATION_OVERFLOW_BY_OVERFLOW_ID_ID__CREATE_AT_ASC',
  IndexerAllocationOverflowByOverflowIdIdCreateAtDesc = 'INDEXER_ALLOCATION_OVERFLOW_BY_OVERFLOW_ID_ID__CREATE_AT_DESC',
  IndexerAllocationOverflowByOverflowIdIdEraIdxEndAsc = 'INDEXER_ALLOCATION_OVERFLOW_BY_OVERFLOW_ID_ID__ERA_IDX_END_ASC',
  IndexerAllocationOverflowByOverflowIdIdEraIdxEndDesc = 'INDEXER_ALLOCATION_OVERFLOW_BY_OVERFLOW_ID_ID__ERA_IDX_END_DESC',
  IndexerAllocationOverflowByOverflowIdIdEraIdxStartAsc = 'INDEXER_ALLOCATION_OVERFLOW_BY_OVERFLOW_ID_ID__ERA_IDX_START_ASC',
  IndexerAllocationOverflowByOverflowIdIdEraIdxStartDesc = 'INDEXER_ALLOCATION_OVERFLOW_BY_OVERFLOW_ID_ID__ERA_IDX_START_DESC',
  IndexerAllocationOverflowByOverflowIdIdIdAsc = 'INDEXER_ALLOCATION_OVERFLOW_BY_OVERFLOW_ID_ID__ID_ASC',
  IndexerAllocationOverflowByOverflowIdIdIdDesc = 'INDEXER_ALLOCATION_OVERFLOW_BY_OVERFLOW_ID_ID__ID_DESC',
  IndexerAllocationOverflowByOverflowIdIdIndexerIdAsc = 'INDEXER_ALLOCATION_OVERFLOW_BY_OVERFLOW_ID_ID__INDEXER_ID_ASC',
  IndexerAllocationOverflowByOverflowIdIdIndexerIdDesc = 'INDEXER_ALLOCATION_OVERFLOW_BY_OVERFLOW_ID_ID__INDEXER_ID_DESC',
  IndexerAllocationOverflowByOverflowIdIdOverflowEndAsc = 'INDEXER_ALLOCATION_OVERFLOW_BY_OVERFLOW_ID_ID__OVERFLOW_END_ASC',
  IndexerAllocationOverflowByOverflowIdIdOverflowEndDesc = 'INDEXER_ALLOCATION_OVERFLOW_BY_OVERFLOW_ID_ID__OVERFLOW_END_DESC',
  IndexerAllocationOverflowByOverflowIdIdOverflowStartAsc = 'INDEXER_ALLOCATION_OVERFLOW_BY_OVERFLOW_ID_ID__OVERFLOW_START_ASC',
  IndexerAllocationOverflowByOverflowIdIdOverflowStartDesc = 'INDEXER_ALLOCATION_OVERFLOW_BY_OVERFLOW_ID_ID__OVERFLOW_START_DESC',
  IndexerAllocationOverflowByOverflowIdIdOverflowTimeAsc = 'INDEXER_ALLOCATION_OVERFLOW_BY_OVERFLOW_ID_ID__OVERFLOW_TIME_ASC',
  IndexerAllocationOverflowByOverflowIdIdOverflowTimeDesc = 'INDEXER_ALLOCATION_OVERFLOW_BY_OVERFLOW_ID_ID__OVERFLOW_TIME_DESC',
  IndexerAllocationOverflowByOverflowIdIdUpdateAtAsc = 'INDEXER_ALLOCATION_OVERFLOW_BY_OVERFLOW_ID_ID__UPDATE_AT_ASC',
  IndexerAllocationOverflowByOverflowIdIdUpdateAtDesc = 'INDEXER_ALLOCATION_OVERFLOW_BY_OVERFLOW_ID_ID__UPDATE_AT_DESC',
  Natural = 'NATURAL',
  OverflowIdIdAsc = 'OVERFLOW_ID_ID_ASC',
  OverflowIdIdDesc = 'OVERFLOW_ID_ID_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  UpdateAtAsc = 'UPDATE_AT_ASC',
  UpdateAtDesc = 'UPDATE_AT_DESC'
}

export type IndexerMaxAggregates = {
  __typename?: 'IndexerMaxAggregates';
  /** Maximum of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['Int']['output']>;
};

export type IndexerMinAggregates = {
  __typename?: 'IndexerMinAggregates';
  /** Minimum of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['Int']['output']>;
};

export type IndexerMissedLabor = Node & {
  __typename?: 'IndexerMissedLabor';
  createAt: Scalars['Datetime']['output'];
  /** Reads a single `Deployment` that is related to this `IndexerMissedLabor`. */
  deployment?: Maybe<Deployment>;
  deploymentId: Scalars['String']['output'];
  eraIdx: Scalars['Int']['output'];
  id: Scalars['String']['output'];
  /** Reads a single `Indexer` that is related to this `IndexerMissedLabor`. */
  indexer?: Maybe<Indexer>;
  indexerId: Scalars['String']['output'];
  missedLabor: Scalars['BigFloat']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
};

export type IndexerMissedLaborAggregates = {
  __typename?: 'IndexerMissedLaborAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  average?: Maybe<IndexerMissedLaborAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  distinctCount?: Maybe<IndexerMissedLaborDistinctCountAggregates>;
  keys?: Maybe<Array<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  max?: Maybe<IndexerMissedLaborMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  min?: Maybe<IndexerMissedLaborMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevPopulation?: Maybe<IndexerMissedLaborStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevSample?: Maybe<IndexerMissedLaborStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  sum?: Maybe<IndexerMissedLaborSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  variancePopulation?: Maybe<IndexerMissedLaborVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  varianceSample?: Maybe<IndexerMissedLaborVarianceSampleAggregates>;
};

/** A filter to be used against aggregates of `IndexerMissedLabor` object types. */
export type IndexerMissedLaborAggregatesFilter = {
  /** Mean average aggregate over matching `IndexerMissedLabor` objects. */
  average?: InputMaybe<IndexerMissedLaborAverageAggregateFilter>;
  /** Distinct count aggregate over matching `IndexerMissedLabor` objects. */
  distinctCount?: InputMaybe<IndexerMissedLaborDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `IndexerMissedLabor` object to be included within the aggregate. */
  filter?: InputMaybe<IndexerMissedLaborFilter>;
  /** Maximum aggregate over matching `IndexerMissedLabor` objects. */
  max?: InputMaybe<IndexerMissedLaborMaxAggregateFilter>;
  /** Minimum aggregate over matching `IndexerMissedLabor` objects. */
  min?: InputMaybe<IndexerMissedLaborMinAggregateFilter>;
  /** Population standard deviation aggregate over matching `IndexerMissedLabor` objects. */
  stddevPopulation?: InputMaybe<IndexerMissedLaborStddevPopulationAggregateFilter>;
  /** Sample standard deviation aggregate over matching `IndexerMissedLabor` objects. */
  stddevSample?: InputMaybe<IndexerMissedLaborStddevSampleAggregateFilter>;
  /** Sum aggregate over matching `IndexerMissedLabor` objects. */
  sum?: InputMaybe<IndexerMissedLaborSumAggregateFilter>;
  /** Population variance aggregate over matching `IndexerMissedLabor` objects. */
  variancePopulation?: InputMaybe<IndexerMissedLaborVariancePopulationAggregateFilter>;
  /** Sample variance aggregate over matching `IndexerMissedLabor` objects. */
  varianceSample?: InputMaybe<IndexerMissedLaborVarianceSampleAggregateFilter>;
};

export type IndexerMissedLaborAverageAggregateFilter = {
  eraIdx?: InputMaybe<BigFloatFilter>;
  missedLabor?: InputMaybe<BigFloatFilter>;
};

export type IndexerMissedLaborAverageAggregates = {
  __typename?: 'IndexerMissedLaborAverageAggregates';
  /** Mean average of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of missedLabor across the matching connection */
  missedLabor?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerMissedLaborDistinctCountAggregateFilter = {
  _blockRange?: InputMaybe<BigIntFilter>;
  _id?: InputMaybe<BigIntFilter>;
  createAt?: InputMaybe<BigIntFilter>;
  deploymentId?: InputMaybe<BigIntFilter>;
  eraIdx?: InputMaybe<BigIntFilter>;
  id?: InputMaybe<BigIntFilter>;
  indexerId?: InputMaybe<BigIntFilter>;
  missedLabor?: InputMaybe<BigIntFilter>;
};

export type IndexerMissedLaborDistinctCountAggregates = {
  __typename?: 'IndexerMissedLaborDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  _blockRange?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  _id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createAt across the matching connection */
  createAt?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of deploymentId across the matching connection */
  deploymentId?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of indexerId across the matching connection */
  indexerId?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of missedLabor across the matching connection */
  missedLabor?: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `IndexerMissedLabor` object types. All fields are combined with a logical ‘and.’ */
export type IndexerMissedLaborFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<IndexerMissedLaborFilter>>;
  /** Filter by the object’s `createAt` field. */
  createAt?: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `deployment` relation. */
  deployment?: InputMaybe<DeploymentFilter>;
  /** Filter by the object’s `deploymentId` field. */
  deploymentId?: InputMaybe<StringFilter>;
  /** Filter by the object’s `eraIdx` field. */
  eraIdx?: InputMaybe<IntFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<StringFilter>;
  /** Filter by the object’s `indexer` relation. */
  indexer?: InputMaybe<IndexerFilter>;
  /** Filter by the object’s `indexerId` field. */
  indexerId?: InputMaybe<StringFilter>;
  /** Filter by the object’s `missedLabor` field. */
  missedLabor?: InputMaybe<BigFloatFilter>;
  /** Negates the expression. */
  not?: InputMaybe<IndexerMissedLaborFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<IndexerMissedLaborFilter>>;
};

export type IndexerMissedLaborMaxAggregateFilter = {
  eraIdx?: InputMaybe<IntFilter>;
  missedLabor?: InputMaybe<BigFloatFilter>;
};

export type IndexerMissedLaborMaxAggregates = {
  __typename?: 'IndexerMissedLaborMaxAggregates';
  /** Maximum of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['Int']['output']>;
  /** Maximum of missedLabor across the matching connection */
  missedLabor?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerMissedLaborMinAggregateFilter = {
  eraIdx?: InputMaybe<IntFilter>;
  missedLabor?: InputMaybe<BigFloatFilter>;
};

export type IndexerMissedLaborMinAggregates = {
  __typename?: 'IndexerMissedLaborMinAggregates';
  /** Minimum of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['Int']['output']>;
  /** Minimum of missedLabor across the matching connection */
  missedLabor?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerMissedLaborStddevPopulationAggregateFilter = {
  eraIdx?: InputMaybe<BigFloatFilter>;
  missedLabor?: InputMaybe<BigFloatFilter>;
};

export type IndexerMissedLaborStddevPopulationAggregates = {
  __typename?: 'IndexerMissedLaborStddevPopulationAggregates';
  /** Population standard deviation of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of missedLabor across the matching connection */
  missedLabor?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerMissedLaborStddevSampleAggregateFilter = {
  eraIdx?: InputMaybe<BigFloatFilter>;
  missedLabor?: InputMaybe<BigFloatFilter>;
};

export type IndexerMissedLaborStddevSampleAggregates = {
  __typename?: 'IndexerMissedLaborStddevSampleAggregates';
  /** Sample standard deviation of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of missedLabor across the matching connection */
  missedLabor?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerMissedLaborSumAggregateFilter = {
  eraIdx?: InputMaybe<BigIntFilter>;
  missedLabor?: InputMaybe<BigFloatFilter>;
};

export type IndexerMissedLaborSumAggregates = {
  __typename?: 'IndexerMissedLaborSumAggregates';
  /** Sum of eraIdx across the matching connection */
  eraIdx: Scalars['BigInt']['output'];
  /** Sum of missedLabor across the matching connection */
  missedLabor: Scalars['BigFloat']['output'];
};

export type IndexerMissedLaborVariancePopulationAggregateFilter = {
  eraIdx?: InputMaybe<BigFloatFilter>;
  missedLabor?: InputMaybe<BigFloatFilter>;
};

export type IndexerMissedLaborVariancePopulationAggregates = {
  __typename?: 'IndexerMissedLaborVariancePopulationAggregates';
  /** Population variance of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of missedLabor across the matching connection */
  missedLabor?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerMissedLaborVarianceSampleAggregateFilter = {
  eraIdx?: InputMaybe<BigFloatFilter>;
  missedLabor?: InputMaybe<BigFloatFilter>;
};

export type IndexerMissedLaborVarianceSampleAggregates = {
  __typename?: 'IndexerMissedLaborVarianceSampleAggregates';
  /** Sample variance of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of missedLabor across the matching connection */
  missedLabor?: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `IndexerMissedLabor` values. */
export type IndexerMissedLaborsConnection = {
  __typename?: 'IndexerMissedLaborsConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<IndexerMissedLaborAggregates>;
  /** A list of edges which contains the `IndexerMissedLabor` and cursor to aid in pagination. */
  edges: Array<IndexerMissedLaborsEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<IndexerMissedLaborAggregates>>;
  /** A list of `IndexerMissedLabor` objects. */
  nodes: Array<Maybe<IndexerMissedLabor>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `IndexerMissedLabor` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `IndexerMissedLabor` values. */
export type IndexerMissedLaborsConnectionGroupedAggregatesArgs = {
  groupBy: Array<IndexerMissedLaborsGroupBy>;
  having?: InputMaybe<IndexerMissedLaborsHavingInput>;
};

/** A `IndexerMissedLabor` edge in the connection. */
export type IndexerMissedLaborsEdge = {
  __typename?: 'IndexerMissedLaborsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `IndexerMissedLabor` at the end of the edge. */
  node?: Maybe<IndexerMissedLabor>;
};

/** Grouping methods for `IndexerMissedLabor` for usage during aggregation. */
export enum IndexerMissedLaborsGroupBy {
  CreateAt = 'CREATE_AT',
  CreateAtTruncatedToDay = 'CREATE_AT_TRUNCATED_TO_DAY',
  CreateAtTruncatedToHour = 'CREATE_AT_TRUNCATED_TO_HOUR',
  DeploymentId = 'DEPLOYMENT_ID',
  EraIdx = 'ERA_IDX',
  Id = 'ID',
  IndexerId = 'INDEXER_ID',
  MissedLabor = 'MISSED_LABOR'
}

export type IndexerMissedLaborsHavingAverageInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  missedLabor?: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerMissedLaborsHavingDistinctCountInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  missedLabor?: InputMaybe<HavingBigfloatFilter>;
};

/** Conditions for `IndexerMissedLabor` aggregates. */
export type IndexerMissedLaborsHavingInput = {
  AND?: InputMaybe<Array<IndexerMissedLaborsHavingInput>>;
  OR?: InputMaybe<Array<IndexerMissedLaborsHavingInput>>;
  average?: InputMaybe<IndexerMissedLaborsHavingAverageInput>;
  distinctCount?: InputMaybe<IndexerMissedLaborsHavingDistinctCountInput>;
  max?: InputMaybe<IndexerMissedLaborsHavingMaxInput>;
  min?: InputMaybe<IndexerMissedLaborsHavingMinInput>;
  stddevPopulation?: InputMaybe<IndexerMissedLaborsHavingStddevPopulationInput>;
  stddevSample?: InputMaybe<IndexerMissedLaborsHavingStddevSampleInput>;
  sum?: InputMaybe<IndexerMissedLaborsHavingSumInput>;
  variancePopulation?: InputMaybe<IndexerMissedLaborsHavingVariancePopulationInput>;
  varianceSample?: InputMaybe<IndexerMissedLaborsHavingVarianceSampleInput>;
};

export type IndexerMissedLaborsHavingMaxInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  missedLabor?: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerMissedLaborsHavingMinInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  missedLabor?: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerMissedLaborsHavingStddevPopulationInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  missedLabor?: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerMissedLaborsHavingStddevSampleInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  missedLabor?: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerMissedLaborsHavingSumInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  missedLabor?: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerMissedLaborsHavingVariancePopulationInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  missedLabor?: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerMissedLaborsHavingVarianceSampleInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  missedLabor?: InputMaybe<HavingBigfloatFilter>;
};

/** Methods to use when ordering `IndexerMissedLabor`. */
export enum IndexerMissedLaborsOrderBy {
  CreateAtAsc = 'CREATE_AT_ASC',
  CreateAtDesc = 'CREATE_AT_DESC',
  DeploymentByDeploymentIdCreatedBlockAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_ASC',
  DeploymentByDeploymentIdCreatedBlockDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_DESC',
  DeploymentByDeploymentIdCreatedTimestampAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_ASC',
  DeploymentByDeploymentIdCreatedTimestampDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_DESC',
  DeploymentByDeploymentIdIdAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__ID_ASC',
  DeploymentByDeploymentIdIdDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__ID_DESC',
  DeploymentByDeploymentIdLastEventAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_ASC',
  DeploymentByDeploymentIdLastEventDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_DESC',
  DeploymentByDeploymentIdMetadataAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_ASC',
  DeploymentByDeploymentIdMetadataDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_DESC',
  DeploymentByDeploymentIdProjectIdAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_ASC',
  DeploymentByDeploymentIdProjectIdDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_DESC',
  DeploymentIdAsc = 'DEPLOYMENT_ID_ASC',
  DeploymentIdDesc = 'DEPLOYMENT_ID_DESC',
  EraIdxAsc = 'ERA_IDX_ASC',
  EraIdxDesc = 'ERA_IDX_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  IndexerByIndexerIdActiveAsc = 'INDEXER_BY_INDEXER_ID__ACTIVE_ASC',
  IndexerByIndexerIdActiveDesc = 'INDEXER_BY_INDEXER_ID__ACTIVE_DESC',
  IndexerByIndexerIdCapacityAsc = 'INDEXER_BY_INDEXER_ID__CAPACITY_ASC',
  IndexerByIndexerIdCapacityDesc = 'INDEXER_BY_INDEXER_ID__CAPACITY_DESC',
  IndexerByIndexerIdCommissionAsc = 'INDEXER_BY_INDEXER_ID__COMMISSION_ASC',
  IndexerByIndexerIdCommissionDesc = 'INDEXER_BY_INDEXER_ID__COMMISSION_DESC',
  IndexerByIndexerIdControllerAsc = 'INDEXER_BY_INDEXER_ID__CONTROLLER_ASC',
  IndexerByIndexerIdControllerDesc = 'INDEXER_BY_INDEXER_ID__CONTROLLER_DESC',
  IndexerByIndexerIdCreatedBlockAsc = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_ASC',
  IndexerByIndexerIdCreatedBlockDesc = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_DESC',
  IndexerByIndexerIdIdAsc = 'INDEXER_BY_INDEXER_ID__ID_ASC',
  IndexerByIndexerIdIdDesc = 'INDEXER_BY_INDEXER_ID__ID_DESC',
  IndexerByIndexerIdLastClaimEraAsc = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_ASC',
  IndexerByIndexerIdLastClaimEraDesc = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_DESC',
  IndexerByIndexerIdLastEventAsc = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_ASC',
  IndexerByIndexerIdLastEventDesc = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_DESC',
  IndexerByIndexerIdLastSettledEraAsc = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_ASC',
  IndexerByIndexerIdLastSettledEraDesc = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_DESC',
  IndexerByIndexerIdMaxUnstakeAmountAsc = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_ASC',
  IndexerByIndexerIdMaxUnstakeAmountDesc = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_DESC',
  IndexerByIndexerIdMetadataAsc = 'INDEXER_BY_INDEXER_ID__METADATA_ASC',
  IndexerByIndexerIdMetadataDesc = 'INDEXER_BY_INDEXER_ID__METADATA_DESC',
  IndexerByIndexerIdSelfStakeAsc = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_ASC',
  IndexerByIndexerIdSelfStakeDesc = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_DESC',
  IndexerByIndexerIdTotalStakeAsc = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_ASC',
  IndexerByIndexerIdTotalStakeDesc = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_DESC',
  IndexerIdAsc = 'INDEXER_ID_ASC',
  IndexerIdDesc = 'INDEXER_ID_DESC',
  MissedLaborAsc = 'MISSED_LABOR_ASC',
  MissedLaborDesc = 'MISSED_LABOR_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** A connection to a list of `Offer` values, with data from `AcceptedOffer`. */
export type IndexerOffersByAcceptedOfferIndexerIdAndOfferIdManyToManyConnection = {
  __typename?: 'IndexerOffersByAcceptedOfferIndexerIdAndOfferIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<OfferAggregates>;
  /** A list of edges which contains the `Offer`, info from the `AcceptedOffer`, and the cursor to aid in pagination. */
  edges: Array<IndexerOffersByAcceptedOfferIndexerIdAndOfferIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<OfferAggregates>>;
  /** A list of `Offer` objects. */
  nodes: Array<Maybe<Offer>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Offer` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Offer` values, with data from `AcceptedOffer`. */
export type IndexerOffersByAcceptedOfferIndexerIdAndOfferIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: Array<OffersGroupBy>;
  having?: InputMaybe<OffersHavingInput>;
};

/** A `Offer` edge in the connection, with data from `AcceptedOffer`. */
export type IndexerOffersByAcceptedOfferIndexerIdAndOfferIdManyToManyEdge = {
  __typename?: 'IndexerOffersByAcceptedOfferIndexerIdAndOfferIdManyToManyEdge';
  /** Reads and enables pagination through a set of `AcceptedOffer`. */
  acceptedOffers: AcceptedOffersConnection;
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `Offer` at the end of the edge. */
  node?: Maybe<Offer>;
};


/** A `Offer` edge in the connection, with data from `AcceptedOffer`. */
export type IndexerOffersByAcceptedOfferIndexerIdAndOfferIdManyToManyEdgeAcceptedOffersArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Accepted_Offers_Distinct_Enum>>>;
  filter?: InputMaybe<AcceptedOfferFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<AcceptedOffersOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

/** A connection to a list of `Project` values, with data from `IndexerAllocation`. */
export type IndexerProjectsByIndexerAllocationIndexerIdAndProjectIdManyToManyConnection = {
  __typename?: 'IndexerProjectsByIndexerAllocationIndexerIdAndProjectIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<ProjectAggregates>;
  /** A list of edges which contains the `Project`, info from the `IndexerAllocation`, and the cursor to aid in pagination. */
  edges: Array<IndexerProjectsByIndexerAllocationIndexerIdAndProjectIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<ProjectAggregates>>;
  /** A list of `Project` objects. */
  nodes: Array<Maybe<Project>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Project` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Project` values, with data from `IndexerAllocation`. */
export type IndexerProjectsByIndexerAllocationIndexerIdAndProjectIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: Array<ProjectsGroupBy>;
  having?: InputMaybe<ProjectsHavingInput>;
};

/** A `Project` edge in the connection, with data from `IndexerAllocation`. */
export type IndexerProjectsByIndexerAllocationIndexerIdAndProjectIdManyToManyEdge = {
  __typename?: 'IndexerProjectsByIndexerAllocationIndexerIdAndProjectIdManyToManyEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `IndexerAllocation`. */
  indexerAllocations: IndexerAllocationsConnection;
  /** The `Project` at the end of the edge. */
  node?: Maybe<Project>;
};


/** A `Project` edge in the connection, with data from `IndexerAllocation`. */
export type IndexerProjectsByIndexerAllocationIndexerIdAndProjectIdManyToManyEdgeIndexerAllocationsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Allocations_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerAllocationFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexerAllocationsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

/** A connection to a list of `Project` values, with data from `IndexerAllocationReward`. */
export type IndexerProjectsByIndexerAllocationRewardIndexerIdAndProjectIdManyToManyConnection = {
  __typename?: 'IndexerProjectsByIndexerAllocationRewardIndexerIdAndProjectIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<ProjectAggregates>;
  /** A list of edges which contains the `Project`, info from the `IndexerAllocationReward`, and the cursor to aid in pagination. */
  edges: Array<IndexerProjectsByIndexerAllocationRewardIndexerIdAndProjectIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<ProjectAggregates>>;
  /** A list of `Project` objects. */
  nodes: Array<Maybe<Project>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Project` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Project` values, with data from `IndexerAllocationReward`. */
export type IndexerProjectsByIndexerAllocationRewardIndexerIdAndProjectIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: Array<ProjectsGroupBy>;
  having?: InputMaybe<ProjectsHavingInput>;
};

/** A `Project` edge in the connection, with data from `IndexerAllocationReward`. */
export type IndexerProjectsByIndexerAllocationRewardIndexerIdAndProjectIdManyToManyEdge = {
  __typename?: 'IndexerProjectsByIndexerAllocationRewardIndexerIdAndProjectIdManyToManyEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `IndexerAllocationReward`. */
  indexerAllocationRewards: IndexerAllocationRewardsConnection;
  /** The `Project` at the end of the edge. */
  node?: Maybe<Project>;
};


/** A `Project` edge in the connection, with data from `IndexerAllocationReward`. */
export type IndexerProjectsByIndexerAllocationRewardIndexerIdAndProjectIdManyToManyEdgeIndexerAllocationRewardsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Allocation_Rewards_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerAllocationRewardFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexerAllocationRewardsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

/** A connection to a list of `Project` values, with data from `IndexerAllocationRewardSummary`. */
export type IndexerProjectsByIndexerAllocationRewardSummaryIndexerIdAndProjectIdManyToManyConnection = {
  __typename?: 'IndexerProjectsByIndexerAllocationRewardSummaryIndexerIdAndProjectIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<ProjectAggregates>;
  /** A list of edges which contains the `Project`, info from the `IndexerAllocationRewardSummary`, and the cursor to aid in pagination. */
  edges: Array<IndexerProjectsByIndexerAllocationRewardSummaryIndexerIdAndProjectIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<ProjectAggregates>>;
  /** A list of `Project` objects. */
  nodes: Array<Maybe<Project>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Project` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Project` values, with data from `IndexerAllocationRewardSummary`. */
export type IndexerProjectsByIndexerAllocationRewardSummaryIndexerIdAndProjectIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: Array<ProjectsGroupBy>;
  having?: InputMaybe<ProjectsHavingInput>;
};

/** A `Project` edge in the connection, with data from `IndexerAllocationRewardSummary`. */
export type IndexerProjectsByIndexerAllocationRewardSummaryIndexerIdAndProjectIdManyToManyEdge = {
  __typename?: 'IndexerProjectsByIndexerAllocationRewardSummaryIndexerIdAndProjectIdManyToManyEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `IndexerAllocationRewardSummary`. */
  indexerAllocationRewardSummaries: IndexerAllocationRewardSummariesConnection;
  /** The `Project` at the end of the edge. */
  node?: Maybe<Project>;
};


/** A `Project` edge in the connection, with data from `IndexerAllocationRewardSummary`. */
export type IndexerProjectsByIndexerAllocationRewardSummaryIndexerIdAndProjectIdManyToManyEdgeIndexerAllocationRewardSummariesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Allocation_Reward_Summaries_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerAllocationRewardSummaryFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexerAllocationRewardSummariesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

/** A connection to a list of `Project` values, with data from `IndexerAllocationSummary`. */
export type IndexerProjectsByIndexerAllocationSummaryIndexerIdAndProjectIdManyToManyConnection = {
  __typename?: 'IndexerProjectsByIndexerAllocationSummaryIndexerIdAndProjectIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<ProjectAggregates>;
  /** A list of edges which contains the `Project`, info from the `IndexerAllocationSummary`, and the cursor to aid in pagination. */
  edges: Array<IndexerProjectsByIndexerAllocationSummaryIndexerIdAndProjectIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<ProjectAggregates>>;
  /** A list of `Project` objects. */
  nodes: Array<Maybe<Project>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Project` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Project` values, with data from `IndexerAllocationSummary`. */
export type IndexerProjectsByIndexerAllocationSummaryIndexerIdAndProjectIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: Array<ProjectsGroupBy>;
  having?: InputMaybe<ProjectsHavingInput>;
};

/** A `Project` edge in the connection, with data from `IndexerAllocationSummary`. */
export type IndexerProjectsByIndexerAllocationSummaryIndexerIdAndProjectIdManyToManyEdge = {
  __typename?: 'IndexerProjectsByIndexerAllocationSummaryIndexerIdAndProjectIdManyToManyEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `IndexerAllocationSummary`. */
  indexerAllocationSummaries: IndexerAllocationSummariesConnection;
  /** The `Project` at the end of the edge. */
  node?: Maybe<Project>;
};


/** A `Project` edge in the connection, with data from `IndexerAllocationSummary`. */
export type IndexerProjectsByIndexerAllocationSummaryIndexerIdAndProjectIdManyToManyEdgeIndexerAllocationSummariesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Allocation_Summaries_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerAllocationSummaryFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexerAllocationSummariesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

export type IndexerReward = Node & {
  __typename?: 'IndexerReward';
  amount: Scalars['BigFloat']['output'];
  createdBlock?: Maybe<Scalars['Int']['output']>;
  eraId: Scalars['BigFloat']['output'];
  eraIdx: Scalars['String']['output'];
  id: Scalars['String']['output'];
  /** Reads a single `Indexer` that is related to this `IndexerReward`. */
  indexer?: Maybe<Indexer>;
  indexerId: Scalars['String']['output'];
  lastEvent?: Maybe<Scalars['String']['output']>;
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
};

export type IndexerRewardAggregates = {
  __typename?: 'IndexerRewardAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  average?: Maybe<IndexerRewardAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  distinctCount?: Maybe<IndexerRewardDistinctCountAggregates>;
  keys?: Maybe<Array<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  max?: Maybe<IndexerRewardMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  min?: Maybe<IndexerRewardMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevPopulation?: Maybe<IndexerRewardStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevSample?: Maybe<IndexerRewardStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  sum?: Maybe<IndexerRewardSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  variancePopulation?: Maybe<IndexerRewardVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  varianceSample?: Maybe<IndexerRewardVarianceSampleAggregates>;
};

/** A filter to be used against aggregates of `IndexerReward` object types. */
export type IndexerRewardAggregatesFilter = {
  /** Mean average aggregate over matching `IndexerReward` objects. */
  average?: InputMaybe<IndexerRewardAverageAggregateFilter>;
  /** Distinct count aggregate over matching `IndexerReward` objects. */
  distinctCount?: InputMaybe<IndexerRewardDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `IndexerReward` object to be included within the aggregate. */
  filter?: InputMaybe<IndexerRewardFilter>;
  /** Maximum aggregate over matching `IndexerReward` objects. */
  max?: InputMaybe<IndexerRewardMaxAggregateFilter>;
  /** Minimum aggregate over matching `IndexerReward` objects. */
  min?: InputMaybe<IndexerRewardMinAggregateFilter>;
  /** Population standard deviation aggregate over matching `IndexerReward` objects. */
  stddevPopulation?: InputMaybe<IndexerRewardStddevPopulationAggregateFilter>;
  /** Sample standard deviation aggregate over matching `IndexerReward` objects. */
  stddevSample?: InputMaybe<IndexerRewardStddevSampleAggregateFilter>;
  /** Sum aggregate over matching `IndexerReward` objects. */
  sum?: InputMaybe<IndexerRewardSumAggregateFilter>;
  /** Population variance aggregate over matching `IndexerReward` objects. */
  variancePopulation?: InputMaybe<IndexerRewardVariancePopulationAggregateFilter>;
  /** Sample variance aggregate over matching `IndexerReward` objects. */
  varianceSample?: InputMaybe<IndexerRewardVarianceSampleAggregateFilter>;
};

export type IndexerRewardAverageAggregateFilter = {
  amount?: InputMaybe<BigFloatFilter>;
  createdBlock?: InputMaybe<BigFloatFilter>;
  eraId?: InputMaybe<BigFloatFilter>;
};

export type IndexerRewardAverageAggregates = {
  __typename?: 'IndexerRewardAverageAggregates';
  /** Mean average of amount across the matching connection */
  amount?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of eraId across the matching connection */
  eraId?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerRewardDistinctCountAggregateFilter = {
  _blockRange?: InputMaybe<BigIntFilter>;
  _id?: InputMaybe<BigIntFilter>;
  amount?: InputMaybe<BigIntFilter>;
  createdBlock?: InputMaybe<BigIntFilter>;
  eraId?: InputMaybe<BigIntFilter>;
  eraIdx?: InputMaybe<BigIntFilter>;
  id?: InputMaybe<BigIntFilter>;
  indexerId?: InputMaybe<BigIntFilter>;
  lastEvent?: InputMaybe<BigIntFilter>;
};

export type IndexerRewardDistinctCountAggregates = {
  __typename?: 'IndexerRewardDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  _blockRange?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  _id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of amount across the matching connection */
  amount?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of eraId across the matching connection */
  eraId?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of indexerId across the matching connection */
  indexerId?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of lastEvent across the matching connection */
  lastEvent?: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `IndexerReward` object types. All fields are combined with a logical ‘and.’ */
export type IndexerRewardFilter = {
  /** Filter by the object’s `amount` field. */
  amount?: InputMaybe<BigFloatFilter>;
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<IndexerRewardFilter>>;
  /** Filter by the object’s `createdBlock` field. */
  createdBlock?: InputMaybe<IntFilter>;
  /** Filter by the object’s `eraId` field. */
  eraId?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `eraIdx` field. */
  eraIdx?: InputMaybe<StringFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<StringFilter>;
  /** Filter by the object’s `indexer` relation. */
  indexer?: InputMaybe<IndexerFilter>;
  /** Filter by the object’s `indexerId` field. */
  indexerId?: InputMaybe<StringFilter>;
  /** Filter by the object’s `lastEvent` field. */
  lastEvent?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<IndexerRewardFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<IndexerRewardFilter>>;
};

export type IndexerRewardMaxAggregateFilter = {
  amount?: InputMaybe<BigFloatFilter>;
  createdBlock?: InputMaybe<IntFilter>;
  eraId?: InputMaybe<BigFloatFilter>;
};

export type IndexerRewardMaxAggregates = {
  __typename?: 'IndexerRewardMaxAggregates';
  /** Maximum of amount across the matching connection */
  amount?: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['Int']['output']>;
  /** Maximum of eraId across the matching connection */
  eraId?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerRewardMinAggregateFilter = {
  amount?: InputMaybe<BigFloatFilter>;
  createdBlock?: InputMaybe<IntFilter>;
  eraId?: InputMaybe<BigFloatFilter>;
};

export type IndexerRewardMinAggregates = {
  __typename?: 'IndexerRewardMinAggregates';
  /** Minimum of amount across the matching connection */
  amount?: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['Int']['output']>;
  /** Minimum of eraId across the matching connection */
  eraId?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerRewardStddevPopulationAggregateFilter = {
  amount?: InputMaybe<BigFloatFilter>;
  createdBlock?: InputMaybe<BigFloatFilter>;
  eraId?: InputMaybe<BigFloatFilter>;
};

export type IndexerRewardStddevPopulationAggregates = {
  __typename?: 'IndexerRewardStddevPopulationAggregates';
  /** Population standard deviation of amount across the matching connection */
  amount?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of eraId across the matching connection */
  eraId?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerRewardStddevSampleAggregateFilter = {
  amount?: InputMaybe<BigFloatFilter>;
  createdBlock?: InputMaybe<BigFloatFilter>;
  eraId?: InputMaybe<BigFloatFilter>;
};

export type IndexerRewardStddevSampleAggregates = {
  __typename?: 'IndexerRewardStddevSampleAggregates';
  /** Sample standard deviation of amount across the matching connection */
  amount?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of eraId across the matching connection */
  eraId?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerRewardSumAggregateFilter = {
  amount?: InputMaybe<BigFloatFilter>;
  createdBlock?: InputMaybe<BigIntFilter>;
  eraId?: InputMaybe<BigFloatFilter>;
};

export type IndexerRewardSumAggregates = {
  __typename?: 'IndexerRewardSumAggregates';
  /** Sum of amount across the matching connection */
  amount: Scalars['BigFloat']['output'];
  /** Sum of createdBlock across the matching connection */
  createdBlock: Scalars['BigInt']['output'];
  /** Sum of eraId across the matching connection */
  eraId: Scalars['BigFloat']['output'];
};

export type IndexerRewardVariancePopulationAggregateFilter = {
  amount?: InputMaybe<BigFloatFilter>;
  createdBlock?: InputMaybe<BigFloatFilter>;
  eraId?: InputMaybe<BigFloatFilter>;
};

export type IndexerRewardVariancePopulationAggregates = {
  __typename?: 'IndexerRewardVariancePopulationAggregates';
  /** Population variance of amount across the matching connection */
  amount?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of eraId across the matching connection */
  eraId?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerRewardVarianceSampleAggregateFilter = {
  amount?: InputMaybe<BigFloatFilter>;
  createdBlock?: InputMaybe<BigFloatFilter>;
  eraId?: InputMaybe<BigFloatFilter>;
};

export type IndexerRewardVarianceSampleAggregates = {
  __typename?: 'IndexerRewardVarianceSampleAggregates';
  /** Sample variance of amount across the matching connection */
  amount?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of eraId across the matching connection */
  eraId?: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `IndexerReward` values. */
export type IndexerRewardsConnection = {
  __typename?: 'IndexerRewardsConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<IndexerRewardAggregates>;
  /** A list of edges which contains the `IndexerReward` and cursor to aid in pagination. */
  edges: Array<IndexerRewardsEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<IndexerRewardAggregates>>;
  /** A list of `IndexerReward` objects. */
  nodes: Array<Maybe<IndexerReward>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `IndexerReward` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `IndexerReward` values. */
export type IndexerRewardsConnectionGroupedAggregatesArgs = {
  groupBy: Array<IndexerRewardsGroupBy>;
  having?: InputMaybe<IndexerRewardsHavingInput>;
};

/** A `IndexerReward` edge in the connection. */
export type IndexerRewardsEdge = {
  __typename?: 'IndexerRewardsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `IndexerReward` at the end of the edge. */
  node?: Maybe<IndexerReward>;
};

/** Grouping methods for `IndexerReward` for usage during aggregation. */
export enum IndexerRewardsGroupBy {
  Amount = 'AMOUNT',
  CreatedBlock = 'CREATED_BLOCK',
  EraId = 'ERA_ID',
  EraIdx = 'ERA_IDX',
  Id = 'ID',
  IndexerId = 'INDEXER_ID',
  LastEvent = 'LAST_EVENT'
}

export type IndexerRewardsHavingAverageInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
  createdBlock?: InputMaybe<HavingIntFilter>;
  eraId?: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerRewardsHavingDistinctCountInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
  createdBlock?: InputMaybe<HavingIntFilter>;
  eraId?: InputMaybe<HavingBigfloatFilter>;
};

/** Conditions for `IndexerReward` aggregates. */
export type IndexerRewardsHavingInput = {
  AND?: InputMaybe<Array<IndexerRewardsHavingInput>>;
  OR?: InputMaybe<Array<IndexerRewardsHavingInput>>;
  average?: InputMaybe<IndexerRewardsHavingAverageInput>;
  distinctCount?: InputMaybe<IndexerRewardsHavingDistinctCountInput>;
  max?: InputMaybe<IndexerRewardsHavingMaxInput>;
  min?: InputMaybe<IndexerRewardsHavingMinInput>;
  stddevPopulation?: InputMaybe<IndexerRewardsHavingStddevPopulationInput>;
  stddevSample?: InputMaybe<IndexerRewardsHavingStddevSampleInput>;
  sum?: InputMaybe<IndexerRewardsHavingSumInput>;
  variancePopulation?: InputMaybe<IndexerRewardsHavingVariancePopulationInput>;
  varianceSample?: InputMaybe<IndexerRewardsHavingVarianceSampleInput>;
};

export type IndexerRewardsHavingMaxInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
  createdBlock?: InputMaybe<HavingIntFilter>;
  eraId?: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerRewardsHavingMinInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
  createdBlock?: InputMaybe<HavingIntFilter>;
  eraId?: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerRewardsHavingStddevPopulationInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
  createdBlock?: InputMaybe<HavingIntFilter>;
  eraId?: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerRewardsHavingStddevSampleInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
  createdBlock?: InputMaybe<HavingIntFilter>;
  eraId?: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerRewardsHavingSumInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
  createdBlock?: InputMaybe<HavingIntFilter>;
  eraId?: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerRewardsHavingVariancePopulationInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
  createdBlock?: InputMaybe<HavingIntFilter>;
  eraId?: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerRewardsHavingVarianceSampleInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
  createdBlock?: InputMaybe<HavingIntFilter>;
  eraId?: InputMaybe<HavingBigfloatFilter>;
};

/** Methods to use when ordering `IndexerReward`. */
export enum IndexerRewardsOrderBy {
  AmountAsc = 'AMOUNT_ASC',
  AmountDesc = 'AMOUNT_DESC',
  CreatedBlockAsc = 'CREATED_BLOCK_ASC',
  CreatedBlockDesc = 'CREATED_BLOCK_DESC',
  EraIdxAsc = 'ERA_IDX_ASC',
  EraIdxDesc = 'ERA_IDX_DESC',
  EraIdAsc = 'ERA_ID_ASC',
  EraIdDesc = 'ERA_ID_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  IndexerByIndexerIdActiveAsc = 'INDEXER_BY_INDEXER_ID__ACTIVE_ASC',
  IndexerByIndexerIdActiveDesc = 'INDEXER_BY_INDEXER_ID__ACTIVE_DESC',
  IndexerByIndexerIdCapacityAsc = 'INDEXER_BY_INDEXER_ID__CAPACITY_ASC',
  IndexerByIndexerIdCapacityDesc = 'INDEXER_BY_INDEXER_ID__CAPACITY_DESC',
  IndexerByIndexerIdCommissionAsc = 'INDEXER_BY_INDEXER_ID__COMMISSION_ASC',
  IndexerByIndexerIdCommissionDesc = 'INDEXER_BY_INDEXER_ID__COMMISSION_DESC',
  IndexerByIndexerIdControllerAsc = 'INDEXER_BY_INDEXER_ID__CONTROLLER_ASC',
  IndexerByIndexerIdControllerDesc = 'INDEXER_BY_INDEXER_ID__CONTROLLER_DESC',
  IndexerByIndexerIdCreatedBlockAsc = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_ASC',
  IndexerByIndexerIdCreatedBlockDesc = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_DESC',
  IndexerByIndexerIdIdAsc = 'INDEXER_BY_INDEXER_ID__ID_ASC',
  IndexerByIndexerIdIdDesc = 'INDEXER_BY_INDEXER_ID__ID_DESC',
  IndexerByIndexerIdLastClaimEraAsc = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_ASC',
  IndexerByIndexerIdLastClaimEraDesc = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_DESC',
  IndexerByIndexerIdLastEventAsc = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_ASC',
  IndexerByIndexerIdLastEventDesc = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_DESC',
  IndexerByIndexerIdLastSettledEraAsc = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_ASC',
  IndexerByIndexerIdLastSettledEraDesc = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_DESC',
  IndexerByIndexerIdMaxUnstakeAmountAsc = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_ASC',
  IndexerByIndexerIdMaxUnstakeAmountDesc = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_DESC',
  IndexerByIndexerIdMetadataAsc = 'INDEXER_BY_INDEXER_ID__METADATA_ASC',
  IndexerByIndexerIdMetadataDesc = 'INDEXER_BY_INDEXER_ID__METADATA_DESC',
  IndexerByIndexerIdSelfStakeAsc = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_ASC',
  IndexerByIndexerIdSelfStakeDesc = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_DESC',
  IndexerByIndexerIdTotalStakeAsc = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_ASC',
  IndexerByIndexerIdTotalStakeDesc = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_DESC',
  IndexerIdAsc = 'INDEXER_ID_ASC',
  IndexerIdDesc = 'INDEXER_ID_DESC',
  LastEventAsc = 'LAST_EVENT_ASC',
  LastEventDesc = 'LAST_EVENT_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** A connection to a list of `ServiceAgreement` values, with data from `AcceptedOffer`. */
export type IndexerServiceAgreementsByAcceptedOfferIndexerIdAndServiceAgreementIdManyToManyConnection = {
  __typename?: 'IndexerServiceAgreementsByAcceptedOfferIndexerIdAndServiceAgreementIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<ServiceAgreementAggregates>;
  /** A list of edges which contains the `ServiceAgreement`, info from the `AcceptedOffer`, and the cursor to aid in pagination. */
  edges: Array<IndexerServiceAgreementsByAcceptedOfferIndexerIdAndServiceAgreementIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<ServiceAgreementAggregates>>;
  /** A list of `ServiceAgreement` objects. */
  nodes: Array<Maybe<ServiceAgreement>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `ServiceAgreement` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `ServiceAgreement` values, with data from `AcceptedOffer`. */
export type IndexerServiceAgreementsByAcceptedOfferIndexerIdAndServiceAgreementIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: Array<ServiceAgreementsGroupBy>;
  having?: InputMaybe<ServiceAgreementsHavingInput>;
};

/** A `ServiceAgreement` edge in the connection, with data from `AcceptedOffer`. */
export type IndexerServiceAgreementsByAcceptedOfferIndexerIdAndServiceAgreementIdManyToManyEdge = {
  __typename?: 'IndexerServiceAgreementsByAcceptedOfferIndexerIdAndServiceAgreementIdManyToManyEdge';
  /** Reads and enables pagination through a set of `AcceptedOffer`. */
  acceptedOffers: AcceptedOffersConnection;
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `ServiceAgreement` at the end of the edge. */
  node?: Maybe<ServiceAgreement>;
};


/** A `ServiceAgreement` edge in the connection, with data from `AcceptedOffer`. */
export type IndexerServiceAgreementsByAcceptedOfferIndexerIdAndServiceAgreementIdManyToManyEdgeAcceptedOffersArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Accepted_Offers_Distinct_Enum>>>;
  filter?: InputMaybe<AcceptedOfferFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<AcceptedOffersOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

export type IndexerStake = Node & {
  __typename?: 'IndexerStake';
  delegatorStake: Scalars['BigFloat']['output'];
  /** Reads a single `Era` that is related to this `IndexerStake`. */
  era?: Maybe<Era>;
  eraId: Scalars['String']['output'];
  eraIdx: Scalars['Int']['output'];
  id: Scalars['String']['output'];
  /** Reads a single `Indexer` that is related to this `IndexerStake`. */
  indexer?: Maybe<Indexer>;
  indexerId: Scalars['String']['output'];
  indexerStake: Scalars['BigFloat']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  totalStake: Scalars['BigFloat']['output'];
};

export type IndexerStakeAggregates = {
  __typename?: 'IndexerStakeAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  average?: Maybe<IndexerStakeAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  distinctCount?: Maybe<IndexerStakeDistinctCountAggregates>;
  keys?: Maybe<Array<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  max?: Maybe<IndexerStakeMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  min?: Maybe<IndexerStakeMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevPopulation?: Maybe<IndexerStakeStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevSample?: Maybe<IndexerStakeStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  sum?: Maybe<IndexerStakeSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  variancePopulation?: Maybe<IndexerStakeVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  varianceSample?: Maybe<IndexerStakeVarianceSampleAggregates>;
};

/** A filter to be used against aggregates of `IndexerStake` object types. */
export type IndexerStakeAggregatesFilter = {
  /** Mean average aggregate over matching `IndexerStake` objects. */
  average?: InputMaybe<IndexerStakeAverageAggregateFilter>;
  /** Distinct count aggregate over matching `IndexerStake` objects. */
  distinctCount?: InputMaybe<IndexerStakeDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `IndexerStake` object to be included within the aggregate. */
  filter?: InputMaybe<IndexerStakeFilter>;
  /** Maximum aggregate over matching `IndexerStake` objects. */
  max?: InputMaybe<IndexerStakeMaxAggregateFilter>;
  /** Minimum aggregate over matching `IndexerStake` objects. */
  min?: InputMaybe<IndexerStakeMinAggregateFilter>;
  /** Population standard deviation aggregate over matching `IndexerStake` objects. */
  stddevPopulation?: InputMaybe<IndexerStakeStddevPopulationAggregateFilter>;
  /** Sample standard deviation aggregate over matching `IndexerStake` objects. */
  stddevSample?: InputMaybe<IndexerStakeStddevSampleAggregateFilter>;
  /** Sum aggregate over matching `IndexerStake` objects. */
  sum?: InputMaybe<IndexerStakeSumAggregateFilter>;
  /** Population variance aggregate over matching `IndexerStake` objects. */
  variancePopulation?: InputMaybe<IndexerStakeVariancePopulationAggregateFilter>;
  /** Sample variance aggregate over matching `IndexerStake` objects. */
  varianceSample?: InputMaybe<IndexerStakeVarianceSampleAggregateFilter>;
};

export type IndexerStakeAverageAggregateFilter = {
  delegatorStake?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigFloatFilter>;
  indexerStake?: InputMaybe<BigFloatFilter>;
  totalStake?: InputMaybe<BigFloatFilter>;
};

export type IndexerStakeAverageAggregates = {
  __typename?: 'IndexerStakeAverageAggregates';
  /** Mean average of delegatorStake across the matching connection */
  delegatorStake?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of indexerStake across the matching connection */
  indexerStake?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of totalStake across the matching connection */
  totalStake?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerStakeDistinctCountAggregateFilter = {
  _blockRange?: InputMaybe<BigIntFilter>;
  _id?: InputMaybe<BigIntFilter>;
  delegatorStake?: InputMaybe<BigIntFilter>;
  eraId?: InputMaybe<BigIntFilter>;
  eraIdx?: InputMaybe<BigIntFilter>;
  id?: InputMaybe<BigIntFilter>;
  indexerId?: InputMaybe<BigIntFilter>;
  indexerStake?: InputMaybe<BigIntFilter>;
  totalStake?: InputMaybe<BigIntFilter>;
};

export type IndexerStakeDistinctCountAggregates = {
  __typename?: 'IndexerStakeDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  _blockRange?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  _id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of delegatorStake across the matching connection */
  delegatorStake?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of eraId across the matching connection */
  eraId?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of indexerId across the matching connection */
  indexerId?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of indexerStake across the matching connection */
  indexerStake?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of totalStake across the matching connection */
  totalStake?: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `IndexerStake` object types. All fields are combined with a logical ‘and.’ */
export type IndexerStakeFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<IndexerStakeFilter>>;
  /** Filter by the object’s `delegatorStake` field. */
  delegatorStake?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `era` relation. */
  era?: InputMaybe<EraFilter>;
  /** Filter by the object’s `eraId` field. */
  eraId?: InputMaybe<StringFilter>;
  /** Filter by the object’s `eraIdx` field. */
  eraIdx?: InputMaybe<IntFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<StringFilter>;
  /** Filter by the object’s `indexer` relation. */
  indexer?: InputMaybe<IndexerFilter>;
  /** Filter by the object’s `indexerId` field. */
  indexerId?: InputMaybe<StringFilter>;
  /** Filter by the object’s `indexerStake` field. */
  indexerStake?: InputMaybe<BigFloatFilter>;
  /** Negates the expression. */
  not?: InputMaybe<IndexerStakeFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<IndexerStakeFilter>>;
  /** Filter by the object’s `totalStake` field. */
  totalStake?: InputMaybe<BigFloatFilter>;
};

export type IndexerStakeMaxAggregateFilter = {
  delegatorStake?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<IntFilter>;
  indexerStake?: InputMaybe<BigFloatFilter>;
  totalStake?: InputMaybe<BigFloatFilter>;
};

export type IndexerStakeMaxAggregates = {
  __typename?: 'IndexerStakeMaxAggregates';
  /** Maximum of delegatorStake across the matching connection */
  delegatorStake?: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['Int']['output']>;
  /** Maximum of indexerStake across the matching connection */
  indexerStake?: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of totalStake across the matching connection */
  totalStake?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerStakeMinAggregateFilter = {
  delegatorStake?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<IntFilter>;
  indexerStake?: InputMaybe<BigFloatFilter>;
  totalStake?: InputMaybe<BigFloatFilter>;
};

export type IndexerStakeMinAggregates = {
  __typename?: 'IndexerStakeMinAggregates';
  /** Minimum of delegatorStake across the matching connection */
  delegatorStake?: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['Int']['output']>;
  /** Minimum of indexerStake across the matching connection */
  indexerStake?: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of totalStake across the matching connection */
  totalStake?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerStakeStddevPopulationAggregateFilter = {
  delegatorStake?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigFloatFilter>;
  indexerStake?: InputMaybe<BigFloatFilter>;
  totalStake?: InputMaybe<BigFloatFilter>;
};

export type IndexerStakeStddevPopulationAggregates = {
  __typename?: 'IndexerStakeStddevPopulationAggregates';
  /** Population standard deviation of delegatorStake across the matching connection */
  delegatorStake?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of indexerStake across the matching connection */
  indexerStake?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of totalStake across the matching connection */
  totalStake?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerStakeStddevSampleAggregateFilter = {
  delegatorStake?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigFloatFilter>;
  indexerStake?: InputMaybe<BigFloatFilter>;
  totalStake?: InputMaybe<BigFloatFilter>;
};

export type IndexerStakeStddevSampleAggregates = {
  __typename?: 'IndexerStakeStddevSampleAggregates';
  /** Sample standard deviation of delegatorStake across the matching connection */
  delegatorStake?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of indexerStake across the matching connection */
  indexerStake?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of totalStake across the matching connection */
  totalStake?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerStakeSumAggregateFilter = {
  delegatorStake?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigIntFilter>;
  indexerStake?: InputMaybe<BigFloatFilter>;
  totalStake?: InputMaybe<BigFloatFilter>;
};

export type IndexerStakeSumAggregates = {
  __typename?: 'IndexerStakeSumAggregates';
  /** Sum of delegatorStake across the matching connection */
  delegatorStake: Scalars['BigFloat']['output'];
  /** Sum of eraIdx across the matching connection */
  eraIdx: Scalars['BigInt']['output'];
  /** Sum of indexerStake across the matching connection */
  indexerStake: Scalars['BigFloat']['output'];
  /** Sum of totalStake across the matching connection */
  totalStake: Scalars['BigFloat']['output'];
};

/** A connection to a list of `IndexerStakeSummary` values. */
export type IndexerStakeSummariesConnection = {
  __typename?: 'IndexerStakeSummariesConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<IndexerStakeSummaryAggregates>;
  /** A list of edges which contains the `IndexerStakeSummary` and cursor to aid in pagination. */
  edges: Array<IndexerStakeSummariesEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<IndexerStakeSummaryAggregates>>;
  /** A list of `IndexerStakeSummary` objects. */
  nodes: Array<Maybe<IndexerStakeSummary>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `IndexerStakeSummary` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `IndexerStakeSummary` values. */
export type IndexerStakeSummariesConnectionGroupedAggregatesArgs = {
  groupBy: Array<IndexerStakeSummariesGroupBy>;
  having?: InputMaybe<IndexerStakeSummariesHavingInput>;
};

/** A `IndexerStakeSummary` edge in the connection. */
export type IndexerStakeSummariesEdge = {
  __typename?: 'IndexerStakeSummariesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `IndexerStakeSummary` at the end of the edge. */
  node?: Maybe<IndexerStakeSummary>;
};

/** Grouping methods for `IndexerStakeSummary` for usage during aggregation. */
export enum IndexerStakeSummariesGroupBy {
  DelegatorStake = 'DELEGATOR_STAKE',
  EraId = 'ERA_ID',
  EraIdx = 'ERA_IDX',
  Id = 'ID',
  IndexerStake = 'INDEXER_STAKE',
  NextDelegatorStake = 'NEXT_DELEGATOR_STAKE',
  NextIndexerStake = 'NEXT_INDEXER_STAKE',
  NextTotalStake = 'NEXT_TOTAL_STAKE',
  TotalStake = 'TOTAL_STAKE'
}

export type IndexerStakeSummariesHavingAverageInput = {
  delegatorStake?: InputMaybe<HavingBigfloatFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  indexerStake?: InputMaybe<HavingBigfloatFilter>;
  nextDelegatorStake?: InputMaybe<HavingBigfloatFilter>;
  nextIndexerStake?: InputMaybe<HavingBigfloatFilter>;
  nextTotalStake?: InputMaybe<HavingBigfloatFilter>;
  totalStake?: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerStakeSummariesHavingDistinctCountInput = {
  delegatorStake?: InputMaybe<HavingBigfloatFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  indexerStake?: InputMaybe<HavingBigfloatFilter>;
  nextDelegatorStake?: InputMaybe<HavingBigfloatFilter>;
  nextIndexerStake?: InputMaybe<HavingBigfloatFilter>;
  nextTotalStake?: InputMaybe<HavingBigfloatFilter>;
  totalStake?: InputMaybe<HavingBigfloatFilter>;
};

/** Conditions for `IndexerStakeSummary` aggregates. */
export type IndexerStakeSummariesHavingInput = {
  AND?: InputMaybe<Array<IndexerStakeSummariesHavingInput>>;
  OR?: InputMaybe<Array<IndexerStakeSummariesHavingInput>>;
  average?: InputMaybe<IndexerStakeSummariesHavingAverageInput>;
  distinctCount?: InputMaybe<IndexerStakeSummariesHavingDistinctCountInput>;
  max?: InputMaybe<IndexerStakeSummariesHavingMaxInput>;
  min?: InputMaybe<IndexerStakeSummariesHavingMinInput>;
  stddevPopulation?: InputMaybe<IndexerStakeSummariesHavingStddevPopulationInput>;
  stddevSample?: InputMaybe<IndexerStakeSummariesHavingStddevSampleInput>;
  sum?: InputMaybe<IndexerStakeSummariesHavingSumInput>;
  variancePopulation?: InputMaybe<IndexerStakeSummariesHavingVariancePopulationInput>;
  varianceSample?: InputMaybe<IndexerStakeSummariesHavingVarianceSampleInput>;
};

export type IndexerStakeSummariesHavingMaxInput = {
  delegatorStake?: InputMaybe<HavingBigfloatFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  indexerStake?: InputMaybe<HavingBigfloatFilter>;
  nextDelegatorStake?: InputMaybe<HavingBigfloatFilter>;
  nextIndexerStake?: InputMaybe<HavingBigfloatFilter>;
  nextTotalStake?: InputMaybe<HavingBigfloatFilter>;
  totalStake?: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerStakeSummariesHavingMinInput = {
  delegatorStake?: InputMaybe<HavingBigfloatFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  indexerStake?: InputMaybe<HavingBigfloatFilter>;
  nextDelegatorStake?: InputMaybe<HavingBigfloatFilter>;
  nextIndexerStake?: InputMaybe<HavingBigfloatFilter>;
  nextTotalStake?: InputMaybe<HavingBigfloatFilter>;
  totalStake?: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerStakeSummariesHavingStddevPopulationInput = {
  delegatorStake?: InputMaybe<HavingBigfloatFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  indexerStake?: InputMaybe<HavingBigfloatFilter>;
  nextDelegatorStake?: InputMaybe<HavingBigfloatFilter>;
  nextIndexerStake?: InputMaybe<HavingBigfloatFilter>;
  nextTotalStake?: InputMaybe<HavingBigfloatFilter>;
  totalStake?: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerStakeSummariesHavingStddevSampleInput = {
  delegatorStake?: InputMaybe<HavingBigfloatFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  indexerStake?: InputMaybe<HavingBigfloatFilter>;
  nextDelegatorStake?: InputMaybe<HavingBigfloatFilter>;
  nextIndexerStake?: InputMaybe<HavingBigfloatFilter>;
  nextTotalStake?: InputMaybe<HavingBigfloatFilter>;
  totalStake?: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerStakeSummariesHavingSumInput = {
  delegatorStake?: InputMaybe<HavingBigfloatFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  indexerStake?: InputMaybe<HavingBigfloatFilter>;
  nextDelegatorStake?: InputMaybe<HavingBigfloatFilter>;
  nextIndexerStake?: InputMaybe<HavingBigfloatFilter>;
  nextTotalStake?: InputMaybe<HavingBigfloatFilter>;
  totalStake?: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerStakeSummariesHavingVariancePopulationInput = {
  delegatorStake?: InputMaybe<HavingBigfloatFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  indexerStake?: InputMaybe<HavingBigfloatFilter>;
  nextDelegatorStake?: InputMaybe<HavingBigfloatFilter>;
  nextIndexerStake?: InputMaybe<HavingBigfloatFilter>;
  nextTotalStake?: InputMaybe<HavingBigfloatFilter>;
  totalStake?: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerStakeSummariesHavingVarianceSampleInput = {
  delegatorStake?: InputMaybe<HavingBigfloatFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  indexerStake?: InputMaybe<HavingBigfloatFilter>;
  nextDelegatorStake?: InputMaybe<HavingBigfloatFilter>;
  nextIndexerStake?: InputMaybe<HavingBigfloatFilter>;
  nextTotalStake?: InputMaybe<HavingBigfloatFilter>;
  totalStake?: InputMaybe<HavingBigfloatFilter>;
};

/** Methods to use when ordering `IndexerStakeSummary`. */
export enum IndexerStakeSummariesOrderBy {
  DelegatorStakeAsc = 'DELEGATOR_STAKE_ASC',
  DelegatorStakeDesc = 'DELEGATOR_STAKE_DESC',
  EraByEraIdCreatedBlockAsc = 'ERA_BY_ERA_ID__CREATED_BLOCK_ASC',
  EraByEraIdCreatedBlockDesc = 'ERA_BY_ERA_ID__CREATED_BLOCK_DESC',
  EraByEraIdEndTimeAsc = 'ERA_BY_ERA_ID__END_TIME_ASC',
  EraByEraIdEndTimeDesc = 'ERA_BY_ERA_ID__END_TIME_DESC',
  EraByEraIdEraPeriodAsc = 'ERA_BY_ERA_ID__ERA_PERIOD_ASC',
  EraByEraIdEraPeriodDesc = 'ERA_BY_ERA_ID__ERA_PERIOD_DESC',
  EraByEraIdForceNextAsc = 'ERA_BY_ERA_ID__FORCE_NEXT_ASC',
  EraByEraIdForceNextDesc = 'ERA_BY_ERA_ID__FORCE_NEXT_DESC',
  EraByEraIdIdAsc = 'ERA_BY_ERA_ID__ID_ASC',
  EraByEraIdIdDesc = 'ERA_BY_ERA_ID__ID_DESC',
  EraByEraIdLastEventAsc = 'ERA_BY_ERA_ID__LAST_EVENT_ASC',
  EraByEraIdLastEventDesc = 'ERA_BY_ERA_ID__LAST_EVENT_DESC',
  EraByEraIdStartTimeAsc = 'ERA_BY_ERA_ID__START_TIME_ASC',
  EraByEraIdStartTimeDesc = 'ERA_BY_ERA_ID__START_TIME_DESC',
  EraIdxAsc = 'ERA_IDX_ASC',
  EraIdxDesc = 'ERA_IDX_DESC',
  EraIdAsc = 'ERA_ID_ASC',
  EraIdDesc = 'ERA_ID_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  IndexerStakeAsc = 'INDEXER_STAKE_ASC',
  IndexerStakeDesc = 'INDEXER_STAKE_DESC',
  Natural = 'NATURAL',
  NextDelegatorStakeAsc = 'NEXT_DELEGATOR_STAKE_ASC',
  NextDelegatorStakeDesc = 'NEXT_DELEGATOR_STAKE_DESC',
  NextIndexerStakeAsc = 'NEXT_INDEXER_STAKE_ASC',
  NextIndexerStakeDesc = 'NEXT_INDEXER_STAKE_DESC',
  NextTotalStakeAsc = 'NEXT_TOTAL_STAKE_ASC',
  NextTotalStakeDesc = 'NEXT_TOTAL_STAKE_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  TotalStakeAsc = 'TOTAL_STAKE_ASC',
  TotalStakeDesc = 'TOTAL_STAKE_DESC'
}

export type IndexerStakeSummary = Node & {
  __typename?: 'IndexerStakeSummary';
  delegatorStake: Scalars['BigFloat']['output'];
  /** Reads a single `Era` that is related to this `IndexerStakeSummary`. */
  era?: Maybe<Era>;
  eraId: Scalars['String']['output'];
  eraIdx: Scalars['Int']['output'];
  id: Scalars['String']['output'];
  indexerStake: Scalars['BigFloat']['output'];
  nextDelegatorStake: Scalars['BigFloat']['output'];
  nextIndexerStake: Scalars['BigFloat']['output'];
  nextTotalStake: Scalars['BigFloat']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  totalStake: Scalars['BigFloat']['output'];
};

export type IndexerStakeSummaryAggregates = {
  __typename?: 'IndexerStakeSummaryAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  average?: Maybe<IndexerStakeSummaryAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  distinctCount?: Maybe<IndexerStakeSummaryDistinctCountAggregates>;
  keys?: Maybe<Array<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  max?: Maybe<IndexerStakeSummaryMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  min?: Maybe<IndexerStakeSummaryMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevPopulation?: Maybe<IndexerStakeSummaryStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevSample?: Maybe<IndexerStakeSummaryStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  sum?: Maybe<IndexerStakeSummarySumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  variancePopulation?: Maybe<IndexerStakeSummaryVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  varianceSample?: Maybe<IndexerStakeSummaryVarianceSampleAggregates>;
};

/** A filter to be used against aggregates of `IndexerStakeSummary` object types. */
export type IndexerStakeSummaryAggregatesFilter = {
  /** Mean average aggregate over matching `IndexerStakeSummary` objects. */
  average?: InputMaybe<IndexerStakeSummaryAverageAggregateFilter>;
  /** Distinct count aggregate over matching `IndexerStakeSummary` objects. */
  distinctCount?: InputMaybe<IndexerStakeSummaryDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `IndexerStakeSummary` object to be included within the aggregate. */
  filter?: InputMaybe<IndexerStakeSummaryFilter>;
  /** Maximum aggregate over matching `IndexerStakeSummary` objects. */
  max?: InputMaybe<IndexerStakeSummaryMaxAggregateFilter>;
  /** Minimum aggregate over matching `IndexerStakeSummary` objects. */
  min?: InputMaybe<IndexerStakeSummaryMinAggregateFilter>;
  /** Population standard deviation aggregate over matching `IndexerStakeSummary` objects. */
  stddevPopulation?: InputMaybe<IndexerStakeSummaryStddevPopulationAggregateFilter>;
  /** Sample standard deviation aggregate over matching `IndexerStakeSummary` objects. */
  stddevSample?: InputMaybe<IndexerStakeSummaryStddevSampleAggregateFilter>;
  /** Sum aggregate over matching `IndexerStakeSummary` objects. */
  sum?: InputMaybe<IndexerStakeSummarySumAggregateFilter>;
  /** Population variance aggregate over matching `IndexerStakeSummary` objects. */
  variancePopulation?: InputMaybe<IndexerStakeSummaryVariancePopulationAggregateFilter>;
  /** Sample variance aggregate over matching `IndexerStakeSummary` objects. */
  varianceSample?: InputMaybe<IndexerStakeSummaryVarianceSampleAggregateFilter>;
};

export type IndexerStakeSummaryAverageAggregateFilter = {
  delegatorStake?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigFloatFilter>;
  indexerStake?: InputMaybe<BigFloatFilter>;
  nextDelegatorStake?: InputMaybe<BigFloatFilter>;
  nextIndexerStake?: InputMaybe<BigFloatFilter>;
  nextTotalStake?: InputMaybe<BigFloatFilter>;
  totalStake?: InputMaybe<BigFloatFilter>;
};

export type IndexerStakeSummaryAverageAggregates = {
  __typename?: 'IndexerStakeSummaryAverageAggregates';
  /** Mean average of delegatorStake across the matching connection */
  delegatorStake?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of indexerStake across the matching connection */
  indexerStake?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of nextDelegatorStake across the matching connection */
  nextDelegatorStake?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of nextIndexerStake across the matching connection */
  nextIndexerStake?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of nextTotalStake across the matching connection */
  nextTotalStake?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of totalStake across the matching connection */
  totalStake?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerStakeSummaryDistinctCountAggregateFilter = {
  _blockRange?: InputMaybe<BigIntFilter>;
  _id?: InputMaybe<BigIntFilter>;
  delegatorStake?: InputMaybe<BigIntFilter>;
  eraId?: InputMaybe<BigIntFilter>;
  eraIdx?: InputMaybe<BigIntFilter>;
  id?: InputMaybe<BigIntFilter>;
  indexerStake?: InputMaybe<BigIntFilter>;
  nextDelegatorStake?: InputMaybe<BigIntFilter>;
  nextIndexerStake?: InputMaybe<BigIntFilter>;
  nextTotalStake?: InputMaybe<BigIntFilter>;
  totalStake?: InputMaybe<BigIntFilter>;
};

export type IndexerStakeSummaryDistinctCountAggregates = {
  __typename?: 'IndexerStakeSummaryDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  _blockRange?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  _id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of delegatorStake across the matching connection */
  delegatorStake?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of eraId across the matching connection */
  eraId?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of indexerStake across the matching connection */
  indexerStake?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of nextDelegatorStake across the matching connection */
  nextDelegatorStake?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of nextIndexerStake across the matching connection */
  nextIndexerStake?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of nextTotalStake across the matching connection */
  nextTotalStake?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of totalStake across the matching connection */
  totalStake?: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `IndexerStakeSummary` object types. All fields are combined with a logical ‘and.’ */
export type IndexerStakeSummaryFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<IndexerStakeSummaryFilter>>;
  /** Filter by the object’s `delegatorStake` field. */
  delegatorStake?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `era` relation. */
  era?: InputMaybe<EraFilter>;
  /** Filter by the object’s `eraId` field. */
  eraId?: InputMaybe<StringFilter>;
  /** Filter by the object’s `eraIdx` field. */
  eraIdx?: InputMaybe<IntFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<StringFilter>;
  /** Filter by the object’s `indexerStake` field. */
  indexerStake?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `nextDelegatorStake` field. */
  nextDelegatorStake?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `nextIndexerStake` field. */
  nextIndexerStake?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `nextTotalStake` field. */
  nextTotalStake?: InputMaybe<BigFloatFilter>;
  /** Negates the expression. */
  not?: InputMaybe<IndexerStakeSummaryFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<IndexerStakeSummaryFilter>>;
  /** Filter by the object’s `totalStake` field. */
  totalStake?: InputMaybe<BigFloatFilter>;
};

export type IndexerStakeSummaryMaxAggregateFilter = {
  delegatorStake?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<IntFilter>;
  indexerStake?: InputMaybe<BigFloatFilter>;
  nextDelegatorStake?: InputMaybe<BigFloatFilter>;
  nextIndexerStake?: InputMaybe<BigFloatFilter>;
  nextTotalStake?: InputMaybe<BigFloatFilter>;
  totalStake?: InputMaybe<BigFloatFilter>;
};

export type IndexerStakeSummaryMaxAggregates = {
  __typename?: 'IndexerStakeSummaryMaxAggregates';
  /** Maximum of delegatorStake across the matching connection */
  delegatorStake?: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['Int']['output']>;
  /** Maximum of indexerStake across the matching connection */
  indexerStake?: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of nextDelegatorStake across the matching connection */
  nextDelegatorStake?: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of nextIndexerStake across the matching connection */
  nextIndexerStake?: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of nextTotalStake across the matching connection */
  nextTotalStake?: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of totalStake across the matching connection */
  totalStake?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerStakeSummaryMinAggregateFilter = {
  delegatorStake?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<IntFilter>;
  indexerStake?: InputMaybe<BigFloatFilter>;
  nextDelegatorStake?: InputMaybe<BigFloatFilter>;
  nextIndexerStake?: InputMaybe<BigFloatFilter>;
  nextTotalStake?: InputMaybe<BigFloatFilter>;
  totalStake?: InputMaybe<BigFloatFilter>;
};

export type IndexerStakeSummaryMinAggregates = {
  __typename?: 'IndexerStakeSummaryMinAggregates';
  /** Minimum of delegatorStake across the matching connection */
  delegatorStake?: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['Int']['output']>;
  /** Minimum of indexerStake across the matching connection */
  indexerStake?: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of nextDelegatorStake across the matching connection */
  nextDelegatorStake?: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of nextIndexerStake across the matching connection */
  nextIndexerStake?: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of nextTotalStake across the matching connection */
  nextTotalStake?: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of totalStake across the matching connection */
  totalStake?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerStakeSummaryStddevPopulationAggregateFilter = {
  delegatorStake?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigFloatFilter>;
  indexerStake?: InputMaybe<BigFloatFilter>;
  nextDelegatorStake?: InputMaybe<BigFloatFilter>;
  nextIndexerStake?: InputMaybe<BigFloatFilter>;
  nextTotalStake?: InputMaybe<BigFloatFilter>;
  totalStake?: InputMaybe<BigFloatFilter>;
};

export type IndexerStakeSummaryStddevPopulationAggregates = {
  __typename?: 'IndexerStakeSummaryStddevPopulationAggregates';
  /** Population standard deviation of delegatorStake across the matching connection */
  delegatorStake?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of indexerStake across the matching connection */
  indexerStake?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of nextDelegatorStake across the matching connection */
  nextDelegatorStake?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of nextIndexerStake across the matching connection */
  nextIndexerStake?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of nextTotalStake across the matching connection */
  nextTotalStake?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of totalStake across the matching connection */
  totalStake?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerStakeSummaryStddevSampleAggregateFilter = {
  delegatorStake?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigFloatFilter>;
  indexerStake?: InputMaybe<BigFloatFilter>;
  nextDelegatorStake?: InputMaybe<BigFloatFilter>;
  nextIndexerStake?: InputMaybe<BigFloatFilter>;
  nextTotalStake?: InputMaybe<BigFloatFilter>;
  totalStake?: InputMaybe<BigFloatFilter>;
};

export type IndexerStakeSummaryStddevSampleAggregates = {
  __typename?: 'IndexerStakeSummaryStddevSampleAggregates';
  /** Sample standard deviation of delegatorStake across the matching connection */
  delegatorStake?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of indexerStake across the matching connection */
  indexerStake?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of nextDelegatorStake across the matching connection */
  nextDelegatorStake?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of nextIndexerStake across the matching connection */
  nextIndexerStake?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of nextTotalStake across the matching connection */
  nextTotalStake?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of totalStake across the matching connection */
  totalStake?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerStakeSummarySumAggregateFilter = {
  delegatorStake?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigIntFilter>;
  indexerStake?: InputMaybe<BigFloatFilter>;
  nextDelegatorStake?: InputMaybe<BigFloatFilter>;
  nextIndexerStake?: InputMaybe<BigFloatFilter>;
  nextTotalStake?: InputMaybe<BigFloatFilter>;
  totalStake?: InputMaybe<BigFloatFilter>;
};

export type IndexerStakeSummarySumAggregates = {
  __typename?: 'IndexerStakeSummarySumAggregates';
  /** Sum of delegatorStake across the matching connection */
  delegatorStake: Scalars['BigFloat']['output'];
  /** Sum of eraIdx across the matching connection */
  eraIdx: Scalars['BigInt']['output'];
  /** Sum of indexerStake across the matching connection */
  indexerStake: Scalars['BigFloat']['output'];
  /** Sum of nextDelegatorStake across the matching connection */
  nextDelegatorStake: Scalars['BigFloat']['output'];
  /** Sum of nextIndexerStake across the matching connection */
  nextIndexerStake: Scalars['BigFloat']['output'];
  /** Sum of nextTotalStake across the matching connection */
  nextTotalStake: Scalars['BigFloat']['output'];
  /** Sum of totalStake across the matching connection */
  totalStake: Scalars['BigFloat']['output'];
};

export type IndexerStakeSummaryVariancePopulationAggregateFilter = {
  delegatorStake?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigFloatFilter>;
  indexerStake?: InputMaybe<BigFloatFilter>;
  nextDelegatorStake?: InputMaybe<BigFloatFilter>;
  nextIndexerStake?: InputMaybe<BigFloatFilter>;
  nextTotalStake?: InputMaybe<BigFloatFilter>;
  totalStake?: InputMaybe<BigFloatFilter>;
};

export type IndexerStakeSummaryVariancePopulationAggregates = {
  __typename?: 'IndexerStakeSummaryVariancePopulationAggregates';
  /** Population variance of delegatorStake across the matching connection */
  delegatorStake?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of indexerStake across the matching connection */
  indexerStake?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of nextDelegatorStake across the matching connection */
  nextDelegatorStake?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of nextIndexerStake across the matching connection */
  nextIndexerStake?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of nextTotalStake across the matching connection */
  nextTotalStake?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of totalStake across the matching connection */
  totalStake?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerStakeSummaryVarianceSampleAggregateFilter = {
  delegatorStake?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigFloatFilter>;
  indexerStake?: InputMaybe<BigFloatFilter>;
  nextDelegatorStake?: InputMaybe<BigFloatFilter>;
  nextIndexerStake?: InputMaybe<BigFloatFilter>;
  nextTotalStake?: InputMaybe<BigFloatFilter>;
  totalStake?: InputMaybe<BigFloatFilter>;
};

export type IndexerStakeSummaryVarianceSampleAggregates = {
  __typename?: 'IndexerStakeSummaryVarianceSampleAggregates';
  /** Sample variance of delegatorStake across the matching connection */
  delegatorStake?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of indexerStake across the matching connection */
  indexerStake?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of nextDelegatorStake across the matching connection */
  nextDelegatorStake?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of nextIndexerStake across the matching connection */
  nextIndexerStake?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of nextTotalStake across the matching connection */
  nextTotalStake?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of totalStake across the matching connection */
  totalStake?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerStakeVariancePopulationAggregateFilter = {
  delegatorStake?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigFloatFilter>;
  indexerStake?: InputMaybe<BigFloatFilter>;
  totalStake?: InputMaybe<BigFloatFilter>;
};

export type IndexerStakeVariancePopulationAggregates = {
  __typename?: 'IndexerStakeVariancePopulationAggregates';
  /** Population variance of delegatorStake across the matching connection */
  delegatorStake?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of indexerStake across the matching connection */
  indexerStake?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of totalStake across the matching connection */
  totalStake?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerStakeVarianceSampleAggregateFilter = {
  delegatorStake?: InputMaybe<BigFloatFilter>;
  eraIdx?: InputMaybe<BigFloatFilter>;
  indexerStake?: InputMaybe<BigFloatFilter>;
  totalStake?: InputMaybe<BigFloatFilter>;
};

export type IndexerStakeVarianceSampleAggregates = {
  __typename?: 'IndexerStakeVarianceSampleAggregates';
  /** Sample variance of delegatorStake across the matching connection */
  delegatorStake?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of indexerStake across the matching connection */
  indexerStake?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of totalStake across the matching connection */
  totalStake?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerStakeWeight = Node & {
  __typename?: 'IndexerStakeWeight';
  createAt: Scalars['Datetime']['output'];
  eraIdx: Scalars['Int']['output'];
  id: Scalars['String']['output'];
  /** Reads a single `Indexer` that is related to this `IndexerStakeWeight`. */
  indexer?: Maybe<Indexer>;
  indexerId: Scalars['String']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  updateAt: Scalars['Datetime']['output'];
  weight: Scalars['BigFloat']['output'];
};

export type IndexerStakeWeightAggregates = {
  __typename?: 'IndexerStakeWeightAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  average?: Maybe<IndexerStakeWeightAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  distinctCount?: Maybe<IndexerStakeWeightDistinctCountAggregates>;
  keys?: Maybe<Array<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  max?: Maybe<IndexerStakeWeightMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  min?: Maybe<IndexerStakeWeightMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevPopulation?: Maybe<IndexerStakeWeightStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevSample?: Maybe<IndexerStakeWeightStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  sum?: Maybe<IndexerStakeWeightSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  variancePopulation?: Maybe<IndexerStakeWeightVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  varianceSample?: Maybe<IndexerStakeWeightVarianceSampleAggregates>;
};

/** A filter to be used against aggregates of `IndexerStakeWeight` object types. */
export type IndexerStakeWeightAggregatesFilter = {
  /** Mean average aggregate over matching `IndexerStakeWeight` objects. */
  average?: InputMaybe<IndexerStakeWeightAverageAggregateFilter>;
  /** Distinct count aggregate over matching `IndexerStakeWeight` objects. */
  distinctCount?: InputMaybe<IndexerStakeWeightDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `IndexerStakeWeight` object to be included within the aggregate. */
  filter?: InputMaybe<IndexerStakeWeightFilter>;
  /** Maximum aggregate over matching `IndexerStakeWeight` objects. */
  max?: InputMaybe<IndexerStakeWeightMaxAggregateFilter>;
  /** Minimum aggregate over matching `IndexerStakeWeight` objects. */
  min?: InputMaybe<IndexerStakeWeightMinAggregateFilter>;
  /** Population standard deviation aggregate over matching `IndexerStakeWeight` objects. */
  stddevPopulation?: InputMaybe<IndexerStakeWeightStddevPopulationAggregateFilter>;
  /** Sample standard deviation aggregate over matching `IndexerStakeWeight` objects. */
  stddevSample?: InputMaybe<IndexerStakeWeightStddevSampleAggregateFilter>;
  /** Sum aggregate over matching `IndexerStakeWeight` objects. */
  sum?: InputMaybe<IndexerStakeWeightSumAggregateFilter>;
  /** Population variance aggregate over matching `IndexerStakeWeight` objects. */
  variancePopulation?: InputMaybe<IndexerStakeWeightVariancePopulationAggregateFilter>;
  /** Sample variance aggregate over matching `IndexerStakeWeight` objects. */
  varianceSample?: InputMaybe<IndexerStakeWeightVarianceSampleAggregateFilter>;
};

export type IndexerStakeWeightAverageAggregateFilter = {
  eraIdx?: InputMaybe<BigFloatFilter>;
  weight?: InputMaybe<BigFloatFilter>;
};

export type IndexerStakeWeightAverageAggregates = {
  __typename?: 'IndexerStakeWeightAverageAggregates';
  /** Mean average of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of weight across the matching connection */
  weight?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerStakeWeightDistinctCountAggregateFilter = {
  _blockRange?: InputMaybe<BigIntFilter>;
  _id?: InputMaybe<BigIntFilter>;
  createAt?: InputMaybe<BigIntFilter>;
  eraIdx?: InputMaybe<BigIntFilter>;
  id?: InputMaybe<BigIntFilter>;
  indexerId?: InputMaybe<BigIntFilter>;
  updateAt?: InputMaybe<BigIntFilter>;
  weight?: InputMaybe<BigIntFilter>;
};

export type IndexerStakeWeightDistinctCountAggregates = {
  __typename?: 'IndexerStakeWeightDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  _blockRange?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  _id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createAt across the matching connection */
  createAt?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of indexerId across the matching connection */
  indexerId?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of updateAt across the matching connection */
  updateAt?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of weight across the matching connection */
  weight?: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `IndexerStakeWeight` object types. All fields are combined with a logical ‘and.’ */
export type IndexerStakeWeightFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<IndexerStakeWeightFilter>>;
  /** Filter by the object’s `createAt` field. */
  createAt?: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `eraIdx` field. */
  eraIdx?: InputMaybe<IntFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<StringFilter>;
  /** Filter by the object’s `indexer` relation. */
  indexer?: InputMaybe<IndexerFilter>;
  /** Filter by the object’s `indexerId` field. */
  indexerId?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<IndexerStakeWeightFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<IndexerStakeWeightFilter>>;
  /** Filter by the object’s `updateAt` field. */
  updateAt?: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `weight` field. */
  weight?: InputMaybe<BigFloatFilter>;
};

export type IndexerStakeWeightMaxAggregateFilter = {
  eraIdx?: InputMaybe<IntFilter>;
  weight?: InputMaybe<BigFloatFilter>;
};

export type IndexerStakeWeightMaxAggregates = {
  __typename?: 'IndexerStakeWeightMaxAggregates';
  /** Maximum of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['Int']['output']>;
  /** Maximum of weight across the matching connection */
  weight?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerStakeWeightMinAggregateFilter = {
  eraIdx?: InputMaybe<IntFilter>;
  weight?: InputMaybe<BigFloatFilter>;
};

export type IndexerStakeWeightMinAggregates = {
  __typename?: 'IndexerStakeWeightMinAggregates';
  /** Minimum of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['Int']['output']>;
  /** Minimum of weight across the matching connection */
  weight?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerStakeWeightStddevPopulationAggregateFilter = {
  eraIdx?: InputMaybe<BigFloatFilter>;
  weight?: InputMaybe<BigFloatFilter>;
};

export type IndexerStakeWeightStddevPopulationAggregates = {
  __typename?: 'IndexerStakeWeightStddevPopulationAggregates';
  /** Population standard deviation of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of weight across the matching connection */
  weight?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerStakeWeightStddevSampleAggregateFilter = {
  eraIdx?: InputMaybe<BigFloatFilter>;
  weight?: InputMaybe<BigFloatFilter>;
};

export type IndexerStakeWeightStddevSampleAggregates = {
  __typename?: 'IndexerStakeWeightStddevSampleAggregates';
  /** Sample standard deviation of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of weight across the matching connection */
  weight?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerStakeWeightSumAggregateFilter = {
  eraIdx?: InputMaybe<BigIntFilter>;
  weight?: InputMaybe<BigFloatFilter>;
};

export type IndexerStakeWeightSumAggregates = {
  __typename?: 'IndexerStakeWeightSumAggregates';
  /** Sum of eraIdx across the matching connection */
  eraIdx: Scalars['BigInt']['output'];
  /** Sum of weight across the matching connection */
  weight: Scalars['BigFloat']['output'];
};

export type IndexerStakeWeightVariancePopulationAggregateFilter = {
  eraIdx?: InputMaybe<BigFloatFilter>;
  weight?: InputMaybe<BigFloatFilter>;
};

export type IndexerStakeWeightVariancePopulationAggregates = {
  __typename?: 'IndexerStakeWeightVariancePopulationAggregates';
  /** Population variance of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of weight across the matching connection */
  weight?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerStakeWeightVarianceSampleAggregateFilter = {
  eraIdx?: InputMaybe<BigFloatFilter>;
  weight?: InputMaybe<BigFloatFilter>;
};

export type IndexerStakeWeightVarianceSampleAggregates = {
  __typename?: 'IndexerStakeWeightVarianceSampleAggregates';
  /** Sample variance of eraIdx across the matching connection */
  eraIdx?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of weight across the matching connection */
  weight?: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `IndexerStakeWeight` values. */
export type IndexerStakeWeightsConnection = {
  __typename?: 'IndexerStakeWeightsConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<IndexerStakeWeightAggregates>;
  /** A list of edges which contains the `IndexerStakeWeight` and cursor to aid in pagination. */
  edges: Array<IndexerStakeWeightsEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<IndexerStakeWeightAggregates>>;
  /** A list of `IndexerStakeWeight` objects. */
  nodes: Array<Maybe<IndexerStakeWeight>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `IndexerStakeWeight` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `IndexerStakeWeight` values. */
export type IndexerStakeWeightsConnectionGroupedAggregatesArgs = {
  groupBy: Array<IndexerStakeWeightsGroupBy>;
  having?: InputMaybe<IndexerStakeWeightsHavingInput>;
};

/** A `IndexerStakeWeight` edge in the connection. */
export type IndexerStakeWeightsEdge = {
  __typename?: 'IndexerStakeWeightsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `IndexerStakeWeight` at the end of the edge. */
  node?: Maybe<IndexerStakeWeight>;
};

/** Grouping methods for `IndexerStakeWeight` for usage during aggregation. */
export enum IndexerStakeWeightsGroupBy {
  CreateAt = 'CREATE_AT',
  CreateAtTruncatedToDay = 'CREATE_AT_TRUNCATED_TO_DAY',
  CreateAtTruncatedToHour = 'CREATE_AT_TRUNCATED_TO_HOUR',
  EraIdx = 'ERA_IDX',
  Id = 'ID',
  IndexerId = 'INDEXER_ID',
  UpdateAt = 'UPDATE_AT',
  UpdateAtTruncatedToDay = 'UPDATE_AT_TRUNCATED_TO_DAY',
  UpdateAtTruncatedToHour = 'UPDATE_AT_TRUNCATED_TO_HOUR',
  Weight = 'WEIGHT'
}

export type IndexerStakeWeightsHavingAverageInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
  weight?: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerStakeWeightsHavingDistinctCountInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
  weight?: InputMaybe<HavingBigfloatFilter>;
};

/** Conditions for `IndexerStakeWeight` aggregates. */
export type IndexerStakeWeightsHavingInput = {
  AND?: InputMaybe<Array<IndexerStakeWeightsHavingInput>>;
  OR?: InputMaybe<Array<IndexerStakeWeightsHavingInput>>;
  average?: InputMaybe<IndexerStakeWeightsHavingAverageInput>;
  distinctCount?: InputMaybe<IndexerStakeWeightsHavingDistinctCountInput>;
  max?: InputMaybe<IndexerStakeWeightsHavingMaxInput>;
  min?: InputMaybe<IndexerStakeWeightsHavingMinInput>;
  stddevPopulation?: InputMaybe<IndexerStakeWeightsHavingStddevPopulationInput>;
  stddevSample?: InputMaybe<IndexerStakeWeightsHavingStddevSampleInput>;
  sum?: InputMaybe<IndexerStakeWeightsHavingSumInput>;
  variancePopulation?: InputMaybe<IndexerStakeWeightsHavingVariancePopulationInput>;
  varianceSample?: InputMaybe<IndexerStakeWeightsHavingVarianceSampleInput>;
};

export type IndexerStakeWeightsHavingMaxInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
  weight?: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerStakeWeightsHavingMinInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
  weight?: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerStakeWeightsHavingStddevPopulationInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
  weight?: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerStakeWeightsHavingStddevSampleInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
  weight?: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerStakeWeightsHavingSumInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
  weight?: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerStakeWeightsHavingVariancePopulationInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
  weight?: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerStakeWeightsHavingVarianceSampleInput = {
  createAt?: InputMaybe<HavingDatetimeFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
  weight?: InputMaybe<HavingBigfloatFilter>;
};

/** Methods to use when ordering `IndexerStakeWeight`. */
export enum IndexerStakeWeightsOrderBy {
  CreateAtAsc = 'CREATE_AT_ASC',
  CreateAtDesc = 'CREATE_AT_DESC',
  EraIdxAsc = 'ERA_IDX_ASC',
  EraIdxDesc = 'ERA_IDX_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  IndexerByIndexerIdActiveAsc = 'INDEXER_BY_INDEXER_ID__ACTIVE_ASC',
  IndexerByIndexerIdActiveDesc = 'INDEXER_BY_INDEXER_ID__ACTIVE_DESC',
  IndexerByIndexerIdCapacityAsc = 'INDEXER_BY_INDEXER_ID__CAPACITY_ASC',
  IndexerByIndexerIdCapacityDesc = 'INDEXER_BY_INDEXER_ID__CAPACITY_DESC',
  IndexerByIndexerIdCommissionAsc = 'INDEXER_BY_INDEXER_ID__COMMISSION_ASC',
  IndexerByIndexerIdCommissionDesc = 'INDEXER_BY_INDEXER_ID__COMMISSION_DESC',
  IndexerByIndexerIdControllerAsc = 'INDEXER_BY_INDEXER_ID__CONTROLLER_ASC',
  IndexerByIndexerIdControllerDesc = 'INDEXER_BY_INDEXER_ID__CONTROLLER_DESC',
  IndexerByIndexerIdCreatedBlockAsc = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_ASC',
  IndexerByIndexerIdCreatedBlockDesc = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_DESC',
  IndexerByIndexerIdIdAsc = 'INDEXER_BY_INDEXER_ID__ID_ASC',
  IndexerByIndexerIdIdDesc = 'INDEXER_BY_INDEXER_ID__ID_DESC',
  IndexerByIndexerIdLastClaimEraAsc = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_ASC',
  IndexerByIndexerIdLastClaimEraDesc = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_DESC',
  IndexerByIndexerIdLastEventAsc = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_ASC',
  IndexerByIndexerIdLastEventDesc = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_DESC',
  IndexerByIndexerIdLastSettledEraAsc = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_ASC',
  IndexerByIndexerIdLastSettledEraDesc = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_DESC',
  IndexerByIndexerIdMaxUnstakeAmountAsc = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_ASC',
  IndexerByIndexerIdMaxUnstakeAmountDesc = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_DESC',
  IndexerByIndexerIdMetadataAsc = 'INDEXER_BY_INDEXER_ID__METADATA_ASC',
  IndexerByIndexerIdMetadataDesc = 'INDEXER_BY_INDEXER_ID__METADATA_DESC',
  IndexerByIndexerIdSelfStakeAsc = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_ASC',
  IndexerByIndexerIdSelfStakeDesc = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_DESC',
  IndexerByIndexerIdTotalStakeAsc = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_ASC',
  IndexerByIndexerIdTotalStakeDesc = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_DESC',
  IndexerIdAsc = 'INDEXER_ID_ASC',
  IndexerIdDesc = 'INDEXER_ID_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  UpdateAtAsc = 'UPDATE_AT_ASC',
  UpdateAtDesc = 'UPDATE_AT_DESC',
  WeightAsc = 'WEIGHT_ASC',
  WeightDesc = 'WEIGHT_DESC'
}

/** A connection to a list of `IndexerStake` values. */
export type IndexerStakesConnection = {
  __typename?: 'IndexerStakesConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<IndexerStakeAggregates>;
  /** A list of edges which contains the `IndexerStake` and cursor to aid in pagination. */
  edges: Array<IndexerStakesEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<IndexerStakeAggregates>>;
  /** A list of `IndexerStake` objects. */
  nodes: Array<Maybe<IndexerStake>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `IndexerStake` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `IndexerStake` values. */
export type IndexerStakesConnectionGroupedAggregatesArgs = {
  groupBy: Array<IndexerStakesGroupBy>;
  having?: InputMaybe<IndexerStakesHavingInput>;
};

/** A `IndexerStake` edge in the connection. */
export type IndexerStakesEdge = {
  __typename?: 'IndexerStakesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `IndexerStake` at the end of the edge. */
  node?: Maybe<IndexerStake>;
};

/** Grouping methods for `IndexerStake` for usage during aggregation. */
export enum IndexerStakesGroupBy {
  DelegatorStake = 'DELEGATOR_STAKE',
  EraId = 'ERA_ID',
  EraIdx = 'ERA_IDX',
  Id = 'ID',
  IndexerId = 'INDEXER_ID',
  IndexerStake = 'INDEXER_STAKE',
  TotalStake = 'TOTAL_STAKE'
}

export type IndexerStakesHavingAverageInput = {
  delegatorStake?: InputMaybe<HavingBigfloatFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  indexerStake?: InputMaybe<HavingBigfloatFilter>;
  totalStake?: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerStakesHavingDistinctCountInput = {
  delegatorStake?: InputMaybe<HavingBigfloatFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  indexerStake?: InputMaybe<HavingBigfloatFilter>;
  totalStake?: InputMaybe<HavingBigfloatFilter>;
};

/** Conditions for `IndexerStake` aggregates. */
export type IndexerStakesHavingInput = {
  AND?: InputMaybe<Array<IndexerStakesHavingInput>>;
  OR?: InputMaybe<Array<IndexerStakesHavingInput>>;
  average?: InputMaybe<IndexerStakesHavingAverageInput>;
  distinctCount?: InputMaybe<IndexerStakesHavingDistinctCountInput>;
  max?: InputMaybe<IndexerStakesHavingMaxInput>;
  min?: InputMaybe<IndexerStakesHavingMinInput>;
  stddevPopulation?: InputMaybe<IndexerStakesHavingStddevPopulationInput>;
  stddevSample?: InputMaybe<IndexerStakesHavingStddevSampleInput>;
  sum?: InputMaybe<IndexerStakesHavingSumInput>;
  variancePopulation?: InputMaybe<IndexerStakesHavingVariancePopulationInput>;
  varianceSample?: InputMaybe<IndexerStakesHavingVarianceSampleInput>;
};

export type IndexerStakesHavingMaxInput = {
  delegatorStake?: InputMaybe<HavingBigfloatFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  indexerStake?: InputMaybe<HavingBigfloatFilter>;
  totalStake?: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerStakesHavingMinInput = {
  delegatorStake?: InputMaybe<HavingBigfloatFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  indexerStake?: InputMaybe<HavingBigfloatFilter>;
  totalStake?: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerStakesHavingStddevPopulationInput = {
  delegatorStake?: InputMaybe<HavingBigfloatFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  indexerStake?: InputMaybe<HavingBigfloatFilter>;
  totalStake?: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerStakesHavingStddevSampleInput = {
  delegatorStake?: InputMaybe<HavingBigfloatFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  indexerStake?: InputMaybe<HavingBigfloatFilter>;
  totalStake?: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerStakesHavingSumInput = {
  delegatorStake?: InputMaybe<HavingBigfloatFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  indexerStake?: InputMaybe<HavingBigfloatFilter>;
  totalStake?: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerStakesHavingVariancePopulationInput = {
  delegatorStake?: InputMaybe<HavingBigfloatFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  indexerStake?: InputMaybe<HavingBigfloatFilter>;
  totalStake?: InputMaybe<HavingBigfloatFilter>;
};

export type IndexerStakesHavingVarianceSampleInput = {
  delegatorStake?: InputMaybe<HavingBigfloatFilter>;
  eraIdx?: InputMaybe<HavingIntFilter>;
  indexerStake?: InputMaybe<HavingBigfloatFilter>;
  totalStake?: InputMaybe<HavingBigfloatFilter>;
};

/** Methods to use when ordering `IndexerStake`. */
export enum IndexerStakesOrderBy {
  DelegatorStakeAsc = 'DELEGATOR_STAKE_ASC',
  DelegatorStakeDesc = 'DELEGATOR_STAKE_DESC',
  EraByEraIdCreatedBlockAsc = 'ERA_BY_ERA_ID__CREATED_BLOCK_ASC',
  EraByEraIdCreatedBlockDesc = 'ERA_BY_ERA_ID__CREATED_BLOCK_DESC',
  EraByEraIdEndTimeAsc = 'ERA_BY_ERA_ID__END_TIME_ASC',
  EraByEraIdEndTimeDesc = 'ERA_BY_ERA_ID__END_TIME_DESC',
  EraByEraIdEraPeriodAsc = 'ERA_BY_ERA_ID__ERA_PERIOD_ASC',
  EraByEraIdEraPeriodDesc = 'ERA_BY_ERA_ID__ERA_PERIOD_DESC',
  EraByEraIdForceNextAsc = 'ERA_BY_ERA_ID__FORCE_NEXT_ASC',
  EraByEraIdForceNextDesc = 'ERA_BY_ERA_ID__FORCE_NEXT_DESC',
  EraByEraIdIdAsc = 'ERA_BY_ERA_ID__ID_ASC',
  EraByEraIdIdDesc = 'ERA_BY_ERA_ID__ID_DESC',
  EraByEraIdLastEventAsc = 'ERA_BY_ERA_ID__LAST_EVENT_ASC',
  EraByEraIdLastEventDesc = 'ERA_BY_ERA_ID__LAST_EVENT_DESC',
  EraByEraIdStartTimeAsc = 'ERA_BY_ERA_ID__START_TIME_ASC',
  EraByEraIdStartTimeDesc = 'ERA_BY_ERA_ID__START_TIME_DESC',
  EraIdxAsc = 'ERA_IDX_ASC',
  EraIdxDesc = 'ERA_IDX_DESC',
  EraIdAsc = 'ERA_ID_ASC',
  EraIdDesc = 'ERA_ID_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  IndexerByIndexerIdActiveAsc = 'INDEXER_BY_INDEXER_ID__ACTIVE_ASC',
  IndexerByIndexerIdActiveDesc = 'INDEXER_BY_INDEXER_ID__ACTIVE_DESC',
  IndexerByIndexerIdCapacityAsc = 'INDEXER_BY_INDEXER_ID__CAPACITY_ASC',
  IndexerByIndexerIdCapacityDesc = 'INDEXER_BY_INDEXER_ID__CAPACITY_DESC',
  IndexerByIndexerIdCommissionAsc = 'INDEXER_BY_INDEXER_ID__COMMISSION_ASC',
  IndexerByIndexerIdCommissionDesc = 'INDEXER_BY_INDEXER_ID__COMMISSION_DESC',
  IndexerByIndexerIdControllerAsc = 'INDEXER_BY_INDEXER_ID__CONTROLLER_ASC',
  IndexerByIndexerIdControllerDesc = 'INDEXER_BY_INDEXER_ID__CONTROLLER_DESC',
  IndexerByIndexerIdCreatedBlockAsc = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_ASC',
  IndexerByIndexerIdCreatedBlockDesc = 'INDEXER_BY_INDEXER_ID__CREATED_BLOCK_DESC',
  IndexerByIndexerIdIdAsc = 'INDEXER_BY_INDEXER_ID__ID_ASC',
  IndexerByIndexerIdIdDesc = 'INDEXER_BY_INDEXER_ID__ID_DESC',
  IndexerByIndexerIdLastClaimEraAsc = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_ASC',
  IndexerByIndexerIdLastClaimEraDesc = 'INDEXER_BY_INDEXER_ID__LAST_CLAIM_ERA_DESC',
  IndexerByIndexerIdLastEventAsc = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_ASC',
  IndexerByIndexerIdLastEventDesc = 'INDEXER_BY_INDEXER_ID__LAST_EVENT_DESC',
  IndexerByIndexerIdLastSettledEraAsc = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_ASC',
  IndexerByIndexerIdLastSettledEraDesc = 'INDEXER_BY_INDEXER_ID__LAST_SETTLED_ERA_DESC',
  IndexerByIndexerIdMaxUnstakeAmountAsc = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_ASC',
  IndexerByIndexerIdMaxUnstakeAmountDesc = 'INDEXER_BY_INDEXER_ID__MAX_UNSTAKE_AMOUNT_DESC',
  IndexerByIndexerIdMetadataAsc = 'INDEXER_BY_INDEXER_ID__METADATA_ASC',
  IndexerByIndexerIdMetadataDesc = 'INDEXER_BY_INDEXER_ID__METADATA_DESC',
  IndexerByIndexerIdSelfStakeAsc = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_ASC',
  IndexerByIndexerIdSelfStakeDesc = 'INDEXER_BY_INDEXER_ID__SELF_STAKE_DESC',
  IndexerByIndexerIdTotalStakeAsc = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_ASC',
  IndexerByIndexerIdTotalStakeDesc = 'INDEXER_BY_INDEXER_ID__TOTAL_STAKE_DESC',
  IndexerIdAsc = 'INDEXER_ID_ASC',
  IndexerIdDesc = 'INDEXER_ID_DESC',
  IndexerStakeAsc = 'INDEXER_STAKE_ASC',
  IndexerStakeDesc = 'INDEXER_STAKE_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  TotalStakeAsc = 'TOTAL_STAKE_ASC',
  TotalStakeDesc = 'TOTAL_STAKE_DESC'
}

export type IndexerStddevPopulationAggregates = {
  __typename?: 'IndexerStddevPopulationAggregates';
  /** Population standard deviation of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerStddevSampleAggregates = {
  __typename?: 'IndexerStddevSampleAggregates';
  /** Sample standard deviation of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerSumAggregates = {
  __typename?: 'IndexerSumAggregates';
  /** Sum of createdBlock across the matching connection */
  createdBlock: Scalars['BigInt']['output'];
};

/** A filter to be used against many `AcceptedOffer` object types. All fields are combined with a logical ‘and.’ */
export type IndexerToManyAcceptedOfferFilter = {
  /** Aggregates across related `AcceptedOffer` match the filter criteria. */
  aggregates?: InputMaybe<AcceptedOfferAggregatesFilter>;
  /** Every related `AcceptedOffer` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<AcceptedOfferFilter>;
  /** No related `AcceptedOffer` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<AcceptedOfferFilter>;
  /** Some related `AcceptedOffer` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<AcceptedOfferFilter>;
};

/** A filter to be used against many `Controller` object types. All fields are combined with a logical ‘and.’ */
export type IndexerToManyControllerFilter = {
  /** Aggregates across related `Controller` match the filter criteria. */
  aggregates?: InputMaybe<ControllerAggregatesFilter>;
  /** Every related `Controller` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<ControllerFilter>;
  /** No related `Controller` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<ControllerFilter>;
  /** Some related `Controller` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<ControllerFilter>;
};

/** A filter to be used against many `Delegation` object types. All fields are combined with a logical ‘and.’ */
export type IndexerToManyDelegationFilter = {
  /** Aggregates across related `Delegation` match the filter criteria. */
  aggregates?: InputMaybe<DelegationAggregatesFilter>;
  /** Every related `Delegation` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<DelegationFilter>;
  /** No related `Delegation` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<DelegationFilter>;
  /** Some related `Delegation` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<DelegationFilter>;
};

/** A filter to be used against many `EraDelegatorIndexerApy` object types. All fields are combined with a logical ‘and.’ */
export type IndexerToManyEraDelegatorIndexerApyFilter = {
  /** Aggregates across related `EraDelegatorIndexerApy` match the filter criteria. */
  aggregates?: InputMaybe<EraDelegatorIndexerApyAggregatesFilter>;
  /** Every related `EraDelegatorIndexerApy` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<EraDelegatorIndexerApyFilter>;
  /** No related `EraDelegatorIndexerApy` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<EraDelegatorIndexerApyFilter>;
  /** Some related `EraDelegatorIndexerApy` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<EraDelegatorIndexerApyFilter>;
};

/** A filter to be used against many `EraIndexerApy` object types. All fields are combined with a logical ‘and.’ */
export type IndexerToManyEraIndexerApyFilter = {
  /** Aggregates across related `EraIndexerApy` match the filter criteria. */
  aggregates?: InputMaybe<EraIndexerApyAggregatesFilter>;
  /** Every related `EraIndexerApy` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<EraIndexerApyFilter>;
  /** No related `EraIndexerApy` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<EraIndexerApyFilter>;
  /** Some related `EraIndexerApy` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<EraIndexerApyFilter>;
};

/** A filter to be used against many `EraIndexerDeploymentApy` object types. All fields are combined with a logical ‘and.’ */
export type IndexerToManyEraIndexerDeploymentApyFilter = {
  /** Aggregates across related `EraIndexerDeploymentApy` match the filter criteria. */
  aggregates?: InputMaybe<EraIndexerDeploymentApyAggregatesFilter>;
  /** Every related `EraIndexerDeploymentApy` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<EraIndexerDeploymentApyFilter>;
  /** No related `EraIndexerDeploymentApy` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<EraIndexerDeploymentApyFilter>;
  /** Some related `EraIndexerDeploymentApy` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<EraIndexerDeploymentApyFilter>;
};

/** A filter to be used against many `EraReward` object types. All fields are combined with a logical ‘and.’ */
export type IndexerToManyEraRewardFilter = {
  /** Aggregates across related `EraReward` match the filter criteria. */
  aggregates?: InputMaybe<EraRewardAggregatesFilter>;
  /** Every related `EraReward` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<EraRewardFilter>;
  /** No related `EraReward` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<EraRewardFilter>;
  /** Some related `EraReward` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<EraRewardFilter>;
};

/** A filter to be used against many `EraStake` object types. All fields are combined with a logical ‘and.’ */
export type IndexerToManyEraStakeFilter = {
  /** Aggregates across related `EraStake` match the filter criteria. */
  aggregates?: InputMaybe<EraStakeAggregatesFilter>;
  /** Every related `EraStake` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<EraStakeFilter>;
  /** No related `EraStake` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<EraStakeFilter>;
  /** Some related `EraStake` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<EraStakeFilter>;
};

/** A filter to be used against many `IndexerAllocation` object types. All fields are combined with a logical ‘and.’ */
export type IndexerToManyIndexerAllocationFilter = {
  /** Aggregates across related `IndexerAllocation` match the filter criteria. */
  aggregates?: InputMaybe<IndexerAllocationAggregatesFilter>;
  /** Every related `IndexerAllocation` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<IndexerAllocationFilter>;
  /** No related `IndexerAllocation` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<IndexerAllocationFilter>;
  /** Some related `IndexerAllocation` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<IndexerAllocationFilter>;
};

/** A filter to be used against many `IndexerAllocationOverflow` object types. All fields are combined with a logical ‘and.’ */
export type IndexerToManyIndexerAllocationOverflowFilter = {
  /** Aggregates across related `IndexerAllocationOverflow` match the filter criteria. */
  aggregates?: InputMaybe<IndexerAllocationOverflowAggregatesFilter>;
  /** Every related `IndexerAllocationOverflow` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<IndexerAllocationOverflowFilter>;
  /** No related `IndexerAllocationOverflow` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<IndexerAllocationOverflowFilter>;
  /** Some related `IndexerAllocationOverflow` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<IndexerAllocationOverflowFilter>;
};

/** A filter to be used against many `IndexerAllocationReward` object types. All fields are combined with a logical ‘and.’ */
export type IndexerToManyIndexerAllocationRewardFilter = {
  /** Aggregates across related `IndexerAllocationReward` match the filter criteria. */
  aggregates?: InputMaybe<IndexerAllocationRewardAggregatesFilter>;
  /** Every related `IndexerAllocationReward` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<IndexerAllocationRewardFilter>;
  /** No related `IndexerAllocationReward` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<IndexerAllocationRewardFilter>;
  /** Some related `IndexerAllocationReward` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<IndexerAllocationRewardFilter>;
};

/** A filter to be used against many `IndexerAllocationRewardSummary` object types. All fields are combined with a logical ‘and.’ */
export type IndexerToManyIndexerAllocationRewardSummaryFilter = {
  /** Aggregates across related `IndexerAllocationRewardSummary` match the filter criteria. */
  aggregates?: InputMaybe<IndexerAllocationRewardSummaryAggregatesFilter>;
  /** Every related `IndexerAllocationRewardSummary` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<IndexerAllocationRewardSummaryFilter>;
  /** No related `IndexerAllocationRewardSummary` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<IndexerAllocationRewardSummaryFilter>;
  /** Some related `IndexerAllocationRewardSummary` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<IndexerAllocationRewardSummaryFilter>;
};

/** A filter to be used against many `IndexerAllocationSummary` object types. All fields are combined with a logical ‘and.’ */
export type IndexerToManyIndexerAllocationSummaryFilter = {
  /** Aggregates across related `IndexerAllocationSummary` match the filter criteria. */
  aggregates?: InputMaybe<IndexerAllocationSummaryAggregatesFilter>;
  /** Every related `IndexerAllocationSummary` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<IndexerAllocationSummaryFilter>;
  /** No related `IndexerAllocationSummary` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<IndexerAllocationSummaryFilter>;
  /** Some related `IndexerAllocationSummary` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<IndexerAllocationSummaryFilter>;
};

/** A filter to be used against many `IndexerApySummary` object types. All fields are combined with a logical ‘and.’ */
export type IndexerToManyIndexerApySummaryFilter = {
  /** Aggregates across related `IndexerApySummary` match the filter criteria. */
  aggregates?: InputMaybe<IndexerApySummaryAggregatesFilter>;
  /** Every related `IndexerApySummary` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<IndexerApySummaryFilter>;
  /** No related `IndexerApySummary` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<IndexerApySummaryFilter>;
  /** Some related `IndexerApySummary` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<IndexerApySummaryFilter>;
};

/** A filter to be used against many `IndexerCommissionRate` object types. All fields are combined with a logical ‘and.’ */
export type IndexerToManyIndexerCommissionRateFilter = {
  /** Aggregates across related `IndexerCommissionRate` match the filter criteria. */
  aggregates?: InputMaybe<IndexerCommissionRateAggregatesFilter>;
  /** Every related `IndexerCommissionRate` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<IndexerCommissionRateFilter>;
  /** No related `IndexerCommissionRate` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<IndexerCommissionRateFilter>;
  /** Some related `IndexerCommissionRate` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<IndexerCommissionRateFilter>;
};

/** A filter to be used against many `IndexerDeployment` object types. All fields are combined with a logical ‘and.’ */
export type IndexerToManyIndexerDeploymentFilter = {
  /** Aggregates across related `IndexerDeployment` match the filter criteria. */
  aggregates?: InputMaybe<IndexerDeploymentAggregatesFilter>;
  /** Every related `IndexerDeployment` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<IndexerDeploymentFilter>;
  /** No related `IndexerDeployment` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<IndexerDeploymentFilter>;
  /** Some related `IndexerDeployment` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<IndexerDeploymentFilter>;
};

/** A filter to be used against many `IndexerEraDeploymentReward` object types. All fields are combined with a logical ‘and.’ */
export type IndexerToManyIndexerEraDeploymentRewardFilter = {
  /** Aggregates across related `IndexerEraDeploymentReward` match the filter criteria. */
  aggregates?: InputMaybe<IndexerEraDeploymentRewardAggregatesFilter>;
  /** Every related `IndexerEraDeploymentReward` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<IndexerEraDeploymentRewardFilter>;
  /** No related `IndexerEraDeploymentReward` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<IndexerEraDeploymentRewardFilter>;
  /** Some related `IndexerEraDeploymentReward` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<IndexerEraDeploymentRewardFilter>;
};

/** A filter to be used against many `IndexerLaborHistory` object types. All fields are combined with a logical ‘and.’ */
export type IndexerToManyIndexerLaborHistoryFilter = {
  /** Aggregates across related `IndexerLaborHistory` match the filter criteria. */
  aggregates?: InputMaybe<IndexerLaborHistoryAggregatesFilter>;
  /** Every related `IndexerLaborHistory` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<IndexerLaborHistoryFilter>;
  /** No related `IndexerLaborHistory` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<IndexerLaborHistoryFilter>;
  /** Some related `IndexerLaborHistory` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<IndexerLaborHistoryFilter>;
};

/** A filter to be used against many `IndexerMissedLabor` object types. All fields are combined with a logical ‘and.’ */
export type IndexerToManyIndexerMissedLaborFilter = {
  /** Aggregates across related `IndexerMissedLabor` match the filter criteria. */
  aggregates?: InputMaybe<IndexerMissedLaborAggregatesFilter>;
  /** Every related `IndexerMissedLabor` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<IndexerMissedLaborFilter>;
  /** No related `IndexerMissedLabor` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<IndexerMissedLaborFilter>;
  /** Some related `IndexerMissedLabor` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<IndexerMissedLaborFilter>;
};

/** A filter to be used against many `IndexerReward` object types. All fields are combined with a logical ‘and.’ */
export type IndexerToManyIndexerRewardFilter = {
  /** Aggregates across related `IndexerReward` match the filter criteria. */
  aggregates?: InputMaybe<IndexerRewardAggregatesFilter>;
  /** Every related `IndexerReward` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<IndexerRewardFilter>;
  /** No related `IndexerReward` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<IndexerRewardFilter>;
  /** Some related `IndexerReward` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<IndexerRewardFilter>;
};

/** A filter to be used against many `IndexerStake` object types. All fields are combined with a logical ‘and.’ */
export type IndexerToManyIndexerStakeFilter = {
  /** Aggregates across related `IndexerStake` match the filter criteria. */
  aggregates?: InputMaybe<IndexerStakeAggregatesFilter>;
  /** Every related `IndexerStake` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<IndexerStakeFilter>;
  /** No related `IndexerStake` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<IndexerStakeFilter>;
  /** Some related `IndexerStake` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<IndexerStakeFilter>;
};

/** A filter to be used against many `IndexerStakeWeight` object types. All fields are combined with a logical ‘and.’ */
export type IndexerToManyIndexerStakeWeightFilter = {
  /** Aggregates across related `IndexerStakeWeight` match the filter criteria. */
  aggregates?: InputMaybe<IndexerStakeWeightAggregatesFilter>;
  /** Every related `IndexerStakeWeight` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<IndexerStakeWeightFilter>;
  /** No related `IndexerStakeWeight` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<IndexerStakeWeightFilter>;
  /** Some related `IndexerStakeWeight` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<IndexerStakeWeightFilter>;
};

export type IndexerVariancePopulationAggregates = {
  __typename?: 'IndexerVariancePopulationAggregates';
  /** Population variance of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
};

export type IndexerVarianceSampleAggregates = {
  __typename?: 'IndexerVarianceSampleAggregates';
  /** Sample variance of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `Indexer` values. */
export type IndexersConnection = {
  __typename?: 'IndexersConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<IndexerAggregates>;
  /** A list of edges which contains the `Indexer` and cursor to aid in pagination. */
  edges: Array<IndexersEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<IndexerAggregates>>;
  /** A list of `Indexer` objects. */
  nodes: Array<Maybe<Indexer>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Indexer` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Indexer` values. */
export type IndexersConnectionGroupedAggregatesArgs = {
  groupBy: Array<IndexersGroupBy>;
  having?: InputMaybe<IndexersHavingInput>;
};

/** A `Indexer` edge in the connection. */
export type IndexersEdge = {
  __typename?: 'IndexersEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `Indexer` at the end of the edge. */
  node?: Maybe<Indexer>;
};

/** Grouping methods for `Indexer` for usage during aggregation. */
export enum IndexersGroupBy {
  Active = 'ACTIVE',
  Capacity = 'CAPACITY',
  Commission = 'COMMISSION',
  Controller = 'CONTROLLER',
  CreatedBlock = 'CREATED_BLOCK',
  Id = 'ID',
  LastClaimEra = 'LAST_CLAIM_ERA',
  LastEvent = 'LAST_EVENT',
  LastSettledEra = 'LAST_SETTLED_ERA',
  MaxUnstakeAmount = 'MAX_UNSTAKE_AMOUNT',
  Metadata = 'METADATA',
  SelfStake = 'SELF_STAKE',
  TotalStake = 'TOTAL_STAKE'
}

export type IndexersHavingAverageInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
};

export type IndexersHavingDistinctCountInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
};

/** Conditions for `Indexer` aggregates. */
export type IndexersHavingInput = {
  AND?: InputMaybe<Array<IndexersHavingInput>>;
  OR?: InputMaybe<Array<IndexersHavingInput>>;
  average?: InputMaybe<IndexersHavingAverageInput>;
  distinctCount?: InputMaybe<IndexersHavingDistinctCountInput>;
  max?: InputMaybe<IndexersHavingMaxInput>;
  min?: InputMaybe<IndexersHavingMinInput>;
  stddevPopulation?: InputMaybe<IndexersHavingStddevPopulationInput>;
  stddevSample?: InputMaybe<IndexersHavingStddevSampleInput>;
  sum?: InputMaybe<IndexersHavingSumInput>;
  variancePopulation?: InputMaybe<IndexersHavingVariancePopulationInput>;
  varianceSample?: InputMaybe<IndexersHavingVarianceSampleInput>;
};

export type IndexersHavingMaxInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
};

export type IndexersHavingMinInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
};

export type IndexersHavingStddevPopulationInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
};

export type IndexersHavingStddevSampleInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
};

export type IndexersHavingSumInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
};

export type IndexersHavingVariancePopulationInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
};

export type IndexersHavingVarianceSampleInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
};

/** Methods to use when ordering `Indexer`. */
export enum IndexersOrderBy {
  AcceptedOffersAverageBlockRangeAsc = 'ACCEPTED_OFFERS_AVERAGE_BLOCK_RANGE_ASC',
  AcceptedOffersAverageBlockRangeDesc = 'ACCEPTED_OFFERS_AVERAGE_BLOCK_RANGE_DESC',
  AcceptedOffersAverageCreatedBlockAsc = 'ACCEPTED_OFFERS_AVERAGE_CREATED_BLOCK_ASC',
  AcceptedOffersAverageCreatedBlockDesc = 'ACCEPTED_OFFERS_AVERAGE_CREATED_BLOCK_DESC',
  AcceptedOffersAverageIdAsc = 'ACCEPTED_OFFERS_AVERAGE_ID_ASC',
  AcceptedOffersAverageIdDesc = 'ACCEPTED_OFFERS_AVERAGE_ID_DESC',
  AcceptedOffersAverageIndexerIdAsc = 'ACCEPTED_OFFERS_AVERAGE_INDEXER_ID_ASC',
  AcceptedOffersAverageIndexerIdDesc = 'ACCEPTED_OFFERS_AVERAGE_INDEXER_ID_DESC',
  AcceptedOffersAverageLastEventAsc = 'ACCEPTED_OFFERS_AVERAGE_LAST_EVENT_ASC',
  AcceptedOffersAverageLastEventDesc = 'ACCEPTED_OFFERS_AVERAGE_LAST_EVENT_DESC',
  AcceptedOffersAverageOfferIdAsc = 'ACCEPTED_OFFERS_AVERAGE_OFFER_ID_ASC',
  AcceptedOffersAverageOfferIdDesc = 'ACCEPTED_OFFERS_AVERAGE_OFFER_ID_DESC',
  AcceptedOffersAverageServiceAgreementIdAsc = 'ACCEPTED_OFFERS_AVERAGE_SERVICE_AGREEMENT_ID_ASC',
  AcceptedOffersAverageServiceAgreementIdDesc = 'ACCEPTED_OFFERS_AVERAGE_SERVICE_AGREEMENT_ID_DESC',
  AcceptedOffersByIndexerIdCountAsc = 'ACCEPTED_OFFERS_BY_INDEXER_ID__COUNT_ASC',
  AcceptedOffersByIndexerIdCountDesc = 'ACCEPTED_OFFERS_BY_INDEXER_ID__COUNT_DESC',
  AcceptedOffersCountAsc = 'ACCEPTED_OFFERS_COUNT_ASC',
  AcceptedOffersCountDesc = 'ACCEPTED_OFFERS_COUNT_DESC',
  AcceptedOffersDistinctCountBlockRangeAsc = 'ACCEPTED_OFFERS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  AcceptedOffersDistinctCountBlockRangeDesc = 'ACCEPTED_OFFERS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  AcceptedOffersDistinctCountCreatedBlockAsc = 'ACCEPTED_OFFERS_DISTINCT_COUNT_CREATED_BLOCK_ASC',
  AcceptedOffersDistinctCountCreatedBlockDesc = 'ACCEPTED_OFFERS_DISTINCT_COUNT_CREATED_BLOCK_DESC',
  AcceptedOffersDistinctCountIdAsc = 'ACCEPTED_OFFERS_DISTINCT_COUNT_ID_ASC',
  AcceptedOffersDistinctCountIdDesc = 'ACCEPTED_OFFERS_DISTINCT_COUNT_ID_DESC',
  AcceptedOffersDistinctCountIndexerIdAsc = 'ACCEPTED_OFFERS_DISTINCT_COUNT_INDEXER_ID_ASC',
  AcceptedOffersDistinctCountIndexerIdDesc = 'ACCEPTED_OFFERS_DISTINCT_COUNT_INDEXER_ID_DESC',
  AcceptedOffersDistinctCountLastEventAsc = 'ACCEPTED_OFFERS_DISTINCT_COUNT_LAST_EVENT_ASC',
  AcceptedOffersDistinctCountLastEventDesc = 'ACCEPTED_OFFERS_DISTINCT_COUNT_LAST_EVENT_DESC',
  AcceptedOffersDistinctCountOfferIdAsc = 'ACCEPTED_OFFERS_DISTINCT_COUNT_OFFER_ID_ASC',
  AcceptedOffersDistinctCountOfferIdDesc = 'ACCEPTED_OFFERS_DISTINCT_COUNT_OFFER_ID_DESC',
  AcceptedOffersDistinctCountServiceAgreementIdAsc = 'ACCEPTED_OFFERS_DISTINCT_COUNT_SERVICE_AGREEMENT_ID_ASC',
  AcceptedOffersDistinctCountServiceAgreementIdDesc = 'ACCEPTED_OFFERS_DISTINCT_COUNT_SERVICE_AGREEMENT_ID_DESC',
  AcceptedOffersMaxBlockRangeAsc = 'ACCEPTED_OFFERS_MAX_BLOCK_RANGE_ASC',
  AcceptedOffersMaxBlockRangeDesc = 'ACCEPTED_OFFERS_MAX_BLOCK_RANGE_DESC',
  AcceptedOffersMaxCreatedBlockAsc = 'ACCEPTED_OFFERS_MAX_CREATED_BLOCK_ASC',
  AcceptedOffersMaxCreatedBlockDesc = 'ACCEPTED_OFFERS_MAX_CREATED_BLOCK_DESC',
  AcceptedOffersMaxIdAsc = 'ACCEPTED_OFFERS_MAX_ID_ASC',
  AcceptedOffersMaxIdDesc = 'ACCEPTED_OFFERS_MAX_ID_DESC',
  AcceptedOffersMaxIndexerIdAsc = 'ACCEPTED_OFFERS_MAX_INDEXER_ID_ASC',
  AcceptedOffersMaxIndexerIdDesc = 'ACCEPTED_OFFERS_MAX_INDEXER_ID_DESC',
  AcceptedOffersMaxLastEventAsc = 'ACCEPTED_OFFERS_MAX_LAST_EVENT_ASC',
  AcceptedOffersMaxLastEventDesc = 'ACCEPTED_OFFERS_MAX_LAST_EVENT_DESC',
  AcceptedOffersMaxOfferIdAsc = 'ACCEPTED_OFFERS_MAX_OFFER_ID_ASC',
  AcceptedOffersMaxOfferIdDesc = 'ACCEPTED_OFFERS_MAX_OFFER_ID_DESC',
  AcceptedOffersMaxServiceAgreementIdAsc = 'ACCEPTED_OFFERS_MAX_SERVICE_AGREEMENT_ID_ASC',
  AcceptedOffersMaxServiceAgreementIdDesc = 'ACCEPTED_OFFERS_MAX_SERVICE_AGREEMENT_ID_DESC',
  AcceptedOffersMinBlockRangeAsc = 'ACCEPTED_OFFERS_MIN_BLOCK_RANGE_ASC',
  AcceptedOffersMinBlockRangeDesc = 'ACCEPTED_OFFERS_MIN_BLOCK_RANGE_DESC',
  AcceptedOffersMinCreatedBlockAsc = 'ACCEPTED_OFFERS_MIN_CREATED_BLOCK_ASC',
  AcceptedOffersMinCreatedBlockDesc = 'ACCEPTED_OFFERS_MIN_CREATED_BLOCK_DESC',
  AcceptedOffersMinIdAsc = 'ACCEPTED_OFFERS_MIN_ID_ASC',
  AcceptedOffersMinIdDesc = 'ACCEPTED_OFFERS_MIN_ID_DESC',
  AcceptedOffersMinIndexerIdAsc = 'ACCEPTED_OFFERS_MIN_INDEXER_ID_ASC',
  AcceptedOffersMinIndexerIdDesc = 'ACCEPTED_OFFERS_MIN_INDEXER_ID_DESC',
  AcceptedOffersMinLastEventAsc = 'ACCEPTED_OFFERS_MIN_LAST_EVENT_ASC',
  AcceptedOffersMinLastEventDesc = 'ACCEPTED_OFFERS_MIN_LAST_EVENT_DESC',
  AcceptedOffersMinOfferIdAsc = 'ACCEPTED_OFFERS_MIN_OFFER_ID_ASC',
  AcceptedOffersMinOfferIdDesc = 'ACCEPTED_OFFERS_MIN_OFFER_ID_DESC',
  AcceptedOffersMinServiceAgreementIdAsc = 'ACCEPTED_OFFERS_MIN_SERVICE_AGREEMENT_ID_ASC',
  AcceptedOffersMinServiceAgreementIdDesc = 'ACCEPTED_OFFERS_MIN_SERVICE_AGREEMENT_ID_DESC',
  AcceptedOffersStddevPopulationBlockRangeAsc = 'ACCEPTED_OFFERS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  AcceptedOffersStddevPopulationBlockRangeDesc = 'ACCEPTED_OFFERS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  AcceptedOffersStddevPopulationCreatedBlockAsc = 'ACCEPTED_OFFERS_STDDEV_POPULATION_CREATED_BLOCK_ASC',
  AcceptedOffersStddevPopulationCreatedBlockDesc = 'ACCEPTED_OFFERS_STDDEV_POPULATION_CREATED_BLOCK_DESC',
  AcceptedOffersStddevPopulationIdAsc = 'ACCEPTED_OFFERS_STDDEV_POPULATION_ID_ASC',
  AcceptedOffersStddevPopulationIdDesc = 'ACCEPTED_OFFERS_STDDEV_POPULATION_ID_DESC',
  AcceptedOffersStddevPopulationIndexerIdAsc = 'ACCEPTED_OFFERS_STDDEV_POPULATION_INDEXER_ID_ASC',
  AcceptedOffersStddevPopulationIndexerIdDesc = 'ACCEPTED_OFFERS_STDDEV_POPULATION_INDEXER_ID_DESC',
  AcceptedOffersStddevPopulationLastEventAsc = 'ACCEPTED_OFFERS_STDDEV_POPULATION_LAST_EVENT_ASC',
  AcceptedOffersStddevPopulationLastEventDesc = 'ACCEPTED_OFFERS_STDDEV_POPULATION_LAST_EVENT_DESC',
  AcceptedOffersStddevPopulationOfferIdAsc = 'ACCEPTED_OFFERS_STDDEV_POPULATION_OFFER_ID_ASC',
  AcceptedOffersStddevPopulationOfferIdDesc = 'ACCEPTED_OFFERS_STDDEV_POPULATION_OFFER_ID_DESC',
  AcceptedOffersStddevPopulationServiceAgreementIdAsc = 'ACCEPTED_OFFERS_STDDEV_POPULATION_SERVICE_AGREEMENT_ID_ASC',
  AcceptedOffersStddevPopulationServiceAgreementIdDesc = 'ACCEPTED_OFFERS_STDDEV_POPULATION_SERVICE_AGREEMENT_ID_DESC',
  AcceptedOffersStddevSampleBlockRangeAsc = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  AcceptedOffersStddevSampleBlockRangeDesc = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  AcceptedOffersStddevSampleCreatedBlockAsc = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_CREATED_BLOCK_ASC',
  AcceptedOffersStddevSampleCreatedBlockDesc = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_CREATED_BLOCK_DESC',
  AcceptedOffersStddevSampleIdAsc = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_ID_ASC',
  AcceptedOffersStddevSampleIdDesc = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_ID_DESC',
  AcceptedOffersStddevSampleIndexerIdAsc = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_INDEXER_ID_ASC',
  AcceptedOffersStddevSampleIndexerIdDesc = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_INDEXER_ID_DESC',
  AcceptedOffersStddevSampleLastEventAsc = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_LAST_EVENT_ASC',
  AcceptedOffersStddevSampleLastEventDesc = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_LAST_EVENT_DESC',
  AcceptedOffersStddevSampleOfferIdAsc = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_OFFER_ID_ASC',
  AcceptedOffersStddevSampleOfferIdDesc = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_OFFER_ID_DESC',
  AcceptedOffersStddevSampleServiceAgreementIdAsc = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_SERVICE_AGREEMENT_ID_ASC',
  AcceptedOffersStddevSampleServiceAgreementIdDesc = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_SERVICE_AGREEMENT_ID_DESC',
  AcceptedOffersSumBlockRangeAsc = 'ACCEPTED_OFFERS_SUM_BLOCK_RANGE_ASC',
  AcceptedOffersSumBlockRangeDesc = 'ACCEPTED_OFFERS_SUM_BLOCK_RANGE_DESC',
  AcceptedOffersSumCreatedBlockAsc = 'ACCEPTED_OFFERS_SUM_CREATED_BLOCK_ASC',
  AcceptedOffersSumCreatedBlockDesc = 'ACCEPTED_OFFERS_SUM_CREATED_BLOCK_DESC',
  AcceptedOffersSumIdAsc = 'ACCEPTED_OFFERS_SUM_ID_ASC',
  AcceptedOffersSumIdDesc = 'ACCEPTED_OFFERS_SUM_ID_DESC',
  AcceptedOffersSumIndexerIdAsc = 'ACCEPTED_OFFERS_SUM_INDEXER_ID_ASC',
  AcceptedOffersSumIndexerIdDesc = 'ACCEPTED_OFFERS_SUM_INDEXER_ID_DESC',
  AcceptedOffersSumLastEventAsc = 'ACCEPTED_OFFERS_SUM_LAST_EVENT_ASC',
  AcceptedOffersSumLastEventDesc = 'ACCEPTED_OFFERS_SUM_LAST_EVENT_DESC',
  AcceptedOffersSumOfferIdAsc = 'ACCEPTED_OFFERS_SUM_OFFER_ID_ASC',
  AcceptedOffersSumOfferIdDesc = 'ACCEPTED_OFFERS_SUM_OFFER_ID_DESC',
  AcceptedOffersSumServiceAgreementIdAsc = 'ACCEPTED_OFFERS_SUM_SERVICE_AGREEMENT_ID_ASC',
  AcceptedOffersSumServiceAgreementIdDesc = 'ACCEPTED_OFFERS_SUM_SERVICE_AGREEMENT_ID_DESC',
  AcceptedOffersVariancePopulationBlockRangeAsc = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  AcceptedOffersVariancePopulationBlockRangeDesc = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  AcceptedOffersVariancePopulationCreatedBlockAsc = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_CREATED_BLOCK_ASC',
  AcceptedOffersVariancePopulationCreatedBlockDesc = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_CREATED_BLOCK_DESC',
  AcceptedOffersVariancePopulationIdAsc = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_ID_ASC',
  AcceptedOffersVariancePopulationIdDesc = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_ID_DESC',
  AcceptedOffersVariancePopulationIndexerIdAsc = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_INDEXER_ID_ASC',
  AcceptedOffersVariancePopulationIndexerIdDesc = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_INDEXER_ID_DESC',
  AcceptedOffersVariancePopulationLastEventAsc = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_LAST_EVENT_ASC',
  AcceptedOffersVariancePopulationLastEventDesc = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_LAST_EVENT_DESC',
  AcceptedOffersVariancePopulationOfferIdAsc = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_OFFER_ID_ASC',
  AcceptedOffersVariancePopulationOfferIdDesc = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_OFFER_ID_DESC',
  AcceptedOffersVariancePopulationServiceAgreementIdAsc = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_SERVICE_AGREEMENT_ID_ASC',
  AcceptedOffersVariancePopulationServiceAgreementIdDesc = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_SERVICE_AGREEMENT_ID_DESC',
  AcceptedOffersVarianceSampleBlockRangeAsc = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  AcceptedOffersVarianceSampleBlockRangeDesc = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  AcceptedOffersVarianceSampleCreatedBlockAsc = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_CREATED_BLOCK_ASC',
  AcceptedOffersVarianceSampleCreatedBlockDesc = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_CREATED_BLOCK_DESC',
  AcceptedOffersVarianceSampleIdAsc = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_ID_ASC',
  AcceptedOffersVarianceSampleIdDesc = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_ID_DESC',
  AcceptedOffersVarianceSampleIndexerIdAsc = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  AcceptedOffersVarianceSampleIndexerIdDesc = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  AcceptedOffersVarianceSampleLastEventAsc = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_LAST_EVENT_ASC',
  AcceptedOffersVarianceSampleLastEventDesc = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_LAST_EVENT_DESC',
  AcceptedOffersVarianceSampleOfferIdAsc = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_OFFER_ID_ASC',
  AcceptedOffersVarianceSampleOfferIdDesc = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_OFFER_ID_DESC',
  AcceptedOffersVarianceSampleServiceAgreementIdAsc = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_SERVICE_AGREEMENT_ID_ASC',
  AcceptedOffersVarianceSampleServiceAgreementIdDesc = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_SERVICE_AGREEMENT_ID_DESC',
  ActiveAsc = 'ACTIVE_ASC',
  ActiveDesc = 'ACTIVE_DESC',
  CapacityAsc = 'CAPACITY_ASC',
  CapacityDesc = 'CAPACITY_DESC',
  CommissionAsc = 'COMMISSION_ASC',
  CommissionDesc = 'COMMISSION_DESC',
  ControllersAverageBlockRangeAsc = 'CONTROLLERS_AVERAGE_BLOCK_RANGE_ASC',
  ControllersAverageBlockRangeDesc = 'CONTROLLERS_AVERAGE_BLOCK_RANGE_DESC',
  ControllersAverageControllerAsc = 'CONTROLLERS_AVERAGE_CONTROLLER_ASC',
  ControllersAverageControllerDesc = 'CONTROLLERS_AVERAGE_CONTROLLER_DESC',
  ControllersAverageCreatedBlockAsc = 'CONTROLLERS_AVERAGE_CREATED_BLOCK_ASC',
  ControllersAverageCreatedBlockDesc = 'CONTROLLERS_AVERAGE_CREATED_BLOCK_DESC',
  ControllersAverageIdAsc = 'CONTROLLERS_AVERAGE_ID_ASC',
  ControllersAverageIdDesc = 'CONTROLLERS_AVERAGE_ID_DESC',
  ControllersAverageIndexerIdAsc = 'CONTROLLERS_AVERAGE_INDEXER_ID_ASC',
  ControllersAverageIndexerIdDesc = 'CONTROLLERS_AVERAGE_INDEXER_ID_DESC',
  ControllersAverageIsActiveAsc = 'CONTROLLERS_AVERAGE_IS_ACTIVE_ASC',
  ControllersAverageIsActiveDesc = 'CONTROLLERS_AVERAGE_IS_ACTIVE_DESC',
  ControllersAverageLastEventAsc = 'CONTROLLERS_AVERAGE_LAST_EVENT_ASC',
  ControllersAverageLastEventDesc = 'CONTROLLERS_AVERAGE_LAST_EVENT_DESC',
  ControllersByIndexerIdCountAsc = 'CONTROLLERS_BY_INDEXER_ID__COUNT_ASC',
  ControllersByIndexerIdCountDesc = 'CONTROLLERS_BY_INDEXER_ID__COUNT_DESC',
  ControllersCountAsc = 'CONTROLLERS_COUNT_ASC',
  ControllersCountDesc = 'CONTROLLERS_COUNT_DESC',
  ControllersDistinctCountBlockRangeAsc = 'CONTROLLERS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  ControllersDistinctCountBlockRangeDesc = 'CONTROLLERS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  ControllersDistinctCountControllerAsc = 'CONTROLLERS_DISTINCT_COUNT_CONTROLLER_ASC',
  ControllersDistinctCountControllerDesc = 'CONTROLLERS_DISTINCT_COUNT_CONTROLLER_DESC',
  ControllersDistinctCountCreatedBlockAsc = 'CONTROLLERS_DISTINCT_COUNT_CREATED_BLOCK_ASC',
  ControllersDistinctCountCreatedBlockDesc = 'CONTROLLERS_DISTINCT_COUNT_CREATED_BLOCK_DESC',
  ControllersDistinctCountIdAsc = 'CONTROLLERS_DISTINCT_COUNT_ID_ASC',
  ControllersDistinctCountIdDesc = 'CONTROLLERS_DISTINCT_COUNT_ID_DESC',
  ControllersDistinctCountIndexerIdAsc = 'CONTROLLERS_DISTINCT_COUNT_INDEXER_ID_ASC',
  ControllersDistinctCountIndexerIdDesc = 'CONTROLLERS_DISTINCT_COUNT_INDEXER_ID_DESC',
  ControllersDistinctCountIsActiveAsc = 'CONTROLLERS_DISTINCT_COUNT_IS_ACTIVE_ASC',
  ControllersDistinctCountIsActiveDesc = 'CONTROLLERS_DISTINCT_COUNT_IS_ACTIVE_DESC',
  ControllersDistinctCountLastEventAsc = 'CONTROLLERS_DISTINCT_COUNT_LAST_EVENT_ASC',
  ControllersDistinctCountLastEventDesc = 'CONTROLLERS_DISTINCT_COUNT_LAST_EVENT_DESC',
  ControllersMaxBlockRangeAsc = 'CONTROLLERS_MAX_BLOCK_RANGE_ASC',
  ControllersMaxBlockRangeDesc = 'CONTROLLERS_MAX_BLOCK_RANGE_DESC',
  ControllersMaxControllerAsc = 'CONTROLLERS_MAX_CONTROLLER_ASC',
  ControllersMaxControllerDesc = 'CONTROLLERS_MAX_CONTROLLER_DESC',
  ControllersMaxCreatedBlockAsc = 'CONTROLLERS_MAX_CREATED_BLOCK_ASC',
  ControllersMaxCreatedBlockDesc = 'CONTROLLERS_MAX_CREATED_BLOCK_DESC',
  ControllersMaxIdAsc = 'CONTROLLERS_MAX_ID_ASC',
  ControllersMaxIdDesc = 'CONTROLLERS_MAX_ID_DESC',
  ControllersMaxIndexerIdAsc = 'CONTROLLERS_MAX_INDEXER_ID_ASC',
  ControllersMaxIndexerIdDesc = 'CONTROLLERS_MAX_INDEXER_ID_DESC',
  ControllersMaxIsActiveAsc = 'CONTROLLERS_MAX_IS_ACTIVE_ASC',
  ControllersMaxIsActiveDesc = 'CONTROLLERS_MAX_IS_ACTIVE_DESC',
  ControllersMaxLastEventAsc = 'CONTROLLERS_MAX_LAST_EVENT_ASC',
  ControllersMaxLastEventDesc = 'CONTROLLERS_MAX_LAST_EVENT_DESC',
  ControllersMinBlockRangeAsc = 'CONTROLLERS_MIN_BLOCK_RANGE_ASC',
  ControllersMinBlockRangeDesc = 'CONTROLLERS_MIN_BLOCK_RANGE_DESC',
  ControllersMinControllerAsc = 'CONTROLLERS_MIN_CONTROLLER_ASC',
  ControllersMinControllerDesc = 'CONTROLLERS_MIN_CONTROLLER_DESC',
  ControllersMinCreatedBlockAsc = 'CONTROLLERS_MIN_CREATED_BLOCK_ASC',
  ControllersMinCreatedBlockDesc = 'CONTROLLERS_MIN_CREATED_BLOCK_DESC',
  ControllersMinIdAsc = 'CONTROLLERS_MIN_ID_ASC',
  ControllersMinIdDesc = 'CONTROLLERS_MIN_ID_DESC',
  ControllersMinIndexerIdAsc = 'CONTROLLERS_MIN_INDEXER_ID_ASC',
  ControllersMinIndexerIdDesc = 'CONTROLLERS_MIN_INDEXER_ID_DESC',
  ControllersMinIsActiveAsc = 'CONTROLLERS_MIN_IS_ACTIVE_ASC',
  ControllersMinIsActiveDesc = 'CONTROLLERS_MIN_IS_ACTIVE_DESC',
  ControllersMinLastEventAsc = 'CONTROLLERS_MIN_LAST_EVENT_ASC',
  ControllersMinLastEventDesc = 'CONTROLLERS_MIN_LAST_EVENT_DESC',
  ControllersStddevPopulationBlockRangeAsc = 'CONTROLLERS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  ControllersStddevPopulationBlockRangeDesc = 'CONTROLLERS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  ControllersStddevPopulationControllerAsc = 'CONTROLLERS_STDDEV_POPULATION_CONTROLLER_ASC',
  ControllersStddevPopulationControllerDesc = 'CONTROLLERS_STDDEV_POPULATION_CONTROLLER_DESC',
  ControllersStddevPopulationCreatedBlockAsc = 'CONTROLLERS_STDDEV_POPULATION_CREATED_BLOCK_ASC',
  ControllersStddevPopulationCreatedBlockDesc = 'CONTROLLERS_STDDEV_POPULATION_CREATED_BLOCK_DESC',
  ControllersStddevPopulationIdAsc = 'CONTROLLERS_STDDEV_POPULATION_ID_ASC',
  ControllersStddevPopulationIdDesc = 'CONTROLLERS_STDDEV_POPULATION_ID_DESC',
  ControllersStddevPopulationIndexerIdAsc = 'CONTROLLERS_STDDEV_POPULATION_INDEXER_ID_ASC',
  ControllersStddevPopulationIndexerIdDesc = 'CONTROLLERS_STDDEV_POPULATION_INDEXER_ID_DESC',
  ControllersStddevPopulationIsActiveAsc = 'CONTROLLERS_STDDEV_POPULATION_IS_ACTIVE_ASC',
  ControllersStddevPopulationIsActiveDesc = 'CONTROLLERS_STDDEV_POPULATION_IS_ACTIVE_DESC',
  ControllersStddevPopulationLastEventAsc = 'CONTROLLERS_STDDEV_POPULATION_LAST_EVENT_ASC',
  ControllersStddevPopulationLastEventDesc = 'CONTROLLERS_STDDEV_POPULATION_LAST_EVENT_DESC',
  ControllersStddevSampleBlockRangeAsc = 'CONTROLLERS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  ControllersStddevSampleBlockRangeDesc = 'CONTROLLERS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  ControllersStddevSampleControllerAsc = 'CONTROLLERS_STDDEV_SAMPLE_CONTROLLER_ASC',
  ControllersStddevSampleControllerDesc = 'CONTROLLERS_STDDEV_SAMPLE_CONTROLLER_DESC',
  ControllersStddevSampleCreatedBlockAsc = 'CONTROLLERS_STDDEV_SAMPLE_CREATED_BLOCK_ASC',
  ControllersStddevSampleCreatedBlockDesc = 'CONTROLLERS_STDDEV_SAMPLE_CREATED_BLOCK_DESC',
  ControllersStddevSampleIdAsc = 'CONTROLLERS_STDDEV_SAMPLE_ID_ASC',
  ControllersStddevSampleIdDesc = 'CONTROLLERS_STDDEV_SAMPLE_ID_DESC',
  ControllersStddevSampleIndexerIdAsc = 'CONTROLLERS_STDDEV_SAMPLE_INDEXER_ID_ASC',
  ControllersStddevSampleIndexerIdDesc = 'CONTROLLERS_STDDEV_SAMPLE_INDEXER_ID_DESC',
  ControllersStddevSampleIsActiveAsc = 'CONTROLLERS_STDDEV_SAMPLE_IS_ACTIVE_ASC',
  ControllersStddevSampleIsActiveDesc = 'CONTROLLERS_STDDEV_SAMPLE_IS_ACTIVE_DESC',
  ControllersStddevSampleLastEventAsc = 'CONTROLLERS_STDDEV_SAMPLE_LAST_EVENT_ASC',
  ControllersStddevSampleLastEventDesc = 'CONTROLLERS_STDDEV_SAMPLE_LAST_EVENT_DESC',
  ControllersSumBlockRangeAsc = 'CONTROLLERS_SUM_BLOCK_RANGE_ASC',
  ControllersSumBlockRangeDesc = 'CONTROLLERS_SUM_BLOCK_RANGE_DESC',
  ControllersSumControllerAsc = 'CONTROLLERS_SUM_CONTROLLER_ASC',
  ControllersSumControllerDesc = 'CONTROLLERS_SUM_CONTROLLER_DESC',
  ControllersSumCreatedBlockAsc = 'CONTROLLERS_SUM_CREATED_BLOCK_ASC',
  ControllersSumCreatedBlockDesc = 'CONTROLLERS_SUM_CREATED_BLOCK_DESC',
  ControllersSumIdAsc = 'CONTROLLERS_SUM_ID_ASC',
  ControllersSumIdDesc = 'CONTROLLERS_SUM_ID_DESC',
  ControllersSumIndexerIdAsc = 'CONTROLLERS_SUM_INDEXER_ID_ASC',
  ControllersSumIndexerIdDesc = 'CONTROLLERS_SUM_INDEXER_ID_DESC',
  ControllersSumIsActiveAsc = 'CONTROLLERS_SUM_IS_ACTIVE_ASC',
  ControllersSumIsActiveDesc = 'CONTROLLERS_SUM_IS_ACTIVE_DESC',
  ControllersSumLastEventAsc = 'CONTROLLERS_SUM_LAST_EVENT_ASC',
  ControllersSumLastEventDesc = 'CONTROLLERS_SUM_LAST_EVENT_DESC',
  ControllersVariancePopulationBlockRangeAsc = 'CONTROLLERS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  ControllersVariancePopulationBlockRangeDesc = 'CONTROLLERS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  ControllersVariancePopulationControllerAsc = 'CONTROLLERS_VARIANCE_POPULATION_CONTROLLER_ASC',
  ControllersVariancePopulationControllerDesc = 'CONTROLLERS_VARIANCE_POPULATION_CONTROLLER_DESC',
  ControllersVariancePopulationCreatedBlockAsc = 'CONTROLLERS_VARIANCE_POPULATION_CREATED_BLOCK_ASC',
  ControllersVariancePopulationCreatedBlockDesc = 'CONTROLLERS_VARIANCE_POPULATION_CREATED_BLOCK_DESC',
  ControllersVariancePopulationIdAsc = 'CONTROLLERS_VARIANCE_POPULATION_ID_ASC',
  ControllersVariancePopulationIdDesc = 'CONTROLLERS_VARIANCE_POPULATION_ID_DESC',
  ControllersVariancePopulationIndexerIdAsc = 'CONTROLLERS_VARIANCE_POPULATION_INDEXER_ID_ASC',
  ControllersVariancePopulationIndexerIdDesc = 'CONTROLLERS_VARIANCE_POPULATION_INDEXER_ID_DESC',
  ControllersVariancePopulationIsActiveAsc = 'CONTROLLERS_VARIANCE_POPULATION_IS_ACTIVE_ASC',
  ControllersVariancePopulationIsActiveDesc = 'CONTROLLERS_VARIANCE_POPULATION_IS_ACTIVE_DESC',
  ControllersVariancePopulationLastEventAsc = 'CONTROLLERS_VARIANCE_POPULATION_LAST_EVENT_ASC',
  ControllersVariancePopulationLastEventDesc = 'CONTROLLERS_VARIANCE_POPULATION_LAST_EVENT_DESC',
  ControllersVarianceSampleBlockRangeAsc = 'CONTROLLERS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  ControllersVarianceSampleBlockRangeDesc = 'CONTROLLERS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  ControllersVarianceSampleControllerAsc = 'CONTROLLERS_VARIANCE_SAMPLE_CONTROLLER_ASC',
  ControllersVarianceSampleControllerDesc = 'CONTROLLERS_VARIANCE_SAMPLE_CONTROLLER_DESC',
  ControllersVarianceSampleCreatedBlockAsc = 'CONTROLLERS_VARIANCE_SAMPLE_CREATED_BLOCK_ASC',
  ControllersVarianceSampleCreatedBlockDesc = 'CONTROLLERS_VARIANCE_SAMPLE_CREATED_BLOCK_DESC',
  ControllersVarianceSampleIdAsc = 'CONTROLLERS_VARIANCE_SAMPLE_ID_ASC',
  ControllersVarianceSampleIdDesc = 'CONTROLLERS_VARIANCE_SAMPLE_ID_DESC',
  ControllersVarianceSampleIndexerIdAsc = 'CONTROLLERS_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  ControllersVarianceSampleIndexerIdDesc = 'CONTROLLERS_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  ControllersVarianceSampleIsActiveAsc = 'CONTROLLERS_VARIANCE_SAMPLE_IS_ACTIVE_ASC',
  ControllersVarianceSampleIsActiveDesc = 'CONTROLLERS_VARIANCE_SAMPLE_IS_ACTIVE_DESC',
  ControllersVarianceSampleLastEventAsc = 'CONTROLLERS_VARIANCE_SAMPLE_LAST_EVENT_ASC',
  ControllersVarianceSampleLastEventDesc = 'CONTROLLERS_VARIANCE_SAMPLE_LAST_EVENT_DESC',
  ControllerAsc = 'CONTROLLER_ASC',
  ControllerDesc = 'CONTROLLER_DESC',
  CreatedBlockAsc = 'CREATED_BLOCK_ASC',
  CreatedBlockDesc = 'CREATED_BLOCK_DESC',
  DelegationsAverageAmountAsc = 'DELEGATIONS_AVERAGE_AMOUNT_ASC',
  DelegationsAverageAmountDesc = 'DELEGATIONS_AVERAGE_AMOUNT_DESC',
  DelegationsAverageBlockRangeAsc = 'DELEGATIONS_AVERAGE_BLOCK_RANGE_ASC',
  DelegationsAverageBlockRangeDesc = 'DELEGATIONS_AVERAGE_BLOCK_RANGE_DESC',
  DelegationsAverageCreatedBlockAsc = 'DELEGATIONS_AVERAGE_CREATED_BLOCK_ASC',
  DelegationsAverageCreatedBlockDesc = 'DELEGATIONS_AVERAGE_CREATED_BLOCK_DESC',
  DelegationsAverageDelegatorIdAsc = 'DELEGATIONS_AVERAGE_DELEGATOR_ID_ASC',
  DelegationsAverageDelegatorIdDesc = 'DELEGATIONS_AVERAGE_DELEGATOR_ID_DESC',
  DelegationsAverageExitEraAsc = 'DELEGATIONS_AVERAGE_EXIT_ERA_ASC',
  DelegationsAverageExitEraDesc = 'DELEGATIONS_AVERAGE_EXIT_ERA_DESC',
  DelegationsAverageIdAsc = 'DELEGATIONS_AVERAGE_ID_ASC',
  DelegationsAverageIdDesc = 'DELEGATIONS_AVERAGE_ID_DESC',
  DelegationsAverageIndexerIdAsc = 'DELEGATIONS_AVERAGE_INDEXER_ID_ASC',
  DelegationsAverageIndexerIdDesc = 'DELEGATIONS_AVERAGE_INDEXER_ID_DESC',
  DelegationsAverageLastEventAsc = 'DELEGATIONS_AVERAGE_LAST_EVENT_ASC',
  DelegationsAverageLastEventDesc = 'DELEGATIONS_AVERAGE_LAST_EVENT_DESC',
  DelegationsByIndexerIdCountAsc = 'DELEGATIONS_BY_INDEXER_ID__COUNT_ASC',
  DelegationsByIndexerIdCountDesc = 'DELEGATIONS_BY_INDEXER_ID__COUNT_DESC',
  DelegationsCountAsc = 'DELEGATIONS_COUNT_ASC',
  DelegationsCountDesc = 'DELEGATIONS_COUNT_DESC',
  DelegationsDistinctCountAmountAsc = 'DELEGATIONS_DISTINCT_COUNT_AMOUNT_ASC',
  DelegationsDistinctCountAmountDesc = 'DELEGATIONS_DISTINCT_COUNT_AMOUNT_DESC',
  DelegationsDistinctCountBlockRangeAsc = 'DELEGATIONS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  DelegationsDistinctCountBlockRangeDesc = 'DELEGATIONS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  DelegationsDistinctCountCreatedBlockAsc = 'DELEGATIONS_DISTINCT_COUNT_CREATED_BLOCK_ASC',
  DelegationsDistinctCountCreatedBlockDesc = 'DELEGATIONS_DISTINCT_COUNT_CREATED_BLOCK_DESC',
  DelegationsDistinctCountDelegatorIdAsc = 'DELEGATIONS_DISTINCT_COUNT_DELEGATOR_ID_ASC',
  DelegationsDistinctCountDelegatorIdDesc = 'DELEGATIONS_DISTINCT_COUNT_DELEGATOR_ID_DESC',
  DelegationsDistinctCountExitEraAsc = 'DELEGATIONS_DISTINCT_COUNT_EXIT_ERA_ASC',
  DelegationsDistinctCountExitEraDesc = 'DELEGATIONS_DISTINCT_COUNT_EXIT_ERA_DESC',
  DelegationsDistinctCountIdAsc = 'DELEGATIONS_DISTINCT_COUNT_ID_ASC',
  DelegationsDistinctCountIdDesc = 'DELEGATIONS_DISTINCT_COUNT_ID_DESC',
  DelegationsDistinctCountIndexerIdAsc = 'DELEGATIONS_DISTINCT_COUNT_INDEXER_ID_ASC',
  DelegationsDistinctCountIndexerIdDesc = 'DELEGATIONS_DISTINCT_COUNT_INDEXER_ID_DESC',
  DelegationsDistinctCountLastEventAsc = 'DELEGATIONS_DISTINCT_COUNT_LAST_EVENT_ASC',
  DelegationsDistinctCountLastEventDesc = 'DELEGATIONS_DISTINCT_COUNT_LAST_EVENT_DESC',
  DelegationsMaxAmountAsc = 'DELEGATIONS_MAX_AMOUNT_ASC',
  DelegationsMaxAmountDesc = 'DELEGATIONS_MAX_AMOUNT_DESC',
  DelegationsMaxBlockRangeAsc = 'DELEGATIONS_MAX_BLOCK_RANGE_ASC',
  DelegationsMaxBlockRangeDesc = 'DELEGATIONS_MAX_BLOCK_RANGE_DESC',
  DelegationsMaxCreatedBlockAsc = 'DELEGATIONS_MAX_CREATED_BLOCK_ASC',
  DelegationsMaxCreatedBlockDesc = 'DELEGATIONS_MAX_CREATED_BLOCK_DESC',
  DelegationsMaxDelegatorIdAsc = 'DELEGATIONS_MAX_DELEGATOR_ID_ASC',
  DelegationsMaxDelegatorIdDesc = 'DELEGATIONS_MAX_DELEGATOR_ID_DESC',
  DelegationsMaxExitEraAsc = 'DELEGATIONS_MAX_EXIT_ERA_ASC',
  DelegationsMaxExitEraDesc = 'DELEGATIONS_MAX_EXIT_ERA_DESC',
  DelegationsMaxIdAsc = 'DELEGATIONS_MAX_ID_ASC',
  DelegationsMaxIdDesc = 'DELEGATIONS_MAX_ID_DESC',
  DelegationsMaxIndexerIdAsc = 'DELEGATIONS_MAX_INDEXER_ID_ASC',
  DelegationsMaxIndexerIdDesc = 'DELEGATIONS_MAX_INDEXER_ID_DESC',
  DelegationsMaxLastEventAsc = 'DELEGATIONS_MAX_LAST_EVENT_ASC',
  DelegationsMaxLastEventDesc = 'DELEGATIONS_MAX_LAST_EVENT_DESC',
  DelegationsMinAmountAsc = 'DELEGATIONS_MIN_AMOUNT_ASC',
  DelegationsMinAmountDesc = 'DELEGATIONS_MIN_AMOUNT_DESC',
  DelegationsMinBlockRangeAsc = 'DELEGATIONS_MIN_BLOCK_RANGE_ASC',
  DelegationsMinBlockRangeDesc = 'DELEGATIONS_MIN_BLOCK_RANGE_DESC',
  DelegationsMinCreatedBlockAsc = 'DELEGATIONS_MIN_CREATED_BLOCK_ASC',
  DelegationsMinCreatedBlockDesc = 'DELEGATIONS_MIN_CREATED_BLOCK_DESC',
  DelegationsMinDelegatorIdAsc = 'DELEGATIONS_MIN_DELEGATOR_ID_ASC',
  DelegationsMinDelegatorIdDesc = 'DELEGATIONS_MIN_DELEGATOR_ID_DESC',
  DelegationsMinExitEraAsc = 'DELEGATIONS_MIN_EXIT_ERA_ASC',
  DelegationsMinExitEraDesc = 'DELEGATIONS_MIN_EXIT_ERA_DESC',
  DelegationsMinIdAsc = 'DELEGATIONS_MIN_ID_ASC',
  DelegationsMinIdDesc = 'DELEGATIONS_MIN_ID_DESC',
  DelegationsMinIndexerIdAsc = 'DELEGATIONS_MIN_INDEXER_ID_ASC',
  DelegationsMinIndexerIdDesc = 'DELEGATIONS_MIN_INDEXER_ID_DESC',
  DelegationsMinLastEventAsc = 'DELEGATIONS_MIN_LAST_EVENT_ASC',
  DelegationsMinLastEventDesc = 'DELEGATIONS_MIN_LAST_EVENT_DESC',
  DelegationsStddevPopulationAmountAsc = 'DELEGATIONS_STDDEV_POPULATION_AMOUNT_ASC',
  DelegationsStddevPopulationAmountDesc = 'DELEGATIONS_STDDEV_POPULATION_AMOUNT_DESC',
  DelegationsStddevPopulationBlockRangeAsc = 'DELEGATIONS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  DelegationsStddevPopulationBlockRangeDesc = 'DELEGATIONS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  DelegationsStddevPopulationCreatedBlockAsc = 'DELEGATIONS_STDDEV_POPULATION_CREATED_BLOCK_ASC',
  DelegationsStddevPopulationCreatedBlockDesc = 'DELEGATIONS_STDDEV_POPULATION_CREATED_BLOCK_DESC',
  DelegationsStddevPopulationDelegatorIdAsc = 'DELEGATIONS_STDDEV_POPULATION_DELEGATOR_ID_ASC',
  DelegationsStddevPopulationDelegatorIdDesc = 'DELEGATIONS_STDDEV_POPULATION_DELEGATOR_ID_DESC',
  DelegationsStddevPopulationExitEraAsc = 'DELEGATIONS_STDDEV_POPULATION_EXIT_ERA_ASC',
  DelegationsStddevPopulationExitEraDesc = 'DELEGATIONS_STDDEV_POPULATION_EXIT_ERA_DESC',
  DelegationsStddevPopulationIdAsc = 'DELEGATIONS_STDDEV_POPULATION_ID_ASC',
  DelegationsStddevPopulationIdDesc = 'DELEGATIONS_STDDEV_POPULATION_ID_DESC',
  DelegationsStddevPopulationIndexerIdAsc = 'DELEGATIONS_STDDEV_POPULATION_INDEXER_ID_ASC',
  DelegationsStddevPopulationIndexerIdDesc = 'DELEGATIONS_STDDEV_POPULATION_INDEXER_ID_DESC',
  DelegationsStddevPopulationLastEventAsc = 'DELEGATIONS_STDDEV_POPULATION_LAST_EVENT_ASC',
  DelegationsStddevPopulationLastEventDesc = 'DELEGATIONS_STDDEV_POPULATION_LAST_EVENT_DESC',
  DelegationsStddevSampleAmountAsc = 'DELEGATIONS_STDDEV_SAMPLE_AMOUNT_ASC',
  DelegationsStddevSampleAmountDesc = 'DELEGATIONS_STDDEV_SAMPLE_AMOUNT_DESC',
  DelegationsStddevSampleBlockRangeAsc = 'DELEGATIONS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  DelegationsStddevSampleBlockRangeDesc = 'DELEGATIONS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  DelegationsStddevSampleCreatedBlockAsc = 'DELEGATIONS_STDDEV_SAMPLE_CREATED_BLOCK_ASC',
  DelegationsStddevSampleCreatedBlockDesc = 'DELEGATIONS_STDDEV_SAMPLE_CREATED_BLOCK_DESC',
  DelegationsStddevSampleDelegatorIdAsc = 'DELEGATIONS_STDDEV_SAMPLE_DELEGATOR_ID_ASC',
  DelegationsStddevSampleDelegatorIdDesc = 'DELEGATIONS_STDDEV_SAMPLE_DELEGATOR_ID_DESC',
  DelegationsStddevSampleExitEraAsc = 'DELEGATIONS_STDDEV_SAMPLE_EXIT_ERA_ASC',
  DelegationsStddevSampleExitEraDesc = 'DELEGATIONS_STDDEV_SAMPLE_EXIT_ERA_DESC',
  DelegationsStddevSampleIdAsc = 'DELEGATIONS_STDDEV_SAMPLE_ID_ASC',
  DelegationsStddevSampleIdDesc = 'DELEGATIONS_STDDEV_SAMPLE_ID_DESC',
  DelegationsStddevSampleIndexerIdAsc = 'DELEGATIONS_STDDEV_SAMPLE_INDEXER_ID_ASC',
  DelegationsStddevSampleIndexerIdDesc = 'DELEGATIONS_STDDEV_SAMPLE_INDEXER_ID_DESC',
  DelegationsStddevSampleLastEventAsc = 'DELEGATIONS_STDDEV_SAMPLE_LAST_EVENT_ASC',
  DelegationsStddevSampleLastEventDesc = 'DELEGATIONS_STDDEV_SAMPLE_LAST_EVENT_DESC',
  DelegationsSumAmountAsc = 'DELEGATIONS_SUM_AMOUNT_ASC',
  DelegationsSumAmountDesc = 'DELEGATIONS_SUM_AMOUNT_DESC',
  DelegationsSumBlockRangeAsc = 'DELEGATIONS_SUM_BLOCK_RANGE_ASC',
  DelegationsSumBlockRangeDesc = 'DELEGATIONS_SUM_BLOCK_RANGE_DESC',
  DelegationsSumCreatedBlockAsc = 'DELEGATIONS_SUM_CREATED_BLOCK_ASC',
  DelegationsSumCreatedBlockDesc = 'DELEGATIONS_SUM_CREATED_BLOCK_DESC',
  DelegationsSumDelegatorIdAsc = 'DELEGATIONS_SUM_DELEGATOR_ID_ASC',
  DelegationsSumDelegatorIdDesc = 'DELEGATIONS_SUM_DELEGATOR_ID_DESC',
  DelegationsSumExitEraAsc = 'DELEGATIONS_SUM_EXIT_ERA_ASC',
  DelegationsSumExitEraDesc = 'DELEGATIONS_SUM_EXIT_ERA_DESC',
  DelegationsSumIdAsc = 'DELEGATIONS_SUM_ID_ASC',
  DelegationsSumIdDesc = 'DELEGATIONS_SUM_ID_DESC',
  DelegationsSumIndexerIdAsc = 'DELEGATIONS_SUM_INDEXER_ID_ASC',
  DelegationsSumIndexerIdDesc = 'DELEGATIONS_SUM_INDEXER_ID_DESC',
  DelegationsSumLastEventAsc = 'DELEGATIONS_SUM_LAST_EVENT_ASC',
  DelegationsSumLastEventDesc = 'DELEGATIONS_SUM_LAST_EVENT_DESC',
  DelegationsVariancePopulationAmountAsc = 'DELEGATIONS_VARIANCE_POPULATION_AMOUNT_ASC',
  DelegationsVariancePopulationAmountDesc = 'DELEGATIONS_VARIANCE_POPULATION_AMOUNT_DESC',
  DelegationsVariancePopulationBlockRangeAsc = 'DELEGATIONS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  DelegationsVariancePopulationBlockRangeDesc = 'DELEGATIONS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  DelegationsVariancePopulationCreatedBlockAsc = 'DELEGATIONS_VARIANCE_POPULATION_CREATED_BLOCK_ASC',
  DelegationsVariancePopulationCreatedBlockDesc = 'DELEGATIONS_VARIANCE_POPULATION_CREATED_BLOCK_DESC',
  DelegationsVariancePopulationDelegatorIdAsc = 'DELEGATIONS_VARIANCE_POPULATION_DELEGATOR_ID_ASC',
  DelegationsVariancePopulationDelegatorIdDesc = 'DELEGATIONS_VARIANCE_POPULATION_DELEGATOR_ID_DESC',
  DelegationsVariancePopulationExitEraAsc = 'DELEGATIONS_VARIANCE_POPULATION_EXIT_ERA_ASC',
  DelegationsVariancePopulationExitEraDesc = 'DELEGATIONS_VARIANCE_POPULATION_EXIT_ERA_DESC',
  DelegationsVariancePopulationIdAsc = 'DELEGATIONS_VARIANCE_POPULATION_ID_ASC',
  DelegationsVariancePopulationIdDesc = 'DELEGATIONS_VARIANCE_POPULATION_ID_DESC',
  DelegationsVariancePopulationIndexerIdAsc = 'DELEGATIONS_VARIANCE_POPULATION_INDEXER_ID_ASC',
  DelegationsVariancePopulationIndexerIdDesc = 'DELEGATIONS_VARIANCE_POPULATION_INDEXER_ID_DESC',
  DelegationsVariancePopulationLastEventAsc = 'DELEGATIONS_VARIANCE_POPULATION_LAST_EVENT_ASC',
  DelegationsVariancePopulationLastEventDesc = 'DELEGATIONS_VARIANCE_POPULATION_LAST_EVENT_DESC',
  DelegationsVarianceSampleAmountAsc = 'DELEGATIONS_VARIANCE_SAMPLE_AMOUNT_ASC',
  DelegationsVarianceSampleAmountDesc = 'DELEGATIONS_VARIANCE_SAMPLE_AMOUNT_DESC',
  DelegationsVarianceSampleBlockRangeAsc = 'DELEGATIONS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  DelegationsVarianceSampleBlockRangeDesc = 'DELEGATIONS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  DelegationsVarianceSampleCreatedBlockAsc = 'DELEGATIONS_VARIANCE_SAMPLE_CREATED_BLOCK_ASC',
  DelegationsVarianceSampleCreatedBlockDesc = 'DELEGATIONS_VARIANCE_SAMPLE_CREATED_BLOCK_DESC',
  DelegationsVarianceSampleDelegatorIdAsc = 'DELEGATIONS_VARIANCE_SAMPLE_DELEGATOR_ID_ASC',
  DelegationsVarianceSampleDelegatorIdDesc = 'DELEGATIONS_VARIANCE_SAMPLE_DELEGATOR_ID_DESC',
  DelegationsVarianceSampleExitEraAsc = 'DELEGATIONS_VARIANCE_SAMPLE_EXIT_ERA_ASC',
  DelegationsVarianceSampleExitEraDesc = 'DELEGATIONS_VARIANCE_SAMPLE_EXIT_ERA_DESC',
  DelegationsVarianceSampleIdAsc = 'DELEGATIONS_VARIANCE_SAMPLE_ID_ASC',
  DelegationsVarianceSampleIdDesc = 'DELEGATIONS_VARIANCE_SAMPLE_ID_DESC',
  DelegationsVarianceSampleIndexerIdAsc = 'DELEGATIONS_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  DelegationsVarianceSampleIndexerIdDesc = 'DELEGATIONS_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  DelegationsVarianceSampleLastEventAsc = 'DELEGATIONS_VARIANCE_SAMPLE_LAST_EVENT_ASC',
  DelegationsVarianceSampleLastEventDesc = 'DELEGATIONS_VARIANCE_SAMPLE_LAST_EVENT_DESC',
  EraDelegatorIndexerApiesAverageApyAsc = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_APY_ASC',
  EraDelegatorIndexerApiesAverageApyDesc = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_APY_DESC',
  EraDelegatorIndexerApiesAverageBlockRangeAsc = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_BLOCK_RANGE_ASC',
  EraDelegatorIndexerApiesAverageBlockRangeDesc = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_BLOCK_RANGE_DESC',
  EraDelegatorIndexerApiesAverageCreateAtAsc = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_CREATE_AT_ASC',
  EraDelegatorIndexerApiesAverageCreateAtDesc = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_CREATE_AT_DESC',
  EraDelegatorIndexerApiesAverageDelegatorIdAsc = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_DELEGATOR_ID_ASC',
  EraDelegatorIndexerApiesAverageDelegatorIdDesc = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_DELEGATOR_ID_DESC',
  EraDelegatorIndexerApiesAverageEraIdxAsc = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_ERA_IDX_ASC',
  EraDelegatorIndexerApiesAverageEraIdxDesc = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_ERA_IDX_DESC',
  EraDelegatorIndexerApiesAverageIdAsc = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_ID_ASC',
  EraDelegatorIndexerApiesAverageIdDesc = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_ID_DESC',
  EraDelegatorIndexerApiesAverageIndexerIdAsc = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_INDEXER_ID_ASC',
  EraDelegatorIndexerApiesAverageIndexerIdDesc = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_INDEXER_ID_DESC',
  EraDelegatorIndexerApiesAverageRewardAsc = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_REWARD_ASC',
  EraDelegatorIndexerApiesAverageRewardDesc = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_REWARD_DESC',
  EraDelegatorIndexerApiesAverageStakeAsc = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_STAKE_ASC',
  EraDelegatorIndexerApiesAverageStakeDesc = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_STAKE_DESC',
  EraDelegatorIndexerApiesAverageUpdateAtAsc = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_UPDATE_AT_ASC',
  EraDelegatorIndexerApiesAverageUpdateAtDesc = 'ERA_DELEGATOR_INDEXER_APIES_AVERAGE_UPDATE_AT_DESC',
  EraDelegatorIndexerApiesByIndexerIdCountAsc = 'ERA_DELEGATOR_INDEXER_APIES_BY_INDEXER_ID__COUNT_ASC',
  EraDelegatorIndexerApiesByIndexerIdCountDesc = 'ERA_DELEGATOR_INDEXER_APIES_BY_INDEXER_ID__COUNT_DESC',
  EraDelegatorIndexerApiesCountAsc = 'ERA_DELEGATOR_INDEXER_APIES_COUNT_ASC',
  EraDelegatorIndexerApiesCountDesc = 'ERA_DELEGATOR_INDEXER_APIES_COUNT_DESC',
  EraDelegatorIndexerApiesDistinctCountApyAsc = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_APY_ASC',
  EraDelegatorIndexerApiesDistinctCountApyDesc = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_APY_DESC',
  EraDelegatorIndexerApiesDistinctCountBlockRangeAsc = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  EraDelegatorIndexerApiesDistinctCountBlockRangeDesc = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  EraDelegatorIndexerApiesDistinctCountCreateAtAsc = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_CREATE_AT_ASC',
  EraDelegatorIndexerApiesDistinctCountCreateAtDesc = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_CREATE_AT_DESC',
  EraDelegatorIndexerApiesDistinctCountDelegatorIdAsc = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_DELEGATOR_ID_ASC',
  EraDelegatorIndexerApiesDistinctCountDelegatorIdDesc = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_DELEGATOR_ID_DESC',
  EraDelegatorIndexerApiesDistinctCountEraIdxAsc = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_ERA_IDX_ASC',
  EraDelegatorIndexerApiesDistinctCountEraIdxDesc = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_ERA_IDX_DESC',
  EraDelegatorIndexerApiesDistinctCountIdAsc = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_ID_ASC',
  EraDelegatorIndexerApiesDistinctCountIdDesc = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_ID_DESC',
  EraDelegatorIndexerApiesDistinctCountIndexerIdAsc = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_INDEXER_ID_ASC',
  EraDelegatorIndexerApiesDistinctCountIndexerIdDesc = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_INDEXER_ID_DESC',
  EraDelegatorIndexerApiesDistinctCountRewardAsc = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_REWARD_ASC',
  EraDelegatorIndexerApiesDistinctCountRewardDesc = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_REWARD_DESC',
  EraDelegatorIndexerApiesDistinctCountStakeAsc = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_STAKE_ASC',
  EraDelegatorIndexerApiesDistinctCountStakeDesc = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_STAKE_DESC',
  EraDelegatorIndexerApiesDistinctCountUpdateAtAsc = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_UPDATE_AT_ASC',
  EraDelegatorIndexerApiesDistinctCountUpdateAtDesc = 'ERA_DELEGATOR_INDEXER_APIES_DISTINCT_COUNT_UPDATE_AT_DESC',
  EraDelegatorIndexerApiesMaxApyAsc = 'ERA_DELEGATOR_INDEXER_APIES_MAX_APY_ASC',
  EraDelegatorIndexerApiesMaxApyDesc = 'ERA_DELEGATOR_INDEXER_APIES_MAX_APY_DESC',
  EraDelegatorIndexerApiesMaxBlockRangeAsc = 'ERA_DELEGATOR_INDEXER_APIES_MAX_BLOCK_RANGE_ASC',
  EraDelegatorIndexerApiesMaxBlockRangeDesc = 'ERA_DELEGATOR_INDEXER_APIES_MAX_BLOCK_RANGE_DESC',
  EraDelegatorIndexerApiesMaxCreateAtAsc = 'ERA_DELEGATOR_INDEXER_APIES_MAX_CREATE_AT_ASC',
  EraDelegatorIndexerApiesMaxCreateAtDesc = 'ERA_DELEGATOR_INDEXER_APIES_MAX_CREATE_AT_DESC',
  EraDelegatorIndexerApiesMaxDelegatorIdAsc = 'ERA_DELEGATOR_INDEXER_APIES_MAX_DELEGATOR_ID_ASC',
  EraDelegatorIndexerApiesMaxDelegatorIdDesc = 'ERA_DELEGATOR_INDEXER_APIES_MAX_DELEGATOR_ID_DESC',
  EraDelegatorIndexerApiesMaxEraIdxAsc = 'ERA_DELEGATOR_INDEXER_APIES_MAX_ERA_IDX_ASC',
  EraDelegatorIndexerApiesMaxEraIdxDesc = 'ERA_DELEGATOR_INDEXER_APIES_MAX_ERA_IDX_DESC',
  EraDelegatorIndexerApiesMaxIdAsc = 'ERA_DELEGATOR_INDEXER_APIES_MAX_ID_ASC',
  EraDelegatorIndexerApiesMaxIdDesc = 'ERA_DELEGATOR_INDEXER_APIES_MAX_ID_DESC',
  EraDelegatorIndexerApiesMaxIndexerIdAsc = 'ERA_DELEGATOR_INDEXER_APIES_MAX_INDEXER_ID_ASC',
  EraDelegatorIndexerApiesMaxIndexerIdDesc = 'ERA_DELEGATOR_INDEXER_APIES_MAX_INDEXER_ID_DESC',
  EraDelegatorIndexerApiesMaxRewardAsc = 'ERA_DELEGATOR_INDEXER_APIES_MAX_REWARD_ASC',
  EraDelegatorIndexerApiesMaxRewardDesc = 'ERA_DELEGATOR_INDEXER_APIES_MAX_REWARD_DESC',
  EraDelegatorIndexerApiesMaxStakeAsc = 'ERA_DELEGATOR_INDEXER_APIES_MAX_STAKE_ASC',
  EraDelegatorIndexerApiesMaxStakeDesc = 'ERA_DELEGATOR_INDEXER_APIES_MAX_STAKE_DESC',
  EraDelegatorIndexerApiesMaxUpdateAtAsc = 'ERA_DELEGATOR_INDEXER_APIES_MAX_UPDATE_AT_ASC',
  EraDelegatorIndexerApiesMaxUpdateAtDesc = 'ERA_DELEGATOR_INDEXER_APIES_MAX_UPDATE_AT_DESC',
  EraDelegatorIndexerApiesMinApyAsc = 'ERA_DELEGATOR_INDEXER_APIES_MIN_APY_ASC',
  EraDelegatorIndexerApiesMinApyDesc = 'ERA_DELEGATOR_INDEXER_APIES_MIN_APY_DESC',
  EraDelegatorIndexerApiesMinBlockRangeAsc = 'ERA_DELEGATOR_INDEXER_APIES_MIN_BLOCK_RANGE_ASC',
  EraDelegatorIndexerApiesMinBlockRangeDesc = 'ERA_DELEGATOR_INDEXER_APIES_MIN_BLOCK_RANGE_DESC',
  EraDelegatorIndexerApiesMinCreateAtAsc = 'ERA_DELEGATOR_INDEXER_APIES_MIN_CREATE_AT_ASC',
  EraDelegatorIndexerApiesMinCreateAtDesc = 'ERA_DELEGATOR_INDEXER_APIES_MIN_CREATE_AT_DESC',
  EraDelegatorIndexerApiesMinDelegatorIdAsc = 'ERA_DELEGATOR_INDEXER_APIES_MIN_DELEGATOR_ID_ASC',
  EraDelegatorIndexerApiesMinDelegatorIdDesc = 'ERA_DELEGATOR_INDEXER_APIES_MIN_DELEGATOR_ID_DESC',
  EraDelegatorIndexerApiesMinEraIdxAsc = 'ERA_DELEGATOR_INDEXER_APIES_MIN_ERA_IDX_ASC',
  EraDelegatorIndexerApiesMinEraIdxDesc = 'ERA_DELEGATOR_INDEXER_APIES_MIN_ERA_IDX_DESC',
  EraDelegatorIndexerApiesMinIdAsc = 'ERA_DELEGATOR_INDEXER_APIES_MIN_ID_ASC',
  EraDelegatorIndexerApiesMinIdDesc = 'ERA_DELEGATOR_INDEXER_APIES_MIN_ID_DESC',
  EraDelegatorIndexerApiesMinIndexerIdAsc = 'ERA_DELEGATOR_INDEXER_APIES_MIN_INDEXER_ID_ASC',
  EraDelegatorIndexerApiesMinIndexerIdDesc = 'ERA_DELEGATOR_INDEXER_APIES_MIN_INDEXER_ID_DESC',
  EraDelegatorIndexerApiesMinRewardAsc = 'ERA_DELEGATOR_INDEXER_APIES_MIN_REWARD_ASC',
  EraDelegatorIndexerApiesMinRewardDesc = 'ERA_DELEGATOR_INDEXER_APIES_MIN_REWARD_DESC',
  EraDelegatorIndexerApiesMinStakeAsc = 'ERA_DELEGATOR_INDEXER_APIES_MIN_STAKE_ASC',
  EraDelegatorIndexerApiesMinStakeDesc = 'ERA_DELEGATOR_INDEXER_APIES_MIN_STAKE_DESC',
  EraDelegatorIndexerApiesMinUpdateAtAsc = 'ERA_DELEGATOR_INDEXER_APIES_MIN_UPDATE_AT_ASC',
  EraDelegatorIndexerApiesMinUpdateAtDesc = 'ERA_DELEGATOR_INDEXER_APIES_MIN_UPDATE_AT_DESC',
  EraDelegatorIndexerApiesStddevPopulationApyAsc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_APY_ASC',
  EraDelegatorIndexerApiesStddevPopulationApyDesc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_APY_DESC',
  EraDelegatorIndexerApiesStddevPopulationBlockRangeAsc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  EraDelegatorIndexerApiesStddevPopulationBlockRangeDesc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  EraDelegatorIndexerApiesStddevPopulationCreateAtAsc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_CREATE_AT_ASC',
  EraDelegatorIndexerApiesStddevPopulationCreateAtDesc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_CREATE_AT_DESC',
  EraDelegatorIndexerApiesStddevPopulationDelegatorIdAsc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_DELEGATOR_ID_ASC',
  EraDelegatorIndexerApiesStddevPopulationDelegatorIdDesc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_DELEGATOR_ID_DESC',
  EraDelegatorIndexerApiesStddevPopulationEraIdxAsc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_ERA_IDX_ASC',
  EraDelegatorIndexerApiesStddevPopulationEraIdxDesc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_ERA_IDX_DESC',
  EraDelegatorIndexerApiesStddevPopulationIdAsc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_ID_ASC',
  EraDelegatorIndexerApiesStddevPopulationIdDesc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_ID_DESC',
  EraDelegatorIndexerApiesStddevPopulationIndexerIdAsc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_INDEXER_ID_ASC',
  EraDelegatorIndexerApiesStddevPopulationIndexerIdDesc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_INDEXER_ID_DESC',
  EraDelegatorIndexerApiesStddevPopulationRewardAsc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_REWARD_ASC',
  EraDelegatorIndexerApiesStddevPopulationRewardDesc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_REWARD_DESC',
  EraDelegatorIndexerApiesStddevPopulationStakeAsc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_STAKE_ASC',
  EraDelegatorIndexerApiesStddevPopulationStakeDesc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_STAKE_DESC',
  EraDelegatorIndexerApiesStddevPopulationUpdateAtAsc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_UPDATE_AT_ASC',
  EraDelegatorIndexerApiesStddevPopulationUpdateAtDesc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_POPULATION_UPDATE_AT_DESC',
  EraDelegatorIndexerApiesStddevSampleApyAsc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_APY_ASC',
  EraDelegatorIndexerApiesStddevSampleApyDesc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_APY_DESC',
  EraDelegatorIndexerApiesStddevSampleBlockRangeAsc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  EraDelegatorIndexerApiesStddevSampleBlockRangeDesc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  EraDelegatorIndexerApiesStddevSampleCreateAtAsc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_CREATE_AT_ASC',
  EraDelegatorIndexerApiesStddevSampleCreateAtDesc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_CREATE_AT_DESC',
  EraDelegatorIndexerApiesStddevSampleDelegatorIdAsc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_DELEGATOR_ID_ASC',
  EraDelegatorIndexerApiesStddevSampleDelegatorIdDesc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_DELEGATOR_ID_DESC',
  EraDelegatorIndexerApiesStddevSampleEraIdxAsc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_ERA_IDX_ASC',
  EraDelegatorIndexerApiesStddevSampleEraIdxDesc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_ERA_IDX_DESC',
  EraDelegatorIndexerApiesStddevSampleIdAsc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_ID_ASC',
  EraDelegatorIndexerApiesStddevSampleIdDesc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_ID_DESC',
  EraDelegatorIndexerApiesStddevSampleIndexerIdAsc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_INDEXER_ID_ASC',
  EraDelegatorIndexerApiesStddevSampleIndexerIdDesc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_INDEXER_ID_DESC',
  EraDelegatorIndexerApiesStddevSampleRewardAsc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_REWARD_ASC',
  EraDelegatorIndexerApiesStddevSampleRewardDesc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_REWARD_DESC',
  EraDelegatorIndexerApiesStddevSampleStakeAsc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_STAKE_ASC',
  EraDelegatorIndexerApiesStddevSampleStakeDesc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_STAKE_DESC',
  EraDelegatorIndexerApiesStddevSampleUpdateAtAsc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_UPDATE_AT_ASC',
  EraDelegatorIndexerApiesStddevSampleUpdateAtDesc = 'ERA_DELEGATOR_INDEXER_APIES_STDDEV_SAMPLE_UPDATE_AT_DESC',
  EraDelegatorIndexerApiesSumApyAsc = 'ERA_DELEGATOR_INDEXER_APIES_SUM_APY_ASC',
  EraDelegatorIndexerApiesSumApyDesc = 'ERA_DELEGATOR_INDEXER_APIES_SUM_APY_DESC',
  EraDelegatorIndexerApiesSumBlockRangeAsc = 'ERA_DELEGATOR_INDEXER_APIES_SUM_BLOCK_RANGE_ASC',
  EraDelegatorIndexerApiesSumBlockRangeDesc = 'ERA_DELEGATOR_INDEXER_APIES_SUM_BLOCK_RANGE_DESC',
  EraDelegatorIndexerApiesSumCreateAtAsc = 'ERA_DELEGATOR_INDEXER_APIES_SUM_CREATE_AT_ASC',
  EraDelegatorIndexerApiesSumCreateAtDesc = 'ERA_DELEGATOR_INDEXER_APIES_SUM_CREATE_AT_DESC',
  EraDelegatorIndexerApiesSumDelegatorIdAsc = 'ERA_DELEGATOR_INDEXER_APIES_SUM_DELEGATOR_ID_ASC',
  EraDelegatorIndexerApiesSumDelegatorIdDesc = 'ERA_DELEGATOR_INDEXER_APIES_SUM_DELEGATOR_ID_DESC',
  EraDelegatorIndexerApiesSumEraIdxAsc = 'ERA_DELEGATOR_INDEXER_APIES_SUM_ERA_IDX_ASC',
  EraDelegatorIndexerApiesSumEraIdxDesc = 'ERA_DELEGATOR_INDEXER_APIES_SUM_ERA_IDX_DESC',
  EraDelegatorIndexerApiesSumIdAsc = 'ERA_DELEGATOR_INDEXER_APIES_SUM_ID_ASC',
  EraDelegatorIndexerApiesSumIdDesc = 'ERA_DELEGATOR_INDEXER_APIES_SUM_ID_DESC',
  EraDelegatorIndexerApiesSumIndexerIdAsc = 'ERA_DELEGATOR_INDEXER_APIES_SUM_INDEXER_ID_ASC',
  EraDelegatorIndexerApiesSumIndexerIdDesc = 'ERA_DELEGATOR_INDEXER_APIES_SUM_INDEXER_ID_DESC',
  EraDelegatorIndexerApiesSumRewardAsc = 'ERA_DELEGATOR_INDEXER_APIES_SUM_REWARD_ASC',
  EraDelegatorIndexerApiesSumRewardDesc = 'ERA_DELEGATOR_INDEXER_APIES_SUM_REWARD_DESC',
  EraDelegatorIndexerApiesSumStakeAsc = 'ERA_DELEGATOR_INDEXER_APIES_SUM_STAKE_ASC',
  EraDelegatorIndexerApiesSumStakeDesc = 'ERA_DELEGATOR_INDEXER_APIES_SUM_STAKE_DESC',
  EraDelegatorIndexerApiesSumUpdateAtAsc = 'ERA_DELEGATOR_INDEXER_APIES_SUM_UPDATE_AT_ASC',
  EraDelegatorIndexerApiesSumUpdateAtDesc = 'ERA_DELEGATOR_INDEXER_APIES_SUM_UPDATE_AT_DESC',
  EraDelegatorIndexerApiesVariancePopulationApyAsc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_APY_ASC',
  EraDelegatorIndexerApiesVariancePopulationApyDesc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_APY_DESC',
  EraDelegatorIndexerApiesVariancePopulationBlockRangeAsc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  EraDelegatorIndexerApiesVariancePopulationBlockRangeDesc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  EraDelegatorIndexerApiesVariancePopulationCreateAtAsc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_CREATE_AT_ASC',
  EraDelegatorIndexerApiesVariancePopulationCreateAtDesc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_CREATE_AT_DESC',
  EraDelegatorIndexerApiesVariancePopulationDelegatorIdAsc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_DELEGATOR_ID_ASC',
  EraDelegatorIndexerApiesVariancePopulationDelegatorIdDesc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_DELEGATOR_ID_DESC',
  EraDelegatorIndexerApiesVariancePopulationEraIdxAsc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_ERA_IDX_ASC',
  EraDelegatorIndexerApiesVariancePopulationEraIdxDesc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_ERA_IDX_DESC',
  EraDelegatorIndexerApiesVariancePopulationIdAsc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_ID_ASC',
  EraDelegatorIndexerApiesVariancePopulationIdDesc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_ID_DESC',
  EraDelegatorIndexerApiesVariancePopulationIndexerIdAsc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_INDEXER_ID_ASC',
  EraDelegatorIndexerApiesVariancePopulationIndexerIdDesc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_INDEXER_ID_DESC',
  EraDelegatorIndexerApiesVariancePopulationRewardAsc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_REWARD_ASC',
  EraDelegatorIndexerApiesVariancePopulationRewardDesc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_REWARD_DESC',
  EraDelegatorIndexerApiesVariancePopulationStakeAsc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_STAKE_ASC',
  EraDelegatorIndexerApiesVariancePopulationStakeDesc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_STAKE_DESC',
  EraDelegatorIndexerApiesVariancePopulationUpdateAtAsc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_UPDATE_AT_ASC',
  EraDelegatorIndexerApiesVariancePopulationUpdateAtDesc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_POPULATION_UPDATE_AT_DESC',
  EraDelegatorIndexerApiesVarianceSampleApyAsc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_APY_ASC',
  EraDelegatorIndexerApiesVarianceSampleApyDesc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_APY_DESC',
  EraDelegatorIndexerApiesVarianceSampleBlockRangeAsc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  EraDelegatorIndexerApiesVarianceSampleBlockRangeDesc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  EraDelegatorIndexerApiesVarianceSampleCreateAtAsc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_CREATE_AT_ASC',
  EraDelegatorIndexerApiesVarianceSampleCreateAtDesc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_CREATE_AT_DESC',
  EraDelegatorIndexerApiesVarianceSampleDelegatorIdAsc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_DELEGATOR_ID_ASC',
  EraDelegatorIndexerApiesVarianceSampleDelegatorIdDesc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_DELEGATOR_ID_DESC',
  EraDelegatorIndexerApiesVarianceSampleEraIdxAsc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_ERA_IDX_ASC',
  EraDelegatorIndexerApiesVarianceSampleEraIdxDesc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_ERA_IDX_DESC',
  EraDelegatorIndexerApiesVarianceSampleIdAsc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_ID_ASC',
  EraDelegatorIndexerApiesVarianceSampleIdDesc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_ID_DESC',
  EraDelegatorIndexerApiesVarianceSampleIndexerIdAsc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  EraDelegatorIndexerApiesVarianceSampleIndexerIdDesc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  EraDelegatorIndexerApiesVarianceSampleRewardAsc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_REWARD_ASC',
  EraDelegatorIndexerApiesVarianceSampleRewardDesc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_REWARD_DESC',
  EraDelegatorIndexerApiesVarianceSampleStakeAsc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_STAKE_ASC',
  EraDelegatorIndexerApiesVarianceSampleStakeDesc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_STAKE_DESC',
  EraDelegatorIndexerApiesVarianceSampleUpdateAtAsc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_UPDATE_AT_ASC',
  EraDelegatorIndexerApiesVarianceSampleUpdateAtDesc = 'ERA_DELEGATOR_INDEXER_APIES_VARIANCE_SAMPLE_UPDATE_AT_DESC',
  EraIndexerApiesAverageBlockRangeAsc = 'ERA_INDEXER_APIES_AVERAGE_BLOCK_RANGE_ASC',
  EraIndexerApiesAverageBlockRangeDesc = 'ERA_INDEXER_APIES_AVERAGE_BLOCK_RANGE_DESC',
  EraIndexerApiesAverageCreateAtAsc = 'ERA_INDEXER_APIES_AVERAGE_CREATE_AT_ASC',
  EraIndexerApiesAverageCreateAtDesc = 'ERA_INDEXER_APIES_AVERAGE_CREATE_AT_DESC',
  EraIndexerApiesAverageDelegatorApyAsc = 'ERA_INDEXER_APIES_AVERAGE_DELEGATOR_APY_ASC',
  EraIndexerApiesAverageDelegatorApyDesc = 'ERA_INDEXER_APIES_AVERAGE_DELEGATOR_APY_DESC',
  EraIndexerApiesAverageDelegatorRewardAsc = 'ERA_INDEXER_APIES_AVERAGE_DELEGATOR_REWARD_ASC',
  EraIndexerApiesAverageDelegatorRewardDesc = 'ERA_INDEXER_APIES_AVERAGE_DELEGATOR_REWARD_DESC',
  EraIndexerApiesAverageEraIdxAsc = 'ERA_INDEXER_APIES_AVERAGE_ERA_IDX_ASC',
  EraIndexerApiesAverageEraIdxDesc = 'ERA_INDEXER_APIES_AVERAGE_ERA_IDX_DESC',
  EraIndexerApiesAverageIdAsc = 'ERA_INDEXER_APIES_AVERAGE_ID_ASC',
  EraIndexerApiesAverageIdDesc = 'ERA_INDEXER_APIES_AVERAGE_ID_DESC',
  EraIndexerApiesAverageIndexerApyAsc = 'ERA_INDEXER_APIES_AVERAGE_INDEXER_APY_ASC',
  EraIndexerApiesAverageIndexerApyDesc = 'ERA_INDEXER_APIES_AVERAGE_INDEXER_APY_DESC',
  EraIndexerApiesAverageIndexerIdAsc = 'ERA_INDEXER_APIES_AVERAGE_INDEXER_ID_ASC',
  EraIndexerApiesAverageIndexerIdDesc = 'ERA_INDEXER_APIES_AVERAGE_INDEXER_ID_DESC',
  EraIndexerApiesAverageIndexerRewardAsc = 'ERA_INDEXER_APIES_AVERAGE_INDEXER_REWARD_ASC',
  EraIndexerApiesAverageIndexerRewardDesc = 'ERA_INDEXER_APIES_AVERAGE_INDEXER_REWARD_DESC',
  EraIndexerApiesAverageUpdateAtAsc = 'ERA_INDEXER_APIES_AVERAGE_UPDATE_AT_ASC',
  EraIndexerApiesAverageUpdateAtDesc = 'ERA_INDEXER_APIES_AVERAGE_UPDATE_AT_DESC',
  EraIndexerApiesByIndexerIdCountAsc = 'ERA_INDEXER_APIES_BY_INDEXER_ID__COUNT_ASC',
  EraIndexerApiesByIndexerIdCountDesc = 'ERA_INDEXER_APIES_BY_INDEXER_ID__COUNT_DESC',
  EraIndexerApiesCountAsc = 'ERA_INDEXER_APIES_COUNT_ASC',
  EraIndexerApiesCountDesc = 'ERA_INDEXER_APIES_COUNT_DESC',
  EraIndexerApiesDistinctCountBlockRangeAsc = 'ERA_INDEXER_APIES_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  EraIndexerApiesDistinctCountBlockRangeDesc = 'ERA_INDEXER_APIES_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  EraIndexerApiesDistinctCountCreateAtAsc = 'ERA_INDEXER_APIES_DISTINCT_COUNT_CREATE_AT_ASC',
  EraIndexerApiesDistinctCountCreateAtDesc = 'ERA_INDEXER_APIES_DISTINCT_COUNT_CREATE_AT_DESC',
  EraIndexerApiesDistinctCountDelegatorApyAsc = 'ERA_INDEXER_APIES_DISTINCT_COUNT_DELEGATOR_APY_ASC',
  EraIndexerApiesDistinctCountDelegatorApyDesc = 'ERA_INDEXER_APIES_DISTINCT_COUNT_DELEGATOR_APY_DESC',
  EraIndexerApiesDistinctCountDelegatorRewardAsc = 'ERA_INDEXER_APIES_DISTINCT_COUNT_DELEGATOR_REWARD_ASC',
  EraIndexerApiesDistinctCountDelegatorRewardDesc = 'ERA_INDEXER_APIES_DISTINCT_COUNT_DELEGATOR_REWARD_DESC',
  EraIndexerApiesDistinctCountEraIdxAsc = 'ERA_INDEXER_APIES_DISTINCT_COUNT_ERA_IDX_ASC',
  EraIndexerApiesDistinctCountEraIdxDesc = 'ERA_INDEXER_APIES_DISTINCT_COUNT_ERA_IDX_DESC',
  EraIndexerApiesDistinctCountIdAsc = 'ERA_INDEXER_APIES_DISTINCT_COUNT_ID_ASC',
  EraIndexerApiesDistinctCountIdDesc = 'ERA_INDEXER_APIES_DISTINCT_COUNT_ID_DESC',
  EraIndexerApiesDistinctCountIndexerApyAsc = 'ERA_INDEXER_APIES_DISTINCT_COUNT_INDEXER_APY_ASC',
  EraIndexerApiesDistinctCountIndexerApyDesc = 'ERA_INDEXER_APIES_DISTINCT_COUNT_INDEXER_APY_DESC',
  EraIndexerApiesDistinctCountIndexerIdAsc = 'ERA_INDEXER_APIES_DISTINCT_COUNT_INDEXER_ID_ASC',
  EraIndexerApiesDistinctCountIndexerIdDesc = 'ERA_INDEXER_APIES_DISTINCT_COUNT_INDEXER_ID_DESC',
  EraIndexerApiesDistinctCountIndexerRewardAsc = 'ERA_INDEXER_APIES_DISTINCT_COUNT_INDEXER_REWARD_ASC',
  EraIndexerApiesDistinctCountIndexerRewardDesc = 'ERA_INDEXER_APIES_DISTINCT_COUNT_INDEXER_REWARD_DESC',
  EraIndexerApiesDistinctCountUpdateAtAsc = 'ERA_INDEXER_APIES_DISTINCT_COUNT_UPDATE_AT_ASC',
  EraIndexerApiesDistinctCountUpdateAtDesc = 'ERA_INDEXER_APIES_DISTINCT_COUNT_UPDATE_AT_DESC',
  EraIndexerApiesMaxBlockRangeAsc = 'ERA_INDEXER_APIES_MAX_BLOCK_RANGE_ASC',
  EraIndexerApiesMaxBlockRangeDesc = 'ERA_INDEXER_APIES_MAX_BLOCK_RANGE_DESC',
  EraIndexerApiesMaxCreateAtAsc = 'ERA_INDEXER_APIES_MAX_CREATE_AT_ASC',
  EraIndexerApiesMaxCreateAtDesc = 'ERA_INDEXER_APIES_MAX_CREATE_AT_DESC',
  EraIndexerApiesMaxDelegatorApyAsc = 'ERA_INDEXER_APIES_MAX_DELEGATOR_APY_ASC',
  EraIndexerApiesMaxDelegatorApyDesc = 'ERA_INDEXER_APIES_MAX_DELEGATOR_APY_DESC',
  EraIndexerApiesMaxDelegatorRewardAsc = 'ERA_INDEXER_APIES_MAX_DELEGATOR_REWARD_ASC',
  EraIndexerApiesMaxDelegatorRewardDesc = 'ERA_INDEXER_APIES_MAX_DELEGATOR_REWARD_DESC',
  EraIndexerApiesMaxEraIdxAsc = 'ERA_INDEXER_APIES_MAX_ERA_IDX_ASC',
  EraIndexerApiesMaxEraIdxDesc = 'ERA_INDEXER_APIES_MAX_ERA_IDX_DESC',
  EraIndexerApiesMaxIdAsc = 'ERA_INDEXER_APIES_MAX_ID_ASC',
  EraIndexerApiesMaxIdDesc = 'ERA_INDEXER_APIES_MAX_ID_DESC',
  EraIndexerApiesMaxIndexerApyAsc = 'ERA_INDEXER_APIES_MAX_INDEXER_APY_ASC',
  EraIndexerApiesMaxIndexerApyDesc = 'ERA_INDEXER_APIES_MAX_INDEXER_APY_DESC',
  EraIndexerApiesMaxIndexerIdAsc = 'ERA_INDEXER_APIES_MAX_INDEXER_ID_ASC',
  EraIndexerApiesMaxIndexerIdDesc = 'ERA_INDEXER_APIES_MAX_INDEXER_ID_DESC',
  EraIndexerApiesMaxIndexerRewardAsc = 'ERA_INDEXER_APIES_MAX_INDEXER_REWARD_ASC',
  EraIndexerApiesMaxIndexerRewardDesc = 'ERA_INDEXER_APIES_MAX_INDEXER_REWARD_DESC',
  EraIndexerApiesMaxUpdateAtAsc = 'ERA_INDEXER_APIES_MAX_UPDATE_AT_ASC',
  EraIndexerApiesMaxUpdateAtDesc = 'ERA_INDEXER_APIES_MAX_UPDATE_AT_DESC',
  EraIndexerApiesMinBlockRangeAsc = 'ERA_INDEXER_APIES_MIN_BLOCK_RANGE_ASC',
  EraIndexerApiesMinBlockRangeDesc = 'ERA_INDEXER_APIES_MIN_BLOCK_RANGE_DESC',
  EraIndexerApiesMinCreateAtAsc = 'ERA_INDEXER_APIES_MIN_CREATE_AT_ASC',
  EraIndexerApiesMinCreateAtDesc = 'ERA_INDEXER_APIES_MIN_CREATE_AT_DESC',
  EraIndexerApiesMinDelegatorApyAsc = 'ERA_INDEXER_APIES_MIN_DELEGATOR_APY_ASC',
  EraIndexerApiesMinDelegatorApyDesc = 'ERA_INDEXER_APIES_MIN_DELEGATOR_APY_DESC',
  EraIndexerApiesMinDelegatorRewardAsc = 'ERA_INDEXER_APIES_MIN_DELEGATOR_REWARD_ASC',
  EraIndexerApiesMinDelegatorRewardDesc = 'ERA_INDEXER_APIES_MIN_DELEGATOR_REWARD_DESC',
  EraIndexerApiesMinEraIdxAsc = 'ERA_INDEXER_APIES_MIN_ERA_IDX_ASC',
  EraIndexerApiesMinEraIdxDesc = 'ERA_INDEXER_APIES_MIN_ERA_IDX_DESC',
  EraIndexerApiesMinIdAsc = 'ERA_INDEXER_APIES_MIN_ID_ASC',
  EraIndexerApiesMinIdDesc = 'ERA_INDEXER_APIES_MIN_ID_DESC',
  EraIndexerApiesMinIndexerApyAsc = 'ERA_INDEXER_APIES_MIN_INDEXER_APY_ASC',
  EraIndexerApiesMinIndexerApyDesc = 'ERA_INDEXER_APIES_MIN_INDEXER_APY_DESC',
  EraIndexerApiesMinIndexerIdAsc = 'ERA_INDEXER_APIES_MIN_INDEXER_ID_ASC',
  EraIndexerApiesMinIndexerIdDesc = 'ERA_INDEXER_APIES_MIN_INDEXER_ID_DESC',
  EraIndexerApiesMinIndexerRewardAsc = 'ERA_INDEXER_APIES_MIN_INDEXER_REWARD_ASC',
  EraIndexerApiesMinIndexerRewardDesc = 'ERA_INDEXER_APIES_MIN_INDEXER_REWARD_DESC',
  EraIndexerApiesMinUpdateAtAsc = 'ERA_INDEXER_APIES_MIN_UPDATE_AT_ASC',
  EraIndexerApiesMinUpdateAtDesc = 'ERA_INDEXER_APIES_MIN_UPDATE_AT_DESC',
  EraIndexerApiesStddevPopulationBlockRangeAsc = 'ERA_INDEXER_APIES_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  EraIndexerApiesStddevPopulationBlockRangeDesc = 'ERA_INDEXER_APIES_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  EraIndexerApiesStddevPopulationCreateAtAsc = 'ERA_INDEXER_APIES_STDDEV_POPULATION_CREATE_AT_ASC',
  EraIndexerApiesStddevPopulationCreateAtDesc = 'ERA_INDEXER_APIES_STDDEV_POPULATION_CREATE_AT_DESC',
  EraIndexerApiesStddevPopulationDelegatorApyAsc = 'ERA_INDEXER_APIES_STDDEV_POPULATION_DELEGATOR_APY_ASC',
  EraIndexerApiesStddevPopulationDelegatorApyDesc = 'ERA_INDEXER_APIES_STDDEV_POPULATION_DELEGATOR_APY_DESC',
  EraIndexerApiesStddevPopulationDelegatorRewardAsc = 'ERA_INDEXER_APIES_STDDEV_POPULATION_DELEGATOR_REWARD_ASC',
  EraIndexerApiesStddevPopulationDelegatorRewardDesc = 'ERA_INDEXER_APIES_STDDEV_POPULATION_DELEGATOR_REWARD_DESC',
  EraIndexerApiesStddevPopulationEraIdxAsc = 'ERA_INDEXER_APIES_STDDEV_POPULATION_ERA_IDX_ASC',
  EraIndexerApiesStddevPopulationEraIdxDesc = 'ERA_INDEXER_APIES_STDDEV_POPULATION_ERA_IDX_DESC',
  EraIndexerApiesStddevPopulationIdAsc = 'ERA_INDEXER_APIES_STDDEV_POPULATION_ID_ASC',
  EraIndexerApiesStddevPopulationIdDesc = 'ERA_INDEXER_APIES_STDDEV_POPULATION_ID_DESC',
  EraIndexerApiesStddevPopulationIndexerApyAsc = 'ERA_INDEXER_APIES_STDDEV_POPULATION_INDEXER_APY_ASC',
  EraIndexerApiesStddevPopulationIndexerApyDesc = 'ERA_INDEXER_APIES_STDDEV_POPULATION_INDEXER_APY_DESC',
  EraIndexerApiesStddevPopulationIndexerIdAsc = 'ERA_INDEXER_APIES_STDDEV_POPULATION_INDEXER_ID_ASC',
  EraIndexerApiesStddevPopulationIndexerIdDesc = 'ERA_INDEXER_APIES_STDDEV_POPULATION_INDEXER_ID_DESC',
  EraIndexerApiesStddevPopulationIndexerRewardAsc = 'ERA_INDEXER_APIES_STDDEV_POPULATION_INDEXER_REWARD_ASC',
  EraIndexerApiesStddevPopulationIndexerRewardDesc = 'ERA_INDEXER_APIES_STDDEV_POPULATION_INDEXER_REWARD_DESC',
  EraIndexerApiesStddevPopulationUpdateAtAsc = 'ERA_INDEXER_APIES_STDDEV_POPULATION_UPDATE_AT_ASC',
  EraIndexerApiesStddevPopulationUpdateAtDesc = 'ERA_INDEXER_APIES_STDDEV_POPULATION_UPDATE_AT_DESC',
  EraIndexerApiesStddevSampleBlockRangeAsc = 'ERA_INDEXER_APIES_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  EraIndexerApiesStddevSampleBlockRangeDesc = 'ERA_INDEXER_APIES_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  EraIndexerApiesStddevSampleCreateAtAsc = 'ERA_INDEXER_APIES_STDDEV_SAMPLE_CREATE_AT_ASC',
  EraIndexerApiesStddevSampleCreateAtDesc = 'ERA_INDEXER_APIES_STDDEV_SAMPLE_CREATE_AT_DESC',
  EraIndexerApiesStddevSampleDelegatorApyAsc = 'ERA_INDEXER_APIES_STDDEV_SAMPLE_DELEGATOR_APY_ASC',
  EraIndexerApiesStddevSampleDelegatorApyDesc = 'ERA_INDEXER_APIES_STDDEV_SAMPLE_DELEGATOR_APY_DESC',
  EraIndexerApiesStddevSampleDelegatorRewardAsc = 'ERA_INDEXER_APIES_STDDEV_SAMPLE_DELEGATOR_REWARD_ASC',
  EraIndexerApiesStddevSampleDelegatorRewardDesc = 'ERA_INDEXER_APIES_STDDEV_SAMPLE_DELEGATOR_REWARD_DESC',
  EraIndexerApiesStddevSampleEraIdxAsc = 'ERA_INDEXER_APIES_STDDEV_SAMPLE_ERA_IDX_ASC',
  EraIndexerApiesStddevSampleEraIdxDesc = 'ERA_INDEXER_APIES_STDDEV_SAMPLE_ERA_IDX_DESC',
  EraIndexerApiesStddevSampleIdAsc = 'ERA_INDEXER_APIES_STDDEV_SAMPLE_ID_ASC',
  EraIndexerApiesStddevSampleIdDesc = 'ERA_INDEXER_APIES_STDDEV_SAMPLE_ID_DESC',
  EraIndexerApiesStddevSampleIndexerApyAsc = 'ERA_INDEXER_APIES_STDDEV_SAMPLE_INDEXER_APY_ASC',
  EraIndexerApiesStddevSampleIndexerApyDesc = 'ERA_INDEXER_APIES_STDDEV_SAMPLE_INDEXER_APY_DESC',
  EraIndexerApiesStddevSampleIndexerIdAsc = 'ERA_INDEXER_APIES_STDDEV_SAMPLE_INDEXER_ID_ASC',
  EraIndexerApiesStddevSampleIndexerIdDesc = 'ERA_INDEXER_APIES_STDDEV_SAMPLE_INDEXER_ID_DESC',
  EraIndexerApiesStddevSampleIndexerRewardAsc = 'ERA_INDEXER_APIES_STDDEV_SAMPLE_INDEXER_REWARD_ASC',
  EraIndexerApiesStddevSampleIndexerRewardDesc = 'ERA_INDEXER_APIES_STDDEV_SAMPLE_INDEXER_REWARD_DESC',
  EraIndexerApiesStddevSampleUpdateAtAsc = 'ERA_INDEXER_APIES_STDDEV_SAMPLE_UPDATE_AT_ASC',
  EraIndexerApiesStddevSampleUpdateAtDesc = 'ERA_INDEXER_APIES_STDDEV_SAMPLE_UPDATE_AT_DESC',
  EraIndexerApiesSumBlockRangeAsc = 'ERA_INDEXER_APIES_SUM_BLOCK_RANGE_ASC',
  EraIndexerApiesSumBlockRangeDesc = 'ERA_INDEXER_APIES_SUM_BLOCK_RANGE_DESC',
  EraIndexerApiesSumCreateAtAsc = 'ERA_INDEXER_APIES_SUM_CREATE_AT_ASC',
  EraIndexerApiesSumCreateAtDesc = 'ERA_INDEXER_APIES_SUM_CREATE_AT_DESC',
  EraIndexerApiesSumDelegatorApyAsc = 'ERA_INDEXER_APIES_SUM_DELEGATOR_APY_ASC',
  EraIndexerApiesSumDelegatorApyDesc = 'ERA_INDEXER_APIES_SUM_DELEGATOR_APY_DESC',
  EraIndexerApiesSumDelegatorRewardAsc = 'ERA_INDEXER_APIES_SUM_DELEGATOR_REWARD_ASC',
  EraIndexerApiesSumDelegatorRewardDesc = 'ERA_INDEXER_APIES_SUM_DELEGATOR_REWARD_DESC',
  EraIndexerApiesSumEraIdxAsc = 'ERA_INDEXER_APIES_SUM_ERA_IDX_ASC',
  EraIndexerApiesSumEraIdxDesc = 'ERA_INDEXER_APIES_SUM_ERA_IDX_DESC',
  EraIndexerApiesSumIdAsc = 'ERA_INDEXER_APIES_SUM_ID_ASC',
  EraIndexerApiesSumIdDesc = 'ERA_INDEXER_APIES_SUM_ID_DESC',
  EraIndexerApiesSumIndexerApyAsc = 'ERA_INDEXER_APIES_SUM_INDEXER_APY_ASC',
  EraIndexerApiesSumIndexerApyDesc = 'ERA_INDEXER_APIES_SUM_INDEXER_APY_DESC',
  EraIndexerApiesSumIndexerIdAsc = 'ERA_INDEXER_APIES_SUM_INDEXER_ID_ASC',
  EraIndexerApiesSumIndexerIdDesc = 'ERA_INDEXER_APIES_SUM_INDEXER_ID_DESC',
  EraIndexerApiesSumIndexerRewardAsc = 'ERA_INDEXER_APIES_SUM_INDEXER_REWARD_ASC',
  EraIndexerApiesSumIndexerRewardDesc = 'ERA_INDEXER_APIES_SUM_INDEXER_REWARD_DESC',
  EraIndexerApiesSumUpdateAtAsc = 'ERA_INDEXER_APIES_SUM_UPDATE_AT_ASC',
  EraIndexerApiesSumUpdateAtDesc = 'ERA_INDEXER_APIES_SUM_UPDATE_AT_DESC',
  EraIndexerApiesVariancePopulationBlockRangeAsc = 'ERA_INDEXER_APIES_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  EraIndexerApiesVariancePopulationBlockRangeDesc = 'ERA_INDEXER_APIES_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  EraIndexerApiesVariancePopulationCreateAtAsc = 'ERA_INDEXER_APIES_VARIANCE_POPULATION_CREATE_AT_ASC',
  EraIndexerApiesVariancePopulationCreateAtDesc = 'ERA_INDEXER_APIES_VARIANCE_POPULATION_CREATE_AT_DESC',
  EraIndexerApiesVariancePopulationDelegatorApyAsc = 'ERA_INDEXER_APIES_VARIANCE_POPULATION_DELEGATOR_APY_ASC',
  EraIndexerApiesVariancePopulationDelegatorApyDesc = 'ERA_INDEXER_APIES_VARIANCE_POPULATION_DELEGATOR_APY_DESC',
  EraIndexerApiesVariancePopulationDelegatorRewardAsc = 'ERA_INDEXER_APIES_VARIANCE_POPULATION_DELEGATOR_REWARD_ASC',
  EraIndexerApiesVariancePopulationDelegatorRewardDesc = 'ERA_INDEXER_APIES_VARIANCE_POPULATION_DELEGATOR_REWARD_DESC',
  EraIndexerApiesVariancePopulationEraIdxAsc = 'ERA_INDEXER_APIES_VARIANCE_POPULATION_ERA_IDX_ASC',
  EraIndexerApiesVariancePopulationEraIdxDesc = 'ERA_INDEXER_APIES_VARIANCE_POPULATION_ERA_IDX_DESC',
  EraIndexerApiesVariancePopulationIdAsc = 'ERA_INDEXER_APIES_VARIANCE_POPULATION_ID_ASC',
  EraIndexerApiesVariancePopulationIdDesc = 'ERA_INDEXER_APIES_VARIANCE_POPULATION_ID_DESC',
  EraIndexerApiesVariancePopulationIndexerApyAsc = 'ERA_INDEXER_APIES_VARIANCE_POPULATION_INDEXER_APY_ASC',
  EraIndexerApiesVariancePopulationIndexerApyDesc = 'ERA_INDEXER_APIES_VARIANCE_POPULATION_INDEXER_APY_DESC',
  EraIndexerApiesVariancePopulationIndexerIdAsc = 'ERA_INDEXER_APIES_VARIANCE_POPULATION_INDEXER_ID_ASC',
  EraIndexerApiesVariancePopulationIndexerIdDesc = 'ERA_INDEXER_APIES_VARIANCE_POPULATION_INDEXER_ID_DESC',
  EraIndexerApiesVariancePopulationIndexerRewardAsc = 'ERA_INDEXER_APIES_VARIANCE_POPULATION_INDEXER_REWARD_ASC',
  EraIndexerApiesVariancePopulationIndexerRewardDesc = 'ERA_INDEXER_APIES_VARIANCE_POPULATION_INDEXER_REWARD_DESC',
  EraIndexerApiesVariancePopulationUpdateAtAsc = 'ERA_INDEXER_APIES_VARIANCE_POPULATION_UPDATE_AT_ASC',
  EraIndexerApiesVariancePopulationUpdateAtDesc = 'ERA_INDEXER_APIES_VARIANCE_POPULATION_UPDATE_AT_DESC',
  EraIndexerApiesVarianceSampleBlockRangeAsc = 'ERA_INDEXER_APIES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  EraIndexerApiesVarianceSampleBlockRangeDesc = 'ERA_INDEXER_APIES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  EraIndexerApiesVarianceSampleCreateAtAsc = 'ERA_INDEXER_APIES_VARIANCE_SAMPLE_CREATE_AT_ASC',
  EraIndexerApiesVarianceSampleCreateAtDesc = 'ERA_INDEXER_APIES_VARIANCE_SAMPLE_CREATE_AT_DESC',
  EraIndexerApiesVarianceSampleDelegatorApyAsc = 'ERA_INDEXER_APIES_VARIANCE_SAMPLE_DELEGATOR_APY_ASC',
  EraIndexerApiesVarianceSampleDelegatorApyDesc = 'ERA_INDEXER_APIES_VARIANCE_SAMPLE_DELEGATOR_APY_DESC',
  EraIndexerApiesVarianceSampleDelegatorRewardAsc = 'ERA_INDEXER_APIES_VARIANCE_SAMPLE_DELEGATOR_REWARD_ASC',
  EraIndexerApiesVarianceSampleDelegatorRewardDesc = 'ERA_INDEXER_APIES_VARIANCE_SAMPLE_DELEGATOR_REWARD_DESC',
  EraIndexerApiesVarianceSampleEraIdxAsc = 'ERA_INDEXER_APIES_VARIANCE_SAMPLE_ERA_IDX_ASC',
  EraIndexerApiesVarianceSampleEraIdxDesc = 'ERA_INDEXER_APIES_VARIANCE_SAMPLE_ERA_IDX_DESC',
  EraIndexerApiesVarianceSampleIdAsc = 'ERA_INDEXER_APIES_VARIANCE_SAMPLE_ID_ASC',
  EraIndexerApiesVarianceSampleIdDesc = 'ERA_INDEXER_APIES_VARIANCE_SAMPLE_ID_DESC',
  EraIndexerApiesVarianceSampleIndexerApyAsc = 'ERA_INDEXER_APIES_VARIANCE_SAMPLE_INDEXER_APY_ASC',
  EraIndexerApiesVarianceSampleIndexerApyDesc = 'ERA_INDEXER_APIES_VARIANCE_SAMPLE_INDEXER_APY_DESC',
  EraIndexerApiesVarianceSampleIndexerIdAsc = 'ERA_INDEXER_APIES_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  EraIndexerApiesVarianceSampleIndexerIdDesc = 'ERA_INDEXER_APIES_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  EraIndexerApiesVarianceSampleIndexerRewardAsc = 'ERA_INDEXER_APIES_VARIANCE_SAMPLE_INDEXER_REWARD_ASC',
  EraIndexerApiesVarianceSampleIndexerRewardDesc = 'ERA_INDEXER_APIES_VARIANCE_SAMPLE_INDEXER_REWARD_DESC',
  EraIndexerApiesVarianceSampleUpdateAtAsc = 'ERA_INDEXER_APIES_VARIANCE_SAMPLE_UPDATE_AT_ASC',
  EraIndexerApiesVarianceSampleUpdateAtDesc = 'ERA_INDEXER_APIES_VARIANCE_SAMPLE_UPDATE_AT_DESC',
  EraIndexerDeploymentApiesAverageAgreementRewardAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_AGREEMENT_REWARD_ASC',
  EraIndexerDeploymentApiesAverageAgreementRewardDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_AGREEMENT_REWARD_DESC',
  EraIndexerDeploymentApiesAverageAllocationRewardAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_ALLOCATION_REWARD_ASC',
  EraIndexerDeploymentApiesAverageAllocationRewardDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_ALLOCATION_REWARD_DESC',
  EraIndexerDeploymentApiesAverageApyAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_APY_ASC',
  EraIndexerDeploymentApiesAverageApyCalcAddedAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_APY_CALC_ADDED_ASC',
  EraIndexerDeploymentApiesAverageApyCalcAddedDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_APY_CALC_ADDED_DESC',
  EraIndexerDeploymentApiesAverageApyCalcAllocationAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_APY_CALC_ALLOCATION_ASC',
  EraIndexerDeploymentApiesAverageApyCalcAllocationDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_APY_CALC_ALLOCATION_DESC',
  EraIndexerDeploymentApiesAverageApyCalcAllocationRecordAtAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_APY_CALC_ALLOCATION_RECORD_AT_ASC',
  EraIndexerDeploymentApiesAverageApyCalcAllocationRecordAtDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_APY_CALC_ALLOCATION_RECORD_AT_DESC',
  EraIndexerDeploymentApiesAverageApyCalcHistoryAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_APY_CALC_HISTORY_ASC',
  EraIndexerDeploymentApiesAverageApyCalcHistoryDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_APY_CALC_HISTORY_DESC',
  EraIndexerDeploymentApiesAverageApyCalcRemovalAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_APY_CALC_REMOVAL_ASC',
  EraIndexerDeploymentApiesAverageApyCalcRemovalDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_APY_CALC_REMOVAL_DESC',
  EraIndexerDeploymentApiesAverageApyDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_APY_DESC',
  EraIndexerDeploymentApiesAverageBlockRangeAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_BLOCK_RANGE_ASC',
  EraIndexerDeploymentApiesAverageBlockRangeDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_BLOCK_RANGE_DESC',
  EraIndexerDeploymentApiesAverageCreateAtAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_CREATE_AT_ASC',
  EraIndexerDeploymentApiesAverageCreateAtDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_CREATE_AT_DESC',
  EraIndexerDeploymentApiesAverageDeploymentIdAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_DEPLOYMENT_ID_ASC',
  EraIndexerDeploymentApiesAverageDeploymentIdDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_DEPLOYMENT_ID_DESC',
  EraIndexerDeploymentApiesAverageEraIdxAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_ERA_IDX_ASC',
  EraIndexerDeploymentApiesAverageEraIdxDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_ERA_IDX_DESC',
  EraIndexerDeploymentApiesAverageFlexPlanRewardAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_FLEX_PLAN_REWARD_ASC',
  EraIndexerDeploymentApiesAverageFlexPlanRewardDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_FLEX_PLAN_REWARD_DESC',
  EraIndexerDeploymentApiesAverageIdAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_ID_ASC',
  EraIndexerDeploymentApiesAverageIdDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_ID_DESC',
  EraIndexerDeploymentApiesAverageIndexerIdAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_INDEXER_ID_ASC',
  EraIndexerDeploymentApiesAverageIndexerIdDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_INDEXER_ID_DESC',
  EraIndexerDeploymentApiesAverageUpdateAtAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_UPDATE_AT_ASC',
  EraIndexerDeploymentApiesAverageUpdateAtDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_AVERAGE_UPDATE_AT_DESC',
  EraIndexerDeploymentApiesByIndexerIdCountAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_BY_INDEXER_ID__COUNT_ASC',
  EraIndexerDeploymentApiesByIndexerIdCountDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_BY_INDEXER_ID__COUNT_DESC',
  EraIndexerDeploymentApiesCountAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_COUNT_ASC',
  EraIndexerDeploymentApiesCountDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_COUNT_DESC',
  EraIndexerDeploymentApiesDistinctCountAgreementRewardAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_AGREEMENT_REWARD_ASC',
  EraIndexerDeploymentApiesDistinctCountAgreementRewardDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_AGREEMENT_REWARD_DESC',
  EraIndexerDeploymentApiesDistinctCountAllocationRewardAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_ALLOCATION_REWARD_ASC',
  EraIndexerDeploymentApiesDistinctCountAllocationRewardDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_ALLOCATION_REWARD_DESC',
  EraIndexerDeploymentApiesDistinctCountApyAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_APY_ASC',
  EraIndexerDeploymentApiesDistinctCountApyCalcAddedAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_APY_CALC_ADDED_ASC',
  EraIndexerDeploymentApiesDistinctCountApyCalcAddedDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_APY_CALC_ADDED_DESC',
  EraIndexerDeploymentApiesDistinctCountApyCalcAllocationAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_APY_CALC_ALLOCATION_ASC',
  EraIndexerDeploymentApiesDistinctCountApyCalcAllocationDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_APY_CALC_ALLOCATION_DESC',
  EraIndexerDeploymentApiesDistinctCountApyCalcAllocationRecordAtAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_APY_CALC_ALLOCATION_RECORD_AT_ASC',
  EraIndexerDeploymentApiesDistinctCountApyCalcAllocationRecordAtDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_APY_CALC_ALLOCATION_RECORD_AT_DESC',
  EraIndexerDeploymentApiesDistinctCountApyCalcHistoryAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_APY_CALC_HISTORY_ASC',
  EraIndexerDeploymentApiesDistinctCountApyCalcHistoryDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_APY_CALC_HISTORY_DESC',
  EraIndexerDeploymentApiesDistinctCountApyCalcRemovalAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_APY_CALC_REMOVAL_ASC',
  EraIndexerDeploymentApiesDistinctCountApyCalcRemovalDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_APY_CALC_REMOVAL_DESC',
  EraIndexerDeploymentApiesDistinctCountApyDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_APY_DESC',
  EraIndexerDeploymentApiesDistinctCountBlockRangeAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  EraIndexerDeploymentApiesDistinctCountBlockRangeDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  EraIndexerDeploymentApiesDistinctCountCreateAtAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_CREATE_AT_ASC',
  EraIndexerDeploymentApiesDistinctCountCreateAtDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_CREATE_AT_DESC',
  EraIndexerDeploymentApiesDistinctCountDeploymentIdAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_DEPLOYMENT_ID_ASC',
  EraIndexerDeploymentApiesDistinctCountDeploymentIdDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_DEPLOYMENT_ID_DESC',
  EraIndexerDeploymentApiesDistinctCountEraIdxAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_ERA_IDX_ASC',
  EraIndexerDeploymentApiesDistinctCountEraIdxDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_ERA_IDX_DESC',
  EraIndexerDeploymentApiesDistinctCountFlexPlanRewardAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_FLEX_PLAN_REWARD_ASC',
  EraIndexerDeploymentApiesDistinctCountFlexPlanRewardDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_FLEX_PLAN_REWARD_DESC',
  EraIndexerDeploymentApiesDistinctCountIdAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_ID_ASC',
  EraIndexerDeploymentApiesDistinctCountIdDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_ID_DESC',
  EraIndexerDeploymentApiesDistinctCountIndexerIdAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_INDEXER_ID_ASC',
  EraIndexerDeploymentApiesDistinctCountIndexerIdDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_INDEXER_ID_DESC',
  EraIndexerDeploymentApiesDistinctCountUpdateAtAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_UPDATE_AT_ASC',
  EraIndexerDeploymentApiesDistinctCountUpdateAtDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_DISTINCT_COUNT_UPDATE_AT_DESC',
  EraIndexerDeploymentApiesMaxAgreementRewardAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_AGREEMENT_REWARD_ASC',
  EraIndexerDeploymentApiesMaxAgreementRewardDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_AGREEMENT_REWARD_DESC',
  EraIndexerDeploymentApiesMaxAllocationRewardAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_ALLOCATION_REWARD_ASC',
  EraIndexerDeploymentApiesMaxAllocationRewardDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_ALLOCATION_REWARD_DESC',
  EraIndexerDeploymentApiesMaxApyAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_APY_ASC',
  EraIndexerDeploymentApiesMaxApyCalcAddedAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_APY_CALC_ADDED_ASC',
  EraIndexerDeploymentApiesMaxApyCalcAddedDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_APY_CALC_ADDED_DESC',
  EraIndexerDeploymentApiesMaxApyCalcAllocationAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_APY_CALC_ALLOCATION_ASC',
  EraIndexerDeploymentApiesMaxApyCalcAllocationDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_APY_CALC_ALLOCATION_DESC',
  EraIndexerDeploymentApiesMaxApyCalcAllocationRecordAtAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_APY_CALC_ALLOCATION_RECORD_AT_ASC',
  EraIndexerDeploymentApiesMaxApyCalcAllocationRecordAtDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_APY_CALC_ALLOCATION_RECORD_AT_DESC',
  EraIndexerDeploymentApiesMaxApyCalcHistoryAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_APY_CALC_HISTORY_ASC',
  EraIndexerDeploymentApiesMaxApyCalcHistoryDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_APY_CALC_HISTORY_DESC',
  EraIndexerDeploymentApiesMaxApyCalcRemovalAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_APY_CALC_REMOVAL_ASC',
  EraIndexerDeploymentApiesMaxApyCalcRemovalDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_APY_CALC_REMOVAL_DESC',
  EraIndexerDeploymentApiesMaxApyDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_APY_DESC',
  EraIndexerDeploymentApiesMaxBlockRangeAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_BLOCK_RANGE_ASC',
  EraIndexerDeploymentApiesMaxBlockRangeDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_BLOCK_RANGE_DESC',
  EraIndexerDeploymentApiesMaxCreateAtAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_CREATE_AT_ASC',
  EraIndexerDeploymentApiesMaxCreateAtDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_CREATE_AT_DESC',
  EraIndexerDeploymentApiesMaxDeploymentIdAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_DEPLOYMENT_ID_ASC',
  EraIndexerDeploymentApiesMaxDeploymentIdDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_DEPLOYMENT_ID_DESC',
  EraIndexerDeploymentApiesMaxEraIdxAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_ERA_IDX_ASC',
  EraIndexerDeploymentApiesMaxEraIdxDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_ERA_IDX_DESC',
  EraIndexerDeploymentApiesMaxFlexPlanRewardAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_FLEX_PLAN_REWARD_ASC',
  EraIndexerDeploymentApiesMaxFlexPlanRewardDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_FLEX_PLAN_REWARD_DESC',
  EraIndexerDeploymentApiesMaxIdAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_ID_ASC',
  EraIndexerDeploymentApiesMaxIdDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_ID_DESC',
  EraIndexerDeploymentApiesMaxIndexerIdAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_INDEXER_ID_ASC',
  EraIndexerDeploymentApiesMaxIndexerIdDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_INDEXER_ID_DESC',
  EraIndexerDeploymentApiesMaxUpdateAtAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_UPDATE_AT_ASC',
  EraIndexerDeploymentApiesMaxUpdateAtDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_MAX_UPDATE_AT_DESC',
  EraIndexerDeploymentApiesMinAgreementRewardAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_AGREEMENT_REWARD_ASC',
  EraIndexerDeploymentApiesMinAgreementRewardDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_AGREEMENT_REWARD_DESC',
  EraIndexerDeploymentApiesMinAllocationRewardAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_ALLOCATION_REWARD_ASC',
  EraIndexerDeploymentApiesMinAllocationRewardDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_ALLOCATION_REWARD_DESC',
  EraIndexerDeploymentApiesMinApyAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_APY_ASC',
  EraIndexerDeploymentApiesMinApyCalcAddedAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_APY_CALC_ADDED_ASC',
  EraIndexerDeploymentApiesMinApyCalcAddedDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_APY_CALC_ADDED_DESC',
  EraIndexerDeploymentApiesMinApyCalcAllocationAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_APY_CALC_ALLOCATION_ASC',
  EraIndexerDeploymentApiesMinApyCalcAllocationDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_APY_CALC_ALLOCATION_DESC',
  EraIndexerDeploymentApiesMinApyCalcAllocationRecordAtAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_APY_CALC_ALLOCATION_RECORD_AT_ASC',
  EraIndexerDeploymentApiesMinApyCalcAllocationRecordAtDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_APY_CALC_ALLOCATION_RECORD_AT_DESC',
  EraIndexerDeploymentApiesMinApyCalcHistoryAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_APY_CALC_HISTORY_ASC',
  EraIndexerDeploymentApiesMinApyCalcHistoryDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_APY_CALC_HISTORY_DESC',
  EraIndexerDeploymentApiesMinApyCalcRemovalAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_APY_CALC_REMOVAL_ASC',
  EraIndexerDeploymentApiesMinApyCalcRemovalDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_APY_CALC_REMOVAL_DESC',
  EraIndexerDeploymentApiesMinApyDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_APY_DESC',
  EraIndexerDeploymentApiesMinBlockRangeAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_BLOCK_RANGE_ASC',
  EraIndexerDeploymentApiesMinBlockRangeDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_BLOCK_RANGE_DESC',
  EraIndexerDeploymentApiesMinCreateAtAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_CREATE_AT_ASC',
  EraIndexerDeploymentApiesMinCreateAtDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_CREATE_AT_DESC',
  EraIndexerDeploymentApiesMinDeploymentIdAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_DEPLOYMENT_ID_ASC',
  EraIndexerDeploymentApiesMinDeploymentIdDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_DEPLOYMENT_ID_DESC',
  EraIndexerDeploymentApiesMinEraIdxAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_ERA_IDX_ASC',
  EraIndexerDeploymentApiesMinEraIdxDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_ERA_IDX_DESC',
  EraIndexerDeploymentApiesMinFlexPlanRewardAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_FLEX_PLAN_REWARD_ASC',
  EraIndexerDeploymentApiesMinFlexPlanRewardDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_FLEX_PLAN_REWARD_DESC',
  EraIndexerDeploymentApiesMinIdAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_ID_ASC',
  EraIndexerDeploymentApiesMinIdDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_ID_DESC',
  EraIndexerDeploymentApiesMinIndexerIdAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_INDEXER_ID_ASC',
  EraIndexerDeploymentApiesMinIndexerIdDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_INDEXER_ID_DESC',
  EraIndexerDeploymentApiesMinUpdateAtAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_UPDATE_AT_ASC',
  EraIndexerDeploymentApiesMinUpdateAtDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_MIN_UPDATE_AT_DESC',
  EraIndexerDeploymentApiesStddevPopulationAgreementRewardAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_AGREEMENT_REWARD_ASC',
  EraIndexerDeploymentApiesStddevPopulationAgreementRewardDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_AGREEMENT_REWARD_DESC',
  EraIndexerDeploymentApiesStddevPopulationAllocationRewardAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_ALLOCATION_REWARD_ASC',
  EraIndexerDeploymentApiesStddevPopulationAllocationRewardDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_ALLOCATION_REWARD_DESC',
  EraIndexerDeploymentApiesStddevPopulationApyAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_APY_ASC',
  EraIndexerDeploymentApiesStddevPopulationApyCalcAddedAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_APY_CALC_ADDED_ASC',
  EraIndexerDeploymentApiesStddevPopulationApyCalcAddedDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_APY_CALC_ADDED_DESC',
  EraIndexerDeploymentApiesStddevPopulationApyCalcAllocationAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_APY_CALC_ALLOCATION_ASC',
  EraIndexerDeploymentApiesStddevPopulationApyCalcAllocationDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_APY_CALC_ALLOCATION_DESC',
  EraIndexerDeploymentApiesStddevPopulationApyCalcAllocationRecordAtAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_APY_CALC_ALLOCATION_RECORD_AT_ASC',
  EraIndexerDeploymentApiesStddevPopulationApyCalcAllocationRecordAtDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_APY_CALC_ALLOCATION_RECORD_AT_DESC',
  EraIndexerDeploymentApiesStddevPopulationApyCalcHistoryAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_APY_CALC_HISTORY_ASC',
  EraIndexerDeploymentApiesStddevPopulationApyCalcHistoryDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_APY_CALC_HISTORY_DESC',
  EraIndexerDeploymentApiesStddevPopulationApyCalcRemovalAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_APY_CALC_REMOVAL_ASC',
  EraIndexerDeploymentApiesStddevPopulationApyCalcRemovalDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_APY_CALC_REMOVAL_DESC',
  EraIndexerDeploymentApiesStddevPopulationApyDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_APY_DESC',
  EraIndexerDeploymentApiesStddevPopulationBlockRangeAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  EraIndexerDeploymentApiesStddevPopulationBlockRangeDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  EraIndexerDeploymentApiesStddevPopulationCreateAtAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_CREATE_AT_ASC',
  EraIndexerDeploymentApiesStddevPopulationCreateAtDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_CREATE_AT_DESC',
  EraIndexerDeploymentApiesStddevPopulationDeploymentIdAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_DEPLOYMENT_ID_ASC',
  EraIndexerDeploymentApiesStddevPopulationDeploymentIdDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_DEPLOYMENT_ID_DESC',
  EraIndexerDeploymentApiesStddevPopulationEraIdxAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_ERA_IDX_ASC',
  EraIndexerDeploymentApiesStddevPopulationEraIdxDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_ERA_IDX_DESC',
  EraIndexerDeploymentApiesStddevPopulationFlexPlanRewardAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_FLEX_PLAN_REWARD_ASC',
  EraIndexerDeploymentApiesStddevPopulationFlexPlanRewardDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_FLEX_PLAN_REWARD_DESC',
  EraIndexerDeploymentApiesStddevPopulationIdAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_ID_ASC',
  EraIndexerDeploymentApiesStddevPopulationIdDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_ID_DESC',
  EraIndexerDeploymentApiesStddevPopulationIndexerIdAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_INDEXER_ID_ASC',
  EraIndexerDeploymentApiesStddevPopulationIndexerIdDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_INDEXER_ID_DESC',
  EraIndexerDeploymentApiesStddevPopulationUpdateAtAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_UPDATE_AT_ASC',
  EraIndexerDeploymentApiesStddevPopulationUpdateAtDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_POPULATION_UPDATE_AT_DESC',
  EraIndexerDeploymentApiesStddevSampleAgreementRewardAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_AGREEMENT_REWARD_ASC',
  EraIndexerDeploymentApiesStddevSampleAgreementRewardDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_AGREEMENT_REWARD_DESC',
  EraIndexerDeploymentApiesStddevSampleAllocationRewardAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_ALLOCATION_REWARD_ASC',
  EraIndexerDeploymentApiesStddevSampleAllocationRewardDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_ALLOCATION_REWARD_DESC',
  EraIndexerDeploymentApiesStddevSampleApyAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_APY_ASC',
  EraIndexerDeploymentApiesStddevSampleApyCalcAddedAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_APY_CALC_ADDED_ASC',
  EraIndexerDeploymentApiesStddevSampleApyCalcAddedDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_APY_CALC_ADDED_DESC',
  EraIndexerDeploymentApiesStddevSampleApyCalcAllocationAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_APY_CALC_ALLOCATION_ASC',
  EraIndexerDeploymentApiesStddevSampleApyCalcAllocationDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_APY_CALC_ALLOCATION_DESC',
  EraIndexerDeploymentApiesStddevSampleApyCalcAllocationRecordAtAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_APY_CALC_ALLOCATION_RECORD_AT_ASC',
  EraIndexerDeploymentApiesStddevSampleApyCalcAllocationRecordAtDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_APY_CALC_ALLOCATION_RECORD_AT_DESC',
  EraIndexerDeploymentApiesStddevSampleApyCalcHistoryAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_APY_CALC_HISTORY_ASC',
  EraIndexerDeploymentApiesStddevSampleApyCalcHistoryDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_APY_CALC_HISTORY_DESC',
  EraIndexerDeploymentApiesStddevSampleApyCalcRemovalAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_APY_CALC_REMOVAL_ASC',
  EraIndexerDeploymentApiesStddevSampleApyCalcRemovalDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_APY_CALC_REMOVAL_DESC',
  EraIndexerDeploymentApiesStddevSampleApyDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_APY_DESC',
  EraIndexerDeploymentApiesStddevSampleBlockRangeAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  EraIndexerDeploymentApiesStddevSampleBlockRangeDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  EraIndexerDeploymentApiesStddevSampleCreateAtAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_CREATE_AT_ASC',
  EraIndexerDeploymentApiesStddevSampleCreateAtDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_CREATE_AT_DESC',
  EraIndexerDeploymentApiesStddevSampleDeploymentIdAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC',
  EraIndexerDeploymentApiesStddevSampleDeploymentIdDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC',
  EraIndexerDeploymentApiesStddevSampleEraIdxAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_ERA_IDX_ASC',
  EraIndexerDeploymentApiesStddevSampleEraIdxDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_ERA_IDX_DESC',
  EraIndexerDeploymentApiesStddevSampleFlexPlanRewardAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_FLEX_PLAN_REWARD_ASC',
  EraIndexerDeploymentApiesStddevSampleFlexPlanRewardDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_FLEX_PLAN_REWARD_DESC',
  EraIndexerDeploymentApiesStddevSampleIdAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_ID_ASC',
  EraIndexerDeploymentApiesStddevSampleIdDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_ID_DESC',
  EraIndexerDeploymentApiesStddevSampleIndexerIdAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_INDEXER_ID_ASC',
  EraIndexerDeploymentApiesStddevSampleIndexerIdDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_INDEXER_ID_DESC',
  EraIndexerDeploymentApiesStddevSampleUpdateAtAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_UPDATE_AT_ASC',
  EraIndexerDeploymentApiesStddevSampleUpdateAtDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_STDDEV_SAMPLE_UPDATE_AT_DESC',
  EraIndexerDeploymentApiesSumAgreementRewardAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_AGREEMENT_REWARD_ASC',
  EraIndexerDeploymentApiesSumAgreementRewardDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_AGREEMENT_REWARD_DESC',
  EraIndexerDeploymentApiesSumAllocationRewardAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_ALLOCATION_REWARD_ASC',
  EraIndexerDeploymentApiesSumAllocationRewardDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_ALLOCATION_REWARD_DESC',
  EraIndexerDeploymentApiesSumApyAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_APY_ASC',
  EraIndexerDeploymentApiesSumApyCalcAddedAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_APY_CALC_ADDED_ASC',
  EraIndexerDeploymentApiesSumApyCalcAddedDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_APY_CALC_ADDED_DESC',
  EraIndexerDeploymentApiesSumApyCalcAllocationAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_APY_CALC_ALLOCATION_ASC',
  EraIndexerDeploymentApiesSumApyCalcAllocationDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_APY_CALC_ALLOCATION_DESC',
  EraIndexerDeploymentApiesSumApyCalcAllocationRecordAtAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_APY_CALC_ALLOCATION_RECORD_AT_ASC',
  EraIndexerDeploymentApiesSumApyCalcAllocationRecordAtDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_APY_CALC_ALLOCATION_RECORD_AT_DESC',
  EraIndexerDeploymentApiesSumApyCalcHistoryAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_APY_CALC_HISTORY_ASC',
  EraIndexerDeploymentApiesSumApyCalcHistoryDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_APY_CALC_HISTORY_DESC',
  EraIndexerDeploymentApiesSumApyCalcRemovalAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_APY_CALC_REMOVAL_ASC',
  EraIndexerDeploymentApiesSumApyCalcRemovalDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_APY_CALC_REMOVAL_DESC',
  EraIndexerDeploymentApiesSumApyDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_APY_DESC',
  EraIndexerDeploymentApiesSumBlockRangeAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_BLOCK_RANGE_ASC',
  EraIndexerDeploymentApiesSumBlockRangeDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_BLOCK_RANGE_DESC',
  EraIndexerDeploymentApiesSumCreateAtAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_CREATE_AT_ASC',
  EraIndexerDeploymentApiesSumCreateAtDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_CREATE_AT_DESC',
  EraIndexerDeploymentApiesSumDeploymentIdAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_DEPLOYMENT_ID_ASC',
  EraIndexerDeploymentApiesSumDeploymentIdDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_DEPLOYMENT_ID_DESC',
  EraIndexerDeploymentApiesSumEraIdxAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_ERA_IDX_ASC',
  EraIndexerDeploymentApiesSumEraIdxDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_ERA_IDX_DESC',
  EraIndexerDeploymentApiesSumFlexPlanRewardAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_FLEX_PLAN_REWARD_ASC',
  EraIndexerDeploymentApiesSumFlexPlanRewardDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_FLEX_PLAN_REWARD_DESC',
  EraIndexerDeploymentApiesSumIdAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_ID_ASC',
  EraIndexerDeploymentApiesSumIdDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_ID_DESC',
  EraIndexerDeploymentApiesSumIndexerIdAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_INDEXER_ID_ASC',
  EraIndexerDeploymentApiesSumIndexerIdDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_INDEXER_ID_DESC',
  EraIndexerDeploymentApiesSumUpdateAtAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_UPDATE_AT_ASC',
  EraIndexerDeploymentApiesSumUpdateAtDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_SUM_UPDATE_AT_DESC',
  EraIndexerDeploymentApiesVariancePopulationAgreementRewardAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_AGREEMENT_REWARD_ASC',
  EraIndexerDeploymentApiesVariancePopulationAgreementRewardDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_AGREEMENT_REWARD_DESC',
  EraIndexerDeploymentApiesVariancePopulationAllocationRewardAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_ALLOCATION_REWARD_ASC',
  EraIndexerDeploymentApiesVariancePopulationAllocationRewardDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_ALLOCATION_REWARD_DESC',
  EraIndexerDeploymentApiesVariancePopulationApyAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_APY_ASC',
  EraIndexerDeploymentApiesVariancePopulationApyCalcAddedAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_APY_CALC_ADDED_ASC',
  EraIndexerDeploymentApiesVariancePopulationApyCalcAddedDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_APY_CALC_ADDED_DESC',
  EraIndexerDeploymentApiesVariancePopulationApyCalcAllocationAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_APY_CALC_ALLOCATION_ASC',
  EraIndexerDeploymentApiesVariancePopulationApyCalcAllocationDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_APY_CALC_ALLOCATION_DESC',
  EraIndexerDeploymentApiesVariancePopulationApyCalcAllocationRecordAtAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_APY_CALC_ALLOCATION_RECORD_AT_ASC',
  EraIndexerDeploymentApiesVariancePopulationApyCalcAllocationRecordAtDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_APY_CALC_ALLOCATION_RECORD_AT_DESC',
  EraIndexerDeploymentApiesVariancePopulationApyCalcHistoryAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_APY_CALC_HISTORY_ASC',
  EraIndexerDeploymentApiesVariancePopulationApyCalcHistoryDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_APY_CALC_HISTORY_DESC',
  EraIndexerDeploymentApiesVariancePopulationApyCalcRemovalAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_APY_CALC_REMOVAL_ASC',
  EraIndexerDeploymentApiesVariancePopulationApyCalcRemovalDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_APY_CALC_REMOVAL_DESC',
  EraIndexerDeploymentApiesVariancePopulationApyDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_APY_DESC',
  EraIndexerDeploymentApiesVariancePopulationBlockRangeAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  EraIndexerDeploymentApiesVariancePopulationBlockRangeDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  EraIndexerDeploymentApiesVariancePopulationCreateAtAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_CREATE_AT_ASC',
  EraIndexerDeploymentApiesVariancePopulationCreateAtDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_CREATE_AT_DESC',
  EraIndexerDeploymentApiesVariancePopulationDeploymentIdAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC',
  EraIndexerDeploymentApiesVariancePopulationDeploymentIdDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC',
  EraIndexerDeploymentApiesVariancePopulationEraIdxAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_ERA_IDX_ASC',
  EraIndexerDeploymentApiesVariancePopulationEraIdxDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_ERA_IDX_DESC',
  EraIndexerDeploymentApiesVariancePopulationFlexPlanRewardAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_FLEX_PLAN_REWARD_ASC',
  EraIndexerDeploymentApiesVariancePopulationFlexPlanRewardDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_FLEX_PLAN_REWARD_DESC',
  EraIndexerDeploymentApiesVariancePopulationIdAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_ID_ASC',
  EraIndexerDeploymentApiesVariancePopulationIdDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_ID_DESC',
  EraIndexerDeploymentApiesVariancePopulationIndexerIdAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_INDEXER_ID_ASC',
  EraIndexerDeploymentApiesVariancePopulationIndexerIdDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_INDEXER_ID_DESC',
  EraIndexerDeploymentApiesVariancePopulationUpdateAtAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_UPDATE_AT_ASC',
  EraIndexerDeploymentApiesVariancePopulationUpdateAtDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_POPULATION_UPDATE_AT_DESC',
  EraIndexerDeploymentApiesVarianceSampleAgreementRewardAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_AGREEMENT_REWARD_ASC',
  EraIndexerDeploymentApiesVarianceSampleAgreementRewardDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_AGREEMENT_REWARD_DESC',
  EraIndexerDeploymentApiesVarianceSampleAllocationRewardAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_ALLOCATION_REWARD_ASC',
  EraIndexerDeploymentApiesVarianceSampleAllocationRewardDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_ALLOCATION_REWARD_DESC',
  EraIndexerDeploymentApiesVarianceSampleApyAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_APY_ASC',
  EraIndexerDeploymentApiesVarianceSampleApyCalcAddedAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_APY_CALC_ADDED_ASC',
  EraIndexerDeploymentApiesVarianceSampleApyCalcAddedDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_APY_CALC_ADDED_DESC',
  EraIndexerDeploymentApiesVarianceSampleApyCalcAllocationAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_APY_CALC_ALLOCATION_ASC',
  EraIndexerDeploymentApiesVarianceSampleApyCalcAllocationDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_APY_CALC_ALLOCATION_DESC',
  EraIndexerDeploymentApiesVarianceSampleApyCalcAllocationRecordAtAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_APY_CALC_ALLOCATION_RECORD_AT_ASC',
  EraIndexerDeploymentApiesVarianceSampleApyCalcAllocationRecordAtDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_APY_CALC_ALLOCATION_RECORD_AT_DESC',
  EraIndexerDeploymentApiesVarianceSampleApyCalcHistoryAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_APY_CALC_HISTORY_ASC',
  EraIndexerDeploymentApiesVarianceSampleApyCalcHistoryDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_APY_CALC_HISTORY_DESC',
  EraIndexerDeploymentApiesVarianceSampleApyCalcRemovalAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_APY_CALC_REMOVAL_ASC',
  EraIndexerDeploymentApiesVarianceSampleApyCalcRemovalDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_APY_CALC_REMOVAL_DESC',
  EraIndexerDeploymentApiesVarianceSampleApyDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_APY_DESC',
  EraIndexerDeploymentApiesVarianceSampleBlockRangeAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  EraIndexerDeploymentApiesVarianceSampleBlockRangeDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  EraIndexerDeploymentApiesVarianceSampleCreateAtAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_CREATE_AT_ASC',
  EraIndexerDeploymentApiesVarianceSampleCreateAtDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_CREATE_AT_DESC',
  EraIndexerDeploymentApiesVarianceSampleDeploymentIdAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC',
  EraIndexerDeploymentApiesVarianceSampleDeploymentIdDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC',
  EraIndexerDeploymentApiesVarianceSampleEraIdxAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_ERA_IDX_ASC',
  EraIndexerDeploymentApiesVarianceSampleEraIdxDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_ERA_IDX_DESC',
  EraIndexerDeploymentApiesVarianceSampleFlexPlanRewardAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_FLEX_PLAN_REWARD_ASC',
  EraIndexerDeploymentApiesVarianceSampleFlexPlanRewardDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_FLEX_PLAN_REWARD_DESC',
  EraIndexerDeploymentApiesVarianceSampleIdAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_ID_ASC',
  EraIndexerDeploymentApiesVarianceSampleIdDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_ID_DESC',
  EraIndexerDeploymentApiesVarianceSampleIndexerIdAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  EraIndexerDeploymentApiesVarianceSampleIndexerIdDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  EraIndexerDeploymentApiesVarianceSampleUpdateAtAsc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_UPDATE_AT_ASC',
  EraIndexerDeploymentApiesVarianceSampleUpdateAtDesc = 'ERA_INDEXER_DEPLOYMENT_APIES_VARIANCE_SAMPLE_UPDATE_AT_DESC',
  EraRewardsAverageAmountAsc = 'ERA_REWARDS_AVERAGE_AMOUNT_ASC',
  EraRewardsAverageAmountDesc = 'ERA_REWARDS_AVERAGE_AMOUNT_DESC',
  EraRewardsAverageBlockRangeAsc = 'ERA_REWARDS_AVERAGE_BLOCK_RANGE_ASC',
  EraRewardsAverageBlockRangeDesc = 'ERA_REWARDS_AVERAGE_BLOCK_RANGE_DESC',
  EraRewardsAverageClaimedAsc = 'ERA_REWARDS_AVERAGE_CLAIMED_ASC',
  EraRewardsAverageClaimedDesc = 'ERA_REWARDS_AVERAGE_CLAIMED_DESC',
  EraRewardsAverageCreatedBlockAsc = 'ERA_REWARDS_AVERAGE_CREATED_BLOCK_ASC',
  EraRewardsAverageCreatedBlockDesc = 'ERA_REWARDS_AVERAGE_CREATED_BLOCK_DESC',
  EraRewardsAverageCreatedTimestampAsc = 'ERA_REWARDS_AVERAGE_CREATED_TIMESTAMP_ASC',
  EraRewardsAverageCreatedTimestampDesc = 'ERA_REWARDS_AVERAGE_CREATED_TIMESTAMP_DESC',
  EraRewardsAverageDelegatorIdAsc = 'ERA_REWARDS_AVERAGE_DELEGATOR_ID_ASC',
  EraRewardsAverageDelegatorIdDesc = 'ERA_REWARDS_AVERAGE_DELEGATOR_ID_DESC',
  EraRewardsAverageEraIdxAsc = 'ERA_REWARDS_AVERAGE_ERA_IDX_ASC',
  EraRewardsAverageEraIdxDesc = 'ERA_REWARDS_AVERAGE_ERA_IDX_DESC',
  EraRewardsAverageEraIdAsc = 'ERA_REWARDS_AVERAGE_ERA_ID_ASC',
  EraRewardsAverageEraIdDesc = 'ERA_REWARDS_AVERAGE_ERA_ID_DESC',
  EraRewardsAverageIdAsc = 'ERA_REWARDS_AVERAGE_ID_ASC',
  EraRewardsAverageIdDesc = 'ERA_REWARDS_AVERAGE_ID_DESC',
  EraRewardsAverageIndexerIdAsc = 'ERA_REWARDS_AVERAGE_INDEXER_ID_ASC',
  EraRewardsAverageIndexerIdDesc = 'ERA_REWARDS_AVERAGE_INDEXER_ID_DESC',
  EraRewardsAverageIsCommissionAsc = 'ERA_REWARDS_AVERAGE_IS_COMMISSION_ASC',
  EraRewardsAverageIsCommissionDesc = 'ERA_REWARDS_AVERAGE_IS_COMMISSION_DESC',
  EraRewardsAverageIsIndexerAsc = 'ERA_REWARDS_AVERAGE_IS_INDEXER_ASC',
  EraRewardsAverageIsIndexerDesc = 'ERA_REWARDS_AVERAGE_IS_INDEXER_DESC',
  EraRewardsByIndexerIdCountAsc = 'ERA_REWARDS_BY_INDEXER_ID__COUNT_ASC',
  EraRewardsByIndexerIdCountDesc = 'ERA_REWARDS_BY_INDEXER_ID__COUNT_DESC',
  EraRewardsCountAsc = 'ERA_REWARDS_COUNT_ASC',
  EraRewardsCountDesc = 'ERA_REWARDS_COUNT_DESC',
  EraRewardsDistinctCountAmountAsc = 'ERA_REWARDS_DISTINCT_COUNT_AMOUNT_ASC',
  EraRewardsDistinctCountAmountDesc = 'ERA_REWARDS_DISTINCT_COUNT_AMOUNT_DESC',
  EraRewardsDistinctCountBlockRangeAsc = 'ERA_REWARDS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  EraRewardsDistinctCountBlockRangeDesc = 'ERA_REWARDS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  EraRewardsDistinctCountClaimedAsc = 'ERA_REWARDS_DISTINCT_COUNT_CLAIMED_ASC',
  EraRewardsDistinctCountClaimedDesc = 'ERA_REWARDS_DISTINCT_COUNT_CLAIMED_DESC',
  EraRewardsDistinctCountCreatedBlockAsc = 'ERA_REWARDS_DISTINCT_COUNT_CREATED_BLOCK_ASC',
  EraRewardsDistinctCountCreatedBlockDesc = 'ERA_REWARDS_DISTINCT_COUNT_CREATED_BLOCK_DESC',
  EraRewardsDistinctCountCreatedTimestampAsc = 'ERA_REWARDS_DISTINCT_COUNT_CREATED_TIMESTAMP_ASC',
  EraRewardsDistinctCountCreatedTimestampDesc = 'ERA_REWARDS_DISTINCT_COUNT_CREATED_TIMESTAMP_DESC',
  EraRewardsDistinctCountDelegatorIdAsc = 'ERA_REWARDS_DISTINCT_COUNT_DELEGATOR_ID_ASC',
  EraRewardsDistinctCountDelegatorIdDesc = 'ERA_REWARDS_DISTINCT_COUNT_DELEGATOR_ID_DESC',
  EraRewardsDistinctCountEraIdxAsc = 'ERA_REWARDS_DISTINCT_COUNT_ERA_IDX_ASC',
  EraRewardsDistinctCountEraIdxDesc = 'ERA_REWARDS_DISTINCT_COUNT_ERA_IDX_DESC',
  EraRewardsDistinctCountEraIdAsc = 'ERA_REWARDS_DISTINCT_COUNT_ERA_ID_ASC',
  EraRewardsDistinctCountEraIdDesc = 'ERA_REWARDS_DISTINCT_COUNT_ERA_ID_DESC',
  EraRewardsDistinctCountIdAsc = 'ERA_REWARDS_DISTINCT_COUNT_ID_ASC',
  EraRewardsDistinctCountIdDesc = 'ERA_REWARDS_DISTINCT_COUNT_ID_DESC',
  EraRewardsDistinctCountIndexerIdAsc = 'ERA_REWARDS_DISTINCT_COUNT_INDEXER_ID_ASC',
  EraRewardsDistinctCountIndexerIdDesc = 'ERA_REWARDS_DISTINCT_COUNT_INDEXER_ID_DESC',
  EraRewardsDistinctCountIsCommissionAsc = 'ERA_REWARDS_DISTINCT_COUNT_IS_COMMISSION_ASC',
  EraRewardsDistinctCountIsCommissionDesc = 'ERA_REWARDS_DISTINCT_COUNT_IS_COMMISSION_DESC',
  EraRewardsDistinctCountIsIndexerAsc = 'ERA_REWARDS_DISTINCT_COUNT_IS_INDEXER_ASC',
  EraRewardsDistinctCountIsIndexerDesc = 'ERA_REWARDS_DISTINCT_COUNT_IS_INDEXER_DESC',
  EraRewardsMaxAmountAsc = 'ERA_REWARDS_MAX_AMOUNT_ASC',
  EraRewardsMaxAmountDesc = 'ERA_REWARDS_MAX_AMOUNT_DESC',
  EraRewardsMaxBlockRangeAsc = 'ERA_REWARDS_MAX_BLOCK_RANGE_ASC',
  EraRewardsMaxBlockRangeDesc = 'ERA_REWARDS_MAX_BLOCK_RANGE_DESC',
  EraRewardsMaxClaimedAsc = 'ERA_REWARDS_MAX_CLAIMED_ASC',
  EraRewardsMaxClaimedDesc = 'ERA_REWARDS_MAX_CLAIMED_DESC',
  EraRewardsMaxCreatedBlockAsc = 'ERA_REWARDS_MAX_CREATED_BLOCK_ASC',
  EraRewardsMaxCreatedBlockDesc = 'ERA_REWARDS_MAX_CREATED_BLOCK_DESC',
  EraRewardsMaxCreatedTimestampAsc = 'ERA_REWARDS_MAX_CREATED_TIMESTAMP_ASC',
  EraRewardsMaxCreatedTimestampDesc = 'ERA_REWARDS_MAX_CREATED_TIMESTAMP_DESC',
  EraRewardsMaxDelegatorIdAsc = 'ERA_REWARDS_MAX_DELEGATOR_ID_ASC',
  EraRewardsMaxDelegatorIdDesc = 'ERA_REWARDS_MAX_DELEGATOR_ID_DESC',
  EraRewardsMaxEraIdxAsc = 'ERA_REWARDS_MAX_ERA_IDX_ASC',
  EraRewardsMaxEraIdxDesc = 'ERA_REWARDS_MAX_ERA_IDX_DESC',
  EraRewardsMaxEraIdAsc = 'ERA_REWARDS_MAX_ERA_ID_ASC',
  EraRewardsMaxEraIdDesc = 'ERA_REWARDS_MAX_ERA_ID_DESC',
  EraRewardsMaxIdAsc = 'ERA_REWARDS_MAX_ID_ASC',
  EraRewardsMaxIdDesc = 'ERA_REWARDS_MAX_ID_DESC',
  EraRewardsMaxIndexerIdAsc = 'ERA_REWARDS_MAX_INDEXER_ID_ASC',
  EraRewardsMaxIndexerIdDesc = 'ERA_REWARDS_MAX_INDEXER_ID_DESC',
  EraRewardsMaxIsCommissionAsc = 'ERA_REWARDS_MAX_IS_COMMISSION_ASC',
  EraRewardsMaxIsCommissionDesc = 'ERA_REWARDS_MAX_IS_COMMISSION_DESC',
  EraRewardsMaxIsIndexerAsc = 'ERA_REWARDS_MAX_IS_INDEXER_ASC',
  EraRewardsMaxIsIndexerDesc = 'ERA_REWARDS_MAX_IS_INDEXER_DESC',
  EraRewardsMinAmountAsc = 'ERA_REWARDS_MIN_AMOUNT_ASC',
  EraRewardsMinAmountDesc = 'ERA_REWARDS_MIN_AMOUNT_DESC',
  EraRewardsMinBlockRangeAsc = 'ERA_REWARDS_MIN_BLOCK_RANGE_ASC',
  EraRewardsMinBlockRangeDesc = 'ERA_REWARDS_MIN_BLOCK_RANGE_DESC',
  EraRewardsMinClaimedAsc = 'ERA_REWARDS_MIN_CLAIMED_ASC',
  EraRewardsMinClaimedDesc = 'ERA_REWARDS_MIN_CLAIMED_DESC',
  EraRewardsMinCreatedBlockAsc = 'ERA_REWARDS_MIN_CREATED_BLOCK_ASC',
  EraRewardsMinCreatedBlockDesc = 'ERA_REWARDS_MIN_CREATED_BLOCK_DESC',
  EraRewardsMinCreatedTimestampAsc = 'ERA_REWARDS_MIN_CREATED_TIMESTAMP_ASC',
  EraRewardsMinCreatedTimestampDesc = 'ERA_REWARDS_MIN_CREATED_TIMESTAMP_DESC',
  EraRewardsMinDelegatorIdAsc = 'ERA_REWARDS_MIN_DELEGATOR_ID_ASC',
  EraRewardsMinDelegatorIdDesc = 'ERA_REWARDS_MIN_DELEGATOR_ID_DESC',
  EraRewardsMinEraIdxAsc = 'ERA_REWARDS_MIN_ERA_IDX_ASC',
  EraRewardsMinEraIdxDesc = 'ERA_REWARDS_MIN_ERA_IDX_DESC',
  EraRewardsMinEraIdAsc = 'ERA_REWARDS_MIN_ERA_ID_ASC',
  EraRewardsMinEraIdDesc = 'ERA_REWARDS_MIN_ERA_ID_DESC',
  EraRewardsMinIdAsc = 'ERA_REWARDS_MIN_ID_ASC',
  EraRewardsMinIdDesc = 'ERA_REWARDS_MIN_ID_DESC',
  EraRewardsMinIndexerIdAsc = 'ERA_REWARDS_MIN_INDEXER_ID_ASC',
  EraRewardsMinIndexerIdDesc = 'ERA_REWARDS_MIN_INDEXER_ID_DESC',
  EraRewardsMinIsCommissionAsc = 'ERA_REWARDS_MIN_IS_COMMISSION_ASC',
  EraRewardsMinIsCommissionDesc = 'ERA_REWARDS_MIN_IS_COMMISSION_DESC',
  EraRewardsMinIsIndexerAsc = 'ERA_REWARDS_MIN_IS_INDEXER_ASC',
  EraRewardsMinIsIndexerDesc = 'ERA_REWARDS_MIN_IS_INDEXER_DESC',
  EraRewardsStddevPopulationAmountAsc = 'ERA_REWARDS_STDDEV_POPULATION_AMOUNT_ASC',
  EraRewardsStddevPopulationAmountDesc = 'ERA_REWARDS_STDDEV_POPULATION_AMOUNT_DESC',
  EraRewardsStddevPopulationBlockRangeAsc = 'ERA_REWARDS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  EraRewardsStddevPopulationBlockRangeDesc = 'ERA_REWARDS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  EraRewardsStddevPopulationClaimedAsc = 'ERA_REWARDS_STDDEV_POPULATION_CLAIMED_ASC',
  EraRewardsStddevPopulationClaimedDesc = 'ERA_REWARDS_STDDEV_POPULATION_CLAIMED_DESC',
  EraRewardsStddevPopulationCreatedBlockAsc = 'ERA_REWARDS_STDDEV_POPULATION_CREATED_BLOCK_ASC',
  EraRewardsStddevPopulationCreatedBlockDesc = 'ERA_REWARDS_STDDEV_POPULATION_CREATED_BLOCK_DESC',
  EraRewardsStddevPopulationCreatedTimestampAsc = 'ERA_REWARDS_STDDEV_POPULATION_CREATED_TIMESTAMP_ASC',
  EraRewardsStddevPopulationCreatedTimestampDesc = 'ERA_REWARDS_STDDEV_POPULATION_CREATED_TIMESTAMP_DESC',
  EraRewardsStddevPopulationDelegatorIdAsc = 'ERA_REWARDS_STDDEV_POPULATION_DELEGATOR_ID_ASC',
  EraRewardsStddevPopulationDelegatorIdDesc = 'ERA_REWARDS_STDDEV_POPULATION_DELEGATOR_ID_DESC',
  EraRewardsStddevPopulationEraIdxAsc = 'ERA_REWARDS_STDDEV_POPULATION_ERA_IDX_ASC',
  EraRewardsStddevPopulationEraIdxDesc = 'ERA_REWARDS_STDDEV_POPULATION_ERA_IDX_DESC',
  EraRewardsStddevPopulationEraIdAsc = 'ERA_REWARDS_STDDEV_POPULATION_ERA_ID_ASC',
  EraRewardsStddevPopulationEraIdDesc = 'ERA_REWARDS_STDDEV_POPULATION_ERA_ID_DESC',
  EraRewardsStddevPopulationIdAsc = 'ERA_REWARDS_STDDEV_POPULATION_ID_ASC',
  EraRewardsStddevPopulationIdDesc = 'ERA_REWARDS_STDDEV_POPULATION_ID_DESC',
  EraRewardsStddevPopulationIndexerIdAsc = 'ERA_REWARDS_STDDEV_POPULATION_INDEXER_ID_ASC',
  EraRewardsStddevPopulationIndexerIdDesc = 'ERA_REWARDS_STDDEV_POPULATION_INDEXER_ID_DESC',
  EraRewardsStddevPopulationIsCommissionAsc = 'ERA_REWARDS_STDDEV_POPULATION_IS_COMMISSION_ASC',
  EraRewardsStddevPopulationIsCommissionDesc = 'ERA_REWARDS_STDDEV_POPULATION_IS_COMMISSION_DESC',
  EraRewardsStddevPopulationIsIndexerAsc = 'ERA_REWARDS_STDDEV_POPULATION_IS_INDEXER_ASC',
  EraRewardsStddevPopulationIsIndexerDesc = 'ERA_REWARDS_STDDEV_POPULATION_IS_INDEXER_DESC',
  EraRewardsStddevSampleAmountAsc = 'ERA_REWARDS_STDDEV_SAMPLE_AMOUNT_ASC',
  EraRewardsStddevSampleAmountDesc = 'ERA_REWARDS_STDDEV_SAMPLE_AMOUNT_DESC',
  EraRewardsStddevSampleBlockRangeAsc = 'ERA_REWARDS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  EraRewardsStddevSampleBlockRangeDesc = 'ERA_REWARDS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  EraRewardsStddevSampleClaimedAsc = 'ERA_REWARDS_STDDEV_SAMPLE_CLAIMED_ASC',
  EraRewardsStddevSampleClaimedDesc = 'ERA_REWARDS_STDDEV_SAMPLE_CLAIMED_DESC',
  EraRewardsStddevSampleCreatedBlockAsc = 'ERA_REWARDS_STDDEV_SAMPLE_CREATED_BLOCK_ASC',
  EraRewardsStddevSampleCreatedBlockDesc = 'ERA_REWARDS_STDDEV_SAMPLE_CREATED_BLOCK_DESC',
  EraRewardsStddevSampleCreatedTimestampAsc = 'ERA_REWARDS_STDDEV_SAMPLE_CREATED_TIMESTAMP_ASC',
  EraRewardsStddevSampleCreatedTimestampDesc = 'ERA_REWARDS_STDDEV_SAMPLE_CREATED_TIMESTAMP_DESC',
  EraRewardsStddevSampleDelegatorIdAsc = 'ERA_REWARDS_STDDEV_SAMPLE_DELEGATOR_ID_ASC',
  EraRewardsStddevSampleDelegatorIdDesc = 'ERA_REWARDS_STDDEV_SAMPLE_DELEGATOR_ID_DESC',
  EraRewardsStddevSampleEraIdxAsc = 'ERA_REWARDS_STDDEV_SAMPLE_ERA_IDX_ASC',
  EraRewardsStddevSampleEraIdxDesc = 'ERA_REWARDS_STDDEV_SAMPLE_ERA_IDX_DESC',
  EraRewardsStddevSampleEraIdAsc = 'ERA_REWARDS_STDDEV_SAMPLE_ERA_ID_ASC',
  EraRewardsStddevSampleEraIdDesc = 'ERA_REWARDS_STDDEV_SAMPLE_ERA_ID_DESC',
  EraRewardsStddevSampleIdAsc = 'ERA_REWARDS_STDDEV_SAMPLE_ID_ASC',
  EraRewardsStddevSampleIdDesc = 'ERA_REWARDS_STDDEV_SAMPLE_ID_DESC',
  EraRewardsStddevSampleIndexerIdAsc = 'ERA_REWARDS_STDDEV_SAMPLE_INDEXER_ID_ASC',
  EraRewardsStddevSampleIndexerIdDesc = 'ERA_REWARDS_STDDEV_SAMPLE_INDEXER_ID_DESC',
  EraRewardsStddevSampleIsCommissionAsc = 'ERA_REWARDS_STDDEV_SAMPLE_IS_COMMISSION_ASC',
  EraRewardsStddevSampleIsCommissionDesc = 'ERA_REWARDS_STDDEV_SAMPLE_IS_COMMISSION_DESC',
  EraRewardsStddevSampleIsIndexerAsc = 'ERA_REWARDS_STDDEV_SAMPLE_IS_INDEXER_ASC',
  EraRewardsStddevSampleIsIndexerDesc = 'ERA_REWARDS_STDDEV_SAMPLE_IS_INDEXER_DESC',
  EraRewardsSumAmountAsc = 'ERA_REWARDS_SUM_AMOUNT_ASC',
  EraRewardsSumAmountDesc = 'ERA_REWARDS_SUM_AMOUNT_DESC',
  EraRewardsSumBlockRangeAsc = 'ERA_REWARDS_SUM_BLOCK_RANGE_ASC',
  EraRewardsSumBlockRangeDesc = 'ERA_REWARDS_SUM_BLOCK_RANGE_DESC',
  EraRewardsSumClaimedAsc = 'ERA_REWARDS_SUM_CLAIMED_ASC',
  EraRewardsSumClaimedDesc = 'ERA_REWARDS_SUM_CLAIMED_DESC',
  EraRewardsSumCreatedBlockAsc = 'ERA_REWARDS_SUM_CREATED_BLOCK_ASC',
  EraRewardsSumCreatedBlockDesc = 'ERA_REWARDS_SUM_CREATED_BLOCK_DESC',
  EraRewardsSumCreatedTimestampAsc = 'ERA_REWARDS_SUM_CREATED_TIMESTAMP_ASC',
  EraRewardsSumCreatedTimestampDesc = 'ERA_REWARDS_SUM_CREATED_TIMESTAMP_DESC',
  EraRewardsSumDelegatorIdAsc = 'ERA_REWARDS_SUM_DELEGATOR_ID_ASC',
  EraRewardsSumDelegatorIdDesc = 'ERA_REWARDS_SUM_DELEGATOR_ID_DESC',
  EraRewardsSumEraIdxAsc = 'ERA_REWARDS_SUM_ERA_IDX_ASC',
  EraRewardsSumEraIdxDesc = 'ERA_REWARDS_SUM_ERA_IDX_DESC',
  EraRewardsSumEraIdAsc = 'ERA_REWARDS_SUM_ERA_ID_ASC',
  EraRewardsSumEraIdDesc = 'ERA_REWARDS_SUM_ERA_ID_DESC',
  EraRewardsSumIdAsc = 'ERA_REWARDS_SUM_ID_ASC',
  EraRewardsSumIdDesc = 'ERA_REWARDS_SUM_ID_DESC',
  EraRewardsSumIndexerIdAsc = 'ERA_REWARDS_SUM_INDEXER_ID_ASC',
  EraRewardsSumIndexerIdDesc = 'ERA_REWARDS_SUM_INDEXER_ID_DESC',
  EraRewardsSumIsCommissionAsc = 'ERA_REWARDS_SUM_IS_COMMISSION_ASC',
  EraRewardsSumIsCommissionDesc = 'ERA_REWARDS_SUM_IS_COMMISSION_DESC',
  EraRewardsSumIsIndexerAsc = 'ERA_REWARDS_SUM_IS_INDEXER_ASC',
  EraRewardsSumIsIndexerDesc = 'ERA_REWARDS_SUM_IS_INDEXER_DESC',
  EraRewardsVariancePopulationAmountAsc = 'ERA_REWARDS_VARIANCE_POPULATION_AMOUNT_ASC',
  EraRewardsVariancePopulationAmountDesc = 'ERA_REWARDS_VARIANCE_POPULATION_AMOUNT_DESC',
  EraRewardsVariancePopulationBlockRangeAsc = 'ERA_REWARDS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  EraRewardsVariancePopulationBlockRangeDesc = 'ERA_REWARDS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  EraRewardsVariancePopulationClaimedAsc = 'ERA_REWARDS_VARIANCE_POPULATION_CLAIMED_ASC',
  EraRewardsVariancePopulationClaimedDesc = 'ERA_REWARDS_VARIANCE_POPULATION_CLAIMED_DESC',
  EraRewardsVariancePopulationCreatedBlockAsc = 'ERA_REWARDS_VARIANCE_POPULATION_CREATED_BLOCK_ASC',
  EraRewardsVariancePopulationCreatedBlockDesc = 'ERA_REWARDS_VARIANCE_POPULATION_CREATED_BLOCK_DESC',
  EraRewardsVariancePopulationCreatedTimestampAsc = 'ERA_REWARDS_VARIANCE_POPULATION_CREATED_TIMESTAMP_ASC',
  EraRewardsVariancePopulationCreatedTimestampDesc = 'ERA_REWARDS_VARIANCE_POPULATION_CREATED_TIMESTAMP_DESC',
  EraRewardsVariancePopulationDelegatorIdAsc = 'ERA_REWARDS_VARIANCE_POPULATION_DELEGATOR_ID_ASC',
  EraRewardsVariancePopulationDelegatorIdDesc = 'ERA_REWARDS_VARIANCE_POPULATION_DELEGATOR_ID_DESC',
  EraRewardsVariancePopulationEraIdxAsc = 'ERA_REWARDS_VARIANCE_POPULATION_ERA_IDX_ASC',
  EraRewardsVariancePopulationEraIdxDesc = 'ERA_REWARDS_VARIANCE_POPULATION_ERA_IDX_DESC',
  EraRewardsVariancePopulationEraIdAsc = 'ERA_REWARDS_VARIANCE_POPULATION_ERA_ID_ASC',
  EraRewardsVariancePopulationEraIdDesc = 'ERA_REWARDS_VARIANCE_POPULATION_ERA_ID_DESC',
  EraRewardsVariancePopulationIdAsc = 'ERA_REWARDS_VARIANCE_POPULATION_ID_ASC',
  EraRewardsVariancePopulationIdDesc = 'ERA_REWARDS_VARIANCE_POPULATION_ID_DESC',
  EraRewardsVariancePopulationIndexerIdAsc = 'ERA_REWARDS_VARIANCE_POPULATION_INDEXER_ID_ASC',
  EraRewardsVariancePopulationIndexerIdDesc = 'ERA_REWARDS_VARIANCE_POPULATION_INDEXER_ID_DESC',
  EraRewardsVariancePopulationIsCommissionAsc = 'ERA_REWARDS_VARIANCE_POPULATION_IS_COMMISSION_ASC',
  EraRewardsVariancePopulationIsCommissionDesc = 'ERA_REWARDS_VARIANCE_POPULATION_IS_COMMISSION_DESC',
  EraRewardsVariancePopulationIsIndexerAsc = 'ERA_REWARDS_VARIANCE_POPULATION_IS_INDEXER_ASC',
  EraRewardsVariancePopulationIsIndexerDesc = 'ERA_REWARDS_VARIANCE_POPULATION_IS_INDEXER_DESC',
  EraRewardsVarianceSampleAmountAsc = 'ERA_REWARDS_VARIANCE_SAMPLE_AMOUNT_ASC',
  EraRewardsVarianceSampleAmountDesc = 'ERA_REWARDS_VARIANCE_SAMPLE_AMOUNT_DESC',
  EraRewardsVarianceSampleBlockRangeAsc = 'ERA_REWARDS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  EraRewardsVarianceSampleBlockRangeDesc = 'ERA_REWARDS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  EraRewardsVarianceSampleClaimedAsc = 'ERA_REWARDS_VARIANCE_SAMPLE_CLAIMED_ASC',
  EraRewardsVarianceSampleClaimedDesc = 'ERA_REWARDS_VARIANCE_SAMPLE_CLAIMED_DESC',
  EraRewardsVarianceSampleCreatedBlockAsc = 'ERA_REWARDS_VARIANCE_SAMPLE_CREATED_BLOCK_ASC',
  EraRewardsVarianceSampleCreatedBlockDesc = 'ERA_REWARDS_VARIANCE_SAMPLE_CREATED_BLOCK_DESC',
  EraRewardsVarianceSampleCreatedTimestampAsc = 'ERA_REWARDS_VARIANCE_SAMPLE_CREATED_TIMESTAMP_ASC',
  EraRewardsVarianceSampleCreatedTimestampDesc = 'ERA_REWARDS_VARIANCE_SAMPLE_CREATED_TIMESTAMP_DESC',
  EraRewardsVarianceSampleDelegatorIdAsc = 'ERA_REWARDS_VARIANCE_SAMPLE_DELEGATOR_ID_ASC',
  EraRewardsVarianceSampleDelegatorIdDesc = 'ERA_REWARDS_VARIANCE_SAMPLE_DELEGATOR_ID_DESC',
  EraRewardsVarianceSampleEraIdxAsc = 'ERA_REWARDS_VARIANCE_SAMPLE_ERA_IDX_ASC',
  EraRewardsVarianceSampleEraIdxDesc = 'ERA_REWARDS_VARIANCE_SAMPLE_ERA_IDX_DESC',
  EraRewardsVarianceSampleEraIdAsc = 'ERA_REWARDS_VARIANCE_SAMPLE_ERA_ID_ASC',
  EraRewardsVarianceSampleEraIdDesc = 'ERA_REWARDS_VARIANCE_SAMPLE_ERA_ID_DESC',
  EraRewardsVarianceSampleIdAsc = 'ERA_REWARDS_VARIANCE_SAMPLE_ID_ASC',
  EraRewardsVarianceSampleIdDesc = 'ERA_REWARDS_VARIANCE_SAMPLE_ID_DESC',
  EraRewardsVarianceSampleIndexerIdAsc = 'ERA_REWARDS_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  EraRewardsVarianceSampleIndexerIdDesc = 'ERA_REWARDS_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  EraRewardsVarianceSampleIsCommissionAsc = 'ERA_REWARDS_VARIANCE_SAMPLE_IS_COMMISSION_ASC',
  EraRewardsVarianceSampleIsCommissionDesc = 'ERA_REWARDS_VARIANCE_SAMPLE_IS_COMMISSION_DESC',
  EraRewardsVarianceSampleIsIndexerAsc = 'ERA_REWARDS_VARIANCE_SAMPLE_IS_INDEXER_ASC',
  EraRewardsVarianceSampleIsIndexerDesc = 'ERA_REWARDS_VARIANCE_SAMPLE_IS_INDEXER_DESC',
  EraStakesAverageBlockRangeAsc = 'ERA_STAKES_AVERAGE_BLOCK_RANGE_ASC',
  EraStakesAverageBlockRangeDesc = 'ERA_STAKES_AVERAGE_BLOCK_RANGE_DESC',
  EraStakesAverageDelegatorIdAsc = 'ERA_STAKES_AVERAGE_DELEGATOR_ID_ASC',
  EraStakesAverageDelegatorIdDesc = 'ERA_STAKES_AVERAGE_DELEGATOR_ID_DESC',
  EraStakesAverageEraIdxAsc = 'ERA_STAKES_AVERAGE_ERA_IDX_ASC',
  EraStakesAverageEraIdxDesc = 'ERA_STAKES_AVERAGE_ERA_IDX_DESC',
  EraStakesAverageEraIdAsc = 'ERA_STAKES_AVERAGE_ERA_ID_ASC',
  EraStakesAverageEraIdDesc = 'ERA_STAKES_AVERAGE_ERA_ID_DESC',
  EraStakesAverageIdAsc = 'ERA_STAKES_AVERAGE_ID_ASC',
  EraStakesAverageIdDesc = 'ERA_STAKES_AVERAGE_ID_DESC',
  EraStakesAverageIndexerIdAsc = 'ERA_STAKES_AVERAGE_INDEXER_ID_ASC',
  EraStakesAverageIndexerIdDesc = 'ERA_STAKES_AVERAGE_INDEXER_ID_DESC',
  EraStakesAverageStakeAsc = 'ERA_STAKES_AVERAGE_STAKE_ASC',
  EraStakesAverageStakeDesc = 'ERA_STAKES_AVERAGE_STAKE_DESC',
  EraStakesByIndexerIdCountAsc = 'ERA_STAKES_BY_INDEXER_ID__COUNT_ASC',
  EraStakesByIndexerIdCountDesc = 'ERA_STAKES_BY_INDEXER_ID__COUNT_DESC',
  EraStakesCountAsc = 'ERA_STAKES_COUNT_ASC',
  EraStakesCountDesc = 'ERA_STAKES_COUNT_DESC',
  EraStakesDistinctCountBlockRangeAsc = 'ERA_STAKES_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  EraStakesDistinctCountBlockRangeDesc = 'ERA_STAKES_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  EraStakesDistinctCountDelegatorIdAsc = 'ERA_STAKES_DISTINCT_COUNT_DELEGATOR_ID_ASC',
  EraStakesDistinctCountDelegatorIdDesc = 'ERA_STAKES_DISTINCT_COUNT_DELEGATOR_ID_DESC',
  EraStakesDistinctCountEraIdxAsc = 'ERA_STAKES_DISTINCT_COUNT_ERA_IDX_ASC',
  EraStakesDistinctCountEraIdxDesc = 'ERA_STAKES_DISTINCT_COUNT_ERA_IDX_DESC',
  EraStakesDistinctCountEraIdAsc = 'ERA_STAKES_DISTINCT_COUNT_ERA_ID_ASC',
  EraStakesDistinctCountEraIdDesc = 'ERA_STAKES_DISTINCT_COUNT_ERA_ID_DESC',
  EraStakesDistinctCountIdAsc = 'ERA_STAKES_DISTINCT_COUNT_ID_ASC',
  EraStakesDistinctCountIdDesc = 'ERA_STAKES_DISTINCT_COUNT_ID_DESC',
  EraStakesDistinctCountIndexerIdAsc = 'ERA_STAKES_DISTINCT_COUNT_INDEXER_ID_ASC',
  EraStakesDistinctCountIndexerIdDesc = 'ERA_STAKES_DISTINCT_COUNT_INDEXER_ID_DESC',
  EraStakesDistinctCountStakeAsc = 'ERA_STAKES_DISTINCT_COUNT_STAKE_ASC',
  EraStakesDistinctCountStakeDesc = 'ERA_STAKES_DISTINCT_COUNT_STAKE_DESC',
  EraStakesMaxBlockRangeAsc = 'ERA_STAKES_MAX_BLOCK_RANGE_ASC',
  EraStakesMaxBlockRangeDesc = 'ERA_STAKES_MAX_BLOCK_RANGE_DESC',
  EraStakesMaxDelegatorIdAsc = 'ERA_STAKES_MAX_DELEGATOR_ID_ASC',
  EraStakesMaxDelegatorIdDesc = 'ERA_STAKES_MAX_DELEGATOR_ID_DESC',
  EraStakesMaxEraIdxAsc = 'ERA_STAKES_MAX_ERA_IDX_ASC',
  EraStakesMaxEraIdxDesc = 'ERA_STAKES_MAX_ERA_IDX_DESC',
  EraStakesMaxEraIdAsc = 'ERA_STAKES_MAX_ERA_ID_ASC',
  EraStakesMaxEraIdDesc = 'ERA_STAKES_MAX_ERA_ID_DESC',
  EraStakesMaxIdAsc = 'ERA_STAKES_MAX_ID_ASC',
  EraStakesMaxIdDesc = 'ERA_STAKES_MAX_ID_DESC',
  EraStakesMaxIndexerIdAsc = 'ERA_STAKES_MAX_INDEXER_ID_ASC',
  EraStakesMaxIndexerIdDesc = 'ERA_STAKES_MAX_INDEXER_ID_DESC',
  EraStakesMaxStakeAsc = 'ERA_STAKES_MAX_STAKE_ASC',
  EraStakesMaxStakeDesc = 'ERA_STAKES_MAX_STAKE_DESC',
  EraStakesMinBlockRangeAsc = 'ERA_STAKES_MIN_BLOCK_RANGE_ASC',
  EraStakesMinBlockRangeDesc = 'ERA_STAKES_MIN_BLOCK_RANGE_DESC',
  EraStakesMinDelegatorIdAsc = 'ERA_STAKES_MIN_DELEGATOR_ID_ASC',
  EraStakesMinDelegatorIdDesc = 'ERA_STAKES_MIN_DELEGATOR_ID_DESC',
  EraStakesMinEraIdxAsc = 'ERA_STAKES_MIN_ERA_IDX_ASC',
  EraStakesMinEraIdxDesc = 'ERA_STAKES_MIN_ERA_IDX_DESC',
  EraStakesMinEraIdAsc = 'ERA_STAKES_MIN_ERA_ID_ASC',
  EraStakesMinEraIdDesc = 'ERA_STAKES_MIN_ERA_ID_DESC',
  EraStakesMinIdAsc = 'ERA_STAKES_MIN_ID_ASC',
  EraStakesMinIdDesc = 'ERA_STAKES_MIN_ID_DESC',
  EraStakesMinIndexerIdAsc = 'ERA_STAKES_MIN_INDEXER_ID_ASC',
  EraStakesMinIndexerIdDesc = 'ERA_STAKES_MIN_INDEXER_ID_DESC',
  EraStakesMinStakeAsc = 'ERA_STAKES_MIN_STAKE_ASC',
  EraStakesMinStakeDesc = 'ERA_STAKES_MIN_STAKE_DESC',
  EraStakesStddevPopulationBlockRangeAsc = 'ERA_STAKES_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  EraStakesStddevPopulationBlockRangeDesc = 'ERA_STAKES_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  EraStakesStddevPopulationDelegatorIdAsc = 'ERA_STAKES_STDDEV_POPULATION_DELEGATOR_ID_ASC',
  EraStakesStddevPopulationDelegatorIdDesc = 'ERA_STAKES_STDDEV_POPULATION_DELEGATOR_ID_DESC',
  EraStakesStddevPopulationEraIdxAsc = 'ERA_STAKES_STDDEV_POPULATION_ERA_IDX_ASC',
  EraStakesStddevPopulationEraIdxDesc = 'ERA_STAKES_STDDEV_POPULATION_ERA_IDX_DESC',
  EraStakesStddevPopulationEraIdAsc = 'ERA_STAKES_STDDEV_POPULATION_ERA_ID_ASC',
  EraStakesStddevPopulationEraIdDesc = 'ERA_STAKES_STDDEV_POPULATION_ERA_ID_DESC',
  EraStakesStddevPopulationIdAsc = 'ERA_STAKES_STDDEV_POPULATION_ID_ASC',
  EraStakesStddevPopulationIdDesc = 'ERA_STAKES_STDDEV_POPULATION_ID_DESC',
  EraStakesStddevPopulationIndexerIdAsc = 'ERA_STAKES_STDDEV_POPULATION_INDEXER_ID_ASC',
  EraStakesStddevPopulationIndexerIdDesc = 'ERA_STAKES_STDDEV_POPULATION_INDEXER_ID_DESC',
  EraStakesStddevPopulationStakeAsc = 'ERA_STAKES_STDDEV_POPULATION_STAKE_ASC',
  EraStakesStddevPopulationStakeDesc = 'ERA_STAKES_STDDEV_POPULATION_STAKE_DESC',
  EraStakesStddevSampleBlockRangeAsc = 'ERA_STAKES_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  EraStakesStddevSampleBlockRangeDesc = 'ERA_STAKES_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  EraStakesStddevSampleDelegatorIdAsc = 'ERA_STAKES_STDDEV_SAMPLE_DELEGATOR_ID_ASC',
  EraStakesStddevSampleDelegatorIdDesc = 'ERA_STAKES_STDDEV_SAMPLE_DELEGATOR_ID_DESC',
  EraStakesStddevSampleEraIdxAsc = 'ERA_STAKES_STDDEV_SAMPLE_ERA_IDX_ASC',
  EraStakesStddevSampleEraIdxDesc = 'ERA_STAKES_STDDEV_SAMPLE_ERA_IDX_DESC',
  EraStakesStddevSampleEraIdAsc = 'ERA_STAKES_STDDEV_SAMPLE_ERA_ID_ASC',
  EraStakesStddevSampleEraIdDesc = 'ERA_STAKES_STDDEV_SAMPLE_ERA_ID_DESC',
  EraStakesStddevSampleIdAsc = 'ERA_STAKES_STDDEV_SAMPLE_ID_ASC',
  EraStakesStddevSampleIdDesc = 'ERA_STAKES_STDDEV_SAMPLE_ID_DESC',
  EraStakesStddevSampleIndexerIdAsc = 'ERA_STAKES_STDDEV_SAMPLE_INDEXER_ID_ASC',
  EraStakesStddevSampleIndexerIdDesc = 'ERA_STAKES_STDDEV_SAMPLE_INDEXER_ID_DESC',
  EraStakesStddevSampleStakeAsc = 'ERA_STAKES_STDDEV_SAMPLE_STAKE_ASC',
  EraStakesStddevSampleStakeDesc = 'ERA_STAKES_STDDEV_SAMPLE_STAKE_DESC',
  EraStakesSumBlockRangeAsc = 'ERA_STAKES_SUM_BLOCK_RANGE_ASC',
  EraStakesSumBlockRangeDesc = 'ERA_STAKES_SUM_BLOCK_RANGE_DESC',
  EraStakesSumDelegatorIdAsc = 'ERA_STAKES_SUM_DELEGATOR_ID_ASC',
  EraStakesSumDelegatorIdDesc = 'ERA_STAKES_SUM_DELEGATOR_ID_DESC',
  EraStakesSumEraIdxAsc = 'ERA_STAKES_SUM_ERA_IDX_ASC',
  EraStakesSumEraIdxDesc = 'ERA_STAKES_SUM_ERA_IDX_DESC',
  EraStakesSumEraIdAsc = 'ERA_STAKES_SUM_ERA_ID_ASC',
  EraStakesSumEraIdDesc = 'ERA_STAKES_SUM_ERA_ID_DESC',
  EraStakesSumIdAsc = 'ERA_STAKES_SUM_ID_ASC',
  EraStakesSumIdDesc = 'ERA_STAKES_SUM_ID_DESC',
  EraStakesSumIndexerIdAsc = 'ERA_STAKES_SUM_INDEXER_ID_ASC',
  EraStakesSumIndexerIdDesc = 'ERA_STAKES_SUM_INDEXER_ID_DESC',
  EraStakesSumStakeAsc = 'ERA_STAKES_SUM_STAKE_ASC',
  EraStakesSumStakeDesc = 'ERA_STAKES_SUM_STAKE_DESC',
  EraStakesVariancePopulationBlockRangeAsc = 'ERA_STAKES_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  EraStakesVariancePopulationBlockRangeDesc = 'ERA_STAKES_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  EraStakesVariancePopulationDelegatorIdAsc = 'ERA_STAKES_VARIANCE_POPULATION_DELEGATOR_ID_ASC',
  EraStakesVariancePopulationDelegatorIdDesc = 'ERA_STAKES_VARIANCE_POPULATION_DELEGATOR_ID_DESC',
  EraStakesVariancePopulationEraIdxAsc = 'ERA_STAKES_VARIANCE_POPULATION_ERA_IDX_ASC',
  EraStakesVariancePopulationEraIdxDesc = 'ERA_STAKES_VARIANCE_POPULATION_ERA_IDX_DESC',
  EraStakesVariancePopulationEraIdAsc = 'ERA_STAKES_VARIANCE_POPULATION_ERA_ID_ASC',
  EraStakesVariancePopulationEraIdDesc = 'ERA_STAKES_VARIANCE_POPULATION_ERA_ID_DESC',
  EraStakesVariancePopulationIdAsc = 'ERA_STAKES_VARIANCE_POPULATION_ID_ASC',
  EraStakesVariancePopulationIdDesc = 'ERA_STAKES_VARIANCE_POPULATION_ID_DESC',
  EraStakesVariancePopulationIndexerIdAsc = 'ERA_STAKES_VARIANCE_POPULATION_INDEXER_ID_ASC',
  EraStakesVariancePopulationIndexerIdDesc = 'ERA_STAKES_VARIANCE_POPULATION_INDEXER_ID_DESC',
  EraStakesVariancePopulationStakeAsc = 'ERA_STAKES_VARIANCE_POPULATION_STAKE_ASC',
  EraStakesVariancePopulationStakeDesc = 'ERA_STAKES_VARIANCE_POPULATION_STAKE_DESC',
  EraStakesVarianceSampleBlockRangeAsc = 'ERA_STAKES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  EraStakesVarianceSampleBlockRangeDesc = 'ERA_STAKES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  EraStakesVarianceSampleDelegatorIdAsc = 'ERA_STAKES_VARIANCE_SAMPLE_DELEGATOR_ID_ASC',
  EraStakesVarianceSampleDelegatorIdDesc = 'ERA_STAKES_VARIANCE_SAMPLE_DELEGATOR_ID_DESC',
  EraStakesVarianceSampleEraIdxAsc = 'ERA_STAKES_VARIANCE_SAMPLE_ERA_IDX_ASC',
  EraStakesVarianceSampleEraIdxDesc = 'ERA_STAKES_VARIANCE_SAMPLE_ERA_IDX_DESC',
  EraStakesVarianceSampleEraIdAsc = 'ERA_STAKES_VARIANCE_SAMPLE_ERA_ID_ASC',
  EraStakesVarianceSampleEraIdDesc = 'ERA_STAKES_VARIANCE_SAMPLE_ERA_ID_DESC',
  EraStakesVarianceSampleIdAsc = 'ERA_STAKES_VARIANCE_SAMPLE_ID_ASC',
  EraStakesVarianceSampleIdDesc = 'ERA_STAKES_VARIANCE_SAMPLE_ID_DESC',
  EraStakesVarianceSampleIndexerIdAsc = 'ERA_STAKES_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  EraStakesVarianceSampleIndexerIdDesc = 'ERA_STAKES_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  EraStakesVarianceSampleStakeAsc = 'ERA_STAKES_VARIANCE_SAMPLE_STAKE_ASC',
  EraStakesVarianceSampleStakeDesc = 'ERA_STAKES_VARIANCE_SAMPLE_STAKE_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  IndexerAllocationsAverageAmountAddedAsc = 'INDEXER_ALLOCATIONS_AVERAGE_AMOUNT_ADDED_ASC',
  IndexerAllocationsAverageAmountAddedDesc = 'INDEXER_ALLOCATIONS_AVERAGE_AMOUNT_ADDED_DESC',
  IndexerAllocationsAverageAmountRemovedAsc = 'INDEXER_ALLOCATIONS_AVERAGE_AMOUNT_REMOVED_ASC',
  IndexerAllocationsAverageAmountRemovedDesc = 'INDEXER_ALLOCATIONS_AVERAGE_AMOUNT_REMOVED_DESC',
  IndexerAllocationsAverageBlockRangeAsc = 'INDEXER_ALLOCATIONS_AVERAGE_BLOCK_RANGE_ASC',
  IndexerAllocationsAverageBlockRangeDesc = 'INDEXER_ALLOCATIONS_AVERAGE_BLOCK_RANGE_DESC',
  IndexerAllocationsAverageCreateAtAsc = 'INDEXER_ALLOCATIONS_AVERAGE_CREATE_AT_ASC',
  IndexerAllocationsAverageCreateAtDesc = 'INDEXER_ALLOCATIONS_AVERAGE_CREATE_AT_DESC',
  IndexerAllocationsAverageDeploymentIdAsc = 'INDEXER_ALLOCATIONS_AVERAGE_DEPLOYMENT_ID_ASC',
  IndexerAllocationsAverageDeploymentIdDesc = 'INDEXER_ALLOCATIONS_AVERAGE_DEPLOYMENT_ID_DESC',
  IndexerAllocationsAverageEraIdxAsc = 'INDEXER_ALLOCATIONS_AVERAGE_ERA_IDX_ASC',
  IndexerAllocationsAverageEraIdxDesc = 'INDEXER_ALLOCATIONS_AVERAGE_ERA_IDX_DESC',
  IndexerAllocationsAverageIdAsc = 'INDEXER_ALLOCATIONS_AVERAGE_ID_ASC',
  IndexerAllocationsAverageIdDesc = 'INDEXER_ALLOCATIONS_AVERAGE_ID_DESC',
  IndexerAllocationsAverageIndexerIdAsc = 'INDEXER_ALLOCATIONS_AVERAGE_INDEXER_ID_ASC',
  IndexerAllocationsAverageIndexerIdDesc = 'INDEXER_ALLOCATIONS_AVERAGE_INDEXER_ID_DESC',
  IndexerAllocationsAverageProjectIdAsc = 'INDEXER_ALLOCATIONS_AVERAGE_PROJECT_ID_ASC',
  IndexerAllocationsAverageProjectIdDesc = 'INDEXER_ALLOCATIONS_AVERAGE_PROJECT_ID_DESC',
  IndexerAllocationsByIndexerIdCountAsc = 'INDEXER_ALLOCATIONS_BY_INDEXER_ID__COUNT_ASC',
  IndexerAllocationsByIndexerIdCountDesc = 'INDEXER_ALLOCATIONS_BY_INDEXER_ID__COUNT_DESC',
  IndexerAllocationsCountAsc = 'INDEXER_ALLOCATIONS_COUNT_ASC',
  IndexerAllocationsCountDesc = 'INDEXER_ALLOCATIONS_COUNT_DESC',
  IndexerAllocationsDistinctCountAmountAddedAsc = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_AMOUNT_ADDED_ASC',
  IndexerAllocationsDistinctCountAmountAddedDesc = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_AMOUNT_ADDED_DESC',
  IndexerAllocationsDistinctCountAmountRemovedAsc = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_AMOUNT_REMOVED_ASC',
  IndexerAllocationsDistinctCountAmountRemovedDesc = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_AMOUNT_REMOVED_DESC',
  IndexerAllocationsDistinctCountBlockRangeAsc = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  IndexerAllocationsDistinctCountBlockRangeDesc = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  IndexerAllocationsDistinctCountCreateAtAsc = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_CREATE_AT_ASC',
  IndexerAllocationsDistinctCountCreateAtDesc = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_CREATE_AT_DESC',
  IndexerAllocationsDistinctCountDeploymentIdAsc = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_DEPLOYMENT_ID_ASC',
  IndexerAllocationsDistinctCountDeploymentIdDesc = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_DEPLOYMENT_ID_DESC',
  IndexerAllocationsDistinctCountEraIdxAsc = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_ERA_IDX_ASC',
  IndexerAllocationsDistinctCountEraIdxDesc = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_ERA_IDX_DESC',
  IndexerAllocationsDistinctCountIdAsc = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_ID_ASC',
  IndexerAllocationsDistinctCountIdDesc = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_ID_DESC',
  IndexerAllocationsDistinctCountIndexerIdAsc = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_INDEXER_ID_ASC',
  IndexerAllocationsDistinctCountIndexerIdDesc = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_INDEXER_ID_DESC',
  IndexerAllocationsDistinctCountProjectIdAsc = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_PROJECT_ID_ASC',
  IndexerAllocationsDistinctCountProjectIdDesc = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_PROJECT_ID_DESC',
  IndexerAllocationsMaxAmountAddedAsc = 'INDEXER_ALLOCATIONS_MAX_AMOUNT_ADDED_ASC',
  IndexerAllocationsMaxAmountAddedDesc = 'INDEXER_ALLOCATIONS_MAX_AMOUNT_ADDED_DESC',
  IndexerAllocationsMaxAmountRemovedAsc = 'INDEXER_ALLOCATIONS_MAX_AMOUNT_REMOVED_ASC',
  IndexerAllocationsMaxAmountRemovedDesc = 'INDEXER_ALLOCATIONS_MAX_AMOUNT_REMOVED_DESC',
  IndexerAllocationsMaxBlockRangeAsc = 'INDEXER_ALLOCATIONS_MAX_BLOCK_RANGE_ASC',
  IndexerAllocationsMaxBlockRangeDesc = 'INDEXER_ALLOCATIONS_MAX_BLOCK_RANGE_DESC',
  IndexerAllocationsMaxCreateAtAsc = 'INDEXER_ALLOCATIONS_MAX_CREATE_AT_ASC',
  IndexerAllocationsMaxCreateAtDesc = 'INDEXER_ALLOCATIONS_MAX_CREATE_AT_DESC',
  IndexerAllocationsMaxDeploymentIdAsc = 'INDEXER_ALLOCATIONS_MAX_DEPLOYMENT_ID_ASC',
  IndexerAllocationsMaxDeploymentIdDesc = 'INDEXER_ALLOCATIONS_MAX_DEPLOYMENT_ID_DESC',
  IndexerAllocationsMaxEraIdxAsc = 'INDEXER_ALLOCATIONS_MAX_ERA_IDX_ASC',
  IndexerAllocationsMaxEraIdxDesc = 'INDEXER_ALLOCATIONS_MAX_ERA_IDX_DESC',
  IndexerAllocationsMaxIdAsc = 'INDEXER_ALLOCATIONS_MAX_ID_ASC',
  IndexerAllocationsMaxIdDesc = 'INDEXER_ALLOCATIONS_MAX_ID_DESC',
  IndexerAllocationsMaxIndexerIdAsc = 'INDEXER_ALLOCATIONS_MAX_INDEXER_ID_ASC',
  IndexerAllocationsMaxIndexerIdDesc = 'INDEXER_ALLOCATIONS_MAX_INDEXER_ID_DESC',
  IndexerAllocationsMaxProjectIdAsc = 'INDEXER_ALLOCATIONS_MAX_PROJECT_ID_ASC',
  IndexerAllocationsMaxProjectIdDesc = 'INDEXER_ALLOCATIONS_MAX_PROJECT_ID_DESC',
  IndexerAllocationsMinAmountAddedAsc = 'INDEXER_ALLOCATIONS_MIN_AMOUNT_ADDED_ASC',
  IndexerAllocationsMinAmountAddedDesc = 'INDEXER_ALLOCATIONS_MIN_AMOUNT_ADDED_DESC',
  IndexerAllocationsMinAmountRemovedAsc = 'INDEXER_ALLOCATIONS_MIN_AMOUNT_REMOVED_ASC',
  IndexerAllocationsMinAmountRemovedDesc = 'INDEXER_ALLOCATIONS_MIN_AMOUNT_REMOVED_DESC',
  IndexerAllocationsMinBlockRangeAsc = 'INDEXER_ALLOCATIONS_MIN_BLOCK_RANGE_ASC',
  IndexerAllocationsMinBlockRangeDesc = 'INDEXER_ALLOCATIONS_MIN_BLOCK_RANGE_DESC',
  IndexerAllocationsMinCreateAtAsc = 'INDEXER_ALLOCATIONS_MIN_CREATE_AT_ASC',
  IndexerAllocationsMinCreateAtDesc = 'INDEXER_ALLOCATIONS_MIN_CREATE_AT_DESC',
  IndexerAllocationsMinDeploymentIdAsc = 'INDEXER_ALLOCATIONS_MIN_DEPLOYMENT_ID_ASC',
  IndexerAllocationsMinDeploymentIdDesc = 'INDEXER_ALLOCATIONS_MIN_DEPLOYMENT_ID_DESC',
  IndexerAllocationsMinEraIdxAsc = 'INDEXER_ALLOCATIONS_MIN_ERA_IDX_ASC',
  IndexerAllocationsMinEraIdxDesc = 'INDEXER_ALLOCATIONS_MIN_ERA_IDX_DESC',
  IndexerAllocationsMinIdAsc = 'INDEXER_ALLOCATIONS_MIN_ID_ASC',
  IndexerAllocationsMinIdDesc = 'INDEXER_ALLOCATIONS_MIN_ID_DESC',
  IndexerAllocationsMinIndexerIdAsc = 'INDEXER_ALLOCATIONS_MIN_INDEXER_ID_ASC',
  IndexerAllocationsMinIndexerIdDesc = 'INDEXER_ALLOCATIONS_MIN_INDEXER_ID_DESC',
  IndexerAllocationsMinProjectIdAsc = 'INDEXER_ALLOCATIONS_MIN_PROJECT_ID_ASC',
  IndexerAllocationsMinProjectIdDesc = 'INDEXER_ALLOCATIONS_MIN_PROJECT_ID_DESC',
  IndexerAllocationsStddevPopulationAmountAddedAsc = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_AMOUNT_ADDED_ASC',
  IndexerAllocationsStddevPopulationAmountAddedDesc = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_AMOUNT_ADDED_DESC',
  IndexerAllocationsStddevPopulationAmountRemovedAsc = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_AMOUNT_REMOVED_ASC',
  IndexerAllocationsStddevPopulationAmountRemovedDesc = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_AMOUNT_REMOVED_DESC',
  IndexerAllocationsStddevPopulationBlockRangeAsc = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  IndexerAllocationsStddevPopulationBlockRangeDesc = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  IndexerAllocationsStddevPopulationCreateAtAsc = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_CREATE_AT_ASC',
  IndexerAllocationsStddevPopulationCreateAtDesc = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_CREATE_AT_DESC',
  IndexerAllocationsStddevPopulationDeploymentIdAsc = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_DEPLOYMENT_ID_ASC',
  IndexerAllocationsStddevPopulationDeploymentIdDesc = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_DEPLOYMENT_ID_DESC',
  IndexerAllocationsStddevPopulationEraIdxAsc = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_ERA_IDX_ASC',
  IndexerAllocationsStddevPopulationEraIdxDesc = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_ERA_IDX_DESC',
  IndexerAllocationsStddevPopulationIdAsc = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_ID_ASC',
  IndexerAllocationsStddevPopulationIdDesc = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_ID_DESC',
  IndexerAllocationsStddevPopulationIndexerIdAsc = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_INDEXER_ID_ASC',
  IndexerAllocationsStddevPopulationIndexerIdDesc = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_INDEXER_ID_DESC',
  IndexerAllocationsStddevPopulationProjectIdAsc = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_PROJECT_ID_ASC',
  IndexerAllocationsStddevPopulationProjectIdDesc = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_PROJECT_ID_DESC',
  IndexerAllocationsStddevSampleAmountAddedAsc = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_AMOUNT_ADDED_ASC',
  IndexerAllocationsStddevSampleAmountAddedDesc = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_AMOUNT_ADDED_DESC',
  IndexerAllocationsStddevSampleAmountRemovedAsc = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_AMOUNT_REMOVED_ASC',
  IndexerAllocationsStddevSampleAmountRemovedDesc = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_AMOUNT_REMOVED_DESC',
  IndexerAllocationsStddevSampleBlockRangeAsc = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  IndexerAllocationsStddevSampleBlockRangeDesc = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  IndexerAllocationsStddevSampleCreateAtAsc = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_CREATE_AT_ASC',
  IndexerAllocationsStddevSampleCreateAtDesc = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_CREATE_AT_DESC',
  IndexerAllocationsStddevSampleDeploymentIdAsc = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC',
  IndexerAllocationsStddevSampleDeploymentIdDesc = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC',
  IndexerAllocationsStddevSampleEraIdxAsc = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_ERA_IDX_ASC',
  IndexerAllocationsStddevSampleEraIdxDesc = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_ERA_IDX_DESC',
  IndexerAllocationsStddevSampleIdAsc = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_ID_ASC',
  IndexerAllocationsStddevSampleIdDesc = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_ID_DESC',
  IndexerAllocationsStddevSampleIndexerIdAsc = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_INDEXER_ID_ASC',
  IndexerAllocationsStddevSampleIndexerIdDesc = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_INDEXER_ID_DESC',
  IndexerAllocationsStddevSampleProjectIdAsc = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_PROJECT_ID_ASC',
  IndexerAllocationsStddevSampleProjectIdDesc = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_PROJECT_ID_DESC',
  IndexerAllocationsSumAmountAddedAsc = 'INDEXER_ALLOCATIONS_SUM_AMOUNT_ADDED_ASC',
  IndexerAllocationsSumAmountAddedDesc = 'INDEXER_ALLOCATIONS_SUM_AMOUNT_ADDED_DESC',
  IndexerAllocationsSumAmountRemovedAsc = 'INDEXER_ALLOCATIONS_SUM_AMOUNT_REMOVED_ASC',
  IndexerAllocationsSumAmountRemovedDesc = 'INDEXER_ALLOCATIONS_SUM_AMOUNT_REMOVED_DESC',
  IndexerAllocationsSumBlockRangeAsc = 'INDEXER_ALLOCATIONS_SUM_BLOCK_RANGE_ASC',
  IndexerAllocationsSumBlockRangeDesc = 'INDEXER_ALLOCATIONS_SUM_BLOCK_RANGE_DESC',
  IndexerAllocationsSumCreateAtAsc = 'INDEXER_ALLOCATIONS_SUM_CREATE_AT_ASC',
  IndexerAllocationsSumCreateAtDesc = 'INDEXER_ALLOCATIONS_SUM_CREATE_AT_DESC',
  IndexerAllocationsSumDeploymentIdAsc = 'INDEXER_ALLOCATIONS_SUM_DEPLOYMENT_ID_ASC',
  IndexerAllocationsSumDeploymentIdDesc = 'INDEXER_ALLOCATIONS_SUM_DEPLOYMENT_ID_DESC',
  IndexerAllocationsSumEraIdxAsc = 'INDEXER_ALLOCATIONS_SUM_ERA_IDX_ASC',
  IndexerAllocationsSumEraIdxDesc = 'INDEXER_ALLOCATIONS_SUM_ERA_IDX_DESC',
  IndexerAllocationsSumIdAsc = 'INDEXER_ALLOCATIONS_SUM_ID_ASC',
  IndexerAllocationsSumIdDesc = 'INDEXER_ALLOCATIONS_SUM_ID_DESC',
  IndexerAllocationsSumIndexerIdAsc = 'INDEXER_ALLOCATIONS_SUM_INDEXER_ID_ASC',
  IndexerAllocationsSumIndexerIdDesc = 'INDEXER_ALLOCATIONS_SUM_INDEXER_ID_DESC',
  IndexerAllocationsSumProjectIdAsc = 'INDEXER_ALLOCATIONS_SUM_PROJECT_ID_ASC',
  IndexerAllocationsSumProjectIdDesc = 'INDEXER_ALLOCATIONS_SUM_PROJECT_ID_DESC',
  IndexerAllocationsVariancePopulationAmountAddedAsc = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_AMOUNT_ADDED_ASC',
  IndexerAllocationsVariancePopulationAmountAddedDesc = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_AMOUNT_ADDED_DESC',
  IndexerAllocationsVariancePopulationAmountRemovedAsc = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_AMOUNT_REMOVED_ASC',
  IndexerAllocationsVariancePopulationAmountRemovedDesc = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_AMOUNT_REMOVED_DESC',
  IndexerAllocationsVariancePopulationBlockRangeAsc = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  IndexerAllocationsVariancePopulationBlockRangeDesc = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  IndexerAllocationsVariancePopulationCreateAtAsc = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_CREATE_AT_ASC',
  IndexerAllocationsVariancePopulationCreateAtDesc = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_CREATE_AT_DESC',
  IndexerAllocationsVariancePopulationDeploymentIdAsc = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC',
  IndexerAllocationsVariancePopulationDeploymentIdDesc = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC',
  IndexerAllocationsVariancePopulationEraIdxAsc = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_ERA_IDX_ASC',
  IndexerAllocationsVariancePopulationEraIdxDesc = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_ERA_IDX_DESC',
  IndexerAllocationsVariancePopulationIdAsc = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_ID_ASC',
  IndexerAllocationsVariancePopulationIdDesc = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_ID_DESC',
  IndexerAllocationsVariancePopulationIndexerIdAsc = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_INDEXER_ID_ASC',
  IndexerAllocationsVariancePopulationIndexerIdDesc = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_INDEXER_ID_DESC',
  IndexerAllocationsVariancePopulationProjectIdAsc = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_PROJECT_ID_ASC',
  IndexerAllocationsVariancePopulationProjectIdDesc = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_PROJECT_ID_DESC',
  IndexerAllocationsVarianceSampleAmountAddedAsc = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_AMOUNT_ADDED_ASC',
  IndexerAllocationsVarianceSampleAmountAddedDesc = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_AMOUNT_ADDED_DESC',
  IndexerAllocationsVarianceSampleAmountRemovedAsc = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_AMOUNT_REMOVED_ASC',
  IndexerAllocationsVarianceSampleAmountRemovedDesc = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_AMOUNT_REMOVED_DESC',
  IndexerAllocationsVarianceSampleBlockRangeAsc = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  IndexerAllocationsVarianceSampleBlockRangeDesc = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  IndexerAllocationsVarianceSampleCreateAtAsc = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_CREATE_AT_ASC',
  IndexerAllocationsVarianceSampleCreateAtDesc = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_CREATE_AT_DESC',
  IndexerAllocationsVarianceSampleDeploymentIdAsc = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC',
  IndexerAllocationsVarianceSampleDeploymentIdDesc = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC',
  IndexerAllocationsVarianceSampleEraIdxAsc = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_ERA_IDX_ASC',
  IndexerAllocationsVarianceSampleEraIdxDesc = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_ERA_IDX_DESC',
  IndexerAllocationsVarianceSampleIdAsc = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_ID_ASC',
  IndexerAllocationsVarianceSampleIdDesc = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_ID_DESC',
  IndexerAllocationsVarianceSampleIndexerIdAsc = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  IndexerAllocationsVarianceSampleIndexerIdDesc = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  IndexerAllocationsVarianceSampleProjectIdAsc = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_PROJECT_ID_ASC',
  IndexerAllocationsVarianceSampleProjectIdDesc = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_PROJECT_ID_DESC',
  IndexerAllocationOverflowsAverageBlockRangeAsc = 'INDEXER_ALLOCATION_OVERFLOWS_AVERAGE_BLOCK_RANGE_ASC',
  IndexerAllocationOverflowsAverageBlockRangeDesc = 'INDEXER_ALLOCATION_OVERFLOWS_AVERAGE_BLOCK_RANGE_DESC',
  IndexerAllocationOverflowsAverageCreateAtAsc = 'INDEXER_ALLOCATION_OVERFLOWS_AVERAGE_CREATE_AT_ASC',
  IndexerAllocationOverflowsAverageCreateAtDesc = 'INDEXER_ALLOCATION_OVERFLOWS_AVERAGE_CREATE_AT_DESC',
  IndexerAllocationOverflowsAverageEraIdxEndAsc = 'INDEXER_ALLOCATION_OVERFLOWS_AVERAGE_ERA_IDX_END_ASC',
  IndexerAllocationOverflowsAverageEraIdxEndDesc = 'INDEXER_ALLOCATION_OVERFLOWS_AVERAGE_ERA_IDX_END_DESC',
  IndexerAllocationOverflowsAverageEraIdxStartAsc = 'INDEXER_ALLOCATION_OVERFLOWS_AVERAGE_ERA_IDX_START_ASC',
  IndexerAllocationOverflowsAverageEraIdxStartDesc = 'INDEXER_ALLOCATION_OVERFLOWS_AVERAGE_ERA_IDX_START_DESC',
  IndexerAllocationOverflowsAverageIdAsc = 'INDEXER_ALLOCATION_OVERFLOWS_AVERAGE_ID_ASC',
  IndexerAllocationOverflowsAverageIdDesc = 'INDEXER_ALLOCATION_OVERFLOWS_AVERAGE_ID_DESC',
  IndexerAllocationOverflowsAverageIndexerIdAsc = 'INDEXER_ALLOCATION_OVERFLOWS_AVERAGE_INDEXER_ID_ASC',
  IndexerAllocationOverflowsAverageIndexerIdDesc = 'INDEXER_ALLOCATION_OVERFLOWS_AVERAGE_INDEXER_ID_DESC',
  IndexerAllocationOverflowsAverageOverflowEndAsc = 'INDEXER_ALLOCATION_OVERFLOWS_AVERAGE_OVERFLOW_END_ASC',
  IndexerAllocationOverflowsAverageOverflowEndDesc = 'INDEXER_ALLOCATION_OVERFLOWS_AVERAGE_OVERFLOW_END_DESC',
  IndexerAllocationOverflowsAverageOverflowStartAsc = 'INDEXER_ALLOCATION_OVERFLOWS_AVERAGE_OVERFLOW_START_ASC',
  IndexerAllocationOverflowsAverageOverflowStartDesc = 'INDEXER_ALLOCATION_OVERFLOWS_AVERAGE_OVERFLOW_START_DESC',
  IndexerAllocationOverflowsAverageOverflowTimeAsc = 'INDEXER_ALLOCATION_OVERFLOWS_AVERAGE_OVERFLOW_TIME_ASC',
  IndexerAllocationOverflowsAverageOverflowTimeDesc = 'INDEXER_ALLOCATION_OVERFLOWS_AVERAGE_OVERFLOW_TIME_DESC',
  IndexerAllocationOverflowsAverageUpdateAtAsc = 'INDEXER_ALLOCATION_OVERFLOWS_AVERAGE_UPDATE_AT_ASC',
  IndexerAllocationOverflowsAverageUpdateAtDesc = 'INDEXER_ALLOCATION_OVERFLOWS_AVERAGE_UPDATE_AT_DESC',
  IndexerAllocationOverflowsByIndexerIdCountAsc = 'INDEXER_ALLOCATION_OVERFLOWS_BY_INDEXER_ID__COUNT_ASC',
  IndexerAllocationOverflowsByIndexerIdCountDesc = 'INDEXER_ALLOCATION_OVERFLOWS_BY_INDEXER_ID__COUNT_DESC',
  IndexerAllocationOverflowsCountAsc = 'INDEXER_ALLOCATION_OVERFLOWS_COUNT_ASC',
  IndexerAllocationOverflowsCountDesc = 'INDEXER_ALLOCATION_OVERFLOWS_COUNT_DESC',
  IndexerAllocationOverflowsDistinctCountBlockRangeAsc = 'INDEXER_ALLOCATION_OVERFLOWS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  IndexerAllocationOverflowsDistinctCountBlockRangeDesc = 'INDEXER_ALLOCATION_OVERFLOWS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  IndexerAllocationOverflowsDistinctCountCreateAtAsc = 'INDEXER_ALLOCATION_OVERFLOWS_DISTINCT_COUNT_CREATE_AT_ASC',
  IndexerAllocationOverflowsDistinctCountCreateAtDesc = 'INDEXER_ALLOCATION_OVERFLOWS_DISTINCT_COUNT_CREATE_AT_DESC',
  IndexerAllocationOverflowsDistinctCountEraIdxEndAsc = 'INDEXER_ALLOCATION_OVERFLOWS_DISTINCT_COUNT_ERA_IDX_END_ASC',
  IndexerAllocationOverflowsDistinctCountEraIdxEndDesc = 'INDEXER_ALLOCATION_OVERFLOWS_DISTINCT_COUNT_ERA_IDX_END_DESC',
  IndexerAllocationOverflowsDistinctCountEraIdxStartAsc = 'INDEXER_ALLOCATION_OVERFLOWS_DISTINCT_COUNT_ERA_IDX_START_ASC',
  IndexerAllocationOverflowsDistinctCountEraIdxStartDesc = 'INDEXER_ALLOCATION_OVERFLOWS_DISTINCT_COUNT_ERA_IDX_START_DESC',
  IndexerAllocationOverflowsDistinctCountIdAsc = 'INDEXER_ALLOCATION_OVERFLOWS_DISTINCT_COUNT_ID_ASC',
  IndexerAllocationOverflowsDistinctCountIdDesc = 'INDEXER_ALLOCATION_OVERFLOWS_DISTINCT_COUNT_ID_DESC',
  IndexerAllocationOverflowsDistinctCountIndexerIdAsc = 'INDEXER_ALLOCATION_OVERFLOWS_DISTINCT_COUNT_INDEXER_ID_ASC',
  IndexerAllocationOverflowsDistinctCountIndexerIdDesc = 'INDEXER_ALLOCATION_OVERFLOWS_DISTINCT_COUNT_INDEXER_ID_DESC',
  IndexerAllocationOverflowsDistinctCountOverflowEndAsc = 'INDEXER_ALLOCATION_OVERFLOWS_DISTINCT_COUNT_OVERFLOW_END_ASC',
  IndexerAllocationOverflowsDistinctCountOverflowEndDesc = 'INDEXER_ALLOCATION_OVERFLOWS_DISTINCT_COUNT_OVERFLOW_END_DESC',
  IndexerAllocationOverflowsDistinctCountOverflowStartAsc = 'INDEXER_ALLOCATION_OVERFLOWS_DISTINCT_COUNT_OVERFLOW_START_ASC',
  IndexerAllocationOverflowsDistinctCountOverflowStartDesc = 'INDEXER_ALLOCATION_OVERFLOWS_DISTINCT_COUNT_OVERFLOW_START_DESC',
  IndexerAllocationOverflowsDistinctCountOverflowTimeAsc = 'INDEXER_ALLOCATION_OVERFLOWS_DISTINCT_COUNT_OVERFLOW_TIME_ASC',
  IndexerAllocationOverflowsDistinctCountOverflowTimeDesc = 'INDEXER_ALLOCATION_OVERFLOWS_DISTINCT_COUNT_OVERFLOW_TIME_DESC',
  IndexerAllocationOverflowsDistinctCountUpdateAtAsc = 'INDEXER_ALLOCATION_OVERFLOWS_DISTINCT_COUNT_UPDATE_AT_ASC',
  IndexerAllocationOverflowsDistinctCountUpdateAtDesc = 'INDEXER_ALLOCATION_OVERFLOWS_DISTINCT_COUNT_UPDATE_AT_DESC',
  IndexerAllocationOverflowsMaxBlockRangeAsc = 'INDEXER_ALLOCATION_OVERFLOWS_MAX_BLOCK_RANGE_ASC',
  IndexerAllocationOverflowsMaxBlockRangeDesc = 'INDEXER_ALLOCATION_OVERFLOWS_MAX_BLOCK_RANGE_DESC',
  IndexerAllocationOverflowsMaxCreateAtAsc = 'INDEXER_ALLOCATION_OVERFLOWS_MAX_CREATE_AT_ASC',
  IndexerAllocationOverflowsMaxCreateAtDesc = 'INDEXER_ALLOCATION_OVERFLOWS_MAX_CREATE_AT_DESC',
  IndexerAllocationOverflowsMaxEraIdxEndAsc = 'INDEXER_ALLOCATION_OVERFLOWS_MAX_ERA_IDX_END_ASC',
  IndexerAllocationOverflowsMaxEraIdxEndDesc = 'INDEXER_ALLOCATION_OVERFLOWS_MAX_ERA_IDX_END_DESC',
  IndexerAllocationOverflowsMaxEraIdxStartAsc = 'INDEXER_ALLOCATION_OVERFLOWS_MAX_ERA_IDX_START_ASC',
  IndexerAllocationOverflowsMaxEraIdxStartDesc = 'INDEXER_ALLOCATION_OVERFLOWS_MAX_ERA_IDX_START_DESC',
  IndexerAllocationOverflowsMaxIdAsc = 'INDEXER_ALLOCATION_OVERFLOWS_MAX_ID_ASC',
  IndexerAllocationOverflowsMaxIdDesc = 'INDEXER_ALLOCATION_OVERFLOWS_MAX_ID_DESC',
  IndexerAllocationOverflowsMaxIndexerIdAsc = 'INDEXER_ALLOCATION_OVERFLOWS_MAX_INDEXER_ID_ASC',
  IndexerAllocationOverflowsMaxIndexerIdDesc = 'INDEXER_ALLOCATION_OVERFLOWS_MAX_INDEXER_ID_DESC',
  IndexerAllocationOverflowsMaxOverflowEndAsc = 'INDEXER_ALLOCATION_OVERFLOWS_MAX_OVERFLOW_END_ASC',
  IndexerAllocationOverflowsMaxOverflowEndDesc = 'INDEXER_ALLOCATION_OVERFLOWS_MAX_OVERFLOW_END_DESC',
  IndexerAllocationOverflowsMaxOverflowStartAsc = 'INDEXER_ALLOCATION_OVERFLOWS_MAX_OVERFLOW_START_ASC',
  IndexerAllocationOverflowsMaxOverflowStartDesc = 'INDEXER_ALLOCATION_OVERFLOWS_MAX_OVERFLOW_START_DESC',
  IndexerAllocationOverflowsMaxOverflowTimeAsc = 'INDEXER_ALLOCATION_OVERFLOWS_MAX_OVERFLOW_TIME_ASC',
  IndexerAllocationOverflowsMaxOverflowTimeDesc = 'INDEXER_ALLOCATION_OVERFLOWS_MAX_OVERFLOW_TIME_DESC',
  IndexerAllocationOverflowsMaxUpdateAtAsc = 'INDEXER_ALLOCATION_OVERFLOWS_MAX_UPDATE_AT_ASC',
  IndexerAllocationOverflowsMaxUpdateAtDesc = 'INDEXER_ALLOCATION_OVERFLOWS_MAX_UPDATE_AT_DESC',
  IndexerAllocationOverflowsMinBlockRangeAsc = 'INDEXER_ALLOCATION_OVERFLOWS_MIN_BLOCK_RANGE_ASC',
  IndexerAllocationOverflowsMinBlockRangeDesc = 'INDEXER_ALLOCATION_OVERFLOWS_MIN_BLOCK_RANGE_DESC',
  IndexerAllocationOverflowsMinCreateAtAsc = 'INDEXER_ALLOCATION_OVERFLOWS_MIN_CREATE_AT_ASC',
  IndexerAllocationOverflowsMinCreateAtDesc = 'INDEXER_ALLOCATION_OVERFLOWS_MIN_CREATE_AT_DESC',
  IndexerAllocationOverflowsMinEraIdxEndAsc = 'INDEXER_ALLOCATION_OVERFLOWS_MIN_ERA_IDX_END_ASC',
  IndexerAllocationOverflowsMinEraIdxEndDesc = 'INDEXER_ALLOCATION_OVERFLOWS_MIN_ERA_IDX_END_DESC',
  IndexerAllocationOverflowsMinEraIdxStartAsc = 'INDEXER_ALLOCATION_OVERFLOWS_MIN_ERA_IDX_START_ASC',
  IndexerAllocationOverflowsMinEraIdxStartDesc = 'INDEXER_ALLOCATION_OVERFLOWS_MIN_ERA_IDX_START_DESC',
  IndexerAllocationOverflowsMinIdAsc = 'INDEXER_ALLOCATION_OVERFLOWS_MIN_ID_ASC',
  IndexerAllocationOverflowsMinIdDesc = 'INDEXER_ALLOCATION_OVERFLOWS_MIN_ID_DESC',
  IndexerAllocationOverflowsMinIndexerIdAsc = 'INDEXER_ALLOCATION_OVERFLOWS_MIN_INDEXER_ID_ASC',
  IndexerAllocationOverflowsMinIndexerIdDesc = 'INDEXER_ALLOCATION_OVERFLOWS_MIN_INDEXER_ID_DESC',
  IndexerAllocationOverflowsMinOverflowEndAsc = 'INDEXER_ALLOCATION_OVERFLOWS_MIN_OVERFLOW_END_ASC',
  IndexerAllocationOverflowsMinOverflowEndDesc = 'INDEXER_ALLOCATION_OVERFLOWS_MIN_OVERFLOW_END_DESC',
  IndexerAllocationOverflowsMinOverflowStartAsc = 'INDEXER_ALLOCATION_OVERFLOWS_MIN_OVERFLOW_START_ASC',
  IndexerAllocationOverflowsMinOverflowStartDesc = 'INDEXER_ALLOCATION_OVERFLOWS_MIN_OVERFLOW_START_DESC',
  IndexerAllocationOverflowsMinOverflowTimeAsc = 'INDEXER_ALLOCATION_OVERFLOWS_MIN_OVERFLOW_TIME_ASC',
  IndexerAllocationOverflowsMinOverflowTimeDesc = 'INDEXER_ALLOCATION_OVERFLOWS_MIN_OVERFLOW_TIME_DESC',
  IndexerAllocationOverflowsMinUpdateAtAsc = 'INDEXER_ALLOCATION_OVERFLOWS_MIN_UPDATE_AT_ASC',
  IndexerAllocationOverflowsMinUpdateAtDesc = 'INDEXER_ALLOCATION_OVERFLOWS_MIN_UPDATE_AT_DESC',
  IndexerAllocationOverflowsStddevPopulationBlockRangeAsc = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  IndexerAllocationOverflowsStddevPopulationBlockRangeDesc = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  IndexerAllocationOverflowsStddevPopulationCreateAtAsc = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_POPULATION_CREATE_AT_ASC',
  IndexerAllocationOverflowsStddevPopulationCreateAtDesc = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_POPULATION_CREATE_AT_DESC',
  IndexerAllocationOverflowsStddevPopulationEraIdxEndAsc = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_POPULATION_ERA_IDX_END_ASC',
  IndexerAllocationOverflowsStddevPopulationEraIdxEndDesc = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_POPULATION_ERA_IDX_END_DESC',
  IndexerAllocationOverflowsStddevPopulationEraIdxStartAsc = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_POPULATION_ERA_IDX_START_ASC',
  IndexerAllocationOverflowsStddevPopulationEraIdxStartDesc = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_POPULATION_ERA_IDX_START_DESC',
  IndexerAllocationOverflowsStddevPopulationIdAsc = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_POPULATION_ID_ASC',
  IndexerAllocationOverflowsStddevPopulationIdDesc = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_POPULATION_ID_DESC',
  IndexerAllocationOverflowsStddevPopulationIndexerIdAsc = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_POPULATION_INDEXER_ID_ASC',
  IndexerAllocationOverflowsStddevPopulationIndexerIdDesc = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_POPULATION_INDEXER_ID_DESC',
  IndexerAllocationOverflowsStddevPopulationOverflowEndAsc = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_POPULATION_OVERFLOW_END_ASC',
  IndexerAllocationOverflowsStddevPopulationOverflowEndDesc = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_POPULATION_OVERFLOW_END_DESC',
  IndexerAllocationOverflowsStddevPopulationOverflowStartAsc = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_POPULATION_OVERFLOW_START_ASC',
  IndexerAllocationOverflowsStddevPopulationOverflowStartDesc = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_POPULATION_OVERFLOW_START_DESC',
  IndexerAllocationOverflowsStddevPopulationOverflowTimeAsc = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_POPULATION_OVERFLOW_TIME_ASC',
  IndexerAllocationOverflowsStddevPopulationOverflowTimeDesc = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_POPULATION_OVERFLOW_TIME_DESC',
  IndexerAllocationOverflowsStddevPopulationUpdateAtAsc = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_POPULATION_UPDATE_AT_ASC',
  IndexerAllocationOverflowsStddevPopulationUpdateAtDesc = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_POPULATION_UPDATE_AT_DESC',
  IndexerAllocationOverflowsStddevSampleBlockRangeAsc = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  IndexerAllocationOverflowsStddevSampleBlockRangeDesc = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  IndexerAllocationOverflowsStddevSampleCreateAtAsc = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_SAMPLE_CREATE_AT_ASC',
  IndexerAllocationOverflowsStddevSampleCreateAtDesc = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_SAMPLE_CREATE_AT_DESC',
  IndexerAllocationOverflowsStddevSampleEraIdxEndAsc = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_SAMPLE_ERA_IDX_END_ASC',
  IndexerAllocationOverflowsStddevSampleEraIdxEndDesc = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_SAMPLE_ERA_IDX_END_DESC',
  IndexerAllocationOverflowsStddevSampleEraIdxStartAsc = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_SAMPLE_ERA_IDX_START_ASC',
  IndexerAllocationOverflowsStddevSampleEraIdxStartDesc = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_SAMPLE_ERA_IDX_START_DESC',
  IndexerAllocationOverflowsStddevSampleIdAsc = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_SAMPLE_ID_ASC',
  IndexerAllocationOverflowsStddevSampleIdDesc = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_SAMPLE_ID_DESC',
  IndexerAllocationOverflowsStddevSampleIndexerIdAsc = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_SAMPLE_INDEXER_ID_ASC',
  IndexerAllocationOverflowsStddevSampleIndexerIdDesc = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_SAMPLE_INDEXER_ID_DESC',
  IndexerAllocationOverflowsStddevSampleOverflowEndAsc = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_SAMPLE_OVERFLOW_END_ASC',
  IndexerAllocationOverflowsStddevSampleOverflowEndDesc = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_SAMPLE_OVERFLOW_END_DESC',
  IndexerAllocationOverflowsStddevSampleOverflowStartAsc = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_SAMPLE_OVERFLOW_START_ASC',
  IndexerAllocationOverflowsStddevSampleOverflowStartDesc = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_SAMPLE_OVERFLOW_START_DESC',
  IndexerAllocationOverflowsStddevSampleOverflowTimeAsc = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_SAMPLE_OVERFLOW_TIME_ASC',
  IndexerAllocationOverflowsStddevSampleOverflowTimeDesc = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_SAMPLE_OVERFLOW_TIME_DESC',
  IndexerAllocationOverflowsStddevSampleUpdateAtAsc = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_SAMPLE_UPDATE_AT_ASC',
  IndexerAllocationOverflowsStddevSampleUpdateAtDesc = 'INDEXER_ALLOCATION_OVERFLOWS_STDDEV_SAMPLE_UPDATE_AT_DESC',
  IndexerAllocationOverflowsSumBlockRangeAsc = 'INDEXER_ALLOCATION_OVERFLOWS_SUM_BLOCK_RANGE_ASC',
  IndexerAllocationOverflowsSumBlockRangeDesc = 'INDEXER_ALLOCATION_OVERFLOWS_SUM_BLOCK_RANGE_DESC',
  IndexerAllocationOverflowsSumCreateAtAsc = 'INDEXER_ALLOCATION_OVERFLOWS_SUM_CREATE_AT_ASC',
  IndexerAllocationOverflowsSumCreateAtDesc = 'INDEXER_ALLOCATION_OVERFLOWS_SUM_CREATE_AT_DESC',
  IndexerAllocationOverflowsSumEraIdxEndAsc = 'INDEXER_ALLOCATION_OVERFLOWS_SUM_ERA_IDX_END_ASC',
  IndexerAllocationOverflowsSumEraIdxEndDesc = 'INDEXER_ALLOCATION_OVERFLOWS_SUM_ERA_IDX_END_DESC',
  IndexerAllocationOverflowsSumEraIdxStartAsc = 'INDEXER_ALLOCATION_OVERFLOWS_SUM_ERA_IDX_START_ASC',
  IndexerAllocationOverflowsSumEraIdxStartDesc = 'INDEXER_ALLOCATION_OVERFLOWS_SUM_ERA_IDX_START_DESC',
  IndexerAllocationOverflowsSumIdAsc = 'INDEXER_ALLOCATION_OVERFLOWS_SUM_ID_ASC',
  IndexerAllocationOverflowsSumIdDesc = 'INDEXER_ALLOCATION_OVERFLOWS_SUM_ID_DESC',
  IndexerAllocationOverflowsSumIndexerIdAsc = 'INDEXER_ALLOCATION_OVERFLOWS_SUM_INDEXER_ID_ASC',
  IndexerAllocationOverflowsSumIndexerIdDesc = 'INDEXER_ALLOCATION_OVERFLOWS_SUM_INDEXER_ID_DESC',
  IndexerAllocationOverflowsSumOverflowEndAsc = 'INDEXER_ALLOCATION_OVERFLOWS_SUM_OVERFLOW_END_ASC',
  IndexerAllocationOverflowsSumOverflowEndDesc = 'INDEXER_ALLOCATION_OVERFLOWS_SUM_OVERFLOW_END_DESC',
  IndexerAllocationOverflowsSumOverflowStartAsc = 'INDEXER_ALLOCATION_OVERFLOWS_SUM_OVERFLOW_START_ASC',
  IndexerAllocationOverflowsSumOverflowStartDesc = 'INDEXER_ALLOCATION_OVERFLOWS_SUM_OVERFLOW_START_DESC',
  IndexerAllocationOverflowsSumOverflowTimeAsc = 'INDEXER_ALLOCATION_OVERFLOWS_SUM_OVERFLOW_TIME_ASC',
  IndexerAllocationOverflowsSumOverflowTimeDesc = 'INDEXER_ALLOCATION_OVERFLOWS_SUM_OVERFLOW_TIME_DESC',
  IndexerAllocationOverflowsSumUpdateAtAsc = 'INDEXER_ALLOCATION_OVERFLOWS_SUM_UPDATE_AT_ASC',
  IndexerAllocationOverflowsSumUpdateAtDesc = 'INDEXER_ALLOCATION_OVERFLOWS_SUM_UPDATE_AT_DESC',
  IndexerAllocationOverflowsVariancePopulationBlockRangeAsc = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  IndexerAllocationOverflowsVariancePopulationBlockRangeDesc = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  IndexerAllocationOverflowsVariancePopulationCreateAtAsc = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_POPULATION_CREATE_AT_ASC',
  IndexerAllocationOverflowsVariancePopulationCreateAtDesc = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_POPULATION_CREATE_AT_DESC',
  IndexerAllocationOverflowsVariancePopulationEraIdxEndAsc = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_POPULATION_ERA_IDX_END_ASC',
  IndexerAllocationOverflowsVariancePopulationEraIdxEndDesc = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_POPULATION_ERA_IDX_END_DESC',
  IndexerAllocationOverflowsVariancePopulationEraIdxStartAsc = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_POPULATION_ERA_IDX_START_ASC',
  IndexerAllocationOverflowsVariancePopulationEraIdxStartDesc = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_POPULATION_ERA_IDX_START_DESC',
  IndexerAllocationOverflowsVariancePopulationIdAsc = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_POPULATION_ID_ASC',
  IndexerAllocationOverflowsVariancePopulationIdDesc = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_POPULATION_ID_DESC',
  IndexerAllocationOverflowsVariancePopulationIndexerIdAsc = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_POPULATION_INDEXER_ID_ASC',
  IndexerAllocationOverflowsVariancePopulationIndexerIdDesc = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_POPULATION_INDEXER_ID_DESC',
  IndexerAllocationOverflowsVariancePopulationOverflowEndAsc = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_POPULATION_OVERFLOW_END_ASC',
  IndexerAllocationOverflowsVariancePopulationOverflowEndDesc = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_POPULATION_OVERFLOW_END_DESC',
  IndexerAllocationOverflowsVariancePopulationOverflowStartAsc = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_POPULATION_OVERFLOW_START_ASC',
  IndexerAllocationOverflowsVariancePopulationOverflowStartDesc = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_POPULATION_OVERFLOW_START_DESC',
  IndexerAllocationOverflowsVariancePopulationOverflowTimeAsc = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_POPULATION_OVERFLOW_TIME_ASC',
  IndexerAllocationOverflowsVariancePopulationOverflowTimeDesc = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_POPULATION_OVERFLOW_TIME_DESC',
  IndexerAllocationOverflowsVariancePopulationUpdateAtAsc = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_POPULATION_UPDATE_AT_ASC',
  IndexerAllocationOverflowsVariancePopulationUpdateAtDesc = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_POPULATION_UPDATE_AT_DESC',
  IndexerAllocationOverflowsVarianceSampleBlockRangeAsc = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  IndexerAllocationOverflowsVarianceSampleBlockRangeDesc = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  IndexerAllocationOverflowsVarianceSampleCreateAtAsc = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_SAMPLE_CREATE_AT_ASC',
  IndexerAllocationOverflowsVarianceSampleCreateAtDesc = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_SAMPLE_CREATE_AT_DESC',
  IndexerAllocationOverflowsVarianceSampleEraIdxEndAsc = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_SAMPLE_ERA_IDX_END_ASC',
  IndexerAllocationOverflowsVarianceSampleEraIdxEndDesc = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_SAMPLE_ERA_IDX_END_DESC',
  IndexerAllocationOverflowsVarianceSampleEraIdxStartAsc = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_SAMPLE_ERA_IDX_START_ASC',
  IndexerAllocationOverflowsVarianceSampleEraIdxStartDesc = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_SAMPLE_ERA_IDX_START_DESC',
  IndexerAllocationOverflowsVarianceSampleIdAsc = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_SAMPLE_ID_ASC',
  IndexerAllocationOverflowsVarianceSampleIdDesc = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_SAMPLE_ID_DESC',
  IndexerAllocationOverflowsVarianceSampleIndexerIdAsc = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  IndexerAllocationOverflowsVarianceSampleIndexerIdDesc = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  IndexerAllocationOverflowsVarianceSampleOverflowEndAsc = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_SAMPLE_OVERFLOW_END_ASC',
  IndexerAllocationOverflowsVarianceSampleOverflowEndDesc = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_SAMPLE_OVERFLOW_END_DESC',
  IndexerAllocationOverflowsVarianceSampleOverflowStartAsc = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_SAMPLE_OVERFLOW_START_ASC',
  IndexerAllocationOverflowsVarianceSampleOverflowStartDesc = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_SAMPLE_OVERFLOW_START_DESC',
  IndexerAllocationOverflowsVarianceSampleOverflowTimeAsc = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_SAMPLE_OVERFLOW_TIME_ASC',
  IndexerAllocationOverflowsVarianceSampleOverflowTimeDesc = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_SAMPLE_OVERFLOW_TIME_DESC',
  IndexerAllocationOverflowsVarianceSampleUpdateAtAsc = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_SAMPLE_UPDATE_AT_ASC',
  IndexerAllocationOverflowsVarianceSampleUpdateAtDesc = 'INDEXER_ALLOCATION_OVERFLOWS_VARIANCE_SAMPLE_UPDATE_AT_DESC',
  IndexerAllocationRewardsAverageBlockRangeAsc = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_BLOCK_RANGE_ASC',
  IndexerAllocationRewardsAverageBlockRangeDesc = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_BLOCK_RANGE_DESC',
  IndexerAllocationRewardsAverageBurntAsc = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_BURNT_ASC',
  IndexerAllocationRewardsAverageBurntDesc = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_BURNT_DESC',
  IndexerAllocationRewardsAverageCreateAtAsc = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_CREATE_AT_ASC',
  IndexerAllocationRewardsAverageCreateAtDesc = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_CREATE_AT_DESC',
  IndexerAllocationRewardsAverageDeploymentIdAsc = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_DEPLOYMENT_ID_ASC',
  IndexerAllocationRewardsAverageDeploymentIdDesc = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_DEPLOYMENT_ID_DESC',
  IndexerAllocationRewardsAverageEraIdxAsc = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_ERA_IDX_ASC',
  IndexerAllocationRewardsAverageEraIdxDesc = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_ERA_IDX_DESC',
  IndexerAllocationRewardsAverageIdAsc = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_ID_ASC',
  IndexerAllocationRewardsAverageIdDesc = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_ID_DESC',
  IndexerAllocationRewardsAverageIndexerIdAsc = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_INDEXER_ID_ASC',
  IndexerAllocationRewardsAverageIndexerIdDesc = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_INDEXER_ID_DESC',
  IndexerAllocationRewardsAverageProjectIdAsc = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_PROJECT_ID_ASC',
  IndexerAllocationRewardsAverageProjectIdDesc = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_PROJECT_ID_DESC',
  IndexerAllocationRewardsAverageRewardAsc = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_REWARD_ASC',
  IndexerAllocationRewardsAverageRewardDesc = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_REWARD_DESC',
  IndexerAllocationRewardsByIndexerIdCountAsc = 'INDEXER_ALLOCATION_REWARDS_BY_INDEXER_ID__COUNT_ASC',
  IndexerAllocationRewardsByIndexerIdCountDesc = 'INDEXER_ALLOCATION_REWARDS_BY_INDEXER_ID__COUNT_DESC',
  IndexerAllocationRewardsCountAsc = 'INDEXER_ALLOCATION_REWARDS_COUNT_ASC',
  IndexerAllocationRewardsCountDesc = 'INDEXER_ALLOCATION_REWARDS_COUNT_DESC',
  IndexerAllocationRewardsDistinctCountBlockRangeAsc = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  IndexerAllocationRewardsDistinctCountBlockRangeDesc = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  IndexerAllocationRewardsDistinctCountBurntAsc = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_BURNT_ASC',
  IndexerAllocationRewardsDistinctCountBurntDesc = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_BURNT_DESC',
  IndexerAllocationRewardsDistinctCountCreateAtAsc = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_CREATE_AT_ASC',
  IndexerAllocationRewardsDistinctCountCreateAtDesc = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_CREATE_AT_DESC',
  IndexerAllocationRewardsDistinctCountDeploymentIdAsc = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_DEPLOYMENT_ID_ASC',
  IndexerAllocationRewardsDistinctCountDeploymentIdDesc = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_DEPLOYMENT_ID_DESC',
  IndexerAllocationRewardsDistinctCountEraIdxAsc = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_ERA_IDX_ASC',
  IndexerAllocationRewardsDistinctCountEraIdxDesc = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_ERA_IDX_DESC',
  IndexerAllocationRewardsDistinctCountIdAsc = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_ID_ASC',
  IndexerAllocationRewardsDistinctCountIdDesc = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_ID_DESC',
  IndexerAllocationRewardsDistinctCountIndexerIdAsc = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_INDEXER_ID_ASC',
  IndexerAllocationRewardsDistinctCountIndexerIdDesc = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_INDEXER_ID_DESC',
  IndexerAllocationRewardsDistinctCountProjectIdAsc = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_PROJECT_ID_ASC',
  IndexerAllocationRewardsDistinctCountProjectIdDesc = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_PROJECT_ID_DESC',
  IndexerAllocationRewardsDistinctCountRewardAsc = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_REWARD_ASC',
  IndexerAllocationRewardsDistinctCountRewardDesc = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_REWARD_DESC',
  IndexerAllocationRewardsMaxBlockRangeAsc = 'INDEXER_ALLOCATION_REWARDS_MAX_BLOCK_RANGE_ASC',
  IndexerAllocationRewardsMaxBlockRangeDesc = 'INDEXER_ALLOCATION_REWARDS_MAX_BLOCK_RANGE_DESC',
  IndexerAllocationRewardsMaxBurntAsc = 'INDEXER_ALLOCATION_REWARDS_MAX_BURNT_ASC',
  IndexerAllocationRewardsMaxBurntDesc = 'INDEXER_ALLOCATION_REWARDS_MAX_BURNT_DESC',
  IndexerAllocationRewardsMaxCreateAtAsc = 'INDEXER_ALLOCATION_REWARDS_MAX_CREATE_AT_ASC',
  IndexerAllocationRewardsMaxCreateAtDesc = 'INDEXER_ALLOCATION_REWARDS_MAX_CREATE_AT_DESC',
  IndexerAllocationRewardsMaxDeploymentIdAsc = 'INDEXER_ALLOCATION_REWARDS_MAX_DEPLOYMENT_ID_ASC',
  IndexerAllocationRewardsMaxDeploymentIdDesc = 'INDEXER_ALLOCATION_REWARDS_MAX_DEPLOYMENT_ID_DESC',
  IndexerAllocationRewardsMaxEraIdxAsc = 'INDEXER_ALLOCATION_REWARDS_MAX_ERA_IDX_ASC',
  IndexerAllocationRewardsMaxEraIdxDesc = 'INDEXER_ALLOCATION_REWARDS_MAX_ERA_IDX_DESC',
  IndexerAllocationRewardsMaxIdAsc = 'INDEXER_ALLOCATION_REWARDS_MAX_ID_ASC',
  IndexerAllocationRewardsMaxIdDesc = 'INDEXER_ALLOCATION_REWARDS_MAX_ID_DESC',
  IndexerAllocationRewardsMaxIndexerIdAsc = 'INDEXER_ALLOCATION_REWARDS_MAX_INDEXER_ID_ASC',
  IndexerAllocationRewardsMaxIndexerIdDesc = 'INDEXER_ALLOCATION_REWARDS_MAX_INDEXER_ID_DESC',
  IndexerAllocationRewardsMaxProjectIdAsc = 'INDEXER_ALLOCATION_REWARDS_MAX_PROJECT_ID_ASC',
  IndexerAllocationRewardsMaxProjectIdDesc = 'INDEXER_ALLOCATION_REWARDS_MAX_PROJECT_ID_DESC',
  IndexerAllocationRewardsMaxRewardAsc = 'INDEXER_ALLOCATION_REWARDS_MAX_REWARD_ASC',
  IndexerAllocationRewardsMaxRewardDesc = 'INDEXER_ALLOCATION_REWARDS_MAX_REWARD_DESC',
  IndexerAllocationRewardsMinBlockRangeAsc = 'INDEXER_ALLOCATION_REWARDS_MIN_BLOCK_RANGE_ASC',
  IndexerAllocationRewardsMinBlockRangeDesc = 'INDEXER_ALLOCATION_REWARDS_MIN_BLOCK_RANGE_DESC',
  IndexerAllocationRewardsMinBurntAsc = 'INDEXER_ALLOCATION_REWARDS_MIN_BURNT_ASC',
  IndexerAllocationRewardsMinBurntDesc = 'INDEXER_ALLOCATION_REWARDS_MIN_BURNT_DESC',
  IndexerAllocationRewardsMinCreateAtAsc = 'INDEXER_ALLOCATION_REWARDS_MIN_CREATE_AT_ASC',
  IndexerAllocationRewardsMinCreateAtDesc = 'INDEXER_ALLOCATION_REWARDS_MIN_CREATE_AT_DESC',
  IndexerAllocationRewardsMinDeploymentIdAsc = 'INDEXER_ALLOCATION_REWARDS_MIN_DEPLOYMENT_ID_ASC',
  IndexerAllocationRewardsMinDeploymentIdDesc = 'INDEXER_ALLOCATION_REWARDS_MIN_DEPLOYMENT_ID_DESC',
  IndexerAllocationRewardsMinEraIdxAsc = 'INDEXER_ALLOCATION_REWARDS_MIN_ERA_IDX_ASC',
  IndexerAllocationRewardsMinEraIdxDesc = 'INDEXER_ALLOCATION_REWARDS_MIN_ERA_IDX_DESC',
  IndexerAllocationRewardsMinIdAsc = 'INDEXER_ALLOCATION_REWARDS_MIN_ID_ASC',
  IndexerAllocationRewardsMinIdDesc = 'INDEXER_ALLOCATION_REWARDS_MIN_ID_DESC',
  IndexerAllocationRewardsMinIndexerIdAsc = 'INDEXER_ALLOCATION_REWARDS_MIN_INDEXER_ID_ASC',
  IndexerAllocationRewardsMinIndexerIdDesc = 'INDEXER_ALLOCATION_REWARDS_MIN_INDEXER_ID_DESC',
  IndexerAllocationRewardsMinProjectIdAsc = 'INDEXER_ALLOCATION_REWARDS_MIN_PROJECT_ID_ASC',
  IndexerAllocationRewardsMinProjectIdDesc = 'INDEXER_ALLOCATION_REWARDS_MIN_PROJECT_ID_DESC',
  IndexerAllocationRewardsMinRewardAsc = 'INDEXER_ALLOCATION_REWARDS_MIN_REWARD_ASC',
  IndexerAllocationRewardsMinRewardDesc = 'INDEXER_ALLOCATION_REWARDS_MIN_REWARD_DESC',
  IndexerAllocationRewardsStddevPopulationBlockRangeAsc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  IndexerAllocationRewardsStddevPopulationBlockRangeDesc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  IndexerAllocationRewardsStddevPopulationBurntAsc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_BURNT_ASC',
  IndexerAllocationRewardsStddevPopulationBurntDesc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_BURNT_DESC',
  IndexerAllocationRewardsStddevPopulationCreateAtAsc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_CREATE_AT_ASC',
  IndexerAllocationRewardsStddevPopulationCreateAtDesc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_CREATE_AT_DESC',
  IndexerAllocationRewardsStddevPopulationDeploymentIdAsc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_DEPLOYMENT_ID_ASC',
  IndexerAllocationRewardsStddevPopulationDeploymentIdDesc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_DEPLOYMENT_ID_DESC',
  IndexerAllocationRewardsStddevPopulationEraIdxAsc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_ERA_IDX_ASC',
  IndexerAllocationRewardsStddevPopulationEraIdxDesc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_ERA_IDX_DESC',
  IndexerAllocationRewardsStddevPopulationIdAsc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_ID_ASC',
  IndexerAllocationRewardsStddevPopulationIdDesc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_ID_DESC',
  IndexerAllocationRewardsStddevPopulationIndexerIdAsc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_INDEXER_ID_ASC',
  IndexerAllocationRewardsStddevPopulationIndexerIdDesc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_INDEXER_ID_DESC',
  IndexerAllocationRewardsStddevPopulationProjectIdAsc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_PROJECT_ID_ASC',
  IndexerAllocationRewardsStddevPopulationProjectIdDesc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_PROJECT_ID_DESC',
  IndexerAllocationRewardsStddevPopulationRewardAsc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_REWARD_ASC',
  IndexerAllocationRewardsStddevPopulationRewardDesc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_REWARD_DESC',
  IndexerAllocationRewardsStddevSampleBlockRangeAsc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  IndexerAllocationRewardsStddevSampleBlockRangeDesc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  IndexerAllocationRewardsStddevSampleBurntAsc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_BURNT_ASC',
  IndexerAllocationRewardsStddevSampleBurntDesc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_BURNT_DESC',
  IndexerAllocationRewardsStddevSampleCreateAtAsc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_CREATE_AT_ASC',
  IndexerAllocationRewardsStddevSampleCreateAtDesc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_CREATE_AT_DESC',
  IndexerAllocationRewardsStddevSampleDeploymentIdAsc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC',
  IndexerAllocationRewardsStddevSampleDeploymentIdDesc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC',
  IndexerAllocationRewardsStddevSampleEraIdxAsc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_ERA_IDX_ASC',
  IndexerAllocationRewardsStddevSampleEraIdxDesc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_ERA_IDX_DESC',
  IndexerAllocationRewardsStddevSampleIdAsc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_ID_ASC',
  IndexerAllocationRewardsStddevSampleIdDesc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_ID_DESC',
  IndexerAllocationRewardsStddevSampleIndexerIdAsc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_INDEXER_ID_ASC',
  IndexerAllocationRewardsStddevSampleIndexerIdDesc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_INDEXER_ID_DESC',
  IndexerAllocationRewardsStddevSampleProjectIdAsc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_PROJECT_ID_ASC',
  IndexerAllocationRewardsStddevSampleProjectIdDesc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_PROJECT_ID_DESC',
  IndexerAllocationRewardsStddevSampleRewardAsc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_REWARD_ASC',
  IndexerAllocationRewardsStddevSampleRewardDesc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_REWARD_DESC',
  IndexerAllocationRewardsSumBlockRangeAsc = 'INDEXER_ALLOCATION_REWARDS_SUM_BLOCK_RANGE_ASC',
  IndexerAllocationRewardsSumBlockRangeDesc = 'INDEXER_ALLOCATION_REWARDS_SUM_BLOCK_RANGE_DESC',
  IndexerAllocationRewardsSumBurntAsc = 'INDEXER_ALLOCATION_REWARDS_SUM_BURNT_ASC',
  IndexerAllocationRewardsSumBurntDesc = 'INDEXER_ALLOCATION_REWARDS_SUM_BURNT_DESC',
  IndexerAllocationRewardsSumCreateAtAsc = 'INDEXER_ALLOCATION_REWARDS_SUM_CREATE_AT_ASC',
  IndexerAllocationRewardsSumCreateAtDesc = 'INDEXER_ALLOCATION_REWARDS_SUM_CREATE_AT_DESC',
  IndexerAllocationRewardsSumDeploymentIdAsc = 'INDEXER_ALLOCATION_REWARDS_SUM_DEPLOYMENT_ID_ASC',
  IndexerAllocationRewardsSumDeploymentIdDesc = 'INDEXER_ALLOCATION_REWARDS_SUM_DEPLOYMENT_ID_DESC',
  IndexerAllocationRewardsSumEraIdxAsc = 'INDEXER_ALLOCATION_REWARDS_SUM_ERA_IDX_ASC',
  IndexerAllocationRewardsSumEraIdxDesc = 'INDEXER_ALLOCATION_REWARDS_SUM_ERA_IDX_DESC',
  IndexerAllocationRewardsSumIdAsc = 'INDEXER_ALLOCATION_REWARDS_SUM_ID_ASC',
  IndexerAllocationRewardsSumIdDesc = 'INDEXER_ALLOCATION_REWARDS_SUM_ID_DESC',
  IndexerAllocationRewardsSumIndexerIdAsc = 'INDEXER_ALLOCATION_REWARDS_SUM_INDEXER_ID_ASC',
  IndexerAllocationRewardsSumIndexerIdDesc = 'INDEXER_ALLOCATION_REWARDS_SUM_INDEXER_ID_DESC',
  IndexerAllocationRewardsSumProjectIdAsc = 'INDEXER_ALLOCATION_REWARDS_SUM_PROJECT_ID_ASC',
  IndexerAllocationRewardsSumProjectIdDesc = 'INDEXER_ALLOCATION_REWARDS_SUM_PROJECT_ID_DESC',
  IndexerAllocationRewardsSumRewardAsc = 'INDEXER_ALLOCATION_REWARDS_SUM_REWARD_ASC',
  IndexerAllocationRewardsSumRewardDesc = 'INDEXER_ALLOCATION_REWARDS_SUM_REWARD_DESC',
  IndexerAllocationRewardsVariancePopulationBlockRangeAsc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  IndexerAllocationRewardsVariancePopulationBlockRangeDesc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  IndexerAllocationRewardsVariancePopulationBurntAsc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_BURNT_ASC',
  IndexerAllocationRewardsVariancePopulationBurntDesc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_BURNT_DESC',
  IndexerAllocationRewardsVariancePopulationCreateAtAsc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_CREATE_AT_ASC',
  IndexerAllocationRewardsVariancePopulationCreateAtDesc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_CREATE_AT_DESC',
  IndexerAllocationRewardsVariancePopulationDeploymentIdAsc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC',
  IndexerAllocationRewardsVariancePopulationDeploymentIdDesc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC',
  IndexerAllocationRewardsVariancePopulationEraIdxAsc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_ERA_IDX_ASC',
  IndexerAllocationRewardsVariancePopulationEraIdxDesc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_ERA_IDX_DESC',
  IndexerAllocationRewardsVariancePopulationIdAsc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_ID_ASC',
  IndexerAllocationRewardsVariancePopulationIdDesc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_ID_DESC',
  IndexerAllocationRewardsVariancePopulationIndexerIdAsc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_INDEXER_ID_ASC',
  IndexerAllocationRewardsVariancePopulationIndexerIdDesc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_INDEXER_ID_DESC',
  IndexerAllocationRewardsVariancePopulationProjectIdAsc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_PROJECT_ID_ASC',
  IndexerAllocationRewardsVariancePopulationProjectIdDesc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_PROJECT_ID_DESC',
  IndexerAllocationRewardsVariancePopulationRewardAsc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_REWARD_ASC',
  IndexerAllocationRewardsVariancePopulationRewardDesc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_REWARD_DESC',
  IndexerAllocationRewardsVarianceSampleBlockRangeAsc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  IndexerAllocationRewardsVarianceSampleBlockRangeDesc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  IndexerAllocationRewardsVarianceSampleBurntAsc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_BURNT_ASC',
  IndexerAllocationRewardsVarianceSampleBurntDesc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_BURNT_DESC',
  IndexerAllocationRewardsVarianceSampleCreateAtAsc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_CREATE_AT_ASC',
  IndexerAllocationRewardsVarianceSampleCreateAtDesc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_CREATE_AT_DESC',
  IndexerAllocationRewardsVarianceSampleDeploymentIdAsc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC',
  IndexerAllocationRewardsVarianceSampleDeploymentIdDesc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC',
  IndexerAllocationRewardsVarianceSampleEraIdxAsc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_ERA_IDX_ASC',
  IndexerAllocationRewardsVarianceSampleEraIdxDesc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_ERA_IDX_DESC',
  IndexerAllocationRewardsVarianceSampleIdAsc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_ID_ASC',
  IndexerAllocationRewardsVarianceSampleIdDesc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_ID_DESC',
  IndexerAllocationRewardsVarianceSampleIndexerIdAsc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  IndexerAllocationRewardsVarianceSampleIndexerIdDesc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  IndexerAllocationRewardsVarianceSampleProjectIdAsc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_PROJECT_ID_ASC',
  IndexerAllocationRewardsVarianceSampleProjectIdDesc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_PROJECT_ID_DESC',
  IndexerAllocationRewardsVarianceSampleRewardAsc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_REWARD_ASC',
  IndexerAllocationRewardsVarianceSampleRewardDesc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_REWARD_DESC',
  IndexerAllocationRewardSummariesAverageBlockRangeAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_BLOCK_RANGE_ASC',
  IndexerAllocationRewardSummariesAverageBlockRangeDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_BLOCK_RANGE_DESC',
  IndexerAllocationRewardSummariesAverageCreateAtAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_CREATE_AT_ASC',
  IndexerAllocationRewardSummariesAverageCreateAtDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_CREATE_AT_DESC',
  IndexerAllocationRewardSummariesAverageDeploymentIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_DEPLOYMENT_ID_ASC',
  IndexerAllocationRewardSummariesAverageDeploymentIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_DEPLOYMENT_ID_DESC',
  IndexerAllocationRewardSummariesAverageIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_ID_ASC',
  IndexerAllocationRewardSummariesAverageIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_ID_DESC',
  IndexerAllocationRewardSummariesAverageIndexerIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_INDEXER_ID_ASC',
  IndexerAllocationRewardSummariesAverageIndexerIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_INDEXER_ID_DESC',
  IndexerAllocationRewardSummariesAverageProjectIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_PROJECT_ID_ASC',
  IndexerAllocationRewardSummariesAverageProjectIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_PROJECT_ID_DESC',
  IndexerAllocationRewardSummariesAverageTotalBurntAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_TOTAL_BURNT_ASC',
  IndexerAllocationRewardSummariesAverageTotalBurntDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_TOTAL_BURNT_DESC',
  IndexerAllocationRewardSummariesAverageTotalRewardAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_TOTAL_REWARD_ASC',
  IndexerAllocationRewardSummariesAverageTotalRewardDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_TOTAL_REWARD_DESC',
  IndexerAllocationRewardSummariesAverageUpdateAtAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_UPDATE_AT_ASC',
  IndexerAllocationRewardSummariesAverageUpdateAtDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_UPDATE_AT_DESC',
  IndexerAllocationRewardSummariesByIndexerIdCountAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_BY_INDEXER_ID__COUNT_ASC',
  IndexerAllocationRewardSummariesByIndexerIdCountDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_BY_INDEXER_ID__COUNT_DESC',
  IndexerAllocationRewardSummariesCountAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_COUNT_ASC',
  IndexerAllocationRewardSummariesCountDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_COUNT_DESC',
  IndexerAllocationRewardSummariesDistinctCountBlockRangeAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  IndexerAllocationRewardSummariesDistinctCountBlockRangeDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  IndexerAllocationRewardSummariesDistinctCountCreateAtAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_CREATE_AT_ASC',
  IndexerAllocationRewardSummariesDistinctCountCreateAtDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_CREATE_AT_DESC',
  IndexerAllocationRewardSummariesDistinctCountDeploymentIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_DEPLOYMENT_ID_ASC',
  IndexerAllocationRewardSummariesDistinctCountDeploymentIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_DEPLOYMENT_ID_DESC',
  IndexerAllocationRewardSummariesDistinctCountIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_ID_ASC',
  IndexerAllocationRewardSummariesDistinctCountIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_ID_DESC',
  IndexerAllocationRewardSummariesDistinctCountIndexerIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_INDEXER_ID_ASC',
  IndexerAllocationRewardSummariesDistinctCountIndexerIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_INDEXER_ID_DESC',
  IndexerAllocationRewardSummariesDistinctCountProjectIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_PROJECT_ID_ASC',
  IndexerAllocationRewardSummariesDistinctCountProjectIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_PROJECT_ID_DESC',
  IndexerAllocationRewardSummariesDistinctCountTotalBurntAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_TOTAL_BURNT_ASC',
  IndexerAllocationRewardSummariesDistinctCountTotalBurntDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_TOTAL_BURNT_DESC',
  IndexerAllocationRewardSummariesDistinctCountTotalRewardAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_TOTAL_REWARD_ASC',
  IndexerAllocationRewardSummariesDistinctCountTotalRewardDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_TOTAL_REWARD_DESC',
  IndexerAllocationRewardSummariesDistinctCountUpdateAtAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_UPDATE_AT_ASC',
  IndexerAllocationRewardSummariesDistinctCountUpdateAtDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_UPDATE_AT_DESC',
  IndexerAllocationRewardSummariesMaxBlockRangeAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_BLOCK_RANGE_ASC',
  IndexerAllocationRewardSummariesMaxBlockRangeDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_BLOCK_RANGE_DESC',
  IndexerAllocationRewardSummariesMaxCreateAtAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_CREATE_AT_ASC',
  IndexerAllocationRewardSummariesMaxCreateAtDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_CREATE_AT_DESC',
  IndexerAllocationRewardSummariesMaxDeploymentIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_DEPLOYMENT_ID_ASC',
  IndexerAllocationRewardSummariesMaxDeploymentIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_DEPLOYMENT_ID_DESC',
  IndexerAllocationRewardSummariesMaxIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_ID_ASC',
  IndexerAllocationRewardSummariesMaxIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_ID_DESC',
  IndexerAllocationRewardSummariesMaxIndexerIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_INDEXER_ID_ASC',
  IndexerAllocationRewardSummariesMaxIndexerIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_INDEXER_ID_DESC',
  IndexerAllocationRewardSummariesMaxProjectIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_PROJECT_ID_ASC',
  IndexerAllocationRewardSummariesMaxProjectIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_PROJECT_ID_DESC',
  IndexerAllocationRewardSummariesMaxTotalBurntAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_TOTAL_BURNT_ASC',
  IndexerAllocationRewardSummariesMaxTotalBurntDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_TOTAL_BURNT_DESC',
  IndexerAllocationRewardSummariesMaxTotalRewardAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_TOTAL_REWARD_ASC',
  IndexerAllocationRewardSummariesMaxTotalRewardDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_TOTAL_REWARD_DESC',
  IndexerAllocationRewardSummariesMaxUpdateAtAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_UPDATE_AT_ASC',
  IndexerAllocationRewardSummariesMaxUpdateAtDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_UPDATE_AT_DESC',
  IndexerAllocationRewardSummariesMinBlockRangeAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_BLOCK_RANGE_ASC',
  IndexerAllocationRewardSummariesMinBlockRangeDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_BLOCK_RANGE_DESC',
  IndexerAllocationRewardSummariesMinCreateAtAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_CREATE_AT_ASC',
  IndexerAllocationRewardSummariesMinCreateAtDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_CREATE_AT_DESC',
  IndexerAllocationRewardSummariesMinDeploymentIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_DEPLOYMENT_ID_ASC',
  IndexerAllocationRewardSummariesMinDeploymentIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_DEPLOYMENT_ID_DESC',
  IndexerAllocationRewardSummariesMinIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_ID_ASC',
  IndexerAllocationRewardSummariesMinIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_ID_DESC',
  IndexerAllocationRewardSummariesMinIndexerIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_INDEXER_ID_ASC',
  IndexerAllocationRewardSummariesMinIndexerIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_INDEXER_ID_DESC',
  IndexerAllocationRewardSummariesMinProjectIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_PROJECT_ID_ASC',
  IndexerAllocationRewardSummariesMinProjectIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_PROJECT_ID_DESC',
  IndexerAllocationRewardSummariesMinTotalBurntAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_TOTAL_BURNT_ASC',
  IndexerAllocationRewardSummariesMinTotalBurntDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_TOTAL_BURNT_DESC',
  IndexerAllocationRewardSummariesMinTotalRewardAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_TOTAL_REWARD_ASC',
  IndexerAllocationRewardSummariesMinTotalRewardDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_TOTAL_REWARD_DESC',
  IndexerAllocationRewardSummariesMinUpdateAtAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_UPDATE_AT_ASC',
  IndexerAllocationRewardSummariesMinUpdateAtDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_UPDATE_AT_DESC',
  IndexerAllocationRewardSummariesStddevPopulationBlockRangeAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  IndexerAllocationRewardSummariesStddevPopulationBlockRangeDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  IndexerAllocationRewardSummariesStddevPopulationCreateAtAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_CREATE_AT_ASC',
  IndexerAllocationRewardSummariesStddevPopulationCreateAtDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_CREATE_AT_DESC',
  IndexerAllocationRewardSummariesStddevPopulationDeploymentIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_DEPLOYMENT_ID_ASC',
  IndexerAllocationRewardSummariesStddevPopulationDeploymentIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_DEPLOYMENT_ID_DESC',
  IndexerAllocationRewardSummariesStddevPopulationIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_ID_ASC',
  IndexerAllocationRewardSummariesStddevPopulationIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_ID_DESC',
  IndexerAllocationRewardSummariesStddevPopulationIndexerIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_INDEXER_ID_ASC',
  IndexerAllocationRewardSummariesStddevPopulationIndexerIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_INDEXER_ID_DESC',
  IndexerAllocationRewardSummariesStddevPopulationProjectIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_PROJECT_ID_ASC',
  IndexerAllocationRewardSummariesStddevPopulationProjectIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_PROJECT_ID_DESC',
  IndexerAllocationRewardSummariesStddevPopulationTotalBurntAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_TOTAL_BURNT_ASC',
  IndexerAllocationRewardSummariesStddevPopulationTotalBurntDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_TOTAL_BURNT_DESC',
  IndexerAllocationRewardSummariesStddevPopulationTotalRewardAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_TOTAL_REWARD_ASC',
  IndexerAllocationRewardSummariesStddevPopulationTotalRewardDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_TOTAL_REWARD_DESC',
  IndexerAllocationRewardSummariesStddevPopulationUpdateAtAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_UPDATE_AT_ASC',
  IndexerAllocationRewardSummariesStddevPopulationUpdateAtDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_UPDATE_AT_DESC',
  IndexerAllocationRewardSummariesStddevSampleBlockRangeAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  IndexerAllocationRewardSummariesStddevSampleBlockRangeDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  IndexerAllocationRewardSummariesStddevSampleCreateAtAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_CREATE_AT_ASC',
  IndexerAllocationRewardSummariesStddevSampleCreateAtDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_CREATE_AT_DESC',
  IndexerAllocationRewardSummariesStddevSampleDeploymentIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC',
  IndexerAllocationRewardSummariesStddevSampleDeploymentIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC',
  IndexerAllocationRewardSummariesStddevSampleIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_ID_ASC',
  IndexerAllocationRewardSummariesStddevSampleIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_ID_DESC',
  IndexerAllocationRewardSummariesStddevSampleIndexerIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_INDEXER_ID_ASC',
  IndexerAllocationRewardSummariesStddevSampleIndexerIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_INDEXER_ID_DESC',
  IndexerAllocationRewardSummariesStddevSampleProjectIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_PROJECT_ID_ASC',
  IndexerAllocationRewardSummariesStddevSampleProjectIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_PROJECT_ID_DESC',
  IndexerAllocationRewardSummariesStddevSampleTotalBurntAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_TOTAL_BURNT_ASC',
  IndexerAllocationRewardSummariesStddevSampleTotalBurntDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_TOTAL_BURNT_DESC',
  IndexerAllocationRewardSummariesStddevSampleTotalRewardAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_TOTAL_REWARD_ASC',
  IndexerAllocationRewardSummariesStddevSampleTotalRewardDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_TOTAL_REWARD_DESC',
  IndexerAllocationRewardSummariesStddevSampleUpdateAtAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_UPDATE_AT_ASC',
  IndexerAllocationRewardSummariesStddevSampleUpdateAtDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_UPDATE_AT_DESC',
  IndexerAllocationRewardSummariesSumBlockRangeAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_BLOCK_RANGE_ASC',
  IndexerAllocationRewardSummariesSumBlockRangeDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_BLOCK_RANGE_DESC',
  IndexerAllocationRewardSummariesSumCreateAtAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_CREATE_AT_ASC',
  IndexerAllocationRewardSummariesSumCreateAtDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_CREATE_AT_DESC',
  IndexerAllocationRewardSummariesSumDeploymentIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_DEPLOYMENT_ID_ASC',
  IndexerAllocationRewardSummariesSumDeploymentIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_DEPLOYMENT_ID_DESC',
  IndexerAllocationRewardSummariesSumIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_ID_ASC',
  IndexerAllocationRewardSummariesSumIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_ID_DESC',
  IndexerAllocationRewardSummariesSumIndexerIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_INDEXER_ID_ASC',
  IndexerAllocationRewardSummariesSumIndexerIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_INDEXER_ID_DESC',
  IndexerAllocationRewardSummariesSumProjectIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_PROJECT_ID_ASC',
  IndexerAllocationRewardSummariesSumProjectIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_PROJECT_ID_DESC',
  IndexerAllocationRewardSummariesSumTotalBurntAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_TOTAL_BURNT_ASC',
  IndexerAllocationRewardSummariesSumTotalBurntDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_TOTAL_BURNT_DESC',
  IndexerAllocationRewardSummariesSumTotalRewardAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_TOTAL_REWARD_ASC',
  IndexerAllocationRewardSummariesSumTotalRewardDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_TOTAL_REWARD_DESC',
  IndexerAllocationRewardSummariesSumUpdateAtAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_UPDATE_AT_ASC',
  IndexerAllocationRewardSummariesSumUpdateAtDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_UPDATE_AT_DESC',
  IndexerAllocationRewardSummariesVariancePopulationBlockRangeAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  IndexerAllocationRewardSummariesVariancePopulationBlockRangeDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  IndexerAllocationRewardSummariesVariancePopulationCreateAtAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_CREATE_AT_ASC',
  IndexerAllocationRewardSummariesVariancePopulationCreateAtDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_CREATE_AT_DESC',
  IndexerAllocationRewardSummariesVariancePopulationDeploymentIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC',
  IndexerAllocationRewardSummariesVariancePopulationDeploymentIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC',
  IndexerAllocationRewardSummariesVariancePopulationIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_ID_ASC',
  IndexerAllocationRewardSummariesVariancePopulationIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_ID_DESC',
  IndexerAllocationRewardSummariesVariancePopulationIndexerIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_INDEXER_ID_ASC',
  IndexerAllocationRewardSummariesVariancePopulationIndexerIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_INDEXER_ID_DESC',
  IndexerAllocationRewardSummariesVariancePopulationProjectIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_PROJECT_ID_ASC',
  IndexerAllocationRewardSummariesVariancePopulationProjectIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_PROJECT_ID_DESC',
  IndexerAllocationRewardSummariesVariancePopulationTotalBurntAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_TOTAL_BURNT_ASC',
  IndexerAllocationRewardSummariesVariancePopulationTotalBurntDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_TOTAL_BURNT_DESC',
  IndexerAllocationRewardSummariesVariancePopulationTotalRewardAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_TOTAL_REWARD_ASC',
  IndexerAllocationRewardSummariesVariancePopulationTotalRewardDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_TOTAL_REWARD_DESC',
  IndexerAllocationRewardSummariesVariancePopulationUpdateAtAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_UPDATE_AT_ASC',
  IndexerAllocationRewardSummariesVariancePopulationUpdateAtDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_UPDATE_AT_DESC',
  IndexerAllocationRewardSummariesVarianceSampleBlockRangeAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  IndexerAllocationRewardSummariesVarianceSampleBlockRangeDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  IndexerAllocationRewardSummariesVarianceSampleCreateAtAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_CREATE_AT_ASC',
  IndexerAllocationRewardSummariesVarianceSampleCreateAtDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_CREATE_AT_DESC',
  IndexerAllocationRewardSummariesVarianceSampleDeploymentIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC',
  IndexerAllocationRewardSummariesVarianceSampleDeploymentIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC',
  IndexerAllocationRewardSummariesVarianceSampleIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_ID_ASC',
  IndexerAllocationRewardSummariesVarianceSampleIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_ID_DESC',
  IndexerAllocationRewardSummariesVarianceSampleIndexerIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  IndexerAllocationRewardSummariesVarianceSampleIndexerIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  IndexerAllocationRewardSummariesVarianceSampleProjectIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_PROJECT_ID_ASC',
  IndexerAllocationRewardSummariesVarianceSampleProjectIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_PROJECT_ID_DESC',
  IndexerAllocationRewardSummariesVarianceSampleTotalBurntAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_TOTAL_BURNT_ASC',
  IndexerAllocationRewardSummariesVarianceSampleTotalBurntDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_TOTAL_BURNT_DESC',
  IndexerAllocationRewardSummariesVarianceSampleTotalRewardAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_TOTAL_REWARD_ASC',
  IndexerAllocationRewardSummariesVarianceSampleTotalRewardDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_TOTAL_REWARD_DESC',
  IndexerAllocationRewardSummariesVarianceSampleUpdateAtAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_UPDATE_AT_ASC',
  IndexerAllocationRewardSummariesVarianceSampleUpdateAtDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_UPDATE_AT_DESC',
  IndexerAllocationSummariesAverageBlockRangeAsc = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_BLOCK_RANGE_ASC',
  IndexerAllocationSummariesAverageBlockRangeDesc = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_BLOCK_RANGE_DESC',
  IndexerAllocationSummariesAverageCreateAtAsc = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_CREATE_AT_ASC',
  IndexerAllocationSummariesAverageCreateAtDesc = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_CREATE_AT_DESC',
  IndexerAllocationSummariesAverageDeploymentIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_DEPLOYMENT_ID_ASC',
  IndexerAllocationSummariesAverageDeploymentIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_DEPLOYMENT_ID_DESC',
  IndexerAllocationSummariesAverageIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_ID_ASC',
  IndexerAllocationSummariesAverageIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_ID_DESC',
  IndexerAllocationSummariesAverageIndexerIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_INDEXER_ID_ASC',
  IndexerAllocationSummariesAverageIndexerIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_INDEXER_ID_DESC',
  IndexerAllocationSummariesAverageProjectIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_PROJECT_ID_ASC',
  IndexerAllocationSummariesAverageProjectIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_PROJECT_ID_DESC',
  IndexerAllocationSummariesAverageTotalAddedAsc = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_TOTAL_ADDED_ASC',
  IndexerAllocationSummariesAverageTotalAddedDesc = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_TOTAL_ADDED_DESC',
  IndexerAllocationSummariesAverageTotalAmountAsc = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_TOTAL_AMOUNT_ASC',
  IndexerAllocationSummariesAverageTotalAmountDesc = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_TOTAL_AMOUNT_DESC',
  IndexerAllocationSummariesAverageTotalRemovedAsc = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_TOTAL_REMOVED_ASC',
  IndexerAllocationSummariesAverageTotalRemovedDesc = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_TOTAL_REMOVED_DESC',
  IndexerAllocationSummariesAverageUpdateAtAsc = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_UPDATE_AT_ASC',
  IndexerAllocationSummariesAverageUpdateAtDesc = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_UPDATE_AT_DESC',
  IndexerAllocationSummariesByIndexerIdCountAsc = 'INDEXER_ALLOCATION_SUMMARIES_BY_INDEXER_ID__COUNT_ASC',
  IndexerAllocationSummariesByIndexerIdCountDesc = 'INDEXER_ALLOCATION_SUMMARIES_BY_INDEXER_ID__COUNT_DESC',
  IndexerAllocationSummariesCountAsc = 'INDEXER_ALLOCATION_SUMMARIES_COUNT_ASC',
  IndexerAllocationSummariesCountDesc = 'INDEXER_ALLOCATION_SUMMARIES_COUNT_DESC',
  IndexerAllocationSummariesDistinctCountBlockRangeAsc = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  IndexerAllocationSummariesDistinctCountBlockRangeDesc = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  IndexerAllocationSummariesDistinctCountCreateAtAsc = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_CREATE_AT_ASC',
  IndexerAllocationSummariesDistinctCountCreateAtDesc = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_CREATE_AT_DESC',
  IndexerAllocationSummariesDistinctCountDeploymentIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_DEPLOYMENT_ID_ASC',
  IndexerAllocationSummariesDistinctCountDeploymentIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_DEPLOYMENT_ID_DESC',
  IndexerAllocationSummariesDistinctCountIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_ID_ASC',
  IndexerAllocationSummariesDistinctCountIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_ID_DESC',
  IndexerAllocationSummariesDistinctCountIndexerIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_INDEXER_ID_ASC',
  IndexerAllocationSummariesDistinctCountIndexerIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_INDEXER_ID_DESC',
  IndexerAllocationSummariesDistinctCountProjectIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_PROJECT_ID_ASC',
  IndexerAllocationSummariesDistinctCountProjectIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_PROJECT_ID_DESC',
  IndexerAllocationSummariesDistinctCountTotalAddedAsc = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_TOTAL_ADDED_ASC',
  IndexerAllocationSummariesDistinctCountTotalAddedDesc = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_TOTAL_ADDED_DESC',
  IndexerAllocationSummariesDistinctCountTotalAmountAsc = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_TOTAL_AMOUNT_ASC',
  IndexerAllocationSummariesDistinctCountTotalAmountDesc = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_TOTAL_AMOUNT_DESC',
  IndexerAllocationSummariesDistinctCountTotalRemovedAsc = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_TOTAL_REMOVED_ASC',
  IndexerAllocationSummariesDistinctCountTotalRemovedDesc = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_TOTAL_REMOVED_DESC',
  IndexerAllocationSummariesDistinctCountUpdateAtAsc = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_UPDATE_AT_ASC',
  IndexerAllocationSummariesDistinctCountUpdateAtDesc = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_UPDATE_AT_DESC',
  IndexerAllocationSummariesMaxBlockRangeAsc = 'INDEXER_ALLOCATION_SUMMARIES_MAX_BLOCK_RANGE_ASC',
  IndexerAllocationSummariesMaxBlockRangeDesc = 'INDEXER_ALLOCATION_SUMMARIES_MAX_BLOCK_RANGE_DESC',
  IndexerAllocationSummariesMaxCreateAtAsc = 'INDEXER_ALLOCATION_SUMMARIES_MAX_CREATE_AT_ASC',
  IndexerAllocationSummariesMaxCreateAtDesc = 'INDEXER_ALLOCATION_SUMMARIES_MAX_CREATE_AT_DESC',
  IndexerAllocationSummariesMaxDeploymentIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_MAX_DEPLOYMENT_ID_ASC',
  IndexerAllocationSummariesMaxDeploymentIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_MAX_DEPLOYMENT_ID_DESC',
  IndexerAllocationSummariesMaxIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_MAX_ID_ASC',
  IndexerAllocationSummariesMaxIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_MAX_ID_DESC',
  IndexerAllocationSummariesMaxIndexerIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_MAX_INDEXER_ID_ASC',
  IndexerAllocationSummariesMaxIndexerIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_MAX_INDEXER_ID_DESC',
  IndexerAllocationSummariesMaxProjectIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_MAX_PROJECT_ID_ASC',
  IndexerAllocationSummariesMaxProjectIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_MAX_PROJECT_ID_DESC',
  IndexerAllocationSummariesMaxTotalAddedAsc = 'INDEXER_ALLOCATION_SUMMARIES_MAX_TOTAL_ADDED_ASC',
  IndexerAllocationSummariesMaxTotalAddedDesc = 'INDEXER_ALLOCATION_SUMMARIES_MAX_TOTAL_ADDED_DESC',
  IndexerAllocationSummariesMaxTotalAmountAsc = 'INDEXER_ALLOCATION_SUMMARIES_MAX_TOTAL_AMOUNT_ASC',
  IndexerAllocationSummariesMaxTotalAmountDesc = 'INDEXER_ALLOCATION_SUMMARIES_MAX_TOTAL_AMOUNT_DESC',
  IndexerAllocationSummariesMaxTotalRemovedAsc = 'INDEXER_ALLOCATION_SUMMARIES_MAX_TOTAL_REMOVED_ASC',
  IndexerAllocationSummariesMaxTotalRemovedDesc = 'INDEXER_ALLOCATION_SUMMARIES_MAX_TOTAL_REMOVED_DESC',
  IndexerAllocationSummariesMaxUpdateAtAsc = 'INDEXER_ALLOCATION_SUMMARIES_MAX_UPDATE_AT_ASC',
  IndexerAllocationSummariesMaxUpdateAtDesc = 'INDEXER_ALLOCATION_SUMMARIES_MAX_UPDATE_AT_DESC',
  IndexerAllocationSummariesMinBlockRangeAsc = 'INDEXER_ALLOCATION_SUMMARIES_MIN_BLOCK_RANGE_ASC',
  IndexerAllocationSummariesMinBlockRangeDesc = 'INDEXER_ALLOCATION_SUMMARIES_MIN_BLOCK_RANGE_DESC',
  IndexerAllocationSummariesMinCreateAtAsc = 'INDEXER_ALLOCATION_SUMMARIES_MIN_CREATE_AT_ASC',
  IndexerAllocationSummariesMinCreateAtDesc = 'INDEXER_ALLOCATION_SUMMARIES_MIN_CREATE_AT_DESC',
  IndexerAllocationSummariesMinDeploymentIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_MIN_DEPLOYMENT_ID_ASC',
  IndexerAllocationSummariesMinDeploymentIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_MIN_DEPLOYMENT_ID_DESC',
  IndexerAllocationSummariesMinIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_MIN_ID_ASC',
  IndexerAllocationSummariesMinIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_MIN_ID_DESC',
  IndexerAllocationSummariesMinIndexerIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_MIN_INDEXER_ID_ASC',
  IndexerAllocationSummariesMinIndexerIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_MIN_INDEXER_ID_DESC',
  IndexerAllocationSummariesMinProjectIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_MIN_PROJECT_ID_ASC',
  IndexerAllocationSummariesMinProjectIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_MIN_PROJECT_ID_DESC',
  IndexerAllocationSummariesMinTotalAddedAsc = 'INDEXER_ALLOCATION_SUMMARIES_MIN_TOTAL_ADDED_ASC',
  IndexerAllocationSummariesMinTotalAddedDesc = 'INDEXER_ALLOCATION_SUMMARIES_MIN_TOTAL_ADDED_DESC',
  IndexerAllocationSummariesMinTotalAmountAsc = 'INDEXER_ALLOCATION_SUMMARIES_MIN_TOTAL_AMOUNT_ASC',
  IndexerAllocationSummariesMinTotalAmountDesc = 'INDEXER_ALLOCATION_SUMMARIES_MIN_TOTAL_AMOUNT_DESC',
  IndexerAllocationSummariesMinTotalRemovedAsc = 'INDEXER_ALLOCATION_SUMMARIES_MIN_TOTAL_REMOVED_ASC',
  IndexerAllocationSummariesMinTotalRemovedDesc = 'INDEXER_ALLOCATION_SUMMARIES_MIN_TOTAL_REMOVED_DESC',
  IndexerAllocationSummariesMinUpdateAtAsc = 'INDEXER_ALLOCATION_SUMMARIES_MIN_UPDATE_AT_ASC',
  IndexerAllocationSummariesMinUpdateAtDesc = 'INDEXER_ALLOCATION_SUMMARIES_MIN_UPDATE_AT_DESC',
  IndexerAllocationSummariesStddevPopulationBlockRangeAsc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  IndexerAllocationSummariesStddevPopulationBlockRangeDesc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  IndexerAllocationSummariesStddevPopulationCreateAtAsc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_CREATE_AT_ASC',
  IndexerAllocationSummariesStddevPopulationCreateAtDesc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_CREATE_AT_DESC',
  IndexerAllocationSummariesStddevPopulationDeploymentIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_DEPLOYMENT_ID_ASC',
  IndexerAllocationSummariesStddevPopulationDeploymentIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_DEPLOYMENT_ID_DESC',
  IndexerAllocationSummariesStddevPopulationIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_ID_ASC',
  IndexerAllocationSummariesStddevPopulationIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_ID_DESC',
  IndexerAllocationSummariesStddevPopulationIndexerIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_INDEXER_ID_ASC',
  IndexerAllocationSummariesStddevPopulationIndexerIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_INDEXER_ID_DESC',
  IndexerAllocationSummariesStddevPopulationProjectIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_PROJECT_ID_ASC',
  IndexerAllocationSummariesStddevPopulationProjectIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_PROJECT_ID_DESC',
  IndexerAllocationSummariesStddevPopulationTotalAddedAsc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_TOTAL_ADDED_ASC',
  IndexerAllocationSummariesStddevPopulationTotalAddedDesc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_TOTAL_ADDED_DESC',
  IndexerAllocationSummariesStddevPopulationTotalAmountAsc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_TOTAL_AMOUNT_ASC',
  IndexerAllocationSummariesStddevPopulationTotalAmountDesc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_TOTAL_AMOUNT_DESC',
  IndexerAllocationSummariesStddevPopulationTotalRemovedAsc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_TOTAL_REMOVED_ASC',
  IndexerAllocationSummariesStddevPopulationTotalRemovedDesc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_TOTAL_REMOVED_DESC',
  IndexerAllocationSummariesStddevPopulationUpdateAtAsc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_UPDATE_AT_ASC',
  IndexerAllocationSummariesStddevPopulationUpdateAtDesc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_UPDATE_AT_DESC',
  IndexerAllocationSummariesStddevSampleBlockRangeAsc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  IndexerAllocationSummariesStddevSampleBlockRangeDesc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  IndexerAllocationSummariesStddevSampleCreateAtAsc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_CREATE_AT_ASC',
  IndexerAllocationSummariesStddevSampleCreateAtDesc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_CREATE_AT_DESC',
  IndexerAllocationSummariesStddevSampleDeploymentIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC',
  IndexerAllocationSummariesStddevSampleDeploymentIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC',
  IndexerAllocationSummariesStddevSampleIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_ID_ASC',
  IndexerAllocationSummariesStddevSampleIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_ID_DESC',
  IndexerAllocationSummariesStddevSampleIndexerIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_INDEXER_ID_ASC',
  IndexerAllocationSummariesStddevSampleIndexerIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_INDEXER_ID_DESC',
  IndexerAllocationSummariesStddevSampleProjectIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_PROJECT_ID_ASC',
  IndexerAllocationSummariesStddevSampleProjectIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_PROJECT_ID_DESC',
  IndexerAllocationSummariesStddevSampleTotalAddedAsc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_TOTAL_ADDED_ASC',
  IndexerAllocationSummariesStddevSampleTotalAddedDesc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_TOTAL_ADDED_DESC',
  IndexerAllocationSummariesStddevSampleTotalAmountAsc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_TOTAL_AMOUNT_ASC',
  IndexerAllocationSummariesStddevSampleTotalAmountDesc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_TOTAL_AMOUNT_DESC',
  IndexerAllocationSummariesStddevSampleTotalRemovedAsc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_TOTAL_REMOVED_ASC',
  IndexerAllocationSummariesStddevSampleTotalRemovedDesc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_TOTAL_REMOVED_DESC',
  IndexerAllocationSummariesStddevSampleUpdateAtAsc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_UPDATE_AT_ASC',
  IndexerAllocationSummariesStddevSampleUpdateAtDesc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_UPDATE_AT_DESC',
  IndexerAllocationSummariesSumBlockRangeAsc = 'INDEXER_ALLOCATION_SUMMARIES_SUM_BLOCK_RANGE_ASC',
  IndexerAllocationSummariesSumBlockRangeDesc = 'INDEXER_ALLOCATION_SUMMARIES_SUM_BLOCK_RANGE_DESC',
  IndexerAllocationSummariesSumCreateAtAsc = 'INDEXER_ALLOCATION_SUMMARIES_SUM_CREATE_AT_ASC',
  IndexerAllocationSummariesSumCreateAtDesc = 'INDEXER_ALLOCATION_SUMMARIES_SUM_CREATE_AT_DESC',
  IndexerAllocationSummariesSumDeploymentIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_SUM_DEPLOYMENT_ID_ASC',
  IndexerAllocationSummariesSumDeploymentIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_SUM_DEPLOYMENT_ID_DESC',
  IndexerAllocationSummariesSumIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_SUM_ID_ASC',
  IndexerAllocationSummariesSumIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_SUM_ID_DESC',
  IndexerAllocationSummariesSumIndexerIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_SUM_INDEXER_ID_ASC',
  IndexerAllocationSummariesSumIndexerIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_SUM_INDEXER_ID_DESC',
  IndexerAllocationSummariesSumProjectIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_SUM_PROJECT_ID_ASC',
  IndexerAllocationSummariesSumProjectIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_SUM_PROJECT_ID_DESC',
  IndexerAllocationSummariesSumTotalAddedAsc = 'INDEXER_ALLOCATION_SUMMARIES_SUM_TOTAL_ADDED_ASC',
  IndexerAllocationSummariesSumTotalAddedDesc = 'INDEXER_ALLOCATION_SUMMARIES_SUM_TOTAL_ADDED_DESC',
  IndexerAllocationSummariesSumTotalAmountAsc = 'INDEXER_ALLOCATION_SUMMARIES_SUM_TOTAL_AMOUNT_ASC',
  IndexerAllocationSummariesSumTotalAmountDesc = 'INDEXER_ALLOCATION_SUMMARIES_SUM_TOTAL_AMOUNT_DESC',
  IndexerAllocationSummariesSumTotalRemovedAsc = 'INDEXER_ALLOCATION_SUMMARIES_SUM_TOTAL_REMOVED_ASC',
  IndexerAllocationSummariesSumTotalRemovedDesc = 'INDEXER_ALLOCATION_SUMMARIES_SUM_TOTAL_REMOVED_DESC',
  IndexerAllocationSummariesSumUpdateAtAsc = 'INDEXER_ALLOCATION_SUMMARIES_SUM_UPDATE_AT_ASC',
  IndexerAllocationSummariesSumUpdateAtDesc = 'INDEXER_ALLOCATION_SUMMARIES_SUM_UPDATE_AT_DESC',
  IndexerAllocationSummariesVariancePopulationBlockRangeAsc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  IndexerAllocationSummariesVariancePopulationBlockRangeDesc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  IndexerAllocationSummariesVariancePopulationCreateAtAsc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_CREATE_AT_ASC',
  IndexerAllocationSummariesVariancePopulationCreateAtDesc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_CREATE_AT_DESC',
  IndexerAllocationSummariesVariancePopulationDeploymentIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC',
  IndexerAllocationSummariesVariancePopulationDeploymentIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC',
  IndexerAllocationSummariesVariancePopulationIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_ID_ASC',
  IndexerAllocationSummariesVariancePopulationIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_ID_DESC',
  IndexerAllocationSummariesVariancePopulationIndexerIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_INDEXER_ID_ASC',
  IndexerAllocationSummariesVariancePopulationIndexerIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_INDEXER_ID_DESC',
  IndexerAllocationSummariesVariancePopulationProjectIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_PROJECT_ID_ASC',
  IndexerAllocationSummariesVariancePopulationProjectIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_PROJECT_ID_DESC',
  IndexerAllocationSummariesVariancePopulationTotalAddedAsc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_TOTAL_ADDED_ASC',
  IndexerAllocationSummariesVariancePopulationTotalAddedDesc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_TOTAL_ADDED_DESC',
  IndexerAllocationSummariesVariancePopulationTotalAmountAsc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_TOTAL_AMOUNT_ASC',
  IndexerAllocationSummariesVariancePopulationTotalAmountDesc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_TOTAL_AMOUNT_DESC',
  IndexerAllocationSummariesVariancePopulationTotalRemovedAsc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_TOTAL_REMOVED_ASC',
  IndexerAllocationSummariesVariancePopulationTotalRemovedDesc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_TOTAL_REMOVED_DESC',
  IndexerAllocationSummariesVariancePopulationUpdateAtAsc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_UPDATE_AT_ASC',
  IndexerAllocationSummariesVariancePopulationUpdateAtDesc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_UPDATE_AT_DESC',
  IndexerAllocationSummariesVarianceSampleBlockRangeAsc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  IndexerAllocationSummariesVarianceSampleBlockRangeDesc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  IndexerAllocationSummariesVarianceSampleCreateAtAsc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_CREATE_AT_ASC',
  IndexerAllocationSummariesVarianceSampleCreateAtDesc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_CREATE_AT_DESC',
  IndexerAllocationSummariesVarianceSampleDeploymentIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC',
  IndexerAllocationSummariesVarianceSampleDeploymentIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC',
  IndexerAllocationSummariesVarianceSampleIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_ID_ASC',
  IndexerAllocationSummariesVarianceSampleIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_ID_DESC',
  IndexerAllocationSummariesVarianceSampleIndexerIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  IndexerAllocationSummariesVarianceSampleIndexerIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  IndexerAllocationSummariesVarianceSampleProjectIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_PROJECT_ID_ASC',
  IndexerAllocationSummariesVarianceSampleProjectIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_PROJECT_ID_DESC',
  IndexerAllocationSummariesVarianceSampleTotalAddedAsc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_TOTAL_ADDED_ASC',
  IndexerAllocationSummariesVarianceSampleTotalAddedDesc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_TOTAL_ADDED_DESC',
  IndexerAllocationSummariesVarianceSampleTotalAmountAsc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_TOTAL_AMOUNT_ASC',
  IndexerAllocationSummariesVarianceSampleTotalAmountDesc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_TOTAL_AMOUNT_DESC',
  IndexerAllocationSummariesVarianceSampleTotalRemovedAsc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_TOTAL_REMOVED_ASC',
  IndexerAllocationSummariesVarianceSampleTotalRemovedDesc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_TOTAL_REMOVED_DESC',
  IndexerAllocationSummariesVarianceSampleUpdateAtAsc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_UPDATE_AT_ASC',
  IndexerAllocationSummariesVarianceSampleUpdateAtDesc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_UPDATE_AT_DESC',
  IndexerApySummariesAverageBlockRangeAsc = 'INDEXER_APY_SUMMARIES_AVERAGE_BLOCK_RANGE_ASC',
  IndexerApySummariesAverageBlockRangeDesc = 'INDEXER_APY_SUMMARIES_AVERAGE_BLOCK_RANGE_DESC',
  IndexerApySummariesAverageCreateAtAsc = 'INDEXER_APY_SUMMARIES_AVERAGE_CREATE_AT_ASC',
  IndexerApySummariesAverageCreateAtDesc = 'INDEXER_APY_SUMMARIES_AVERAGE_CREATE_AT_DESC',
  IndexerApySummariesAverageDelegatorApyAsc = 'INDEXER_APY_SUMMARIES_AVERAGE_DELEGATOR_APY_ASC',
  IndexerApySummariesAverageDelegatorApyDesc = 'INDEXER_APY_SUMMARIES_AVERAGE_DELEGATOR_APY_DESC',
  IndexerApySummariesAverageDelegatorRewardAsc = 'INDEXER_APY_SUMMARIES_AVERAGE_DELEGATOR_REWARD_ASC',
  IndexerApySummariesAverageDelegatorRewardDesc = 'INDEXER_APY_SUMMARIES_AVERAGE_DELEGATOR_REWARD_DESC',
  IndexerApySummariesAverageEraIdxAsc = 'INDEXER_APY_SUMMARIES_AVERAGE_ERA_IDX_ASC',
  IndexerApySummariesAverageEraIdxDesc = 'INDEXER_APY_SUMMARIES_AVERAGE_ERA_IDX_DESC',
  IndexerApySummariesAverageIdAsc = 'INDEXER_APY_SUMMARIES_AVERAGE_ID_ASC',
  IndexerApySummariesAverageIdDesc = 'INDEXER_APY_SUMMARIES_AVERAGE_ID_DESC',
  IndexerApySummariesAverageIndexerApyAsc = 'INDEXER_APY_SUMMARIES_AVERAGE_INDEXER_APY_ASC',
  IndexerApySummariesAverageIndexerApyDesc = 'INDEXER_APY_SUMMARIES_AVERAGE_INDEXER_APY_DESC',
  IndexerApySummariesAverageIndexerIdAsc = 'INDEXER_APY_SUMMARIES_AVERAGE_INDEXER_ID_ASC',
  IndexerApySummariesAverageIndexerIdDesc = 'INDEXER_APY_SUMMARIES_AVERAGE_INDEXER_ID_DESC',
  IndexerApySummariesAverageIndexerRewardAsc = 'INDEXER_APY_SUMMARIES_AVERAGE_INDEXER_REWARD_ASC',
  IndexerApySummariesAverageIndexerRewardDesc = 'INDEXER_APY_SUMMARIES_AVERAGE_INDEXER_REWARD_DESC',
  IndexerApySummariesAverageUpdateAtAsc = 'INDEXER_APY_SUMMARIES_AVERAGE_UPDATE_AT_ASC',
  IndexerApySummariesAverageUpdateAtDesc = 'INDEXER_APY_SUMMARIES_AVERAGE_UPDATE_AT_DESC',
  IndexerApySummariesByIndexerIdCountAsc = 'INDEXER_APY_SUMMARIES_BY_INDEXER_ID__COUNT_ASC',
  IndexerApySummariesByIndexerIdCountDesc = 'INDEXER_APY_SUMMARIES_BY_INDEXER_ID__COUNT_DESC',
  IndexerApySummariesCountAsc = 'INDEXER_APY_SUMMARIES_COUNT_ASC',
  IndexerApySummariesCountDesc = 'INDEXER_APY_SUMMARIES_COUNT_DESC',
  IndexerApySummariesDistinctCountBlockRangeAsc = 'INDEXER_APY_SUMMARIES_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  IndexerApySummariesDistinctCountBlockRangeDesc = 'INDEXER_APY_SUMMARIES_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  IndexerApySummariesDistinctCountCreateAtAsc = 'INDEXER_APY_SUMMARIES_DISTINCT_COUNT_CREATE_AT_ASC',
  IndexerApySummariesDistinctCountCreateAtDesc = 'INDEXER_APY_SUMMARIES_DISTINCT_COUNT_CREATE_AT_DESC',
  IndexerApySummariesDistinctCountDelegatorApyAsc = 'INDEXER_APY_SUMMARIES_DISTINCT_COUNT_DELEGATOR_APY_ASC',
  IndexerApySummariesDistinctCountDelegatorApyDesc = 'INDEXER_APY_SUMMARIES_DISTINCT_COUNT_DELEGATOR_APY_DESC',
  IndexerApySummariesDistinctCountDelegatorRewardAsc = 'INDEXER_APY_SUMMARIES_DISTINCT_COUNT_DELEGATOR_REWARD_ASC',
  IndexerApySummariesDistinctCountDelegatorRewardDesc = 'INDEXER_APY_SUMMARIES_DISTINCT_COUNT_DELEGATOR_REWARD_DESC',
  IndexerApySummariesDistinctCountEraIdxAsc = 'INDEXER_APY_SUMMARIES_DISTINCT_COUNT_ERA_IDX_ASC',
  IndexerApySummariesDistinctCountEraIdxDesc = 'INDEXER_APY_SUMMARIES_DISTINCT_COUNT_ERA_IDX_DESC',
  IndexerApySummariesDistinctCountIdAsc = 'INDEXER_APY_SUMMARIES_DISTINCT_COUNT_ID_ASC',
  IndexerApySummariesDistinctCountIdDesc = 'INDEXER_APY_SUMMARIES_DISTINCT_COUNT_ID_DESC',
  IndexerApySummariesDistinctCountIndexerApyAsc = 'INDEXER_APY_SUMMARIES_DISTINCT_COUNT_INDEXER_APY_ASC',
  IndexerApySummariesDistinctCountIndexerApyDesc = 'INDEXER_APY_SUMMARIES_DISTINCT_COUNT_INDEXER_APY_DESC',
  IndexerApySummariesDistinctCountIndexerIdAsc = 'INDEXER_APY_SUMMARIES_DISTINCT_COUNT_INDEXER_ID_ASC',
  IndexerApySummariesDistinctCountIndexerIdDesc = 'INDEXER_APY_SUMMARIES_DISTINCT_COUNT_INDEXER_ID_DESC',
  IndexerApySummariesDistinctCountIndexerRewardAsc = 'INDEXER_APY_SUMMARIES_DISTINCT_COUNT_INDEXER_REWARD_ASC',
  IndexerApySummariesDistinctCountIndexerRewardDesc = 'INDEXER_APY_SUMMARIES_DISTINCT_COUNT_INDEXER_REWARD_DESC',
  IndexerApySummariesDistinctCountUpdateAtAsc = 'INDEXER_APY_SUMMARIES_DISTINCT_COUNT_UPDATE_AT_ASC',
  IndexerApySummariesDistinctCountUpdateAtDesc = 'INDEXER_APY_SUMMARIES_DISTINCT_COUNT_UPDATE_AT_DESC',
  IndexerApySummariesMaxBlockRangeAsc = 'INDEXER_APY_SUMMARIES_MAX_BLOCK_RANGE_ASC',
  IndexerApySummariesMaxBlockRangeDesc = 'INDEXER_APY_SUMMARIES_MAX_BLOCK_RANGE_DESC',
  IndexerApySummariesMaxCreateAtAsc = 'INDEXER_APY_SUMMARIES_MAX_CREATE_AT_ASC',
  IndexerApySummariesMaxCreateAtDesc = 'INDEXER_APY_SUMMARIES_MAX_CREATE_AT_DESC',
  IndexerApySummariesMaxDelegatorApyAsc = 'INDEXER_APY_SUMMARIES_MAX_DELEGATOR_APY_ASC',
  IndexerApySummariesMaxDelegatorApyDesc = 'INDEXER_APY_SUMMARIES_MAX_DELEGATOR_APY_DESC',
  IndexerApySummariesMaxDelegatorRewardAsc = 'INDEXER_APY_SUMMARIES_MAX_DELEGATOR_REWARD_ASC',
  IndexerApySummariesMaxDelegatorRewardDesc = 'INDEXER_APY_SUMMARIES_MAX_DELEGATOR_REWARD_DESC',
  IndexerApySummariesMaxEraIdxAsc = 'INDEXER_APY_SUMMARIES_MAX_ERA_IDX_ASC',
  IndexerApySummariesMaxEraIdxDesc = 'INDEXER_APY_SUMMARIES_MAX_ERA_IDX_DESC',
  IndexerApySummariesMaxIdAsc = 'INDEXER_APY_SUMMARIES_MAX_ID_ASC',
  IndexerApySummariesMaxIdDesc = 'INDEXER_APY_SUMMARIES_MAX_ID_DESC',
  IndexerApySummariesMaxIndexerApyAsc = 'INDEXER_APY_SUMMARIES_MAX_INDEXER_APY_ASC',
  IndexerApySummariesMaxIndexerApyDesc = 'INDEXER_APY_SUMMARIES_MAX_INDEXER_APY_DESC',
  IndexerApySummariesMaxIndexerIdAsc = 'INDEXER_APY_SUMMARIES_MAX_INDEXER_ID_ASC',
  IndexerApySummariesMaxIndexerIdDesc = 'INDEXER_APY_SUMMARIES_MAX_INDEXER_ID_DESC',
  IndexerApySummariesMaxIndexerRewardAsc = 'INDEXER_APY_SUMMARIES_MAX_INDEXER_REWARD_ASC',
  IndexerApySummariesMaxIndexerRewardDesc = 'INDEXER_APY_SUMMARIES_MAX_INDEXER_REWARD_DESC',
  IndexerApySummariesMaxUpdateAtAsc = 'INDEXER_APY_SUMMARIES_MAX_UPDATE_AT_ASC',
  IndexerApySummariesMaxUpdateAtDesc = 'INDEXER_APY_SUMMARIES_MAX_UPDATE_AT_DESC',
  IndexerApySummariesMinBlockRangeAsc = 'INDEXER_APY_SUMMARIES_MIN_BLOCK_RANGE_ASC',
  IndexerApySummariesMinBlockRangeDesc = 'INDEXER_APY_SUMMARIES_MIN_BLOCK_RANGE_DESC',
  IndexerApySummariesMinCreateAtAsc = 'INDEXER_APY_SUMMARIES_MIN_CREATE_AT_ASC',
  IndexerApySummariesMinCreateAtDesc = 'INDEXER_APY_SUMMARIES_MIN_CREATE_AT_DESC',
  IndexerApySummariesMinDelegatorApyAsc = 'INDEXER_APY_SUMMARIES_MIN_DELEGATOR_APY_ASC',
  IndexerApySummariesMinDelegatorApyDesc = 'INDEXER_APY_SUMMARIES_MIN_DELEGATOR_APY_DESC',
  IndexerApySummariesMinDelegatorRewardAsc = 'INDEXER_APY_SUMMARIES_MIN_DELEGATOR_REWARD_ASC',
  IndexerApySummariesMinDelegatorRewardDesc = 'INDEXER_APY_SUMMARIES_MIN_DELEGATOR_REWARD_DESC',
  IndexerApySummariesMinEraIdxAsc = 'INDEXER_APY_SUMMARIES_MIN_ERA_IDX_ASC',
  IndexerApySummariesMinEraIdxDesc = 'INDEXER_APY_SUMMARIES_MIN_ERA_IDX_DESC',
  IndexerApySummariesMinIdAsc = 'INDEXER_APY_SUMMARIES_MIN_ID_ASC',
  IndexerApySummariesMinIdDesc = 'INDEXER_APY_SUMMARIES_MIN_ID_DESC',
  IndexerApySummariesMinIndexerApyAsc = 'INDEXER_APY_SUMMARIES_MIN_INDEXER_APY_ASC',
  IndexerApySummariesMinIndexerApyDesc = 'INDEXER_APY_SUMMARIES_MIN_INDEXER_APY_DESC',
  IndexerApySummariesMinIndexerIdAsc = 'INDEXER_APY_SUMMARIES_MIN_INDEXER_ID_ASC',
  IndexerApySummariesMinIndexerIdDesc = 'INDEXER_APY_SUMMARIES_MIN_INDEXER_ID_DESC',
  IndexerApySummariesMinIndexerRewardAsc = 'INDEXER_APY_SUMMARIES_MIN_INDEXER_REWARD_ASC',
  IndexerApySummariesMinIndexerRewardDesc = 'INDEXER_APY_SUMMARIES_MIN_INDEXER_REWARD_DESC',
  IndexerApySummariesMinUpdateAtAsc = 'INDEXER_APY_SUMMARIES_MIN_UPDATE_AT_ASC',
  IndexerApySummariesMinUpdateAtDesc = 'INDEXER_APY_SUMMARIES_MIN_UPDATE_AT_DESC',
  IndexerApySummariesStddevPopulationBlockRangeAsc = 'INDEXER_APY_SUMMARIES_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  IndexerApySummariesStddevPopulationBlockRangeDesc = 'INDEXER_APY_SUMMARIES_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  IndexerApySummariesStddevPopulationCreateAtAsc = 'INDEXER_APY_SUMMARIES_STDDEV_POPULATION_CREATE_AT_ASC',
  IndexerApySummariesStddevPopulationCreateAtDesc = 'INDEXER_APY_SUMMARIES_STDDEV_POPULATION_CREATE_AT_DESC',
  IndexerApySummariesStddevPopulationDelegatorApyAsc = 'INDEXER_APY_SUMMARIES_STDDEV_POPULATION_DELEGATOR_APY_ASC',
  IndexerApySummariesStddevPopulationDelegatorApyDesc = 'INDEXER_APY_SUMMARIES_STDDEV_POPULATION_DELEGATOR_APY_DESC',
  IndexerApySummariesStddevPopulationDelegatorRewardAsc = 'INDEXER_APY_SUMMARIES_STDDEV_POPULATION_DELEGATOR_REWARD_ASC',
  IndexerApySummariesStddevPopulationDelegatorRewardDesc = 'INDEXER_APY_SUMMARIES_STDDEV_POPULATION_DELEGATOR_REWARD_DESC',
  IndexerApySummariesStddevPopulationEraIdxAsc = 'INDEXER_APY_SUMMARIES_STDDEV_POPULATION_ERA_IDX_ASC',
  IndexerApySummariesStddevPopulationEraIdxDesc = 'INDEXER_APY_SUMMARIES_STDDEV_POPULATION_ERA_IDX_DESC',
  IndexerApySummariesStddevPopulationIdAsc = 'INDEXER_APY_SUMMARIES_STDDEV_POPULATION_ID_ASC',
  IndexerApySummariesStddevPopulationIdDesc = 'INDEXER_APY_SUMMARIES_STDDEV_POPULATION_ID_DESC',
  IndexerApySummariesStddevPopulationIndexerApyAsc = 'INDEXER_APY_SUMMARIES_STDDEV_POPULATION_INDEXER_APY_ASC',
  IndexerApySummariesStddevPopulationIndexerApyDesc = 'INDEXER_APY_SUMMARIES_STDDEV_POPULATION_INDEXER_APY_DESC',
  IndexerApySummariesStddevPopulationIndexerIdAsc = 'INDEXER_APY_SUMMARIES_STDDEV_POPULATION_INDEXER_ID_ASC',
  IndexerApySummariesStddevPopulationIndexerIdDesc = 'INDEXER_APY_SUMMARIES_STDDEV_POPULATION_INDEXER_ID_DESC',
  IndexerApySummariesStddevPopulationIndexerRewardAsc = 'INDEXER_APY_SUMMARIES_STDDEV_POPULATION_INDEXER_REWARD_ASC',
  IndexerApySummariesStddevPopulationIndexerRewardDesc = 'INDEXER_APY_SUMMARIES_STDDEV_POPULATION_INDEXER_REWARD_DESC',
  IndexerApySummariesStddevPopulationUpdateAtAsc = 'INDEXER_APY_SUMMARIES_STDDEV_POPULATION_UPDATE_AT_ASC',
  IndexerApySummariesStddevPopulationUpdateAtDesc = 'INDEXER_APY_SUMMARIES_STDDEV_POPULATION_UPDATE_AT_DESC',
  IndexerApySummariesStddevSampleBlockRangeAsc = 'INDEXER_APY_SUMMARIES_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  IndexerApySummariesStddevSampleBlockRangeDesc = 'INDEXER_APY_SUMMARIES_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  IndexerApySummariesStddevSampleCreateAtAsc = 'INDEXER_APY_SUMMARIES_STDDEV_SAMPLE_CREATE_AT_ASC',
  IndexerApySummariesStddevSampleCreateAtDesc = 'INDEXER_APY_SUMMARIES_STDDEV_SAMPLE_CREATE_AT_DESC',
  IndexerApySummariesStddevSampleDelegatorApyAsc = 'INDEXER_APY_SUMMARIES_STDDEV_SAMPLE_DELEGATOR_APY_ASC',
  IndexerApySummariesStddevSampleDelegatorApyDesc = 'INDEXER_APY_SUMMARIES_STDDEV_SAMPLE_DELEGATOR_APY_DESC',
  IndexerApySummariesStddevSampleDelegatorRewardAsc = 'INDEXER_APY_SUMMARIES_STDDEV_SAMPLE_DELEGATOR_REWARD_ASC',
  IndexerApySummariesStddevSampleDelegatorRewardDesc = 'INDEXER_APY_SUMMARIES_STDDEV_SAMPLE_DELEGATOR_REWARD_DESC',
  IndexerApySummariesStddevSampleEraIdxAsc = 'INDEXER_APY_SUMMARIES_STDDEV_SAMPLE_ERA_IDX_ASC',
  IndexerApySummariesStddevSampleEraIdxDesc = 'INDEXER_APY_SUMMARIES_STDDEV_SAMPLE_ERA_IDX_DESC',
  IndexerApySummariesStddevSampleIdAsc = 'INDEXER_APY_SUMMARIES_STDDEV_SAMPLE_ID_ASC',
  IndexerApySummariesStddevSampleIdDesc = 'INDEXER_APY_SUMMARIES_STDDEV_SAMPLE_ID_DESC',
  IndexerApySummariesStddevSampleIndexerApyAsc = 'INDEXER_APY_SUMMARIES_STDDEV_SAMPLE_INDEXER_APY_ASC',
  IndexerApySummariesStddevSampleIndexerApyDesc = 'INDEXER_APY_SUMMARIES_STDDEV_SAMPLE_INDEXER_APY_DESC',
  IndexerApySummariesStddevSampleIndexerIdAsc = 'INDEXER_APY_SUMMARIES_STDDEV_SAMPLE_INDEXER_ID_ASC',
  IndexerApySummariesStddevSampleIndexerIdDesc = 'INDEXER_APY_SUMMARIES_STDDEV_SAMPLE_INDEXER_ID_DESC',
  IndexerApySummariesStddevSampleIndexerRewardAsc = 'INDEXER_APY_SUMMARIES_STDDEV_SAMPLE_INDEXER_REWARD_ASC',
  IndexerApySummariesStddevSampleIndexerRewardDesc = 'INDEXER_APY_SUMMARIES_STDDEV_SAMPLE_INDEXER_REWARD_DESC',
  IndexerApySummariesStddevSampleUpdateAtAsc = 'INDEXER_APY_SUMMARIES_STDDEV_SAMPLE_UPDATE_AT_ASC',
  IndexerApySummariesStddevSampleUpdateAtDesc = 'INDEXER_APY_SUMMARIES_STDDEV_SAMPLE_UPDATE_AT_DESC',
  IndexerApySummariesSumBlockRangeAsc = 'INDEXER_APY_SUMMARIES_SUM_BLOCK_RANGE_ASC',
  IndexerApySummariesSumBlockRangeDesc = 'INDEXER_APY_SUMMARIES_SUM_BLOCK_RANGE_DESC',
  IndexerApySummariesSumCreateAtAsc = 'INDEXER_APY_SUMMARIES_SUM_CREATE_AT_ASC',
  IndexerApySummariesSumCreateAtDesc = 'INDEXER_APY_SUMMARIES_SUM_CREATE_AT_DESC',
  IndexerApySummariesSumDelegatorApyAsc = 'INDEXER_APY_SUMMARIES_SUM_DELEGATOR_APY_ASC',
  IndexerApySummariesSumDelegatorApyDesc = 'INDEXER_APY_SUMMARIES_SUM_DELEGATOR_APY_DESC',
  IndexerApySummariesSumDelegatorRewardAsc = 'INDEXER_APY_SUMMARIES_SUM_DELEGATOR_REWARD_ASC',
  IndexerApySummariesSumDelegatorRewardDesc = 'INDEXER_APY_SUMMARIES_SUM_DELEGATOR_REWARD_DESC',
  IndexerApySummariesSumEraIdxAsc = 'INDEXER_APY_SUMMARIES_SUM_ERA_IDX_ASC',
  IndexerApySummariesSumEraIdxDesc = 'INDEXER_APY_SUMMARIES_SUM_ERA_IDX_DESC',
  IndexerApySummariesSumIdAsc = 'INDEXER_APY_SUMMARIES_SUM_ID_ASC',
  IndexerApySummariesSumIdDesc = 'INDEXER_APY_SUMMARIES_SUM_ID_DESC',
  IndexerApySummariesSumIndexerApyAsc = 'INDEXER_APY_SUMMARIES_SUM_INDEXER_APY_ASC',
  IndexerApySummariesSumIndexerApyDesc = 'INDEXER_APY_SUMMARIES_SUM_INDEXER_APY_DESC',
  IndexerApySummariesSumIndexerIdAsc = 'INDEXER_APY_SUMMARIES_SUM_INDEXER_ID_ASC',
  IndexerApySummariesSumIndexerIdDesc = 'INDEXER_APY_SUMMARIES_SUM_INDEXER_ID_DESC',
  IndexerApySummariesSumIndexerRewardAsc = 'INDEXER_APY_SUMMARIES_SUM_INDEXER_REWARD_ASC',
  IndexerApySummariesSumIndexerRewardDesc = 'INDEXER_APY_SUMMARIES_SUM_INDEXER_REWARD_DESC',
  IndexerApySummariesSumUpdateAtAsc = 'INDEXER_APY_SUMMARIES_SUM_UPDATE_AT_ASC',
  IndexerApySummariesSumUpdateAtDesc = 'INDEXER_APY_SUMMARIES_SUM_UPDATE_AT_DESC',
  IndexerApySummariesVariancePopulationBlockRangeAsc = 'INDEXER_APY_SUMMARIES_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  IndexerApySummariesVariancePopulationBlockRangeDesc = 'INDEXER_APY_SUMMARIES_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  IndexerApySummariesVariancePopulationCreateAtAsc = 'INDEXER_APY_SUMMARIES_VARIANCE_POPULATION_CREATE_AT_ASC',
  IndexerApySummariesVariancePopulationCreateAtDesc = 'INDEXER_APY_SUMMARIES_VARIANCE_POPULATION_CREATE_AT_DESC',
  IndexerApySummariesVariancePopulationDelegatorApyAsc = 'INDEXER_APY_SUMMARIES_VARIANCE_POPULATION_DELEGATOR_APY_ASC',
  IndexerApySummariesVariancePopulationDelegatorApyDesc = 'INDEXER_APY_SUMMARIES_VARIANCE_POPULATION_DELEGATOR_APY_DESC',
  IndexerApySummariesVariancePopulationDelegatorRewardAsc = 'INDEXER_APY_SUMMARIES_VARIANCE_POPULATION_DELEGATOR_REWARD_ASC',
  IndexerApySummariesVariancePopulationDelegatorRewardDesc = 'INDEXER_APY_SUMMARIES_VARIANCE_POPULATION_DELEGATOR_REWARD_DESC',
  IndexerApySummariesVariancePopulationEraIdxAsc = 'INDEXER_APY_SUMMARIES_VARIANCE_POPULATION_ERA_IDX_ASC',
  IndexerApySummariesVariancePopulationEraIdxDesc = 'INDEXER_APY_SUMMARIES_VARIANCE_POPULATION_ERA_IDX_DESC',
  IndexerApySummariesVariancePopulationIdAsc = 'INDEXER_APY_SUMMARIES_VARIANCE_POPULATION_ID_ASC',
  IndexerApySummariesVariancePopulationIdDesc = 'INDEXER_APY_SUMMARIES_VARIANCE_POPULATION_ID_DESC',
  IndexerApySummariesVariancePopulationIndexerApyAsc = 'INDEXER_APY_SUMMARIES_VARIANCE_POPULATION_INDEXER_APY_ASC',
  IndexerApySummariesVariancePopulationIndexerApyDesc = 'INDEXER_APY_SUMMARIES_VARIANCE_POPULATION_INDEXER_APY_DESC',
  IndexerApySummariesVariancePopulationIndexerIdAsc = 'INDEXER_APY_SUMMARIES_VARIANCE_POPULATION_INDEXER_ID_ASC',
  IndexerApySummariesVariancePopulationIndexerIdDesc = 'INDEXER_APY_SUMMARIES_VARIANCE_POPULATION_INDEXER_ID_DESC',
  IndexerApySummariesVariancePopulationIndexerRewardAsc = 'INDEXER_APY_SUMMARIES_VARIANCE_POPULATION_INDEXER_REWARD_ASC',
  IndexerApySummariesVariancePopulationIndexerRewardDesc = 'INDEXER_APY_SUMMARIES_VARIANCE_POPULATION_INDEXER_REWARD_DESC',
  IndexerApySummariesVariancePopulationUpdateAtAsc = 'INDEXER_APY_SUMMARIES_VARIANCE_POPULATION_UPDATE_AT_ASC',
  IndexerApySummariesVariancePopulationUpdateAtDesc = 'INDEXER_APY_SUMMARIES_VARIANCE_POPULATION_UPDATE_AT_DESC',
  IndexerApySummariesVarianceSampleBlockRangeAsc = 'INDEXER_APY_SUMMARIES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  IndexerApySummariesVarianceSampleBlockRangeDesc = 'INDEXER_APY_SUMMARIES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  IndexerApySummariesVarianceSampleCreateAtAsc = 'INDEXER_APY_SUMMARIES_VARIANCE_SAMPLE_CREATE_AT_ASC',
  IndexerApySummariesVarianceSampleCreateAtDesc = 'INDEXER_APY_SUMMARIES_VARIANCE_SAMPLE_CREATE_AT_DESC',
  IndexerApySummariesVarianceSampleDelegatorApyAsc = 'INDEXER_APY_SUMMARIES_VARIANCE_SAMPLE_DELEGATOR_APY_ASC',
  IndexerApySummariesVarianceSampleDelegatorApyDesc = 'INDEXER_APY_SUMMARIES_VARIANCE_SAMPLE_DELEGATOR_APY_DESC',
  IndexerApySummariesVarianceSampleDelegatorRewardAsc = 'INDEXER_APY_SUMMARIES_VARIANCE_SAMPLE_DELEGATOR_REWARD_ASC',
  IndexerApySummariesVarianceSampleDelegatorRewardDesc = 'INDEXER_APY_SUMMARIES_VARIANCE_SAMPLE_DELEGATOR_REWARD_DESC',
  IndexerApySummariesVarianceSampleEraIdxAsc = 'INDEXER_APY_SUMMARIES_VARIANCE_SAMPLE_ERA_IDX_ASC',
  IndexerApySummariesVarianceSampleEraIdxDesc = 'INDEXER_APY_SUMMARIES_VARIANCE_SAMPLE_ERA_IDX_DESC',
  IndexerApySummariesVarianceSampleIdAsc = 'INDEXER_APY_SUMMARIES_VARIANCE_SAMPLE_ID_ASC',
  IndexerApySummariesVarianceSampleIdDesc = 'INDEXER_APY_SUMMARIES_VARIANCE_SAMPLE_ID_DESC',
  IndexerApySummariesVarianceSampleIndexerApyAsc = 'INDEXER_APY_SUMMARIES_VARIANCE_SAMPLE_INDEXER_APY_ASC',
  IndexerApySummariesVarianceSampleIndexerApyDesc = 'INDEXER_APY_SUMMARIES_VARIANCE_SAMPLE_INDEXER_APY_DESC',
  IndexerApySummariesVarianceSampleIndexerIdAsc = 'INDEXER_APY_SUMMARIES_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  IndexerApySummariesVarianceSampleIndexerIdDesc = 'INDEXER_APY_SUMMARIES_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  IndexerApySummariesVarianceSampleIndexerRewardAsc = 'INDEXER_APY_SUMMARIES_VARIANCE_SAMPLE_INDEXER_REWARD_ASC',
  IndexerApySummariesVarianceSampleIndexerRewardDesc = 'INDEXER_APY_SUMMARIES_VARIANCE_SAMPLE_INDEXER_REWARD_DESC',
  IndexerApySummariesVarianceSampleUpdateAtAsc = 'INDEXER_APY_SUMMARIES_VARIANCE_SAMPLE_UPDATE_AT_ASC',
  IndexerApySummariesVarianceSampleUpdateAtDesc = 'INDEXER_APY_SUMMARIES_VARIANCE_SAMPLE_UPDATE_AT_DESC',
  IndexerCommissionRatesAverageBlockRangeAsc = 'INDEXER_COMMISSION_RATES_AVERAGE_BLOCK_RANGE_ASC',
  IndexerCommissionRatesAverageBlockRangeDesc = 'INDEXER_COMMISSION_RATES_AVERAGE_BLOCK_RANGE_DESC',
  IndexerCommissionRatesAverageCommissionRateAsc = 'INDEXER_COMMISSION_RATES_AVERAGE_COMMISSION_RATE_ASC',
  IndexerCommissionRatesAverageCommissionRateDesc = 'INDEXER_COMMISSION_RATES_AVERAGE_COMMISSION_RATE_DESC',
  IndexerCommissionRatesAverageEraIdxAsc = 'INDEXER_COMMISSION_RATES_AVERAGE_ERA_IDX_ASC',
  IndexerCommissionRatesAverageEraIdxDesc = 'INDEXER_COMMISSION_RATES_AVERAGE_ERA_IDX_DESC',
  IndexerCommissionRatesAverageEraIdAsc = 'INDEXER_COMMISSION_RATES_AVERAGE_ERA_ID_ASC',
  IndexerCommissionRatesAverageEraIdDesc = 'INDEXER_COMMISSION_RATES_AVERAGE_ERA_ID_DESC',
  IndexerCommissionRatesAverageIdAsc = 'INDEXER_COMMISSION_RATES_AVERAGE_ID_ASC',
  IndexerCommissionRatesAverageIdDesc = 'INDEXER_COMMISSION_RATES_AVERAGE_ID_DESC',
  IndexerCommissionRatesAverageIndexerIdAsc = 'INDEXER_COMMISSION_RATES_AVERAGE_INDEXER_ID_ASC',
  IndexerCommissionRatesAverageIndexerIdDesc = 'INDEXER_COMMISSION_RATES_AVERAGE_INDEXER_ID_DESC',
  IndexerCommissionRatesByIndexerIdCountAsc = 'INDEXER_COMMISSION_RATES_BY_INDEXER_ID__COUNT_ASC',
  IndexerCommissionRatesByIndexerIdCountDesc = 'INDEXER_COMMISSION_RATES_BY_INDEXER_ID__COUNT_DESC',
  IndexerCommissionRatesCountAsc = 'INDEXER_COMMISSION_RATES_COUNT_ASC',
  IndexerCommissionRatesCountDesc = 'INDEXER_COMMISSION_RATES_COUNT_DESC',
  IndexerCommissionRatesDistinctCountBlockRangeAsc = 'INDEXER_COMMISSION_RATES_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  IndexerCommissionRatesDistinctCountBlockRangeDesc = 'INDEXER_COMMISSION_RATES_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  IndexerCommissionRatesDistinctCountCommissionRateAsc = 'INDEXER_COMMISSION_RATES_DISTINCT_COUNT_COMMISSION_RATE_ASC',
  IndexerCommissionRatesDistinctCountCommissionRateDesc = 'INDEXER_COMMISSION_RATES_DISTINCT_COUNT_COMMISSION_RATE_DESC',
  IndexerCommissionRatesDistinctCountEraIdxAsc = 'INDEXER_COMMISSION_RATES_DISTINCT_COUNT_ERA_IDX_ASC',
  IndexerCommissionRatesDistinctCountEraIdxDesc = 'INDEXER_COMMISSION_RATES_DISTINCT_COUNT_ERA_IDX_DESC',
  IndexerCommissionRatesDistinctCountEraIdAsc = 'INDEXER_COMMISSION_RATES_DISTINCT_COUNT_ERA_ID_ASC',
  IndexerCommissionRatesDistinctCountEraIdDesc = 'INDEXER_COMMISSION_RATES_DISTINCT_COUNT_ERA_ID_DESC',
  IndexerCommissionRatesDistinctCountIdAsc = 'INDEXER_COMMISSION_RATES_DISTINCT_COUNT_ID_ASC',
  IndexerCommissionRatesDistinctCountIdDesc = 'INDEXER_COMMISSION_RATES_DISTINCT_COUNT_ID_DESC',
  IndexerCommissionRatesDistinctCountIndexerIdAsc = 'INDEXER_COMMISSION_RATES_DISTINCT_COUNT_INDEXER_ID_ASC',
  IndexerCommissionRatesDistinctCountIndexerIdDesc = 'INDEXER_COMMISSION_RATES_DISTINCT_COUNT_INDEXER_ID_DESC',
  IndexerCommissionRatesMaxBlockRangeAsc = 'INDEXER_COMMISSION_RATES_MAX_BLOCK_RANGE_ASC',
  IndexerCommissionRatesMaxBlockRangeDesc = 'INDEXER_COMMISSION_RATES_MAX_BLOCK_RANGE_DESC',
  IndexerCommissionRatesMaxCommissionRateAsc = 'INDEXER_COMMISSION_RATES_MAX_COMMISSION_RATE_ASC',
  IndexerCommissionRatesMaxCommissionRateDesc = 'INDEXER_COMMISSION_RATES_MAX_COMMISSION_RATE_DESC',
  IndexerCommissionRatesMaxEraIdxAsc = 'INDEXER_COMMISSION_RATES_MAX_ERA_IDX_ASC',
  IndexerCommissionRatesMaxEraIdxDesc = 'INDEXER_COMMISSION_RATES_MAX_ERA_IDX_DESC',
  IndexerCommissionRatesMaxEraIdAsc = 'INDEXER_COMMISSION_RATES_MAX_ERA_ID_ASC',
  IndexerCommissionRatesMaxEraIdDesc = 'INDEXER_COMMISSION_RATES_MAX_ERA_ID_DESC',
  IndexerCommissionRatesMaxIdAsc = 'INDEXER_COMMISSION_RATES_MAX_ID_ASC',
  IndexerCommissionRatesMaxIdDesc = 'INDEXER_COMMISSION_RATES_MAX_ID_DESC',
  IndexerCommissionRatesMaxIndexerIdAsc = 'INDEXER_COMMISSION_RATES_MAX_INDEXER_ID_ASC',
  IndexerCommissionRatesMaxIndexerIdDesc = 'INDEXER_COMMISSION_RATES_MAX_INDEXER_ID_DESC',
  IndexerCommissionRatesMinBlockRangeAsc = 'INDEXER_COMMISSION_RATES_MIN_BLOCK_RANGE_ASC',
  IndexerCommissionRatesMinBlockRangeDesc = 'INDEXER_COMMISSION_RATES_MIN_BLOCK_RANGE_DESC',
  IndexerCommissionRatesMinCommissionRateAsc = 'INDEXER_COMMISSION_RATES_MIN_COMMISSION_RATE_ASC',
  IndexerCommissionRatesMinCommissionRateDesc = 'INDEXER_COMMISSION_RATES_MIN_COMMISSION_RATE_DESC',
  IndexerCommissionRatesMinEraIdxAsc = 'INDEXER_COMMISSION_RATES_MIN_ERA_IDX_ASC',
  IndexerCommissionRatesMinEraIdxDesc = 'INDEXER_COMMISSION_RATES_MIN_ERA_IDX_DESC',
  IndexerCommissionRatesMinEraIdAsc = 'INDEXER_COMMISSION_RATES_MIN_ERA_ID_ASC',
  IndexerCommissionRatesMinEraIdDesc = 'INDEXER_COMMISSION_RATES_MIN_ERA_ID_DESC',
  IndexerCommissionRatesMinIdAsc = 'INDEXER_COMMISSION_RATES_MIN_ID_ASC',
  IndexerCommissionRatesMinIdDesc = 'INDEXER_COMMISSION_RATES_MIN_ID_DESC',
  IndexerCommissionRatesMinIndexerIdAsc = 'INDEXER_COMMISSION_RATES_MIN_INDEXER_ID_ASC',
  IndexerCommissionRatesMinIndexerIdDesc = 'INDEXER_COMMISSION_RATES_MIN_INDEXER_ID_DESC',
  IndexerCommissionRatesStddevPopulationBlockRangeAsc = 'INDEXER_COMMISSION_RATES_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  IndexerCommissionRatesStddevPopulationBlockRangeDesc = 'INDEXER_COMMISSION_RATES_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  IndexerCommissionRatesStddevPopulationCommissionRateAsc = 'INDEXER_COMMISSION_RATES_STDDEV_POPULATION_COMMISSION_RATE_ASC',
  IndexerCommissionRatesStddevPopulationCommissionRateDesc = 'INDEXER_COMMISSION_RATES_STDDEV_POPULATION_COMMISSION_RATE_DESC',
  IndexerCommissionRatesStddevPopulationEraIdxAsc = 'INDEXER_COMMISSION_RATES_STDDEV_POPULATION_ERA_IDX_ASC',
  IndexerCommissionRatesStddevPopulationEraIdxDesc = 'INDEXER_COMMISSION_RATES_STDDEV_POPULATION_ERA_IDX_DESC',
  IndexerCommissionRatesStddevPopulationEraIdAsc = 'INDEXER_COMMISSION_RATES_STDDEV_POPULATION_ERA_ID_ASC',
  IndexerCommissionRatesStddevPopulationEraIdDesc = 'INDEXER_COMMISSION_RATES_STDDEV_POPULATION_ERA_ID_DESC',
  IndexerCommissionRatesStddevPopulationIdAsc = 'INDEXER_COMMISSION_RATES_STDDEV_POPULATION_ID_ASC',
  IndexerCommissionRatesStddevPopulationIdDesc = 'INDEXER_COMMISSION_RATES_STDDEV_POPULATION_ID_DESC',
  IndexerCommissionRatesStddevPopulationIndexerIdAsc = 'INDEXER_COMMISSION_RATES_STDDEV_POPULATION_INDEXER_ID_ASC',
  IndexerCommissionRatesStddevPopulationIndexerIdDesc = 'INDEXER_COMMISSION_RATES_STDDEV_POPULATION_INDEXER_ID_DESC',
  IndexerCommissionRatesStddevSampleBlockRangeAsc = 'INDEXER_COMMISSION_RATES_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  IndexerCommissionRatesStddevSampleBlockRangeDesc = 'INDEXER_COMMISSION_RATES_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  IndexerCommissionRatesStddevSampleCommissionRateAsc = 'INDEXER_COMMISSION_RATES_STDDEV_SAMPLE_COMMISSION_RATE_ASC',
  IndexerCommissionRatesStddevSampleCommissionRateDesc = 'INDEXER_COMMISSION_RATES_STDDEV_SAMPLE_COMMISSION_RATE_DESC',
  IndexerCommissionRatesStddevSampleEraIdxAsc = 'INDEXER_COMMISSION_RATES_STDDEV_SAMPLE_ERA_IDX_ASC',
  IndexerCommissionRatesStddevSampleEraIdxDesc = 'INDEXER_COMMISSION_RATES_STDDEV_SAMPLE_ERA_IDX_DESC',
  IndexerCommissionRatesStddevSampleEraIdAsc = 'INDEXER_COMMISSION_RATES_STDDEV_SAMPLE_ERA_ID_ASC',
  IndexerCommissionRatesStddevSampleEraIdDesc = 'INDEXER_COMMISSION_RATES_STDDEV_SAMPLE_ERA_ID_DESC',
  IndexerCommissionRatesStddevSampleIdAsc = 'INDEXER_COMMISSION_RATES_STDDEV_SAMPLE_ID_ASC',
  IndexerCommissionRatesStddevSampleIdDesc = 'INDEXER_COMMISSION_RATES_STDDEV_SAMPLE_ID_DESC',
  IndexerCommissionRatesStddevSampleIndexerIdAsc = 'INDEXER_COMMISSION_RATES_STDDEV_SAMPLE_INDEXER_ID_ASC',
  IndexerCommissionRatesStddevSampleIndexerIdDesc = 'INDEXER_COMMISSION_RATES_STDDEV_SAMPLE_INDEXER_ID_DESC',
  IndexerCommissionRatesSumBlockRangeAsc = 'INDEXER_COMMISSION_RATES_SUM_BLOCK_RANGE_ASC',
  IndexerCommissionRatesSumBlockRangeDesc = 'INDEXER_COMMISSION_RATES_SUM_BLOCK_RANGE_DESC',
  IndexerCommissionRatesSumCommissionRateAsc = 'INDEXER_COMMISSION_RATES_SUM_COMMISSION_RATE_ASC',
  IndexerCommissionRatesSumCommissionRateDesc = 'INDEXER_COMMISSION_RATES_SUM_COMMISSION_RATE_DESC',
  IndexerCommissionRatesSumEraIdxAsc = 'INDEXER_COMMISSION_RATES_SUM_ERA_IDX_ASC',
  IndexerCommissionRatesSumEraIdxDesc = 'INDEXER_COMMISSION_RATES_SUM_ERA_IDX_DESC',
  IndexerCommissionRatesSumEraIdAsc = 'INDEXER_COMMISSION_RATES_SUM_ERA_ID_ASC',
  IndexerCommissionRatesSumEraIdDesc = 'INDEXER_COMMISSION_RATES_SUM_ERA_ID_DESC',
  IndexerCommissionRatesSumIdAsc = 'INDEXER_COMMISSION_RATES_SUM_ID_ASC',
  IndexerCommissionRatesSumIdDesc = 'INDEXER_COMMISSION_RATES_SUM_ID_DESC',
  IndexerCommissionRatesSumIndexerIdAsc = 'INDEXER_COMMISSION_RATES_SUM_INDEXER_ID_ASC',
  IndexerCommissionRatesSumIndexerIdDesc = 'INDEXER_COMMISSION_RATES_SUM_INDEXER_ID_DESC',
  IndexerCommissionRatesVariancePopulationBlockRangeAsc = 'INDEXER_COMMISSION_RATES_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  IndexerCommissionRatesVariancePopulationBlockRangeDesc = 'INDEXER_COMMISSION_RATES_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  IndexerCommissionRatesVariancePopulationCommissionRateAsc = 'INDEXER_COMMISSION_RATES_VARIANCE_POPULATION_COMMISSION_RATE_ASC',
  IndexerCommissionRatesVariancePopulationCommissionRateDesc = 'INDEXER_COMMISSION_RATES_VARIANCE_POPULATION_COMMISSION_RATE_DESC',
  IndexerCommissionRatesVariancePopulationEraIdxAsc = 'INDEXER_COMMISSION_RATES_VARIANCE_POPULATION_ERA_IDX_ASC',
  IndexerCommissionRatesVariancePopulationEraIdxDesc = 'INDEXER_COMMISSION_RATES_VARIANCE_POPULATION_ERA_IDX_DESC',
  IndexerCommissionRatesVariancePopulationEraIdAsc = 'INDEXER_COMMISSION_RATES_VARIANCE_POPULATION_ERA_ID_ASC',
  IndexerCommissionRatesVariancePopulationEraIdDesc = 'INDEXER_COMMISSION_RATES_VARIANCE_POPULATION_ERA_ID_DESC',
  IndexerCommissionRatesVariancePopulationIdAsc = 'INDEXER_COMMISSION_RATES_VARIANCE_POPULATION_ID_ASC',
  IndexerCommissionRatesVariancePopulationIdDesc = 'INDEXER_COMMISSION_RATES_VARIANCE_POPULATION_ID_DESC',
  IndexerCommissionRatesVariancePopulationIndexerIdAsc = 'INDEXER_COMMISSION_RATES_VARIANCE_POPULATION_INDEXER_ID_ASC',
  IndexerCommissionRatesVariancePopulationIndexerIdDesc = 'INDEXER_COMMISSION_RATES_VARIANCE_POPULATION_INDEXER_ID_DESC',
  IndexerCommissionRatesVarianceSampleBlockRangeAsc = 'INDEXER_COMMISSION_RATES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  IndexerCommissionRatesVarianceSampleBlockRangeDesc = 'INDEXER_COMMISSION_RATES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  IndexerCommissionRatesVarianceSampleCommissionRateAsc = 'INDEXER_COMMISSION_RATES_VARIANCE_SAMPLE_COMMISSION_RATE_ASC',
  IndexerCommissionRatesVarianceSampleCommissionRateDesc = 'INDEXER_COMMISSION_RATES_VARIANCE_SAMPLE_COMMISSION_RATE_DESC',
  IndexerCommissionRatesVarianceSampleEraIdxAsc = 'INDEXER_COMMISSION_RATES_VARIANCE_SAMPLE_ERA_IDX_ASC',
  IndexerCommissionRatesVarianceSampleEraIdxDesc = 'INDEXER_COMMISSION_RATES_VARIANCE_SAMPLE_ERA_IDX_DESC',
  IndexerCommissionRatesVarianceSampleEraIdAsc = 'INDEXER_COMMISSION_RATES_VARIANCE_SAMPLE_ERA_ID_ASC',
  IndexerCommissionRatesVarianceSampleEraIdDesc = 'INDEXER_COMMISSION_RATES_VARIANCE_SAMPLE_ERA_ID_DESC',
  IndexerCommissionRatesVarianceSampleIdAsc = 'INDEXER_COMMISSION_RATES_VARIANCE_SAMPLE_ID_ASC',
  IndexerCommissionRatesVarianceSampleIdDesc = 'INDEXER_COMMISSION_RATES_VARIANCE_SAMPLE_ID_DESC',
  IndexerCommissionRatesVarianceSampleIndexerIdAsc = 'INDEXER_COMMISSION_RATES_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  IndexerCommissionRatesVarianceSampleIndexerIdDesc = 'INDEXER_COMMISSION_RATES_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  IndexerDeploymentsByIndexerIdCountAsc = 'INDEXER_DEPLOYMENTS_BY_INDEXER_ID__COUNT_ASC',
  IndexerDeploymentsByIndexerIdCountDesc = 'INDEXER_DEPLOYMENTS_BY_INDEXER_ID__COUNT_DESC',
  IndexerEraDeploymentRewardsAverageAgreementRewardsAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_AVERAGE_AGREEMENT_REWARDS_ASC',
  IndexerEraDeploymentRewardsAverageAgreementRewardsDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_AVERAGE_AGREEMENT_REWARDS_DESC',
  IndexerEraDeploymentRewardsAverageAllocationRewardsAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_AVERAGE_ALLOCATION_REWARDS_ASC',
  IndexerEraDeploymentRewardsAverageAllocationRewardsDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_AVERAGE_ALLOCATION_REWARDS_DESC',
  IndexerEraDeploymentRewardsAverageBlockRangeAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_AVERAGE_BLOCK_RANGE_ASC',
  IndexerEraDeploymentRewardsAverageBlockRangeDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_AVERAGE_BLOCK_RANGE_DESC',
  IndexerEraDeploymentRewardsAverageChangesHeightAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_AVERAGE_CHANGES_HEIGHT_ASC',
  IndexerEraDeploymentRewardsAverageChangesHeightDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_AVERAGE_CHANGES_HEIGHT_DESC',
  IndexerEraDeploymentRewardsAverageDeploymentIdAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_AVERAGE_DEPLOYMENT_ID_ASC',
  IndexerEraDeploymentRewardsAverageDeploymentIdDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_AVERAGE_DEPLOYMENT_ID_DESC',
  IndexerEraDeploymentRewardsAverageEraIdxAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_AVERAGE_ERA_IDX_ASC',
  IndexerEraDeploymentRewardsAverageEraIdxDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_AVERAGE_ERA_IDX_DESC',
  IndexerEraDeploymentRewardsAverageIdAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_AVERAGE_ID_ASC',
  IndexerEraDeploymentRewardsAverageIdDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_AVERAGE_ID_DESC',
  IndexerEraDeploymentRewardsAverageIndexerIdAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_AVERAGE_INDEXER_ID_ASC',
  IndexerEraDeploymentRewardsAverageIndexerIdDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_AVERAGE_INDEXER_ID_DESC',
  IndexerEraDeploymentRewardsAverageQueryRewardsAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_AVERAGE_QUERY_REWARDS_ASC',
  IndexerEraDeploymentRewardsAverageQueryRewardsDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_AVERAGE_QUERY_REWARDS_DESC',
  IndexerEraDeploymentRewardsAverageStateChannelRewardsAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_AVERAGE_STATE_CHANNEL_REWARDS_ASC',
  IndexerEraDeploymentRewardsAverageStateChannelRewardsDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_AVERAGE_STATE_CHANNEL_REWARDS_DESC',
  IndexerEraDeploymentRewardsAverageTotalRewardsAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_AVERAGE_TOTAL_REWARDS_ASC',
  IndexerEraDeploymentRewardsAverageTotalRewardsDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_AVERAGE_TOTAL_REWARDS_DESC',
  IndexerEraDeploymentRewardsByIndexerIdCountAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_BY_INDEXER_ID__COUNT_ASC',
  IndexerEraDeploymentRewardsByIndexerIdCountDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_BY_INDEXER_ID__COUNT_DESC',
  IndexerEraDeploymentRewardsCountAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_COUNT_ASC',
  IndexerEraDeploymentRewardsCountDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_COUNT_DESC',
  IndexerEraDeploymentRewardsDistinctCountAgreementRewardsAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_DISTINCT_COUNT_AGREEMENT_REWARDS_ASC',
  IndexerEraDeploymentRewardsDistinctCountAgreementRewardsDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_DISTINCT_COUNT_AGREEMENT_REWARDS_DESC',
  IndexerEraDeploymentRewardsDistinctCountAllocationRewardsAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_DISTINCT_COUNT_ALLOCATION_REWARDS_ASC',
  IndexerEraDeploymentRewardsDistinctCountAllocationRewardsDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_DISTINCT_COUNT_ALLOCATION_REWARDS_DESC',
  IndexerEraDeploymentRewardsDistinctCountBlockRangeAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  IndexerEraDeploymentRewardsDistinctCountBlockRangeDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  IndexerEraDeploymentRewardsDistinctCountChangesHeightAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_DISTINCT_COUNT_CHANGES_HEIGHT_ASC',
  IndexerEraDeploymentRewardsDistinctCountChangesHeightDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_DISTINCT_COUNT_CHANGES_HEIGHT_DESC',
  IndexerEraDeploymentRewardsDistinctCountDeploymentIdAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_DISTINCT_COUNT_DEPLOYMENT_ID_ASC',
  IndexerEraDeploymentRewardsDistinctCountDeploymentIdDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_DISTINCT_COUNT_DEPLOYMENT_ID_DESC',
  IndexerEraDeploymentRewardsDistinctCountEraIdxAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_DISTINCT_COUNT_ERA_IDX_ASC',
  IndexerEraDeploymentRewardsDistinctCountEraIdxDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_DISTINCT_COUNT_ERA_IDX_DESC',
  IndexerEraDeploymentRewardsDistinctCountIdAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_DISTINCT_COUNT_ID_ASC',
  IndexerEraDeploymentRewardsDistinctCountIdDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_DISTINCT_COUNT_ID_DESC',
  IndexerEraDeploymentRewardsDistinctCountIndexerIdAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_DISTINCT_COUNT_INDEXER_ID_ASC',
  IndexerEraDeploymentRewardsDistinctCountIndexerIdDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_DISTINCT_COUNT_INDEXER_ID_DESC',
  IndexerEraDeploymentRewardsDistinctCountQueryRewardsAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_DISTINCT_COUNT_QUERY_REWARDS_ASC',
  IndexerEraDeploymentRewardsDistinctCountQueryRewardsDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_DISTINCT_COUNT_QUERY_REWARDS_DESC',
  IndexerEraDeploymentRewardsDistinctCountStateChannelRewardsAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_DISTINCT_COUNT_STATE_CHANNEL_REWARDS_ASC',
  IndexerEraDeploymentRewardsDistinctCountStateChannelRewardsDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_DISTINCT_COUNT_STATE_CHANNEL_REWARDS_DESC',
  IndexerEraDeploymentRewardsDistinctCountTotalRewardsAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_DISTINCT_COUNT_TOTAL_REWARDS_ASC',
  IndexerEraDeploymentRewardsDistinctCountTotalRewardsDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_DISTINCT_COUNT_TOTAL_REWARDS_DESC',
  IndexerEraDeploymentRewardsMaxAgreementRewardsAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MAX_AGREEMENT_REWARDS_ASC',
  IndexerEraDeploymentRewardsMaxAgreementRewardsDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MAX_AGREEMENT_REWARDS_DESC',
  IndexerEraDeploymentRewardsMaxAllocationRewardsAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MAX_ALLOCATION_REWARDS_ASC',
  IndexerEraDeploymentRewardsMaxAllocationRewardsDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MAX_ALLOCATION_REWARDS_DESC',
  IndexerEraDeploymentRewardsMaxBlockRangeAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MAX_BLOCK_RANGE_ASC',
  IndexerEraDeploymentRewardsMaxBlockRangeDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MAX_BLOCK_RANGE_DESC',
  IndexerEraDeploymentRewardsMaxChangesHeightAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MAX_CHANGES_HEIGHT_ASC',
  IndexerEraDeploymentRewardsMaxChangesHeightDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MAX_CHANGES_HEIGHT_DESC',
  IndexerEraDeploymentRewardsMaxDeploymentIdAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MAX_DEPLOYMENT_ID_ASC',
  IndexerEraDeploymentRewardsMaxDeploymentIdDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MAX_DEPLOYMENT_ID_DESC',
  IndexerEraDeploymentRewardsMaxEraIdxAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MAX_ERA_IDX_ASC',
  IndexerEraDeploymentRewardsMaxEraIdxDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MAX_ERA_IDX_DESC',
  IndexerEraDeploymentRewardsMaxIdAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MAX_ID_ASC',
  IndexerEraDeploymentRewardsMaxIdDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MAX_ID_DESC',
  IndexerEraDeploymentRewardsMaxIndexerIdAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MAX_INDEXER_ID_ASC',
  IndexerEraDeploymentRewardsMaxIndexerIdDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MAX_INDEXER_ID_DESC',
  IndexerEraDeploymentRewardsMaxQueryRewardsAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MAX_QUERY_REWARDS_ASC',
  IndexerEraDeploymentRewardsMaxQueryRewardsDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MAX_QUERY_REWARDS_DESC',
  IndexerEraDeploymentRewardsMaxStateChannelRewardsAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MAX_STATE_CHANNEL_REWARDS_ASC',
  IndexerEraDeploymentRewardsMaxStateChannelRewardsDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MAX_STATE_CHANNEL_REWARDS_DESC',
  IndexerEraDeploymentRewardsMaxTotalRewardsAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MAX_TOTAL_REWARDS_ASC',
  IndexerEraDeploymentRewardsMaxTotalRewardsDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MAX_TOTAL_REWARDS_DESC',
  IndexerEraDeploymentRewardsMinAgreementRewardsAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MIN_AGREEMENT_REWARDS_ASC',
  IndexerEraDeploymentRewardsMinAgreementRewardsDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MIN_AGREEMENT_REWARDS_DESC',
  IndexerEraDeploymentRewardsMinAllocationRewardsAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MIN_ALLOCATION_REWARDS_ASC',
  IndexerEraDeploymentRewardsMinAllocationRewardsDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MIN_ALLOCATION_REWARDS_DESC',
  IndexerEraDeploymentRewardsMinBlockRangeAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MIN_BLOCK_RANGE_ASC',
  IndexerEraDeploymentRewardsMinBlockRangeDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MIN_BLOCK_RANGE_DESC',
  IndexerEraDeploymentRewardsMinChangesHeightAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MIN_CHANGES_HEIGHT_ASC',
  IndexerEraDeploymentRewardsMinChangesHeightDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MIN_CHANGES_HEIGHT_DESC',
  IndexerEraDeploymentRewardsMinDeploymentIdAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MIN_DEPLOYMENT_ID_ASC',
  IndexerEraDeploymentRewardsMinDeploymentIdDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MIN_DEPLOYMENT_ID_DESC',
  IndexerEraDeploymentRewardsMinEraIdxAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MIN_ERA_IDX_ASC',
  IndexerEraDeploymentRewardsMinEraIdxDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MIN_ERA_IDX_DESC',
  IndexerEraDeploymentRewardsMinIdAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MIN_ID_ASC',
  IndexerEraDeploymentRewardsMinIdDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MIN_ID_DESC',
  IndexerEraDeploymentRewardsMinIndexerIdAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MIN_INDEXER_ID_ASC',
  IndexerEraDeploymentRewardsMinIndexerIdDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MIN_INDEXER_ID_DESC',
  IndexerEraDeploymentRewardsMinQueryRewardsAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MIN_QUERY_REWARDS_ASC',
  IndexerEraDeploymentRewardsMinQueryRewardsDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MIN_QUERY_REWARDS_DESC',
  IndexerEraDeploymentRewardsMinStateChannelRewardsAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MIN_STATE_CHANNEL_REWARDS_ASC',
  IndexerEraDeploymentRewardsMinStateChannelRewardsDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MIN_STATE_CHANNEL_REWARDS_DESC',
  IndexerEraDeploymentRewardsMinTotalRewardsAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MIN_TOTAL_REWARDS_ASC',
  IndexerEraDeploymentRewardsMinTotalRewardsDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_MIN_TOTAL_REWARDS_DESC',
  IndexerEraDeploymentRewardsStddevPopulationAgreementRewardsAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_POPULATION_AGREEMENT_REWARDS_ASC',
  IndexerEraDeploymentRewardsStddevPopulationAgreementRewardsDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_POPULATION_AGREEMENT_REWARDS_DESC',
  IndexerEraDeploymentRewardsStddevPopulationAllocationRewardsAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_POPULATION_ALLOCATION_REWARDS_ASC',
  IndexerEraDeploymentRewardsStddevPopulationAllocationRewardsDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_POPULATION_ALLOCATION_REWARDS_DESC',
  IndexerEraDeploymentRewardsStddevPopulationBlockRangeAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  IndexerEraDeploymentRewardsStddevPopulationBlockRangeDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  IndexerEraDeploymentRewardsStddevPopulationChangesHeightAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_POPULATION_CHANGES_HEIGHT_ASC',
  IndexerEraDeploymentRewardsStddevPopulationChangesHeightDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_POPULATION_CHANGES_HEIGHT_DESC',
  IndexerEraDeploymentRewardsStddevPopulationDeploymentIdAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_POPULATION_DEPLOYMENT_ID_ASC',
  IndexerEraDeploymentRewardsStddevPopulationDeploymentIdDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_POPULATION_DEPLOYMENT_ID_DESC',
  IndexerEraDeploymentRewardsStddevPopulationEraIdxAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_POPULATION_ERA_IDX_ASC',
  IndexerEraDeploymentRewardsStddevPopulationEraIdxDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_POPULATION_ERA_IDX_DESC',
  IndexerEraDeploymentRewardsStddevPopulationIdAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_POPULATION_ID_ASC',
  IndexerEraDeploymentRewardsStddevPopulationIdDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_POPULATION_ID_DESC',
  IndexerEraDeploymentRewardsStddevPopulationIndexerIdAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_POPULATION_INDEXER_ID_ASC',
  IndexerEraDeploymentRewardsStddevPopulationIndexerIdDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_POPULATION_INDEXER_ID_DESC',
  IndexerEraDeploymentRewardsStddevPopulationQueryRewardsAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_POPULATION_QUERY_REWARDS_ASC',
  IndexerEraDeploymentRewardsStddevPopulationQueryRewardsDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_POPULATION_QUERY_REWARDS_DESC',
  IndexerEraDeploymentRewardsStddevPopulationStateChannelRewardsAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_POPULATION_STATE_CHANNEL_REWARDS_ASC',
  IndexerEraDeploymentRewardsStddevPopulationStateChannelRewardsDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_POPULATION_STATE_CHANNEL_REWARDS_DESC',
  IndexerEraDeploymentRewardsStddevPopulationTotalRewardsAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_POPULATION_TOTAL_REWARDS_ASC',
  IndexerEraDeploymentRewardsStddevPopulationTotalRewardsDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_POPULATION_TOTAL_REWARDS_DESC',
  IndexerEraDeploymentRewardsStddevSampleAgreementRewardsAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_SAMPLE_AGREEMENT_REWARDS_ASC',
  IndexerEraDeploymentRewardsStddevSampleAgreementRewardsDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_SAMPLE_AGREEMENT_REWARDS_DESC',
  IndexerEraDeploymentRewardsStddevSampleAllocationRewardsAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_SAMPLE_ALLOCATION_REWARDS_ASC',
  IndexerEraDeploymentRewardsStddevSampleAllocationRewardsDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_SAMPLE_ALLOCATION_REWARDS_DESC',
  IndexerEraDeploymentRewardsStddevSampleBlockRangeAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  IndexerEraDeploymentRewardsStddevSampleBlockRangeDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  IndexerEraDeploymentRewardsStddevSampleChangesHeightAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_SAMPLE_CHANGES_HEIGHT_ASC',
  IndexerEraDeploymentRewardsStddevSampleChangesHeightDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_SAMPLE_CHANGES_HEIGHT_DESC',
  IndexerEraDeploymentRewardsStddevSampleDeploymentIdAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC',
  IndexerEraDeploymentRewardsStddevSampleDeploymentIdDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC',
  IndexerEraDeploymentRewardsStddevSampleEraIdxAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_SAMPLE_ERA_IDX_ASC',
  IndexerEraDeploymentRewardsStddevSampleEraIdxDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_SAMPLE_ERA_IDX_DESC',
  IndexerEraDeploymentRewardsStddevSampleIdAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_SAMPLE_ID_ASC',
  IndexerEraDeploymentRewardsStddevSampleIdDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_SAMPLE_ID_DESC',
  IndexerEraDeploymentRewardsStddevSampleIndexerIdAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_SAMPLE_INDEXER_ID_ASC',
  IndexerEraDeploymentRewardsStddevSampleIndexerIdDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_SAMPLE_INDEXER_ID_DESC',
  IndexerEraDeploymentRewardsStddevSampleQueryRewardsAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_SAMPLE_QUERY_REWARDS_ASC',
  IndexerEraDeploymentRewardsStddevSampleQueryRewardsDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_SAMPLE_QUERY_REWARDS_DESC',
  IndexerEraDeploymentRewardsStddevSampleStateChannelRewardsAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_SAMPLE_STATE_CHANNEL_REWARDS_ASC',
  IndexerEraDeploymentRewardsStddevSampleStateChannelRewardsDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_SAMPLE_STATE_CHANNEL_REWARDS_DESC',
  IndexerEraDeploymentRewardsStddevSampleTotalRewardsAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_SAMPLE_TOTAL_REWARDS_ASC',
  IndexerEraDeploymentRewardsStddevSampleTotalRewardsDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_STDDEV_SAMPLE_TOTAL_REWARDS_DESC',
  IndexerEraDeploymentRewardsSumAgreementRewardsAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_SUM_AGREEMENT_REWARDS_ASC',
  IndexerEraDeploymentRewardsSumAgreementRewardsDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_SUM_AGREEMENT_REWARDS_DESC',
  IndexerEraDeploymentRewardsSumAllocationRewardsAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_SUM_ALLOCATION_REWARDS_ASC',
  IndexerEraDeploymentRewardsSumAllocationRewardsDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_SUM_ALLOCATION_REWARDS_DESC',
  IndexerEraDeploymentRewardsSumBlockRangeAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_SUM_BLOCK_RANGE_ASC',
  IndexerEraDeploymentRewardsSumBlockRangeDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_SUM_BLOCK_RANGE_DESC',
  IndexerEraDeploymentRewardsSumChangesHeightAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_SUM_CHANGES_HEIGHT_ASC',
  IndexerEraDeploymentRewardsSumChangesHeightDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_SUM_CHANGES_HEIGHT_DESC',
  IndexerEraDeploymentRewardsSumDeploymentIdAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_SUM_DEPLOYMENT_ID_ASC',
  IndexerEraDeploymentRewardsSumDeploymentIdDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_SUM_DEPLOYMENT_ID_DESC',
  IndexerEraDeploymentRewardsSumEraIdxAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_SUM_ERA_IDX_ASC',
  IndexerEraDeploymentRewardsSumEraIdxDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_SUM_ERA_IDX_DESC',
  IndexerEraDeploymentRewardsSumIdAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_SUM_ID_ASC',
  IndexerEraDeploymentRewardsSumIdDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_SUM_ID_DESC',
  IndexerEraDeploymentRewardsSumIndexerIdAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_SUM_INDEXER_ID_ASC',
  IndexerEraDeploymentRewardsSumIndexerIdDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_SUM_INDEXER_ID_DESC',
  IndexerEraDeploymentRewardsSumQueryRewardsAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_SUM_QUERY_REWARDS_ASC',
  IndexerEraDeploymentRewardsSumQueryRewardsDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_SUM_QUERY_REWARDS_DESC',
  IndexerEraDeploymentRewardsSumStateChannelRewardsAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_SUM_STATE_CHANNEL_REWARDS_ASC',
  IndexerEraDeploymentRewardsSumStateChannelRewardsDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_SUM_STATE_CHANNEL_REWARDS_DESC',
  IndexerEraDeploymentRewardsSumTotalRewardsAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_SUM_TOTAL_REWARDS_ASC',
  IndexerEraDeploymentRewardsSumTotalRewardsDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_SUM_TOTAL_REWARDS_DESC',
  IndexerEraDeploymentRewardsVariancePopulationAgreementRewardsAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_POPULATION_AGREEMENT_REWARDS_ASC',
  IndexerEraDeploymentRewardsVariancePopulationAgreementRewardsDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_POPULATION_AGREEMENT_REWARDS_DESC',
  IndexerEraDeploymentRewardsVariancePopulationAllocationRewardsAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_POPULATION_ALLOCATION_REWARDS_ASC',
  IndexerEraDeploymentRewardsVariancePopulationAllocationRewardsDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_POPULATION_ALLOCATION_REWARDS_DESC',
  IndexerEraDeploymentRewardsVariancePopulationBlockRangeAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  IndexerEraDeploymentRewardsVariancePopulationBlockRangeDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  IndexerEraDeploymentRewardsVariancePopulationChangesHeightAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_POPULATION_CHANGES_HEIGHT_ASC',
  IndexerEraDeploymentRewardsVariancePopulationChangesHeightDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_POPULATION_CHANGES_HEIGHT_DESC',
  IndexerEraDeploymentRewardsVariancePopulationDeploymentIdAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC',
  IndexerEraDeploymentRewardsVariancePopulationDeploymentIdDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC',
  IndexerEraDeploymentRewardsVariancePopulationEraIdxAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_POPULATION_ERA_IDX_ASC',
  IndexerEraDeploymentRewardsVariancePopulationEraIdxDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_POPULATION_ERA_IDX_DESC',
  IndexerEraDeploymentRewardsVariancePopulationIdAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_POPULATION_ID_ASC',
  IndexerEraDeploymentRewardsVariancePopulationIdDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_POPULATION_ID_DESC',
  IndexerEraDeploymentRewardsVariancePopulationIndexerIdAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_POPULATION_INDEXER_ID_ASC',
  IndexerEraDeploymentRewardsVariancePopulationIndexerIdDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_POPULATION_INDEXER_ID_DESC',
  IndexerEraDeploymentRewardsVariancePopulationQueryRewardsAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_POPULATION_QUERY_REWARDS_ASC',
  IndexerEraDeploymentRewardsVariancePopulationQueryRewardsDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_POPULATION_QUERY_REWARDS_DESC',
  IndexerEraDeploymentRewardsVariancePopulationStateChannelRewardsAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_POPULATION_STATE_CHANNEL_REWARDS_ASC',
  IndexerEraDeploymentRewardsVariancePopulationStateChannelRewardsDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_POPULATION_STATE_CHANNEL_REWARDS_DESC',
  IndexerEraDeploymentRewardsVariancePopulationTotalRewardsAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_POPULATION_TOTAL_REWARDS_ASC',
  IndexerEraDeploymentRewardsVariancePopulationTotalRewardsDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_POPULATION_TOTAL_REWARDS_DESC',
  IndexerEraDeploymentRewardsVarianceSampleAgreementRewardsAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_SAMPLE_AGREEMENT_REWARDS_ASC',
  IndexerEraDeploymentRewardsVarianceSampleAgreementRewardsDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_SAMPLE_AGREEMENT_REWARDS_DESC',
  IndexerEraDeploymentRewardsVarianceSampleAllocationRewardsAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_SAMPLE_ALLOCATION_REWARDS_ASC',
  IndexerEraDeploymentRewardsVarianceSampleAllocationRewardsDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_SAMPLE_ALLOCATION_REWARDS_DESC',
  IndexerEraDeploymentRewardsVarianceSampleBlockRangeAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  IndexerEraDeploymentRewardsVarianceSampleBlockRangeDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  IndexerEraDeploymentRewardsVarianceSampleChangesHeightAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_SAMPLE_CHANGES_HEIGHT_ASC',
  IndexerEraDeploymentRewardsVarianceSampleChangesHeightDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_SAMPLE_CHANGES_HEIGHT_DESC',
  IndexerEraDeploymentRewardsVarianceSampleDeploymentIdAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC',
  IndexerEraDeploymentRewardsVarianceSampleDeploymentIdDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC',
  IndexerEraDeploymentRewardsVarianceSampleEraIdxAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_SAMPLE_ERA_IDX_ASC',
  IndexerEraDeploymentRewardsVarianceSampleEraIdxDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_SAMPLE_ERA_IDX_DESC',
  IndexerEraDeploymentRewardsVarianceSampleIdAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_SAMPLE_ID_ASC',
  IndexerEraDeploymentRewardsVarianceSampleIdDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_SAMPLE_ID_DESC',
  IndexerEraDeploymentRewardsVarianceSampleIndexerIdAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  IndexerEraDeploymentRewardsVarianceSampleIndexerIdDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  IndexerEraDeploymentRewardsVarianceSampleQueryRewardsAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_SAMPLE_QUERY_REWARDS_ASC',
  IndexerEraDeploymentRewardsVarianceSampleQueryRewardsDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_SAMPLE_QUERY_REWARDS_DESC',
  IndexerEraDeploymentRewardsVarianceSampleStateChannelRewardsAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_SAMPLE_STATE_CHANNEL_REWARDS_ASC',
  IndexerEraDeploymentRewardsVarianceSampleStateChannelRewardsDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_SAMPLE_STATE_CHANNEL_REWARDS_DESC',
  IndexerEraDeploymentRewardsVarianceSampleTotalRewardsAsc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_SAMPLE_TOTAL_REWARDS_ASC',
  IndexerEraDeploymentRewardsVarianceSampleTotalRewardsDesc = 'INDEXER_ERA_DEPLOYMENT_REWARDS_VARIANCE_SAMPLE_TOTAL_REWARDS_DESC',
  IndexerLaborHistoriesAverageAmountAsc = 'INDEXER_LABOR_HISTORIES_AVERAGE_AMOUNT_ASC',
  IndexerLaborHistoriesAverageAmountDesc = 'INDEXER_LABOR_HISTORIES_AVERAGE_AMOUNT_DESC',
  IndexerLaborHistoriesAverageBlockRangeAsc = 'INDEXER_LABOR_HISTORIES_AVERAGE_BLOCK_RANGE_ASC',
  IndexerLaborHistoriesAverageBlockRangeDesc = 'INDEXER_LABOR_HISTORIES_AVERAGE_BLOCK_RANGE_DESC',
  IndexerLaborHistoriesAverageCreateAtAsc = 'INDEXER_LABOR_HISTORIES_AVERAGE_CREATE_AT_ASC',
  IndexerLaborHistoriesAverageCreateAtDesc = 'INDEXER_LABOR_HISTORIES_AVERAGE_CREATE_AT_DESC',
  IndexerLaborHistoriesAverageDeploymentIdAsc = 'INDEXER_LABOR_HISTORIES_AVERAGE_DEPLOYMENT_ID_ASC',
  IndexerLaborHistoriesAverageDeploymentIdDesc = 'INDEXER_LABOR_HISTORIES_AVERAGE_DEPLOYMENT_ID_DESC',
  IndexerLaborHistoriesAverageEraIdxAsc = 'INDEXER_LABOR_HISTORIES_AVERAGE_ERA_IDX_ASC',
  IndexerLaborHistoriesAverageEraIdxDesc = 'INDEXER_LABOR_HISTORIES_AVERAGE_ERA_IDX_DESC',
  IndexerLaborHistoriesAverageIdAsc = 'INDEXER_LABOR_HISTORIES_AVERAGE_ID_ASC',
  IndexerLaborHistoriesAverageIdDesc = 'INDEXER_LABOR_HISTORIES_AVERAGE_ID_DESC',
  IndexerLaborHistoriesAverageIndexerIdAsc = 'INDEXER_LABOR_HISTORIES_AVERAGE_INDEXER_ID_ASC',
  IndexerLaborHistoriesAverageIndexerIdDesc = 'INDEXER_LABOR_HISTORIES_AVERAGE_INDEXER_ID_DESC',
  IndexerLaborHistoriesByIndexerIdCountAsc = 'INDEXER_LABOR_HISTORIES_BY_INDEXER_ID__COUNT_ASC',
  IndexerLaborHistoriesByIndexerIdCountDesc = 'INDEXER_LABOR_HISTORIES_BY_INDEXER_ID__COUNT_DESC',
  IndexerLaborHistoriesCountAsc = 'INDEXER_LABOR_HISTORIES_COUNT_ASC',
  IndexerLaborHistoriesCountDesc = 'INDEXER_LABOR_HISTORIES_COUNT_DESC',
  IndexerLaborHistoriesDistinctCountAmountAsc = 'INDEXER_LABOR_HISTORIES_DISTINCT_COUNT_AMOUNT_ASC',
  IndexerLaborHistoriesDistinctCountAmountDesc = 'INDEXER_LABOR_HISTORIES_DISTINCT_COUNT_AMOUNT_DESC',
  IndexerLaborHistoriesDistinctCountBlockRangeAsc = 'INDEXER_LABOR_HISTORIES_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  IndexerLaborHistoriesDistinctCountBlockRangeDesc = 'INDEXER_LABOR_HISTORIES_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  IndexerLaborHistoriesDistinctCountCreateAtAsc = 'INDEXER_LABOR_HISTORIES_DISTINCT_COUNT_CREATE_AT_ASC',
  IndexerLaborHistoriesDistinctCountCreateAtDesc = 'INDEXER_LABOR_HISTORIES_DISTINCT_COUNT_CREATE_AT_DESC',
  IndexerLaborHistoriesDistinctCountDeploymentIdAsc = 'INDEXER_LABOR_HISTORIES_DISTINCT_COUNT_DEPLOYMENT_ID_ASC',
  IndexerLaborHistoriesDistinctCountDeploymentIdDesc = 'INDEXER_LABOR_HISTORIES_DISTINCT_COUNT_DEPLOYMENT_ID_DESC',
  IndexerLaborHistoriesDistinctCountEraIdxAsc = 'INDEXER_LABOR_HISTORIES_DISTINCT_COUNT_ERA_IDX_ASC',
  IndexerLaborHistoriesDistinctCountEraIdxDesc = 'INDEXER_LABOR_HISTORIES_DISTINCT_COUNT_ERA_IDX_DESC',
  IndexerLaborHistoriesDistinctCountIdAsc = 'INDEXER_LABOR_HISTORIES_DISTINCT_COUNT_ID_ASC',
  IndexerLaborHistoriesDistinctCountIdDesc = 'INDEXER_LABOR_HISTORIES_DISTINCT_COUNT_ID_DESC',
  IndexerLaborHistoriesDistinctCountIndexerIdAsc = 'INDEXER_LABOR_HISTORIES_DISTINCT_COUNT_INDEXER_ID_ASC',
  IndexerLaborHistoriesDistinctCountIndexerIdDesc = 'INDEXER_LABOR_HISTORIES_DISTINCT_COUNT_INDEXER_ID_DESC',
  IndexerLaborHistoriesMaxAmountAsc = 'INDEXER_LABOR_HISTORIES_MAX_AMOUNT_ASC',
  IndexerLaborHistoriesMaxAmountDesc = 'INDEXER_LABOR_HISTORIES_MAX_AMOUNT_DESC',
  IndexerLaborHistoriesMaxBlockRangeAsc = 'INDEXER_LABOR_HISTORIES_MAX_BLOCK_RANGE_ASC',
  IndexerLaborHistoriesMaxBlockRangeDesc = 'INDEXER_LABOR_HISTORIES_MAX_BLOCK_RANGE_DESC',
  IndexerLaborHistoriesMaxCreateAtAsc = 'INDEXER_LABOR_HISTORIES_MAX_CREATE_AT_ASC',
  IndexerLaborHistoriesMaxCreateAtDesc = 'INDEXER_LABOR_HISTORIES_MAX_CREATE_AT_DESC',
  IndexerLaborHistoriesMaxDeploymentIdAsc = 'INDEXER_LABOR_HISTORIES_MAX_DEPLOYMENT_ID_ASC',
  IndexerLaborHistoriesMaxDeploymentIdDesc = 'INDEXER_LABOR_HISTORIES_MAX_DEPLOYMENT_ID_DESC',
  IndexerLaborHistoriesMaxEraIdxAsc = 'INDEXER_LABOR_HISTORIES_MAX_ERA_IDX_ASC',
  IndexerLaborHistoriesMaxEraIdxDesc = 'INDEXER_LABOR_HISTORIES_MAX_ERA_IDX_DESC',
  IndexerLaborHistoriesMaxIdAsc = 'INDEXER_LABOR_HISTORIES_MAX_ID_ASC',
  IndexerLaborHistoriesMaxIdDesc = 'INDEXER_LABOR_HISTORIES_MAX_ID_DESC',
  IndexerLaborHistoriesMaxIndexerIdAsc = 'INDEXER_LABOR_HISTORIES_MAX_INDEXER_ID_ASC',
  IndexerLaborHistoriesMaxIndexerIdDesc = 'INDEXER_LABOR_HISTORIES_MAX_INDEXER_ID_DESC',
  IndexerLaborHistoriesMinAmountAsc = 'INDEXER_LABOR_HISTORIES_MIN_AMOUNT_ASC',
  IndexerLaborHistoriesMinAmountDesc = 'INDEXER_LABOR_HISTORIES_MIN_AMOUNT_DESC',
  IndexerLaborHistoriesMinBlockRangeAsc = 'INDEXER_LABOR_HISTORIES_MIN_BLOCK_RANGE_ASC',
  IndexerLaborHistoriesMinBlockRangeDesc = 'INDEXER_LABOR_HISTORIES_MIN_BLOCK_RANGE_DESC',
  IndexerLaborHistoriesMinCreateAtAsc = 'INDEXER_LABOR_HISTORIES_MIN_CREATE_AT_ASC',
  IndexerLaborHistoriesMinCreateAtDesc = 'INDEXER_LABOR_HISTORIES_MIN_CREATE_AT_DESC',
  IndexerLaborHistoriesMinDeploymentIdAsc = 'INDEXER_LABOR_HISTORIES_MIN_DEPLOYMENT_ID_ASC',
  IndexerLaborHistoriesMinDeploymentIdDesc = 'INDEXER_LABOR_HISTORIES_MIN_DEPLOYMENT_ID_DESC',
  IndexerLaborHistoriesMinEraIdxAsc = 'INDEXER_LABOR_HISTORIES_MIN_ERA_IDX_ASC',
  IndexerLaborHistoriesMinEraIdxDesc = 'INDEXER_LABOR_HISTORIES_MIN_ERA_IDX_DESC',
  IndexerLaborHistoriesMinIdAsc = 'INDEXER_LABOR_HISTORIES_MIN_ID_ASC',
  IndexerLaborHistoriesMinIdDesc = 'INDEXER_LABOR_HISTORIES_MIN_ID_DESC',
  IndexerLaborHistoriesMinIndexerIdAsc = 'INDEXER_LABOR_HISTORIES_MIN_INDEXER_ID_ASC',
  IndexerLaborHistoriesMinIndexerIdDesc = 'INDEXER_LABOR_HISTORIES_MIN_INDEXER_ID_DESC',
  IndexerLaborHistoriesStddevPopulationAmountAsc = 'INDEXER_LABOR_HISTORIES_STDDEV_POPULATION_AMOUNT_ASC',
  IndexerLaborHistoriesStddevPopulationAmountDesc = 'INDEXER_LABOR_HISTORIES_STDDEV_POPULATION_AMOUNT_DESC',
  IndexerLaborHistoriesStddevPopulationBlockRangeAsc = 'INDEXER_LABOR_HISTORIES_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  IndexerLaborHistoriesStddevPopulationBlockRangeDesc = 'INDEXER_LABOR_HISTORIES_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  IndexerLaborHistoriesStddevPopulationCreateAtAsc = 'INDEXER_LABOR_HISTORIES_STDDEV_POPULATION_CREATE_AT_ASC',
  IndexerLaborHistoriesStddevPopulationCreateAtDesc = 'INDEXER_LABOR_HISTORIES_STDDEV_POPULATION_CREATE_AT_DESC',
  IndexerLaborHistoriesStddevPopulationDeploymentIdAsc = 'INDEXER_LABOR_HISTORIES_STDDEV_POPULATION_DEPLOYMENT_ID_ASC',
  IndexerLaborHistoriesStddevPopulationDeploymentIdDesc = 'INDEXER_LABOR_HISTORIES_STDDEV_POPULATION_DEPLOYMENT_ID_DESC',
  IndexerLaborHistoriesStddevPopulationEraIdxAsc = 'INDEXER_LABOR_HISTORIES_STDDEV_POPULATION_ERA_IDX_ASC',
  IndexerLaborHistoriesStddevPopulationEraIdxDesc = 'INDEXER_LABOR_HISTORIES_STDDEV_POPULATION_ERA_IDX_DESC',
  IndexerLaborHistoriesStddevPopulationIdAsc = 'INDEXER_LABOR_HISTORIES_STDDEV_POPULATION_ID_ASC',
  IndexerLaborHistoriesStddevPopulationIdDesc = 'INDEXER_LABOR_HISTORIES_STDDEV_POPULATION_ID_DESC',
  IndexerLaborHistoriesStddevPopulationIndexerIdAsc = 'INDEXER_LABOR_HISTORIES_STDDEV_POPULATION_INDEXER_ID_ASC',
  IndexerLaborHistoriesStddevPopulationIndexerIdDesc = 'INDEXER_LABOR_HISTORIES_STDDEV_POPULATION_INDEXER_ID_DESC',
  IndexerLaborHistoriesStddevSampleAmountAsc = 'INDEXER_LABOR_HISTORIES_STDDEV_SAMPLE_AMOUNT_ASC',
  IndexerLaborHistoriesStddevSampleAmountDesc = 'INDEXER_LABOR_HISTORIES_STDDEV_SAMPLE_AMOUNT_DESC',
  IndexerLaborHistoriesStddevSampleBlockRangeAsc = 'INDEXER_LABOR_HISTORIES_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  IndexerLaborHistoriesStddevSampleBlockRangeDesc = 'INDEXER_LABOR_HISTORIES_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  IndexerLaborHistoriesStddevSampleCreateAtAsc = 'INDEXER_LABOR_HISTORIES_STDDEV_SAMPLE_CREATE_AT_ASC',
  IndexerLaborHistoriesStddevSampleCreateAtDesc = 'INDEXER_LABOR_HISTORIES_STDDEV_SAMPLE_CREATE_AT_DESC',
  IndexerLaborHistoriesStddevSampleDeploymentIdAsc = 'INDEXER_LABOR_HISTORIES_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC',
  IndexerLaborHistoriesStddevSampleDeploymentIdDesc = 'INDEXER_LABOR_HISTORIES_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC',
  IndexerLaborHistoriesStddevSampleEraIdxAsc = 'INDEXER_LABOR_HISTORIES_STDDEV_SAMPLE_ERA_IDX_ASC',
  IndexerLaborHistoriesStddevSampleEraIdxDesc = 'INDEXER_LABOR_HISTORIES_STDDEV_SAMPLE_ERA_IDX_DESC',
  IndexerLaborHistoriesStddevSampleIdAsc = 'INDEXER_LABOR_HISTORIES_STDDEV_SAMPLE_ID_ASC',
  IndexerLaborHistoriesStddevSampleIdDesc = 'INDEXER_LABOR_HISTORIES_STDDEV_SAMPLE_ID_DESC',
  IndexerLaborHistoriesStddevSampleIndexerIdAsc = 'INDEXER_LABOR_HISTORIES_STDDEV_SAMPLE_INDEXER_ID_ASC',
  IndexerLaborHistoriesStddevSampleIndexerIdDesc = 'INDEXER_LABOR_HISTORIES_STDDEV_SAMPLE_INDEXER_ID_DESC',
  IndexerLaborHistoriesSumAmountAsc = 'INDEXER_LABOR_HISTORIES_SUM_AMOUNT_ASC',
  IndexerLaborHistoriesSumAmountDesc = 'INDEXER_LABOR_HISTORIES_SUM_AMOUNT_DESC',
  IndexerLaborHistoriesSumBlockRangeAsc = 'INDEXER_LABOR_HISTORIES_SUM_BLOCK_RANGE_ASC',
  IndexerLaborHistoriesSumBlockRangeDesc = 'INDEXER_LABOR_HISTORIES_SUM_BLOCK_RANGE_DESC',
  IndexerLaborHistoriesSumCreateAtAsc = 'INDEXER_LABOR_HISTORIES_SUM_CREATE_AT_ASC',
  IndexerLaborHistoriesSumCreateAtDesc = 'INDEXER_LABOR_HISTORIES_SUM_CREATE_AT_DESC',
  IndexerLaborHistoriesSumDeploymentIdAsc = 'INDEXER_LABOR_HISTORIES_SUM_DEPLOYMENT_ID_ASC',
  IndexerLaborHistoriesSumDeploymentIdDesc = 'INDEXER_LABOR_HISTORIES_SUM_DEPLOYMENT_ID_DESC',
  IndexerLaborHistoriesSumEraIdxAsc = 'INDEXER_LABOR_HISTORIES_SUM_ERA_IDX_ASC',
  IndexerLaborHistoriesSumEraIdxDesc = 'INDEXER_LABOR_HISTORIES_SUM_ERA_IDX_DESC',
  IndexerLaborHistoriesSumIdAsc = 'INDEXER_LABOR_HISTORIES_SUM_ID_ASC',
  IndexerLaborHistoriesSumIdDesc = 'INDEXER_LABOR_HISTORIES_SUM_ID_DESC',
  IndexerLaborHistoriesSumIndexerIdAsc = 'INDEXER_LABOR_HISTORIES_SUM_INDEXER_ID_ASC',
  IndexerLaborHistoriesSumIndexerIdDesc = 'INDEXER_LABOR_HISTORIES_SUM_INDEXER_ID_DESC',
  IndexerLaborHistoriesVariancePopulationAmountAsc = 'INDEXER_LABOR_HISTORIES_VARIANCE_POPULATION_AMOUNT_ASC',
  IndexerLaborHistoriesVariancePopulationAmountDesc = 'INDEXER_LABOR_HISTORIES_VARIANCE_POPULATION_AMOUNT_DESC',
  IndexerLaborHistoriesVariancePopulationBlockRangeAsc = 'INDEXER_LABOR_HISTORIES_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  IndexerLaborHistoriesVariancePopulationBlockRangeDesc = 'INDEXER_LABOR_HISTORIES_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  IndexerLaborHistoriesVariancePopulationCreateAtAsc = 'INDEXER_LABOR_HISTORIES_VARIANCE_POPULATION_CREATE_AT_ASC',
  IndexerLaborHistoriesVariancePopulationCreateAtDesc = 'INDEXER_LABOR_HISTORIES_VARIANCE_POPULATION_CREATE_AT_DESC',
  IndexerLaborHistoriesVariancePopulationDeploymentIdAsc = 'INDEXER_LABOR_HISTORIES_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC',
  IndexerLaborHistoriesVariancePopulationDeploymentIdDesc = 'INDEXER_LABOR_HISTORIES_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC',
  IndexerLaborHistoriesVariancePopulationEraIdxAsc = 'INDEXER_LABOR_HISTORIES_VARIANCE_POPULATION_ERA_IDX_ASC',
  IndexerLaborHistoriesVariancePopulationEraIdxDesc = 'INDEXER_LABOR_HISTORIES_VARIANCE_POPULATION_ERA_IDX_DESC',
  IndexerLaborHistoriesVariancePopulationIdAsc = 'INDEXER_LABOR_HISTORIES_VARIANCE_POPULATION_ID_ASC',
  IndexerLaborHistoriesVariancePopulationIdDesc = 'INDEXER_LABOR_HISTORIES_VARIANCE_POPULATION_ID_DESC',
  IndexerLaborHistoriesVariancePopulationIndexerIdAsc = 'INDEXER_LABOR_HISTORIES_VARIANCE_POPULATION_INDEXER_ID_ASC',
  IndexerLaborHistoriesVariancePopulationIndexerIdDesc = 'INDEXER_LABOR_HISTORIES_VARIANCE_POPULATION_INDEXER_ID_DESC',
  IndexerLaborHistoriesVarianceSampleAmountAsc = 'INDEXER_LABOR_HISTORIES_VARIANCE_SAMPLE_AMOUNT_ASC',
  IndexerLaborHistoriesVarianceSampleAmountDesc = 'INDEXER_LABOR_HISTORIES_VARIANCE_SAMPLE_AMOUNT_DESC',
  IndexerLaborHistoriesVarianceSampleBlockRangeAsc = 'INDEXER_LABOR_HISTORIES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  IndexerLaborHistoriesVarianceSampleBlockRangeDesc = 'INDEXER_LABOR_HISTORIES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  IndexerLaborHistoriesVarianceSampleCreateAtAsc = 'INDEXER_LABOR_HISTORIES_VARIANCE_SAMPLE_CREATE_AT_ASC',
  IndexerLaborHistoriesVarianceSampleCreateAtDesc = 'INDEXER_LABOR_HISTORIES_VARIANCE_SAMPLE_CREATE_AT_DESC',
  IndexerLaborHistoriesVarianceSampleDeploymentIdAsc = 'INDEXER_LABOR_HISTORIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC',
  IndexerLaborHistoriesVarianceSampleDeploymentIdDesc = 'INDEXER_LABOR_HISTORIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC',
  IndexerLaborHistoriesVarianceSampleEraIdxAsc = 'INDEXER_LABOR_HISTORIES_VARIANCE_SAMPLE_ERA_IDX_ASC',
  IndexerLaborHistoriesVarianceSampleEraIdxDesc = 'INDEXER_LABOR_HISTORIES_VARIANCE_SAMPLE_ERA_IDX_DESC',
  IndexerLaborHistoriesVarianceSampleIdAsc = 'INDEXER_LABOR_HISTORIES_VARIANCE_SAMPLE_ID_ASC',
  IndexerLaborHistoriesVarianceSampleIdDesc = 'INDEXER_LABOR_HISTORIES_VARIANCE_SAMPLE_ID_DESC',
  IndexerLaborHistoriesVarianceSampleIndexerIdAsc = 'INDEXER_LABOR_HISTORIES_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  IndexerLaborHistoriesVarianceSampleIndexerIdDesc = 'INDEXER_LABOR_HISTORIES_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  IndexerMissedLaborsAverageBlockRangeAsc = 'INDEXER_MISSED_LABORS_AVERAGE_BLOCK_RANGE_ASC',
  IndexerMissedLaborsAverageBlockRangeDesc = 'INDEXER_MISSED_LABORS_AVERAGE_BLOCK_RANGE_DESC',
  IndexerMissedLaborsAverageCreateAtAsc = 'INDEXER_MISSED_LABORS_AVERAGE_CREATE_AT_ASC',
  IndexerMissedLaborsAverageCreateAtDesc = 'INDEXER_MISSED_LABORS_AVERAGE_CREATE_AT_DESC',
  IndexerMissedLaborsAverageDeploymentIdAsc = 'INDEXER_MISSED_LABORS_AVERAGE_DEPLOYMENT_ID_ASC',
  IndexerMissedLaborsAverageDeploymentIdDesc = 'INDEXER_MISSED_LABORS_AVERAGE_DEPLOYMENT_ID_DESC',
  IndexerMissedLaborsAverageEraIdxAsc = 'INDEXER_MISSED_LABORS_AVERAGE_ERA_IDX_ASC',
  IndexerMissedLaborsAverageEraIdxDesc = 'INDEXER_MISSED_LABORS_AVERAGE_ERA_IDX_DESC',
  IndexerMissedLaborsAverageIdAsc = 'INDEXER_MISSED_LABORS_AVERAGE_ID_ASC',
  IndexerMissedLaborsAverageIdDesc = 'INDEXER_MISSED_LABORS_AVERAGE_ID_DESC',
  IndexerMissedLaborsAverageIndexerIdAsc = 'INDEXER_MISSED_LABORS_AVERAGE_INDEXER_ID_ASC',
  IndexerMissedLaborsAverageIndexerIdDesc = 'INDEXER_MISSED_LABORS_AVERAGE_INDEXER_ID_DESC',
  IndexerMissedLaborsAverageMissedLaborAsc = 'INDEXER_MISSED_LABORS_AVERAGE_MISSED_LABOR_ASC',
  IndexerMissedLaborsAverageMissedLaborDesc = 'INDEXER_MISSED_LABORS_AVERAGE_MISSED_LABOR_DESC',
  IndexerMissedLaborsByIndexerIdCountAsc = 'INDEXER_MISSED_LABORS_BY_INDEXER_ID__COUNT_ASC',
  IndexerMissedLaborsByIndexerIdCountDesc = 'INDEXER_MISSED_LABORS_BY_INDEXER_ID__COUNT_DESC',
  IndexerMissedLaborsCountAsc = 'INDEXER_MISSED_LABORS_COUNT_ASC',
  IndexerMissedLaborsCountDesc = 'INDEXER_MISSED_LABORS_COUNT_DESC',
  IndexerMissedLaborsDistinctCountBlockRangeAsc = 'INDEXER_MISSED_LABORS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  IndexerMissedLaborsDistinctCountBlockRangeDesc = 'INDEXER_MISSED_LABORS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  IndexerMissedLaborsDistinctCountCreateAtAsc = 'INDEXER_MISSED_LABORS_DISTINCT_COUNT_CREATE_AT_ASC',
  IndexerMissedLaborsDistinctCountCreateAtDesc = 'INDEXER_MISSED_LABORS_DISTINCT_COUNT_CREATE_AT_DESC',
  IndexerMissedLaborsDistinctCountDeploymentIdAsc = 'INDEXER_MISSED_LABORS_DISTINCT_COUNT_DEPLOYMENT_ID_ASC',
  IndexerMissedLaborsDistinctCountDeploymentIdDesc = 'INDEXER_MISSED_LABORS_DISTINCT_COUNT_DEPLOYMENT_ID_DESC',
  IndexerMissedLaborsDistinctCountEraIdxAsc = 'INDEXER_MISSED_LABORS_DISTINCT_COUNT_ERA_IDX_ASC',
  IndexerMissedLaborsDistinctCountEraIdxDesc = 'INDEXER_MISSED_LABORS_DISTINCT_COUNT_ERA_IDX_DESC',
  IndexerMissedLaborsDistinctCountIdAsc = 'INDEXER_MISSED_LABORS_DISTINCT_COUNT_ID_ASC',
  IndexerMissedLaborsDistinctCountIdDesc = 'INDEXER_MISSED_LABORS_DISTINCT_COUNT_ID_DESC',
  IndexerMissedLaborsDistinctCountIndexerIdAsc = 'INDEXER_MISSED_LABORS_DISTINCT_COUNT_INDEXER_ID_ASC',
  IndexerMissedLaborsDistinctCountIndexerIdDesc = 'INDEXER_MISSED_LABORS_DISTINCT_COUNT_INDEXER_ID_DESC',
  IndexerMissedLaborsDistinctCountMissedLaborAsc = 'INDEXER_MISSED_LABORS_DISTINCT_COUNT_MISSED_LABOR_ASC',
  IndexerMissedLaborsDistinctCountMissedLaborDesc = 'INDEXER_MISSED_LABORS_DISTINCT_COUNT_MISSED_LABOR_DESC',
  IndexerMissedLaborsMaxBlockRangeAsc = 'INDEXER_MISSED_LABORS_MAX_BLOCK_RANGE_ASC',
  IndexerMissedLaborsMaxBlockRangeDesc = 'INDEXER_MISSED_LABORS_MAX_BLOCK_RANGE_DESC',
  IndexerMissedLaborsMaxCreateAtAsc = 'INDEXER_MISSED_LABORS_MAX_CREATE_AT_ASC',
  IndexerMissedLaborsMaxCreateAtDesc = 'INDEXER_MISSED_LABORS_MAX_CREATE_AT_DESC',
  IndexerMissedLaborsMaxDeploymentIdAsc = 'INDEXER_MISSED_LABORS_MAX_DEPLOYMENT_ID_ASC',
  IndexerMissedLaborsMaxDeploymentIdDesc = 'INDEXER_MISSED_LABORS_MAX_DEPLOYMENT_ID_DESC',
  IndexerMissedLaborsMaxEraIdxAsc = 'INDEXER_MISSED_LABORS_MAX_ERA_IDX_ASC',
  IndexerMissedLaborsMaxEraIdxDesc = 'INDEXER_MISSED_LABORS_MAX_ERA_IDX_DESC',
  IndexerMissedLaborsMaxIdAsc = 'INDEXER_MISSED_LABORS_MAX_ID_ASC',
  IndexerMissedLaborsMaxIdDesc = 'INDEXER_MISSED_LABORS_MAX_ID_DESC',
  IndexerMissedLaborsMaxIndexerIdAsc = 'INDEXER_MISSED_LABORS_MAX_INDEXER_ID_ASC',
  IndexerMissedLaborsMaxIndexerIdDesc = 'INDEXER_MISSED_LABORS_MAX_INDEXER_ID_DESC',
  IndexerMissedLaborsMaxMissedLaborAsc = 'INDEXER_MISSED_LABORS_MAX_MISSED_LABOR_ASC',
  IndexerMissedLaborsMaxMissedLaborDesc = 'INDEXER_MISSED_LABORS_MAX_MISSED_LABOR_DESC',
  IndexerMissedLaborsMinBlockRangeAsc = 'INDEXER_MISSED_LABORS_MIN_BLOCK_RANGE_ASC',
  IndexerMissedLaborsMinBlockRangeDesc = 'INDEXER_MISSED_LABORS_MIN_BLOCK_RANGE_DESC',
  IndexerMissedLaborsMinCreateAtAsc = 'INDEXER_MISSED_LABORS_MIN_CREATE_AT_ASC',
  IndexerMissedLaborsMinCreateAtDesc = 'INDEXER_MISSED_LABORS_MIN_CREATE_AT_DESC',
  IndexerMissedLaborsMinDeploymentIdAsc = 'INDEXER_MISSED_LABORS_MIN_DEPLOYMENT_ID_ASC',
  IndexerMissedLaborsMinDeploymentIdDesc = 'INDEXER_MISSED_LABORS_MIN_DEPLOYMENT_ID_DESC',
  IndexerMissedLaborsMinEraIdxAsc = 'INDEXER_MISSED_LABORS_MIN_ERA_IDX_ASC',
  IndexerMissedLaborsMinEraIdxDesc = 'INDEXER_MISSED_LABORS_MIN_ERA_IDX_DESC',
  IndexerMissedLaborsMinIdAsc = 'INDEXER_MISSED_LABORS_MIN_ID_ASC',
  IndexerMissedLaborsMinIdDesc = 'INDEXER_MISSED_LABORS_MIN_ID_DESC',
  IndexerMissedLaborsMinIndexerIdAsc = 'INDEXER_MISSED_LABORS_MIN_INDEXER_ID_ASC',
  IndexerMissedLaborsMinIndexerIdDesc = 'INDEXER_MISSED_LABORS_MIN_INDEXER_ID_DESC',
  IndexerMissedLaborsMinMissedLaborAsc = 'INDEXER_MISSED_LABORS_MIN_MISSED_LABOR_ASC',
  IndexerMissedLaborsMinMissedLaborDesc = 'INDEXER_MISSED_LABORS_MIN_MISSED_LABOR_DESC',
  IndexerMissedLaborsStddevPopulationBlockRangeAsc = 'INDEXER_MISSED_LABORS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  IndexerMissedLaborsStddevPopulationBlockRangeDesc = 'INDEXER_MISSED_LABORS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  IndexerMissedLaborsStddevPopulationCreateAtAsc = 'INDEXER_MISSED_LABORS_STDDEV_POPULATION_CREATE_AT_ASC',
  IndexerMissedLaborsStddevPopulationCreateAtDesc = 'INDEXER_MISSED_LABORS_STDDEV_POPULATION_CREATE_AT_DESC',
  IndexerMissedLaborsStddevPopulationDeploymentIdAsc = 'INDEXER_MISSED_LABORS_STDDEV_POPULATION_DEPLOYMENT_ID_ASC',
  IndexerMissedLaborsStddevPopulationDeploymentIdDesc = 'INDEXER_MISSED_LABORS_STDDEV_POPULATION_DEPLOYMENT_ID_DESC',
  IndexerMissedLaborsStddevPopulationEraIdxAsc = 'INDEXER_MISSED_LABORS_STDDEV_POPULATION_ERA_IDX_ASC',
  IndexerMissedLaborsStddevPopulationEraIdxDesc = 'INDEXER_MISSED_LABORS_STDDEV_POPULATION_ERA_IDX_DESC',
  IndexerMissedLaborsStddevPopulationIdAsc = 'INDEXER_MISSED_LABORS_STDDEV_POPULATION_ID_ASC',
  IndexerMissedLaborsStddevPopulationIdDesc = 'INDEXER_MISSED_LABORS_STDDEV_POPULATION_ID_DESC',
  IndexerMissedLaborsStddevPopulationIndexerIdAsc = 'INDEXER_MISSED_LABORS_STDDEV_POPULATION_INDEXER_ID_ASC',
  IndexerMissedLaborsStddevPopulationIndexerIdDesc = 'INDEXER_MISSED_LABORS_STDDEV_POPULATION_INDEXER_ID_DESC',
  IndexerMissedLaborsStddevPopulationMissedLaborAsc = 'INDEXER_MISSED_LABORS_STDDEV_POPULATION_MISSED_LABOR_ASC',
  IndexerMissedLaborsStddevPopulationMissedLaborDesc = 'INDEXER_MISSED_LABORS_STDDEV_POPULATION_MISSED_LABOR_DESC',
  IndexerMissedLaborsStddevSampleBlockRangeAsc = 'INDEXER_MISSED_LABORS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  IndexerMissedLaborsStddevSampleBlockRangeDesc = 'INDEXER_MISSED_LABORS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  IndexerMissedLaborsStddevSampleCreateAtAsc = 'INDEXER_MISSED_LABORS_STDDEV_SAMPLE_CREATE_AT_ASC',
  IndexerMissedLaborsStddevSampleCreateAtDesc = 'INDEXER_MISSED_LABORS_STDDEV_SAMPLE_CREATE_AT_DESC',
  IndexerMissedLaborsStddevSampleDeploymentIdAsc = 'INDEXER_MISSED_LABORS_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC',
  IndexerMissedLaborsStddevSampleDeploymentIdDesc = 'INDEXER_MISSED_LABORS_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC',
  IndexerMissedLaborsStddevSampleEraIdxAsc = 'INDEXER_MISSED_LABORS_STDDEV_SAMPLE_ERA_IDX_ASC',
  IndexerMissedLaborsStddevSampleEraIdxDesc = 'INDEXER_MISSED_LABORS_STDDEV_SAMPLE_ERA_IDX_DESC',
  IndexerMissedLaborsStddevSampleIdAsc = 'INDEXER_MISSED_LABORS_STDDEV_SAMPLE_ID_ASC',
  IndexerMissedLaborsStddevSampleIdDesc = 'INDEXER_MISSED_LABORS_STDDEV_SAMPLE_ID_DESC',
  IndexerMissedLaborsStddevSampleIndexerIdAsc = 'INDEXER_MISSED_LABORS_STDDEV_SAMPLE_INDEXER_ID_ASC',
  IndexerMissedLaborsStddevSampleIndexerIdDesc = 'INDEXER_MISSED_LABORS_STDDEV_SAMPLE_INDEXER_ID_DESC',
  IndexerMissedLaborsStddevSampleMissedLaborAsc = 'INDEXER_MISSED_LABORS_STDDEV_SAMPLE_MISSED_LABOR_ASC',
  IndexerMissedLaborsStddevSampleMissedLaborDesc = 'INDEXER_MISSED_LABORS_STDDEV_SAMPLE_MISSED_LABOR_DESC',
  IndexerMissedLaborsSumBlockRangeAsc = 'INDEXER_MISSED_LABORS_SUM_BLOCK_RANGE_ASC',
  IndexerMissedLaborsSumBlockRangeDesc = 'INDEXER_MISSED_LABORS_SUM_BLOCK_RANGE_DESC',
  IndexerMissedLaborsSumCreateAtAsc = 'INDEXER_MISSED_LABORS_SUM_CREATE_AT_ASC',
  IndexerMissedLaborsSumCreateAtDesc = 'INDEXER_MISSED_LABORS_SUM_CREATE_AT_DESC',
  IndexerMissedLaborsSumDeploymentIdAsc = 'INDEXER_MISSED_LABORS_SUM_DEPLOYMENT_ID_ASC',
  IndexerMissedLaborsSumDeploymentIdDesc = 'INDEXER_MISSED_LABORS_SUM_DEPLOYMENT_ID_DESC',
  IndexerMissedLaborsSumEraIdxAsc = 'INDEXER_MISSED_LABORS_SUM_ERA_IDX_ASC',
  IndexerMissedLaborsSumEraIdxDesc = 'INDEXER_MISSED_LABORS_SUM_ERA_IDX_DESC',
  IndexerMissedLaborsSumIdAsc = 'INDEXER_MISSED_LABORS_SUM_ID_ASC',
  IndexerMissedLaborsSumIdDesc = 'INDEXER_MISSED_LABORS_SUM_ID_DESC',
  IndexerMissedLaborsSumIndexerIdAsc = 'INDEXER_MISSED_LABORS_SUM_INDEXER_ID_ASC',
  IndexerMissedLaborsSumIndexerIdDesc = 'INDEXER_MISSED_LABORS_SUM_INDEXER_ID_DESC',
  IndexerMissedLaborsSumMissedLaborAsc = 'INDEXER_MISSED_LABORS_SUM_MISSED_LABOR_ASC',
  IndexerMissedLaborsSumMissedLaborDesc = 'INDEXER_MISSED_LABORS_SUM_MISSED_LABOR_DESC',
  IndexerMissedLaborsVariancePopulationBlockRangeAsc = 'INDEXER_MISSED_LABORS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  IndexerMissedLaborsVariancePopulationBlockRangeDesc = 'INDEXER_MISSED_LABORS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  IndexerMissedLaborsVariancePopulationCreateAtAsc = 'INDEXER_MISSED_LABORS_VARIANCE_POPULATION_CREATE_AT_ASC',
  IndexerMissedLaborsVariancePopulationCreateAtDesc = 'INDEXER_MISSED_LABORS_VARIANCE_POPULATION_CREATE_AT_DESC',
  IndexerMissedLaborsVariancePopulationDeploymentIdAsc = 'INDEXER_MISSED_LABORS_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC',
  IndexerMissedLaborsVariancePopulationDeploymentIdDesc = 'INDEXER_MISSED_LABORS_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC',
  IndexerMissedLaborsVariancePopulationEraIdxAsc = 'INDEXER_MISSED_LABORS_VARIANCE_POPULATION_ERA_IDX_ASC',
  IndexerMissedLaborsVariancePopulationEraIdxDesc = 'INDEXER_MISSED_LABORS_VARIANCE_POPULATION_ERA_IDX_DESC',
  IndexerMissedLaborsVariancePopulationIdAsc = 'INDEXER_MISSED_LABORS_VARIANCE_POPULATION_ID_ASC',
  IndexerMissedLaborsVariancePopulationIdDesc = 'INDEXER_MISSED_LABORS_VARIANCE_POPULATION_ID_DESC',
  IndexerMissedLaborsVariancePopulationIndexerIdAsc = 'INDEXER_MISSED_LABORS_VARIANCE_POPULATION_INDEXER_ID_ASC',
  IndexerMissedLaborsVariancePopulationIndexerIdDesc = 'INDEXER_MISSED_LABORS_VARIANCE_POPULATION_INDEXER_ID_DESC',
  IndexerMissedLaborsVariancePopulationMissedLaborAsc = 'INDEXER_MISSED_LABORS_VARIANCE_POPULATION_MISSED_LABOR_ASC',
  IndexerMissedLaborsVariancePopulationMissedLaborDesc = 'INDEXER_MISSED_LABORS_VARIANCE_POPULATION_MISSED_LABOR_DESC',
  IndexerMissedLaborsVarianceSampleBlockRangeAsc = 'INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  IndexerMissedLaborsVarianceSampleBlockRangeDesc = 'INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  IndexerMissedLaborsVarianceSampleCreateAtAsc = 'INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_CREATE_AT_ASC',
  IndexerMissedLaborsVarianceSampleCreateAtDesc = 'INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_CREATE_AT_DESC',
  IndexerMissedLaborsVarianceSampleDeploymentIdAsc = 'INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC',
  IndexerMissedLaborsVarianceSampleDeploymentIdDesc = 'INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC',
  IndexerMissedLaborsVarianceSampleEraIdxAsc = 'INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_ERA_IDX_ASC',
  IndexerMissedLaborsVarianceSampleEraIdxDesc = 'INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_ERA_IDX_DESC',
  IndexerMissedLaborsVarianceSampleIdAsc = 'INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_ID_ASC',
  IndexerMissedLaborsVarianceSampleIdDesc = 'INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_ID_DESC',
  IndexerMissedLaborsVarianceSampleIndexerIdAsc = 'INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  IndexerMissedLaborsVarianceSampleIndexerIdDesc = 'INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  IndexerMissedLaborsVarianceSampleMissedLaborAsc = 'INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_MISSED_LABOR_ASC',
  IndexerMissedLaborsVarianceSampleMissedLaborDesc = 'INDEXER_MISSED_LABORS_VARIANCE_SAMPLE_MISSED_LABOR_DESC',
  IndexerRewardsByIndexerIdCountAsc = 'INDEXER_REWARDS_BY_INDEXER_ID__COUNT_ASC',
  IndexerRewardsByIndexerIdCountDesc = 'INDEXER_REWARDS_BY_INDEXER_ID__COUNT_DESC',
  IndexerStakesAverageBlockRangeAsc = 'INDEXER_STAKES_AVERAGE_BLOCK_RANGE_ASC',
  IndexerStakesAverageBlockRangeDesc = 'INDEXER_STAKES_AVERAGE_BLOCK_RANGE_DESC',
  IndexerStakesAverageDelegatorStakeAsc = 'INDEXER_STAKES_AVERAGE_DELEGATOR_STAKE_ASC',
  IndexerStakesAverageDelegatorStakeDesc = 'INDEXER_STAKES_AVERAGE_DELEGATOR_STAKE_DESC',
  IndexerStakesAverageEraIdxAsc = 'INDEXER_STAKES_AVERAGE_ERA_IDX_ASC',
  IndexerStakesAverageEraIdxDesc = 'INDEXER_STAKES_AVERAGE_ERA_IDX_DESC',
  IndexerStakesAverageEraIdAsc = 'INDEXER_STAKES_AVERAGE_ERA_ID_ASC',
  IndexerStakesAverageEraIdDesc = 'INDEXER_STAKES_AVERAGE_ERA_ID_DESC',
  IndexerStakesAverageIdAsc = 'INDEXER_STAKES_AVERAGE_ID_ASC',
  IndexerStakesAverageIdDesc = 'INDEXER_STAKES_AVERAGE_ID_DESC',
  IndexerStakesAverageIndexerIdAsc = 'INDEXER_STAKES_AVERAGE_INDEXER_ID_ASC',
  IndexerStakesAverageIndexerIdDesc = 'INDEXER_STAKES_AVERAGE_INDEXER_ID_DESC',
  IndexerStakesAverageIndexerStakeAsc = 'INDEXER_STAKES_AVERAGE_INDEXER_STAKE_ASC',
  IndexerStakesAverageIndexerStakeDesc = 'INDEXER_STAKES_AVERAGE_INDEXER_STAKE_DESC',
  IndexerStakesAverageTotalStakeAsc = 'INDEXER_STAKES_AVERAGE_TOTAL_STAKE_ASC',
  IndexerStakesAverageTotalStakeDesc = 'INDEXER_STAKES_AVERAGE_TOTAL_STAKE_DESC',
  IndexerStakesByIndexerIdCountAsc = 'INDEXER_STAKES_BY_INDEXER_ID__COUNT_ASC',
  IndexerStakesByIndexerIdCountDesc = 'INDEXER_STAKES_BY_INDEXER_ID__COUNT_DESC',
  IndexerStakesCountAsc = 'INDEXER_STAKES_COUNT_ASC',
  IndexerStakesCountDesc = 'INDEXER_STAKES_COUNT_DESC',
  IndexerStakesDistinctCountBlockRangeAsc = 'INDEXER_STAKES_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  IndexerStakesDistinctCountBlockRangeDesc = 'INDEXER_STAKES_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  IndexerStakesDistinctCountDelegatorStakeAsc = 'INDEXER_STAKES_DISTINCT_COUNT_DELEGATOR_STAKE_ASC',
  IndexerStakesDistinctCountDelegatorStakeDesc = 'INDEXER_STAKES_DISTINCT_COUNT_DELEGATOR_STAKE_DESC',
  IndexerStakesDistinctCountEraIdxAsc = 'INDEXER_STAKES_DISTINCT_COUNT_ERA_IDX_ASC',
  IndexerStakesDistinctCountEraIdxDesc = 'INDEXER_STAKES_DISTINCT_COUNT_ERA_IDX_DESC',
  IndexerStakesDistinctCountEraIdAsc = 'INDEXER_STAKES_DISTINCT_COUNT_ERA_ID_ASC',
  IndexerStakesDistinctCountEraIdDesc = 'INDEXER_STAKES_DISTINCT_COUNT_ERA_ID_DESC',
  IndexerStakesDistinctCountIdAsc = 'INDEXER_STAKES_DISTINCT_COUNT_ID_ASC',
  IndexerStakesDistinctCountIdDesc = 'INDEXER_STAKES_DISTINCT_COUNT_ID_DESC',
  IndexerStakesDistinctCountIndexerIdAsc = 'INDEXER_STAKES_DISTINCT_COUNT_INDEXER_ID_ASC',
  IndexerStakesDistinctCountIndexerIdDesc = 'INDEXER_STAKES_DISTINCT_COUNT_INDEXER_ID_DESC',
  IndexerStakesDistinctCountIndexerStakeAsc = 'INDEXER_STAKES_DISTINCT_COUNT_INDEXER_STAKE_ASC',
  IndexerStakesDistinctCountIndexerStakeDesc = 'INDEXER_STAKES_DISTINCT_COUNT_INDEXER_STAKE_DESC',
  IndexerStakesDistinctCountTotalStakeAsc = 'INDEXER_STAKES_DISTINCT_COUNT_TOTAL_STAKE_ASC',
  IndexerStakesDistinctCountTotalStakeDesc = 'INDEXER_STAKES_DISTINCT_COUNT_TOTAL_STAKE_DESC',
  IndexerStakesMaxBlockRangeAsc = 'INDEXER_STAKES_MAX_BLOCK_RANGE_ASC',
  IndexerStakesMaxBlockRangeDesc = 'INDEXER_STAKES_MAX_BLOCK_RANGE_DESC',
  IndexerStakesMaxDelegatorStakeAsc = 'INDEXER_STAKES_MAX_DELEGATOR_STAKE_ASC',
  IndexerStakesMaxDelegatorStakeDesc = 'INDEXER_STAKES_MAX_DELEGATOR_STAKE_DESC',
  IndexerStakesMaxEraIdxAsc = 'INDEXER_STAKES_MAX_ERA_IDX_ASC',
  IndexerStakesMaxEraIdxDesc = 'INDEXER_STAKES_MAX_ERA_IDX_DESC',
  IndexerStakesMaxEraIdAsc = 'INDEXER_STAKES_MAX_ERA_ID_ASC',
  IndexerStakesMaxEraIdDesc = 'INDEXER_STAKES_MAX_ERA_ID_DESC',
  IndexerStakesMaxIdAsc = 'INDEXER_STAKES_MAX_ID_ASC',
  IndexerStakesMaxIdDesc = 'INDEXER_STAKES_MAX_ID_DESC',
  IndexerStakesMaxIndexerIdAsc = 'INDEXER_STAKES_MAX_INDEXER_ID_ASC',
  IndexerStakesMaxIndexerIdDesc = 'INDEXER_STAKES_MAX_INDEXER_ID_DESC',
  IndexerStakesMaxIndexerStakeAsc = 'INDEXER_STAKES_MAX_INDEXER_STAKE_ASC',
  IndexerStakesMaxIndexerStakeDesc = 'INDEXER_STAKES_MAX_INDEXER_STAKE_DESC',
  IndexerStakesMaxTotalStakeAsc = 'INDEXER_STAKES_MAX_TOTAL_STAKE_ASC',
  IndexerStakesMaxTotalStakeDesc = 'INDEXER_STAKES_MAX_TOTAL_STAKE_DESC',
  IndexerStakesMinBlockRangeAsc = 'INDEXER_STAKES_MIN_BLOCK_RANGE_ASC',
  IndexerStakesMinBlockRangeDesc = 'INDEXER_STAKES_MIN_BLOCK_RANGE_DESC',
  IndexerStakesMinDelegatorStakeAsc = 'INDEXER_STAKES_MIN_DELEGATOR_STAKE_ASC',
  IndexerStakesMinDelegatorStakeDesc = 'INDEXER_STAKES_MIN_DELEGATOR_STAKE_DESC',
  IndexerStakesMinEraIdxAsc = 'INDEXER_STAKES_MIN_ERA_IDX_ASC',
  IndexerStakesMinEraIdxDesc = 'INDEXER_STAKES_MIN_ERA_IDX_DESC',
  IndexerStakesMinEraIdAsc = 'INDEXER_STAKES_MIN_ERA_ID_ASC',
  IndexerStakesMinEraIdDesc = 'INDEXER_STAKES_MIN_ERA_ID_DESC',
  IndexerStakesMinIdAsc = 'INDEXER_STAKES_MIN_ID_ASC',
  IndexerStakesMinIdDesc = 'INDEXER_STAKES_MIN_ID_DESC',
  IndexerStakesMinIndexerIdAsc = 'INDEXER_STAKES_MIN_INDEXER_ID_ASC',
  IndexerStakesMinIndexerIdDesc = 'INDEXER_STAKES_MIN_INDEXER_ID_DESC',
  IndexerStakesMinIndexerStakeAsc = 'INDEXER_STAKES_MIN_INDEXER_STAKE_ASC',
  IndexerStakesMinIndexerStakeDesc = 'INDEXER_STAKES_MIN_INDEXER_STAKE_DESC',
  IndexerStakesMinTotalStakeAsc = 'INDEXER_STAKES_MIN_TOTAL_STAKE_ASC',
  IndexerStakesMinTotalStakeDesc = 'INDEXER_STAKES_MIN_TOTAL_STAKE_DESC',
  IndexerStakesStddevPopulationBlockRangeAsc = 'INDEXER_STAKES_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  IndexerStakesStddevPopulationBlockRangeDesc = 'INDEXER_STAKES_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  IndexerStakesStddevPopulationDelegatorStakeAsc = 'INDEXER_STAKES_STDDEV_POPULATION_DELEGATOR_STAKE_ASC',
  IndexerStakesStddevPopulationDelegatorStakeDesc = 'INDEXER_STAKES_STDDEV_POPULATION_DELEGATOR_STAKE_DESC',
  IndexerStakesStddevPopulationEraIdxAsc = 'INDEXER_STAKES_STDDEV_POPULATION_ERA_IDX_ASC',
  IndexerStakesStddevPopulationEraIdxDesc = 'INDEXER_STAKES_STDDEV_POPULATION_ERA_IDX_DESC',
  IndexerStakesStddevPopulationEraIdAsc = 'INDEXER_STAKES_STDDEV_POPULATION_ERA_ID_ASC',
  IndexerStakesStddevPopulationEraIdDesc = 'INDEXER_STAKES_STDDEV_POPULATION_ERA_ID_DESC',
  IndexerStakesStddevPopulationIdAsc = 'INDEXER_STAKES_STDDEV_POPULATION_ID_ASC',
  IndexerStakesStddevPopulationIdDesc = 'INDEXER_STAKES_STDDEV_POPULATION_ID_DESC',
  IndexerStakesStddevPopulationIndexerIdAsc = 'INDEXER_STAKES_STDDEV_POPULATION_INDEXER_ID_ASC',
  IndexerStakesStddevPopulationIndexerIdDesc = 'INDEXER_STAKES_STDDEV_POPULATION_INDEXER_ID_DESC',
  IndexerStakesStddevPopulationIndexerStakeAsc = 'INDEXER_STAKES_STDDEV_POPULATION_INDEXER_STAKE_ASC',
  IndexerStakesStddevPopulationIndexerStakeDesc = 'INDEXER_STAKES_STDDEV_POPULATION_INDEXER_STAKE_DESC',
  IndexerStakesStddevPopulationTotalStakeAsc = 'INDEXER_STAKES_STDDEV_POPULATION_TOTAL_STAKE_ASC',
  IndexerStakesStddevPopulationTotalStakeDesc = 'INDEXER_STAKES_STDDEV_POPULATION_TOTAL_STAKE_DESC',
  IndexerStakesStddevSampleBlockRangeAsc = 'INDEXER_STAKES_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  IndexerStakesStddevSampleBlockRangeDesc = 'INDEXER_STAKES_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  IndexerStakesStddevSampleDelegatorStakeAsc = 'INDEXER_STAKES_STDDEV_SAMPLE_DELEGATOR_STAKE_ASC',
  IndexerStakesStddevSampleDelegatorStakeDesc = 'INDEXER_STAKES_STDDEV_SAMPLE_DELEGATOR_STAKE_DESC',
  IndexerStakesStddevSampleEraIdxAsc = 'INDEXER_STAKES_STDDEV_SAMPLE_ERA_IDX_ASC',
  IndexerStakesStddevSampleEraIdxDesc = 'INDEXER_STAKES_STDDEV_SAMPLE_ERA_IDX_DESC',
  IndexerStakesStddevSampleEraIdAsc = 'INDEXER_STAKES_STDDEV_SAMPLE_ERA_ID_ASC',
  IndexerStakesStddevSampleEraIdDesc = 'INDEXER_STAKES_STDDEV_SAMPLE_ERA_ID_DESC',
  IndexerStakesStddevSampleIdAsc = 'INDEXER_STAKES_STDDEV_SAMPLE_ID_ASC',
  IndexerStakesStddevSampleIdDesc = 'INDEXER_STAKES_STDDEV_SAMPLE_ID_DESC',
  IndexerStakesStddevSampleIndexerIdAsc = 'INDEXER_STAKES_STDDEV_SAMPLE_INDEXER_ID_ASC',
  IndexerStakesStddevSampleIndexerIdDesc = 'INDEXER_STAKES_STDDEV_SAMPLE_INDEXER_ID_DESC',
  IndexerStakesStddevSampleIndexerStakeAsc = 'INDEXER_STAKES_STDDEV_SAMPLE_INDEXER_STAKE_ASC',
  IndexerStakesStddevSampleIndexerStakeDesc = 'INDEXER_STAKES_STDDEV_SAMPLE_INDEXER_STAKE_DESC',
  IndexerStakesStddevSampleTotalStakeAsc = 'INDEXER_STAKES_STDDEV_SAMPLE_TOTAL_STAKE_ASC',
  IndexerStakesStddevSampleTotalStakeDesc = 'INDEXER_STAKES_STDDEV_SAMPLE_TOTAL_STAKE_DESC',
  IndexerStakesSumBlockRangeAsc = 'INDEXER_STAKES_SUM_BLOCK_RANGE_ASC',
  IndexerStakesSumBlockRangeDesc = 'INDEXER_STAKES_SUM_BLOCK_RANGE_DESC',
  IndexerStakesSumDelegatorStakeAsc = 'INDEXER_STAKES_SUM_DELEGATOR_STAKE_ASC',
  IndexerStakesSumDelegatorStakeDesc = 'INDEXER_STAKES_SUM_DELEGATOR_STAKE_DESC',
  IndexerStakesSumEraIdxAsc = 'INDEXER_STAKES_SUM_ERA_IDX_ASC',
  IndexerStakesSumEraIdxDesc = 'INDEXER_STAKES_SUM_ERA_IDX_DESC',
  IndexerStakesSumEraIdAsc = 'INDEXER_STAKES_SUM_ERA_ID_ASC',
  IndexerStakesSumEraIdDesc = 'INDEXER_STAKES_SUM_ERA_ID_DESC',
  IndexerStakesSumIdAsc = 'INDEXER_STAKES_SUM_ID_ASC',
  IndexerStakesSumIdDesc = 'INDEXER_STAKES_SUM_ID_DESC',
  IndexerStakesSumIndexerIdAsc = 'INDEXER_STAKES_SUM_INDEXER_ID_ASC',
  IndexerStakesSumIndexerIdDesc = 'INDEXER_STAKES_SUM_INDEXER_ID_DESC',
  IndexerStakesSumIndexerStakeAsc = 'INDEXER_STAKES_SUM_INDEXER_STAKE_ASC',
  IndexerStakesSumIndexerStakeDesc = 'INDEXER_STAKES_SUM_INDEXER_STAKE_DESC',
  IndexerStakesSumTotalStakeAsc = 'INDEXER_STAKES_SUM_TOTAL_STAKE_ASC',
  IndexerStakesSumTotalStakeDesc = 'INDEXER_STAKES_SUM_TOTAL_STAKE_DESC',
  IndexerStakesVariancePopulationBlockRangeAsc = 'INDEXER_STAKES_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  IndexerStakesVariancePopulationBlockRangeDesc = 'INDEXER_STAKES_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  IndexerStakesVariancePopulationDelegatorStakeAsc = 'INDEXER_STAKES_VARIANCE_POPULATION_DELEGATOR_STAKE_ASC',
  IndexerStakesVariancePopulationDelegatorStakeDesc = 'INDEXER_STAKES_VARIANCE_POPULATION_DELEGATOR_STAKE_DESC',
  IndexerStakesVariancePopulationEraIdxAsc = 'INDEXER_STAKES_VARIANCE_POPULATION_ERA_IDX_ASC',
  IndexerStakesVariancePopulationEraIdxDesc = 'INDEXER_STAKES_VARIANCE_POPULATION_ERA_IDX_DESC',
  IndexerStakesVariancePopulationEraIdAsc = 'INDEXER_STAKES_VARIANCE_POPULATION_ERA_ID_ASC',
  IndexerStakesVariancePopulationEraIdDesc = 'INDEXER_STAKES_VARIANCE_POPULATION_ERA_ID_DESC',
  IndexerStakesVariancePopulationIdAsc = 'INDEXER_STAKES_VARIANCE_POPULATION_ID_ASC',
  IndexerStakesVariancePopulationIdDesc = 'INDEXER_STAKES_VARIANCE_POPULATION_ID_DESC',
  IndexerStakesVariancePopulationIndexerIdAsc = 'INDEXER_STAKES_VARIANCE_POPULATION_INDEXER_ID_ASC',
  IndexerStakesVariancePopulationIndexerIdDesc = 'INDEXER_STAKES_VARIANCE_POPULATION_INDEXER_ID_DESC',
  IndexerStakesVariancePopulationIndexerStakeAsc = 'INDEXER_STAKES_VARIANCE_POPULATION_INDEXER_STAKE_ASC',
  IndexerStakesVariancePopulationIndexerStakeDesc = 'INDEXER_STAKES_VARIANCE_POPULATION_INDEXER_STAKE_DESC',
  IndexerStakesVariancePopulationTotalStakeAsc = 'INDEXER_STAKES_VARIANCE_POPULATION_TOTAL_STAKE_ASC',
  IndexerStakesVariancePopulationTotalStakeDesc = 'INDEXER_STAKES_VARIANCE_POPULATION_TOTAL_STAKE_DESC',
  IndexerStakesVarianceSampleBlockRangeAsc = 'INDEXER_STAKES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  IndexerStakesVarianceSampleBlockRangeDesc = 'INDEXER_STAKES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  IndexerStakesVarianceSampleDelegatorStakeAsc = 'INDEXER_STAKES_VARIANCE_SAMPLE_DELEGATOR_STAKE_ASC',
  IndexerStakesVarianceSampleDelegatorStakeDesc = 'INDEXER_STAKES_VARIANCE_SAMPLE_DELEGATOR_STAKE_DESC',
  IndexerStakesVarianceSampleEraIdxAsc = 'INDEXER_STAKES_VARIANCE_SAMPLE_ERA_IDX_ASC',
  IndexerStakesVarianceSampleEraIdxDesc = 'INDEXER_STAKES_VARIANCE_SAMPLE_ERA_IDX_DESC',
  IndexerStakesVarianceSampleEraIdAsc = 'INDEXER_STAKES_VARIANCE_SAMPLE_ERA_ID_ASC',
  IndexerStakesVarianceSampleEraIdDesc = 'INDEXER_STAKES_VARIANCE_SAMPLE_ERA_ID_DESC',
  IndexerStakesVarianceSampleIdAsc = 'INDEXER_STAKES_VARIANCE_SAMPLE_ID_ASC',
  IndexerStakesVarianceSampleIdDesc = 'INDEXER_STAKES_VARIANCE_SAMPLE_ID_DESC',
  IndexerStakesVarianceSampleIndexerIdAsc = 'INDEXER_STAKES_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  IndexerStakesVarianceSampleIndexerIdDesc = 'INDEXER_STAKES_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  IndexerStakesVarianceSampleIndexerStakeAsc = 'INDEXER_STAKES_VARIANCE_SAMPLE_INDEXER_STAKE_ASC',
  IndexerStakesVarianceSampleIndexerStakeDesc = 'INDEXER_STAKES_VARIANCE_SAMPLE_INDEXER_STAKE_DESC',
  IndexerStakesVarianceSampleTotalStakeAsc = 'INDEXER_STAKES_VARIANCE_SAMPLE_TOTAL_STAKE_ASC',
  IndexerStakesVarianceSampleTotalStakeDesc = 'INDEXER_STAKES_VARIANCE_SAMPLE_TOTAL_STAKE_DESC',
  IndexerStakeWeightsAverageBlockRangeAsc = 'INDEXER_STAKE_WEIGHTS_AVERAGE_BLOCK_RANGE_ASC',
  IndexerStakeWeightsAverageBlockRangeDesc = 'INDEXER_STAKE_WEIGHTS_AVERAGE_BLOCK_RANGE_DESC',
  IndexerStakeWeightsAverageCreateAtAsc = 'INDEXER_STAKE_WEIGHTS_AVERAGE_CREATE_AT_ASC',
  IndexerStakeWeightsAverageCreateAtDesc = 'INDEXER_STAKE_WEIGHTS_AVERAGE_CREATE_AT_DESC',
  IndexerStakeWeightsAverageEraIdxAsc = 'INDEXER_STAKE_WEIGHTS_AVERAGE_ERA_IDX_ASC',
  IndexerStakeWeightsAverageEraIdxDesc = 'INDEXER_STAKE_WEIGHTS_AVERAGE_ERA_IDX_DESC',
  IndexerStakeWeightsAverageIdAsc = 'INDEXER_STAKE_WEIGHTS_AVERAGE_ID_ASC',
  IndexerStakeWeightsAverageIdDesc = 'INDEXER_STAKE_WEIGHTS_AVERAGE_ID_DESC',
  IndexerStakeWeightsAverageIndexerIdAsc = 'INDEXER_STAKE_WEIGHTS_AVERAGE_INDEXER_ID_ASC',
  IndexerStakeWeightsAverageIndexerIdDesc = 'INDEXER_STAKE_WEIGHTS_AVERAGE_INDEXER_ID_DESC',
  IndexerStakeWeightsAverageUpdateAtAsc = 'INDEXER_STAKE_WEIGHTS_AVERAGE_UPDATE_AT_ASC',
  IndexerStakeWeightsAverageUpdateAtDesc = 'INDEXER_STAKE_WEIGHTS_AVERAGE_UPDATE_AT_DESC',
  IndexerStakeWeightsAverageWeightAsc = 'INDEXER_STAKE_WEIGHTS_AVERAGE_WEIGHT_ASC',
  IndexerStakeWeightsAverageWeightDesc = 'INDEXER_STAKE_WEIGHTS_AVERAGE_WEIGHT_DESC',
  IndexerStakeWeightsByIndexerIdCountAsc = 'INDEXER_STAKE_WEIGHTS_BY_INDEXER_ID__COUNT_ASC',
  IndexerStakeWeightsByIndexerIdCountDesc = 'INDEXER_STAKE_WEIGHTS_BY_INDEXER_ID__COUNT_DESC',
  IndexerStakeWeightsCountAsc = 'INDEXER_STAKE_WEIGHTS_COUNT_ASC',
  IndexerStakeWeightsCountDesc = 'INDEXER_STAKE_WEIGHTS_COUNT_DESC',
  IndexerStakeWeightsDistinctCountBlockRangeAsc = 'INDEXER_STAKE_WEIGHTS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  IndexerStakeWeightsDistinctCountBlockRangeDesc = 'INDEXER_STAKE_WEIGHTS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  IndexerStakeWeightsDistinctCountCreateAtAsc = 'INDEXER_STAKE_WEIGHTS_DISTINCT_COUNT_CREATE_AT_ASC',
  IndexerStakeWeightsDistinctCountCreateAtDesc = 'INDEXER_STAKE_WEIGHTS_DISTINCT_COUNT_CREATE_AT_DESC',
  IndexerStakeWeightsDistinctCountEraIdxAsc = 'INDEXER_STAKE_WEIGHTS_DISTINCT_COUNT_ERA_IDX_ASC',
  IndexerStakeWeightsDistinctCountEraIdxDesc = 'INDEXER_STAKE_WEIGHTS_DISTINCT_COUNT_ERA_IDX_DESC',
  IndexerStakeWeightsDistinctCountIdAsc = 'INDEXER_STAKE_WEIGHTS_DISTINCT_COUNT_ID_ASC',
  IndexerStakeWeightsDistinctCountIdDesc = 'INDEXER_STAKE_WEIGHTS_DISTINCT_COUNT_ID_DESC',
  IndexerStakeWeightsDistinctCountIndexerIdAsc = 'INDEXER_STAKE_WEIGHTS_DISTINCT_COUNT_INDEXER_ID_ASC',
  IndexerStakeWeightsDistinctCountIndexerIdDesc = 'INDEXER_STAKE_WEIGHTS_DISTINCT_COUNT_INDEXER_ID_DESC',
  IndexerStakeWeightsDistinctCountUpdateAtAsc = 'INDEXER_STAKE_WEIGHTS_DISTINCT_COUNT_UPDATE_AT_ASC',
  IndexerStakeWeightsDistinctCountUpdateAtDesc = 'INDEXER_STAKE_WEIGHTS_DISTINCT_COUNT_UPDATE_AT_DESC',
  IndexerStakeWeightsDistinctCountWeightAsc = 'INDEXER_STAKE_WEIGHTS_DISTINCT_COUNT_WEIGHT_ASC',
  IndexerStakeWeightsDistinctCountWeightDesc = 'INDEXER_STAKE_WEIGHTS_DISTINCT_COUNT_WEIGHT_DESC',
  IndexerStakeWeightsMaxBlockRangeAsc = 'INDEXER_STAKE_WEIGHTS_MAX_BLOCK_RANGE_ASC',
  IndexerStakeWeightsMaxBlockRangeDesc = 'INDEXER_STAKE_WEIGHTS_MAX_BLOCK_RANGE_DESC',
  IndexerStakeWeightsMaxCreateAtAsc = 'INDEXER_STAKE_WEIGHTS_MAX_CREATE_AT_ASC',
  IndexerStakeWeightsMaxCreateAtDesc = 'INDEXER_STAKE_WEIGHTS_MAX_CREATE_AT_DESC',
  IndexerStakeWeightsMaxEraIdxAsc = 'INDEXER_STAKE_WEIGHTS_MAX_ERA_IDX_ASC',
  IndexerStakeWeightsMaxEraIdxDesc = 'INDEXER_STAKE_WEIGHTS_MAX_ERA_IDX_DESC',
  IndexerStakeWeightsMaxIdAsc = 'INDEXER_STAKE_WEIGHTS_MAX_ID_ASC',
  IndexerStakeWeightsMaxIdDesc = 'INDEXER_STAKE_WEIGHTS_MAX_ID_DESC',
  IndexerStakeWeightsMaxIndexerIdAsc = 'INDEXER_STAKE_WEIGHTS_MAX_INDEXER_ID_ASC',
  IndexerStakeWeightsMaxIndexerIdDesc = 'INDEXER_STAKE_WEIGHTS_MAX_INDEXER_ID_DESC',
  IndexerStakeWeightsMaxUpdateAtAsc = 'INDEXER_STAKE_WEIGHTS_MAX_UPDATE_AT_ASC',
  IndexerStakeWeightsMaxUpdateAtDesc = 'INDEXER_STAKE_WEIGHTS_MAX_UPDATE_AT_DESC',
  IndexerStakeWeightsMaxWeightAsc = 'INDEXER_STAKE_WEIGHTS_MAX_WEIGHT_ASC',
  IndexerStakeWeightsMaxWeightDesc = 'INDEXER_STAKE_WEIGHTS_MAX_WEIGHT_DESC',
  IndexerStakeWeightsMinBlockRangeAsc = 'INDEXER_STAKE_WEIGHTS_MIN_BLOCK_RANGE_ASC',
  IndexerStakeWeightsMinBlockRangeDesc = 'INDEXER_STAKE_WEIGHTS_MIN_BLOCK_RANGE_DESC',
  IndexerStakeWeightsMinCreateAtAsc = 'INDEXER_STAKE_WEIGHTS_MIN_CREATE_AT_ASC',
  IndexerStakeWeightsMinCreateAtDesc = 'INDEXER_STAKE_WEIGHTS_MIN_CREATE_AT_DESC',
  IndexerStakeWeightsMinEraIdxAsc = 'INDEXER_STAKE_WEIGHTS_MIN_ERA_IDX_ASC',
  IndexerStakeWeightsMinEraIdxDesc = 'INDEXER_STAKE_WEIGHTS_MIN_ERA_IDX_DESC',
  IndexerStakeWeightsMinIdAsc = 'INDEXER_STAKE_WEIGHTS_MIN_ID_ASC',
  IndexerStakeWeightsMinIdDesc = 'INDEXER_STAKE_WEIGHTS_MIN_ID_DESC',
  IndexerStakeWeightsMinIndexerIdAsc = 'INDEXER_STAKE_WEIGHTS_MIN_INDEXER_ID_ASC',
  IndexerStakeWeightsMinIndexerIdDesc = 'INDEXER_STAKE_WEIGHTS_MIN_INDEXER_ID_DESC',
  IndexerStakeWeightsMinUpdateAtAsc = 'INDEXER_STAKE_WEIGHTS_MIN_UPDATE_AT_ASC',
  IndexerStakeWeightsMinUpdateAtDesc = 'INDEXER_STAKE_WEIGHTS_MIN_UPDATE_AT_DESC',
  IndexerStakeWeightsMinWeightAsc = 'INDEXER_STAKE_WEIGHTS_MIN_WEIGHT_ASC',
  IndexerStakeWeightsMinWeightDesc = 'INDEXER_STAKE_WEIGHTS_MIN_WEIGHT_DESC',
  IndexerStakeWeightsStddevPopulationBlockRangeAsc = 'INDEXER_STAKE_WEIGHTS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  IndexerStakeWeightsStddevPopulationBlockRangeDesc = 'INDEXER_STAKE_WEIGHTS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  IndexerStakeWeightsStddevPopulationCreateAtAsc = 'INDEXER_STAKE_WEIGHTS_STDDEV_POPULATION_CREATE_AT_ASC',
  IndexerStakeWeightsStddevPopulationCreateAtDesc = 'INDEXER_STAKE_WEIGHTS_STDDEV_POPULATION_CREATE_AT_DESC',
  IndexerStakeWeightsStddevPopulationEraIdxAsc = 'INDEXER_STAKE_WEIGHTS_STDDEV_POPULATION_ERA_IDX_ASC',
  IndexerStakeWeightsStddevPopulationEraIdxDesc = 'INDEXER_STAKE_WEIGHTS_STDDEV_POPULATION_ERA_IDX_DESC',
  IndexerStakeWeightsStddevPopulationIdAsc = 'INDEXER_STAKE_WEIGHTS_STDDEV_POPULATION_ID_ASC',
  IndexerStakeWeightsStddevPopulationIdDesc = 'INDEXER_STAKE_WEIGHTS_STDDEV_POPULATION_ID_DESC',
  IndexerStakeWeightsStddevPopulationIndexerIdAsc = 'INDEXER_STAKE_WEIGHTS_STDDEV_POPULATION_INDEXER_ID_ASC',
  IndexerStakeWeightsStddevPopulationIndexerIdDesc = 'INDEXER_STAKE_WEIGHTS_STDDEV_POPULATION_INDEXER_ID_DESC',
  IndexerStakeWeightsStddevPopulationUpdateAtAsc = 'INDEXER_STAKE_WEIGHTS_STDDEV_POPULATION_UPDATE_AT_ASC',
  IndexerStakeWeightsStddevPopulationUpdateAtDesc = 'INDEXER_STAKE_WEIGHTS_STDDEV_POPULATION_UPDATE_AT_DESC',
  IndexerStakeWeightsStddevPopulationWeightAsc = 'INDEXER_STAKE_WEIGHTS_STDDEV_POPULATION_WEIGHT_ASC',
  IndexerStakeWeightsStddevPopulationWeightDesc = 'INDEXER_STAKE_WEIGHTS_STDDEV_POPULATION_WEIGHT_DESC',
  IndexerStakeWeightsStddevSampleBlockRangeAsc = 'INDEXER_STAKE_WEIGHTS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  IndexerStakeWeightsStddevSampleBlockRangeDesc = 'INDEXER_STAKE_WEIGHTS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  IndexerStakeWeightsStddevSampleCreateAtAsc = 'INDEXER_STAKE_WEIGHTS_STDDEV_SAMPLE_CREATE_AT_ASC',
  IndexerStakeWeightsStddevSampleCreateAtDesc = 'INDEXER_STAKE_WEIGHTS_STDDEV_SAMPLE_CREATE_AT_DESC',
  IndexerStakeWeightsStddevSampleEraIdxAsc = 'INDEXER_STAKE_WEIGHTS_STDDEV_SAMPLE_ERA_IDX_ASC',
  IndexerStakeWeightsStddevSampleEraIdxDesc = 'INDEXER_STAKE_WEIGHTS_STDDEV_SAMPLE_ERA_IDX_DESC',
  IndexerStakeWeightsStddevSampleIdAsc = 'INDEXER_STAKE_WEIGHTS_STDDEV_SAMPLE_ID_ASC',
  IndexerStakeWeightsStddevSampleIdDesc = 'INDEXER_STAKE_WEIGHTS_STDDEV_SAMPLE_ID_DESC',
  IndexerStakeWeightsStddevSampleIndexerIdAsc = 'INDEXER_STAKE_WEIGHTS_STDDEV_SAMPLE_INDEXER_ID_ASC',
  IndexerStakeWeightsStddevSampleIndexerIdDesc = 'INDEXER_STAKE_WEIGHTS_STDDEV_SAMPLE_INDEXER_ID_DESC',
  IndexerStakeWeightsStddevSampleUpdateAtAsc = 'INDEXER_STAKE_WEIGHTS_STDDEV_SAMPLE_UPDATE_AT_ASC',
  IndexerStakeWeightsStddevSampleUpdateAtDesc = 'INDEXER_STAKE_WEIGHTS_STDDEV_SAMPLE_UPDATE_AT_DESC',
  IndexerStakeWeightsStddevSampleWeightAsc = 'INDEXER_STAKE_WEIGHTS_STDDEV_SAMPLE_WEIGHT_ASC',
  IndexerStakeWeightsStddevSampleWeightDesc = 'INDEXER_STAKE_WEIGHTS_STDDEV_SAMPLE_WEIGHT_DESC',
  IndexerStakeWeightsSumBlockRangeAsc = 'INDEXER_STAKE_WEIGHTS_SUM_BLOCK_RANGE_ASC',
  IndexerStakeWeightsSumBlockRangeDesc = 'INDEXER_STAKE_WEIGHTS_SUM_BLOCK_RANGE_DESC',
  IndexerStakeWeightsSumCreateAtAsc = 'INDEXER_STAKE_WEIGHTS_SUM_CREATE_AT_ASC',
  IndexerStakeWeightsSumCreateAtDesc = 'INDEXER_STAKE_WEIGHTS_SUM_CREATE_AT_DESC',
  IndexerStakeWeightsSumEraIdxAsc = 'INDEXER_STAKE_WEIGHTS_SUM_ERA_IDX_ASC',
  IndexerStakeWeightsSumEraIdxDesc = 'INDEXER_STAKE_WEIGHTS_SUM_ERA_IDX_DESC',
  IndexerStakeWeightsSumIdAsc = 'INDEXER_STAKE_WEIGHTS_SUM_ID_ASC',
  IndexerStakeWeightsSumIdDesc = 'INDEXER_STAKE_WEIGHTS_SUM_ID_DESC',
  IndexerStakeWeightsSumIndexerIdAsc = 'INDEXER_STAKE_WEIGHTS_SUM_INDEXER_ID_ASC',
  IndexerStakeWeightsSumIndexerIdDesc = 'INDEXER_STAKE_WEIGHTS_SUM_INDEXER_ID_DESC',
  IndexerStakeWeightsSumUpdateAtAsc = 'INDEXER_STAKE_WEIGHTS_SUM_UPDATE_AT_ASC',
  IndexerStakeWeightsSumUpdateAtDesc = 'INDEXER_STAKE_WEIGHTS_SUM_UPDATE_AT_DESC',
  IndexerStakeWeightsSumWeightAsc = 'INDEXER_STAKE_WEIGHTS_SUM_WEIGHT_ASC',
  IndexerStakeWeightsSumWeightDesc = 'INDEXER_STAKE_WEIGHTS_SUM_WEIGHT_DESC',
  IndexerStakeWeightsVariancePopulationBlockRangeAsc = 'INDEXER_STAKE_WEIGHTS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  IndexerStakeWeightsVariancePopulationBlockRangeDesc = 'INDEXER_STAKE_WEIGHTS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  IndexerStakeWeightsVariancePopulationCreateAtAsc = 'INDEXER_STAKE_WEIGHTS_VARIANCE_POPULATION_CREATE_AT_ASC',
  IndexerStakeWeightsVariancePopulationCreateAtDesc = 'INDEXER_STAKE_WEIGHTS_VARIANCE_POPULATION_CREATE_AT_DESC',
  IndexerStakeWeightsVariancePopulationEraIdxAsc = 'INDEXER_STAKE_WEIGHTS_VARIANCE_POPULATION_ERA_IDX_ASC',
  IndexerStakeWeightsVariancePopulationEraIdxDesc = 'INDEXER_STAKE_WEIGHTS_VARIANCE_POPULATION_ERA_IDX_DESC',
  IndexerStakeWeightsVariancePopulationIdAsc = 'INDEXER_STAKE_WEIGHTS_VARIANCE_POPULATION_ID_ASC',
  IndexerStakeWeightsVariancePopulationIdDesc = 'INDEXER_STAKE_WEIGHTS_VARIANCE_POPULATION_ID_DESC',
  IndexerStakeWeightsVariancePopulationIndexerIdAsc = 'INDEXER_STAKE_WEIGHTS_VARIANCE_POPULATION_INDEXER_ID_ASC',
  IndexerStakeWeightsVariancePopulationIndexerIdDesc = 'INDEXER_STAKE_WEIGHTS_VARIANCE_POPULATION_INDEXER_ID_DESC',
  IndexerStakeWeightsVariancePopulationUpdateAtAsc = 'INDEXER_STAKE_WEIGHTS_VARIANCE_POPULATION_UPDATE_AT_ASC',
  IndexerStakeWeightsVariancePopulationUpdateAtDesc = 'INDEXER_STAKE_WEIGHTS_VARIANCE_POPULATION_UPDATE_AT_DESC',
  IndexerStakeWeightsVariancePopulationWeightAsc = 'INDEXER_STAKE_WEIGHTS_VARIANCE_POPULATION_WEIGHT_ASC',
  IndexerStakeWeightsVariancePopulationWeightDesc = 'INDEXER_STAKE_WEIGHTS_VARIANCE_POPULATION_WEIGHT_DESC',
  IndexerStakeWeightsVarianceSampleBlockRangeAsc = 'INDEXER_STAKE_WEIGHTS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  IndexerStakeWeightsVarianceSampleBlockRangeDesc = 'INDEXER_STAKE_WEIGHTS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  IndexerStakeWeightsVarianceSampleCreateAtAsc = 'INDEXER_STAKE_WEIGHTS_VARIANCE_SAMPLE_CREATE_AT_ASC',
  IndexerStakeWeightsVarianceSampleCreateAtDesc = 'INDEXER_STAKE_WEIGHTS_VARIANCE_SAMPLE_CREATE_AT_DESC',
  IndexerStakeWeightsVarianceSampleEraIdxAsc = 'INDEXER_STAKE_WEIGHTS_VARIANCE_SAMPLE_ERA_IDX_ASC',
  IndexerStakeWeightsVarianceSampleEraIdxDesc = 'INDEXER_STAKE_WEIGHTS_VARIANCE_SAMPLE_ERA_IDX_DESC',
  IndexerStakeWeightsVarianceSampleIdAsc = 'INDEXER_STAKE_WEIGHTS_VARIANCE_SAMPLE_ID_ASC',
  IndexerStakeWeightsVarianceSampleIdDesc = 'INDEXER_STAKE_WEIGHTS_VARIANCE_SAMPLE_ID_DESC',
  IndexerStakeWeightsVarianceSampleIndexerIdAsc = 'INDEXER_STAKE_WEIGHTS_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  IndexerStakeWeightsVarianceSampleIndexerIdDesc = 'INDEXER_STAKE_WEIGHTS_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  IndexerStakeWeightsVarianceSampleUpdateAtAsc = 'INDEXER_STAKE_WEIGHTS_VARIANCE_SAMPLE_UPDATE_AT_ASC',
  IndexerStakeWeightsVarianceSampleUpdateAtDesc = 'INDEXER_STAKE_WEIGHTS_VARIANCE_SAMPLE_UPDATE_AT_DESC',
  IndexerStakeWeightsVarianceSampleWeightAsc = 'INDEXER_STAKE_WEIGHTS_VARIANCE_SAMPLE_WEIGHT_ASC',
  IndexerStakeWeightsVarianceSampleWeightDesc = 'INDEXER_STAKE_WEIGHTS_VARIANCE_SAMPLE_WEIGHT_DESC',
  LastClaimEraAsc = 'LAST_CLAIM_ERA_ASC',
  LastClaimEraDesc = 'LAST_CLAIM_ERA_DESC',
  LastEventAsc = 'LAST_EVENT_ASC',
  LastEventDesc = 'LAST_EVENT_DESC',
  LastSettledEraAsc = 'LAST_SETTLED_ERA_ASC',
  LastSettledEraDesc = 'LAST_SETTLED_ERA_DESC',
  MaxUnstakeAmountAsc = 'MAX_UNSTAKE_AMOUNT_ASC',
  MaxUnstakeAmountDesc = 'MAX_UNSTAKE_AMOUNT_DESC',
  MetadataAsc = 'METADATA_ASC',
  MetadataDesc = 'METADATA_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  ProjectsAverageBlockRangeAsc = 'PROJECTS_AVERAGE_BLOCK_RANGE_ASC',
  ProjectsAverageBlockRangeDesc = 'PROJECTS_AVERAGE_BLOCK_RANGE_DESC',
  ProjectsAverageCreatedBlockAsc = 'PROJECTS_AVERAGE_CREATED_BLOCK_ASC',
  ProjectsAverageCreatedBlockDesc = 'PROJECTS_AVERAGE_CREATED_BLOCK_DESC',
  ProjectsAverageDeploymentIdAsc = 'PROJECTS_AVERAGE_DEPLOYMENT_ID_ASC',
  ProjectsAverageDeploymentIdDesc = 'PROJECTS_AVERAGE_DEPLOYMENT_ID_DESC',
  ProjectsAverageIdAsc = 'PROJECTS_AVERAGE_ID_ASC',
  ProjectsAverageIdDesc = 'PROJECTS_AVERAGE_ID_DESC',
  ProjectsAverageIndexerIdAsc = 'PROJECTS_AVERAGE_INDEXER_ID_ASC',
  ProjectsAverageIndexerIdDesc = 'PROJECTS_AVERAGE_INDEXER_ID_DESC',
  ProjectsAverageLastEventAsc = 'PROJECTS_AVERAGE_LAST_EVENT_ASC',
  ProjectsAverageLastEventDesc = 'PROJECTS_AVERAGE_LAST_EVENT_DESC',
  ProjectsAverageStatusAsc = 'PROJECTS_AVERAGE_STATUS_ASC',
  ProjectsAverageStatusDesc = 'PROJECTS_AVERAGE_STATUS_DESC',
  ProjectsAverageTimestampAsc = 'PROJECTS_AVERAGE_TIMESTAMP_ASC',
  ProjectsAverageTimestampDesc = 'PROJECTS_AVERAGE_TIMESTAMP_DESC',
  ProjectsCountAsc = 'PROJECTS_COUNT_ASC',
  ProjectsCountDesc = 'PROJECTS_COUNT_DESC',
  ProjectsDistinctCountBlockRangeAsc = 'PROJECTS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  ProjectsDistinctCountBlockRangeDesc = 'PROJECTS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  ProjectsDistinctCountCreatedBlockAsc = 'PROJECTS_DISTINCT_COUNT_CREATED_BLOCK_ASC',
  ProjectsDistinctCountCreatedBlockDesc = 'PROJECTS_DISTINCT_COUNT_CREATED_BLOCK_DESC',
  ProjectsDistinctCountDeploymentIdAsc = 'PROJECTS_DISTINCT_COUNT_DEPLOYMENT_ID_ASC',
  ProjectsDistinctCountDeploymentIdDesc = 'PROJECTS_DISTINCT_COUNT_DEPLOYMENT_ID_DESC',
  ProjectsDistinctCountIdAsc = 'PROJECTS_DISTINCT_COUNT_ID_ASC',
  ProjectsDistinctCountIdDesc = 'PROJECTS_DISTINCT_COUNT_ID_DESC',
  ProjectsDistinctCountIndexerIdAsc = 'PROJECTS_DISTINCT_COUNT_INDEXER_ID_ASC',
  ProjectsDistinctCountIndexerIdDesc = 'PROJECTS_DISTINCT_COUNT_INDEXER_ID_DESC',
  ProjectsDistinctCountLastEventAsc = 'PROJECTS_DISTINCT_COUNT_LAST_EVENT_ASC',
  ProjectsDistinctCountLastEventDesc = 'PROJECTS_DISTINCT_COUNT_LAST_EVENT_DESC',
  ProjectsDistinctCountStatusAsc = 'PROJECTS_DISTINCT_COUNT_STATUS_ASC',
  ProjectsDistinctCountStatusDesc = 'PROJECTS_DISTINCT_COUNT_STATUS_DESC',
  ProjectsDistinctCountTimestampAsc = 'PROJECTS_DISTINCT_COUNT_TIMESTAMP_ASC',
  ProjectsDistinctCountTimestampDesc = 'PROJECTS_DISTINCT_COUNT_TIMESTAMP_DESC',
  ProjectsMaxBlockRangeAsc = 'PROJECTS_MAX_BLOCK_RANGE_ASC',
  ProjectsMaxBlockRangeDesc = 'PROJECTS_MAX_BLOCK_RANGE_DESC',
  ProjectsMaxCreatedBlockAsc = 'PROJECTS_MAX_CREATED_BLOCK_ASC',
  ProjectsMaxCreatedBlockDesc = 'PROJECTS_MAX_CREATED_BLOCK_DESC',
  ProjectsMaxDeploymentIdAsc = 'PROJECTS_MAX_DEPLOYMENT_ID_ASC',
  ProjectsMaxDeploymentIdDesc = 'PROJECTS_MAX_DEPLOYMENT_ID_DESC',
  ProjectsMaxIdAsc = 'PROJECTS_MAX_ID_ASC',
  ProjectsMaxIdDesc = 'PROJECTS_MAX_ID_DESC',
  ProjectsMaxIndexerIdAsc = 'PROJECTS_MAX_INDEXER_ID_ASC',
  ProjectsMaxIndexerIdDesc = 'PROJECTS_MAX_INDEXER_ID_DESC',
  ProjectsMaxLastEventAsc = 'PROJECTS_MAX_LAST_EVENT_ASC',
  ProjectsMaxLastEventDesc = 'PROJECTS_MAX_LAST_EVENT_DESC',
  ProjectsMaxStatusAsc = 'PROJECTS_MAX_STATUS_ASC',
  ProjectsMaxStatusDesc = 'PROJECTS_MAX_STATUS_DESC',
  ProjectsMaxTimestampAsc = 'PROJECTS_MAX_TIMESTAMP_ASC',
  ProjectsMaxTimestampDesc = 'PROJECTS_MAX_TIMESTAMP_DESC',
  ProjectsMinBlockRangeAsc = 'PROJECTS_MIN_BLOCK_RANGE_ASC',
  ProjectsMinBlockRangeDesc = 'PROJECTS_MIN_BLOCK_RANGE_DESC',
  ProjectsMinCreatedBlockAsc = 'PROJECTS_MIN_CREATED_BLOCK_ASC',
  ProjectsMinCreatedBlockDesc = 'PROJECTS_MIN_CREATED_BLOCK_DESC',
  ProjectsMinDeploymentIdAsc = 'PROJECTS_MIN_DEPLOYMENT_ID_ASC',
  ProjectsMinDeploymentIdDesc = 'PROJECTS_MIN_DEPLOYMENT_ID_DESC',
  ProjectsMinIdAsc = 'PROJECTS_MIN_ID_ASC',
  ProjectsMinIdDesc = 'PROJECTS_MIN_ID_DESC',
  ProjectsMinIndexerIdAsc = 'PROJECTS_MIN_INDEXER_ID_ASC',
  ProjectsMinIndexerIdDesc = 'PROJECTS_MIN_INDEXER_ID_DESC',
  ProjectsMinLastEventAsc = 'PROJECTS_MIN_LAST_EVENT_ASC',
  ProjectsMinLastEventDesc = 'PROJECTS_MIN_LAST_EVENT_DESC',
  ProjectsMinStatusAsc = 'PROJECTS_MIN_STATUS_ASC',
  ProjectsMinStatusDesc = 'PROJECTS_MIN_STATUS_DESC',
  ProjectsMinTimestampAsc = 'PROJECTS_MIN_TIMESTAMP_ASC',
  ProjectsMinTimestampDesc = 'PROJECTS_MIN_TIMESTAMP_DESC',
  ProjectsStddevPopulationBlockRangeAsc = 'PROJECTS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  ProjectsStddevPopulationBlockRangeDesc = 'PROJECTS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  ProjectsStddevPopulationCreatedBlockAsc = 'PROJECTS_STDDEV_POPULATION_CREATED_BLOCK_ASC',
  ProjectsStddevPopulationCreatedBlockDesc = 'PROJECTS_STDDEV_POPULATION_CREATED_BLOCK_DESC',
  ProjectsStddevPopulationDeploymentIdAsc = 'PROJECTS_STDDEV_POPULATION_DEPLOYMENT_ID_ASC',
  ProjectsStddevPopulationDeploymentIdDesc = 'PROJECTS_STDDEV_POPULATION_DEPLOYMENT_ID_DESC',
  ProjectsStddevPopulationIdAsc = 'PROJECTS_STDDEV_POPULATION_ID_ASC',
  ProjectsStddevPopulationIdDesc = 'PROJECTS_STDDEV_POPULATION_ID_DESC',
  ProjectsStddevPopulationIndexerIdAsc = 'PROJECTS_STDDEV_POPULATION_INDEXER_ID_ASC',
  ProjectsStddevPopulationIndexerIdDesc = 'PROJECTS_STDDEV_POPULATION_INDEXER_ID_DESC',
  ProjectsStddevPopulationLastEventAsc = 'PROJECTS_STDDEV_POPULATION_LAST_EVENT_ASC',
  ProjectsStddevPopulationLastEventDesc = 'PROJECTS_STDDEV_POPULATION_LAST_EVENT_DESC',
  ProjectsStddevPopulationStatusAsc = 'PROJECTS_STDDEV_POPULATION_STATUS_ASC',
  ProjectsStddevPopulationStatusDesc = 'PROJECTS_STDDEV_POPULATION_STATUS_DESC',
  ProjectsStddevPopulationTimestampAsc = 'PROJECTS_STDDEV_POPULATION_TIMESTAMP_ASC',
  ProjectsStddevPopulationTimestampDesc = 'PROJECTS_STDDEV_POPULATION_TIMESTAMP_DESC',
  ProjectsStddevSampleBlockRangeAsc = 'PROJECTS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  ProjectsStddevSampleBlockRangeDesc = 'PROJECTS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  ProjectsStddevSampleCreatedBlockAsc = 'PROJECTS_STDDEV_SAMPLE_CREATED_BLOCK_ASC',
  ProjectsStddevSampleCreatedBlockDesc = 'PROJECTS_STDDEV_SAMPLE_CREATED_BLOCK_DESC',
  ProjectsStddevSampleDeploymentIdAsc = 'PROJECTS_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC',
  ProjectsStddevSampleDeploymentIdDesc = 'PROJECTS_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC',
  ProjectsStddevSampleIdAsc = 'PROJECTS_STDDEV_SAMPLE_ID_ASC',
  ProjectsStddevSampleIdDesc = 'PROJECTS_STDDEV_SAMPLE_ID_DESC',
  ProjectsStddevSampleIndexerIdAsc = 'PROJECTS_STDDEV_SAMPLE_INDEXER_ID_ASC',
  ProjectsStddevSampleIndexerIdDesc = 'PROJECTS_STDDEV_SAMPLE_INDEXER_ID_DESC',
  ProjectsStddevSampleLastEventAsc = 'PROJECTS_STDDEV_SAMPLE_LAST_EVENT_ASC',
  ProjectsStddevSampleLastEventDesc = 'PROJECTS_STDDEV_SAMPLE_LAST_EVENT_DESC',
  ProjectsStddevSampleStatusAsc = 'PROJECTS_STDDEV_SAMPLE_STATUS_ASC',
  ProjectsStddevSampleStatusDesc = 'PROJECTS_STDDEV_SAMPLE_STATUS_DESC',
  ProjectsStddevSampleTimestampAsc = 'PROJECTS_STDDEV_SAMPLE_TIMESTAMP_ASC',
  ProjectsStddevSampleTimestampDesc = 'PROJECTS_STDDEV_SAMPLE_TIMESTAMP_DESC',
  ProjectsSumBlockRangeAsc = 'PROJECTS_SUM_BLOCK_RANGE_ASC',
  ProjectsSumBlockRangeDesc = 'PROJECTS_SUM_BLOCK_RANGE_DESC',
  ProjectsSumCreatedBlockAsc = 'PROJECTS_SUM_CREATED_BLOCK_ASC',
  ProjectsSumCreatedBlockDesc = 'PROJECTS_SUM_CREATED_BLOCK_DESC',
  ProjectsSumDeploymentIdAsc = 'PROJECTS_SUM_DEPLOYMENT_ID_ASC',
  ProjectsSumDeploymentIdDesc = 'PROJECTS_SUM_DEPLOYMENT_ID_DESC',
  ProjectsSumIdAsc = 'PROJECTS_SUM_ID_ASC',
  ProjectsSumIdDesc = 'PROJECTS_SUM_ID_DESC',
  ProjectsSumIndexerIdAsc = 'PROJECTS_SUM_INDEXER_ID_ASC',
  ProjectsSumIndexerIdDesc = 'PROJECTS_SUM_INDEXER_ID_DESC',
  ProjectsSumLastEventAsc = 'PROJECTS_SUM_LAST_EVENT_ASC',
  ProjectsSumLastEventDesc = 'PROJECTS_SUM_LAST_EVENT_DESC',
  ProjectsSumStatusAsc = 'PROJECTS_SUM_STATUS_ASC',
  ProjectsSumStatusDesc = 'PROJECTS_SUM_STATUS_DESC',
  ProjectsSumTimestampAsc = 'PROJECTS_SUM_TIMESTAMP_ASC',
  ProjectsSumTimestampDesc = 'PROJECTS_SUM_TIMESTAMP_DESC',
  ProjectsVariancePopulationBlockRangeAsc = 'PROJECTS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  ProjectsVariancePopulationBlockRangeDesc = 'PROJECTS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  ProjectsVariancePopulationCreatedBlockAsc = 'PROJECTS_VARIANCE_POPULATION_CREATED_BLOCK_ASC',
  ProjectsVariancePopulationCreatedBlockDesc = 'PROJECTS_VARIANCE_POPULATION_CREATED_BLOCK_DESC',
  ProjectsVariancePopulationDeploymentIdAsc = 'PROJECTS_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC',
  ProjectsVariancePopulationDeploymentIdDesc = 'PROJECTS_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC',
  ProjectsVariancePopulationIdAsc = 'PROJECTS_VARIANCE_POPULATION_ID_ASC',
  ProjectsVariancePopulationIdDesc = 'PROJECTS_VARIANCE_POPULATION_ID_DESC',
  ProjectsVariancePopulationIndexerIdAsc = 'PROJECTS_VARIANCE_POPULATION_INDEXER_ID_ASC',
  ProjectsVariancePopulationIndexerIdDesc = 'PROJECTS_VARIANCE_POPULATION_INDEXER_ID_DESC',
  ProjectsVariancePopulationLastEventAsc = 'PROJECTS_VARIANCE_POPULATION_LAST_EVENT_ASC',
  ProjectsVariancePopulationLastEventDesc = 'PROJECTS_VARIANCE_POPULATION_LAST_EVENT_DESC',
  ProjectsVariancePopulationStatusAsc = 'PROJECTS_VARIANCE_POPULATION_STATUS_ASC',
  ProjectsVariancePopulationStatusDesc = 'PROJECTS_VARIANCE_POPULATION_STATUS_DESC',
  ProjectsVariancePopulationTimestampAsc = 'PROJECTS_VARIANCE_POPULATION_TIMESTAMP_ASC',
  ProjectsVariancePopulationTimestampDesc = 'PROJECTS_VARIANCE_POPULATION_TIMESTAMP_DESC',
  ProjectsVarianceSampleBlockRangeAsc = 'PROJECTS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  ProjectsVarianceSampleBlockRangeDesc = 'PROJECTS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  ProjectsVarianceSampleCreatedBlockAsc = 'PROJECTS_VARIANCE_SAMPLE_CREATED_BLOCK_ASC',
  ProjectsVarianceSampleCreatedBlockDesc = 'PROJECTS_VARIANCE_SAMPLE_CREATED_BLOCK_DESC',
  ProjectsVarianceSampleDeploymentIdAsc = 'PROJECTS_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC',
  ProjectsVarianceSampleDeploymentIdDesc = 'PROJECTS_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC',
  ProjectsVarianceSampleIdAsc = 'PROJECTS_VARIANCE_SAMPLE_ID_ASC',
  ProjectsVarianceSampleIdDesc = 'PROJECTS_VARIANCE_SAMPLE_ID_DESC',
  ProjectsVarianceSampleIndexerIdAsc = 'PROJECTS_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  ProjectsVarianceSampleIndexerIdDesc = 'PROJECTS_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  ProjectsVarianceSampleLastEventAsc = 'PROJECTS_VARIANCE_SAMPLE_LAST_EVENT_ASC',
  ProjectsVarianceSampleLastEventDesc = 'PROJECTS_VARIANCE_SAMPLE_LAST_EVENT_DESC',
  ProjectsVarianceSampleStatusAsc = 'PROJECTS_VARIANCE_SAMPLE_STATUS_ASC',
  ProjectsVarianceSampleStatusDesc = 'PROJECTS_VARIANCE_SAMPLE_STATUS_DESC',
  ProjectsVarianceSampleTimestampAsc = 'PROJECTS_VARIANCE_SAMPLE_TIMESTAMP_ASC',
  ProjectsVarianceSampleTimestampDesc = 'PROJECTS_VARIANCE_SAMPLE_TIMESTAMP_DESC',
  RewardsAverageAmountAsc = 'REWARDS_AVERAGE_AMOUNT_ASC',
  RewardsAverageAmountDesc = 'REWARDS_AVERAGE_AMOUNT_DESC',
  RewardsAverageBlockRangeAsc = 'REWARDS_AVERAGE_BLOCK_RANGE_ASC',
  RewardsAverageBlockRangeDesc = 'REWARDS_AVERAGE_BLOCK_RANGE_DESC',
  RewardsAverageCreatedBlockAsc = 'REWARDS_AVERAGE_CREATED_BLOCK_ASC',
  RewardsAverageCreatedBlockDesc = 'REWARDS_AVERAGE_CREATED_BLOCK_DESC',
  RewardsAverageEraIdxAsc = 'REWARDS_AVERAGE_ERA_IDX_ASC',
  RewardsAverageEraIdxDesc = 'REWARDS_AVERAGE_ERA_IDX_DESC',
  RewardsAverageEraIdAsc = 'REWARDS_AVERAGE_ERA_ID_ASC',
  RewardsAverageEraIdDesc = 'REWARDS_AVERAGE_ERA_ID_DESC',
  RewardsAverageIdAsc = 'REWARDS_AVERAGE_ID_ASC',
  RewardsAverageIdDesc = 'REWARDS_AVERAGE_ID_DESC',
  RewardsAverageIndexerIdAsc = 'REWARDS_AVERAGE_INDEXER_ID_ASC',
  RewardsAverageIndexerIdDesc = 'REWARDS_AVERAGE_INDEXER_ID_DESC',
  RewardsAverageLastEventAsc = 'REWARDS_AVERAGE_LAST_EVENT_ASC',
  RewardsAverageLastEventDesc = 'REWARDS_AVERAGE_LAST_EVENT_DESC',
  RewardsCountAsc = 'REWARDS_COUNT_ASC',
  RewardsCountDesc = 'REWARDS_COUNT_DESC',
  RewardsDistinctCountAmountAsc = 'REWARDS_DISTINCT_COUNT_AMOUNT_ASC',
  RewardsDistinctCountAmountDesc = 'REWARDS_DISTINCT_COUNT_AMOUNT_DESC',
  RewardsDistinctCountBlockRangeAsc = 'REWARDS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  RewardsDistinctCountBlockRangeDesc = 'REWARDS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  RewardsDistinctCountCreatedBlockAsc = 'REWARDS_DISTINCT_COUNT_CREATED_BLOCK_ASC',
  RewardsDistinctCountCreatedBlockDesc = 'REWARDS_DISTINCT_COUNT_CREATED_BLOCK_DESC',
  RewardsDistinctCountEraIdxAsc = 'REWARDS_DISTINCT_COUNT_ERA_IDX_ASC',
  RewardsDistinctCountEraIdxDesc = 'REWARDS_DISTINCT_COUNT_ERA_IDX_DESC',
  RewardsDistinctCountEraIdAsc = 'REWARDS_DISTINCT_COUNT_ERA_ID_ASC',
  RewardsDistinctCountEraIdDesc = 'REWARDS_DISTINCT_COUNT_ERA_ID_DESC',
  RewardsDistinctCountIdAsc = 'REWARDS_DISTINCT_COUNT_ID_ASC',
  RewardsDistinctCountIdDesc = 'REWARDS_DISTINCT_COUNT_ID_DESC',
  RewardsDistinctCountIndexerIdAsc = 'REWARDS_DISTINCT_COUNT_INDEXER_ID_ASC',
  RewardsDistinctCountIndexerIdDesc = 'REWARDS_DISTINCT_COUNT_INDEXER_ID_DESC',
  RewardsDistinctCountLastEventAsc = 'REWARDS_DISTINCT_COUNT_LAST_EVENT_ASC',
  RewardsDistinctCountLastEventDesc = 'REWARDS_DISTINCT_COUNT_LAST_EVENT_DESC',
  RewardsMaxAmountAsc = 'REWARDS_MAX_AMOUNT_ASC',
  RewardsMaxAmountDesc = 'REWARDS_MAX_AMOUNT_DESC',
  RewardsMaxBlockRangeAsc = 'REWARDS_MAX_BLOCK_RANGE_ASC',
  RewardsMaxBlockRangeDesc = 'REWARDS_MAX_BLOCK_RANGE_DESC',
  RewardsMaxCreatedBlockAsc = 'REWARDS_MAX_CREATED_BLOCK_ASC',
  RewardsMaxCreatedBlockDesc = 'REWARDS_MAX_CREATED_BLOCK_DESC',
  RewardsMaxEraIdxAsc = 'REWARDS_MAX_ERA_IDX_ASC',
  RewardsMaxEraIdxDesc = 'REWARDS_MAX_ERA_IDX_DESC',
  RewardsMaxEraIdAsc = 'REWARDS_MAX_ERA_ID_ASC',
  RewardsMaxEraIdDesc = 'REWARDS_MAX_ERA_ID_DESC',
  RewardsMaxIdAsc = 'REWARDS_MAX_ID_ASC',
  RewardsMaxIdDesc = 'REWARDS_MAX_ID_DESC',
  RewardsMaxIndexerIdAsc = 'REWARDS_MAX_INDEXER_ID_ASC',
  RewardsMaxIndexerIdDesc = 'REWARDS_MAX_INDEXER_ID_DESC',
  RewardsMaxLastEventAsc = 'REWARDS_MAX_LAST_EVENT_ASC',
  RewardsMaxLastEventDesc = 'REWARDS_MAX_LAST_EVENT_DESC',
  RewardsMinAmountAsc = 'REWARDS_MIN_AMOUNT_ASC',
  RewardsMinAmountDesc = 'REWARDS_MIN_AMOUNT_DESC',
  RewardsMinBlockRangeAsc = 'REWARDS_MIN_BLOCK_RANGE_ASC',
  RewardsMinBlockRangeDesc = 'REWARDS_MIN_BLOCK_RANGE_DESC',
  RewardsMinCreatedBlockAsc = 'REWARDS_MIN_CREATED_BLOCK_ASC',
  RewardsMinCreatedBlockDesc = 'REWARDS_MIN_CREATED_BLOCK_DESC',
  RewardsMinEraIdxAsc = 'REWARDS_MIN_ERA_IDX_ASC',
  RewardsMinEraIdxDesc = 'REWARDS_MIN_ERA_IDX_DESC',
  RewardsMinEraIdAsc = 'REWARDS_MIN_ERA_ID_ASC',
  RewardsMinEraIdDesc = 'REWARDS_MIN_ERA_ID_DESC',
  RewardsMinIdAsc = 'REWARDS_MIN_ID_ASC',
  RewardsMinIdDesc = 'REWARDS_MIN_ID_DESC',
  RewardsMinIndexerIdAsc = 'REWARDS_MIN_INDEXER_ID_ASC',
  RewardsMinIndexerIdDesc = 'REWARDS_MIN_INDEXER_ID_DESC',
  RewardsMinLastEventAsc = 'REWARDS_MIN_LAST_EVENT_ASC',
  RewardsMinLastEventDesc = 'REWARDS_MIN_LAST_EVENT_DESC',
  RewardsStddevPopulationAmountAsc = 'REWARDS_STDDEV_POPULATION_AMOUNT_ASC',
  RewardsStddevPopulationAmountDesc = 'REWARDS_STDDEV_POPULATION_AMOUNT_DESC',
  RewardsStddevPopulationBlockRangeAsc = 'REWARDS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  RewardsStddevPopulationBlockRangeDesc = 'REWARDS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  RewardsStddevPopulationCreatedBlockAsc = 'REWARDS_STDDEV_POPULATION_CREATED_BLOCK_ASC',
  RewardsStddevPopulationCreatedBlockDesc = 'REWARDS_STDDEV_POPULATION_CREATED_BLOCK_DESC',
  RewardsStddevPopulationEraIdxAsc = 'REWARDS_STDDEV_POPULATION_ERA_IDX_ASC',
  RewardsStddevPopulationEraIdxDesc = 'REWARDS_STDDEV_POPULATION_ERA_IDX_DESC',
  RewardsStddevPopulationEraIdAsc = 'REWARDS_STDDEV_POPULATION_ERA_ID_ASC',
  RewardsStddevPopulationEraIdDesc = 'REWARDS_STDDEV_POPULATION_ERA_ID_DESC',
  RewardsStddevPopulationIdAsc = 'REWARDS_STDDEV_POPULATION_ID_ASC',
  RewardsStddevPopulationIdDesc = 'REWARDS_STDDEV_POPULATION_ID_DESC',
  RewardsStddevPopulationIndexerIdAsc = 'REWARDS_STDDEV_POPULATION_INDEXER_ID_ASC',
  RewardsStddevPopulationIndexerIdDesc = 'REWARDS_STDDEV_POPULATION_INDEXER_ID_DESC',
  RewardsStddevPopulationLastEventAsc = 'REWARDS_STDDEV_POPULATION_LAST_EVENT_ASC',
  RewardsStddevPopulationLastEventDesc = 'REWARDS_STDDEV_POPULATION_LAST_EVENT_DESC',
  RewardsStddevSampleAmountAsc = 'REWARDS_STDDEV_SAMPLE_AMOUNT_ASC',
  RewardsStddevSampleAmountDesc = 'REWARDS_STDDEV_SAMPLE_AMOUNT_DESC',
  RewardsStddevSampleBlockRangeAsc = 'REWARDS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  RewardsStddevSampleBlockRangeDesc = 'REWARDS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  RewardsStddevSampleCreatedBlockAsc = 'REWARDS_STDDEV_SAMPLE_CREATED_BLOCK_ASC',
  RewardsStddevSampleCreatedBlockDesc = 'REWARDS_STDDEV_SAMPLE_CREATED_BLOCK_DESC',
  RewardsStddevSampleEraIdxAsc = 'REWARDS_STDDEV_SAMPLE_ERA_IDX_ASC',
  RewardsStddevSampleEraIdxDesc = 'REWARDS_STDDEV_SAMPLE_ERA_IDX_DESC',
  RewardsStddevSampleEraIdAsc = 'REWARDS_STDDEV_SAMPLE_ERA_ID_ASC',
  RewardsStddevSampleEraIdDesc = 'REWARDS_STDDEV_SAMPLE_ERA_ID_DESC',
  RewardsStddevSampleIdAsc = 'REWARDS_STDDEV_SAMPLE_ID_ASC',
  RewardsStddevSampleIdDesc = 'REWARDS_STDDEV_SAMPLE_ID_DESC',
  RewardsStddevSampleIndexerIdAsc = 'REWARDS_STDDEV_SAMPLE_INDEXER_ID_ASC',
  RewardsStddevSampleIndexerIdDesc = 'REWARDS_STDDEV_SAMPLE_INDEXER_ID_DESC',
  RewardsStddevSampleLastEventAsc = 'REWARDS_STDDEV_SAMPLE_LAST_EVENT_ASC',
  RewardsStddevSampleLastEventDesc = 'REWARDS_STDDEV_SAMPLE_LAST_EVENT_DESC',
  RewardsSumAmountAsc = 'REWARDS_SUM_AMOUNT_ASC',
  RewardsSumAmountDesc = 'REWARDS_SUM_AMOUNT_DESC',
  RewardsSumBlockRangeAsc = 'REWARDS_SUM_BLOCK_RANGE_ASC',
  RewardsSumBlockRangeDesc = 'REWARDS_SUM_BLOCK_RANGE_DESC',
  RewardsSumCreatedBlockAsc = 'REWARDS_SUM_CREATED_BLOCK_ASC',
  RewardsSumCreatedBlockDesc = 'REWARDS_SUM_CREATED_BLOCK_DESC',
  RewardsSumEraIdxAsc = 'REWARDS_SUM_ERA_IDX_ASC',
  RewardsSumEraIdxDesc = 'REWARDS_SUM_ERA_IDX_DESC',
  RewardsSumEraIdAsc = 'REWARDS_SUM_ERA_ID_ASC',
  RewardsSumEraIdDesc = 'REWARDS_SUM_ERA_ID_DESC',
  RewardsSumIdAsc = 'REWARDS_SUM_ID_ASC',
  RewardsSumIdDesc = 'REWARDS_SUM_ID_DESC',
  RewardsSumIndexerIdAsc = 'REWARDS_SUM_INDEXER_ID_ASC',
  RewardsSumIndexerIdDesc = 'REWARDS_SUM_INDEXER_ID_DESC',
  RewardsSumLastEventAsc = 'REWARDS_SUM_LAST_EVENT_ASC',
  RewardsSumLastEventDesc = 'REWARDS_SUM_LAST_EVENT_DESC',
  RewardsVariancePopulationAmountAsc = 'REWARDS_VARIANCE_POPULATION_AMOUNT_ASC',
  RewardsVariancePopulationAmountDesc = 'REWARDS_VARIANCE_POPULATION_AMOUNT_DESC',
  RewardsVariancePopulationBlockRangeAsc = 'REWARDS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  RewardsVariancePopulationBlockRangeDesc = 'REWARDS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  RewardsVariancePopulationCreatedBlockAsc = 'REWARDS_VARIANCE_POPULATION_CREATED_BLOCK_ASC',
  RewardsVariancePopulationCreatedBlockDesc = 'REWARDS_VARIANCE_POPULATION_CREATED_BLOCK_DESC',
  RewardsVariancePopulationEraIdxAsc = 'REWARDS_VARIANCE_POPULATION_ERA_IDX_ASC',
  RewardsVariancePopulationEraIdxDesc = 'REWARDS_VARIANCE_POPULATION_ERA_IDX_DESC',
  RewardsVariancePopulationEraIdAsc = 'REWARDS_VARIANCE_POPULATION_ERA_ID_ASC',
  RewardsVariancePopulationEraIdDesc = 'REWARDS_VARIANCE_POPULATION_ERA_ID_DESC',
  RewardsVariancePopulationIdAsc = 'REWARDS_VARIANCE_POPULATION_ID_ASC',
  RewardsVariancePopulationIdDesc = 'REWARDS_VARIANCE_POPULATION_ID_DESC',
  RewardsVariancePopulationIndexerIdAsc = 'REWARDS_VARIANCE_POPULATION_INDEXER_ID_ASC',
  RewardsVariancePopulationIndexerIdDesc = 'REWARDS_VARIANCE_POPULATION_INDEXER_ID_DESC',
  RewardsVariancePopulationLastEventAsc = 'REWARDS_VARIANCE_POPULATION_LAST_EVENT_ASC',
  RewardsVariancePopulationLastEventDesc = 'REWARDS_VARIANCE_POPULATION_LAST_EVENT_DESC',
  RewardsVarianceSampleAmountAsc = 'REWARDS_VARIANCE_SAMPLE_AMOUNT_ASC',
  RewardsVarianceSampleAmountDesc = 'REWARDS_VARIANCE_SAMPLE_AMOUNT_DESC',
  RewardsVarianceSampleBlockRangeAsc = 'REWARDS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  RewardsVarianceSampleBlockRangeDesc = 'REWARDS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  RewardsVarianceSampleCreatedBlockAsc = 'REWARDS_VARIANCE_SAMPLE_CREATED_BLOCK_ASC',
  RewardsVarianceSampleCreatedBlockDesc = 'REWARDS_VARIANCE_SAMPLE_CREATED_BLOCK_DESC',
  RewardsVarianceSampleEraIdxAsc = 'REWARDS_VARIANCE_SAMPLE_ERA_IDX_ASC',
  RewardsVarianceSampleEraIdxDesc = 'REWARDS_VARIANCE_SAMPLE_ERA_IDX_DESC',
  RewardsVarianceSampleEraIdAsc = 'REWARDS_VARIANCE_SAMPLE_ERA_ID_ASC',
  RewardsVarianceSampleEraIdDesc = 'REWARDS_VARIANCE_SAMPLE_ERA_ID_DESC',
  RewardsVarianceSampleIdAsc = 'REWARDS_VARIANCE_SAMPLE_ID_ASC',
  RewardsVarianceSampleIdDesc = 'REWARDS_VARIANCE_SAMPLE_ID_DESC',
  RewardsVarianceSampleIndexerIdAsc = 'REWARDS_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  RewardsVarianceSampleIndexerIdDesc = 'REWARDS_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  RewardsVarianceSampleLastEventAsc = 'REWARDS_VARIANCE_SAMPLE_LAST_EVENT_ASC',
  RewardsVarianceSampleLastEventDesc = 'REWARDS_VARIANCE_SAMPLE_LAST_EVENT_DESC',
  SelfStakeAsc = 'SELF_STAKE_ASC',
  SelfStakeDesc = 'SELF_STAKE_DESC',
  TotalStakeAsc = 'TOTAL_STAKE_ASC',
  TotalStakeDesc = 'TOTAL_STAKE_DESC'
}

/** A filter to be used against Int fields. All fields are combined with a logical ‘and.’ */
export type IntFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: InputMaybe<Scalars['Int']['input']>;
  /** Equal to the specified value. */
  equalTo?: InputMaybe<Scalars['Int']['input']>;
  /** Greater than the specified value. */
  greaterThan?: InputMaybe<Scalars['Int']['input']>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: InputMaybe<Scalars['Int']['input']>;
  /** Included in the specified list. */
  in?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: InputMaybe<Scalars['Boolean']['input']>;
  /** Less than the specified value. */
  lessThan?: InputMaybe<Scalars['Int']['input']>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: InputMaybe<Scalars['Int']['input']>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: InputMaybe<Scalars['Int']['input']>;
  /** Not equal to the specified value. */
  notEqualTo?: InputMaybe<Scalars['Int']['input']>;
  /** Not included in the specified list. */
  notIn?: InputMaybe<Array<Scalars['Int']['input']>>;
};

/** A filter to be used against JSON fields. All fields are combined with a logical ‘and.’ */
export type JsonFilter = {
  /** Contained by the specified JSON. */
  containedBy?: InputMaybe<Scalars['JSON']['input']>;
  /** Contains the specified JSON. */
  contains?: InputMaybe<Scalars['JSON']['input']>;
  /** Contains all of the specified keys. */
  containsAllKeys?: InputMaybe<Array<Scalars['String']['input']>>;
  /** Contains any of the specified keys. */
  containsAnyKeys?: InputMaybe<Array<Scalars['String']['input']>>;
  /** Contains the specified key. */
  containsKey?: InputMaybe<Scalars['String']['input']>;
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: InputMaybe<Scalars['JSON']['input']>;
  /** Equal to the specified value. */
  equalTo?: InputMaybe<Scalars['JSON']['input']>;
  /** Greater than the specified value. */
  greaterThan?: InputMaybe<Scalars['JSON']['input']>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: InputMaybe<Scalars['JSON']['input']>;
  /** Included in the specified list. */
  in?: InputMaybe<Array<Scalars['JSON']['input']>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: InputMaybe<Scalars['Boolean']['input']>;
  /** Less than the specified value. */
  lessThan?: InputMaybe<Scalars['JSON']['input']>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: InputMaybe<Scalars['JSON']['input']>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: InputMaybe<Scalars['JSON']['input']>;
  /** Not equal to the specified value. */
  notEqualTo?: InputMaybe<Scalars['JSON']['input']>;
  /** Not included in the specified list. */
  notIn?: InputMaybe<Array<Scalars['JSON']['input']>>;
};

/** An object with a globally unique `ID`. */
export type Node = {
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
};

/** Options for ordering null values in a specific direction. */
export enum NullOrder {
  /** Order null values first. */
  NullsFirst = 'NULLS_FIRST',
  /** Order null values last. */
  NullsLast = 'NULLS_LAST'
}

export type Offer = Node & {
  __typename?: 'Offer';
  accepted: Scalars['Int']['output'];
  /** Reads and enables pagination through a set of `AcceptedOffer`. */
  acceptedOffers: AcceptedOffersConnection;
  consumer: Scalars['String']['output'];
  createdBlock?: Maybe<Scalars['Int']['output']>;
  /** Reads a single `Deployment` that is related to this `Offer`. */
  deployment?: Maybe<Deployment>;
  deploymentId: Scalars['String']['output'];
  deposit: Scalars['BigFloat']['output'];
  expireDate: Scalars['Datetime']['output'];
  id: Scalars['String']['output'];
  /** Reads and enables pagination through a set of `Indexer`. */
  indexersByAcceptedOfferOfferIdAndIndexerId: OfferIndexersByAcceptedOfferOfferIdAndIndexerIdManyToManyConnection;
  lastEvent?: Maybe<Scalars['String']['output']>;
  limit: Scalars['Int']['output'];
  minimumAcceptHeight: Scalars['BigFloat']['output'];
  minimumStakingAmount: Scalars['BigFloat']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  /** Reads a single `PlanTemplate` that is related to this `Offer`. */
  planTemplate?: Maybe<PlanTemplate>;
  planTemplateId: Scalars['String']['output'];
  reachLimit: Scalars['Boolean']['output'];
  /** Reads and enables pagination through a set of `ServiceAgreement`. */
  serviceAgreementsByAcceptedOfferOfferIdAndServiceAgreementId: OfferServiceAgreementsByAcceptedOfferOfferIdAndServiceAgreementIdManyToManyConnection;
  withdrawPenalty?: Maybe<Scalars['BigFloat']['output']>;
  withdrawn: Scalars['Boolean']['output'];
};


export type OfferAcceptedOffersArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Accepted_Offers_Distinct_Enum>>>;
  filter?: InputMaybe<AcceptedOfferFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<AcceptedOffersOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type OfferIndexersByAcceptedOfferOfferIdAndIndexerIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexers_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexersOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type OfferServiceAgreementsByAcceptedOfferOfferIdAndServiceAgreementIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Service_Agreements_Distinct_Enum>>>;
  filter?: InputMaybe<ServiceAgreementFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ServiceAgreementsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

export type OfferAggregates = {
  __typename?: 'OfferAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  average?: Maybe<OfferAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  distinctCount?: Maybe<OfferDistinctCountAggregates>;
  keys?: Maybe<Array<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  max?: Maybe<OfferMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  min?: Maybe<OfferMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevPopulation?: Maybe<OfferStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevSample?: Maybe<OfferStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  sum?: Maybe<OfferSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  variancePopulation?: Maybe<OfferVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  varianceSample?: Maybe<OfferVarianceSampleAggregates>;
};

/** A filter to be used against aggregates of `Offer` object types. */
export type OfferAggregatesFilter = {
  /** Mean average aggregate over matching `Offer` objects. */
  average?: InputMaybe<OfferAverageAggregateFilter>;
  /** Distinct count aggregate over matching `Offer` objects. */
  distinctCount?: InputMaybe<OfferDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `Offer` object to be included within the aggregate. */
  filter?: InputMaybe<OfferFilter>;
  /** Maximum aggregate over matching `Offer` objects. */
  max?: InputMaybe<OfferMaxAggregateFilter>;
  /** Minimum aggregate over matching `Offer` objects. */
  min?: InputMaybe<OfferMinAggregateFilter>;
  /** Population standard deviation aggregate over matching `Offer` objects. */
  stddevPopulation?: InputMaybe<OfferStddevPopulationAggregateFilter>;
  /** Sample standard deviation aggregate over matching `Offer` objects. */
  stddevSample?: InputMaybe<OfferStddevSampleAggregateFilter>;
  /** Sum aggregate over matching `Offer` objects. */
  sum?: InputMaybe<OfferSumAggregateFilter>;
  /** Population variance aggregate over matching `Offer` objects. */
  variancePopulation?: InputMaybe<OfferVariancePopulationAggregateFilter>;
  /** Sample variance aggregate over matching `Offer` objects. */
  varianceSample?: InputMaybe<OfferVarianceSampleAggregateFilter>;
};

export type OfferAverageAggregateFilter = {
  accepted?: InputMaybe<BigFloatFilter>;
  createdBlock?: InputMaybe<BigFloatFilter>;
  deposit?: InputMaybe<BigFloatFilter>;
  limit?: InputMaybe<BigFloatFilter>;
  minimumAcceptHeight?: InputMaybe<BigFloatFilter>;
  minimumStakingAmount?: InputMaybe<BigFloatFilter>;
  withdrawPenalty?: InputMaybe<BigFloatFilter>;
};

export type OfferAverageAggregates = {
  __typename?: 'OfferAverageAggregates';
  /** Mean average of accepted across the matching connection */
  accepted?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of deposit across the matching connection */
  deposit?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of limit across the matching connection */
  limit?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of minimumAcceptHeight across the matching connection */
  minimumAcceptHeight?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of minimumStakingAmount across the matching connection */
  minimumStakingAmount?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of withdrawPenalty across the matching connection */
  withdrawPenalty?: Maybe<Scalars['BigFloat']['output']>;
};

export type OfferDistinctCountAggregateFilter = {
  _blockRange?: InputMaybe<BigIntFilter>;
  _id?: InputMaybe<BigIntFilter>;
  accepted?: InputMaybe<BigIntFilter>;
  consumer?: InputMaybe<BigIntFilter>;
  createdBlock?: InputMaybe<BigIntFilter>;
  deploymentId?: InputMaybe<BigIntFilter>;
  deposit?: InputMaybe<BigIntFilter>;
  expireDate?: InputMaybe<BigIntFilter>;
  id?: InputMaybe<BigIntFilter>;
  lastEvent?: InputMaybe<BigIntFilter>;
  limit?: InputMaybe<BigIntFilter>;
  minimumAcceptHeight?: InputMaybe<BigIntFilter>;
  minimumStakingAmount?: InputMaybe<BigIntFilter>;
  planTemplateId?: InputMaybe<BigIntFilter>;
  reachLimit?: InputMaybe<BigIntFilter>;
  withdrawPenalty?: InputMaybe<BigIntFilter>;
  withdrawn?: InputMaybe<BigIntFilter>;
};

export type OfferDistinctCountAggregates = {
  __typename?: 'OfferDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  _blockRange?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  _id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of accepted across the matching connection */
  accepted?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of consumer across the matching connection */
  consumer?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of deploymentId across the matching connection */
  deploymentId?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of deposit across the matching connection */
  deposit?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of expireDate across the matching connection */
  expireDate?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of lastEvent across the matching connection */
  lastEvent?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of limit across the matching connection */
  limit?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of minimumAcceptHeight across the matching connection */
  minimumAcceptHeight?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of minimumStakingAmount across the matching connection */
  minimumStakingAmount?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of planTemplateId across the matching connection */
  planTemplateId?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of reachLimit across the matching connection */
  reachLimit?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of withdrawPenalty across the matching connection */
  withdrawPenalty?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of withdrawn across the matching connection */
  withdrawn?: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `Offer` object types. All fields are combined with a logical ‘and.’ */
export type OfferFilter = {
  /** Filter by the object’s `accepted` field. */
  accepted?: InputMaybe<IntFilter>;
  /** Filter by the object’s `acceptedOffers` relation. */
  acceptedOffers?: InputMaybe<OfferToManyAcceptedOfferFilter>;
  /** Some related `acceptedOffers` exist. */
  acceptedOffersExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<OfferFilter>>;
  /** Filter by the object’s `consumer` field. */
  consumer?: InputMaybe<StringFilter>;
  /** Filter by the object’s `createdBlock` field. */
  createdBlock?: InputMaybe<IntFilter>;
  /** Filter by the object’s `deployment` relation. */
  deployment?: InputMaybe<DeploymentFilter>;
  /** Filter by the object’s `deploymentId` field. */
  deploymentId?: InputMaybe<StringFilter>;
  /** Filter by the object’s `deposit` field. */
  deposit?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `expireDate` field. */
  expireDate?: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<StringFilter>;
  /** Filter by the object’s `lastEvent` field. */
  lastEvent?: InputMaybe<StringFilter>;
  /** Filter by the object’s `limit` field. */
  limit?: InputMaybe<IntFilter>;
  /** Filter by the object’s `minimumAcceptHeight` field. */
  minimumAcceptHeight?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `minimumStakingAmount` field. */
  minimumStakingAmount?: InputMaybe<BigFloatFilter>;
  /** Negates the expression. */
  not?: InputMaybe<OfferFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<OfferFilter>>;
  /** Filter by the object’s `planTemplate` relation. */
  planTemplate?: InputMaybe<PlanTemplateFilter>;
  /** Filter by the object’s `planTemplateId` field. */
  planTemplateId?: InputMaybe<StringFilter>;
  /** Filter by the object’s `reachLimit` field. */
  reachLimit?: InputMaybe<BooleanFilter>;
  /** Filter by the object’s `withdrawPenalty` field. */
  withdrawPenalty?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `withdrawn` field. */
  withdrawn?: InputMaybe<BooleanFilter>;
};

/** A connection to a list of `Indexer` values, with data from `AcceptedOffer`. */
export type OfferIndexersByAcceptedOfferOfferIdAndIndexerIdManyToManyConnection = {
  __typename?: 'OfferIndexersByAcceptedOfferOfferIdAndIndexerIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<IndexerAggregates>;
  /** A list of edges which contains the `Indexer`, info from the `AcceptedOffer`, and the cursor to aid in pagination. */
  edges: Array<OfferIndexersByAcceptedOfferOfferIdAndIndexerIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<IndexerAggregates>>;
  /** A list of `Indexer` objects. */
  nodes: Array<Maybe<Indexer>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Indexer` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Indexer` values, with data from `AcceptedOffer`. */
export type OfferIndexersByAcceptedOfferOfferIdAndIndexerIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: Array<IndexersGroupBy>;
  having?: InputMaybe<IndexersHavingInput>;
};

/** A `Indexer` edge in the connection, with data from `AcceptedOffer`. */
export type OfferIndexersByAcceptedOfferOfferIdAndIndexerIdManyToManyEdge = {
  __typename?: 'OfferIndexersByAcceptedOfferOfferIdAndIndexerIdManyToManyEdge';
  /** Reads and enables pagination through a set of `AcceptedOffer`. */
  acceptedOffers: AcceptedOffersConnection;
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `Indexer` at the end of the edge. */
  node?: Maybe<Indexer>;
};


/** A `Indexer` edge in the connection, with data from `AcceptedOffer`. */
export type OfferIndexersByAcceptedOfferOfferIdAndIndexerIdManyToManyEdgeAcceptedOffersArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Accepted_Offers_Distinct_Enum>>>;
  filter?: InputMaybe<AcceptedOfferFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<AcceptedOffersOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

export type OfferMaxAggregateFilter = {
  accepted?: InputMaybe<IntFilter>;
  createdBlock?: InputMaybe<IntFilter>;
  deposit?: InputMaybe<BigFloatFilter>;
  limit?: InputMaybe<IntFilter>;
  minimumAcceptHeight?: InputMaybe<BigFloatFilter>;
  minimumStakingAmount?: InputMaybe<BigFloatFilter>;
  withdrawPenalty?: InputMaybe<BigFloatFilter>;
};

export type OfferMaxAggregates = {
  __typename?: 'OfferMaxAggregates';
  /** Maximum of accepted across the matching connection */
  accepted?: Maybe<Scalars['Int']['output']>;
  /** Maximum of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['Int']['output']>;
  /** Maximum of deposit across the matching connection */
  deposit?: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of limit across the matching connection */
  limit?: Maybe<Scalars['Int']['output']>;
  /** Maximum of minimumAcceptHeight across the matching connection */
  minimumAcceptHeight?: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of minimumStakingAmount across the matching connection */
  minimumStakingAmount?: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of withdrawPenalty across the matching connection */
  withdrawPenalty?: Maybe<Scalars['BigFloat']['output']>;
};

export type OfferMinAggregateFilter = {
  accepted?: InputMaybe<IntFilter>;
  createdBlock?: InputMaybe<IntFilter>;
  deposit?: InputMaybe<BigFloatFilter>;
  limit?: InputMaybe<IntFilter>;
  minimumAcceptHeight?: InputMaybe<BigFloatFilter>;
  minimumStakingAmount?: InputMaybe<BigFloatFilter>;
  withdrawPenalty?: InputMaybe<BigFloatFilter>;
};

export type OfferMinAggregates = {
  __typename?: 'OfferMinAggregates';
  /** Minimum of accepted across the matching connection */
  accepted?: Maybe<Scalars['Int']['output']>;
  /** Minimum of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['Int']['output']>;
  /** Minimum of deposit across the matching connection */
  deposit?: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of limit across the matching connection */
  limit?: Maybe<Scalars['Int']['output']>;
  /** Minimum of minimumAcceptHeight across the matching connection */
  minimumAcceptHeight?: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of minimumStakingAmount across the matching connection */
  minimumStakingAmount?: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of withdrawPenalty across the matching connection */
  withdrawPenalty?: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `ServiceAgreement` values, with data from `AcceptedOffer`. */
export type OfferServiceAgreementsByAcceptedOfferOfferIdAndServiceAgreementIdManyToManyConnection = {
  __typename?: 'OfferServiceAgreementsByAcceptedOfferOfferIdAndServiceAgreementIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<ServiceAgreementAggregates>;
  /** A list of edges which contains the `ServiceAgreement`, info from the `AcceptedOffer`, and the cursor to aid in pagination. */
  edges: Array<OfferServiceAgreementsByAcceptedOfferOfferIdAndServiceAgreementIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<ServiceAgreementAggregates>>;
  /** A list of `ServiceAgreement` objects. */
  nodes: Array<Maybe<ServiceAgreement>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `ServiceAgreement` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `ServiceAgreement` values, with data from `AcceptedOffer`. */
export type OfferServiceAgreementsByAcceptedOfferOfferIdAndServiceAgreementIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: Array<ServiceAgreementsGroupBy>;
  having?: InputMaybe<ServiceAgreementsHavingInput>;
};

/** A `ServiceAgreement` edge in the connection, with data from `AcceptedOffer`. */
export type OfferServiceAgreementsByAcceptedOfferOfferIdAndServiceAgreementIdManyToManyEdge = {
  __typename?: 'OfferServiceAgreementsByAcceptedOfferOfferIdAndServiceAgreementIdManyToManyEdge';
  /** Reads and enables pagination through a set of `AcceptedOffer`. */
  acceptedOffers: AcceptedOffersConnection;
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `ServiceAgreement` at the end of the edge. */
  node?: Maybe<ServiceAgreement>;
};


/** A `ServiceAgreement` edge in the connection, with data from `AcceptedOffer`. */
export type OfferServiceAgreementsByAcceptedOfferOfferIdAndServiceAgreementIdManyToManyEdgeAcceptedOffersArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Accepted_Offers_Distinct_Enum>>>;
  filter?: InputMaybe<AcceptedOfferFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<AcceptedOffersOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

export type OfferStddevPopulationAggregateFilter = {
  accepted?: InputMaybe<BigFloatFilter>;
  createdBlock?: InputMaybe<BigFloatFilter>;
  deposit?: InputMaybe<BigFloatFilter>;
  limit?: InputMaybe<BigFloatFilter>;
  minimumAcceptHeight?: InputMaybe<BigFloatFilter>;
  minimumStakingAmount?: InputMaybe<BigFloatFilter>;
  withdrawPenalty?: InputMaybe<BigFloatFilter>;
};

export type OfferStddevPopulationAggregates = {
  __typename?: 'OfferStddevPopulationAggregates';
  /** Population standard deviation of accepted across the matching connection */
  accepted?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of deposit across the matching connection */
  deposit?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of limit across the matching connection */
  limit?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of minimumAcceptHeight across the matching connection */
  minimumAcceptHeight?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of minimumStakingAmount across the matching connection */
  minimumStakingAmount?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of withdrawPenalty across the matching connection */
  withdrawPenalty?: Maybe<Scalars['BigFloat']['output']>;
};

export type OfferStddevSampleAggregateFilter = {
  accepted?: InputMaybe<BigFloatFilter>;
  createdBlock?: InputMaybe<BigFloatFilter>;
  deposit?: InputMaybe<BigFloatFilter>;
  limit?: InputMaybe<BigFloatFilter>;
  minimumAcceptHeight?: InputMaybe<BigFloatFilter>;
  minimumStakingAmount?: InputMaybe<BigFloatFilter>;
  withdrawPenalty?: InputMaybe<BigFloatFilter>;
};

export type OfferStddevSampleAggregates = {
  __typename?: 'OfferStddevSampleAggregates';
  /** Sample standard deviation of accepted across the matching connection */
  accepted?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of deposit across the matching connection */
  deposit?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of limit across the matching connection */
  limit?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of minimumAcceptHeight across the matching connection */
  minimumAcceptHeight?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of minimumStakingAmount across the matching connection */
  minimumStakingAmount?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of withdrawPenalty across the matching connection */
  withdrawPenalty?: Maybe<Scalars['BigFloat']['output']>;
};

export type OfferSumAggregateFilter = {
  accepted?: InputMaybe<BigIntFilter>;
  createdBlock?: InputMaybe<BigIntFilter>;
  deposit?: InputMaybe<BigFloatFilter>;
  limit?: InputMaybe<BigIntFilter>;
  minimumAcceptHeight?: InputMaybe<BigFloatFilter>;
  minimumStakingAmount?: InputMaybe<BigFloatFilter>;
  withdrawPenalty?: InputMaybe<BigFloatFilter>;
};

export type OfferSumAggregates = {
  __typename?: 'OfferSumAggregates';
  /** Sum of accepted across the matching connection */
  accepted: Scalars['BigInt']['output'];
  /** Sum of createdBlock across the matching connection */
  createdBlock: Scalars['BigInt']['output'];
  /** Sum of deposit across the matching connection */
  deposit: Scalars['BigFloat']['output'];
  /** Sum of limit across the matching connection */
  limit: Scalars['BigInt']['output'];
  /** Sum of minimumAcceptHeight across the matching connection */
  minimumAcceptHeight: Scalars['BigFloat']['output'];
  /** Sum of minimumStakingAmount across the matching connection */
  minimumStakingAmount: Scalars['BigFloat']['output'];
  /** Sum of withdrawPenalty across the matching connection */
  withdrawPenalty: Scalars['BigFloat']['output'];
};

/** A filter to be used against many `AcceptedOffer` object types. All fields are combined with a logical ‘and.’ */
export type OfferToManyAcceptedOfferFilter = {
  /** Aggregates across related `AcceptedOffer` match the filter criteria. */
  aggregates?: InputMaybe<AcceptedOfferAggregatesFilter>;
  /** Every related `AcceptedOffer` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<AcceptedOfferFilter>;
  /** No related `AcceptedOffer` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<AcceptedOfferFilter>;
  /** Some related `AcceptedOffer` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<AcceptedOfferFilter>;
};

export type OfferVariancePopulationAggregateFilter = {
  accepted?: InputMaybe<BigFloatFilter>;
  createdBlock?: InputMaybe<BigFloatFilter>;
  deposit?: InputMaybe<BigFloatFilter>;
  limit?: InputMaybe<BigFloatFilter>;
  minimumAcceptHeight?: InputMaybe<BigFloatFilter>;
  minimumStakingAmount?: InputMaybe<BigFloatFilter>;
  withdrawPenalty?: InputMaybe<BigFloatFilter>;
};

export type OfferVariancePopulationAggregates = {
  __typename?: 'OfferVariancePopulationAggregates';
  /** Population variance of accepted across the matching connection */
  accepted?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of deposit across the matching connection */
  deposit?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of limit across the matching connection */
  limit?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of minimumAcceptHeight across the matching connection */
  minimumAcceptHeight?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of minimumStakingAmount across the matching connection */
  minimumStakingAmount?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of withdrawPenalty across the matching connection */
  withdrawPenalty?: Maybe<Scalars['BigFloat']['output']>;
};

export type OfferVarianceSampleAggregateFilter = {
  accepted?: InputMaybe<BigFloatFilter>;
  createdBlock?: InputMaybe<BigFloatFilter>;
  deposit?: InputMaybe<BigFloatFilter>;
  limit?: InputMaybe<BigFloatFilter>;
  minimumAcceptHeight?: InputMaybe<BigFloatFilter>;
  minimumStakingAmount?: InputMaybe<BigFloatFilter>;
  withdrawPenalty?: InputMaybe<BigFloatFilter>;
};

export type OfferVarianceSampleAggregates = {
  __typename?: 'OfferVarianceSampleAggregates';
  /** Sample variance of accepted across the matching connection */
  accepted?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of deposit across the matching connection */
  deposit?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of limit across the matching connection */
  limit?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of minimumAcceptHeight across the matching connection */
  minimumAcceptHeight?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of minimumStakingAmount across the matching connection */
  minimumStakingAmount?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of withdrawPenalty across the matching connection */
  withdrawPenalty?: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `Offer` values. */
export type OffersConnection = {
  __typename?: 'OffersConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<OfferAggregates>;
  /** A list of edges which contains the `Offer` and cursor to aid in pagination. */
  edges: Array<OffersEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<OfferAggregates>>;
  /** A list of `Offer` objects. */
  nodes: Array<Maybe<Offer>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Offer` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Offer` values. */
export type OffersConnectionGroupedAggregatesArgs = {
  groupBy: Array<OffersGroupBy>;
  having?: InputMaybe<OffersHavingInput>;
};

/** A `Offer` edge in the connection. */
export type OffersEdge = {
  __typename?: 'OffersEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `Offer` at the end of the edge. */
  node?: Maybe<Offer>;
};

/** Grouping methods for `Offer` for usage during aggregation. */
export enum OffersGroupBy {
  Accepted = 'ACCEPTED',
  Consumer = 'CONSUMER',
  CreatedBlock = 'CREATED_BLOCK',
  DeploymentId = 'DEPLOYMENT_ID',
  Deposit = 'DEPOSIT',
  ExpireDate = 'EXPIRE_DATE',
  ExpireDateTruncatedToDay = 'EXPIRE_DATE_TRUNCATED_TO_DAY',
  ExpireDateTruncatedToHour = 'EXPIRE_DATE_TRUNCATED_TO_HOUR',
  Id = 'ID',
  LastEvent = 'LAST_EVENT',
  Limit = 'LIMIT',
  MinimumAcceptHeight = 'MINIMUM_ACCEPT_HEIGHT',
  MinimumStakingAmount = 'MINIMUM_STAKING_AMOUNT',
  PlanTemplateId = 'PLAN_TEMPLATE_ID',
  ReachLimit = 'REACH_LIMIT',
  Withdrawn = 'WITHDRAWN',
  WithdrawPenalty = 'WITHDRAW_PENALTY'
}

export type OffersHavingAverageInput = {
  accepted?: InputMaybe<HavingIntFilter>;
  createdBlock?: InputMaybe<HavingIntFilter>;
  deposit?: InputMaybe<HavingBigfloatFilter>;
  expireDate?: InputMaybe<HavingDatetimeFilter>;
  limit?: InputMaybe<HavingIntFilter>;
  minimumAcceptHeight?: InputMaybe<HavingBigfloatFilter>;
  minimumStakingAmount?: InputMaybe<HavingBigfloatFilter>;
  withdrawPenalty?: InputMaybe<HavingBigfloatFilter>;
};

export type OffersHavingDistinctCountInput = {
  accepted?: InputMaybe<HavingIntFilter>;
  createdBlock?: InputMaybe<HavingIntFilter>;
  deposit?: InputMaybe<HavingBigfloatFilter>;
  expireDate?: InputMaybe<HavingDatetimeFilter>;
  limit?: InputMaybe<HavingIntFilter>;
  minimumAcceptHeight?: InputMaybe<HavingBigfloatFilter>;
  minimumStakingAmount?: InputMaybe<HavingBigfloatFilter>;
  withdrawPenalty?: InputMaybe<HavingBigfloatFilter>;
};

/** Conditions for `Offer` aggregates. */
export type OffersHavingInput = {
  AND?: InputMaybe<Array<OffersHavingInput>>;
  OR?: InputMaybe<Array<OffersHavingInput>>;
  average?: InputMaybe<OffersHavingAverageInput>;
  distinctCount?: InputMaybe<OffersHavingDistinctCountInput>;
  max?: InputMaybe<OffersHavingMaxInput>;
  min?: InputMaybe<OffersHavingMinInput>;
  stddevPopulation?: InputMaybe<OffersHavingStddevPopulationInput>;
  stddevSample?: InputMaybe<OffersHavingStddevSampleInput>;
  sum?: InputMaybe<OffersHavingSumInput>;
  variancePopulation?: InputMaybe<OffersHavingVariancePopulationInput>;
  varianceSample?: InputMaybe<OffersHavingVarianceSampleInput>;
};

export type OffersHavingMaxInput = {
  accepted?: InputMaybe<HavingIntFilter>;
  createdBlock?: InputMaybe<HavingIntFilter>;
  deposit?: InputMaybe<HavingBigfloatFilter>;
  expireDate?: InputMaybe<HavingDatetimeFilter>;
  limit?: InputMaybe<HavingIntFilter>;
  minimumAcceptHeight?: InputMaybe<HavingBigfloatFilter>;
  minimumStakingAmount?: InputMaybe<HavingBigfloatFilter>;
  withdrawPenalty?: InputMaybe<HavingBigfloatFilter>;
};

export type OffersHavingMinInput = {
  accepted?: InputMaybe<HavingIntFilter>;
  createdBlock?: InputMaybe<HavingIntFilter>;
  deposit?: InputMaybe<HavingBigfloatFilter>;
  expireDate?: InputMaybe<HavingDatetimeFilter>;
  limit?: InputMaybe<HavingIntFilter>;
  minimumAcceptHeight?: InputMaybe<HavingBigfloatFilter>;
  minimumStakingAmount?: InputMaybe<HavingBigfloatFilter>;
  withdrawPenalty?: InputMaybe<HavingBigfloatFilter>;
};

export type OffersHavingStddevPopulationInput = {
  accepted?: InputMaybe<HavingIntFilter>;
  createdBlock?: InputMaybe<HavingIntFilter>;
  deposit?: InputMaybe<HavingBigfloatFilter>;
  expireDate?: InputMaybe<HavingDatetimeFilter>;
  limit?: InputMaybe<HavingIntFilter>;
  minimumAcceptHeight?: InputMaybe<HavingBigfloatFilter>;
  minimumStakingAmount?: InputMaybe<HavingBigfloatFilter>;
  withdrawPenalty?: InputMaybe<HavingBigfloatFilter>;
};

export type OffersHavingStddevSampleInput = {
  accepted?: InputMaybe<HavingIntFilter>;
  createdBlock?: InputMaybe<HavingIntFilter>;
  deposit?: InputMaybe<HavingBigfloatFilter>;
  expireDate?: InputMaybe<HavingDatetimeFilter>;
  limit?: InputMaybe<HavingIntFilter>;
  minimumAcceptHeight?: InputMaybe<HavingBigfloatFilter>;
  minimumStakingAmount?: InputMaybe<HavingBigfloatFilter>;
  withdrawPenalty?: InputMaybe<HavingBigfloatFilter>;
};

export type OffersHavingSumInput = {
  accepted?: InputMaybe<HavingIntFilter>;
  createdBlock?: InputMaybe<HavingIntFilter>;
  deposit?: InputMaybe<HavingBigfloatFilter>;
  expireDate?: InputMaybe<HavingDatetimeFilter>;
  limit?: InputMaybe<HavingIntFilter>;
  minimumAcceptHeight?: InputMaybe<HavingBigfloatFilter>;
  minimumStakingAmount?: InputMaybe<HavingBigfloatFilter>;
  withdrawPenalty?: InputMaybe<HavingBigfloatFilter>;
};

export type OffersHavingVariancePopulationInput = {
  accepted?: InputMaybe<HavingIntFilter>;
  createdBlock?: InputMaybe<HavingIntFilter>;
  deposit?: InputMaybe<HavingBigfloatFilter>;
  expireDate?: InputMaybe<HavingDatetimeFilter>;
  limit?: InputMaybe<HavingIntFilter>;
  minimumAcceptHeight?: InputMaybe<HavingBigfloatFilter>;
  minimumStakingAmount?: InputMaybe<HavingBigfloatFilter>;
  withdrawPenalty?: InputMaybe<HavingBigfloatFilter>;
};

export type OffersHavingVarianceSampleInput = {
  accepted?: InputMaybe<HavingIntFilter>;
  createdBlock?: InputMaybe<HavingIntFilter>;
  deposit?: InputMaybe<HavingBigfloatFilter>;
  expireDate?: InputMaybe<HavingDatetimeFilter>;
  limit?: InputMaybe<HavingIntFilter>;
  minimumAcceptHeight?: InputMaybe<HavingBigfloatFilter>;
  minimumStakingAmount?: InputMaybe<HavingBigfloatFilter>;
  withdrawPenalty?: InputMaybe<HavingBigfloatFilter>;
};

/** Methods to use when ordering `Offer`. */
export enum OffersOrderBy {
  AcceptedAsc = 'ACCEPTED_ASC',
  AcceptedDesc = 'ACCEPTED_DESC',
  AcceptedOffersAverageBlockRangeAsc = 'ACCEPTED_OFFERS_AVERAGE_BLOCK_RANGE_ASC',
  AcceptedOffersAverageBlockRangeDesc = 'ACCEPTED_OFFERS_AVERAGE_BLOCK_RANGE_DESC',
  AcceptedOffersAverageCreatedBlockAsc = 'ACCEPTED_OFFERS_AVERAGE_CREATED_BLOCK_ASC',
  AcceptedOffersAverageCreatedBlockDesc = 'ACCEPTED_OFFERS_AVERAGE_CREATED_BLOCK_DESC',
  AcceptedOffersAverageIdAsc = 'ACCEPTED_OFFERS_AVERAGE_ID_ASC',
  AcceptedOffersAverageIdDesc = 'ACCEPTED_OFFERS_AVERAGE_ID_DESC',
  AcceptedOffersAverageIndexerIdAsc = 'ACCEPTED_OFFERS_AVERAGE_INDEXER_ID_ASC',
  AcceptedOffersAverageIndexerIdDesc = 'ACCEPTED_OFFERS_AVERAGE_INDEXER_ID_DESC',
  AcceptedOffersAverageLastEventAsc = 'ACCEPTED_OFFERS_AVERAGE_LAST_EVENT_ASC',
  AcceptedOffersAverageLastEventDesc = 'ACCEPTED_OFFERS_AVERAGE_LAST_EVENT_DESC',
  AcceptedOffersAverageOfferIdAsc = 'ACCEPTED_OFFERS_AVERAGE_OFFER_ID_ASC',
  AcceptedOffersAverageOfferIdDesc = 'ACCEPTED_OFFERS_AVERAGE_OFFER_ID_DESC',
  AcceptedOffersAverageServiceAgreementIdAsc = 'ACCEPTED_OFFERS_AVERAGE_SERVICE_AGREEMENT_ID_ASC',
  AcceptedOffersAverageServiceAgreementIdDesc = 'ACCEPTED_OFFERS_AVERAGE_SERVICE_AGREEMENT_ID_DESC',
  AcceptedOffersByOfferIdCountAsc = 'ACCEPTED_OFFERS_BY_OFFER_ID__COUNT_ASC',
  AcceptedOffersByOfferIdCountDesc = 'ACCEPTED_OFFERS_BY_OFFER_ID__COUNT_DESC',
  AcceptedOffersCountAsc = 'ACCEPTED_OFFERS_COUNT_ASC',
  AcceptedOffersCountDesc = 'ACCEPTED_OFFERS_COUNT_DESC',
  AcceptedOffersDistinctCountBlockRangeAsc = 'ACCEPTED_OFFERS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  AcceptedOffersDistinctCountBlockRangeDesc = 'ACCEPTED_OFFERS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  AcceptedOffersDistinctCountCreatedBlockAsc = 'ACCEPTED_OFFERS_DISTINCT_COUNT_CREATED_BLOCK_ASC',
  AcceptedOffersDistinctCountCreatedBlockDesc = 'ACCEPTED_OFFERS_DISTINCT_COUNT_CREATED_BLOCK_DESC',
  AcceptedOffersDistinctCountIdAsc = 'ACCEPTED_OFFERS_DISTINCT_COUNT_ID_ASC',
  AcceptedOffersDistinctCountIdDesc = 'ACCEPTED_OFFERS_DISTINCT_COUNT_ID_DESC',
  AcceptedOffersDistinctCountIndexerIdAsc = 'ACCEPTED_OFFERS_DISTINCT_COUNT_INDEXER_ID_ASC',
  AcceptedOffersDistinctCountIndexerIdDesc = 'ACCEPTED_OFFERS_DISTINCT_COUNT_INDEXER_ID_DESC',
  AcceptedOffersDistinctCountLastEventAsc = 'ACCEPTED_OFFERS_DISTINCT_COUNT_LAST_EVENT_ASC',
  AcceptedOffersDistinctCountLastEventDesc = 'ACCEPTED_OFFERS_DISTINCT_COUNT_LAST_EVENT_DESC',
  AcceptedOffersDistinctCountOfferIdAsc = 'ACCEPTED_OFFERS_DISTINCT_COUNT_OFFER_ID_ASC',
  AcceptedOffersDistinctCountOfferIdDesc = 'ACCEPTED_OFFERS_DISTINCT_COUNT_OFFER_ID_DESC',
  AcceptedOffersDistinctCountServiceAgreementIdAsc = 'ACCEPTED_OFFERS_DISTINCT_COUNT_SERVICE_AGREEMENT_ID_ASC',
  AcceptedOffersDistinctCountServiceAgreementIdDesc = 'ACCEPTED_OFFERS_DISTINCT_COUNT_SERVICE_AGREEMENT_ID_DESC',
  AcceptedOffersMaxBlockRangeAsc = 'ACCEPTED_OFFERS_MAX_BLOCK_RANGE_ASC',
  AcceptedOffersMaxBlockRangeDesc = 'ACCEPTED_OFFERS_MAX_BLOCK_RANGE_DESC',
  AcceptedOffersMaxCreatedBlockAsc = 'ACCEPTED_OFFERS_MAX_CREATED_BLOCK_ASC',
  AcceptedOffersMaxCreatedBlockDesc = 'ACCEPTED_OFFERS_MAX_CREATED_BLOCK_DESC',
  AcceptedOffersMaxIdAsc = 'ACCEPTED_OFFERS_MAX_ID_ASC',
  AcceptedOffersMaxIdDesc = 'ACCEPTED_OFFERS_MAX_ID_DESC',
  AcceptedOffersMaxIndexerIdAsc = 'ACCEPTED_OFFERS_MAX_INDEXER_ID_ASC',
  AcceptedOffersMaxIndexerIdDesc = 'ACCEPTED_OFFERS_MAX_INDEXER_ID_DESC',
  AcceptedOffersMaxLastEventAsc = 'ACCEPTED_OFFERS_MAX_LAST_EVENT_ASC',
  AcceptedOffersMaxLastEventDesc = 'ACCEPTED_OFFERS_MAX_LAST_EVENT_DESC',
  AcceptedOffersMaxOfferIdAsc = 'ACCEPTED_OFFERS_MAX_OFFER_ID_ASC',
  AcceptedOffersMaxOfferIdDesc = 'ACCEPTED_OFFERS_MAX_OFFER_ID_DESC',
  AcceptedOffersMaxServiceAgreementIdAsc = 'ACCEPTED_OFFERS_MAX_SERVICE_AGREEMENT_ID_ASC',
  AcceptedOffersMaxServiceAgreementIdDesc = 'ACCEPTED_OFFERS_MAX_SERVICE_AGREEMENT_ID_DESC',
  AcceptedOffersMinBlockRangeAsc = 'ACCEPTED_OFFERS_MIN_BLOCK_RANGE_ASC',
  AcceptedOffersMinBlockRangeDesc = 'ACCEPTED_OFFERS_MIN_BLOCK_RANGE_DESC',
  AcceptedOffersMinCreatedBlockAsc = 'ACCEPTED_OFFERS_MIN_CREATED_BLOCK_ASC',
  AcceptedOffersMinCreatedBlockDesc = 'ACCEPTED_OFFERS_MIN_CREATED_BLOCK_DESC',
  AcceptedOffersMinIdAsc = 'ACCEPTED_OFFERS_MIN_ID_ASC',
  AcceptedOffersMinIdDesc = 'ACCEPTED_OFFERS_MIN_ID_DESC',
  AcceptedOffersMinIndexerIdAsc = 'ACCEPTED_OFFERS_MIN_INDEXER_ID_ASC',
  AcceptedOffersMinIndexerIdDesc = 'ACCEPTED_OFFERS_MIN_INDEXER_ID_DESC',
  AcceptedOffersMinLastEventAsc = 'ACCEPTED_OFFERS_MIN_LAST_EVENT_ASC',
  AcceptedOffersMinLastEventDesc = 'ACCEPTED_OFFERS_MIN_LAST_EVENT_DESC',
  AcceptedOffersMinOfferIdAsc = 'ACCEPTED_OFFERS_MIN_OFFER_ID_ASC',
  AcceptedOffersMinOfferIdDesc = 'ACCEPTED_OFFERS_MIN_OFFER_ID_DESC',
  AcceptedOffersMinServiceAgreementIdAsc = 'ACCEPTED_OFFERS_MIN_SERVICE_AGREEMENT_ID_ASC',
  AcceptedOffersMinServiceAgreementIdDesc = 'ACCEPTED_OFFERS_MIN_SERVICE_AGREEMENT_ID_DESC',
  AcceptedOffersStddevPopulationBlockRangeAsc = 'ACCEPTED_OFFERS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  AcceptedOffersStddevPopulationBlockRangeDesc = 'ACCEPTED_OFFERS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  AcceptedOffersStddevPopulationCreatedBlockAsc = 'ACCEPTED_OFFERS_STDDEV_POPULATION_CREATED_BLOCK_ASC',
  AcceptedOffersStddevPopulationCreatedBlockDesc = 'ACCEPTED_OFFERS_STDDEV_POPULATION_CREATED_BLOCK_DESC',
  AcceptedOffersStddevPopulationIdAsc = 'ACCEPTED_OFFERS_STDDEV_POPULATION_ID_ASC',
  AcceptedOffersStddevPopulationIdDesc = 'ACCEPTED_OFFERS_STDDEV_POPULATION_ID_DESC',
  AcceptedOffersStddevPopulationIndexerIdAsc = 'ACCEPTED_OFFERS_STDDEV_POPULATION_INDEXER_ID_ASC',
  AcceptedOffersStddevPopulationIndexerIdDesc = 'ACCEPTED_OFFERS_STDDEV_POPULATION_INDEXER_ID_DESC',
  AcceptedOffersStddevPopulationLastEventAsc = 'ACCEPTED_OFFERS_STDDEV_POPULATION_LAST_EVENT_ASC',
  AcceptedOffersStddevPopulationLastEventDesc = 'ACCEPTED_OFFERS_STDDEV_POPULATION_LAST_EVENT_DESC',
  AcceptedOffersStddevPopulationOfferIdAsc = 'ACCEPTED_OFFERS_STDDEV_POPULATION_OFFER_ID_ASC',
  AcceptedOffersStddevPopulationOfferIdDesc = 'ACCEPTED_OFFERS_STDDEV_POPULATION_OFFER_ID_DESC',
  AcceptedOffersStddevPopulationServiceAgreementIdAsc = 'ACCEPTED_OFFERS_STDDEV_POPULATION_SERVICE_AGREEMENT_ID_ASC',
  AcceptedOffersStddevPopulationServiceAgreementIdDesc = 'ACCEPTED_OFFERS_STDDEV_POPULATION_SERVICE_AGREEMENT_ID_DESC',
  AcceptedOffersStddevSampleBlockRangeAsc = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  AcceptedOffersStddevSampleBlockRangeDesc = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  AcceptedOffersStddevSampleCreatedBlockAsc = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_CREATED_BLOCK_ASC',
  AcceptedOffersStddevSampleCreatedBlockDesc = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_CREATED_BLOCK_DESC',
  AcceptedOffersStddevSampleIdAsc = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_ID_ASC',
  AcceptedOffersStddevSampleIdDesc = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_ID_DESC',
  AcceptedOffersStddevSampleIndexerIdAsc = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_INDEXER_ID_ASC',
  AcceptedOffersStddevSampleIndexerIdDesc = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_INDEXER_ID_DESC',
  AcceptedOffersStddevSampleLastEventAsc = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_LAST_EVENT_ASC',
  AcceptedOffersStddevSampleLastEventDesc = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_LAST_EVENT_DESC',
  AcceptedOffersStddevSampleOfferIdAsc = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_OFFER_ID_ASC',
  AcceptedOffersStddevSampleOfferIdDesc = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_OFFER_ID_DESC',
  AcceptedOffersStddevSampleServiceAgreementIdAsc = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_SERVICE_AGREEMENT_ID_ASC',
  AcceptedOffersStddevSampleServiceAgreementIdDesc = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_SERVICE_AGREEMENT_ID_DESC',
  AcceptedOffersSumBlockRangeAsc = 'ACCEPTED_OFFERS_SUM_BLOCK_RANGE_ASC',
  AcceptedOffersSumBlockRangeDesc = 'ACCEPTED_OFFERS_SUM_BLOCK_RANGE_DESC',
  AcceptedOffersSumCreatedBlockAsc = 'ACCEPTED_OFFERS_SUM_CREATED_BLOCK_ASC',
  AcceptedOffersSumCreatedBlockDesc = 'ACCEPTED_OFFERS_SUM_CREATED_BLOCK_DESC',
  AcceptedOffersSumIdAsc = 'ACCEPTED_OFFERS_SUM_ID_ASC',
  AcceptedOffersSumIdDesc = 'ACCEPTED_OFFERS_SUM_ID_DESC',
  AcceptedOffersSumIndexerIdAsc = 'ACCEPTED_OFFERS_SUM_INDEXER_ID_ASC',
  AcceptedOffersSumIndexerIdDesc = 'ACCEPTED_OFFERS_SUM_INDEXER_ID_DESC',
  AcceptedOffersSumLastEventAsc = 'ACCEPTED_OFFERS_SUM_LAST_EVENT_ASC',
  AcceptedOffersSumLastEventDesc = 'ACCEPTED_OFFERS_SUM_LAST_EVENT_DESC',
  AcceptedOffersSumOfferIdAsc = 'ACCEPTED_OFFERS_SUM_OFFER_ID_ASC',
  AcceptedOffersSumOfferIdDesc = 'ACCEPTED_OFFERS_SUM_OFFER_ID_DESC',
  AcceptedOffersSumServiceAgreementIdAsc = 'ACCEPTED_OFFERS_SUM_SERVICE_AGREEMENT_ID_ASC',
  AcceptedOffersSumServiceAgreementIdDesc = 'ACCEPTED_OFFERS_SUM_SERVICE_AGREEMENT_ID_DESC',
  AcceptedOffersVariancePopulationBlockRangeAsc = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  AcceptedOffersVariancePopulationBlockRangeDesc = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  AcceptedOffersVariancePopulationCreatedBlockAsc = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_CREATED_BLOCK_ASC',
  AcceptedOffersVariancePopulationCreatedBlockDesc = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_CREATED_BLOCK_DESC',
  AcceptedOffersVariancePopulationIdAsc = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_ID_ASC',
  AcceptedOffersVariancePopulationIdDesc = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_ID_DESC',
  AcceptedOffersVariancePopulationIndexerIdAsc = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_INDEXER_ID_ASC',
  AcceptedOffersVariancePopulationIndexerIdDesc = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_INDEXER_ID_DESC',
  AcceptedOffersVariancePopulationLastEventAsc = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_LAST_EVENT_ASC',
  AcceptedOffersVariancePopulationLastEventDesc = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_LAST_EVENT_DESC',
  AcceptedOffersVariancePopulationOfferIdAsc = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_OFFER_ID_ASC',
  AcceptedOffersVariancePopulationOfferIdDesc = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_OFFER_ID_DESC',
  AcceptedOffersVariancePopulationServiceAgreementIdAsc = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_SERVICE_AGREEMENT_ID_ASC',
  AcceptedOffersVariancePopulationServiceAgreementIdDesc = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_SERVICE_AGREEMENT_ID_DESC',
  AcceptedOffersVarianceSampleBlockRangeAsc = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  AcceptedOffersVarianceSampleBlockRangeDesc = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  AcceptedOffersVarianceSampleCreatedBlockAsc = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_CREATED_BLOCK_ASC',
  AcceptedOffersVarianceSampleCreatedBlockDesc = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_CREATED_BLOCK_DESC',
  AcceptedOffersVarianceSampleIdAsc = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_ID_ASC',
  AcceptedOffersVarianceSampleIdDesc = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_ID_DESC',
  AcceptedOffersVarianceSampleIndexerIdAsc = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  AcceptedOffersVarianceSampleIndexerIdDesc = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  AcceptedOffersVarianceSampleLastEventAsc = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_LAST_EVENT_ASC',
  AcceptedOffersVarianceSampleLastEventDesc = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_LAST_EVENT_DESC',
  AcceptedOffersVarianceSampleOfferIdAsc = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_OFFER_ID_ASC',
  AcceptedOffersVarianceSampleOfferIdDesc = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_OFFER_ID_DESC',
  AcceptedOffersVarianceSampleServiceAgreementIdAsc = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_SERVICE_AGREEMENT_ID_ASC',
  AcceptedOffersVarianceSampleServiceAgreementIdDesc = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_SERVICE_AGREEMENT_ID_DESC',
  ConsumerAsc = 'CONSUMER_ASC',
  ConsumerDesc = 'CONSUMER_DESC',
  CreatedBlockAsc = 'CREATED_BLOCK_ASC',
  CreatedBlockDesc = 'CREATED_BLOCK_DESC',
  DeploymentByDeploymentIdCreatedBlockAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_ASC',
  DeploymentByDeploymentIdCreatedBlockDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_DESC',
  DeploymentByDeploymentIdCreatedTimestampAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_ASC',
  DeploymentByDeploymentIdCreatedTimestampDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_DESC',
  DeploymentByDeploymentIdIdAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__ID_ASC',
  DeploymentByDeploymentIdIdDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__ID_DESC',
  DeploymentByDeploymentIdLastEventAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_ASC',
  DeploymentByDeploymentIdLastEventDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_DESC',
  DeploymentByDeploymentIdMetadataAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_ASC',
  DeploymentByDeploymentIdMetadataDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_DESC',
  DeploymentByDeploymentIdProjectIdAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_ASC',
  DeploymentByDeploymentIdProjectIdDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_DESC',
  DeploymentIdAsc = 'DEPLOYMENT_ID_ASC',
  DeploymentIdDesc = 'DEPLOYMENT_ID_DESC',
  DepositAsc = 'DEPOSIT_ASC',
  DepositDesc = 'DEPOSIT_DESC',
  ExpireDateAsc = 'EXPIRE_DATE_ASC',
  ExpireDateDesc = 'EXPIRE_DATE_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  LastEventAsc = 'LAST_EVENT_ASC',
  LastEventDesc = 'LAST_EVENT_DESC',
  LimitAsc = 'LIMIT_ASC',
  LimitDesc = 'LIMIT_DESC',
  MinimumAcceptHeightAsc = 'MINIMUM_ACCEPT_HEIGHT_ASC',
  MinimumAcceptHeightDesc = 'MINIMUM_ACCEPT_HEIGHT_DESC',
  MinimumStakingAmountAsc = 'MINIMUM_STAKING_AMOUNT_ASC',
  MinimumStakingAmountDesc = 'MINIMUM_STAKING_AMOUNT_DESC',
  Natural = 'NATURAL',
  PlanTemplateByPlanTemplateIdActiveAsc = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__ACTIVE_ASC',
  PlanTemplateByPlanTemplateIdActiveDesc = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__ACTIVE_DESC',
  PlanTemplateByPlanTemplateIdCreatedBlockAsc = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__CREATED_BLOCK_ASC',
  PlanTemplateByPlanTemplateIdCreatedBlockDesc = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__CREATED_BLOCK_DESC',
  PlanTemplateByPlanTemplateIdDailyReqCapAsc = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__DAILY_REQ_CAP_ASC',
  PlanTemplateByPlanTemplateIdDailyReqCapDesc = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__DAILY_REQ_CAP_DESC',
  PlanTemplateByPlanTemplateIdIdAsc = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__ID_ASC',
  PlanTemplateByPlanTemplateIdIdDesc = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__ID_DESC',
  PlanTemplateByPlanTemplateIdLastEventAsc = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__LAST_EVENT_ASC',
  PlanTemplateByPlanTemplateIdLastEventDesc = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__LAST_EVENT_DESC',
  PlanTemplateByPlanTemplateIdMetadataAsc = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__METADATA_ASC',
  PlanTemplateByPlanTemplateIdMetadataDesc = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__METADATA_DESC',
  PlanTemplateByPlanTemplateIdPeriodAsc = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__PERIOD_ASC',
  PlanTemplateByPlanTemplateIdPeriodDesc = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__PERIOD_DESC',
  PlanTemplateByPlanTemplateIdPriceTokenAsc = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__PRICE_TOKEN_ASC',
  PlanTemplateByPlanTemplateIdPriceTokenDesc = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__PRICE_TOKEN_DESC',
  PlanTemplateByPlanTemplateIdRateLimitAsc = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__RATE_LIMIT_ASC',
  PlanTemplateByPlanTemplateIdRateLimitDesc = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__RATE_LIMIT_DESC',
  PlanTemplateIdAsc = 'PLAN_TEMPLATE_ID_ASC',
  PlanTemplateIdDesc = 'PLAN_TEMPLATE_ID_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  ReachLimitAsc = 'REACH_LIMIT_ASC',
  ReachLimitDesc = 'REACH_LIMIT_DESC',
  WithdrawnAsc = 'WITHDRAWN_ASC',
  WithdrawnDesc = 'WITHDRAWN_DESC',
  WithdrawPenaltyAsc = 'WITHDRAW_PENALTY_ASC',
  WithdrawPenaltyDesc = 'WITHDRAW_PENALTY_DESC'
}

export type Order = Node & {
  __typename?: 'Order';
  amountGet: Scalars['BigFloat']['output'];
  amountGive: Scalars['BigFloat']['output'];
  createAt: Scalars['Datetime']['output'];
  id: Scalars['String']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  sender: Scalars['String']['output'];
  status: OrderStatus;
  tokenGet: Scalars['String']['output'];
  tokenGive: Scalars['String']['output'];
  tokenGiveBalance: Scalars['BigFloat']['output'];
  updateAt: Scalars['Datetime']['output'];
};

export type OrderAggregates = {
  __typename?: 'OrderAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  average?: Maybe<OrderAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  distinctCount?: Maybe<OrderDistinctCountAggregates>;
  keys?: Maybe<Array<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  max?: Maybe<OrderMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  min?: Maybe<OrderMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevPopulation?: Maybe<OrderStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevSample?: Maybe<OrderStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  sum?: Maybe<OrderSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  variancePopulation?: Maybe<OrderVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  varianceSample?: Maybe<OrderVarianceSampleAggregates>;
};

export type OrderAverageAggregates = {
  __typename?: 'OrderAverageAggregates';
  /** Mean average of amountGet across the matching connection */
  amountGet?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of amountGive across the matching connection */
  amountGive?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of tokenGiveBalance across the matching connection */
  tokenGiveBalance?: Maybe<Scalars['BigFloat']['output']>;
};

export type OrderDistinctCountAggregates = {
  __typename?: 'OrderDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  _blockRange?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  _id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of amountGet across the matching connection */
  amountGet?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of amountGive across the matching connection */
  amountGive?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createAt across the matching connection */
  createAt?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of sender across the matching connection */
  sender?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of status across the matching connection */
  status?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of tokenGet across the matching connection */
  tokenGet?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of tokenGive across the matching connection */
  tokenGive?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of tokenGiveBalance across the matching connection */
  tokenGiveBalance?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of updateAt across the matching connection */
  updateAt?: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `Order` object types. All fields are combined with a logical ‘and.’ */
export type OrderFilter = {
  /** Filter by the object’s `amountGet` field. */
  amountGet?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `amountGive` field. */
  amountGive?: InputMaybe<BigFloatFilter>;
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<OrderFilter>>;
  /** Filter by the object’s `createAt` field. */
  createAt?: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<OrderFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<OrderFilter>>;
  /** Filter by the object’s `sender` field. */
  sender?: InputMaybe<StringFilter>;
  /** Filter by the object’s `status` field. */
  status?: InputMaybe<OrderStatusFilter>;
  /** Filter by the object’s `tokenGet` field. */
  tokenGet?: InputMaybe<StringFilter>;
  /** Filter by the object’s `tokenGive` field. */
  tokenGive?: InputMaybe<StringFilter>;
  /** Filter by the object’s `tokenGiveBalance` field. */
  tokenGiveBalance?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `updateAt` field. */
  updateAt?: InputMaybe<DatetimeFilter>;
};

export type OrderMaxAggregates = {
  __typename?: 'OrderMaxAggregates';
  /** Maximum of amountGet across the matching connection */
  amountGet?: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of amountGive across the matching connection */
  amountGive?: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of tokenGiveBalance across the matching connection */
  tokenGiveBalance?: Maybe<Scalars['BigFloat']['output']>;
};

export type OrderMinAggregates = {
  __typename?: 'OrderMinAggregates';
  /** Minimum of amountGet across the matching connection */
  amountGet?: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of amountGive across the matching connection */
  amountGive?: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of tokenGiveBalance across the matching connection */
  tokenGiveBalance?: Maybe<Scalars['BigFloat']['output']>;
};

export enum OrderStatus {
  Active = 'ACTIVE',
  Inactive = 'INACTIVE'
}

/** A filter to be used against OrderStatus fields. All fields are combined with a logical ‘and.’ */
export type OrderStatusFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: InputMaybe<OrderStatus>;
  /** Equal to the specified value. */
  equalTo?: InputMaybe<OrderStatus>;
  /** Greater than the specified value. */
  greaterThan?: InputMaybe<OrderStatus>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: InputMaybe<OrderStatus>;
  /** Included in the specified list. */
  in?: InputMaybe<Array<OrderStatus>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: InputMaybe<Scalars['Boolean']['input']>;
  /** Less than the specified value. */
  lessThan?: InputMaybe<OrderStatus>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: InputMaybe<OrderStatus>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: InputMaybe<OrderStatus>;
  /** Not equal to the specified value. */
  notEqualTo?: InputMaybe<OrderStatus>;
  /** Not included in the specified list. */
  notIn?: InputMaybe<Array<OrderStatus>>;
};

export type OrderStddevPopulationAggregates = {
  __typename?: 'OrderStddevPopulationAggregates';
  /** Population standard deviation of amountGet across the matching connection */
  amountGet?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of amountGive across the matching connection */
  amountGive?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of tokenGiveBalance across the matching connection */
  tokenGiveBalance?: Maybe<Scalars['BigFloat']['output']>;
};

export type OrderStddevSampleAggregates = {
  __typename?: 'OrderStddevSampleAggregates';
  /** Sample standard deviation of amountGet across the matching connection */
  amountGet?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of amountGive across the matching connection */
  amountGive?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of tokenGiveBalance across the matching connection */
  tokenGiveBalance?: Maybe<Scalars['BigFloat']['output']>;
};

export type OrderSumAggregates = {
  __typename?: 'OrderSumAggregates';
  /** Sum of amountGet across the matching connection */
  amountGet: Scalars['BigFloat']['output'];
  /** Sum of amountGive across the matching connection */
  amountGive: Scalars['BigFloat']['output'];
  /** Sum of tokenGiveBalance across the matching connection */
  tokenGiveBalance: Scalars['BigFloat']['output'];
};

export enum OrderType {
  ServiceAgreement = 'SERVICE_AGREEMENT',
  StateChannel = 'STATE_CHANNEL',
  Unknown = 'UNKNOWN'
}

/** A filter to be used against OrderType fields. All fields are combined with a logical ‘and.’ */
export type OrderTypeFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: InputMaybe<OrderType>;
  /** Equal to the specified value. */
  equalTo?: InputMaybe<OrderType>;
  /** Greater than the specified value. */
  greaterThan?: InputMaybe<OrderType>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: InputMaybe<OrderType>;
  /** Included in the specified list. */
  in?: InputMaybe<Array<OrderType>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: InputMaybe<Scalars['Boolean']['input']>;
  /** Less than the specified value. */
  lessThan?: InputMaybe<OrderType>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: InputMaybe<OrderType>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: InputMaybe<OrderType>;
  /** Not equal to the specified value. */
  notEqualTo?: InputMaybe<OrderType>;
  /** Not included in the specified list. */
  notIn?: InputMaybe<Array<OrderType>>;
};

export type OrderVariancePopulationAggregates = {
  __typename?: 'OrderVariancePopulationAggregates';
  /** Population variance of amountGet across the matching connection */
  amountGet?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of amountGive across the matching connection */
  amountGive?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of tokenGiveBalance across the matching connection */
  tokenGiveBalance?: Maybe<Scalars['BigFloat']['output']>;
};

export type OrderVarianceSampleAggregates = {
  __typename?: 'OrderVarianceSampleAggregates';
  /** Sample variance of amountGet across the matching connection */
  amountGet?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of amountGive across the matching connection */
  amountGive?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of tokenGiveBalance across the matching connection */
  tokenGiveBalance?: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `Order` values. */
export type OrdersConnection = {
  __typename?: 'OrdersConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<OrderAggregates>;
  /** A list of edges which contains the `Order` and cursor to aid in pagination. */
  edges: Array<OrdersEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<OrderAggregates>>;
  /** A list of `Order` objects. */
  nodes: Array<Maybe<Order>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Order` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Order` values. */
export type OrdersConnectionGroupedAggregatesArgs = {
  groupBy: Array<OrdersGroupBy>;
  having?: InputMaybe<OrdersHavingInput>;
};

/** A `Order` edge in the connection. */
export type OrdersEdge = {
  __typename?: 'OrdersEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `Order` at the end of the edge. */
  node?: Maybe<Order>;
};

/** Grouping methods for `Order` for usage during aggregation. */
export enum OrdersGroupBy {
  AmountGet = 'AMOUNT_GET',
  AmountGive = 'AMOUNT_GIVE',
  CreateAt = 'CREATE_AT',
  CreateAtTruncatedToDay = 'CREATE_AT_TRUNCATED_TO_DAY',
  CreateAtTruncatedToHour = 'CREATE_AT_TRUNCATED_TO_HOUR',
  Id = 'ID',
  Sender = 'SENDER',
  Status = 'STATUS',
  TokenGet = 'TOKEN_GET',
  TokenGive = 'TOKEN_GIVE',
  TokenGiveBalance = 'TOKEN_GIVE_BALANCE',
  UpdateAt = 'UPDATE_AT',
  UpdateAtTruncatedToDay = 'UPDATE_AT_TRUNCATED_TO_DAY',
  UpdateAtTruncatedToHour = 'UPDATE_AT_TRUNCATED_TO_HOUR'
}

export type OrdersHavingAverageInput = {
  amountGet?: InputMaybe<HavingBigfloatFilter>;
  amountGive?: InputMaybe<HavingBigfloatFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
  tokenGiveBalance?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type OrdersHavingDistinctCountInput = {
  amountGet?: InputMaybe<HavingBigfloatFilter>;
  amountGive?: InputMaybe<HavingBigfloatFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
  tokenGiveBalance?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

/** Conditions for `Order` aggregates. */
export type OrdersHavingInput = {
  AND?: InputMaybe<Array<OrdersHavingInput>>;
  OR?: InputMaybe<Array<OrdersHavingInput>>;
  average?: InputMaybe<OrdersHavingAverageInput>;
  distinctCount?: InputMaybe<OrdersHavingDistinctCountInput>;
  max?: InputMaybe<OrdersHavingMaxInput>;
  min?: InputMaybe<OrdersHavingMinInput>;
  stddevPopulation?: InputMaybe<OrdersHavingStddevPopulationInput>;
  stddevSample?: InputMaybe<OrdersHavingStddevSampleInput>;
  sum?: InputMaybe<OrdersHavingSumInput>;
  variancePopulation?: InputMaybe<OrdersHavingVariancePopulationInput>;
  varianceSample?: InputMaybe<OrdersHavingVarianceSampleInput>;
};

export type OrdersHavingMaxInput = {
  amountGet?: InputMaybe<HavingBigfloatFilter>;
  amountGive?: InputMaybe<HavingBigfloatFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
  tokenGiveBalance?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type OrdersHavingMinInput = {
  amountGet?: InputMaybe<HavingBigfloatFilter>;
  amountGive?: InputMaybe<HavingBigfloatFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
  tokenGiveBalance?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type OrdersHavingStddevPopulationInput = {
  amountGet?: InputMaybe<HavingBigfloatFilter>;
  amountGive?: InputMaybe<HavingBigfloatFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
  tokenGiveBalance?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type OrdersHavingStddevSampleInput = {
  amountGet?: InputMaybe<HavingBigfloatFilter>;
  amountGive?: InputMaybe<HavingBigfloatFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
  tokenGiveBalance?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type OrdersHavingSumInput = {
  amountGet?: InputMaybe<HavingBigfloatFilter>;
  amountGive?: InputMaybe<HavingBigfloatFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
  tokenGiveBalance?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type OrdersHavingVariancePopulationInput = {
  amountGet?: InputMaybe<HavingBigfloatFilter>;
  amountGive?: InputMaybe<HavingBigfloatFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
  tokenGiveBalance?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

export type OrdersHavingVarianceSampleInput = {
  amountGet?: InputMaybe<HavingBigfloatFilter>;
  amountGive?: InputMaybe<HavingBigfloatFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
  tokenGiveBalance?: InputMaybe<HavingBigfloatFilter>;
  updateAt?: InputMaybe<HavingDatetimeFilter>;
};

/** Methods to use when ordering `Order`. */
export enum OrdersOrderBy {
  AmountGetAsc = 'AMOUNT_GET_ASC',
  AmountGetDesc = 'AMOUNT_GET_DESC',
  AmountGiveAsc = 'AMOUNT_GIVE_ASC',
  AmountGiveDesc = 'AMOUNT_GIVE_DESC',
  CreateAtAsc = 'CREATE_AT_ASC',
  CreateAtDesc = 'CREATE_AT_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  SenderAsc = 'SENDER_ASC',
  SenderDesc = 'SENDER_DESC',
  StatusAsc = 'STATUS_ASC',
  StatusDesc = 'STATUS_DESC',
  TokenGetAsc = 'TOKEN_GET_ASC',
  TokenGetDesc = 'TOKEN_GET_DESC',
  TokenGiveAsc = 'TOKEN_GIVE_ASC',
  TokenGiveBalanceAsc = 'TOKEN_GIVE_BALANCE_ASC',
  TokenGiveBalanceDesc = 'TOKEN_GIVE_BALANCE_DESC',
  TokenGiveDesc = 'TOKEN_GIVE_DESC',
  UpdateAtAsc = 'UPDATE_AT_ASC',
  UpdateAtDesc = 'UPDATE_AT_DESC'
}

/** Information about pagination in a connection. */
export type PageInfo = {
  __typename?: 'PageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['Cursor']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['Cursor']['output']>;
};

export type Plan = Node & {
  __typename?: 'Plan';
  active: Scalars['Boolean']['output'];
  createdBlock?: Maybe<Scalars['Int']['output']>;
  creator: Scalars['String']['output'];
  /** Reads a single `Deployment` that is related to this `Plan`. */
  deployment?: Maybe<Deployment>;
  deploymentId?: Maybe<Scalars['String']['output']>;
  id: Scalars['String']['output'];
  lastEvent?: Maybe<Scalars['String']['output']>;
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  /** Reads a single `PlanTemplate` that is related to this `Plan`. */
  planTemplate?: Maybe<PlanTemplate>;
  planTemplateId: Scalars['String']['output'];
  price: Scalars['BigFloat']['output'];
};

export type PlanAggregates = {
  __typename?: 'PlanAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  average?: Maybe<PlanAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  distinctCount?: Maybe<PlanDistinctCountAggregates>;
  keys?: Maybe<Array<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  max?: Maybe<PlanMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  min?: Maybe<PlanMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevPopulation?: Maybe<PlanStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevSample?: Maybe<PlanStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  sum?: Maybe<PlanSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  variancePopulation?: Maybe<PlanVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  varianceSample?: Maybe<PlanVarianceSampleAggregates>;
};

/** A filter to be used against aggregates of `Plan` object types. */
export type PlanAggregatesFilter = {
  /** Mean average aggregate over matching `Plan` objects. */
  average?: InputMaybe<PlanAverageAggregateFilter>;
  /** Distinct count aggregate over matching `Plan` objects. */
  distinctCount?: InputMaybe<PlanDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `Plan` object to be included within the aggregate. */
  filter?: InputMaybe<PlanFilter>;
  /** Maximum aggregate over matching `Plan` objects. */
  max?: InputMaybe<PlanMaxAggregateFilter>;
  /** Minimum aggregate over matching `Plan` objects. */
  min?: InputMaybe<PlanMinAggregateFilter>;
  /** Population standard deviation aggregate over matching `Plan` objects. */
  stddevPopulation?: InputMaybe<PlanStddevPopulationAggregateFilter>;
  /** Sample standard deviation aggregate over matching `Plan` objects. */
  stddevSample?: InputMaybe<PlanStddevSampleAggregateFilter>;
  /** Sum aggregate over matching `Plan` objects. */
  sum?: InputMaybe<PlanSumAggregateFilter>;
  /** Population variance aggregate over matching `Plan` objects. */
  variancePopulation?: InputMaybe<PlanVariancePopulationAggregateFilter>;
  /** Sample variance aggregate over matching `Plan` objects. */
  varianceSample?: InputMaybe<PlanVarianceSampleAggregateFilter>;
};

export type PlanAverageAggregateFilter = {
  createdBlock?: InputMaybe<BigFloatFilter>;
  price?: InputMaybe<BigFloatFilter>;
};

export type PlanAverageAggregates = {
  __typename?: 'PlanAverageAggregates';
  /** Mean average of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of price across the matching connection */
  price?: Maybe<Scalars['BigFloat']['output']>;
};

export type PlanDistinctCountAggregateFilter = {
  _blockRange?: InputMaybe<BigIntFilter>;
  _id?: InputMaybe<BigIntFilter>;
  active?: InputMaybe<BigIntFilter>;
  createdBlock?: InputMaybe<BigIntFilter>;
  creator?: InputMaybe<BigIntFilter>;
  deploymentId?: InputMaybe<BigIntFilter>;
  id?: InputMaybe<BigIntFilter>;
  lastEvent?: InputMaybe<BigIntFilter>;
  planTemplateId?: InputMaybe<BigIntFilter>;
  price?: InputMaybe<BigIntFilter>;
};

export type PlanDistinctCountAggregates = {
  __typename?: 'PlanDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  _blockRange?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  _id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of active across the matching connection */
  active?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of creator across the matching connection */
  creator?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of deploymentId across the matching connection */
  deploymentId?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of lastEvent across the matching connection */
  lastEvent?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of planTemplateId across the matching connection */
  planTemplateId?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of price across the matching connection */
  price?: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `Plan` object types. All fields are combined with a logical ‘and.’ */
export type PlanFilter = {
  /** Filter by the object’s `active` field. */
  active?: InputMaybe<BooleanFilter>;
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<PlanFilter>>;
  /** Filter by the object’s `createdBlock` field. */
  createdBlock?: InputMaybe<IntFilter>;
  /** Filter by the object’s `creator` field. */
  creator?: InputMaybe<StringFilter>;
  /** Filter by the object’s `deployment` relation. */
  deployment?: InputMaybe<DeploymentFilter>;
  /** A related `deployment` exists. */
  deploymentExists?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `deploymentId` field. */
  deploymentId?: InputMaybe<StringFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<StringFilter>;
  /** Filter by the object’s `lastEvent` field. */
  lastEvent?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<PlanFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<PlanFilter>>;
  /** Filter by the object’s `planTemplate` relation. */
  planTemplate?: InputMaybe<PlanTemplateFilter>;
  /** Filter by the object’s `planTemplateId` field. */
  planTemplateId?: InputMaybe<StringFilter>;
  /** Filter by the object’s `price` field. */
  price?: InputMaybe<BigFloatFilter>;
};

export type PlanMaxAggregateFilter = {
  createdBlock?: InputMaybe<IntFilter>;
  price?: InputMaybe<BigFloatFilter>;
};

export type PlanMaxAggregates = {
  __typename?: 'PlanMaxAggregates';
  /** Maximum of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['Int']['output']>;
  /** Maximum of price across the matching connection */
  price?: Maybe<Scalars['BigFloat']['output']>;
};

export type PlanMinAggregateFilter = {
  createdBlock?: InputMaybe<IntFilter>;
  price?: InputMaybe<BigFloatFilter>;
};

export type PlanMinAggregates = {
  __typename?: 'PlanMinAggregates';
  /** Minimum of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['Int']['output']>;
  /** Minimum of price across the matching connection */
  price?: Maybe<Scalars['BigFloat']['output']>;
};

export type PlanStddevPopulationAggregateFilter = {
  createdBlock?: InputMaybe<BigFloatFilter>;
  price?: InputMaybe<BigFloatFilter>;
};

export type PlanStddevPopulationAggregates = {
  __typename?: 'PlanStddevPopulationAggregates';
  /** Population standard deviation of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of price across the matching connection */
  price?: Maybe<Scalars['BigFloat']['output']>;
};

export type PlanStddevSampleAggregateFilter = {
  createdBlock?: InputMaybe<BigFloatFilter>;
  price?: InputMaybe<BigFloatFilter>;
};

export type PlanStddevSampleAggregates = {
  __typename?: 'PlanStddevSampleAggregates';
  /** Sample standard deviation of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of price across the matching connection */
  price?: Maybe<Scalars['BigFloat']['output']>;
};

export type PlanSumAggregateFilter = {
  createdBlock?: InputMaybe<BigIntFilter>;
  price?: InputMaybe<BigFloatFilter>;
};

export type PlanSumAggregates = {
  __typename?: 'PlanSumAggregates';
  /** Sum of createdBlock across the matching connection */
  createdBlock: Scalars['BigInt']['output'];
  /** Sum of price across the matching connection */
  price: Scalars['BigFloat']['output'];
};

export type PlanTemplate = Node & {
  __typename?: 'PlanTemplate';
  active: Scalars['Boolean']['output'];
  createdBlock?: Maybe<Scalars['Int']['output']>;
  dailyReqCap: Scalars['BigFloat']['output'];
  /** Reads and enables pagination through a set of `Deployment`. */
  deploymentsByOfferPlanTemplateIdAndDeploymentId: PlanTemplateDeploymentsByOfferPlanTemplateIdAndDeploymentIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Deployment`. */
  deploymentsByPlanPlanTemplateIdAndDeploymentId: PlanTemplateDeploymentsByPlanPlanTemplateIdAndDeploymentIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Deployment`. */
  deploymentsByServiceAgreementPlanTemplateIdAndDeploymentId: PlanTemplateDeploymentsByServiceAgreementPlanTemplateIdAndDeploymentIdManyToManyConnection;
  id: Scalars['String']['output'];
  lastEvent?: Maybe<Scalars['String']['output']>;
  metadata?: Maybe<Scalars['String']['output']>;
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  /** Reads and enables pagination through a set of `Offer`. */
  offers: OffersConnection;
  period: Scalars['BigFloat']['output'];
  /** Reads and enables pagination through a set of `Plan`. */
  plans: PlansConnection;
  priceToken: Scalars['String']['output'];
  rateLimit: Scalars['BigFloat']['output'];
  /** Reads and enables pagination through a set of `ServiceAgreement`. */
  serviceAgreements: ServiceAgreementsConnection;
};


export type PlanTemplateDeploymentsByOfferPlanTemplateIdAndDeploymentIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Deployments_Distinct_Enum>>>;
  filter?: InputMaybe<DeploymentFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<DeploymentsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type PlanTemplateDeploymentsByPlanPlanTemplateIdAndDeploymentIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Deployments_Distinct_Enum>>>;
  filter?: InputMaybe<DeploymentFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<DeploymentsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type PlanTemplateDeploymentsByServiceAgreementPlanTemplateIdAndDeploymentIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Deployments_Distinct_Enum>>>;
  filter?: InputMaybe<DeploymentFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<DeploymentsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type PlanTemplateOffersArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Offers_Distinct_Enum>>>;
  filter?: InputMaybe<OfferFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<OffersOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type PlanTemplatePlansArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Plans_Distinct_Enum>>>;
  filter?: InputMaybe<PlanFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<PlansOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type PlanTemplateServiceAgreementsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Service_Agreements_Distinct_Enum>>>;
  filter?: InputMaybe<ServiceAgreementFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ServiceAgreementsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

export type PlanTemplateAggregates = {
  __typename?: 'PlanTemplateAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  average?: Maybe<PlanTemplateAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  distinctCount?: Maybe<PlanTemplateDistinctCountAggregates>;
  keys?: Maybe<Array<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  max?: Maybe<PlanTemplateMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  min?: Maybe<PlanTemplateMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevPopulation?: Maybe<PlanTemplateStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevSample?: Maybe<PlanTemplateStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  sum?: Maybe<PlanTemplateSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  variancePopulation?: Maybe<PlanTemplateVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  varianceSample?: Maybe<PlanTemplateVarianceSampleAggregates>;
};

export type PlanTemplateAverageAggregates = {
  __typename?: 'PlanTemplateAverageAggregates';
  /** Mean average of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of dailyReqCap across the matching connection */
  dailyReqCap?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of period across the matching connection */
  period?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of rateLimit across the matching connection */
  rateLimit?: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `Deployment` values, with data from `Offer`. */
export type PlanTemplateDeploymentsByOfferPlanTemplateIdAndDeploymentIdManyToManyConnection = {
  __typename?: 'PlanTemplateDeploymentsByOfferPlanTemplateIdAndDeploymentIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<DeploymentAggregates>;
  /** A list of edges which contains the `Deployment`, info from the `Offer`, and the cursor to aid in pagination. */
  edges: Array<PlanTemplateDeploymentsByOfferPlanTemplateIdAndDeploymentIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<DeploymentAggregates>>;
  /** A list of `Deployment` objects. */
  nodes: Array<Maybe<Deployment>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Deployment` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Deployment` values, with data from `Offer`. */
export type PlanTemplateDeploymentsByOfferPlanTemplateIdAndDeploymentIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: Array<DeploymentsGroupBy>;
  having?: InputMaybe<DeploymentsHavingInput>;
};

/** A `Deployment` edge in the connection, with data from `Offer`. */
export type PlanTemplateDeploymentsByOfferPlanTemplateIdAndDeploymentIdManyToManyEdge = {
  __typename?: 'PlanTemplateDeploymentsByOfferPlanTemplateIdAndDeploymentIdManyToManyEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `Deployment` at the end of the edge. */
  node?: Maybe<Deployment>;
  /** Reads and enables pagination through a set of `Offer`. */
  offers: OffersConnection;
};


/** A `Deployment` edge in the connection, with data from `Offer`. */
export type PlanTemplateDeploymentsByOfferPlanTemplateIdAndDeploymentIdManyToManyEdgeOffersArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Offers_Distinct_Enum>>>;
  filter?: InputMaybe<OfferFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<OffersOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

/** A connection to a list of `Deployment` values, with data from `Plan`. */
export type PlanTemplateDeploymentsByPlanPlanTemplateIdAndDeploymentIdManyToManyConnection = {
  __typename?: 'PlanTemplateDeploymentsByPlanPlanTemplateIdAndDeploymentIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<DeploymentAggregates>;
  /** A list of edges which contains the `Deployment`, info from the `Plan`, and the cursor to aid in pagination. */
  edges: Array<PlanTemplateDeploymentsByPlanPlanTemplateIdAndDeploymentIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<DeploymentAggregates>>;
  /** A list of `Deployment` objects. */
  nodes: Array<Maybe<Deployment>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Deployment` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Deployment` values, with data from `Plan`. */
export type PlanTemplateDeploymentsByPlanPlanTemplateIdAndDeploymentIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: Array<DeploymentsGroupBy>;
  having?: InputMaybe<DeploymentsHavingInput>;
};

/** A `Deployment` edge in the connection, with data from `Plan`. */
export type PlanTemplateDeploymentsByPlanPlanTemplateIdAndDeploymentIdManyToManyEdge = {
  __typename?: 'PlanTemplateDeploymentsByPlanPlanTemplateIdAndDeploymentIdManyToManyEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `Deployment` at the end of the edge. */
  node?: Maybe<Deployment>;
  /** Reads and enables pagination through a set of `Plan`. */
  plans: PlansConnection;
};


/** A `Deployment` edge in the connection, with data from `Plan`. */
export type PlanTemplateDeploymentsByPlanPlanTemplateIdAndDeploymentIdManyToManyEdgePlansArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Plans_Distinct_Enum>>>;
  filter?: InputMaybe<PlanFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<PlansOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

/** A connection to a list of `Deployment` values, with data from `ServiceAgreement`. */
export type PlanTemplateDeploymentsByServiceAgreementPlanTemplateIdAndDeploymentIdManyToManyConnection = {
  __typename?: 'PlanTemplateDeploymentsByServiceAgreementPlanTemplateIdAndDeploymentIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<DeploymentAggregates>;
  /** A list of edges which contains the `Deployment`, info from the `ServiceAgreement`, and the cursor to aid in pagination. */
  edges: Array<PlanTemplateDeploymentsByServiceAgreementPlanTemplateIdAndDeploymentIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<DeploymentAggregates>>;
  /** A list of `Deployment` objects. */
  nodes: Array<Maybe<Deployment>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Deployment` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Deployment` values, with data from `ServiceAgreement`. */
export type PlanTemplateDeploymentsByServiceAgreementPlanTemplateIdAndDeploymentIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: Array<DeploymentsGroupBy>;
  having?: InputMaybe<DeploymentsHavingInput>;
};

/** A `Deployment` edge in the connection, with data from `ServiceAgreement`. */
export type PlanTemplateDeploymentsByServiceAgreementPlanTemplateIdAndDeploymentIdManyToManyEdge = {
  __typename?: 'PlanTemplateDeploymentsByServiceAgreementPlanTemplateIdAndDeploymentIdManyToManyEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `Deployment` at the end of the edge. */
  node?: Maybe<Deployment>;
  /** Reads and enables pagination through a set of `ServiceAgreement`. */
  serviceAgreements: ServiceAgreementsConnection;
};


/** A `Deployment` edge in the connection, with data from `ServiceAgreement`. */
export type PlanTemplateDeploymentsByServiceAgreementPlanTemplateIdAndDeploymentIdManyToManyEdgeServiceAgreementsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Service_Agreements_Distinct_Enum>>>;
  filter?: InputMaybe<ServiceAgreementFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ServiceAgreementsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

export type PlanTemplateDistinctCountAggregates = {
  __typename?: 'PlanTemplateDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  _blockRange?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  _id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of active across the matching connection */
  active?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of dailyReqCap across the matching connection */
  dailyReqCap?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of lastEvent across the matching connection */
  lastEvent?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of metadata across the matching connection */
  metadata?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of period across the matching connection */
  period?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of priceToken across the matching connection */
  priceToken?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of rateLimit across the matching connection */
  rateLimit?: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `PlanTemplate` object types. All fields are combined with a logical ‘and.’ */
export type PlanTemplateFilter = {
  /** Filter by the object’s `active` field. */
  active?: InputMaybe<BooleanFilter>;
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<PlanTemplateFilter>>;
  /** Filter by the object’s `createdBlock` field. */
  createdBlock?: InputMaybe<IntFilter>;
  /** Filter by the object’s `dailyReqCap` field. */
  dailyReqCap?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<StringFilter>;
  /** Filter by the object’s `lastEvent` field. */
  lastEvent?: InputMaybe<StringFilter>;
  /** Filter by the object’s `metadata` field. */
  metadata?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<PlanTemplateFilter>;
  /** Filter by the object’s `offers` relation. */
  offers?: InputMaybe<PlanTemplateToManyOfferFilter>;
  /** Some related `offers` exist. */
  offersExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<PlanTemplateFilter>>;
  /** Filter by the object’s `period` field. */
  period?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `plans` relation. */
  plans?: InputMaybe<PlanTemplateToManyPlanFilter>;
  /** Some related `plans` exist. */
  plansExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `priceToken` field. */
  priceToken?: InputMaybe<StringFilter>;
  /** Filter by the object’s `rateLimit` field. */
  rateLimit?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `serviceAgreements` relation. */
  serviceAgreements?: InputMaybe<PlanTemplateToManyServiceAgreementFilter>;
  /** Some related `serviceAgreements` exist. */
  serviceAgreementsExist?: InputMaybe<Scalars['Boolean']['input']>;
};

export type PlanTemplateMaxAggregates = {
  __typename?: 'PlanTemplateMaxAggregates';
  /** Maximum of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['Int']['output']>;
  /** Maximum of dailyReqCap across the matching connection */
  dailyReqCap?: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of period across the matching connection */
  period?: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of rateLimit across the matching connection */
  rateLimit?: Maybe<Scalars['BigFloat']['output']>;
};

export type PlanTemplateMinAggregates = {
  __typename?: 'PlanTemplateMinAggregates';
  /** Minimum of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['Int']['output']>;
  /** Minimum of dailyReqCap across the matching connection */
  dailyReqCap?: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of period across the matching connection */
  period?: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of rateLimit across the matching connection */
  rateLimit?: Maybe<Scalars['BigFloat']['output']>;
};

export type PlanTemplateStddevPopulationAggregates = {
  __typename?: 'PlanTemplateStddevPopulationAggregates';
  /** Population standard deviation of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of dailyReqCap across the matching connection */
  dailyReqCap?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of period across the matching connection */
  period?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of rateLimit across the matching connection */
  rateLimit?: Maybe<Scalars['BigFloat']['output']>;
};

export type PlanTemplateStddevSampleAggregates = {
  __typename?: 'PlanTemplateStddevSampleAggregates';
  /** Sample standard deviation of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of dailyReqCap across the matching connection */
  dailyReqCap?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of period across the matching connection */
  period?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of rateLimit across the matching connection */
  rateLimit?: Maybe<Scalars['BigFloat']['output']>;
};

export type PlanTemplateSumAggregates = {
  __typename?: 'PlanTemplateSumAggregates';
  /** Sum of createdBlock across the matching connection */
  createdBlock: Scalars['BigInt']['output'];
  /** Sum of dailyReqCap across the matching connection */
  dailyReqCap: Scalars['BigFloat']['output'];
  /** Sum of period across the matching connection */
  period: Scalars['BigFloat']['output'];
  /** Sum of rateLimit across the matching connection */
  rateLimit: Scalars['BigFloat']['output'];
};

/** A filter to be used against many `Offer` object types. All fields are combined with a logical ‘and.’ */
export type PlanTemplateToManyOfferFilter = {
  /** Aggregates across related `Offer` match the filter criteria. */
  aggregates?: InputMaybe<OfferAggregatesFilter>;
  /** Every related `Offer` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<OfferFilter>;
  /** No related `Offer` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<OfferFilter>;
  /** Some related `Offer` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<OfferFilter>;
};

/** A filter to be used against many `Plan` object types. All fields are combined with a logical ‘and.’ */
export type PlanTemplateToManyPlanFilter = {
  /** Aggregates across related `Plan` match the filter criteria. */
  aggregates?: InputMaybe<PlanAggregatesFilter>;
  /** Every related `Plan` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<PlanFilter>;
  /** No related `Plan` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<PlanFilter>;
  /** Some related `Plan` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<PlanFilter>;
};

/** A filter to be used against many `ServiceAgreement` object types. All fields are combined with a logical ‘and.’ */
export type PlanTemplateToManyServiceAgreementFilter = {
  /** Aggregates across related `ServiceAgreement` match the filter criteria. */
  aggregates?: InputMaybe<ServiceAgreementAggregatesFilter>;
  /** Every related `ServiceAgreement` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<ServiceAgreementFilter>;
  /** No related `ServiceAgreement` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<ServiceAgreementFilter>;
  /** Some related `ServiceAgreement` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<ServiceAgreementFilter>;
};

export type PlanTemplateVariancePopulationAggregates = {
  __typename?: 'PlanTemplateVariancePopulationAggregates';
  /** Population variance of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of dailyReqCap across the matching connection */
  dailyReqCap?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of period across the matching connection */
  period?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of rateLimit across the matching connection */
  rateLimit?: Maybe<Scalars['BigFloat']['output']>;
};

export type PlanTemplateVarianceSampleAggregates = {
  __typename?: 'PlanTemplateVarianceSampleAggregates';
  /** Sample variance of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of dailyReqCap across the matching connection */
  dailyReqCap?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of period across the matching connection */
  period?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of rateLimit across the matching connection */
  rateLimit?: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `PlanTemplate` values. */
export type PlanTemplatesConnection = {
  __typename?: 'PlanTemplatesConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<PlanTemplateAggregates>;
  /** A list of edges which contains the `PlanTemplate` and cursor to aid in pagination. */
  edges: Array<PlanTemplatesEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<PlanTemplateAggregates>>;
  /** A list of `PlanTemplate` objects. */
  nodes: Array<Maybe<PlanTemplate>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `PlanTemplate` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `PlanTemplate` values. */
export type PlanTemplatesConnectionGroupedAggregatesArgs = {
  groupBy: Array<PlanTemplatesGroupBy>;
  having?: InputMaybe<PlanTemplatesHavingInput>;
};

/** A `PlanTemplate` edge in the connection. */
export type PlanTemplatesEdge = {
  __typename?: 'PlanTemplatesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `PlanTemplate` at the end of the edge. */
  node?: Maybe<PlanTemplate>;
};

/** Grouping methods for `PlanTemplate` for usage during aggregation. */
export enum PlanTemplatesGroupBy {
  Active = 'ACTIVE',
  CreatedBlock = 'CREATED_BLOCK',
  DailyReqCap = 'DAILY_REQ_CAP',
  Id = 'ID',
  LastEvent = 'LAST_EVENT',
  Metadata = 'METADATA',
  Period = 'PERIOD',
  PriceToken = 'PRICE_TOKEN',
  RateLimit = 'RATE_LIMIT'
}

export type PlanTemplatesHavingAverageInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
  dailyReqCap?: InputMaybe<HavingBigfloatFilter>;
  period?: InputMaybe<HavingBigfloatFilter>;
  rateLimit?: InputMaybe<HavingBigfloatFilter>;
};

export type PlanTemplatesHavingDistinctCountInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
  dailyReqCap?: InputMaybe<HavingBigfloatFilter>;
  period?: InputMaybe<HavingBigfloatFilter>;
  rateLimit?: InputMaybe<HavingBigfloatFilter>;
};

/** Conditions for `PlanTemplate` aggregates. */
export type PlanTemplatesHavingInput = {
  AND?: InputMaybe<Array<PlanTemplatesHavingInput>>;
  OR?: InputMaybe<Array<PlanTemplatesHavingInput>>;
  average?: InputMaybe<PlanTemplatesHavingAverageInput>;
  distinctCount?: InputMaybe<PlanTemplatesHavingDistinctCountInput>;
  max?: InputMaybe<PlanTemplatesHavingMaxInput>;
  min?: InputMaybe<PlanTemplatesHavingMinInput>;
  stddevPopulation?: InputMaybe<PlanTemplatesHavingStddevPopulationInput>;
  stddevSample?: InputMaybe<PlanTemplatesHavingStddevSampleInput>;
  sum?: InputMaybe<PlanTemplatesHavingSumInput>;
  variancePopulation?: InputMaybe<PlanTemplatesHavingVariancePopulationInput>;
  varianceSample?: InputMaybe<PlanTemplatesHavingVarianceSampleInput>;
};

export type PlanTemplatesHavingMaxInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
  dailyReqCap?: InputMaybe<HavingBigfloatFilter>;
  period?: InputMaybe<HavingBigfloatFilter>;
  rateLimit?: InputMaybe<HavingBigfloatFilter>;
};

export type PlanTemplatesHavingMinInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
  dailyReqCap?: InputMaybe<HavingBigfloatFilter>;
  period?: InputMaybe<HavingBigfloatFilter>;
  rateLimit?: InputMaybe<HavingBigfloatFilter>;
};

export type PlanTemplatesHavingStddevPopulationInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
  dailyReqCap?: InputMaybe<HavingBigfloatFilter>;
  period?: InputMaybe<HavingBigfloatFilter>;
  rateLimit?: InputMaybe<HavingBigfloatFilter>;
};

export type PlanTemplatesHavingStddevSampleInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
  dailyReqCap?: InputMaybe<HavingBigfloatFilter>;
  period?: InputMaybe<HavingBigfloatFilter>;
  rateLimit?: InputMaybe<HavingBigfloatFilter>;
};

export type PlanTemplatesHavingSumInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
  dailyReqCap?: InputMaybe<HavingBigfloatFilter>;
  period?: InputMaybe<HavingBigfloatFilter>;
  rateLimit?: InputMaybe<HavingBigfloatFilter>;
};

export type PlanTemplatesHavingVariancePopulationInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
  dailyReqCap?: InputMaybe<HavingBigfloatFilter>;
  period?: InputMaybe<HavingBigfloatFilter>;
  rateLimit?: InputMaybe<HavingBigfloatFilter>;
};

export type PlanTemplatesHavingVarianceSampleInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
  dailyReqCap?: InputMaybe<HavingBigfloatFilter>;
  period?: InputMaybe<HavingBigfloatFilter>;
  rateLimit?: InputMaybe<HavingBigfloatFilter>;
};

/** Methods to use when ordering `PlanTemplate`. */
export enum PlanTemplatesOrderBy {
  ActiveAsc = 'ACTIVE_ASC',
  ActiveDesc = 'ACTIVE_DESC',
  CreatedBlockAsc = 'CREATED_BLOCK_ASC',
  CreatedBlockDesc = 'CREATED_BLOCK_DESC',
  DailyReqCapAsc = 'DAILY_REQ_CAP_ASC',
  DailyReqCapDesc = 'DAILY_REQ_CAP_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  LastEventAsc = 'LAST_EVENT_ASC',
  LastEventDesc = 'LAST_EVENT_DESC',
  MetadataAsc = 'METADATA_ASC',
  MetadataDesc = 'METADATA_DESC',
  Natural = 'NATURAL',
  OffersAverageAcceptedAsc = 'OFFERS_AVERAGE_ACCEPTED_ASC',
  OffersAverageAcceptedDesc = 'OFFERS_AVERAGE_ACCEPTED_DESC',
  OffersAverageBlockRangeAsc = 'OFFERS_AVERAGE_BLOCK_RANGE_ASC',
  OffersAverageBlockRangeDesc = 'OFFERS_AVERAGE_BLOCK_RANGE_DESC',
  OffersAverageConsumerAsc = 'OFFERS_AVERAGE_CONSUMER_ASC',
  OffersAverageConsumerDesc = 'OFFERS_AVERAGE_CONSUMER_DESC',
  OffersAverageCreatedBlockAsc = 'OFFERS_AVERAGE_CREATED_BLOCK_ASC',
  OffersAverageCreatedBlockDesc = 'OFFERS_AVERAGE_CREATED_BLOCK_DESC',
  OffersAverageDeploymentIdAsc = 'OFFERS_AVERAGE_DEPLOYMENT_ID_ASC',
  OffersAverageDeploymentIdDesc = 'OFFERS_AVERAGE_DEPLOYMENT_ID_DESC',
  OffersAverageDepositAsc = 'OFFERS_AVERAGE_DEPOSIT_ASC',
  OffersAverageDepositDesc = 'OFFERS_AVERAGE_DEPOSIT_DESC',
  OffersAverageExpireDateAsc = 'OFFERS_AVERAGE_EXPIRE_DATE_ASC',
  OffersAverageExpireDateDesc = 'OFFERS_AVERAGE_EXPIRE_DATE_DESC',
  OffersAverageIdAsc = 'OFFERS_AVERAGE_ID_ASC',
  OffersAverageIdDesc = 'OFFERS_AVERAGE_ID_DESC',
  OffersAverageLastEventAsc = 'OFFERS_AVERAGE_LAST_EVENT_ASC',
  OffersAverageLastEventDesc = 'OFFERS_AVERAGE_LAST_EVENT_DESC',
  OffersAverageLimitAsc = 'OFFERS_AVERAGE_LIMIT_ASC',
  OffersAverageLimitDesc = 'OFFERS_AVERAGE_LIMIT_DESC',
  OffersAverageMinimumAcceptHeightAsc = 'OFFERS_AVERAGE_MINIMUM_ACCEPT_HEIGHT_ASC',
  OffersAverageMinimumAcceptHeightDesc = 'OFFERS_AVERAGE_MINIMUM_ACCEPT_HEIGHT_DESC',
  OffersAverageMinimumStakingAmountAsc = 'OFFERS_AVERAGE_MINIMUM_STAKING_AMOUNT_ASC',
  OffersAverageMinimumStakingAmountDesc = 'OFFERS_AVERAGE_MINIMUM_STAKING_AMOUNT_DESC',
  OffersAveragePlanTemplateIdAsc = 'OFFERS_AVERAGE_PLAN_TEMPLATE_ID_ASC',
  OffersAveragePlanTemplateIdDesc = 'OFFERS_AVERAGE_PLAN_TEMPLATE_ID_DESC',
  OffersAverageReachLimitAsc = 'OFFERS_AVERAGE_REACH_LIMIT_ASC',
  OffersAverageReachLimitDesc = 'OFFERS_AVERAGE_REACH_LIMIT_DESC',
  OffersAverageWithdrawnAsc = 'OFFERS_AVERAGE_WITHDRAWN_ASC',
  OffersAverageWithdrawnDesc = 'OFFERS_AVERAGE_WITHDRAWN_DESC',
  OffersAverageWithdrawPenaltyAsc = 'OFFERS_AVERAGE_WITHDRAW_PENALTY_ASC',
  OffersAverageWithdrawPenaltyDesc = 'OFFERS_AVERAGE_WITHDRAW_PENALTY_DESC',
  OffersByPlanTemplateIdCountAsc = 'OFFERS_BY_PLAN_TEMPLATE_ID__COUNT_ASC',
  OffersByPlanTemplateIdCountDesc = 'OFFERS_BY_PLAN_TEMPLATE_ID__COUNT_DESC',
  OffersCountAsc = 'OFFERS_COUNT_ASC',
  OffersCountDesc = 'OFFERS_COUNT_DESC',
  OffersDistinctCountAcceptedAsc = 'OFFERS_DISTINCT_COUNT_ACCEPTED_ASC',
  OffersDistinctCountAcceptedDesc = 'OFFERS_DISTINCT_COUNT_ACCEPTED_DESC',
  OffersDistinctCountBlockRangeAsc = 'OFFERS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  OffersDistinctCountBlockRangeDesc = 'OFFERS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  OffersDistinctCountConsumerAsc = 'OFFERS_DISTINCT_COUNT_CONSUMER_ASC',
  OffersDistinctCountConsumerDesc = 'OFFERS_DISTINCT_COUNT_CONSUMER_DESC',
  OffersDistinctCountCreatedBlockAsc = 'OFFERS_DISTINCT_COUNT_CREATED_BLOCK_ASC',
  OffersDistinctCountCreatedBlockDesc = 'OFFERS_DISTINCT_COUNT_CREATED_BLOCK_DESC',
  OffersDistinctCountDeploymentIdAsc = 'OFFERS_DISTINCT_COUNT_DEPLOYMENT_ID_ASC',
  OffersDistinctCountDeploymentIdDesc = 'OFFERS_DISTINCT_COUNT_DEPLOYMENT_ID_DESC',
  OffersDistinctCountDepositAsc = 'OFFERS_DISTINCT_COUNT_DEPOSIT_ASC',
  OffersDistinctCountDepositDesc = 'OFFERS_DISTINCT_COUNT_DEPOSIT_DESC',
  OffersDistinctCountExpireDateAsc = 'OFFERS_DISTINCT_COUNT_EXPIRE_DATE_ASC',
  OffersDistinctCountExpireDateDesc = 'OFFERS_DISTINCT_COUNT_EXPIRE_DATE_DESC',
  OffersDistinctCountIdAsc = 'OFFERS_DISTINCT_COUNT_ID_ASC',
  OffersDistinctCountIdDesc = 'OFFERS_DISTINCT_COUNT_ID_DESC',
  OffersDistinctCountLastEventAsc = 'OFFERS_DISTINCT_COUNT_LAST_EVENT_ASC',
  OffersDistinctCountLastEventDesc = 'OFFERS_DISTINCT_COUNT_LAST_EVENT_DESC',
  OffersDistinctCountLimitAsc = 'OFFERS_DISTINCT_COUNT_LIMIT_ASC',
  OffersDistinctCountLimitDesc = 'OFFERS_DISTINCT_COUNT_LIMIT_DESC',
  OffersDistinctCountMinimumAcceptHeightAsc = 'OFFERS_DISTINCT_COUNT_MINIMUM_ACCEPT_HEIGHT_ASC',
  OffersDistinctCountMinimumAcceptHeightDesc = 'OFFERS_DISTINCT_COUNT_MINIMUM_ACCEPT_HEIGHT_DESC',
  OffersDistinctCountMinimumStakingAmountAsc = 'OFFERS_DISTINCT_COUNT_MINIMUM_STAKING_AMOUNT_ASC',
  OffersDistinctCountMinimumStakingAmountDesc = 'OFFERS_DISTINCT_COUNT_MINIMUM_STAKING_AMOUNT_DESC',
  OffersDistinctCountPlanTemplateIdAsc = 'OFFERS_DISTINCT_COUNT_PLAN_TEMPLATE_ID_ASC',
  OffersDistinctCountPlanTemplateIdDesc = 'OFFERS_DISTINCT_COUNT_PLAN_TEMPLATE_ID_DESC',
  OffersDistinctCountReachLimitAsc = 'OFFERS_DISTINCT_COUNT_REACH_LIMIT_ASC',
  OffersDistinctCountReachLimitDesc = 'OFFERS_DISTINCT_COUNT_REACH_LIMIT_DESC',
  OffersDistinctCountWithdrawnAsc = 'OFFERS_DISTINCT_COUNT_WITHDRAWN_ASC',
  OffersDistinctCountWithdrawnDesc = 'OFFERS_DISTINCT_COUNT_WITHDRAWN_DESC',
  OffersDistinctCountWithdrawPenaltyAsc = 'OFFERS_DISTINCT_COUNT_WITHDRAW_PENALTY_ASC',
  OffersDistinctCountWithdrawPenaltyDesc = 'OFFERS_DISTINCT_COUNT_WITHDRAW_PENALTY_DESC',
  OffersMaxAcceptedAsc = 'OFFERS_MAX_ACCEPTED_ASC',
  OffersMaxAcceptedDesc = 'OFFERS_MAX_ACCEPTED_DESC',
  OffersMaxBlockRangeAsc = 'OFFERS_MAX_BLOCK_RANGE_ASC',
  OffersMaxBlockRangeDesc = 'OFFERS_MAX_BLOCK_RANGE_DESC',
  OffersMaxConsumerAsc = 'OFFERS_MAX_CONSUMER_ASC',
  OffersMaxConsumerDesc = 'OFFERS_MAX_CONSUMER_DESC',
  OffersMaxCreatedBlockAsc = 'OFFERS_MAX_CREATED_BLOCK_ASC',
  OffersMaxCreatedBlockDesc = 'OFFERS_MAX_CREATED_BLOCK_DESC',
  OffersMaxDeploymentIdAsc = 'OFFERS_MAX_DEPLOYMENT_ID_ASC',
  OffersMaxDeploymentIdDesc = 'OFFERS_MAX_DEPLOYMENT_ID_DESC',
  OffersMaxDepositAsc = 'OFFERS_MAX_DEPOSIT_ASC',
  OffersMaxDepositDesc = 'OFFERS_MAX_DEPOSIT_DESC',
  OffersMaxExpireDateAsc = 'OFFERS_MAX_EXPIRE_DATE_ASC',
  OffersMaxExpireDateDesc = 'OFFERS_MAX_EXPIRE_DATE_DESC',
  OffersMaxIdAsc = 'OFFERS_MAX_ID_ASC',
  OffersMaxIdDesc = 'OFFERS_MAX_ID_DESC',
  OffersMaxLastEventAsc = 'OFFERS_MAX_LAST_EVENT_ASC',
  OffersMaxLastEventDesc = 'OFFERS_MAX_LAST_EVENT_DESC',
  OffersMaxLimitAsc = 'OFFERS_MAX_LIMIT_ASC',
  OffersMaxLimitDesc = 'OFFERS_MAX_LIMIT_DESC',
  OffersMaxMinimumAcceptHeightAsc = 'OFFERS_MAX_MINIMUM_ACCEPT_HEIGHT_ASC',
  OffersMaxMinimumAcceptHeightDesc = 'OFFERS_MAX_MINIMUM_ACCEPT_HEIGHT_DESC',
  OffersMaxMinimumStakingAmountAsc = 'OFFERS_MAX_MINIMUM_STAKING_AMOUNT_ASC',
  OffersMaxMinimumStakingAmountDesc = 'OFFERS_MAX_MINIMUM_STAKING_AMOUNT_DESC',
  OffersMaxPlanTemplateIdAsc = 'OFFERS_MAX_PLAN_TEMPLATE_ID_ASC',
  OffersMaxPlanTemplateIdDesc = 'OFFERS_MAX_PLAN_TEMPLATE_ID_DESC',
  OffersMaxReachLimitAsc = 'OFFERS_MAX_REACH_LIMIT_ASC',
  OffersMaxReachLimitDesc = 'OFFERS_MAX_REACH_LIMIT_DESC',
  OffersMaxWithdrawnAsc = 'OFFERS_MAX_WITHDRAWN_ASC',
  OffersMaxWithdrawnDesc = 'OFFERS_MAX_WITHDRAWN_DESC',
  OffersMaxWithdrawPenaltyAsc = 'OFFERS_MAX_WITHDRAW_PENALTY_ASC',
  OffersMaxWithdrawPenaltyDesc = 'OFFERS_MAX_WITHDRAW_PENALTY_DESC',
  OffersMinAcceptedAsc = 'OFFERS_MIN_ACCEPTED_ASC',
  OffersMinAcceptedDesc = 'OFFERS_MIN_ACCEPTED_DESC',
  OffersMinBlockRangeAsc = 'OFFERS_MIN_BLOCK_RANGE_ASC',
  OffersMinBlockRangeDesc = 'OFFERS_MIN_BLOCK_RANGE_DESC',
  OffersMinConsumerAsc = 'OFFERS_MIN_CONSUMER_ASC',
  OffersMinConsumerDesc = 'OFFERS_MIN_CONSUMER_DESC',
  OffersMinCreatedBlockAsc = 'OFFERS_MIN_CREATED_BLOCK_ASC',
  OffersMinCreatedBlockDesc = 'OFFERS_MIN_CREATED_BLOCK_DESC',
  OffersMinDeploymentIdAsc = 'OFFERS_MIN_DEPLOYMENT_ID_ASC',
  OffersMinDeploymentIdDesc = 'OFFERS_MIN_DEPLOYMENT_ID_DESC',
  OffersMinDepositAsc = 'OFFERS_MIN_DEPOSIT_ASC',
  OffersMinDepositDesc = 'OFFERS_MIN_DEPOSIT_DESC',
  OffersMinExpireDateAsc = 'OFFERS_MIN_EXPIRE_DATE_ASC',
  OffersMinExpireDateDesc = 'OFFERS_MIN_EXPIRE_DATE_DESC',
  OffersMinIdAsc = 'OFFERS_MIN_ID_ASC',
  OffersMinIdDesc = 'OFFERS_MIN_ID_DESC',
  OffersMinLastEventAsc = 'OFFERS_MIN_LAST_EVENT_ASC',
  OffersMinLastEventDesc = 'OFFERS_MIN_LAST_EVENT_DESC',
  OffersMinLimitAsc = 'OFFERS_MIN_LIMIT_ASC',
  OffersMinLimitDesc = 'OFFERS_MIN_LIMIT_DESC',
  OffersMinMinimumAcceptHeightAsc = 'OFFERS_MIN_MINIMUM_ACCEPT_HEIGHT_ASC',
  OffersMinMinimumAcceptHeightDesc = 'OFFERS_MIN_MINIMUM_ACCEPT_HEIGHT_DESC',
  OffersMinMinimumStakingAmountAsc = 'OFFERS_MIN_MINIMUM_STAKING_AMOUNT_ASC',
  OffersMinMinimumStakingAmountDesc = 'OFFERS_MIN_MINIMUM_STAKING_AMOUNT_DESC',
  OffersMinPlanTemplateIdAsc = 'OFFERS_MIN_PLAN_TEMPLATE_ID_ASC',
  OffersMinPlanTemplateIdDesc = 'OFFERS_MIN_PLAN_TEMPLATE_ID_DESC',
  OffersMinReachLimitAsc = 'OFFERS_MIN_REACH_LIMIT_ASC',
  OffersMinReachLimitDesc = 'OFFERS_MIN_REACH_LIMIT_DESC',
  OffersMinWithdrawnAsc = 'OFFERS_MIN_WITHDRAWN_ASC',
  OffersMinWithdrawnDesc = 'OFFERS_MIN_WITHDRAWN_DESC',
  OffersMinWithdrawPenaltyAsc = 'OFFERS_MIN_WITHDRAW_PENALTY_ASC',
  OffersMinWithdrawPenaltyDesc = 'OFFERS_MIN_WITHDRAW_PENALTY_DESC',
  OffersStddevPopulationAcceptedAsc = 'OFFERS_STDDEV_POPULATION_ACCEPTED_ASC',
  OffersStddevPopulationAcceptedDesc = 'OFFERS_STDDEV_POPULATION_ACCEPTED_DESC',
  OffersStddevPopulationBlockRangeAsc = 'OFFERS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  OffersStddevPopulationBlockRangeDesc = 'OFFERS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  OffersStddevPopulationConsumerAsc = 'OFFERS_STDDEV_POPULATION_CONSUMER_ASC',
  OffersStddevPopulationConsumerDesc = 'OFFERS_STDDEV_POPULATION_CONSUMER_DESC',
  OffersStddevPopulationCreatedBlockAsc = 'OFFERS_STDDEV_POPULATION_CREATED_BLOCK_ASC',
  OffersStddevPopulationCreatedBlockDesc = 'OFFERS_STDDEV_POPULATION_CREATED_BLOCK_DESC',
  OffersStddevPopulationDeploymentIdAsc = 'OFFERS_STDDEV_POPULATION_DEPLOYMENT_ID_ASC',
  OffersStddevPopulationDeploymentIdDesc = 'OFFERS_STDDEV_POPULATION_DEPLOYMENT_ID_DESC',
  OffersStddevPopulationDepositAsc = 'OFFERS_STDDEV_POPULATION_DEPOSIT_ASC',
  OffersStddevPopulationDepositDesc = 'OFFERS_STDDEV_POPULATION_DEPOSIT_DESC',
  OffersStddevPopulationExpireDateAsc = 'OFFERS_STDDEV_POPULATION_EXPIRE_DATE_ASC',
  OffersStddevPopulationExpireDateDesc = 'OFFERS_STDDEV_POPULATION_EXPIRE_DATE_DESC',
  OffersStddevPopulationIdAsc = 'OFFERS_STDDEV_POPULATION_ID_ASC',
  OffersStddevPopulationIdDesc = 'OFFERS_STDDEV_POPULATION_ID_DESC',
  OffersStddevPopulationLastEventAsc = 'OFFERS_STDDEV_POPULATION_LAST_EVENT_ASC',
  OffersStddevPopulationLastEventDesc = 'OFFERS_STDDEV_POPULATION_LAST_EVENT_DESC',
  OffersStddevPopulationLimitAsc = 'OFFERS_STDDEV_POPULATION_LIMIT_ASC',
  OffersStddevPopulationLimitDesc = 'OFFERS_STDDEV_POPULATION_LIMIT_DESC',
  OffersStddevPopulationMinimumAcceptHeightAsc = 'OFFERS_STDDEV_POPULATION_MINIMUM_ACCEPT_HEIGHT_ASC',
  OffersStddevPopulationMinimumAcceptHeightDesc = 'OFFERS_STDDEV_POPULATION_MINIMUM_ACCEPT_HEIGHT_DESC',
  OffersStddevPopulationMinimumStakingAmountAsc = 'OFFERS_STDDEV_POPULATION_MINIMUM_STAKING_AMOUNT_ASC',
  OffersStddevPopulationMinimumStakingAmountDesc = 'OFFERS_STDDEV_POPULATION_MINIMUM_STAKING_AMOUNT_DESC',
  OffersStddevPopulationPlanTemplateIdAsc = 'OFFERS_STDDEV_POPULATION_PLAN_TEMPLATE_ID_ASC',
  OffersStddevPopulationPlanTemplateIdDesc = 'OFFERS_STDDEV_POPULATION_PLAN_TEMPLATE_ID_DESC',
  OffersStddevPopulationReachLimitAsc = 'OFFERS_STDDEV_POPULATION_REACH_LIMIT_ASC',
  OffersStddevPopulationReachLimitDesc = 'OFFERS_STDDEV_POPULATION_REACH_LIMIT_DESC',
  OffersStddevPopulationWithdrawnAsc = 'OFFERS_STDDEV_POPULATION_WITHDRAWN_ASC',
  OffersStddevPopulationWithdrawnDesc = 'OFFERS_STDDEV_POPULATION_WITHDRAWN_DESC',
  OffersStddevPopulationWithdrawPenaltyAsc = 'OFFERS_STDDEV_POPULATION_WITHDRAW_PENALTY_ASC',
  OffersStddevPopulationWithdrawPenaltyDesc = 'OFFERS_STDDEV_POPULATION_WITHDRAW_PENALTY_DESC',
  OffersStddevSampleAcceptedAsc = 'OFFERS_STDDEV_SAMPLE_ACCEPTED_ASC',
  OffersStddevSampleAcceptedDesc = 'OFFERS_STDDEV_SAMPLE_ACCEPTED_DESC',
  OffersStddevSampleBlockRangeAsc = 'OFFERS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  OffersStddevSampleBlockRangeDesc = 'OFFERS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  OffersStddevSampleConsumerAsc = 'OFFERS_STDDEV_SAMPLE_CONSUMER_ASC',
  OffersStddevSampleConsumerDesc = 'OFFERS_STDDEV_SAMPLE_CONSUMER_DESC',
  OffersStddevSampleCreatedBlockAsc = 'OFFERS_STDDEV_SAMPLE_CREATED_BLOCK_ASC',
  OffersStddevSampleCreatedBlockDesc = 'OFFERS_STDDEV_SAMPLE_CREATED_BLOCK_DESC',
  OffersStddevSampleDeploymentIdAsc = 'OFFERS_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC',
  OffersStddevSampleDeploymentIdDesc = 'OFFERS_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC',
  OffersStddevSampleDepositAsc = 'OFFERS_STDDEV_SAMPLE_DEPOSIT_ASC',
  OffersStddevSampleDepositDesc = 'OFFERS_STDDEV_SAMPLE_DEPOSIT_DESC',
  OffersStddevSampleExpireDateAsc = 'OFFERS_STDDEV_SAMPLE_EXPIRE_DATE_ASC',
  OffersStddevSampleExpireDateDesc = 'OFFERS_STDDEV_SAMPLE_EXPIRE_DATE_DESC',
  OffersStddevSampleIdAsc = 'OFFERS_STDDEV_SAMPLE_ID_ASC',
  OffersStddevSampleIdDesc = 'OFFERS_STDDEV_SAMPLE_ID_DESC',
  OffersStddevSampleLastEventAsc = 'OFFERS_STDDEV_SAMPLE_LAST_EVENT_ASC',
  OffersStddevSampleLastEventDesc = 'OFFERS_STDDEV_SAMPLE_LAST_EVENT_DESC',
  OffersStddevSampleLimitAsc = 'OFFERS_STDDEV_SAMPLE_LIMIT_ASC',
  OffersStddevSampleLimitDesc = 'OFFERS_STDDEV_SAMPLE_LIMIT_DESC',
  OffersStddevSampleMinimumAcceptHeightAsc = 'OFFERS_STDDEV_SAMPLE_MINIMUM_ACCEPT_HEIGHT_ASC',
  OffersStddevSampleMinimumAcceptHeightDesc = 'OFFERS_STDDEV_SAMPLE_MINIMUM_ACCEPT_HEIGHT_DESC',
  OffersStddevSampleMinimumStakingAmountAsc = 'OFFERS_STDDEV_SAMPLE_MINIMUM_STAKING_AMOUNT_ASC',
  OffersStddevSampleMinimumStakingAmountDesc = 'OFFERS_STDDEV_SAMPLE_MINIMUM_STAKING_AMOUNT_DESC',
  OffersStddevSamplePlanTemplateIdAsc = 'OFFERS_STDDEV_SAMPLE_PLAN_TEMPLATE_ID_ASC',
  OffersStddevSamplePlanTemplateIdDesc = 'OFFERS_STDDEV_SAMPLE_PLAN_TEMPLATE_ID_DESC',
  OffersStddevSampleReachLimitAsc = 'OFFERS_STDDEV_SAMPLE_REACH_LIMIT_ASC',
  OffersStddevSampleReachLimitDesc = 'OFFERS_STDDEV_SAMPLE_REACH_LIMIT_DESC',
  OffersStddevSampleWithdrawnAsc = 'OFFERS_STDDEV_SAMPLE_WITHDRAWN_ASC',
  OffersStddevSampleWithdrawnDesc = 'OFFERS_STDDEV_SAMPLE_WITHDRAWN_DESC',
  OffersStddevSampleWithdrawPenaltyAsc = 'OFFERS_STDDEV_SAMPLE_WITHDRAW_PENALTY_ASC',
  OffersStddevSampleWithdrawPenaltyDesc = 'OFFERS_STDDEV_SAMPLE_WITHDRAW_PENALTY_DESC',
  OffersSumAcceptedAsc = 'OFFERS_SUM_ACCEPTED_ASC',
  OffersSumAcceptedDesc = 'OFFERS_SUM_ACCEPTED_DESC',
  OffersSumBlockRangeAsc = 'OFFERS_SUM_BLOCK_RANGE_ASC',
  OffersSumBlockRangeDesc = 'OFFERS_SUM_BLOCK_RANGE_DESC',
  OffersSumConsumerAsc = 'OFFERS_SUM_CONSUMER_ASC',
  OffersSumConsumerDesc = 'OFFERS_SUM_CONSUMER_DESC',
  OffersSumCreatedBlockAsc = 'OFFERS_SUM_CREATED_BLOCK_ASC',
  OffersSumCreatedBlockDesc = 'OFFERS_SUM_CREATED_BLOCK_DESC',
  OffersSumDeploymentIdAsc = 'OFFERS_SUM_DEPLOYMENT_ID_ASC',
  OffersSumDeploymentIdDesc = 'OFFERS_SUM_DEPLOYMENT_ID_DESC',
  OffersSumDepositAsc = 'OFFERS_SUM_DEPOSIT_ASC',
  OffersSumDepositDesc = 'OFFERS_SUM_DEPOSIT_DESC',
  OffersSumExpireDateAsc = 'OFFERS_SUM_EXPIRE_DATE_ASC',
  OffersSumExpireDateDesc = 'OFFERS_SUM_EXPIRE_DATE_DESC',
  OffersSumIdAsc = 'OFFERS_SUM_ID_ASC',
  OffersSumIdDesc = 'OFFERS_SUM_ID_DESC',
  OffersSumLastEventAsc = 'OFFERS_SUM_LAST_EVENT_ASC',
  OffersSumLastEventDesc = 'OFFERS_SUM_LAST_EVENT_DESC',
  OffersSumLimitAsc = 'OFFERS_SUM_LIMIT_ASC',
  OffersSumLimitDesc = 'OFFERS_SUM_LIMIT_DESC',
  OffersSumMinimumAcceptHeightAsc = 'OFFERS_SUM_MINIMUM_ACCEPT_HEIGHT_ASC',
  OffersSumMinimumAcceptHeightDesc = 'OFFERS_SUM_MINIMUM_ACCEPT_HEIGHT_DESC',
  OffersSumMinimumStakingAmountAsc = 'OFFERS_SUM_MINIMUM_STAKING_AMOUNT_ASC',
  OffersSumMinimumStakingAmountDesc = 'OFFERS_SUM_MINIMUM_STAKING_AMOUNT_DESC',
  OffersSumPlanTemplateIdAsc = 'OFFERS_SUM_PLAN_TEMPLATE_ID_ASC',
  OffersSumPlanTemplateIdDesc = 'OFFERS_SUM_PLAN_TEMPLATE_ID_DESC',
  OffersSumReachLimitAsc = 'OFFERS_SUM_REACH_LIMIT_ASC',
  OffersSumReachLimitDesc = 'OFFERS_SUM_REACH_LIMIT_DESC',
  OffersSumWithdrawnAsc = 'OFFERS_SUM_WITHDRAWN_ASC',
  OffersSumWithdrawnDesc = 'OFFERS_SUM_WITHDRAWN_DESC',
  OffersSumWithdrawPenaltyAsc = 'OFFERS_SUM_WITHDRAW_PENALTY_ASC',
  OffersSumWithdrawPenaltyDesc = 'OFFERS_SUM_WITHDRAW_PENALTY_DESC',
  OffersVariancePopulationAcceptedAsc = 'OFFERS_VARIANCE_POPULATION_ACCEPTED_ASC',
  OffersVariancePopulationAcceptedDesc = 'OFFERS_VARIANCE_POPULATION_ACCEPTED_DESC',
  OffersVariancePopulationBlockRangeAsc = 'OFFERS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  OffersVariancePopulationBlockRangeDesc = 'OFFERS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  OffersVariancePopulationConsumerAsc = 'OFFERS_VARIANCE_POPULATION_CONSUMER_ASC',
  OffersVariancePopulationConsumerDesc = 'OFFERS_VARIANCE_POPULATION_CONSUMER_DESC',
  OffersVariancePopulationCreatedBlockAsc = 'OFFERS_VARIANCE_POPULATION_CREATED_BLOCK_ASC',
  OffersVariancePopulationCreatedBlockDesc = 'OFFERS_VARIANCE_POPULATION_CREATED_BLOCK_DESC',
  OffersVariancePopulationDeploymentIdAsc = 'OFFERS_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC',
  OffersVariancePopulationDeploymentIdDesc = 'OFFERS_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC',
  OffersVariancePopulationDepositAsc = 'OFFERS_VARIANCE_POPULATION_DEPOSIT_ASC',
  OffersVariancePopulationDepositDesc = 'OFFERS_VARIANCE_POPULATION_DEPOSIT_DESC',
  OffersVariancePopulationExpireDateAsc = 'OFFERS_VARIANCE_POPULATION_EXPIRE_DATE_ASC',
  OffersVariancePopulationExpireDateDesc = 'OFFERS_VARIANCE_POPULATION_EXPIRE_DATE_DESC',
  OffersVariancePopulationIdAsc = 'OFFERS_VARIANCE_POPULATION_ID_ASC',
  OffersVariancePopulationIdDesc = 'OFFERS_VARIANCE_POPULATION_ID_DESC',
  OffersVariancePopulationLastEventAsc = 'OFFERS_VARIANCE_POPULATION_LAST_EVENT_ASC',
  OffersVariancePopulationLastEventDesc = 'OFFERS_VARIANCE_POPULATION_LAST_EVENT_DESC',
  OffersVariancePopulationLimitAsc = 'OFFERS_VARIANCE_POPULATION_LIMIT_ASC',
  OffersVariancePopulationLimitDesc = 'OFFERS_VARIANCE_POPULATION_LIMIT_DESC',
  OffersVariancePopulationMinimumAcceptHeightAsc = 'OFFERS_VARIANCE_POPULATION_MINIMUM_ACCEPT_HEIGHT_ASC',
  OffersVariancePopulationMinimumAcceptHeightDesc = 'OFFERS_VARIANCE_POPULATION_MINIMUM_ACCEPT_HEIGHT_DESC',
  OffersVariancePopulationMinimumStakingAmountAsc = 'OFFERS_VARIANCE_POPULATION_MINIMUM_STAKING_AMOUNT_ASC',
  OffersVariancePopulationMinimumStakingAmountDesc = 'OFFERS_VARIANCE_POPULATION_MINIMUM_STAKING_AMOUNT_DESC',
  OffersVariancePopulationPlanTemplateIdAsc = 'OFFERS_VARIANCE_POPULATION_PLAN_TEMPLATE_ID_ASC',
  OffersVariancePopulationPlanTemplateIdDesc = 'OFFERS_VARIANCE_POPULATION_PLAN_TEMPLATE_ID_DESC',
  OffersVariancePopulationReachLimitAsc = 'OFFERS_VARIANCE_POPULATION_REACH_LIMIT_ASC',
  OffersVariancePopulationReachLimitDesc = 'OFFERS_VARIANCE_POPULATION_REACH_LIMIT_DESC',
  OffersVariancePopulationWithdrawnAsc = 'OFFERS_VARIANCE_POPULATION_WITHDRAWN_ASC',
  OffersVariancePopulationWithdrawnDesc = 'OFFERS_VARIANCE_POPULATION_WITHDRAWN_DESC',
  OffersVariancePopulationWithdrawPenaltyAsc = 'OFFERS_VARIANCE_POPULATION_WITHDRAW_PENALTY_ASC',
  OffersVariancePopulationWithdrawPenaltyDesc = 'OFFERS_VARIANCE_POPULATION_WITHDRAW_PENALTY_DESC',
  OffersVarianceSampleAcceptedAsc = 'OFFERS_VARIANCE_SAMPLE_ACCEPTED_ASC',
  OffersVarianceSampleAcceptedDesc = 'OFFERS_VARIANCE_SAMPLE_ACCEPTED_DESC',
  OffersVarianceSampleBlockRangeAsc = 'OFFERS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  OffersVarianceSampleBlockRangeDesc = 'OFFERS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  OffersVarianceSampleConsumerAsc = 'OFFERS_VARIANCE_SAMPLE_CONSUMER_ASC',
  OffersVarianceSampleConsumerDesc = 'OFFERS_VARIANCE_SAMPLE_CONSUMER_DESC',
  OffersVarianceSampleCreatedBlockAsc = 'OFFERS_VARIANCE_SAMPLE_CREATED_BLOCK_ASC',
  OffersVarianceSampleCreatedBlockDesc = 'OFFERS_VARIANCE_SAMPLE_CREATED_BLOCK_DESC',
  OffersVarianceSampleDeploymentIdAsc = 'OFFERS_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC',
  OffersVarianceSampleDeploymentIdDesc = 'OFFERS_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC',
  OffersVarianceSampleDepositAsc = 'OFFERS_VARIANCE_SAMPLE_DEPOSIT_ASC',
  OffersVarianceSampleDepositDesc = 'OFFERS_VARIANCE_SAMPLE_DEPOSIT_DESC',
  OffersVarianceSampleExpireDateAsc = 'OFFERS_VARIANCE_SAMPLE_EXPIRE_DATE_ASC',
  OffersVarianceSampleExpireDateDesc = 'OFFERS_VARIANCE_SAMPLE_EXPIRE_DATE_DESC',
  OffersVarianceSampleIdAsc = 'OFFERS_VARIANCE_SAMPLE_ID_ASC',
  OffersVarianceSampleIdDesc = 'OFFERS_VARIANCE_SAMPLE_ID_DESC',
  OffersVarianceSampleLastEventAsc = 'OFFERS_VARIANCE_SAMPLE_LAST_EVENT_ASC',
  OffersVarianceSampleLastEventDesc = 'OFFERS_VARIANCE_SAMPLE_LAST_EVENT_DESC',
  OffersVarianceSampleLimitAsc = 'OFFERS_VARIANCE_SAMPLE_LIMIT_ASC',
  OffersVarianceSampleLimitDesc = 'OFFERS_VARIANCE_SAMPLE_LIMIT_DESC',
  OffersVarianceSampleMinimumAcceptHeightAsc = 'OFFERS_VARIANCE_SAMPLE_MINIMUM_ACCEPT_HEIGHT_ASC',
  OffersVarianceSampleMinimumAcceptHeightDesc = 'OFFERS_VARIANCE_SAMPLE_MINIMUM_ACCEPT_HEIGHT_DESC',
  OffersVarianceSampleMinimumStakingAmountAsc = 'OFFERS_VARIANCE_SAMPLE_MINIMUM_STAKING_AMOUNT_ASC',
  OffersVarianceSampleMinimumStakingAmountDesc = 'OFFERS_VARIANCE_SAMPLE_MINIMUM_STAKING_AMOUNT_DESC',
  OffersVarianceSamplePlanTemplateIdAsc = 'OFFERS_VARIANCE_SAMPLE_PLAN_TEMPLATE_ID_ASC',
  OffersVarianceSamplePlanTemplateIdDesc = 'OFFERS_VARIANCE_SAMPLE_PLAN_TEMPLATE_ID_DESC',
  OffersVarianceSampleReachLimitAsc = 'OFFERS_VARIANCE_SAMPLE_REACH_LIMIT_ASC',
  OffersVarianceSampleReachLimitDesc = 'OFFERS_VARIANCE_SAMPLE_REACH_LIMIT_DESC',
  OffersVarianceSampleWithdrawnAsc = 'OFFERS_VARIANCE_SAMPLE_WITHDRAWN_ASC',
  OffersVarianceSampleWithdrawnDesc = 'OFFERS_VARIANCE_SAMPLE_WITHDRAWN_DESC',
  OffersVarianceSampleWithdrawPenaltyAsc = 'OFFERS_VARIANCE_SAMPLE_WITHDRAW_PENALTY_ASC',
  OffersVarianceSampleWithdrawPenaltyDesc = 'OFFERS_VARIANCE_SAMPLE_WITHDRAW_PENALTY_DESC',
  PeriodAsc = 'PERIOD_ASC',
  PeriodDesc = 'PERIOD_DESC',
  PlansAverageActiveAsc = 'PLANS_AVERAGE_ACTIVE_ASC',
  PlansAverageActiveDesc = 'PLANS_AVERAGE_ACTIVE_DESC',
  PlansAverageBlockRangeAsc = 'PLANS_AVERAGE_BLOCK_RANGE_ASC',
  PlansAverageBlockRangeDesc = 'PLANS_AVERAGE_BLOCK_RANGE_DESC',
  PlansAverageCreatedBlockAsc = 'PLANS_AVERAGE_CREATED_BLOCK_ASC',
  PlansAverageCreatedBlockDesc = 'PLANS_AVERAGE_CREATED_BLOCK_DESC',
  PlansAverageCreatorAsc = 'PLANS_AVERAGE_CREATOR_ASC',
  PlansAverageCreatorDesc = 'PLANS_AVERAGE_CREATOR_DESC',
  PlansAverageDeploymentIdAsc = 'PLANS_AVERAGE_DEPLOYMENT_ID_ASC',
  PlansAverageDeploymentIdDesc = 'PLANS_AVERAGE_DEPLOYMENT_ID_DESC',
  PlansAverageIdAsc = 'PLANS_AVERAGE_ID_ASC',
  PlansAverageIdDesc = 'PLANS_AVERAGE_ID_DESC',
  PlansAverageLastEventAsc = 'PLANS_AVERAGE_LAST_EVENT_ASC',
  PlansAverageLastEventDesc = 'PLANS_AVERAGE_LAST_EVENT_DESC',
  PlansAveragePlanTemplateIdAsc = 'PLANS_AVERAGE_PLAN_TEMPLATE_ID_ASC',
  PlansAveragePlanTemplateIdDesc = 'PLANS_AVERAGE_PLAN_TEMPLATE_ID_DESC',
  PlansAveragePriceAsc = 'PLANS_AVERAGE_PRICE_ASC',
  PlansAveragePriceDesc = 'PLANS_AVERAGE_PRICE_DESC',
  PlansByPlanTemplateIdCountAsc = 'PLANS_BY_PLAN_TEMPLATE_ID__COUNT_ASC',
  PlansByPlanTemplateIdCountDesc = 'PLANS_BY_PLAN_TEMPLATE_ID__COUNT_DESC',
  PlansCountAsc = 'PLANS_COUNT_ASC',
  PlansCountDesc = 'PLANS_COUNT_DESC',
  PlansDistinctCountActiveAsc = 'PLANS_DISTINCT_COUNT_ACTIVE_ASC',
  PlansDistinctCountActiveDesc = 'PLANS_DISTINCT_COUNT_ACTIVE_DESC',
  PlansDistinctCountBlockRangeAsc = 'PLANS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  PlansDistinctCountBlockRangeDesc = 'PLANS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  PlansDistinctCountCreatedBlockAsc = 'PLANS_DISTINCT_COUNT_CREATED_BLOCK_ASC',
  PlansDistinctCountCreatedBlockDesc = 'PLANS_DISTINCT_COUNT_CREATED_BLOCK_DESC',
  PlansDistinctCountCreatorAsc = 'PLANS_DISTINCT_COUNT_CREATOR_ASC',
  PlansDistinctCountCreatorDesc = 'PLANS_DISTINCT_COUNT_CREATOR_DESC',
  PlansDistinctCountDeploymentIdAsc = 'PLANS_DISTINCT_COUNT_DEPLOYMENT_ID_ASC',
  PlansDistinctCountDeploymentIdDesc = 'PLANS_DISTINCT_COUNT_DEPLOYMENT_ID_DESC',
  PlansDistinctCountIdAsc = 'PLANS_DISTINCT_COUNT_ID_ASC',
  PlansDistinctCountIdDesc = 'PLANS_DISTINCT_COUNT_ID_DESC',
  PlansDistinctCountLastEventAsc = 'PLANS_DISTINCT_COUNT_LAST_EVENT_ASC',
  PlansDistinctCountLastEventDesc = 'PLANS_DISTINCT_COUNT_LAST_EVENT_DESC',
  PlansDistinctCountPlanTemplateIdAsc = 'PLANS_DISTINCT_COUNT_PLAN_TEMPLATE_ID_ASC',
  PlansDistinctCountPlanTemplateIdDesc = 'PLANS_DISTINCT_COUNT_PLAN_TEMPLATE_ID_DESC',
  PlansDistinctCountPriceAsc = 'PLANS_DISTINCT_COUNT_PRICE_ASC',
  PlansDistinctCountPriceDesc = 'PLANS_DISTINCT_COUNT_PRICE_DESC',
  PlansMaxActiveAsc = 'PLANS_MAX_ACTIVE_ASC',
  PlansMaxActiveDesc = 'PLANS_MAX_ACTIVE_DESC',
  PlansMaxBlockRangeAsc = 'PLANS_MAX_BLOCK_RANGE_ASC',
  PlansMaxBlockRangeDesc = 'PLANS_MAX_BLOCK_RANGE_DESC',
  PlansMaxCreatedBlockAsc = 'PLANS_MAX_CREATED_BLOCK_ASC',
  PlansMaxCreatedBlockDesc = 'PLANS_MAX_CREATED_BLOCK_DESC',
  PlansMaxCreatorAsc = 'PLANS_MAX_CREATOR_ASC',
  PlansMaxCreatorDesc = 'PLANS_MAX_CREATOR_DESC',
  PlansMaxDeploymentIdAsc = 'PLANS_MAX_DEPLOYMENT_ID_ASC',
  PlansMaxDeploymentIdDesc = 'PLANS_MAX_DEPLOYMENT_ID_DESC',
  PlansMaxIdAsc = 'PLANS_MAX_ID_ASC',
  PlansMaxIdDesc = 'PLANS_MAX_ID_DESC',
  PlansMaxLastEventAsc = 'PLANS_MAX_LAST_EVENT_ASC',
  PlansMaxLastEventDesc = 'PLANS_MAX_LAST_EVENT_DESC',
  PlansMaxPlanTemplateIdAsc = 'PLANS_MAX_PLAN_TEMPLATE_ID_ASC',
  PlansMaxPlanTemplateIdDesc = 'PLANS_MAX_PLAN_TEMPLATE_ID_DESC',
  PlansMaxPriceAsc = 'PLANS_MAX_PRICE_ASC',
  PlansMaxPriceDesc = 'PLANS_MAX_PRICE_DESC',
  PlansMinActiveAsc = 'PLANS_MIN_ACTIVE_ASC',
  PlansMinActiveDesc = 'PLANS_MIN_ACTIVE_DESC',
  PlansMinBlockRangeAsc = 'PLANS_MIN_BLOCK_RANGE_ASC',
  PlansMinBlockRangeDesc = 'PLANS_MIN_BLOCK_RANGE_DESC',
  PlansMinCreatedBlockAsc = 'PLANS_MIN_CREATED_BLOCK_ASC',
  PlansMinCreatedBlockDesc = 'PLANS_MIN_CREATED_BLOCK_DESC',
  PlansMinCreatorAsc = 'PLANS_MIN_CREATOR_ASC',
  PlansMinCreatorDesc = 'PLANS_MIN_CREATOR_DESC',
  PlansMinDeploymentIdAsc = 'PLANS_MIN_DEPLOYMENT_ID_ASC',
  PlansMinDeploymentIdDesc = 'PLANS_MIN_DEPLOYMENT_ID_DESC',
  PlansMinIdAsc = 'PLANS_MIN_ID_ASC',
  PlansMinIdDesc = 'PLANS_MIN_ID_DESC',
  PlansMinLastEventAsc = 'PLANS_MIN_LAST_EVENT_ASC',
  PlansMinLastEventDesc = 'PLANS_MIN_LAST_EVENT_DESC',
  PlansMinPlanTemplateIdAsc = 'PLANS_MIN_PLAN_TEMPLATE_ID_ASC',
  PlansMinPlanTemplateIdDesc = 'PLANS_MIN_PLAN_TEMPLATE_ID_DESC',
  PlansMinPriceAsc = 'PLANS_MIN_PRICE_ASC',
  PlansMinPriceDesc = 'PLANS_MIN_PRICE_DESC',
  PlansStddevPopulationActiveAsc = 'PLANS_STDDEV_POPULATION_ACTIVE_ASC',
  PlansStddevPopulationActiveDesc = 'PLANS_STDDEV_POPULATION_ACTIVE_DESC',
  PlansStddevPopulationBlockRangeAsc = 'PLANS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  PlansStddevPopulationBlockRangeDesc = 'PLANS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  PlansStddevPopulationCreatedBlockAsc = 'PLANS_STDDEV_POPULATION_CREATED_BLOCK_ASC',
  PlansStddevPopulationCreatedBlockDesc = 'PLANS_STDDEV_POPULATION_CREATED_BLOCK_DESC',
  PlansStddevPopulationCreatorAsc = 'PLANS_STDDEV_POPULATION_CREATOR_ASC',
  PlansStddevPopulationCreatorDesc = 'PLANS_STDDEV_POPULATION_CREATOR_DESC',
  PlansStddevPopulationDeploymentIdAsc = 'PLANS_STDDEV_POPULATION_DEPLOYMENT_ID_ASC',
  PlansStddevPopulationDeploymentIdDesc = 'PLANS_STDDEV_POPULATION_DEPLOYMENT_ID_DESC',
  PlansStddevPopulationIdAsc = 'PLANS_STDDEV_POPULATION_ID_ASC',
  PlansStddevPopulationIdDesc = 'PLANS_STDDEV_POPULATION_ID_DESC',
  PlansStddevPopulationLastEventAsc = 'PLANS_STDDEV_POPULATION_LAST_EVENT_ASC',
  PlansStddevPopulationLastEventDesc = 'PLANS_STDDEV_POPULATION_LAST_EVENT_DESC',
  PlansStddevPopulationPlanTemplateIdAsc = 'PLANS_STDDEV_POPULATION_PLAN_TEMPLATE_ID_ASC',
  PlansStddevPopulationPlanTemplateIdDesc = 'PLANS_STDDEV_POPULATION_PLAN_TEMPLATE_ID_DESC',
  PlansStddevPopulationPriceAsc = 'PLANS_STDDEV_POPULATION_PRICE_ASC',
  PlansStddevPopulationPriceDesc = 'PLANS_STDDEV_POPULATION_PRICE_DESC',
  PlansStddevSampleActiveAsc = 'PLANS_STDDEV_SAMPLE_ACTIVE_ASC',
  PlansStddevSampleActiveDesc = 'PLANS_STDDEV_SAMPLE_ACTIVE_DESC',
  PlansStddevSampleBlockRangeAsc = 'PLANS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  PlansStddevSampleBlockRangeDesc = 'PLANS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  PlansStddevSampleCreatedBlockAsc = 'PLANS_STDDEV_SAMPLE_CREATED_BLOCK_ASC',
  PlansStddevSampleCreatedBlockDesc = 'PLANS_STDDEV_SAMPLE_CREATED_BLOCK_DESC',
  PlansStddevSampleCreatorAsc = 'PLANS_STDDEV_SAMPLE_CREATOR_ASC',
  PlansStddevSampleCreatorDesc = 'PLANS_STDDEV_SAMPLE_CREATOR_DESC',
  PlansStddevSampleDeploymentIdAsc = 'PLANS_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC',
  PlansStddevSampleDeploymentIdDesc = 'PLANS_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC',
  PlansStddevSampleIdAsc = 'PLANS_STDDEV_SAMPLE_ID_ASC',
  PlansStddevSampleIdDesc = 'PLANS_STDDEV_SAMPLE_ID_DESC',
  PlansStddevSampleLastEventAsc = 'PLANS_STDDEV_SAMPLE_LAST_EVENT_ASC',
  PlansStddevSampleLastEventDesc = 'PLANS_STDDEV_SAMPLE_LAST_EVENT_DESC',
  PlansStddevSamplePlanTemplateIdAsc = 'PLANS_STDDEV_SAMPLE_PLAN_TEMPLATE_ID_ASC',
  PlansStddevSamplePlanTemplateIdDesc = 'PLANS_STDDEV_SAMPLE_PLAN_TEMPLATE_ID_DESC',
  PlansStddevSamplePriceAsc = 'PLANS_STDDEV_SAMPLE_PRICE_ASC',
  PlansStddevSamplePriceDesc = 'PLANS_STDDEV_SAMPLE_PRICE_DESC',
  PlansSumActiveAsc = 'PLANS_SUM_ACTIVE_ASC',
  PlansSumActiveDesc = 'PLANS_SUM_ACTIVE_DESC',
  PlansSumBlockRangeAsc = 'PLANS_SUM_BLOCK_RANGE_ASC',
  PlansSumBlockRangeDesc = 'PLANS_SUM_BLOCK_RANGE_DESC',
  PlansSumCreatedBlockAsc = 'PLANS_SUM_CREATED_BLOCK_ASC',
  PlansSumCreatedBlockDesc = 'PLANS_SUM_CREATED_BLOCK_DESC',
  PlansSumCreatorAsc = 'PLANS_SUM_CREATOR_ASC',
  PlansSumCreatorDesc = 'PLANS_SUM_CREATOR_DESC',
  PlansSumDeploymentIdAsc = 'PLANS_SUM_DEPLOYMENT_ID_ASC',
  PlansSumDeploymentIdDesc = 'PLANS_SUM_DEPLOYMENT_ID_DESC',
  PlansSumIdAsc = 'PLANS_SUM_ID_ASC',
  PlansSumIdDesc = 'PLANS_SUM_ID_DESC',
  PlansSumLastEventAsc = 'PLANS_SUM_LAST_EVENT_ASC',
  PlansSumLastEventDesc = 'PLANS_SUM_LAST_EVENT_DESC',
  PlansSumPlanTemplateIdAsc = 'PLANS_SUM_PLAN_TEMPLATE_ID_ASC',
  PlansSumPlanTemplateIdDesc = 'PLANS_SUM_PLAN_TEMPLATE_ID_DESC',
  PlansSumPriceAsc = 'PLANS_SUM_PRICE_ASC',
  PlansSumPriceDesc = 'PLANS_SUM_PRICE_DESC',
  PlansVariancePopulationActiveAsc = 'PLANS_VARIANCE_POPULATION_ACTIVE_ASC',
  PlansVariancePopulationActiveDesc = 'PLANS_VARIANCE_POPULATION_ACTIVE_DESC',
  PlansVariancePopulationBlockRangeAsc = 'PLANS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  PlansVariancePopulationBlockRangeDesc = 'PLANS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  PlansVariancePopulationCreatedBlockAsc = 'PLANS_VARIANCE_POPULATION_CREATED_BLOCK_ASC',
  PlansVariancePopulationCreatedBlockDesc = 'PLANS_VARIANCE_POPULATION_CREATED_BLOCK_DESC',
  PlansVariancePopulationCreatorAsc = 'PLANS_VARIANCE_POPULATION_CREATOR_ASC',
  PlansVariancePopulationCreatorDesc = 'PLANS_VARIANCE_POPULATION_CREATOR_DESC',
  PlansVariancePopulationDeploymentIdAsc = 'PLANS_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC',
  PlansVariancePopulationDeploymentIdDesc = 'PLANS_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC',
  PlansVariancePopulationIdAsc = 'PLANS_VARIANCE_POPULATION_ID_ASC',
  PlansVariancePopulationIdDesc = 'PLANS_VARIANCE_POPULATION_ID_DESC',
  PlansVariancePopulationLastEventAsc = 'PLANS_VARIANCE_POPULATION_LAST_EVENT_ASC',
  PlansVariancePopulationLastEventDesc = 'PLANS_VARIANCE_POPULATION_LAST_EVENT_DESC',
  PlansVariancePopulationPlanTemplateIdAsc = 'PLANS_VARIANCE_POPULATION_PLAN_TEMPLATE_ID_ASC',
  PlansVariancePopulationPlanTemplateIdDesc = 'PLANS_VARIANCE_POPULATION_PLAN_TEMPLATE_ID_DESC',
  PlansVariancePopulationPriceAsc = 'PLANS_VARIANCE_POPULATION_PRICE_ASC',
  PlansVariancePopulationPriceDesc = 'PLANS_VARIANCE_POPULATION_PRICE_DESC',
  PlansVarianceSampleActiveAsc = 'PLANS_VARIANCE_SAMPLE_ACTIVE_ASC',
  PlansVarianceSampleActiveDesc = 'PLANS_VARIANCE_SAMPLE_ACTIVE_DESC',
  PlansVarianceSampleBlockRangeAsc = 'PLANS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  PlansVarianceSampleBlockRangeDesc = 'PLANS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  PlansVarianceSampleCreatedBlockAsc = 'PLANS_VARIANCE_SAMPLE_CREATED_BLOCK_ASC',
  PlansVarianceSampleCreatedBlockDesc = 'PLANS_VARIANCE_SAMPLE_CREATED_BLOCK_DESC',
  PlansVarianceSampleCreatorAsc = 'PLANS_VARIANCE_SAMPLE_CREATOR_ASC',
  PlansVarianceSampleCreatorDesc = 'PLANS_VARIANCE_SAMPLE_CREATOR_DESC',
  PlansVarianceSampleDeploymentIdAsc = 'PLANS_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC',
  PlansVarianceSampleDeploymentIdDesc = 'PLANS_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC',
  PlansVarianceSampleIdAsc = 'PLANS_VARIANCE_SAMPLE_ID_ASC',
  PlansVarianceSampleIdDesc = 'PLANS_VARIANCE_SAMPLE_ID_DESC',
  PlansVarianceSampleLastEventAsc = 'PLANS_VARIANCE_SAMPLE_LAST_EVENT_ASC',
  PlansVarianceSampleLastEventDesc = 'PLANS_VARIANCE_SAMPLE_LAST_EVENT_DESC',
  PlansVarianceSamplePlanTemplateIdAsc = 'PLANS_VARIANCE_SAMPLE_PLAN_TEMPLATE_ID_ASC',
  PlansVarianceSamplePlanTemplateIdDesc = 'PLANS_VARIANCE_SAMPLE_PLAN_TEMPLATE_ID_DESC',
  PlansVarianceSamplePriceAsc = 'PLANS_VARIANCE_SAMPLE_PRICE_ASC',
  PlansVarianceSamplePriceDesc = 'PLANS_VARIANCE_SAMPLE_PRICE_DESC',
  PriceTokenAsc = 'PRICE_TOKEN_ASC',
  PriceTokenDesc = 'PRICE_TOKEN_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  RateLimitAsc = 'RATE_LIMIT_ASC',
  RateLimitDesc = 'RATE_LIMIT_DESC',
  ServiceAgreementsAverageBlockRangeAsc = 'SERVICE_AGREEMENTS_AVERAGE_BLOCK_RANGE_ASC',
  ServiceAgreementsAverageBlockRangeDesc = 'SERVICE_AGREEMENTS_AVERAGE_BLOCK_RANGE_DESC',
  ServiceAgreementsAverageConsumerAddressAsc = 'SERVICE_AGREEMENTS_AVERAGE_CONSUMER_ADDRESS_ASC',
  ServiceAgreementsAverageConsumerAddressDesc = 'SERVICE_AGREEMENTS_AVERAGE_CONSUMER_ADDRESS_DESC',
  ServiceAgreementsAverageCreatedBlockAsc = 'SERVICE_AGREEMENTS_AVERAGE_CREATED_BLOCK_ASC',
  ServiceAgreementsAverageCreatedBlockDesc = 'SERVICE_AGREEMENTS_AVERAGE_CREATED_BLOCK_DESC',
  ServiceAgreementsAverageDeploymentIdAsc = 'SERVICE_AGREEMENTS_AVERAGE_DEPLOYMENT_ID_ASC',
  ServiceAgreementsAverageDeploymentIdDesc = 'SERVICE_AGREEMENTS_AVERAGE_DEPLOYMENT_ID_DESC',
  ServiceAgreementsAverageEndTimeAsc = 'SERVICE_AGREEMENTS_AVERAGE_END_TIME_ASC',
  ServiceAgreementsAverageEndTimeDesc = 'SERVICE_AGREEMENTS_AVERAGE_END_TIME_DESC',
  ServiceAgreementsAverageIdAsc = 'SERVICE_AGREEMENTS_AVERAGE_ID_ASC',
  ServiceAgreementsAverageIdDesc = 'SERVICE_AGREEMENTS_AVERAGE_ID_DESC',
  ServiceAgreementsAverageIndexerAddressAsc = 'SERVICE_AGREEMENTS_AVERAGE_INDEXER_ADDRESS_ASC',
  ServiceAgreementsAverageIndexerAddressDesc = 'SERVICE_AGREEMENTS_AVERAGE_INDEXER_ADDRESS_DESC',
  ServiceAgreementsAverageLastEventAsc = 'SERVICE_AGREEMENTS_AVERAGE_LAST_EVENT_ASC',
  ServiceAgreementsAverageLastEventDesc = 'SERVICE_AGREEMENTS_AVERAGE_LAST_EVENT_DESC',
  ServiceAgreementsAverageLockedAmountAsc = 'SERVICE_AGREEMENTS_AVERAGE_LOCKED_AMOUNT_ASC',
  ServiceAgreementsAverageLockedAmountDesc = 'SERVICE_AGREEMENTS_AVERAGE_LOCKED_AMOUNT_DESC',
  ServiceAgreementsAveragePeriodAsc = 'SERVICE_AGREEMENTS_AVERAGE_PERIOD_ASC',
  ServiceAgreementsAveragePeriodDesc = 'SERVICE_AGREEMENTS_AVERAGE_PERIOD_DESC',
  ServiceAgreementsAveragePlanTemplateIdAsc = 'SERVICE_AGREEMENTS_AVERAGE_PLAN_TEMPLATE_ID_ASC',
  ServiceAgreementsAveragePlanTemplateIdDesc = 'SERVICE_AGREEMENTS_AVERAGE_PLAN_TEMPLATE_ID_DESC',
  ServiceAgreementsAverageStartTimeAsc = 'SERVICE_AGREEMENTS_AVERAGE_START_TIME_ASC',
  ServiceAgreementsAverageStartTimeDesc = 'SERVICE_AGREEMENTS_AVERAGE_START_TIME_DESC',
  ServiceAgreementsByPlanTemplateIdCountAsc = 'SERVICE_AGREEMENTS_BY_PLAN_TEMPLATE_ID__COUNT_ASC',
  ServiceAgreementsByPlanTemplateIdCountDesc = 'SERVICE_AGREEMENTS_BY_PLAN_TEMPLATE_ID__COUNT_DESC',
  ServiceAgreementsCountAsc = 'SERVICE_AGREEMENTS_COUNT_ASC',
  ServiceAgreementsCountDesc = 'SERVICE_AGREEMENTS_COUNT_DESC',
  ServiceAgreementsDistinctCountBlockRangeAsc = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  ServiceAgreementsDistinctCountBlockRangeDesc = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  ServiceAgreementsDistinctCountConsumerAddressAsc = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_CONSUMER_ADDRESS_ASC',
  ServiceAgreementsDistinctCountConsumerAddressDesc = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_CONSUMER_ADDRESS_DESC',
  ServiceAgreementsDistinctCountCreatedBlockAsc = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_CREATED_BLOCK_ASC',
  ServiceAgreementsDistinctCountCreatedBlockDesc = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_CREATED_BLOCK_DESC',
  ServiceAgreementsDistinctCountDeploymentIdAsc = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_DEPLOYMENT_ID_ASC',
  ServiceAgreementsDistinctCountDeploymentIdDesc = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_DEPLOYMENT_ID_DESC',
  ServiceAgreementsDistinctCountEndTimeAsc = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_END_TIME_ASC',
  ServiceAgreementsDistinctCountEndTimeDesc = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_END_TIME_DESC',
  ServiceAgreementsDistinctCountIdAsc = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_ID_ASC',
  ServiceAgreementsDistinctCountIdDesc = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_ID_DESC',
  ServiceAgreementsDistinctCountIndexerAddressAsc = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_INDEXER_ADDRESS_ASC',
  ServiceAgreementsDistinctCountIndexerAddressDesc = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_INDEXER_ADDRESS_DESC',
  ServiceAgreementsDistinctCountLastEventAsc = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_LAST_EVENT_ASC',
  ServiceAgreementsDistinctCountLastEventDesc = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_LAST_EVENT_DESC',
  ServiceAgreementsDistinctCountLockedAmountAsc = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_LOCKED_AMOUNT_ASC',
  ServiceAgreementsDistinctCountLockedAmountDesc = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_LOCKED_AMOUNT_DESC',
  ServiceAgreementsDistinctCountPeriodAsc = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_PERIOD_ASC',
  ServiceAgreementsDistinctCountPeriodDesc = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_PERIOD_DESC',
  ServiceAgreementsDistinctCountPlanTemplateIdAsc = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_PLAN_TEMPLATE_ID_ASC',
  ServiceAgreementsDistinctCountPlanTemplateIdDesc = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_PLAN_TEMPLATE_ID_DESC',
  ServiceAgreementsDistinctCountStartTimeAsc = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_START_TIME_ASC',
  ServiceAgreementsDistinctCountStartTimeDesc = 'SERVICE_AGREEMENTS_DISTINCT_COUNT_START_TIME_DESC',
  ServiceAgreementsMaxBlockRangeAsc = 'SERVICE_AGREEMENTS_MAX_BLOCK_RANGE_ASC',
  ServiceAgreementsMaxBlockRangeDesc = 'SERVICE_AGREEMENTS_MAX_BLOCK_RANGE_DESC',
  ServiceAgreementsMaxConsumerAddressAsc = 'SERVICE_AGREEMENTS_MAX_CONSUMER_ADDRESS_ASC',
  ServiceAgreementsMaxConsumerAddressDesc = 'SERVICE_AGREEMENTS_MAX_CONSUMER_ADDRESS_DESC',
  ServiceAgreementsMaxCreatedBlockAsc = 'SERVICE_AGREEMENTS_MAX_CREATED_BLOCK_ASC',
  ServiceAgreementsMaxCreatedBlockDesc = 'SERVICE_AGREEMENTS_MAX_CREATED_BLOCK_DESC',
  ServiceAgreementsMaxDeploymentIdAsc = 'SERVICE_AGREEMENTS_MAX_DEPLOYMENT_ID_ASC',
  ServiceAgreementsMaxDeploymentIdDesc = 'SERVICE_AGREEMENTS_MAX_DEPLOYMENT_ID_DESC',
  ServiceAgreementsMaxEndTimeAsc = 'SERVICE_AGREEMENTS_MAX_END_TIME_ASC',
  ServiceAgreementsMaxEndTimeDesc = 'SERVICE_AGREEMENTS_MAX_END_TIME_DESC',
  ServiceAgreementsMaxIdAsc = 'SERVICE_AGREEMENTS_MAX_ID_ASC',
  ServiceAgreementsMaxIdDesc = 'SERVICE_AGREEMENTS_MAX_ID_DESC',
  ServiceAgreementsMaxIndexerAddressAsc = 'SERVICE_AGREEMENTS_MAX_INDEXER_ADDRESS_ASC',
  ServiceAgreementsMaxIndexerAddressDesc = 'SERVICE_AGREEMENTS_MAX_INDEXER_ADDRESS_DESC',
  ServiceAgreementsMaxLastEventAsc = 'SERVICE_AGREEMENTS_MAX_LAST_EVENT_ASC',
  ServiceAgreementsMaxLastEventDesc = 'SERVICE_AGREEMENTS_MAX_LAST_EVENT_DESC',
  ServiceAgreementsMaxLockedAmountAsc = 'SERVICE_AGREEMENTS_MAX_LOCKED_AMOUNT_ASC',
  ServiceAgreementsMaxLockedAmountDesc = 'SERVICE_AGREEMENTS_MAX_LOCKED_AMOUNT_DESC',
  ServiceAgreementsMaxPeriodAsc = 'SERVICE_AGREEMENTS_MAX_PERIOD_ASC',
  ServiceAgreementsMaxPeriodDesc = 'SERVICE_AGREEMENTS_MAX_PERIOD_DESC',
  ServiceAgreementsMaxPlanTemplateIdAsc = 'SERVICE_AGREEMENTS_MAX_PLAN_TEMPLATE_ID_ASC',
  ServiceAgreementsMaxPlanTemplateIdDesc = 'SERVICE_AGREEMENTS_MAX_PLAN_TEMPLATE_ID_DESC',
  ServiceAgreementsMaxStartTimeAsc = 'SERVICE_AGREEMENTS_MAX_START_TIME_ASC',
  ServiceAgreementsMaxStartTimeDesc = 'SERVICE_AGREEMENTS_MAX_START_TIME_DESC',
  ServiceAgreementsMinBlockRangeAsc = 'SERVICE_AGREEMENTS_MIN_BLOCK_RANGE_ASC',
  ServiceAgreementsMinBlockRangeDesc = 'SERVICE_AGREEMENTS_MIN_BLOCK_RANGE_DESC',
  ServiceAgreementsMinConsumerAddressAsc = 'SERVICE_AGREEMENTS_MIN_CONSUMER_ADDRESS_ASC',
  ServiceAgreementsMinConsumerAddressDesc = 'SERVICE_AGREEMENTS_MIN_CONSUMER_ADDRESS_DESC',
  ServiceAgreementsMinCreatedBlockAsc = 'SERVICE_AGREEMENTS_MIN_CREATED_BLOCK_ASC',
  ServiceAgreementsMinCreatedBlockDesc = 'SERVICE_AGREEMENTS_MIN_CREATED_BLOCK_DESC',
  ServiceAgreementsMinDeploymentIdAsc = 'SERVICE_AGREEMENTS_MIN_DEPLOYMENT_ID_ASC',
  ServiceAgreementsMinDeploymentIdDesc = 'SERVICE_AGREEMENTS_MIN_DEPLOYMENT_ID_DESC',
  ServiceAgreementsMinEndTimeAsc = 'SERVICE_AGREEMENTS_MIN_END_TIME_ASC',
  ServiceAgreementsMinEndTimeDesc = 'SERVICE_AGREEMENTS_MIN_END_TIME_DESC',
  ServiceAgreementsMinIdAsc = 'SERVICE_AGREEMENTS_MIN_ID_ASC',
  ServiceAgreementsMinIdDesc = 'SERVICE_AGREEMENTS_MIN_ID_DESC',
  ServiceAgreementsMinIndexerAddressAsc = 'SERVICE_AGREEMENTS_MIN_INDEXER_ADDRESS_ASC',
  ServiceAgreementsMinIndexerAddressDesc = 'SERVICE_AGREEMENTS_MIN_INDEXER_ADDRESS_DESC',
  ServiceAgreementsMinLastEventAsc = 'SERVICE_AGREEMENTS_MIN_LAST_EVENT_ASC',
  ServiceAgreementsMinLastEventDesc = 'SERVICE_AGREEMENTS_MIN_LAST_EVENT_DESC',
  ServiceAgreementsMinLockedAmountAsc = 'SERVICE_AGREEMENTS_MIN_LOCKED_AMOUNT_ASC',
  ServiceAgreementsMinLockedAmountDesc = 'SERVICE_AGREEMENTS_MIN_LOCKED_AMOUNT_DESC',
  ServiceAgreementsMinPeriodAsc = 'SERVICE_AGREEMENTS_MIN_PERIOD_ASC',
  ServiceAgreementsMinPeriodDesc = 'SERVICE_AGREEMENTS_MIN_PERIOD_DESC',
  ServiceAgreementsMinPlanTemplateIdAsc = 'SERVICE_AGREEMENTS_MIN_PLAN_TEMPLATE_ID_ASC',
  ServiceAgreementsMinPlanTemplateIdDesc = 'SERVICE_AGREEMENTS_MIN_PLAN_TEMPLATE_ID_DESC',
  ServiceAgreementsMinStartTimeAsc = 'SERVICE_AGREEMENTS_MIN_START_TIME_ASC',
  ServiceAgreementsMinStartTimeDesc = 'SERVICE_AGREEMENTS_MIN_START_TIME_DESC',
  ServiceAgreementsStddevPopulationBlockRangeAsc = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  ServiceAgreementsStddevPopulationBlockRangeDesc = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  ServiceAgreementsStddevPopulationConsumerAddressAsc = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_CONSUMER_ADDRESS_ASC',
  ServiceAgreementsStddevPopulationConsumerAddressDesc = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_CONSUMER_ADDRESS_DESC',
  ServiceAgreementsStddevPopulationCreatedBlockAsc = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_CREATED_BLOCK_ASC',
  ServiceAgreementsStddevPopulationCreatedBlockDesc = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_CREATED_BLOCK_DESC',
  ServiceAgreementsStddevPopulationDeploymentIdAsc = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_DEPLOYMENT_ID_ASC',
  ServiceAgreementsStddevPopulationDeploymentIdDesc = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_DEPLOYMENT_ID_DESC',
  ServiceAgreementsStddevPopulationEndTimeAsc = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_END_TIME_ASC',
  ServiceAgreementsStddevPopulationEndTimeDesc = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_END_TIME_DESC',
  ServiceAgreementsStddevPopulationIdAsc = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_ID_ASC',
  ServiceAgreementsStddevPopulationIdDesc = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_ID_DESC',
  ServiceAgreementsStddevPopulationIndexerAddressAsc = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_INDEXER_ADDRESS_ASC',
  ServiceAgreementsStddevPopulationIndexerAddressDesc = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_INDEXER_ADDRESS_DESC',
  ServiceAgreementsStddevPopulationLastEventAsc = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_LAST_EVENT_ASC',
  ServiceAgreementsStddevPopulationLastEventDesc = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_LAST_EVENT_DESC',
  ServiceAgreementsStddevPopulationLockedAmountAsc = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_LOCKED_AMOUNT_ASC',
  ServiceAgreementsStddevPopulationLockedAmountDesc = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_LOCKED_AMOUNT_DESC',
  ServiceAgreementsStddevPopulationPeriodAsc = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_PERIOD_ASC',
  ServiceAgreementsStddevPopulationPeriodDesc = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_PERIOD_DESC',
  ServiceAgreementsStddevPopulationPlanTemplateIdAsc = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_PLAN_TEMPLATE_ID_ASC',
  ServiceAgreementsStddevPopulationPlanTemplateIdDesc = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_PLAN_TEMPLATE_ID_DESC',
  ServiceAgreementsStddevPopulationStartTimeAsc = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_START_TIME_ASC',
  ServiceAgreementsStddevPopulationStartTimeDesc = 'SERVICE_AGREEMENTS_STDDEV_POPULATION_START_TIME_DESC',
  ServiceAgreementsStddevSampleBlockRangeAsc = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  ServiceAgreementsStddevSampleBlockRangeDesc = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  ServiceAgreementsStddevSampleConsumerAddressAsc = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_CONSUMER_ADDRESS_ASC',
  ServiceAgreementsStddevSampleConsumerAddressDesc = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_CONSUMER_ADDRESS_DESC',
  ServiceAgreementsStddevSampleCreatedBlockAsc = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_CREATED_BLOCK_ASC',
  ServiceAgreementsStddevSampleCreatedBlockDesc = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_CREATED_BLOCK_DESC',
  ServiceAgreementsStddevSampleDeploymentIdAsc = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC',
  ServiceAgreementsStddevSampleDeploymentIdDesc = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC',
  ServiceAgreementsStddevSampleEndTimeAsc = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_END_TIME_ASC',
  ServiceAgreementsStddevSampleEndTimeDesc = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_END_TIME_DESC',
  ServiceAgreementsStddevSampleIdAsc = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_ID_ASC',
  ServiceAgreementsStddevSampleIdDesc = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_ID_DESC',
  ServiceAgreementsStddevSampleIndexerAddressAsc = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_INDEXER_ADDRESS_ASC',
  ServiceAgreementsStddevSampleIndexerAddressDesc = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_INDEXER_ADDRESS_DESC',
  ServiceAgreementsStddevSampleLastEventAsc = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_LAST_EVENT_ASC',
  ServiceAgreementsStddevSampleLastEventDesc = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_LAST_EVENT_DESC',
  ServiceAgreementsStddevSampleLockedAmountAsc = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_LOCKED_AMOUNT_ASC',
  ServiceAgreementsStddevSampleLockedAmountDesc = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_LOCKED_AMOUNT_DESC',
  ServiceAgreementsStddevSamplePeriodAsc = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_PERIOD_ASC',
  ServiceAgreementsStddevSamplePeriodDesc = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_PERIOD_DESC',
  ServiceAgreementsStddevSamplePlanTemplateIdAsc = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_PLAN_TEMPLATE_ID_ASC',
  ServiceAgreementsStddevSamplePlanTemplateIdDesc = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_PLAN_TEMPLATE_ID_DESC',
  ServiceAgreementsStddevSampleStartTimeAsc = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_START_TIME_ASC',
  ServiceAgreementsStddevSampleStartTimeDesc = 'SERVICE_AGREEMENTS_STDDEV_SAMPLE_START_TIME_DESC',
  ServiceAgreementsSumBlockRangeAsc = 'SERVICE_AGREEMENTS_SUM_BLOCK_RANGE_ASC',
  ServiceAgreementsSumBlockRangeDesc = 'SERVICE_AGREEMENTS_SUM_BLOCK_RANGE_DESC',
  ServiceAgreementsSumConsumerAddressAsc = 'SERVICE_AGREEMENTS_SUM_CONSUMER_ADDRESS_ASC',
  ServiceAgreementsSumConsumerAddressDesc = 'SERVICE_AGREEMENTS_SUM_CONSUMER_ADDRESS_DESC',
  ServiceAgreementsSumCreatedBlockAsc = 'SERVICE_AGREEMENTS_SUM_CREATED_BLOCK_ASC',
  ServiceAgreementsSumCreatedBlockDesc = 'SERVICE_AGREEMENTS_SUM_CREATED_BLOCK_DESC',
  ServiceAgreementsSumDeploymentIdAsc = 'SERVICE_AGREEMENTS_SUM_DEPLOYMENT_ID_ASC',
  ServiceAgreementsSumDeploymentIdDesc = 'SERVICE_AGREEMENTS_SUM_DEPLOYMENT_ID_DESC',
  ServiceAgreementsSumEndTimeAsc = 'SERVICE_AGREEMENTS_SUM_END_TIME_ASC',
  ServiceAgreementsSumEndTimeDesc = 'SERVICE_AGREEMENTS_SUM_END_TIME_DESC',
  ServiceAgreementsSumIdAsc = 'SERVICE_AGREEMENTS_SUM_ID_ASC',
  ServiceAgreementsSumIdDesc = 'SERVICE_AGREEMENTS_SUM_ID_DESC',
  ServiceAgreementsSumIndexerAddressAsc = 'SERVICE_AGREEMENTS_SUM_INDEXER_ADDRESS_ASC',
  ServiceAgreementsSumIndexerAddressDesc = 'SERVICE_AGREEMENTS_SUM_INDEXER_ADDRESS_DESC',
  ServiceAgreementsSumLastEventAsc = 'SERVICE_AGREEMENTS_SUM_LAST_EVENT_ASC',
  ServiceAgreementsSumLastEventDesc = 'SERVICE_AGREEMENTS_SUM_LAST_EVENT_DESC',
  ServiceAgreementsSumLockedAmountAsc = 'SERVICE_AGREEMENTS_SUM_LOCKED_AMOUNT_ASC',
  ServiceAgreementsSumLockedAmountDesc = 'SERVICE_AGREEMENTS_SUM_LOCKED_AMOUNT_DESC',
  ServiceAgreementsSumPeriodAsc = 'SERVICE_AGREEMENTS_SUM_PERIOD_ASC',
  ServiceAgreementsSumPeriodDesc = 'SERVICE_AGREEMENTS_SUM_PERIOD_DESC',
  ServiceAgreementsSumPlanTemplateIdAsc = 'SERVICE_AGREEMENTS_SUM_PLAN_TEMPLATE_ID_ASC',
  ServiceAgreementsSumPlanTemplateIdDesc = 'SERVICE_AGREEMENTS_SUM_PLAN_TEMPLATE_ID_DESC',
  ServiceAgreementsSumStartTimeAsc = 'SERVICE_AGREEMENTS_SUM_START_TIME_ASC',
  ServiceAgreementsSumStartTimeDesc = 'SERVICE_AGREEMENTS_SUM_START_TIME_DESC',
  ServiceAgreementsVariancePopulationBlockRangeAsc = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  ServiceAgreementsVariancePopulationBlockRangeDesc = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  ServiceAgreementsVariancePopulationConsumerAddressAsc = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_CONSUMER_ADDRESS_ASC',
  ServiceAgreementsVariancePopulationConsumerAddressDesc = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_CONSUMER_ADDRESS_DESC',
  ServiceAgreementsVariancePopulationCreatedBlockAsc = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_CREATED_BLOCK_ASC',
  ServiceAgreementsVariancePopulationCreatedBlockDesc = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_CREATED_BLOCK_DESC',
  ServiceAgreementsVariancePopulationDeploymentIdAsc = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC',
  ServiceAgreementsVariancePopulationDeploymentIdDesc = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC',
  ServiceAgreementsVariancePopulationEndTimeAsc = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_END_TIME_ASC',
  ServiceAgreementsVariancePopulationEndTimeDesc = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_END_TIME_DESC',
  ServiceAgreementsVariancePopulationIdAsc = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_ID_ASC',
  ServiceAgreementsVariancePopulationIdDesc = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_ID_DESC',
  ServiceAgreementsVariancePopulationIndexerAddressAsc = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_INDEXER_ADDRESS_ASC',
  ServiceAgreementsVariancePopulationIndexerAddressDesc = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_INDEXER_ADDRESS_DESC',
  ServiceAgreementsVariancePopulationLastEventAsc = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_LAST_EVENT_ASC',
  ServiceAgreementsVariancePopulationLastEventDesc = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_LAST_EVENT_DESC',
  ServiceAgreementsVariancePopulationLockedAmountAsc = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_LOCKED_AMOUNT_ASC',
  ServiceAgreementsVariancePopulationLockedAmountDesc = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_LOCKED_AMOUNT_DESC',
  ServiceAgreementsVariancePopulationPeriodAsc = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_PERIOD_ASC',
  ServiceAgreementsVariancePopulationPeriodDesc = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_PERIOD_DESC',
  ServiceAgreementsVariancePopulationPlanTemplateIdAsc = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_PLAN_TEMPLATE_ID_ASC',
  ServiceAgreementsVariancePopulationPlanTemplateIdDesc = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_PLAN_TEMPLATE_ID_DESC',
  ServiceAgreementsVariancePopulationStartTimeAsc = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_START_TIME_ASC',
  ServiceAgreementsVariancePopulationStartTimeDesc = 'SERVICE_AGREEMENTS_VARIANCE_POPULATION_START_TIME_DESC',
  ServiceAgreementsVarianceSampleBlockRangeAsc = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  ServiceAgreementsVarianceSampleBlockRangeDesc = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  ServiceAgreementsVarianceSampleConsumerAddressAsc = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_CONSUMER_ADDRESS_ASC',
  ServiceAgreementsVarianceSampleConsumerAddressDesc = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_CONSUMER_ADDRESS_DESC',
  ServiceAgreementsVarianceSampleCreatedBlockAsc = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_CREATED_BLOCK_ASC',
  ServiceAgreementsVarianceSampleCreatedBlockDesc = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_CREATED_BLOCK_DESC',
  ServiceAgreementsVarianceSampleDeploymentIdAsc = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC',
  ServiceAgreementsVarianceSampleDeploymentIdDesc = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC',
  ServiceAgreementsVarianceSampleEndTimeAsc = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_END_TIME_ASC',
  ServiceAgreementsVarianceSampleEndTimeDesc = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_END_TIME_DESC',
  ServiceAgreementsVarianceSampleIdAsc = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_ID_ASC',
  ServiceAgreementsVarianceSampleIdDesc = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_ID_DESC',
  ServiceAgreementsVarianceSampleIndexerAddressAsc = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_INDEXER_ADDRESS_ASC',
  ServiceAgreementsVarianceSampleIndexerAddressDesc = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_INDEXER_ADDRESS_DESC',
  ServiceAgreementsVarianceSampleLastEventAsc = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_LAST_EVENT_ASC',
  ServiceAgreementsVarianceSampleLastEventDesc = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_LAST_EVENT_DESC',
  ServiceAgreementsVarianceSampleLockedAmountAsc = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_LOCKED_AMOUNT_ASC',
  ServiceAgreementsVarianceSampleLockedAmountDesc = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_LOCKED_AMOUNT_DESC',
  ServiceAgreementsVarianceSamplePeriodAsc = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_PERIOD_ASC',
  ServiceAgreementsVarianceSamplePeriodDesc = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_PERIOD_DESC',
  ServiceAgreementsVarianceSamplePlanTemplateIdAsc = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_PLAN_TEMPLATE_ID_ASC',
  ServiceAgreementsVarianceSamplePlanTemplateIdDesc = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_PLAN_TEMPLATE_ID_DESC',
  ServiceAgreementsVarianceSampleStartTimeAsc = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_START_TIME_ASC',
  ServiceAgreementsVarianceSampleStartTimeDesc = 'SERVICE_AGREEMENTS_VARIANCE_SAMPLE_START_TIME_DESC'
}

export type PlanVariancePopulationAggregateFilter = {
  createdBlock?: InputMaybe<BigFloatFilter>;
  price?: InputMaybe<BigFloatFilter>;
};

export type PlanVariancePopulationAggregates = {
  __typename?: 'PlanVariancePopulationAggregates';
  /** Population variance of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of price across the matching connection */
  price?: Maybe<Scalars['BigFloat']['output']>;
};

export type PlanVarianceSampleAggregateFilter = {
  createdBlock?: InputMaybe<BigFloatFilter>;
  price?: InputMaybe<BigFloatFilter>;
};

export type PlanVarianceSampleAggregates = {
  __typename?: 'PlanVarianceSampleAggregates';
  /** Sample variance of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of price across the matching connection */
  price?: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `Plan` values. */
export type PlansConnection = {
  __typename?: 'PlansConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<PlanAggregates>;
  /** A list of edges which contains the `Plan` and cursor to aid in pagination. */
  edges: Array<PlansEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<PlanAggregates>>;
  /** A list of `Plan` objects. */
  nodes: Array<Maybe<Plan>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Plan` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Plan` values. */
export type PlansConnectionGroupedAggregatesArgs = {
  groupBy: Array<PlansGroupBy>;
  having?: InputMaybe<PlansHavingInput>;
};

/** A `Plan` edge in the connection. */
export type PlansEdge = {
  __typename?: 'PlansEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `Plan` at the end of the edge. */
  node?: Maybe<Plan>;
};

/** Grouping methods for `Plan` for usage during aggregation. */
export enum PlansGroupBy {
  Active = 'ACTIVE',
  CreatedBlock = 'CREATED_BLOCK',
  Creator = 'CREATOR',
  DeploymentId = 'DEPLOYMENT_ID',
  Id = 'ID',
  LastEvent = 'LAST_EVENT',
  PlanTemplateId = 'PLAN_TEMPLATE_ID',
  Price = 'PRICE'
}

export type PlansHavingAverageInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
  price?: InputMaybe<HavingBigfloatFilter>;
};

export type PlansHavingDistinctCountInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
  price?: InputMaybe<HavingBigfloatFilter>;
};

/** Conditions for `Plan` aggregates. */
export type PlansHavingInput = {
  AND?: InputMaybe<Array<PlansHavingInput>>;
  OR?: InputMaybe<Array<PlansHavingInput>>;
  average?: InputMaybe<PlansHavingAverageInput>;
  distinctCount?: InputMaybe<PlansHavingDistinctCountInput>;
  max?: InputMaybe<PlansHavingMaxInput>;
  min?: InputMaybe<PlansHavingMinInput>;
  stddevPopulation?: InputMaybe<PlansHavingStddevPopulationInput>;
  stddevSample?: InputMaybe<PlansHavingStddevSampleInput>;
  sum?: InputMaybe<PlansHavingSumInput>;
  variancePopulation?: InputMaybe<PlansHavingVariancePopulationInput>;
  varianceSample?: InputMaybe<PlansHavingVarianceSampleInput>;
};

export type PlansHavingMaxInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
  price?: InputMaybe<HavingBigfloatFilter>;
};

export type PlansHavingMinInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
  price?: InputMaybe<HavingBigfloatFilter>;
};

export type PlansHavingStddevPopulationInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
  price?: InputMaybe<HavingBigfloatFilter>;
};

export type PlansHavingStddevSampleInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
  price?: InputMaybe<HavingBigfloatFilter>;
};

export type PlansHavingSumInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
  price?: InputMaybe<HavingBigfloatFilter>;
};

export type PlansHavingVariancePopulationInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
  price?: InputMaybe<HavingBigfloatFilter>;
};

export type PlansHavingVarianceSampleInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
  price?: InputMaybe<HavingBigfloatFilter>;
};

/** Methods to use when ordering `Plan`. */
export enum PlansOrderBy {
  ActiveAsc = 'ACTIVE_ASC',
  ActiveDesc = 'ACTIVE_DESC',
  CreatedBlockAsc = 'CREATED_BLOCK_ASC',
  CreatedBlockDesc = 'CREATED_BLOCK_DESC',
  CreatorAsc = 'CREATOR_ASC',
  CreatorDesc = 'CREATOR_DESC',
  DeploymentByDeploymentIdCreatedBlockAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_ASC',
  DeploymentByDeploymentIdCreatedBlockDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_DESC',
  DeploymentByDeploymentIdCreatedTimestampAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_ASC',
  DeploymentByDeploymentIdCreatedTimestampDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_DESC',
  DeploymentByDeploymentIdIdAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__ID_ASC',
  DeploymentByDeploymentIdIdDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__ID_DESC',
  DeploymentByDeploymentIdLastEventAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_ASC',
  DeploymentByDeploymentIdLastEventDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_DESC',
  DeploymentByDeploymentIdMetadataAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_ASC',
  DeploymentByDeploymentIdMetadataDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_DESC',
  DeploymentByDeploymentIdProjectIdAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_ASC',
  DeploymentByDeploymentIdProjectIdDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_DESC',
  DeploymentIdAsc = 'DEPLOYMENT_ID_ASC',
  DeploymentIdDesc = 'DEPLOYMENT_ID_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  LastEventAsc = 'LAST_EVENT_ASC',
  LastEventDesc = 'LAST_EVENT_DESC',
  Natural = 'NATURAL',
  PlanTemplateByPlanTemplateIdActiveAsc = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__ACTIVE_ASC',
  PlanTemplateByPlanTemplateIdActiveDesc = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__ACTIVE_DESC',
  PlanTemplateByPlanTemplateIdCreatedBlockAsc = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__CREATED_BLOCK_ASC',
  PlanTemplateByPlanTemplateIdCreatedBlockDesc = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__CREATED_BLOCK_DESC',
  PlanTemplateByPlanTemplateIdDailyReqCapAsc = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__DAILY_REQ_CAP_ASC',
  PlanTemplateByPlanTemplateIdDailyReqCapDesc = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__DAILY_REQ_CAP_DESC',
  PlanTemplateByPlanTemplateIdIdAsc = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__ID_ASC',
  PlanTemplateByPlanTemplateIdIdDesc = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__ID_DESC',
  PlanTemplateByPlanTemplateIdLastEventAsc = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__LAST_EVENT_ASC',
  PlanTemplateByPlanTemplateIdLastEventDesc = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__LAST_EVENT_DESC',
  PlanTemplateByPlanTemplateIdMetadataAsc = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__METADATA_ASC',
  PlanTemplateByPlanTemplateIdMetadataDesc = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__METADATA_DESC',
  PlanTemplateByPlanTemplateIdPeriodAsc = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__PERIOD_ASC',
  PlanTemplateByPlanTemplateIdPeriodDesc = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__PERIOD_DESC',
  PlanTemplateByPlanTemplateIdPriceTokenAsc = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__PRICE_TOKEN_ASC',
  PlanTemplateByPlanTemplateIdPriceTokenDesc = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__PRICE_TOKEN_DESC',
  PlanTemplateByPlanTemplateIdRateLimitAsc = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__RATE_LIMIT_ASC',
  PlanTemplateByPlanTemplateIdRateLimitDesc = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__RATE_LIMIT_DESC',
  PlanTemplateIdAsc = 'PLAN_TEMPLATE_ID_ASC',
  PlanTemplateIdDesc = 'PLAN_TEMPLATE_ID_DESC',
  PriceAsc = 'PRICE_ASC',
  PriceDesc = 'PRICE_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

export type PriceOracle = Node & {
  __typename?: 'PriceOracle';
  afterPrice: Scalars['BigFloat']['output'];
  beforePrice: Scalars['BigFloat']['output'];
  createdBlock?: Maybe<Scalars['Int']['output']>;
  fromToken: Scalars['String']['output'];
  id: Scalars['String']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  toToken: Scalars['String']['output'];
};

export type PriceOracleAggregates = {
  __typename?: 'PriceOracleAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  average?: Maybe<PriceOracleAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  distinctCount?: Maybe<PriceOracleDistinctCountAggregates>;
  keys?: Maybe<Array<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  max?: Maybe<PriceOracleMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  min?: Maybe<PriceOracleMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevPopulation?: Maybe<PriceOracleStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevSample?: Maybe<PriceOracleStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  sum?: Maybe<PriceOracleSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  variancePopulation?: Maybe<PriceOracleVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  varianceSample?: Maybe<PriceOracleVarianceSampleAggregates>;
};

export type PriceOracleAverageAggregates = {
  __typename?: 'PriceOracleAverageAggregates';
  /** Mean average of afterPrice across the matching connection */
  afterPrice?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of beforePrice across the matching connection */
  beforePrice?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
};

export type PriceOracleDistinctCountAggregates = {
  __typename?: 'PriceOracleDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  _blockRange?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  _id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of afterPrice across the matching connection */
  afterPrice?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of beforePrice across the matching connection */
  beforePrice?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of fromToken across the matching connection */
  fromToken?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of toToken across the matching connection */
  toToken?: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `PriceOracle` object types. All fields are combined with a logical ‘and.’ */
export type PriceOracleFilter = {
  /** Filter by the object’s `afterPrice` field. */
  afterPrice?: InputMaybe<BigFloatFilter>;
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<PriceOracleFilter>>;
  /** Filter by the object’s `beforePrice` field. */
  beforePrice?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `createdBlock` field. */
  createdBlock?: InputMaybe<IntFilter>;
  /** Filter by the object’s `fromToken` field. */
  fromToken?: InputMaybe<StringFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<PriceOracleFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<PriceOracleFilter>>;
  /** Filter by the object’s `toToken` field. */
  toToken?: InputMaybe<StringFilter>;
};

export type PriceOracleMaxAggregates = {
  __typename?: 'PriceOracleMaxAggregates';
  /** Maximum of afterPrice across the matching connection */
  afterPrice?: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of beforePrice across the matching connection */
  beforePrice?: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['Int']['output']>;
};

export type PriceOracleMinAggregates = {
  __typename?: 'PriceOracleMinAggregates';
  /** Minimum of afterPrice across the matching connection */
  afterPrice?: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of beforePrice across the matching connection */
  beforePrice?: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['Int']['output']>;
};

export type PriceOracleStddevPopulationAggregates = {
  __typename?: 'PriceOracleStddevPopulationAggregates';
  /** Population standard deviation of afterPrice across the matching connection */
  afterPrice?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of beforePrice across the matching connection */
  beforePrice?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
};

export type PriceOracleStddevSampleAggregates = {
  __typename?: 'PriceOracleStddevSampleAggregates';
  /** Sample standard deviation of afterPrice across the matching connection */
  afterPrice?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of beforePrice across the matching connection */
  beforePrice?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
};

export type PriceOracleSumAggregates = {
  __typename?: 'PriceOracleSumAggregates';
  /** Sum of afterPrice across the matching connection */
  afterPrice: Scalars['BigFloat']['output'];
  /** Sum of beforePrice across the matching connection */
  beforePrice: Scalars['BigFloat']['output'];
  /** Sum of createdBlock across the matching connection */
  createdBlock: Scalars['BigInt']['output'];
};

export type PriceOracleVariancePopulationAggregates = {
  __typename?: 'PriceOracleVariancePopulationAggregates';
  /** Population variance of afterPrice across the matching connection */
  afterPrice?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of beforePrice across the matching connection */
  beforePrice?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
};

export type PriceOracleVarianceSampleAggregates = {
  __typename?: 'PriceOracleVarianceSampleAggregates';
  /** Sample variance of afterPrice across the matching connection */
  afterPrice?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of beforePrice across the matching connection */
  beforePrice?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `PriceOracle` values. */
export type PriceOraclesConnection = {
  __typename?: 'PriceOraclesConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<PriceOracleAggregates>;
  /** A list of edges which contains the `PriceOracle` and cursor to aid in pagination. */
  edges: Array<PriceOraclesEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<PriceOracleAggregates>>;
  /** A list of `PriceOracle` objects. */
  nodes: Array<Maybe<PriceOracle>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `PriceOracle` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `PriceOracle` values. */
export type PriceOraclesConnectionGroupedAggregatesArgs = {
  groupBy: Array<PriceOraclesGroupBy>;
  having?: InputMaybe<PriceOraclesHavingInput>;
};

/** A `PriceOracle` edge in the connection. */
export type PriceOraclesEdge = {
  __typename?: 'PriceOraclesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `PriceOracle` at the end of the edge. */
  node?: Maybe<PriceOracle>;
};

/** Grouping methods for `PriceOracle` for usage during aggregation. */
export enum PriceOraclesGroupBy {
  AfterPrice = 'AFTER_PRICE',
  BeforePrice = 'BEFORE_PRICE',
  CreatedBlock = 'CREATED_BLOCK',
  FromToken = 'FROM_TOKEN',
  Id = 'ID',
  ToToken = 'TO_TOKEN'
}

export type PriceOraclesHavingAverageInput = {
  afterPrice?: InputMaybe<HavingBigfloatFilter>;
  beforePrice?: InputMaybe<HavingBigfloatFilter>;
  createdBlock?: InputMaybe<HavingIntFilter>;
};

export type PriceOraclesHavingDistinctCountInput = {
  afterPrice?: InputMaybe<HavingBigfloatFilter>;
  beforePrice?: InputMaybe<HavingBigfloatFilter>;
  createdBlock?: InputMaybe<HavingIntFilter>;
};

/** Conditions for `PriceOracle` aggregates. */
export type PriceOraclesHavingInput = {
  AND?: InputMaybe<Array<PriceOraclesHavingInput>>;
  OR?: InputMaybe<Array<PriceOraclesHavingInput>>;
  average?: InputMaybe<PriceOraclesHavingAverageInput>;
  distinctCount?: InputMaybe<PriceOraclesHavingDistinctCountInput>;
  max?: InputMaybe<PriceOraclesHavingMaxInput>;
  min?: InputMaybe<PriceOraclesHavingMinInput>;
  stddevPopulation?: InputMaybe<PriceOraclesHavingStddevPopulationInput>;
  stddevSample?: InputMaybe<PriceOraclesHavingStddevSampleInput>;
  sum?: InputMaybe<PriceOraclesHavingSumInput>;
  variancePopulation?: InputMaybe<PriceOraclesHavingVariancePopulationInput>;
  varianceSample?: InputMaybe<PriceOraclesHavingVarianceSampleInput>;
};

export type PriceOraclesHavingMaxInput = {
  afterPrice?: InputMaybe<HavingBigfloatFilter>;
  beforePrice?: InputMaybe<HavingBigfloatFilter>;
  createdBlock?: InputMaybe<HavingIntFilter>;
};

export type PriceOraclesHavingMinInput = {
  afterPrice?: InputMaybe<HavingBigfloatFilter>;
  beforePrice?: InputMaybe<HavingBigfloatFilter>;
  createdBlock?: InputMaybe<HavingIntFilter>;
};

export type PriceOraclesHavingStddevPopulationInput = {
  afterPrice?: InputMaybe<HavingBigfloatFilter>;
  beforePrice?: InputMaybe<HavingBigfloatFilter>;
  createdBlock?: InputMaybe<HavingIntFilter>;
};

export type PriceOraclesHavingStddevSampleInput = {
  afterPrice?: InputMaybe<HavingBigfloatFilter>;
  beforePrice?: InputMaybe<HavingBigfloatFilter>;
  createdBlock?: InputMaybe<HavingIntFilter>;
};

export type PriceOraclesHavingSumInput = {
  afterPrice?: InputMaybe<HavingBigfloatFilter>;
  beforePrice?: InputMaybe<HavingBigfloatFilter>;
  createdBlock?: InputMaybe<HavingIntFilter>;
};

export type PriceOraclesHavingVariancePopulationInput = {
  afterPrice?: InputMaybe<HavingBigfloatFilter>;
  beforePrice?: InputMaybe<HavingBigfloatFilter>;
  createdBlock?: InputMaybe<HavingIntFilter>;
};

export type PriceOraclesHavingVarianceSampleInput = {
  afterPrice?: InputMaybe<HavingBigfloatFilter>;
  beforePrice?: InputMaybe<HavingBigfloatFilter>;
  createdBlock?: InputMaybe<HavingIntFilter>;
};

/** Methods to use when ordering `PriceOracle`. */
export enum PriceOraclesOrderBy {
  AfterPriceAsc = 'AFTER_PRICE_ASC',
  AfterPriceDesc = 'AFTER_PRICE_DESC',
  BeforePriceAsc = 'BEFORE_PRICE_ASC',
  BeforePriceDesc = 'BEFORE_PRICE_DESC',
  CreatedBlockAsc = 'CREATED_BLOCK_ASC',
  CreatedBlockDesc = 'CREATED_BLOCK_DESC',
  FromTokenAsc = 'FROM_TOKEN_ASC',
  FromTokenDesc = 'FROM_TOKEN_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  ToTokenAsc = 'TO_TOKEN_ASC',
  ToTokenDesc = 'TO_TOKEN_DESC'
}

export type Project = Node & {
  __typename?: 'Project';
  boostAllocationRatio: Scalars['BigFloat']['output'];
  /** Reads and enables pagination through a set of `ConsumerQueryRewardSummary`. */
  consumerQueryRewardSummaries: ConsumerQueryRewardSummariesConnection;
  /** Reads and enables pagination through a set of `ConsumerQueryReward`. */
  consumerQueryRewards: ConsumerQueryRewardsConnection;
  createdBlock?: Maybe<Scalars['Int']['output']>;
  createdTimestamp: Scalars['Datetime']['output'];
  /** Reads and enables pagination through a set of `DeploymentBoosterSummary`. */
  deploymentBoosterSummaries: DeploymentBoosterSummariesConnection;
  /** Reads and enables pagination through a set of `DeploymentBooster`. */
  deploymentBoosters: DeploymentBoostersConnection;
  deploymentId: Scalars['String']['output'];
  deploymentMetadata: Scalars['String']['output'];
  /** Reads and enables pagination through a set of `Deployment`. */
  deployments: DeploymentsConnection;
  /** Reads and enables pagination through a set of `Deployment`. */
  deploymentsByConsumerQueryRewardProjectIdAndDeploymentId: ProjectDeploymentsByConsumerQueryRewardProjectIdAndDeploymentIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Deployment`. */
  deploymentsByConsumerQueryRewardSummaryProjectIdAndDeploymentId: ProjectDeploymentsByConsumerQueryRewardSummaryProjectIdAndDeploymentIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Deployment`. */
  deploymentsByDeploymentBoosterProjectIdAndDeploymentId: ProjectDeploymentsByDeploymentBoosterProjectIdAndDeploymentIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Deployment`. */
  deploymentsByDeploymentBoosterSummaryProjectIdAndDeploymentId: ProjectDeploymentsByDeploymentBoosterSummaryProjectIdAndDeploymentIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Deployment`. */
  deploymentsByIndexerAllocationProjectIdAndDeploymentId: ProjectDeploymentsByIndexerAllocationProjectIdAndDeploymentIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Deployment`. */
  deploymentsByIndexerAllocationRewardProjectIdAndDeploymentId: ProjectDeploymentsByIndexerAllocationRewardProjectIdAndDeploymentIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Deployment`. */
  deploymentsByIndexerAllocationRewardSummaryProjectIdAndDeploymentId: ProjectDeploymentsByIndexerAllocationRewardSummaryProjectIdAndDeploymentIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Deployment`. */
  deploymentsByIndexerAllocationSummaryProjectIdAndDeploymentId: ProjectDeploymentsByIndexerAllocationSummaryProjectIdAndDeploymentIdManyToManyConnection;
  id: Scalars['String']['output'];
  /** Reads and enables pagination through a set of `IndexerAllocationRewardSummary`. */
  indexerAllocationRewardSummaries: IndexerAllocationRewardSummariesConnection;
  /** Reads and enables pagination through a set of `IndexerAllocationReward`. */
  indexerAllocationRewards: IndexerAllocationRewardsConnection;
  /** Reads and enables pagination through a set of `IndexerAllocationSummary`. */
  indexerAllocationSummaries: IndexerAllocationSummariesConnection;
  /** Reads and enables pagination through a set of `IndexerAllocation`. */
  indexerAllocations: IndexerAllocationsConnection;
  /** Reads and enables pagination through a set of `Indexer`. */
  indexersByIndexerAllocationProjectIdAndIndexerId: ProjectIndexersByIndexerAllocationProjectIdAndIndexerIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Indexer`. */
  indexersByIndexerAllocationRewardProjectIdAndIndexerId: ProjectIndexersByIndexerAllocationRewardProjectIdAndIndexerIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Indexer`. */
  indexersByIndexerAllocationRewardSummaryProjectIdAndIndexerId: ProjectIndexersByIndexerAllocationRewardSummaryProjectIdAndIndexerIdManyToManyConnection;
  /** Reads and enables pagination through a set of `Indexer`. */
  indexersByIndexerAllocationSummaryProjectIdAndIndexerId: ProjectIndexersByIndexerAllocationSummaryProjectIdAndIndexerIdManyToManyConnection;
  lastEvent?: Maybe<Scalars['String']['output']>;
  metadata: Scalars['String']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  owner: Scalars['String']['output'];
  totalAllocation: Scalars['BigFloat']['output'];
  totalBoost: Scalars['BigFloat']['output'];
  totalReward: Scalars['BigFloat']['output'];
  type: ProjectType;
  updatedTimestamp: Scalars['Datetime']['output'];
};


export type ProjectConsumerQueryRewardSummariesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Consumer_Query_Reward_Summaries_Distinct_Enum>>>;
  filter?: InputMaybe<ConsumerQueryRewardSummaryFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ConsumerQueryRewardSummariesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type ProjectConsumerQueryRewardsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Consumer_Query_Rewards_Distinct_Enum>>>;
  filter?: InputMaybe<ConsumerQueryRewardFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ConsumerQueryRewardsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type ProjectDeploymentBoosterSummariesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Deployment_Booster_Summaries_Distinct_Enum>>>;
  filter?: InputMaybe<DeploymentBoosterSummaryFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<DeploymentBoosterSummariesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type ProjectDeploymentBoostersArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Deployment_Boosters_Distinct_Enum>>>;
  filter?: InputMaybe<DeploymentBoosterFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<DeploymentBoostersOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type ProjectDeploymentsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Deployments_Distinct_Enum>>>;
  filter?: InputMaybe<DeploymentFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<DeploymentsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type ProjectDeploymentsByConsumerQueryRewardProjectIdAndDeploymentIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Deployments_Distinct_Enum>>>;
  filter?: InputMaybe<DeploymentFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<DeploymentsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type ProjectDeploymentsByConsumerQueryRewardSummaryProjectIdAndDeploymentIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Deployments_Distinct_Enum>>>;
  filter?: InputMaybe<DeploymentFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<DeploymentsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type ProjectDeploymentsByDeploymentBoosterProjectIdAndDeploymentIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Deployments_Distinct_Enum>>>;
  filter?: InputMaybe<DeploymentFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<DeploymentsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type ProjectDeploymentsByDeploymentBoosterSummaryProjectIdAndDeploymentIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Deployments_Distinct_Enum>>>;
  filter?: InputMaybe<DeploymentFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<DeploymentsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type ProjectDeploymentsByIndexerAllocationProjectIdAndDeploymentIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Deployments_Distinct_Enum>>>;
  filter?: InputMaybe<DeploymentFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<DeploymentsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type ProjectDeploymentsByIndexerAllocationRewardProjectIdAndDeploymentIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Deployments_Distinct_Enum>>>;
  filter?: InputMaybe<DeploymentFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<DeploymentsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type ProjectDeploymentsByIndexerAllocationRewardSummaryProjectIdAndDeploymentIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Deployments_Distinct_Enum>>>;
  filter?: InputMaybe<DeploymentFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<DeploymentsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type ProjectDeploymentsByIndexerAllocationSummaryProjectIdAndDeploymentIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Deployments_Distinct_Enum>>>;
  filter?: InputMaybe<DeploymentFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<DeploymentsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type ProjectIndexerAllocationRewardSummariesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Allocation_Reward_Summaries_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerAllocationRewardSummaryFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexerAllocationRewardSummariesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type ProjectIndexerAllocationRewardsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Allocation_Rewards_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerAllocationRewardFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexerAllocationRewardsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type ProjectIndexerAllocationSummariesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Allocation_Summaries_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerAllocationSummaryFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexerAllocationSummariesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type ProjectIndexerAllocationsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Allocations_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerAllocationFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexerAllocationsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type ProjectIndexersByIndexerAllocationProjectIdAndIndexerIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexers_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexersOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type ProjectIndexersByIndexerAllocationRewardProjectIdAndIndexerIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexers_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexersOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type ProjectIndexersByIndexerAllocationRewardSummaryProjectIdAndIndexerIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexers_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexersOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type ProjectIndexersByIndexerAllocationSummaryProjectIdAndIndexerIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexers_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexersOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

export type ProjectAggregates = {
  __typename?: 'ProjectAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  average?: Maybe<ProjectAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  distinctCount?: Maybe<ProjectDistinctCountAggregates>;
  keys?: Maybe<Array<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  max?: Maybe<ProjectMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  min?: Maybe<ProjectMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevPopulation?: Maybe<ProjectStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevSample?: Maybe<ProjectStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  sum?: Maybe<ProjectSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  variancePopulation?: Maybe<ProjectVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  varianceSample?: Maybe<ProjectVarianceSampleAggregates>;
};

export type ProjectAverageAggregates = {
  __typename?: 'ProjectAverageAggregates';
  /** Mean average of boostAllocationRatio across the matching connection */
  boostAllocationRatio?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of totalAllocation across the matching connection */
  totalAllocation?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of totalBoost across the matching connection */
  totalBoost?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of totalReward across the matching connection */
  totalReward?: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `Deployment` values, with data from `ConsumerQueryReward`. */
export type ProjectDeploymentsByConsumerQueryRewardProjectIdAndDeploymentIdManyToManyConnection = {
  __typename?: 'ProjectDeploymentsByConsumerQueryRewardProjectIdAndDeploymentIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<DeploymentAggregates>;
  /** A list of edges which contains the `Deployment`, info from the `ConsumerQueryReward`, and the cursor to aid in pagination. */
  edges: Array<ProjectDeploymentsByConsumerQueryRewardProjectIdAndDeploymentIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<DeploymentAggregates>>;
  /** A list of `Deployment` objects. */
  nodes: Array<Maybe<Deployment>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Deployment` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Deployment` values, with data from `ConsumerQueryReward`. */
export type ProjectDeploymentsByConsumerQueryRewardProjectIdAndDeploymentIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: Array<DeploymentsGroupBy>;
  having?: InputMaybe<DeploymentsHavingInput>;
};

/** A `Deployment` edge in the connection, with data from `ConsumerQueryReward`. */
export type ProjectDeploymentsByConsumerQueryRewardProjectIdAndDeploymentIdManyToManyEdge = {
  __typename?: 'ProjectDeploymentsByConsumerQueryRewardProjectIdAndDeploymentIdManyToManyEdge';
  /** Reads and enables pagination through a set of `ConsumerQueryReward`. */
  consumerQueryRewards: ConsumerQueryRewardsConnection;
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `Deployment` at the end of the edge. */
  node?: Maybe<Deployment>;
};


/** A `Deployment` edge in the connection, with data from `ConsumerQueryReward`. */
export type ProjectDeploymentsByConsumerQueryRewardProjectIdAndDeploymentIdManyToManyEdgeConsumerQueryRewardsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Consumer_Query_Rewards_Distinct_Enum>>>;
  filter?: InputMaybe<ConsumerQueryRewardFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ConsumerQueryRewardsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

/** A connection to a list of `Deployment` values, with data from `ConsumerQueryRewardSummary`. */
export type ProjectDeploymentsByConsumerQueryRewardSummaryProjectIdAndDeploymentIdManyToManyConnection = {
  __typename?: 'ProjectDeploymentsByConsumerQueryRewardSummaryProjectIdAndDeploymentIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<DeploymentAggregates>;
  /** A list of edges which contains the `Deployment`, info from the `ConsumerQueryRewardSummary`, and the cursor to aid in pagination. */
  edges: Array<ProjectDeploymentsByConsumerQueryRewardSummaryProjectIdAndDeploymentIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<DeploymentAggregates>>;
  /** A list of `Deployment` objects. */
  nodes: Array<Maybe<Deployment>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Deployment` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Deployment` values, with data from `ConsumerQueryRewardSummary`. */
export type ProjectDeploymentsByConsumerQueryRewardSummaryProjectIdAndDeploymentIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: Array<DeploymentsGroupBy>;
  having?: InputMaybe<DeploymentsHavingInput>;
};

/** A `Deployment` edge in the connection, with data from `ConsumerQueryRewardSummary`. */
export type ProjectDeploymentsByConsumerQueryRewardSummaryProjectIdAndDeploymentIdManyToManyEdge = {
  __typename?: 'ProjectDeploymentsByConsumerQueryRewardSummaryProjectIdAndDeploymentIdManyToManyEdge';
  /** Reads and enables pagination through a set of `ConsumerQueryRewardSummary`. */
  consumerQueryRewardSummaries: ConsumerQueryRewardSummariesConnection;
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `Deployment` at the end of the edge. */
  node?: Maybe<Deployment>;
};


/** A `Deployment` edge in the connection, with data from `ConsumerQueryRewardSummary`. */
export type ProjectDeploymentsByConsumerQueryRewardSummaryProjectIdAndDeploymentIdManyToManyEdgeConsumerQueryRewardSummariesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Consumer_Query_Reward_Summaries_Distinct_Enum>>>;
  filter?: InputMaybe<ConsumerQueryRewardSummaryFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ConsumerQueryRewardSummariesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

/** A connection to a list of `Deployment` values, with data from `DeploymentBooster`. */
export type ProjectDeploymentsByDeploymentBoosterProjectIdAndDeploymentIdManyToManyConnection = {
  __typename?: 'ProjectDeploymentsByDeploymentBoosterProjectIdAndDeploymentIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<DeploymentAggregates>;
  /** A list of edges which contains the `Deployment`, info from the `DeploymentBooster`, and the cursor to aid in pagination. */
  edges: Array<ProjectDeploymentsByDeploymentBoosterProjectIdAndDeploymentIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<DeploymentAggregates>>;
  /** A list of `Deployment` objects. */
  nodes: Array<Maybe<Deployment>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Deployment` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Deployment` values, with data from `DeploymentBooster`. */
export type ProjectDeploymentsByDeploymentBoosterProjectIdAndDeploymentIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: Array<DeploymentsGroupBy>;
  having?: InputMaybe<DeploymentsHavingInput>;
};

/** A `Deployment` edge in the connection, with data from `DeploymentBooster`. */
export type ProjectDeploymentsByDeploymentBoosterProjectIdAndDeploymentIdManyToManyEdge = {
  __typename?: 'ProjectDeploymentsByDeploymentBoosterProjectIdAndDeploymentIdManyToManyEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `DeploymentBooster`. */
  deploymentBoosters: DeploymentBoostersConnection;
  /** The `Deployment` at the end of the edge. */
  node?: Maybe<Deployment>;
};


/** A `Deployment` edge in the connection, with data from `DeploymentBooster`. */
export type ProjectDeploymentsByDeploymentBoosterProjectIdAndDeploymentIdManyToManyEdgeDeploymentBoostersArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Deployment_Boosters_Distinct_Enum>>>;
  filter?: InputMaybe<DeploymentBoosterFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<DeploymentBoostersOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

/** A connection to a list of `Deployment` values, with data from `DeploymentBoosterSummary`. */
export type ProjectDeploymentsByDeploymentBoosterSummaryProjectIdAndDeploymentIdManyToManyConnection = {
  __typename?: 'ProjectDeploymentsByDeploymentBoosterSummaryProjectIdAndDeploymentIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<DeploymentAggregates>;
  /** A list of edges which contains the `Deployment`, info from the `DeploymentBoosterSummary`, and the cursor to aid in pagination. */
  edges: Array<ProjectDeploymentsByDeploymentBoosterSummaryProjectIdAndDeploymentIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<DeploymentAggregates>>;
  /** A list of `Deployment` objects. */
  nodes: Array<Maybe<Deployment>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Deployment` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Deployment` values, with data from `DeploymentBoosterSummary`. */
export type ProjectDeploymentsByDeploymentBoosterSummaryProjectIdAndDeploymentIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: Array<DeploymentsGroupBy>;
  having?: InputMaybe<DeploymentsHavingInput>;
};

/** A `Deployment` edge in the connection, with data from `DeploymentBoosterSummary`. */
export type ProjectDeploymentsByDeploymentBoosterSummaryProjectIdAndDeploymentIdManyToManyEdge = {
  __typename?: 'ProjectDeploymentsByDeploymentBoosterSummaryProjectIdAndDeploymentIdManyToManyEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `DeploymentBoosterSummary`. */
  deploymentBoosterSummaries: DeploymentBoosterSummariesConnection;
  /** The `Deployment` at the end of the edge. */
  node?: Maybe<Deployment>;
};


/** A `Deployment` edge in the connection, with data from `DeploymentBoosterSummary`. */
export type ProjectDeploymentsByDeploymentBoosterSummaryProjectIdAndDeploymentIdManyToManyEdgeDeploymentBoosterSummariesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Deployment_Booster_Summaries_Distinct_Enum>>>;
  filter?: InputMaybe<DeploymentBoosterSummaryFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<DeploymentBoosterSummariesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

/** A connection to a list of `Deployment` values, with data from `IndexerAllocation`. */
export type ProjectDeploymentsByIndexerAllocationProjectIdAndDeploymentIdManyToManyConnection = {
  __typename?: 'ProjectDeploymentsByIndexerAllocationProjectIdAndDeploymentIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<DeploymentAggregates>;
  /** A list of edges which contains the `Deployment`, info from the `IndexerAllocation`, and the cursor to aid in pagination. */
  edges: Array<ProjectDeploymentsByIndexerAllocationProjectIdAndDeploymentIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<DeploymentAggregates>>;
  /** A list of `Deployment` objects. */
  nodes: Array<Maybe<Deployment>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Deployment` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Deployment` values, with data from `IndexerAllocation`. */
export type ProjectDeploymentsByIndexerAllocationProjectIdAndDeploymentIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: Array<DeploymentsGroupBy>;
  having?: InputMaybe<DeploymentsHavingInput>;
};

/** A `Deployment` edge in the connection, with data from `IndexerAllocation`. */
export type ProjectDeploymentsByIndexerAllocationProjectIdAndDeploymentIdManyToManyEdge = {
  __typename?: 'ProjectDeploymentsByIndexerAllocationProjectIdAndDeploymentIdManyToManyEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `IndexerAllocation`. */
  indexerAllocations: IndexerAllocationsConnection;
  /** The `Deployment` at the end of the edge. */
  node?: Maybe<Deployment>;
};


/** A `Deployment` edge in the connection, with data from `IndexerAllocation`. */
export type ProjectDeploymentsByIndexerAllocationProjectIdAndDeploymentIdManyToManyEdgeIndexerAllocationsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Allocations_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerAllocationFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexerAllocationsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

/** A connection to a list of `Deployment` values, with data from `IndexerAllocationReward`. */
export type ProjectDeploymentsByIndexerAllocationRewardProjectIdAndDeploymentIdManyToManyConnection = {
  __typename?: 'ProjectDeploymentsByIndexerAllocationRewardProjectIdAndDeploymentIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<DeploymentAggregates>;
  /** A list of edges which contains the `Deployment`, info from the `IndexerAllocationReward`, and the cursor to aid in pagination. */
  edges: Array<ProjectDeploymentsByIndexerAllocationRewardProjectIdAndDeploymentIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<DeploymentAggregates>>;
  /** A list of `Deployment` objects. */
  nodes: Array<Maybe<Deployment>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Deployment` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Deployment` values, with data from `IndexerAllocationReward`. */
export type ProjectDeploymentsByIndexerAllocationRewardProjectIdAndDeploymentIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: Array<DeploymentsGroupBy>;
  having?: InputMaybe<DeploymentsHavingInput>;
};

/** A `Deployment` edge in the connection, with data from `IndexerAllocationReward`. */
export type ProjectDeploymentsByIndexerAllocationRewardProjectIdAndDeploymentIdManyToManyEdge = {
  __typename?: 'ProjectDeploymentsByIndexerAllocationRewardProjectIdAndDeploymentIdManyToManyEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `IndexerAllocationReward`. */
  indexerAllocationRewards: IndexerAllocationRewardsConnection;
  /** The `Deployment` at the end of the edge. */
  node?: Maybe<Deployment>;
};


/** A `Deployment` edge in the connection, with data from `IndexerAllocationReward`. */
export type ProjectDeploymentsByIndexerAllocationRewardProjectIdAndDeploymentIdManyToManyEdgeIndexerAllocationRewardsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Allocation_Rewards_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerAllocationRewardFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexerAllocationRewardsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

/** A connection to a list of `Deployment` values, with data from `IndexerAllocationRewardSummary`. */
export type ProjectDeploymentsByIndexerAllocationRewardSummaryProjectIdAndDeploymentIdManyToManyConnection = {
  __typename?: 'ProjectDeploymentsByIndexerAllocationRewardSummaryProjectIdAndDeploymentIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<DeploymentAggregates>;
  /** A list of edges which contains the `Deployment`, info from the `IndexerAllocationRewardSummary`, and the cursor to aid in pagination. */
  edges: Array<ProjectDeploymentsByIndexerAllocationRewardSummaryProjectIdAndDeploymentIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<DeploymentAggregates>>;
  /** A list of `Deployment` objects. */
  nodes: Array<Maybe<Deployment>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Deployment` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Deployment` values, with data from `IndexerAllocationRewardSummary`. */
export type ProjectDeploymentsByIndexerAllocationRewardSummaryProjectIdAndDeploymentIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: Array<DeploymentsGroupBy>;
  having?: InputMaybe<DeploymentsHavingInput>;
};

/** A `Deployment` edge in the connection, with data from `IndexerAllocationRewardSummary`. */
export type ProjectDeploymentsByIndexerAllocationRewardSummaryProjectIdAndDeploymentIdManyToManyEdge = {
  __typename?: 'ProjectDeploymentsByIndexerAllocationRewardSummaryProjectIdAndDeploymentIdManyToManyEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `IndexerAllocationRewardSummary`. */
  indexerAllocationRewardSummaries: IndexerAllocationRewardSummariesConnection;
  /** The `Deployment` at the end of the edge. */
  node?: Maybe<Deployment>;
};


/** A `Deployment` edge in the connection, with data from `IndexerAllocationRewardSummary`. */
export type ProjectDeploymentsByIndexerAllocationRewardSummaryProjectIdAndDeploymentIdManyToManyEdgeIndexerAllocationRewardSummariesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Allocation_Reward_Summaries_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerAllocationRewardSummaryFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexerAllocationRewardSummariesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

/** A connection to a list of `Deployment` values, with data from `IndexerAllocationSummary`. */
export type ProjectDeploymentsByIndexerAllocationSummaryProjectIdAndDeploymentIdManyToManyConnection = {
  __typename?: 'ProjectDeploymentsByIndexerAllocationSummaryProjectIdAndDeploymentIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<DeploymentAggregates>;
  /** A list of edges which contains the `Deployment`, info from the `IndexerAllocationSummary`, and the cursor to aid in pagination. */
  edges: Array<ProjectDeploymentsByIndexerAllocationSummaryProjectIdAndDeploymentIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<DeploymentAggregates>>;
  /** A list of `Deployment` objects. */
  nodes: Array<Maybe<Deployment>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Deployment` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Deployment` values, with data from `IndexerAllocationSummary`. */
export type ProjectDeploymentsByIndexerAllocationSummaryProjectIdAndDeploymentIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: Array<DeploymentsGroupBy>;
  having?: InputMaybe<DeploymentsHavingInput>;
};

/** A `Deployment` edge in the connection, with data from `IndexerAllocationSummary`. */
export type ProjectDeploymentsByIndexerAllocationSummaryProjectIdAndDeploymentIdManyToManyEdge = {
  __typename?: 'ProjectDeploymentsByIndexerAllocationSummaryProjectIdAndDeploymentIdManyToManyEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `IndexerAllocationSummary`. */
  indexerAllocationSummaries: IndexerAllocationSummariesConnection;
  /** The `Deployment` at the end of the edge. */
  node?: Maybe<Deployment>;
};


/** A `Deployment` edge in the connection, with data from `IndexerAllocationSummary`. */
export type ProjectDeploymentsByIndexerAllocationSummaryProjectIdAndDeploymentIdManyToManyEdgeIndexerAllocationSummariesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Allocation_Summaries_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerAllocationSummaryFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexerAllocationSummariesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

export type ProjectDistinctCountAggregates = {
  __typename?: 'ProjectDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  _blockRange?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  _id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of boostAllocationRatio across the matching connection */
  boostAllocationRatio?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createdTimestamp across the matching connection */
  createdTimestamp?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of deploymentId across the matching connection */
  deploymentId?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of deploymentMetadata across the matching connection */
  deploymentMetadata?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of lastEvent across the matching connection */
  lastEvent?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of metadata across the matching connection */
  metadata?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of owner across the matching connection */
  owner?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of totalAllocation across the matching connection */
  totalAllocation?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of totalBoost across the matching connection */
  totalBoost?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of totalReward across the matching connection */
  totalReward?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of type across the matching connection */
  type?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of updatedTimestamp across the matching connection */
  updatedTimestamp?: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `Project` object types. All fields are combined with a logical ‘and.’ */
export type ProjectFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<ProjectFilter>>;
  /** Filter by the object’s `boostAllocationRatio` field. */
  boostAllocationRatio?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `consumerQueryRewardSummaries` relation. */
  consumerQueryRewardSummaries?: InputMaybe<ProjectToManyConsumerQueryRewardSummaryFilter>;
  /** Some related `consumerQueryRewardSummaries` exist. */
  consumerQueryRewardSummariesExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `consumerQueryRewards` relation. */
  consumerQueryRewards?: InputMaybe<ProjectToManyConsumerQueryRewardFilter>;
  /** Some related `consumerQueryRewards` exist. */
  consumerQueryRewardsExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `createdBlock` field. */
  createdBlock?: InputMaybe<IntFilter>;
  /** Filter by the object’s `createdTimestamp` field. */
  createdTimestamp?: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `deploymentBoosterSummaries` relation. */
  deploymentBoosterSummaries?: InputMaybe<ProjectToManyDeploymentBoosterSummaryFilter>;
  /** Some related `deploymentBoosterSummaries` exist. */
  deploymentBoosterSummariesExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `deploymentBoosters` relation. */
  deploymentBoosters?: InputMaybe<ProjectToManyDeploymentBoosterFilter>;
  /** Some related `deploymentBoosters` exist. */
  deploymentBoostersExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `deploymentId` field. */
  deploymentId?: InputMaybe<StringFilter>;
  /** Filter by the object’s `deploymentMetadata` field. */
  deploymentMetadata?: InputMaybe<StringFilter>;
  /** Filter by the object’s `deployments` relation. */
  deployments?: InputMaybe<ProjectToManyDeploymentFilter>;
  /** Some related `deployments` exist. */
  deploymentsExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<StringFilter>;
  /** Filter by the object’s `indexerAllocationRewardSummaries` relation. */
  indexerAllocationRewardSummaries?: InputMaybe<ProjectToManyIndexerAllocationRewardSummaryFilter>;
  /** Some related `indexerAllocationRewardSummaries` exist. */
  indexerAllocationRewardSummariesExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `indexerAllocationRewards` relation. */
  indexerAllocationRewards?: InputMaybe<ProjectToManyIndexerAllocationRewardFilter>;
  /** Some related `indexerAllocationRewards` exist. */
  indexerAllocationRewardsExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `indexerAllocationSummaries` relation. */
  indexerAllocationSummaries?: InputMaybe<ProjectToManyIndexerAllocationSummaryFilter>;
  /** Some related `indexerAllocationSummaries` exist. */
  indexerAllocationSummariesExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `indexerAllocations` relation. */
  indexerAllocations?: InputMaybe<ProjectToManyIndexerAllocationFilter>;
  /** Some related `indexerAllocations` exist. */
  indexerAllocationsExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `lastEvent` field. */
  lastEvent?: InputMaybe<StringFilter>;
  /** Filter by the object’s `metadata` field. */
  metadata?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<ProjectFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<ProjectFilter>>;
  /** Filter by the object’s `owner` field. */
  owner?: InputMaybe<StringFilter>;
  /** Filter by the object’s `totalAllocation` field. */
  totalAllocation?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `totalBoost` field. */
  totalBoost?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `totalReward` field. */
  totalReward?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `type` field. */
  type?: InputMaybe<ProjectTypeFilter>;
  /** Filter by the object’s `updatedTimestamp` field. */
  updatedTimestamp?: InputMaybe<DatetimeFilter>;
};

/** A connection to a list of `Indexer` values, with data from `IndexerAllocation`. */
export type ProjectIndexersByIndexerAllocationProjectIdAndIndexerIdManyToManyConnection = {
  __typename?: 'ProjectIndexersByIndexerAllocationProjectIdAndIndexerIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<IndexerAggregates>;
  /** A list of edges which contains the `Indexer`, info from the `IndexerAllocation`, and the cursor to aid in pagination. */
  edges: Array<ProjectIndexersByIndexerAllocationProjectIdAndIndexerIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<IndexerAggregates>>;
  /** A list of `Indexer` objects. */
  nodes: Array<Maybe<Indexer>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Indexer` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Indexer` values, with data from `IndexerAllocation`. */
export type ProjectIndexersByIndexerAllocationProjectIdAndIndexerIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: Array<IndexersGroupBy>;
  having?: InputMaybe<IndexersHavingInput>;
};

/** A `Indexer` edge in the connection, with data from `IndexerAllocation`. */
export type ProjectIndexersByIndexerAllocationProjectIdAndIndexerIdManyToManyEdge = {
  __typename?: 'ProjectIndexersByIndexerAllocationProjectIdAndIndexerIdManyToManyEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `IndexerAllocation`. */
  indexerAllocations: IndexerAllocationsConnection;
  /** The `Indexer` at the end of the edge. */
  node?: Maybe<Indexer>;
};


/** A `Indexer` edge in the connection, with data from `IndexerAllocation`. */
export type ProjectIndexersByIndexerAllocationProjectIdAndIndexerIdManyToManyEdgeIndexerAllocationsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Allocations_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerAllocationFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexerAllocationsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

/** A connection to a list of `Indexer` values, with data from `IndexerAllocationReward`. */
export type ProjectIndexersByIndexerAllocationRewardProjectIdAndIndexerIdManyToManyConnection = {
  __typename?: 'ProjectIndexersByIndexerAllocationRewardProjectIdAndIndexerIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<IndexerAggregates>;
  /** A list of edges which contains the `Indexer`, info from the `IndexerAllocationReward`, and the cursor to aid in pagination. */
  edges: Array<ProjectIndexersByIndexerAllocationRewardProjectIdAndIndexerIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<IndexerAggregates>>;
  /** A list of `Indexer` objects. */
  nodes: Array<Maybe<Indexer>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Indexer` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Indexer` values, with data from `IndexerAllocationReward`. */
export type ProjectIndexersByIndexerAllocationRewardProjectIdAndIndexerIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: Array<IndexersGroupBy>;
  having?: InputMaybe<IndexersHavingInput>;
};

/** A `Indexer` edge in the connection, with data from `IndexerAllocationReward`. */
export type ProjectIndexersByIndexerAllocationRewardProjectIdAndIndexerIdManyToManyEdge = {
  __typename?: 'ProjectIndexersByIndexerAllocationRewardProjectIdAndIndexerIdManyToManyEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `IndexerAllocationReward`. */
  indexerAllocationRewards: IndexerAllocationRewardsConnection;
  /** The `Indexer` at the end of the edge. */
  node?: Maybe<Indexer>;
};


/** A `Indexer` edge in the connection, with data from `IndexerAllocationReward`. */
export type ProjectIndexersByIndexerAllocationRewardProjectIdAndIndexerIdManyToManyEdgeIndexerAllocationRewardsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Allocation_Rewards_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerAllocationRewardFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexerAllocationRewardsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

/** A connection to a list of `Indexer` values, with data from `IndexerAllocationRewardSummary`. */
export type ProjectIndexersByIndexerAllocationRewardSummaryProjectIdAndIndexerIdManyToManyConnection = {
  __typename?: 'ProjectIndexersByIndexerAllocationRewardSummaryProjectIdAndIndexerIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<IndexerAggregates>;
  /** A list of edges which contains the `Indexer`, info from the `IndexerAllocationRewardSummary`, and the cursor to aid in pagination. */
  edges: Array<ProjectIndexersByIndexerAllocationRewardSummaryProjectIdAndIndexerIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<IndexerAggregates>>;
  /** A list of `Indexer` objects. */
  nodes: Array<Maybe<Indexer>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Indexer` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Indexer` values, with data from `IndexerAllocationRewardSummary`. */
export type ProjectIndexersByIndexerAllocationRewardSummaryProjectIdAndIndexerIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: Array<IndexersGroupBy>;
  having?: InputMaybe<IndexersHavingInput>;
};

/** A `Indexer` edge in the connection, with data from `IndexerAllocationRewardSummary`. */
export type ProjectIndexersByIndexerAllocationRewardSummaryProjectIdAndIndexerIdManyToManyEdge = {
  __typename?: 'ProjectIndexersByIndexerAllocationRewardSummaryProjectIdAndIndexerIdManyToManyEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `IndexerAllocationRewardSummary`. */
  indexerAllocationRewardSummaries: IndexerAllocationRewardSummariesConnection;
  /** The `Indexer` at the end of the edge. */
  node?: Maybe<Indexer>;
};


/** A `Indexer` edge in the connection, with data from `IndexerAllocationRewardSummary`. */
export type ProjectIndexersByIndexerAllocationRewardSummaryProjectIdAndIndexerIdManyToManyEdgeIndexerAllocationRewardSummariesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Allocation_Reward_Summaries_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerAllocationRewardSummaryFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexerAllocationRewardSummariesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

/** A connection to a list of `Indexer` values, with data from `IndexerAllocationSummary`. */
export type ProjectIndexersByIndexerAllocationSummaryProjectIdAndIndexerIdManyToManyConnection = {
  __typename?: 'ProjectIndexersByIndexerAllocationSummaryProjectIdAndIndexerIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<IndexerAggregates>;
  /** A list of edges which contains the `Indexer`, info from the `IndexerAllocationSummary`, and the cursor to aid in pagination. */
  edges: Array<ProjectIndexersByIndexerAllocationSummaryProjectIdAndIndexerIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<IndexerAggregates>>;
  /** A list of `Indexer` objects. */
  nodes: Array<Maybe<Indexer>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Indexer` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Indexer` values, with data from `IndexerAllocationSummary`. */
export type ProjectIndexersByIndexerAllocationSummaryProjectIdAndIndexerIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: Array<IndexersGroupBy>;
  having?: InputMaybe<IndexersHavingInput>;
};

/** A `Indexer` edge in the connection, with data from `IndexerAllocationSummary`. */
export type ProjectIndexersByIndexerAllocationSummaryProjectIdAndIndexerIdManyToManyEdge = {
  __typename?: 'ProjectIndexersByIndexerAllocationSummaryProjectIdAndIndexerIdManyToManyEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** Reads and enables pagination through a set of `IndexerAllocationSummary`. */
  indexerAllocationSummaries: IndexerAllocationSummariesConnection;
  /** The `Indexer` at the end of the edge. */
  node?: Maybe<Indexer>;
};


/** A `Indexer` edge in the connection, with data from `IndexerAllocationSummary`. */
export type ProjectIndexersByIndexerAllocationSummaryProjectIdAndIndexerIdManyToManyEdgeIndexerAllocationSummariesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Allocation_Summaries_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerAllocationSummaryFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexerAllocationSummariesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

export type ProjectMaxAggregates = {
  __typename?: 'ProjectMaxAggregates';
  /** Maximum of boostAllocationRatio across the matching connection */
  boostAllocationRatio?: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['Int']['output']>;
  /** Maximum of totalAllocation across the matching connection */
  totalAllocation?: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of totalBoost across the matching connection */
  totalBoost?: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of totalReward across the matching connection */
  totalReward?: Maybe<Scalars['BigFloat']['output']>;
};

export type ProjectMinAggregates = {
  __typename?: 'ProjectMinAggregates';
  /** Minimum of boostAllocationRatio across the matching connection */
  boostAllocationRatio?: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['Int']['output']>;
  /** Minimum of totalAllocation across the matching connection */
  totalAllocation?: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of totalBoost across the matching connection */
  totalBoost?: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of totalReward across the matching connection */
  totalReward?: Maybe<Scalars['BigFloat']['output']>;
};

export type ProjectStddevPopulationAggregates = {
  __typename?: 'ProjectStddevPopulationAggregates';
  /** Population standard deviation of boostAllocationRatio across the matching connection */
  boostAllocationRatio?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of totalAllocation across the matching connection */
  totalAllocation?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of totalBoost across the matching connection */
  totalBoost?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of totalReward across the matching connection */
  totalReward?: Maybe<Scalars['BigFloat']['output']>;
};

export type ProjectStddevSampleAggregates = {
  __typename?: 'ProjectStddevSampleAggregates';
  /** Sample standard deviation of boostAllocationRatio across the matching connection */
  boostAllocationRatio?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of totalAllocation across the matching connection */
  totalAllocation?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of totalBoost across the matching connection */
  totalBoost?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of totalReward across the matching connection */
  totalReward?: Maybe<Scalars['BigFloat']['output']>;
};

export type ProjectSumAggregates = {
  __typename?: 'ProjectSumAggregates';
  /** Sum of boostAllocationRatio across the matching connection */
  boostAllocationRatio: Scalars['BigFloat']['output'];
  /** Sum of createdBlock across the matching connection */
  createdBlock: Scalars['BigInt']['output'];
  /** Sum of totalAllocation across the matching connection */
  totalAllocation: Scalars['BigFloat']['output'];
  /** Sum of totalBoost across the matching connection */
  totalBoost: Scalars['BigFloat']['output'];
  /** Sum of totalReward across the matching connection */
  totalReward: Scalars['BigFloat']['output'];
};

/** A filter to be used against many `ConsumerQueryReward` object types. All fields are combined with a logical ‘and.’ */
export type ProjectToManyConsumerQueryRewardFilter = {
  /** Aggregates across related `ConsumerQueryReward` match the filter criteria. */
  aggregates?: InputMaybe<ConsumerQueryRewardAggregatesFilter>;
  /** Every related `ConsumerQueryReward` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<ConsumerQueryRewardFilter>;
  /** No related `ConsumerQueryReward` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<ConsumerQueryRewardFilter>;
  /** Some related `ConsumerQueryReward` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<ConsumerQueryRewardFilter>;
};

/** A filter to be used against many `ConsumerQueryRewardSummary` object types. All fields are combined with a logical ‘and.’ */
export type ProjectToManyConsumerQueryRewardSummaryFilter = {
  /** Aggregates across related `ConsumerQueryRewardSummary` match the filter criteria. */
  aggregates?: InputMaybe<ConsumerQueryRewardSummaryAggregatesFilter>;
  /** Every related `ConsumerQueryRewardSummary` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<ConsumerQueryRewardSummaryFilter>;
  /** No related `ConsumerQueryRewardSummary` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<ConsumerQueryRewardSummaryFilter>;
  /** Some related `ConsumerQueryRewardSummary` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<ConsumerQueryRewardSummaryFilter>;
};

/** A filter to be used against many `DeploymentBooster` object types. All fields are combined with a logical ‘and.’ */
export type ProjectToManyDeploymentBoosterFilter = {
  /** Aggregates across related `DeploymentBooster` match the filter criteria. */
  aggregates?: InputMaybe<DeploymentBoosterAggregatesFilter>;
  /** Every related `DeploymentBooster` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<DeploymentBoosterFilter>;
  /** No related `DeploymentBooster` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<DeploymentBoosterFilter>;
  /** Some related `DeploymentBooster` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<DeploymentBoosterFilter>;
};

/** A filter to be used against many `DeploymentBoosterSummary` object types. All fields are combined with a logical ‘and.’ */
export type ProjectToManyDeploymentBoosterSummaryFilter = {
  /** Aggregates across related `DeploymentBoosterSummary` match the filter criteria. */
  aggregates?: InputMaybe<DeploymentBoosterSummaryAggregatesFilter>;
  /** Every related `DeploymentBoosterSummary` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<DeploymentBoosterSummaryFilter>;
  /** No related `DeploymentBoosterSummary` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<DeploymentBoosterSummaryFilter>;
  /** Some related `DeploymentBoosterSummary` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<DeploymentBoosterSummaryFilter>;
};

/** A filter to be used against many `Deployment` object types. All fields are combined with a logical ‘and.’ */
export type ProjectToManyDeploymentFilter = {
  /** Aggregates across related `Deployment` match the filter criteria. */
  aggregates?: InputMaybe<DeploymentAggregatesFilter>;
  /** Every related `Deployment` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<DeploymentFilter>;
  /** No related `Deployment` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<DeploymentFilter>;
  /** Some related `Deployment` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<DeploymentFilter>;
};

/** A filter to be used against many `IndexerAllocation` object types. All fields are combined with a logical ‘and.’ */
export type ProjectToManyIndexerAllocationFilter = {
  /** Aggregates across related `IndexerAllocation` match the filter criteria. */
  aggregates?: InputMaybe<IndexerAllocationAggregatesFilter>;
  /** Every related `IndexerAllocation` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<IndexerAllocationFilter>;
  /** No related `IndexerAllocation` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<IndexerAllocationFilter>;
  /** Some related `IndexerAllocation` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<IndexerAllocationFilter>;
};

/** A filter to be used against many `IndexerAllocationReward` object types. All fields are combined with a logical ‘and.’ */
export type ProjectToManyIndexerAllocationRewardFilter = {
  /** Aggregates across related `IndexerAllocationReward` match the filter criteria. */
  aggregates?: InputMaybe<IndexerAllocationRewardAggregatesFilter>;
  /** Every related `IndexerAllocationReward` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<IndexerAllocationRewardFilter>;
  /** No related `IndexerAllocationReward` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<IndexerAllocationRewardFilter>;
  /** Some related `IndexerAllocationReward` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<IndexerAllocationRewardFilter>;
};

/** A filter to be used against many `IndexerAllocationRewardSummary` object types. All fields are combined with a logical ‘and.’ */
export type ProjectToManyIndexerAllocationRewardSummaryFilter = {
  /** Aggregates across related `IndexerAllocationRewardSummary` match the filter criteria. */
  aggregates?: InputMaybe<IndexerAllocationRewardSummaryAggregatesFilter>;
  /** Every related `IndexerAllocationRewardSummary` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<IndexerAllocationRewardSummaryFilter>;
  /** No related `IndexerAllocationRewardSummary` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<IndexerAllocationRewardSummaryFilter>;
  /** Some related `IndexerAllocationRewardSummary` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<IndexerAllocationRewardSummaryFilter>;
};

/** A filter to be used against many `IndexerAllocationSummary` object types. All fields are combined with a logical ‘and.’ */
export type ProjectToManyIndexerAllocationSummaryFilter = {
  /** Aggregates across related `IndexerAllocationSummary` match the filter criteria. */
  aggregates?: InputMaybe<IndexerAllocationSummaryAggregatesFilter>;
  /** Every related `IndexerAllocationSummary` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<IndexerAllocationSummaryFilter>;
  /** No related `IndexerAllocationSummary` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<IndexerAllocationSummaryFilter>;
  /** Some related `IndexerAllocationSummary` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<IndexerAllocationSummaryFilter>;
};

export enum ProjectType {
  Llm = 'LLM',
  Rpc = 'RPC',
  SqDict = 'SQ_DICT',
  Subgraph = 'SUBGRAPH',
  Subquery = 'SUBQUERY'
}

/** A filter to be used against ProjectType fields. All fields are combined with a logical ‘and.’ */
export type ProjectTypeFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: InputMaybe<ProjectType>;
  /** Equal to the specified value. */
  equalTo?: InputMaybe<ProjectType>;
  /** Greater than the specified value. */
  greaterThan?: InputMaybe<ProjectType>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: InputMaybe<ProjectType>;
  /** Included in the specified list. */
  in?: InputMaybe<Array<ProjectType>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: InputMaybe<Scalars['Boolean']['input']>;
  /** Less than the specified value. */
  lessThan?: InputMaybe<ProjectType>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: InputMaybe<ProjectType>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: InputMaybe<ProjectType>;
  /** Not equal to the specified value. */
  notEqualTo?: InputMaybe<ProjectType>;
  /** Not included in the specified list. */
  notIn?: InputMaybe<Array<ProjectType>>;
};

export type ProjectVariancePopulationAggregates = {
  __typename?: 'ProjectVariancePopulationAggregates';
  /** Population variance of boostAllocationRatio across the matching connection */
  boostAllocationRatio?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of totalAllocation across the matching connection */
  totalAllocation?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of totalBoost across the matching connection */
  totalBoost?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of totalReward across the matching connection */
  totalReward?: Maybe<Scalars['BigFloat']['output']>;
};

export type ProjectVarianceSampleAggregates = {
  __typename?: 'ProjectVarianceSampleAggregates';
  /** Sample variance of boostAllocationRatio across the matching connection */
  boostAllocationRatio?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of totalAllocation across the matching connection */
  totalAllocation?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of totalBoost across the matching connection */
  totalBoost?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of totalReward across the matching connection */
  totalReward?: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `Project` values. */
export type ProjectsConnection = {
  __typename?: 'ProjectsConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<ProjectAggregates>;
  /** A list of edges which contains the `Project` and cursor to aid in pagination. */
  edges: Array<ProjectsEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<ProjectAggregates>>;
  /** A list of `Project` objects. */
  nodes: Array<Maybe<Project>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Project` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Project` values. */
export type ProjectsConnectionGroupedAggregatesArgs = {
  groupBy: Array<ProjectsGroupBy>;
  having?: InputMaybe<ProjectsHavingInput>;
};

/** A `Project` edge in the connection. */
export type ProjectsEdge = {
  __typename?: 'ProjectsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `Project` at the end of the edge. */
  node?: Maybe<Project>;
};

/** Grouping methods for `Project` for usage during aggregation. */
export enum ProjectsGroupBy {
  BoostAllocationRatio = 'BOOST_ALLOCATION_RATIO',
  CreatedBlock = 'CREATED_BLOCK',
  CreatedTimestamp = 'CREATED_TIMESTAMP',
  CreatedTimestampTruncatedToDay = 'CREATED_TIMESTAMP_TRUNCATED_TO_DAY',
  CreatedTimestampTruncatedToHour = 'CREATED_TIMESTAMP_TRUNCATED_TO_HOUR',
  DeploymentId = 'DEPLOYMENT_ID',
  DeploymentMetadata = 'DEPLOYMENT_METADATA',
  Id = 'ID',
  LastEvent = 'LAST_EVENT',
  Metadata = 'METADATA',
  Owner = 'OWNER',
  TotalAllocation = 'TOTAL_ALLOCATION',
  TotalBoost = 'TOTAL_BOOST',
  TotalReward = 'TOTAL_REWARD',
  Type = 'TYPE',
  UpdatedTimestamp = 'UPDATED_TIMESTAMP',
  UpdatedTimestampTruncatedToDay = 'UPDATED_TIMESTAMP_TRUNCATED_TO_DAY',
  UpdatedTimestampTruncatedToHour = 'UPDATED_TIMESTAMP_TRUNCATED_TO_HOUR'
}

export type ProjectsHavingAverageInput = {
  boostAllocationRatio?: InputMaybe<HavingBigfloatFilter>;
  createdBlock?: InputMaybe<HavingIntFilter>;
  createdTimestamp?: InputMaybe<HavingDatetimeFilter>;
  totalAllocation?: InputMaybe<HavingBigfloatFilter>;
  totalBoost?: InputMaybe<HavingBigfloatFilter>;
  totalReward?: InputMaybe<HavingBigfloatFilter>;
  updatedTimestamp?: InputMaybe<HavingDatetimeFilter>;
};

export type ProjectsHavingDistinctCountInput = {
  boostAllocationRatio?: InputMaybe<HavingBigfloatFilter>;
  createdBlock?: InputMaybe<HavingIntFilter>;
  createdTimestamp?: InputMaybe<HavingDatetimeFilter>;
  totalAllocation?: InputMaybe<HavingBigfloatFilter>;
  totalBoost?: InputMaybe<HavingBigfloatFilter>;
  totalReward?: InputMaybe<HavingBigfloatFilter>;
  updatedTimestamp?: InputMaybe<HavingDatetimeFilter>;
};

/** Conditions for `Project` aggregates. */
export type ProjectsHavingInput = {
  AND?: InputMaybe<Array<ProjectsHavingInput>>;
  OR?: InputMaybe<Array<ProjectsHavingInput>>;
  average?: InputMaybe<ProjectsHavingAverageInput>;
  distinctCount?: InputMaybe<ProjectsHavingDistinctCountInput>;
  max?: InputMaybe<ProjectsHavingMaxInput>;
  min?: InputMaybe<ProjectsHavingMinInput>;
  stddevPopulation?: InputMaybe<ProjectsHavingStddevPopulationInput>;
  stddevSample?: InputMaybe<ProjectsHavingStddevSampleInput>;
  sum?: InputMaybe<ProjectsHavingSumInput>;
  variancePopulation?: InputMaybe<ProjectsHavingVariancePopulationInput>;
  varianceSample?: InputMaybe<ProjectsHavingVarianceSampleInput>;
};

export type ProjectsHavingMaxInput = {
  boostAllocationRatio?: InputMaybe<HavingBigfloatFilter>;
  createdBlock?: InputMaybe<HavingIntFilter>;
  createdTimestamp?: InputMaybe<HavingDatetimeFilter>;
  totalAllocation?: InputMaybe<HavingBigfloatFilter>;
  totalBoost?: InputMaybe<HavingBigfloatFilter>;
  totalReward?: InputMaybe<HavingBigfloatFilter>;
  updatedTimestamp?: InputMaybe<HavingDatetimeFilter>;
};

export type ProjectsHavingMinInput = {
  boostAllocationRatio?: InputMaybe<HavingBigfloatFilter>;
  createdBlock?: InputMaybe<HavingIntFilter>;
  createdTimestamp?: InputMaybe<HavingDatetimeFilter>;
  totalAllocation?: InputMaybe<HavingBigfloatFilter>;
  totalBoost?: InputMaybe<HavingBigfloatFilter>;
  totalReward?: InputMaybe<HavingBigfloatFilter>;
  updatedTimestamp?: InputMaybe<HavingDatetimeFilter>;
};

export type ProjectsHavingStddevPopulationInput = {
  boostAllocationRatio?: InputMaybe<HavingBigfloatFilter>;
  createdBlock?: InputMaybe<HavingIntFilter>;
  createdTimestamp?: InputMaybe<HavingDatetimeFilter>;
  totalAllocation?: InputMaybe<HavingBigfloatFilter>;
  totalBoost?: InputMaybe<HavingBigfloatFilter>;
  totalReward?: InputMaybe<HavingBigfloatFilter>;
  updatedTimestamp?: InputMaybe<HavingDatetimeFilter>;
};

export type ProjectsHavingStddevSampleInput = {
  boostAllocationRatio?: InputMaybe<HavingBigfloatFilter>;
  createdBlock?: InputMaybe<HavingIntFilter>;
  createdTimestamp?: InputMaybe<HavingDatetimeFilter>;
  totalAllocation?: InputMaybe<HavingBigfloatFilter>;
  totalBoost?: InputMaybe<HavingBigfloatFilter>;
  totalReward?: InputMaybe<HavingBigfloatFilter>;
  updatedTimestamp?: InputMaybe<HavingDatetimeFilter>;
};

export type ProjectsHavingSumInput = {
  boostAllocationRatio?: InputMaybe<HavingBigfloatFilter>;
  createdBlock?: InputMaybe<HavingIntFilter>;
  createdTimestamp?: InputMaybe<HavingDatetimeFilter>;
  totalAllocation?: InputMaybe<HavingBigfloatFilter>;
  totalBoost?: InputMaybe<HavingBigfloatFilter>;
  totalReward?: InputMaybe<HavingBigfloatFilter>;
  updatedTimestamp?: InputMaybe<HavingDatetimeFilter>;
};

export type ProjectsHavingVariancePopulationInput = {
  boostAllocationRatio?: InputMaybe<HavingBigfloatFilter>;
  createdBlock?: InputMaybe<HavingIntFilter>;
  createdTimestamp?: InputMaybe<HavingDatetimeFilter>;
  totalAllocation?: InputMaybe<HavingBigfloatFilter>;
  totalBoost?: InputMaybe<HavingBigfloatFilter>;
  totalReward?: InputMaybe<HavingBigfloatFilter>;
  updatedTimestamp?: InputMaybe<HavingDatetimeFilter>;
};

export type ProjectsHavingVarianceSampleInput = {
  boostAllocationRatio?: InputMaybe<HavingBigfloatFilter>;
  createdBlock?: InputMaybe<HavingIntFilter>;
  createdTimestamp?: InputMaybe<HavingDatetimeFilter>;
  totalAllocation?: InputMaybe<HavingBigfloatFilter>;
  totalBoost?: InputMaybe<HavingBigfloatFilter>;
  totalReward?: InputMaybe<HavingBigfloatFilter>;
  updatedTimestamp?: InputMaybe<HavingDatetimeFilter>;
};

/** Methods to use when ordering `Project`. */
export enum ProjectsOrderBy {
  BoostAllocationRatioAsc = 'BOOST_ALLOCATION_RATIO_ASC',
  BoostAllocationRatioDesc = 'BOOST_ALLOCATION_RATIO_DESC',
  ConsumerQueryRewardsAverageBlockRangeAsc = 'CONSUMER_QUERY_REWARDS_AVERAGE_BLOCK_RANGE_ASC',
  ConsumerQueryRewardsAverageBlockRangeDesc = 'CONSUMER_QUERY_REWARDS_AVERAGE_BLOCK_RANGE_DESC',
  ConsumerQueryRewardsAverageConsumerAsc = 'CONSUMER_QUERY_REWARDS_AVERAGE_CONSUMER_ASC',
  ConsumerQueryRewardsAverageConsumerDesc = 'CONSUMER_QUERY_REWARDS_AVERAGE_CONSUMER_DESC',
  ConsumerQueryRewardsAverageCreateAtAsc = 'CONSUMER_QUERY_REWARDS_AVERAGE_CREATE_AT_ASC',
  ConsumerQueryRewardsAverageCreateAtDesc = 'CONSUMER_QUERY_REWARDS_AVERAGE_CREATE_AT_DESC',
  ConsumerQueryRewardsAverageDeploymentIdAsc = 'CONSUMER_QUERY_REWARDS_AVERAGE_DEPLOYMENT_ID_ASC',
  ConsumerQueryRewardsAverageDeploymentIdDesc = 'CONSUMER_QUERY_REWARDS_AVERAGE_DEPLOYMENT_ID_DESC',
  ConsumerQueryRewardsAverageIdAsc = 'CONSUMER_QUERY_REWARDS_AVERAGE_ID_ASC',
  ConsumerQueryRewardsAverageIdDesc = 'CONSUMER_QUERY_REWARDS_AVERAGE_ID_DESC',
  ConsumerQueryRewardsAverageOrderIdAsc = 'CONSUMER_QUERY_REWARDS_AVERAGE_ORDER_ID_ASC',
  ConsumerQueryRewardsAverageOrderIdDesc = 'CONSUMER_QUERY_REWARDS_AVERAGE_ORDER_ID_DESC',
  ConsumerQueryRewardsAverageOrderTypeAsc = 'CONSUMER_QUERY_REWARDS_AVERAGE_ORDER_TYPE_ASC',
  ConsumerQueryRewardsAverageOrderTypeDesc = 'CONSUMER_QUERY_REWARDS_AVERAGE_ORDER_TYPE_DESC',
  ConsumerQueryRewardsAverageProjectIdAsc = 'CONSUMER_QUERY_REWARDS_AVERAGE_PROJECT_ID_ASC',
  ConsumerQueryRewardsAverageProjectIdDesc = 'CONSUMER_QUERY_REWARDS_AVERAGE_PROJECT_ID_DESC',
  ConsumerQueryRewardsAverageRefundedAsc = 'CONSUMER_QUERY_REWARDS_AVERAGE_REFUNDED_ASC',
  ConsumerQueryRewardsAverageRefundedDesc = 'CONSUMER_QUERY_REWARDS_AVERAGE_REFUNDED_DESC',
  ConsumerQueryRewardsAverageSpentAsc = 'CONSUMER_QUERY_REWARDS_AVERAGE_SPENT_ASC',
  ConsumerQueryRewardsAverageSpentDesc = 'CONSUMER_QUERY_REWARDS_AVERAGE_SPENT_DESC',
  ConsumerQueryRewardsAverageUpdateAtAsc = 'CONSUMER_QUERY_REWARDS_AVERAGE_UPDATE_AT_ASC',
  ConsumerQueryRewardsAverageUpdateAtDesc = 'CONSUMER_QUERY_REWARDS_AVERAGE_UPDATE_AT_DESC',
  ConsumerQueryRewardsByProjectIdCountAsc = 'CONSUMER_QUERY_REWARDS_BY_PROJECT_ID__COUNT_ASC',
  ConsumerQueryRewardsByProjectIdCountDesc = 'CONSUMER_QUERY_REWARDS_BY_PROJECT_ID__COUNT_DESC',
  ConsumerQueryRewardsCountAsc = 'CONSUMER_QUERY_REWARDS_COUNT_ASC',
  ConsumerQueryRewardsCountDesc = 'CONSUMER_QUERY_REWARDS_COUNT_DESC',
  ConsumerQueryRewardsDistinctCountBlockRangeAsc = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  ConsumerQueryRewardsDistinctCountBlockRangeDesc = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  ConsumerQueryRewardsDistinctCountConsumerAsc = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_CONSUMER_ASC',
  ConsumerQueryRewardsDistinctCountConsumerDesc = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_CONSUMER_DESC',
  ConsumerQueryRewardsDistinctCountCreateAtAsc = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_CREATE_AT_ASC',
  ConsumerQueryRewardsDistinctCountCreateAtDesc = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_CREATE_AT_DESC',
  ConsumerQueryRewardsDistinctCountDeploymentIdAsc = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_DEPLOYMENT_ID_ASC',
  ConsumerQueryRewardsDistinctCountDeploymentIdDesc = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_DEPLOYMENT_ID_DESC',
  ConsumerQueryRewardsDistinctCountIdAsc = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_ID_ASC',
  ConsumerQueryRewardsDistinctCountIdDesc = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_ID_DESC',
  ConsumerQueryRewardsDistinctCountOrderIdAsc = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_ORDER_ID_ASC',
  ConsumerQueryRewardsDistinctCountOrderIdDesc = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_ORDER_ID_DESC',
  ConsumerQueryRewardsDistinctCountOrderTypeAsc = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_ORDER_TYPE_ASC',
  ConsumerQueryRewardsDistinctCountOrderTypeDesc = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_ORDER_TYPE_DESC',
  ConsumerQueryRewardsDistinctCountProjectIdAsc = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_PROJECT_ID_ASC',
  ConsumerQueryRewardsDistinctCountProjectIdDesc = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_PROJECT_ID_DESC',
  ConsumerQueryRewardsDistinctCountRefundedAsc = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_REFUNDED_ASC',
  ConsumerQueryRewardsDistinctCountRefundedDesc = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_REFUNDED_DESC',
  ConsumerQueryRewardsDistinctCountSpentAsc = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_SPENT_ASC',
  ConsumerQueryRewardsDistinctCountSpentDesc = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_SPENT_DESC',
  ConsumerQueryRewardsDistinctCountUpdateAtAsc = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_UPDATE_AT_ASC',
  ConsumerQueryRewardsDistinctCountUpdateAtDesc = 'CONSUMER_QUERY_REWARDS_DISTINCT_COUNT_UPDATE_AT_DESC',
  ConsumerQueryRewardsMaxBlockRangeAsc = 'CONSUMER_QUERY_REWARDS_MAX_BLOCK_RANGE_ASC',
  ConsumerQueryRewardsMaxBlockRangeDesc = 'CONSUMER_QUERY_REWARDS_MAX_BLOCK_RANGE_DESC',
  ConsumerQueryRewardsMaxConsumerAsc = 'CONSUMER_QUERY_REWARDS_MAX_CONSUMER_ASC',
  ConsumerQueryRewardsMaxConsumerDesc = 'CONSUMER_QUERY_REWARDS_MAX_CONSUMER_DESC',
  ConsumerQueryRewardsMaxCreateAtAsc = 'CONSUMER_QUERY_REWARDS_MAX_CREATE_AT_ASC',
  ConsumerQueryRewardsMaxCreateAtDesc = 'CONSUMER_QUERY_REWARDS_MAX_CREATE_AT_DESC',
  ConsumerQueryRewardsMaxDeploymentIdAsc = 'CONSUMER_QUERY_REWARDS_MAX_DEPLOYMENT_ID_ASC',
  ConsumerQueryRewardsMaxDeploymentIdDesc = 'CONSUMER_QUERY_REWARDS_MAX_DEPLOYMENT_ID_DESC',
  ConsumerQueryRewardsMaxIdAsc = 'CONSUMER_QUERY_REWARDS_MAX_ID_ASC',
  ConsumerQueryRewardsMaxIdDesc = 'CONSUMER_QUERY_REWARDS_MAX_ID_DESC',
  ConsumerQueryRewardsMaxOrderIdAsc = 'CONSUMER_QUERY_REWARDS_MAX_ORDER_ID_ASC',
  ConsumerQueryRewardsMaxOrderIdDesc = 'CONSUMER_QUERY_REWARDS_MAX_ORDER_ID_DESC',
  ConsumerQueryRewardsMaxOrderTypeAsc = 'CONSUMER_QUERY_REWARDS_MAX_ORDER_TYPE_ASC',
  ConsumerQueryRewardsMaxOrderTypeDesc = 'CONSUMER_QUERY_REWARDS_MAX_ORDER_TYPE_DESC',
  ConsumerQueryRewardsMaxProjectIdAsc = 'CONSUMER_QUERY_REWARDS_MAX_PROJECT_ID_ASC',
  ConsumerQueryRewardsMaxProjectIdDesc = 'CONSUMER_QUERY_REWARDS_MAX_PROJECT_ID_DESC',
  ConsumerQueryRewardsMaxRefundedAsc = 'CONSUMER_QUERY_REWARDS_MAX_REFUNDED_ASC',
  ConsumerQueryRewardsMaxRefundedDesc = 'CONSUMER_QUERY_REWARDS_MAX_REFUNDED_DESC',
  ConsumerQueryRewardsMaxSpentAsc = 'CONSUMER_QUERY_REWARDS_MAX_SPENT_ASC',
  ConsumerQueryRewardsMaxSpentDesc = 'CONSUMER_QUERY_REWARDS_MAX_SPENT_DESC',
  ConsumerQueryRewardsMaxUpdateAtAsc = 'CONSUMER_QUERY_REWARDS_MAX_UPDATE_AT_ASC',
  ConsumerQueryRewardsMaxUpdateAtDesc = 'CONSUMER_QUERY_REWARDS_MAX_UPDATE_AT_DESC',
  ConsumerQueryRewardsMinBlockRangeAsc = 'CONSUMER_QUERY_REWARDS_MIN_BLOCK_RANGE_ASC',
  ConsumerQueryRewardsMinBlockRangeDesc = 'CONSUMER_QUERY_REWARDS_MIN_BLOCK_RANGE_DESC',
  ConsumerQueryRewardsMinConsumerAsc = 'CONSUMER_QUERY_REWARDS_MIN_CONSUMER_ASC',
  ConsumerQueryRewardsMinConsumerDesc = 'CONSUMER_QUERY_REWARDS_MIN_CONSUMER_DESC',
  ConsumerQueryRewardsMinCreateAtAsc = 'CONSUMER_QUERY_REWARDS_MIN_CREATE_AT_ASC',
  ConsumerQueryRewardsMinCreateAtDesc = 'CONSUMER_QUERY_REWARDS_MIN_CREATE_AT_DESC',
  ConsumerQueryRewardsMinDeploymentIdAsc = 'CONSUMER_QUERY_REWARDS_MIN_DEPLOYMENT_ID_ASC',
  ConsumerQueryRewardsMinDeploymentIdDesc = 'CONSUMER_QUERY_REWARDS_MIN_DEPLOYMENT_ID_DESC',
  ConsumerQueryRewardsMinIdAsc = 'CONSUMER_QUERY_REWARDS_MIN_ID_ASC',
  ConsumerQueryRewardsMinIdDesc = 'CONSUMER_QUERY_REWARDS_MIN_ID_DESC',
  ConsumerQueryRewardsMinOrderIdAsc = 'CONSUMER_QUERY_REWARDS_MIN_ORDER_ID_ASC',
  ConsumerQueryRewardsMinOrderIdDesc = 'CONSUMER_QUERY_REWARDS_MIN_ORDER_ID_DESC',
  ConsumerQueryRewardsMinOrderTypeAsc = 'CONSUMER_QUERY_REWARDS_MIN_ORDER_TYPE_ASC',
  ConsumerQueryRewardsMinOrderTypeDesc = 'CONSUMER_QUERY_REWARDS_MIN_ORDER_TYPE_DESC',
  ConsumerQueryRewardsMinProjectIdAsc = 'CONSUMER_QUERY_REWARDS_MIN_PROJECT_ID_ASC',
  ConsumerQueryRewardsMinProjectIdDesc = 'CONSUMER_QUERY_REWARDS_MIN_PROJECT_ID_DESC',
  ConsumerQueryRewardsMinRefundedAsc = 'CONSUMER_QUERY_REWARDS_MIN_REFUNDED_ASC',
  ConsumerQueryRewardsMinRefundedDesc = 'CONSUMER_QUERY_REWARDS_MIN_REFUNDED_DESC',
  ConsumerQueryRewardsMinSpentAsc = 'CONSUMER_QUERY_REWARDS_MIN_SPENT_ASC',
  ConsumerQueryRewardsMinSpentDesc = 'CONSUMER_QUERY_REWARDS_MIN_SPENT_DESC',
  ConsumerQueryRewardsMinUpdateAtAsc = 'CONSUMER_QUERY_REWARDS_MIN_UPDATE_AT_ASC',
  ConsumerQueryRewardsMinUpdateAtDesc = 'CONSUMER_QUERY_REWARDS_MIN_UPDATE_AT_DESC',
  ConsumerQueryRewardsStddevPopulationBlockRangeAsc = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  ConsumerQueryRewardsStddevPopulationBlockRangeDesc = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  ConsumerQueryRewardsStddevPopulationConsumerAsc = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_CONSUMER_ASC',
  ConsumerQueryRewardsStddevPopulationConsumerDesc = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_CONSUMER_DESC',
  ConsumerQueryRewardsStddevPopulationCreateAtAsc = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_CREATE_AT_ASC',
  ConsumerQueryRewardsStddevPopulationCreateAtDesc = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_CREATE_AT_DESC',
  ConsumerQueryRewardsStddevPopulationDeploymentIdAsc = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_DEPLOYMENT_ID_ASC',
  ConsumerQueryRewardsStddevPopulationDeploymentIdDesc = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_DEPLOYMENT_ID_DESC',
  ConsumerQueryRewardsStddevPopulationIdAsc = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_ID_ASC',
  ConsumerQueryRewardsStddevPopulationIdDesc = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_ID_DESC',
  ConsumerQueryRewardsStddevPopulationOrderIdAsc = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_ORDER_ID_ASC',
  ConsumerQueryRewardsStddevPopulationOrderIdDesc = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_ORDER_ID_DESC',
  ConsumerQueryRewardsStddevPopulationOrderTypeAsc = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_ORDER_TYPE_ASC',
  ConsumerQueryRewardsStddevPopulationOrderTypeDesc = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_ORDER_TYPE_DESC',
  ConsumerQueryRewardsStddevPopulationProjectIdAsc = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_PROJECT_ID_ASC',
  ConsumerQueryRewardsStddevPopulationProjectIdDesc = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_PROJECT_ID_DESC',
  ConsumerQueryRewardsStddevPopulationRefundedAsc = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_REFUNDED_ASC',
  ConsumerQueryRewardsStddevPopulationRefundedDesc = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_REFUNDED_DESC',
  ConsumerQueryRewardsStddevPopulationSpentAsc = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_SPENT_ASC',
  ConsumerQueryRewardsStddevPopulationSpentDesc = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_SPENT_DESC',
  ConsumerQueryRewardsStddevPopulationUpdateAtAsc = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_UPDATE_AT_ASC',
  ConsumerQueryRewardsStddevPopulationUpdateAtDesc = 'CONSUMER_QUERY_REWARDS_STDDEV_POPULATION_UPDATE_AT_DESC',
  ConsumerQueryRewardsStddevSampleBlockRangeAsc = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  ConsumerQueryRewardsStddevSampleBlockRangeDesc = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  ConsumerQueryRewardsStddevSampleConsumerAsc = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_CONSUMER_ASC',
  ConsumerQueryRewardsStddevSampleConsumerDesc = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_CONSUMER_DESC',
  ConsumerQueryRewardsStddevSampleCreateAtAsc = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_CREATE_AT_ASC',
  ConsumerQueryRewardsStddevSampleCreateAtDesc = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_CREATE_AT_DESC',
  ConsumerQueryRewardsStddevSampleDeploymentIdAsc = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC',
  ConsumerQueryRewardsStddevSampleDeploymentIdDesc = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC',
  ConsumerQueryRewardsStddevSampleIdAsc = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_ID_ASC',
  ConsumerQueryRewardsStddevSampleIdDesc = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_ID_DESC',
  ConsumerQueryRewardsStddevSampleOrderIdAsc = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_ORDER_ID_ASC',
  ConsumerQueryRewardsStddevSampleOrderIdDesc = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_ORDER_ID_DESC',
  ConsumerQueryRewardsStddevSampleOrderTypeAsc = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_ORDER_TYPE_ASC',
  ConsumerQueryRewardsStddevSampleOrderTypeDesc = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_ORDER_TYPE_DESC',
  ConsumerQueryRewardsStddevSampleProjectIdAsc = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_PROJECT_ID_ASC',
  ConsumerQueryRewardsStddevSampleProjectIdDesc = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_PROJECT_ID_DESC',
  ConsumerQueryRewardsStddevSampleRefundedAsc = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_REFUNDED_ASC',
  ConsumerQueryRewardsStddevSampleRefundedDesc = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_REFUNDED_DESC',
  ConsumerQueryRewardsStddevSampleSpentAsc = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_SPENT_ASC',
  ConsumerQueryRewardsStddevSampleSpentDesc = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_SPENT_DESC',
  ConsumerQueryRewardsStddevSampleUpdateAtAsc = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_UPDATE_AT_ASC',
  ConsumerQueryRewardsStddevSampleUpdateAtDesc = 'CONSUMER_QUERY_REWARDS_STDDEV_SAMPLE_UPDATE_AT_DESC',
  ConsumerQueryRewardsSumBlockRangeAsc = 'CONSUMER_QUERY_REWARDS_SUM_BLOCK_RANGE_ASC',
  ConsumerQueryRewardsSumBlockRangeDesc = 'CONSUMER_QUERY_REWARDS_SUM_BLOCK_RANGE_DESC',
  ConsumerQueryRewardsSumConsumerAsc = 'CONSUMER_QUERY_REWARDS_SUM_CONSUMER_ASC',
  ConsumerQueryRewardsSumConsumerDesc = 'CONSUMER_QUERY_REWARDS_SUM_CONSUMER_DESC',
  ConsumerQueryRewardsSumCreateAtAsc = 'CONSUMER_QUERY_REWARDS_SUM_CREATE_AT_ASC',
  ConsumerQueryRewardsSumCreateAtDesc = 'CONSUMER_QUERY_REWARDS_SUM_CREATE_AT_DESC',
  ConsumerQueryRewardsSumDeploymentIdAsc = 'CONSUMER_QUERY_REWARDS_SUM_DEPLOYMENT_ID_ASC',
  ConsumerQueryRewardsSumDeploymentIdDesc = 'CONSUMER_QUERY_REWARDS_SUM_DEPLOYMENT_ID_DESC',
  ConsumerQueryRewardsSumIdAsc = 'CONSUMER_QUERY_REWARDS_SUM_ID_ASC',
  ConsumerQueryRewardsSumIdDesc = 'CONSUMER_QUERY_REWARDS_SUM_ID_DESC',
  ConsumerQueryRewardsSumOrderIdAsc = 'CONSUMER_QUERY_REWARDS_SUM_ORDER_ID_ASC',
  ConsumerQueryRewardsSumOrderIdDesc = 'CONSUMER_QUERY_REWARDS_SUM_ORDER_ID_DESC',
  ConsumerQueryRewardsSumOrderTypeAsc = 'CONSUMER_QUERY_REWARDS_SUM_ORDER_TYPE_ASC',
  ConsumerQueryRewardsSumOrderTypeDesc = 'CONSUMER_QUERY_REWARDS_SUM_ORDER_TYPE_DESC',
  ConsumerQueryRewardsSumProjectIdAsc = 'CONSUMER_QUERY_REWARDS_SUM_PROJECT_ID_ASC',
  ConsumerQueryRewardsSumProjectIdDesc = 'CONSUMER_QUERY_REWARDS_SUM_PROJECT_ID_DESC',
  ConsumerQueryRewardsSumRefundedAsc = 'CONSUMER_QUERY_REWARDS_SUM_REFUNDED_ASC',
  ConsumerQueryRewardsSumRefundedDesc = 'CONSUMER_QUERY_REWARDS_SUM_REFUNDED_DESC',
  ConsumerQueryRewardsSumSpentAsc = 'CONSUMER_QUERY_REWARDS_SUM_SPENT_ASC',
  ConsumerQueryRewardsSumSpentDesc = 'CONSUMER_QUERY_REWARDS_SUM_SPENT_DESC',
  ConsumerQueryRewardsSumUpdateAtAsc = 'CONSUMER_QUERY_REWARDS_SUM_UPDATE_AT_ASC',
  ConsumerQueryRewardsSumUpdateAtDesc = 'CONSUMER_QUERY_REWARDS_SUM_UPDATE_AT_DESC',
  ConsumerQueryRewardsVariancePopulationBlockRangeAsc = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  ConsumerQueryRewardsVariancePopulationBlockRangeDesc = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  ConsumerQueryRewardsVariancePopulationConsumerAsc = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_CONSUMER_ASC',
  ConsumerQueryRewardsVariancePopulationConsumerDesc = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_CONSUMER_DESC',
  ConsumerQueryRewardsVariancePopulationCreateAtAsc = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_CREATE_AT_ASC',
  ConsumerQueryRewardsVariancePopulationCreateAtDesc = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_CREATE_AT_DESC',
  ConsumerQueryRewardsVariancePopulationDeploymentIdAsc = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC',
  ConsumerQueryRewardsVariancePopulationDeploymentIdDesc = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC',
  ConsumerQueryRewardsVariancePopulationIdAsc = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_ID_ASC',
  ConsumerQueryRewardsVariancePopulationIdDesc = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_ID_DESC',
  ConsumerQueryRewardsVariancePopulationOrderIdAsc = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_ORDER_ID_ASC',
  ConsumerQueryRewardsVariancePopulationOrderIdDesc = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_ORDER_ID_DESC',
  ConsumerQueryRewardsVariancePopulationOrderTypeAsc = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_ORDER_TYPE_ASC',
  ConsumerQueryRewardsVariancePopulationOrderTypeDesc = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_ORDER_TYPE_DESC',
  ConsumerQueryRewardsVariancePopulationProjectIdAsc = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_PROJECT_ID_ASC',
  ConsumerQueryRewardsVariancePopulationProjectIdDesc = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_PROJECT_ID_DESC',
  ConsumerQueryRewardsVariancePopulationRefundedAsc = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_REFUNDED_ASC',
  ConsumerQueryRewardsVariancePopulationRefundedDesc = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_REFUNDED_DESC',
  ConsumerQueryRewardsVariancePopulationSpentAsc = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_SPENT_ASC',
  ConsumerQueryRewardsVariancePopulationSpentDesc = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_SPENT_DESC',
  ConsumerQueryRewardsVariancePopulationUpdateAtAsc = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_UPDATE_AT_ASC',
  ConsumerQueryRewardsVariancePopulationUpdateAtDesc = 'CONSUMER_QUERY_REWARDS_VARIANCE_POPULATION_UPDATE_AT_DESC',
  ConsumerQueryRewardsVarianceSampleBlockRangeAsc = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  ConsumerQueryRewardsVarianceSampleBlockRangeDesc = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  ConsumerQueryRewardsVarianceSampleConsumerAsc = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_CONSUMER_ASC',
  ConsumerQueryRewardsVarianceSampleConsumerDesc = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_CONSUMER_DESC',
  ConsumerQueryRewardsVarianceSampleCreateAtAsc = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_CREATE_AT_ASC',
  ConsumerQueryRewardsVarianceSampleCreateAtDesc = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_CREATE_AT_DESC',
  ConsumerQueryRewardsVarianceSampleDeploymentIdAsc = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC',
  ConsumerQueryRewardsVarianceSampleDeploymentIdDesc = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC',
  ConsumerQueryRewardsVarianceSampleIdAsc = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_ID_ASC',
  ConsumerQueryRewardsVarianceSampleIdDesc = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_ID_DESC',
  ConsumerQueryRewardsVarianceSampleOrderIdAsc = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_ORDER_ID_ASC',
  ConsumerQueryRewardsVarianceSampleOrderIdDesc = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_ORDER_ID_DESC',
  ConsumerQueryRewardsVarianceSampleOrderTypeAsc = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_ORDER_TYPE_ASC',
  ConsumerQueryRewardsVarianceSampleOrderTypeDesc = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_ORDER_TYPE_DESC',
  ConsumerQueryRewardsVarianceSampleProjectIdAsc = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_PROJECT_ID_ASC',
  ConsumerQueryRewardsVarianceSampleProjectIdDesc = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_PROJECT_ID_DESC',
  ConsumerQueryRewardsVarianceSampleRefundedAsc = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_REFUNDED_ASC',
  ConsumerQueryRewardsVarianceSampleRefundedDesc = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_REFUNDED_DESC',
  ConsumerQueryRewardsVarianceSampleSpentAsc = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_SPENT_ASC',
  ConsumerQueryRewardsVarianceSampleSpentDesc = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_SPENT_DESC',
  ConsumerQueryRewardsVarianceSampleUpdateAtAsc = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_UPDATE_AT_ASC',
  ConsumerQueryRewardsVarianceSampleUpdateAtDesc = 'CONSUMER_QUERY_REWARDS_VARIANCE_SAMPLE_UPDATE_AT_DESC',
  ConsumerQueryRewardSummariesAverageBlockRangeAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_BLOCK_RANGE_ASC',
  ConsumerQueryRewardSummariesAverageBlockRangeDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_BLOCK_RANGE_DESC',
  ConsumerQueryRewardSummariesAverageConsumerAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_CONSUMER_ASC',
  ConsumerQueryRewardSummariesAverageConsumerDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_CONSUMER_DESC',
  ConsumerQueryRewardSummariesAverageCreateAtAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_CREATE_AT_ASC',
  ConsumerQueryRewardSummariesAverageCreateAtDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_CREATE_AT_DESC',
  ConsumerQueryRewardSummariesAverageDeploymentIdAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_DEPLOYMENT_ID_ASC',
  ConsumerQueryRewardSummariesAverageDeploymentIdDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_DEPLOYMENT_ID_DESC',
  ConsumerQueryRewardSummariesAverageIdAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_ID_ASC',
  ConsumerQueryRewardSummariesAverageIdDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_ID_DESC',
  ConsumerQueryRewardSummariesAverageOrderTypeAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_ORDER_TYPE_ASC',
  ConsumerQueryRewardSummariesAverageOrderTypeDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_ORDER_TYPE_DESC',
  ConsumerQueryRewardSummariesAverageProjectIdAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_PROJECT_ID_ASC',
  ConsumerQueryRewardSummariesAverageProjectIdDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_PROJECT_ID_DESC',
  ConsumerQueryRewardSummariesAverageTotalRefundedAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_TOTAL_REFUNDED_ASC',
  ConsumerQueryRewardSummariesAverageTotalRefundedDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_TOTAL_REFUNDED_DESC',
  ConsumerQueryRewardSummariesAverageTotalSpentAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_TOTAL_SPENT_ASC',
  ConsumerQueryRewardSummariesAverageTotalSpentDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_TOTAL_SPENT_DESC',
  ConsumerQueryRewardSummariesAverageUpdateAtAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_UPDATE_AT_ASC',
  ConsumerQueryRewardSummariesAverageUpdateAtDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_AVERAGE_UPDATE_AT_DESC',
  ConsumerQueryRewardSummariesByProjectIdCountAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_BY_PROJECT_ID__COUNT_ASC',
  ConsumerQueryRewardSummariesByProjectIdCountDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_BY_PROJECT_ID__COUNT_DESC',
  ConsumerQueryRewardSummariesCountAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_COUNT_ASC',
  ConsumerQueryRewardSummariesCountDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_COUNT_DESC',
  ConsumerQueryRewardSummariesDistinctCountBlockRangeAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  ConsumerQueryRewardSummariesDistinctCountBlockRangeDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  ConsumerQueryRewardSummariesDistinctCountConsumerAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_CONSUMER_ASC',
  ConsumerQueryRewardSummariesDistinctCountConsumerDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_CONSUMER_DESC',
  ConsumerQueryRewardSummariesDistinctCountCreateAtAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_CREATE_AT_ASC',
  ConsumerQueryRewardSummariesDistinctCountCreateAtDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_CREATE_AT_DESC',
  ConsumerQueryRewardSummariesDistinctCountDeploymentIdAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_DEPLOYMENT_ID_ASC',
  ConsumerQueryRewardSummariesDistinctCountDeploymentIdDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_DEPLOYMENT_ID_DESC',
  ConsumerQueryRewardSummariesDistinctCountIdAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_ID_ASC',
  ConsumerQueryRewardSummariesDistinctCountIdDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_ID_DESC',
  ConsumerQueryRewardSummariesDistinctCountOrderTypeAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_ORDER_TYPE_ASC',
  ConsumerQueryRewardSummariesDistinctCountOrderTypeDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_ORDER_TYPE_DESC',
  ConsumerQueryRewardSummariesDistinctCountProjectIdAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_PROJECT_ID_ASC',
  ConsumerQueryRewardSummariesDistinctCountProjectIdDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_PROJECT_ID_DESC',
  ConsumerQueryRewardSummariesDistinctCountTotalRefundedAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_TOTAL_REFUNDED_ASC',
  ConsumerQueryRewardSummariesDistinctCountTotalRefundedDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_TOTAL_REFUNDED_DESC',
  ConsumerQueryRewardSummariesDistinctCountTotalSpentAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_TOTAL_SPENT_ASC',
  ConsumerQueryRewardSummariesDistinctCountTotalSpentDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_TOTAL_SPENT_DESC',
  ConsumerQueryRewardSummariesDistinctCountUpdateAtAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_UPDATE_AT_ASC',
  ConsumerQueryRewardSummariesDistinctCountUpdateAtDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_DISTINCT_COUNT_UPDATE_AT_DESC',
  ConsumerQueryRewardSummariesMaxBlockRangeAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_BLOCK_RANGE_ASC',
  ConsumerQueryRewardSummariesMaxBlockRangeDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_BLOCK_RANGE_DESC',
  ConsumerQueryRewardSummariesMaxConsumerAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_CONSUMER_ASC',
  ConsumerQueryRewardSummariesMaxConsumerDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_CONSUMER_DESC',
  ConsumerQueryRewardSummariesMaxCreateAtAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_CREATE_AT_ASC',
  ConsumerQueryRewardSummariesMaxCreateAtDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_CREATE_AT_DESC',
  ConsumerQueryRewardSummariesMaxDeploymentIdAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_DEPLOYMENT_ID_ASC',
  ConsumerQueryRewardSummariesMaxDeploymentIdDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_DEPLOYMENT_ID_DESC',
  ConsumerQueryRewardSummariesMaxIdAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_ID_ASC',
  ConsumerQueryRewardSummariesMaxIdDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_ID_DESC',
  ConsumerQueryRewardSummariesMaxOrderTypeAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_ORDER_TYPE_ASC',
  ConsumerQueryRewardSummariesMaxOrderTypeDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_ORDER_TYPE_DESC',
  ConsumerQueryRewardSummariesMaxProjectIdAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_PROJECT_ID_ASC',
  ConsumerQueryRewardSummariesMaxProjectIdDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_PROJECT_ID_DESC',
  ConsumerQueryRewardSummariesMaxTotalRefundedAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_TOTAL_REFUNDED_ASC',
  ConsumerQueryRewardSummariesMaxTotalRefundedDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_TOTAL_REFUNDED_DESC',
  ConsumerQueryRewardSummariesMaxTotalSpentAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_TOTAL_SPENT_ASC',
  ConsumerQueryRewardSummariesMaxTotalSpentDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_TOTAL_SPENT_DESC',
  ConsumerQueryRewardSummariesMaxUpdateAtAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_UPDATE_AT_ASC',
  ConsumerQueryRewardSummariesMaxUpdateAtDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MAX_UPDATE_AT_DESC',
  ConsumerQueryRewardSummariesMinBlockRangeAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_BLOCK_RANGE_ASC',
  ConsumerQueryRewardSummariesMinBlockRangeDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_BLOCK_RANGE_DESC',
  ConsumerQueryRewardSummariesMinConsumerAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_CONSUMER_ASC',
  ConsumerQueryRewardSummariesMinConsumerDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_CONSUMER_DESC',
  ConsumerQueryRewardSummariesMinCreateAtAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_CREATE_AT_ASC',
  ConsumerQueryRewardSummariesMinCreateAtDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_CREATE_AT_DESC',
  ConsumerQueryRewardSummariesMinDeploymentIdAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_DEPLOYMENT_ID_ASC',
  ConsumerQueryRewardSummariesMinDeploymentIdDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_DEPLOYMENT_ID_DESC',
  ConsumerQueryRewardSummariesMinIdAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_ID_ASC',
  ConsumerQueryRewardSummariesMinIdDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_ID_DESC',
  ConsumerQueryRewardSummariesMinOrderTypeAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_ORDER_TYPE_ASC',
  ConsumerQueryRewardSummariesMinOrderTypeDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_ORDER_TYPE_DESC',
  ConsumerQueryRewardSummariesMinProjectIdAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_PROJECT_ID_ASC',
  ConsumerQueryRewardSummariesMinProjectIdDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_PROJECT_ID_DESC',
  ConsumerQueryRewardSummariesMinTotalRefundedAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_TOTAL_REFUNDED_ASC',
  ConsumerQueryRewardSummariesMinTotalRefundedDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_TOTAL_REFUNDED_DESC',
  ConsumerQueryRewardSummariesMinTotalSpentAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_TOTAL_SPENT_ASC',
  ConsumerQueryRewardSummariesMinTotalSpentDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_TOTAL_SPENT_DESC',
  ConsumerQueryRewardSummariesMinUpdateAtAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_UPDATE_AT_ASC',
  ConsumerQueryRewardSummariesMinUpdateAtDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_MIN_UPDATE_AT_DESC',
  ConsumerQueryRewardSummariesStddevPopulationBlockRangeAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  ConsumerQueryRewardSummariesStddevPopulationBlockRangeDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  ConsumerQueryRewardSummariesStddevPopulationConsumerAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_CONSUMER_ASC',
  ConsumerQueryRewardSummariesStddevPopulationConsumerDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_CONSUMER_DESC',
  ConsumerQueryRewardSummariesStddevPopulationCreateAtAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_CREATE_AT_ASC',
  ConsumerQueryRewardSummariesStddevPopulationCreateAtDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_CREATE_AT_DESC',
  ConsumerQueryRewardSummariesStddevPopulationDeploymentIdAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_DEPLOYMENT_ID_ASC',
  ConsumerQueryRewardSummariesStddevPopulationDeploymentIdDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_DEPLOYMENT_ID_DESC',
  ConsumerQueryRewardSummariesStddevPopulationIdAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_ID_ASC',
  ConsumerQueryRewardSummariesStddevPopulationIdDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_ID_DESC',
  ConsumerQueryRewardSummariesStddevPopulationOrderTypeAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_ORDER_TYPE_ASC',
  ConsumerQueryRewardSummariesStddevPopulationOrderTypeDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_ORDER_TYPE_DESC',
  ConsumerQueryRewardSummariesStddevPopulationProjectIdAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_PROJECT_ID_ASC',
  ConsumerQueryRewardSummariesStddevPopulationProjectIdDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_PROJECT_ID_DESC',
  ConsumerQueryRewardSummariesStddevPopulationTotalRefundedAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_TOTAL_REFUNDED_ASC',
  ConsumerQueryRewardSummariesStddevPopulationTotalRefundedDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_TOTAL_REFUNDED_DESC',
  ConsumerQueryRewardSummariesStddevPopulationTotalSpentAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_TOTAL_SPENT_ASC',
  ConsumerQueryRewardSummariesStddevPopulationTotalSpentDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_TOTAL_SPENT_DESC',
  ConsumerQueryRewardSummariesStddevPopulationUpdateAtAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_UPDATE_AT_ASC',
  ConsumerQueryRewardSummariesStddevPopulationUpdateAtDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_POPULATION_UPDATE_AT_DESC',
  ConsumerQueryRewardSummariesStddevSampleBlockRangeAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  ConsumerQueryRewardSummariesStddevSampleBlockRangeDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  ConsumerQueryRewardSummariesStddevSampleConsumerAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_CONSUMER_ASC',
  ConsumerQueryRewardSummariesStddevSampleConsumerDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_CONSUMER_DESC',
  ConsumerQueryRewardSummariesStddevSampleCreateAtAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_CREATE_AT_ASC',
  ConsumerQueryRewardSummariesStddevSampleCreateAtDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_CREATE_AT_DESC',
  ConsumerQueryRewardSummariesStddevSampleDeploymentIdAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC',
  ConsumerQueryRewardSummariesStddevSampleDeploymentIdDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC',
  ConsumerQueryRewardSummariesStddevSampleIdAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_ID_ASC',
  ConsumerQueryRewardSummariesStddevSampleIdDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_ID_DESC',
  ConsumerQueryRewardSummariesStddevSampleOrderTypeAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_ORDER_TYPE_ASC',
  ConsumerQueryRewardSummariesStddevSampleOrderTypeDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_ORDER_TYPE_DESC',
  ConsumerQueryRewardSummariesStddevSampleProjectIdAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_PROJECT_ID_ASC',
  ConsumerQueryRewardSummariesStddevSampleProjectIdDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_PROJECT_ID_DESC',
  ConsumerQueryRewardSummariesStddevSampleTotalRefundedAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_TOTAL_REFUNDED_ASC',
  ConsumerQueryRewardSummariesStddevSampleTotalRefundedDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_TOTAL_REFUNDED_DESC',
  ConsumerQueryRewardSummariesStddevSampleTotalSpentAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_TOTAL_SPENT_ASC',
  ConsumerQueryRewardSummariesStddevSampleTotalSpentDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_TOTAL_SPENT_DESC',
  ConsumerQueryRewardSummariesStddevSampleUpdateAtAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_UPDATE_AT_ASC',
  ConsumerQueryRewardSummariesStddevSampleUpdateAtDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_STDDEV_SAMPLE_UPDATE_AT_DESC',
  ConsumerQueryRewardSummariesSumBlockRangeAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_BLOCK_RANGE_ASC',
  ConsumerQueryRewardSummariesSumBlockRangeDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_BLOCK_RANGE_DESC',
  ConsumerQueryRewardSummariesSumConsumerAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_CONSUMER_ASC',
  ConsumerQueryRewardSummariesSumConsumerDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_CONSUMER_DESC',
  ConsumerQueryRewardSummariesSumCreateAtAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_CREATE_AT_ASC',
  ConsumerQueryRewardSummariesSumCreateAtDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_CREATE_AT_DESC',
  ConsumerQueryRewardSummariesSumDeploymentIdAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_DEPLOYMENT_ID_ASC',
  ConsumerQueryRewardSummariesSumDeploymentIdDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_DEPLOYMENT_ID_DESC',
  ConsumerQueryRewardSummariesSumIdAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_ID_ASC',
  ConsumerQueryRewardSummariesSumIdDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_ID_DESC',
  ConsumerQueryRewardSummariesSumOrderTypeAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_ORDER_TYPE_ASC',
  ConsumerQueryRewardSummariesSumOrderTypeDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_ORDER_TYPE_DESC',
  ConsumerQueryRewardSummariesSumProjectIdAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_PROJECT_ID_ASC',
  ConsumerQueryRewardSummariesSumProjectIdDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_PROJECT_ID_DESC',
  ConsumerQueryRewardSummariesSumTotalRefundedAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_TOTAL_REFUNDED_ASC',
  ConsumerQueryRewardSummariesSumTotalRefundedDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_TOTAL_REFUNDED_DESC',
  ConsumerQueryRewardSummariesSumTotalSpentAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_TOTAL_SPENT_ASC',
  ConsumerQueryRewardSummariesSumTotalSpentDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_TOTAL_SPENT_DESC',
  ConsumerQueryRewardSummariesSumUpdateAtAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_UPDATE_AT_ASC',
  ConsumerQueryRewardSummariesSumUpdateAtDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_SUM_UPDATE_AT_DESC',
  ConsumerQueryRewardSummariesVariancePopulationBlockRangeAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  ConsumerQueryRewardSummariesVariancePopulationBlockRangeDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  ConsumerQueryRewardSummariesVariancePopulationConsumerAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_CONSUMER_ASC',
  ConsumerQueryRewardSummariesVariancePopulationConsumerDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_CONSUMER_DESC',
  ConsumerQueryRewardSummariesVariancePopulationCreateAtAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_CREATE_AT_ASC',
  ConsumerQueryRewardSummariesVariancePopulationCreateAtDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_CREATE_AT_DESC',
  ConsumerQueryRewardSummariesVariancePopulationDeploymentIdAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC',
  ConsumerQueryRewardSummariesVariancePopulationDeploymentIdDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC',
  ConsumerQueryRewardSummariesVariancePopulationIdAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_ID_ASC',
  ConsumerQueryRewardSummariesVariancePopulationIdDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_ID_DESC',
  ConsumerQueryRewardSummariesVariancePopulationOrderTypeAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_ORDER_TYPE_ASC',
  ConsumerQueryRewardSummariesVariancePopulationOrderTypeDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_ORDER_TYPE_DESC',
  ConsumerQueryRewardSummariesVariancePopulationProjectIdAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_PROJECT_ID_ASC',
  ConsumerQueryRewardSummariesVariancePopulationProjectIdDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_PROJECT_ID_DESC',
  ConsumerQueryRewardSummariesVariancePopulationTotalRefundedAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_TOTAL_REFUNDED_ASC',
  ConsumerQueryRewardSummariesVariancePopulationTotalRefundedDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_TOTAL_REFUNDED_DESC',
  ConsumerQueryRewardSummariesVariancePopulationTotalSpentAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_TOTAL_SPENT_ASC',
  ConsumerQueryRewardSummariesVariancePopulationTotalSpentDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_TOTAL_SPENT_DESC',
  ConsumerQueryRewardSummariesVariancePopulationUpdateAtAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_UPDATE_AT_ASC',
  ConsumerQueryRewardSummariesVariancePopulationUpdateAtDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_POPULATION_UPDATE_AT_DESC',
  ConsumerQueryRewardSummariesVarianceSampleBlockRangeAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  ConsumerQueryRewardSummariesVarianceSampleBlockRangeDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  ConsumerQueryRewardSummariesVarianceSampleConsumerAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_CONSUMER_ASC',
  ConsumerQueryRewardSummariesVarianceSampleConsumerDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_CONSUMER_DESC',
  ConsumerQueryRewardSummariesVarianceSampleCreateAtAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_CREATE_AT_ASC',
  ConsumerQueryRewardSummariesVarianceSampleCreateAtDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_CREATE_AT_DESC',
  ConsumerQueryRewardSummariesVarianceSampleDeploymentIdAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC',
  ConsumerQueryRewardSummariesVarianceSampleDeploymentIdDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC',
  ConsumerQueryRewardSummariesVarianceSampleIdAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_ID_ASC',
  ConsumerQueryRewardSummariesVarianceSampleIdDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_ID_DESC',
  ConsumerQueryRewardSummariesVarianceSampleOrderTypeAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_ORDER_TYPE_ASC',
  ConsumerQueryRewardSummariesVarianceSampleOrderTypeDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_ORDER_TYPE_DESC',
  ConsumerQueryRewardSummariesVarianceSampleProjectIdAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_PROJECT_ID_ASC',
  ConsumerQueryRewardSummariesVarianceSampleProjectIdDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_PROJECT_ID_DESC',
  ConsumerQueryRewardSummariesVarianceSampleTotalRefundedAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_TOTAL_REFUNDED_ASC',
  ConsumerQueryRewardSummariesVarianceSampleTotalRefundedDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_TOTAL_REFUNDED_DESC',
  ConsumerQueryRewardSummariesVarianceSampleTotalSpentAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_TOTAL_SPENT_ASC',
  ConsumerQueryRewardSummariesVarianceSampleTotalSpentDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_TOTAL_SPENT_DESC',
  ConsumerQueryRewardSummariesVarianceSampleUpdateAtAsc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_UPDATE_AT_ASC',
  ConsumerQueryRewardSummariesVarianceSampleUpdateAtDesc = 'CONSUMER_QUERY_REWARD_SUMMARIES_VARIANCE_SAMPLE_UPDATE_AT_DESC',
  CreatedBlockAsc = 'CREATED_BLOCK_ASC',
  CreatedBlockDesc = 'CREATED_BLOCK_DESC',
  CreatedTimestampAsc = 'CREATED_TIMESTAMP_ASC',
  CreatedTimestampDesc = 'CREATED_TIMESTAMP_DESC',
  DeploymentsAverageBlockRangeAsc = 'DEPLOYMENTS_AVERAGE_BLOCK_RANGE_ASC',
  DeploymentsAverageBlockRangeDesc = 'DEPLOYMENTS_AVERAGE_BLOCK_RANGE_DESC',
  DeploymentsAverageCreatedBlockAsc = 'DEPLOYMENTS_AVERAGE_CREATED_BLOCK_ASC',
  DeploymentsAverageCreatedBlockDesc = 'DEPLOYMENTS_AVERAGE_CREATED_BLOCK_DESC',
  DeploymentsAverageCreatedTimestampAsc = 'DEPLOYMENTS_AVERAGE_CREATED_TIMESTAMP_ASC',
  DeploymentsAverageCreatedTimestampDesc = 'DEPLOYMENTS_AVERAGE_CREATED_TIMESTAMP_DESC',
  DeploymentsAverageIdAsc = 'DEPLOYMENTS_AVERAGE_ID_ASC',
  DeploymentsAverageIdDesc = 'DEPLOYMENTS_AVERAGE_ID_DESC',
  DeploymentsAverageLastEventAsc = 'DEPLOYMENTS_AVERAGE_LAST_EVENT_ASC',
  DeploymentsAverageLastEventDesc = 'DEPLOYMENTS_AVERAGE_LAST_EVENT_DESC',
  DeploymentsAverageMetadataAsc = 'DEPLOYMENTS_AVERAGE_METADATA_ASC',
  DeploymentsAverageMetadataDesc = 'DEPLOYMENTS_AVERAGE_METADATA_DESC',
  DeploymentsAverageProjectIdAsc = 'DEPLOYMENTS_AVERAGE_PROJECT_ID_ASC',
  DeploymentsAverageProjectIdDesc = 'DEPLOYMENTS_AVERAGE_PROJECT_ID_DESC',
  DeploymentsByProjectIdCountAsc = 'DEPLOYMENTS_BY_PROJECT_ID__COUNT_ASC',
  DeploymentsByProjectIdCountDesc = 'DEPLOYMENTS_BY_PROJECT_ID__COUNT_DESC',
  DeploymentsCountAsc = 'DEPLOYMENTS_COUNT_ASC',
  DeploymentsCountDesc = 'DEPLOYMENTS_COUNT_DESC',
  DeploymentsDistinctCountBlockRangeAsc = 'DEPLOYMENTS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  DeploymentsDistinctCountBlockRangeDesc = 'DEPLOYMENTS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  DeploymentsDistinctCountCreatedBlockAsc = 'DEPLOYMENTS_DISTINCT_COUNT_CREATED_BLOCK_ASC',
  DeploymentsDistinctCountCreatedBlockDesc = 'DEPLOYMENTS_DISTINCT_COUNT_CREATED_BLOCK_DESC',
  DeploymentsDistinctCountCreatedTimestampAsc = 'DEPLOYMENTS_DISTINCT_COUNT_CREATED_TIMESTAMP_ASC',
  DeploymentsDistinctCountCreatedTimestampDesc = 'DEPLOYMENTS_DISTINCT_COUNT_CREATED_TIMESTAMP_DESC',
  DeploymentsDistinctCountIdAsc = 'DEPLOYMENTS_DISTINCT_COUNT_ID_ASC',
  DeploymentsDistinctCountIdDesc = 'DEPLOYMENTS_DISTINCT_COUNT_ID_DESC',
  DeploymentsDistinctCountLastEventAsc = 'DEPLOYMENTS_DISTINCT_COUNT_LAST_EVENT_ASC',
  DeploymentsDistinctCountLastEventDesc = 'DEPLOYMENTS_DISTINCT_COUNT_LAST_EVENT_DESC',
  DeploymentsDistinctCountMetadataAsc = 'DEPLOYMENTS_DISTINCT_COUNT_METADATA_ASC',
  DeploymentsDistinctCountMetadataDesc = 'DEPLOYMENTS_DISTINCT_COUNT_METADATA_DESC',
  DeploymentsDistinctCountProjectIdAsc = 'DEPLOYMENTS_DISTINCT_COUNT_PROJECT_ID_ASC',
  DeploymentsDistinctCountProjectIdDesc = 'DEPLOYMENTS_DISTINCT_COUNT_PROJECT_ID_DESC',
  DeploymentsMaxBlockRangeAsc = 'DEPLOYMENTS_MAX_BLOCK_RANGE_ASC',
  DeploymentsMaxBlockRangeDesc = 'DEPLOYMENTS_MAX_BLOCK_RANGE_DESC',
  DeploymentsMaxCreatedBlockAsc = 'DEPLOYMENTS_MAX_CREATED_BLOCK_ASC',
  DeploymentsMaxCreatedBlockDesc = 'DEPLOYMENTS_MAX_CREATED_BLOCK_DESC',
  DeploymentsMaxCreatedTimestampAsc = 'DEPLOYMENTS_MAX_CREATED_TIMESTAMP_ASC',
  DeploymentsMaxCreatedTimestampDesc = 'DEPLOYMENTS_MAX_CREATED_TIMESTAMP_DESC',
  DeploymentsMaxIdAsc = 'DEPLOYMENTS_MAX_ID_ASC',
  DeploymentsMaxIdDesc = 'DEPLOYMENTS_MAX_ID_DESC',
  DeploymentsMaxLastEventAsc = 'DEPLOYMENTS_MAX_LAST_EVENT_ASC',
  DeploymentsMaxLastEventDesc = 'DEPLOYMENTS_MAX_LAST_EVENT_DESC',
  DeploymentsMaxMetadataAsc = 'DEPLOYMENTS_MAX_METADATA_ASC',
  DeploymentsMaxMetadataDesc = 'DEPLOYMENTS_MAX_METADATA_DESC',
  DeploymentsMaxProjectIdAsc = 'DEPLOYMENTS_MAX_PROJECT_ID_ASC',
  DeploymentsMaxProjectIdDesc = 'DEPLOYMENTS_MAX_PROJECT_ID_DESC',
  DeploymentsMinBlockRangeAsc = 'DEPLOYMENTS_MIN_BLOCK_RANGE_ASC',
  DeploymentsMinBlockRangeDesc = 'DEPLOYMENTS_MIN_BLOCK_RANGE_DESC',
  DeploymentsMinCreatedBlockAsc = 'DEPLOYMENTS_MIN_CREATED_BLOCK_ASC',
  DeploymentsMinCreatedBlockDesc = 'DEPLOYMENTS_MIN_CREATED_BLOCK_DESC',
  DeploymentsMinCreatedTimestampAsc = 'DEPLOYMENTS_MIN_CREATED_TIMESTAMP_ASC',
  DeploymentsMinCreatedTimestampDesc = 'DEPLOYMENTS_MIN_CREATED_TIMESTAMP_DESC',
  DeploymentsMinIdAsc = 'DEPLOYMENTS_MIN_ID_ASC',
  DeploymentsMinIdDesc = 'DEPLOYMENTS_MIN_ID_DESC',
  DeploymentsMinLastEventAsc = 'DEPLOYMENTS_MIN_LAST_EVENT_ASC',
  DeploymentsMinLastEventDesc = 'DEPLOYMENTS_MIN_LAST_EVENT_DESC',
  DeploymentsMinMetadataAsc = 'DEPLOYMENTS_MIN_METADATA_ASC',
  DeploymentsMinMetadataDesc = 'DEPLOYMENTS_MIN_METADATA_DESC',
  DeploymentsMinProjectIdAsc = 'DEPLOYMENTS_MIN_PROJECT_ID_ASC',
  DeploymentsMinProjectIdDesc = 'DEPLOYMENTS_MIN_PROJECT_ID_DESC',
  DeploymentsStddevPopulationBlockRangeAsc = 'DEPLOYMENTS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  DeploymentsStddevPopulationBlockRangeDesc = 'DEPLOYMENTS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  DeploymentsStddevPopulationCreatedBlockAsc = 'DEPLOYMENTS_STDDEV_POPULATION_CREATED_BLOCK_ASC',
  DeploymentsStddevPopulationCreatedBlockDesc = 'DEPLOYMENTS_STDDEV_POPULATION_CREATED_BLOCK_DESC',
  DeploymentsStddevPopulationCreatedTimestampAsc = 'DEPLOYMENTS_STDDEV_POPULATION_CREATED_TIMESTAMP_ASC',
  DeploymentsStddevPopulationCreatedTimestampDesc = 'DEPLOYMENTS_STDDEV_POPULATION_CREATED_TIMESTAMP_DESC',
  DeploymentsStddevPopulationIdAsc = 'DEPLOYMENTS_STDDEV_POPULATION_ID_ASC',
  DeploymentsStddevPopulationIdDesc = 'DEPLOYMENTS_STDDEV_POPULATION_ID_DESC',
  DeploymentsStddevPopulationLastEventAsc = 'DEPLOYMENTS_STDDEV_POPULATION_LAST_EVENT_ASC',
  DeploymentsStddevPopulationLastEventDesc = 'DEPLOYMENTS_STDDEV_POPULATION_LAST_EVENT_DESC',
  DeploymentsStddevPopulationMetadataAsc = 'DEPLOYMENTS_STDDEV_POPULATION_METADATA_ASC',
  DeploymentsStddevPopulationMetadataDesc = 'DEPLOYMENTS_STDDEV_POPULATION_METADATA_DESC',
  DeploymentsStddevPopulationProjectIdAsc = 'DEPLOYMENTS_STDDEV_POPULATION_PROJECT_ID_ASC',
  DeploymentsStddevPopulationProjectIdDesc = 'DEPLOYMENTS_STDDEV_POPULATION_PROJECT_ID_DESC',
  DeploymentsStddevSampleBlockRangeAsc = 'DEPLOYMENTS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  DeploymentsStddevSampleBlockRangeDesc = 'DEPLOYMENTS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  DeploymentsStddevSampleCreatedBlockAsc = 'DEPLOYMENTS_STDDEV_SAMPLE_CREATED_BLOCK_ASC',
  DeploymentsStddevSampleCreatedBlockDesc = 'DEPLOYMENTS_STDDEV_SAMPLE_CREATED_BLOCK_DESC',
  DeploymentsStddevSampleCreatedTimestampAsc = 'DEPLOYMENTS_STDDEV_SAMPLE_CREATED_TIMESTAMP_ASC',
  DeploymentsStddevSampleCreatedTimestampDesc = 'DEPLOYMENTS_STDDEV_SAMPLE_CREATED_TIMESTAMP_DESC',
  DeploymentsStddevSampleIdAsc = 'DEPLOYMENTS_STDDEV_SAMPLE_ID_ASC',
  DeploymentsStddevSampleIdDesc = 'DEPLOYMENTS_STDDEV_SAMPLE_ID_DESC',
  DeploymentsStddevSampleLastEventAsc = 'DEPLOYMENTS_STDDEV_SAMPLE_LAST_EVENT_ASC',
  DeploymentsStddevSampleLastEventDesc = 'DEPLOYMENTS_STDDEV_SAMPLE_LAST_EVENT_DESC',
  DeploymentsStddevSampleMetadataAsc = 'DEPLOYMENTS_STDDEV_SAMPLE_METADATA_ASC',
  DeploymentsStddevSampleMetadataDesc = 'DEPLOYMENTS_STDDEV_SAMPLE_METADATA_DESC',
  DeploymentsStddevSampleProjectIdAsc = 'DEPLOYMENTS_STDDEV_SAMPLE_PROJECT_ID_ASC',
  DeploymentsStddevSampleProjectIdDesc = 'DEPLOYMENTS_STDDEV_SAMPLE_PROJECT_ID_DESC',
  DeploymentsSumBlockRangeAsc = 'DEPLOYMENTS_SUM_BLOCK_RANGE_ASC',
  DeploymentsSumBlockRangeDesc = 'DEPLOYMENTS_SUM_BLOCK_RANGE_DESC',
  DeploymentsSumCreatedBlockAsc = 'DEPLOYMENTS_SUM_CREATED_BLOCK_ASC',
  DeploymentsSumCreatedBlockDesc = 'DEPLOYMENTS_SUM_CREATED_BLOCK_DESC',
  DeploymentsSumCreatedTimestampAsc = 'DEPLOYMENTS_SUM_CREATED_TIMESTAMP_ASC',
  DeploymentsSumCreatedTimestampDesc = 'DEPLOYMENTS_SUM_CREATED_TIMESTAMP_DESC',
  DeploymentsSumIdAsc = 'DEPLOYMENTS_SUM_ID_ASC',
  DeploymentsSumIdDesc = 'DEPLOYMENTS_SUM_ID_DESC',
  DeploymentsSumLastEventAsc = 'DEPLOYMENTS_SUM_LAST_EVENT_ASC',
  DeploymentsSumLastEventDesc = 'DEPLOYMENTS_SUM_LAST_EVENT_DESC',
  DeploymentsSumMetadataAsc = 'DEPLOYMENTS_SUM_METADATA_ASC',
  DeploymentsSumMetadataDesc = 'DEPLOYMENTS_SUM_METADATA_DESC',
  DeploymentsSumProjectIdAsc = 'DEPLOYMENTS_SUM_PROJECT_ID_ASC',
  DeploymentsSumProjectIdDesc = 'DEPLOYMENTS_SUM_PROJECT_ID_DESC',
  DeploymentsVariancePopulationBlockRangeAsc = 'DEPLOYMENTS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  DeploymentsVariancePopulationBlockRangeDesc = 'DEPLOYMENTS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  DeploymentsVariancePopulationCreatedBlockAsc = 'DEPLOYMENTS_VARIANCE_POPULATION_CREATED_BLOCK_ASC',
  DeploymentsVariancePopulationCreatedBlockDesc = 'DEPLOYMENTS_VARIANCE_POPULATION_CREATED_BLOCK_DESC',
  DeploymentsVariancePopulationCreatedTimestampAsc = 'DEPLOYMENTS_VARIANCE_POPULATION_CREATED_TIMESTAMP_ASC',
  DeploymentsVariancePopulationCreatedTimestampDesc = 'DEPLOYMENTS_VARIANCE_POPULATION_CREATED_TIMESTAMP_DESC',
  DeploymentsVariancePopulationIdAsc = 'DEPLOYMENTS_VARIANCE_POPULATION_ID_ASC',
  DeploymentsVariancePopulationIdDesc = 'DEPLOYMENTS_VARIANCE_POPULATION_ID_DESC',
  DeploymentsVariancePopulationLastEventAsc = 'DEPLOYMENTS_VARIANCE_POPULATION_LAST_EVENT_ASC',
  DeploymentsVariancePopulationLastEventDesc = 'DEPLOYMENTS_VARIANCE_POPULATION_LAST_EVENT_DESC',
  DeploymentsVariancePopulationMetadataAsc = 'DEPLOYMENTS_VARIANCE_POPULATION_METADATA_ASC',
  DeploymentsVariancePopulationMetadataDesc = 'DEPLOYMENTS_VARIANCE_POPULATION_METADATA_DESC',
  DeploymentsVariancePopulationProjectIdAsc = 'DEPLOYMENTS_VARIANCE_POPULATION_PROJECT_ID_ASC',
  DeploymentsVariancePopulationProjectIdDesc = 'DEPLOYMENTS_VARIANCE_POPULATION_PROJECT_ID_DESC',
  DeploymentsVarianceSampleBlockRangeAsc = 'DEPLOYMENTS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  DeploymentsVarianceSampleBlockRangeDesc = 'DEPLOYMENTS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  DeploymentsVarianceSampleCreatedBlockAsc = 'DEPLOYMENTS_VARIANCE_SAMPLE_CREATED_BLOCK_ASC',
  DeploymentsVarianceSampleCreatedBlockDesc = 'DEPLOYMENTS_VARIANCE_SAMPLE_CREATED_BLOCK_DESC',
  DeploymentsVarianceSampleCreatedTimestampAsc = 'DEPLOYMENTS_VARIANCE_SAMPLE_CREATED_TIMESTAMP_ASC',
  DeploymentsVarianceSampleCreatedTimestampDesc = 'DEPLOYMENTS_VARIANCE_SAMPLE_CREATED_TIMESTAMP_DESC',
  DeploymentsVarianceSampleIdAsc = 'DEPLOYMENTS_VARIANCE_SAMPLE_ID_ASC',
  DeploymentsVarianceSampleIdDesc = 'DEPLOYMENTS_VARIANCE_SAMPLE_ID_DESC',
  DeploymentsVarianceSampleLastEventAsc = 'DEPLOYMENTS_VARIANCE_SAMPLE_LAST_EVENT_ASC',
  DeploymentsVarianceSampleLastEventDesc = 'DEPLOYMENTS_VARIANCE_SAMPLE_LAST_EVENT_DESC',
  DeploymentsVarianceSampleMetadataAsc = 'DEPLOYMENTS_VARIANCE_SAMPLE_METADATA_ASC',
  DeploymentsVarianceSampleMetadataDesc = 'DEPLOYMENTS_VARIANCE_SAMPLE_METADATA_DESC',
  DeploymentsVarianceSampleProjectIdAsc = 'DEPLOYMENTS_VARIANCE_SAMPLE_PROJECT_ID_ASC',
  DeploymentsVarianceSampleProjectIdDesc = 'DEPLOYMENTS_VARIANCE_SAMPLE_PROJECT_ID_DESC',
  DeploymentBoostersAverageAmountAddedAsc = 'DEPLOYMENT_BOOSTERS_AVERAGE_AMOUNT_ADDED_ASC',
  DeploymentBoostersAverageAmountAddedDesc = 'DEPLOYMENT_BOOSTERS_AVERAGE_AMOUNT_ADDED_DESC',
  DeploymentBoostersAverageAmountRemovedAsc = 'DEPLOYMENT_BOOSTERS_AVERAGE_AMOUNT_REMOVED_ASC',
  DeploymentBoostersAverageAmountRemovedDesc = 'DEPLOYMENT_BOOSTERS_AVERAGE_AMOUNT_REMOVED_DESC',
  DeploymentBoostersAverageBlockRangeAsc = 'DEPLOYMENT_BOOSTERS_AVERAGE_BLOCK_RANGE_ASC',
  DeploymentBoostersAverageBlockRangeDesc = 'DEPLOYMENT_BOOSTERS_AVERAGE_BLOCK_RANGE_DESC',
  DeploymentBoostersAverageConsumerAsc = 'DEPLOYMENT_BOOSTERS_AVERAGE_CONSUMER_ASC',
  DeploymentBoostersAverageConsumerDesc = 'DEPLOYMENT_BOOSTERS_AVERAGE_CONSUMER_DESC',
  DeploymentBoostersAverageCreateAtAsc = 'DEPLOYMENT_BOOSTERS_AVERAGE_CREATE_AT_ASC',
  DeploymentBoostersAverageCreateAtDesc = 'DEPLOYMENT_BOOSTERS_AVERAGE_CREATE_AT_DESC',
  DeploymentBoostersAverageDeploymentIdAsc = 'DEPLOYMENT_BOOSTERS_AVERAGE_DEPLOYMENT_ID_ASC',
  DeploymentBoostersAverageDeploymentIdDesc = 'DEPLOYMENT_BOOSTERS_AVERAGE_DEPLOYMENT_ID_DESC',
  DeploymentBoostersAverageEraIdxAsc = 'DEPLOYMENT_BOOSTERS_AVERAGE_ERA_IDX_ASC',
  DeploymentBoostersAverageEraIdxDesc = 'DEPLOYMENT_BOOSTERS_AVERAGE_ERA_IDX_DESC',
  DeploymentBoostersAverageIdAsc = 'DEPLOYMENT_BOOSTERS_AVERAGE_ID_ASC',
  DeploymentBoostersAverageIdDesc = 'DEPLOYMENT_BOOSTERS_AVERAGE_ID_DESC',
  DeploymentBoostersAverageProjectIdAsc = 'DEPLOYMENT_BOOSTERS_AVERAGE_PROJECT_ID_ASC',
  DeploymentBoostersAverageProjectIdDesc = 'DEPLOYMENT_BOOSTERS_AVERAGE_PROJECT_ID_DESC',
  DeploymentBoostersByProjectIdCountAsc = 'DEPLOYMENT_BOOSTERS_BY_PROJECT_ID__COUNT_ASC',
  DeploymentBoostersByProjectIdCountDesc = 'DEPLOYMENT_BOOSTERS_BY_PROJECT_ID__COUNT_DESC',
  DeploymentBoostersCountAsc = 'DEPLOYMENT_BOOSTERS_COUNT_ASC',
  DeploymentBoostersCountDesc = 'DEPLOYMENT_BOOSTERS_COUNT_DESC',
  DeploymentBoostersDistinctCountAmountAddedAsc = 'DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_AMOUNT_ADDED_ASC',
  DeploymentBoostersDistinctCountAmountAddedDesc = 'DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_AMOUNT_ADDED_DESC',
  DeploymentBoostersDistinctCountAmountRemovedAsc = 'DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_AMOUNT_REMOVED_ASC',
  DeploymentBoostersDistinctCountAmountRemovedDesc = 'DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_AMOUNT_REMOVED_DESC',
  DeploymentBoostersDistinctCountBlockRangeAsc = 'DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  DeploymentBoostersDistinctCountBlockRangeDesc = 'DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  DeploymentBoostersDistinctCountConsumerAsc = 'DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_CONSUMER_ASC',
  DeploymentBoostersDistinctCountConsumerDesc = 'DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_CONSUMER_DESC',
  DeploymentBoostersDistinctCountCreateAtAsc = 'DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_CREATE_AT_ASC',
  DeploymentBoostersDistinctCountCreateAtDesc = 'DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_CREATE_AT_DESC',
  DeploymentBoostersDistinctCountDeploymentIdAsc = 'DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_DEPLOYMENT_ID_ASC',
  DeploymentBoostersDistinctCountDeploymentIdDesc = 'DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_DEPLOYMENT_ID_DESC',
  DeploymentBoostersDistinctCountEraIdxAsc = 'DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_ERA_IDX_ASC',
  DeploymentBoostersDistinctCountEraIdxDesc = 'DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_ERA_IDX_DESC',
  DeploymentBoostersDistinctCountIdAsc = 'DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_ID_ASC',
  DeploymentBoostersDistinctCountIdDesc = 'DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_ID_DESC',
  DeploymentBoostersDistinctCountProjectIdAsc = 'DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_PROJECT_ID_ASC',
  DeploymentBoostersDistinctCountProjectIdDesc = 'DEPLOYMENT_BOOSTERS_DISTINCT_COUNT_PROJECT_ID_DESC',
  DeploymentBoostersMaxAmountAddedAsc = 'DEPLOYMENT_BOOSTERS_MAX_AMOUNT_ADDED_ASC',
  DeploymentBoostersMaxAmountAddedDesc = 'DEPLOYMENT_BOOSTERS_MAX_AMOUNT_ADDED_DESC',
  DeploymentBoostersMaxAmountRemovedAsc = 'DEPLOYMENT_BOOSTERS_MAX_AMOUNT_REMOVED_ASC',
  DeploymentBoostersMaxAmountRemovedDesc = 'DEPLOYMENT_BOOSTERS_MAX_AMOUNT_REMOVED_DESC',
  DeploymentBoostersMaxBlockRangeAsc = 'DEPLOYMENT_BOOSTERS_MAX_BLOCK_RANGE_ASC',
  DeploymentBoostersMaxBlockRangeDesc = 'DEPLOYMENT_BOOSTERS_MAX_BLOCK_RANGE_DESC',
  DeploymentBoostersMaxConsumerAsc = 'DEPLOYMENT_BOOSTERS_MAX_CONSUMER_ASC',
  DeploymentBoostersMaxConsumerDesc = 'DEPLOYMENT_BOOSTERS_MAX_CONSUMER_DESC',
  DeploymentBoostersMaxCreateAtAsc = 'DEPLOYMENT_BOOSTERS_MAX_CREATE_AT_ASC',
  DeploymentBoostersMaxCreateAtDesc = 'DEPLOYMENT_BOOSTERS_MAX_CREATE_AT_DESC',
  DeploymentBoostersMaxDeploymentIdAsc = 'DEPLOYMENT_BOOSTERS_MAX_DEPLOYMENT_ID_ASC',
  DeploymentBoostersMaxDeploymentIdDesc = 'DEPLOYMENT_BOOSTERS_MAX_DEPLOYMENT_ID_DESC',
  DeploymentBoostersMaxEraIdxAsc = 'DEPLOYMENT_BOOSTERS_MAX_ERA_IDX_ASC',
  DeploymentBoostersMaxEraIdxDesc = 'DEPLOYMENT_BOOSTERS_MAX_ERA_IDX_DESC',
  DeploymentBoostersMaxIdAsc = 'DEPLOYMENT_BOOSTERS_MAX_ID_ASC',
  DeploymentBoostersMaxIdDesc = 'DEPLOYMENT_BOOSTERS_MAX_ID_DESC',
  DeploymentBoostersMaxProjectIdAsc = 'DEPLOYMENT_BOOSTERS_MAX_PROJECT_ID_ASC',
  DeploymentBoostersMaxProjectIdDesc = 'DEPLOYMENT_BOOSTERS_MAX_PROJECT_ID_DESC',
  DeploymentBoostersMinAmountAddedAsc = 'DEPLOYMENT_BOOSTERS_MIN_AMOUNT_ADDED_ASC',
  DeploymentBoostersMinAmountAddedDesc = 'DEPLOYMENT_BOOSTERS_MIN_AMOUNT_ADDED_DESC',
  DeploymentBoostersMinAmountRemovedAsc = 'DEPLOYMENT_BOOSTERS_MIN_AMOUNT_REMOVED_ASC',
  DeploymentBoostersMinAmountRemovedDesc = 'DEPLOYMENT_BOOSTERS_MIN_AMOUNT_REMOVED_DESC',
  DeploymentBoostersMinBlockRangeAsc = 'DEPLOYMENT_BOOSTERS_MIN_BLOCK_RANGE_ASC',
  DeploymentBoostersMinBlockRangeDesc = 'DEPLOYMENT_BOOSTERS_MIN_BLOCK_RANGE_DESC',
  DeploymentBoostersMinConsumerAsc = 'DEPLOYMENT_BOOSTERS_MIN_CONSUMER_ASC',
  DeploymentBoostersMinConsumerDesc = 'DEPLOYMENT_BOOSTERS_MIN_CONSUMER_DESC',
  DeploymentBoostersMinCreateAtAsc = 'DEPLOYMENT_BOOSTERS_MIN_CREATE_AT_ASC',
  DeploymentBoostersMinCreateAtDesc = 'DEPLOYMENT_BOOSTERS_MIN_CREATE_AT_DESC',
  DeploymentBoostersMinDeploymentIdAsc = 'DEPLOYMENT_BOOSTERS_MIN_DEPLOYMENT_ID_ASC',
  DeploymentBoostersMinDeploymentIdDesc = 'DEPLOYMENT_BOOSTERS_MIN_DEPLOYMENT_ID_DESC',
  DeploymentBoostersMinEraIdxAsc = 'DEPLOYMENT_BOOSTERS_MIN_ERA_IDX_ASC',
  DeploymentBoostersMinEraIdxDesc = 'DEPLOYMENT_BOOSTERS_MIN_ERA_IDX_DESC',
  DeploymentBoostersMinIdAsc = 'DEPLOYMENT_BOOSTERS_MIN_ID_ASC',
  DeploymentBoostersMinIdDesc = 'DEPLOYMENT_BOOSTERS_MIN_ID_DESC',
  DeploymentBoostersMinProjectIdAsc = 'DEPLOYMENT_BOOSTERS_MIN_PROJECT_ID_ASC',
  DeploymentBoostersMinProjectIdDesc = 'DEPLOYMENT_BOOSTERS_MIN_PROJECT_ID_DESC',
  DeploymentBoostersStddevPopulationAmountAddedAsc = 'DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_AMOUNT_ADDED_ASC',
  DeploymentBoostersStddevPopulationAmountAddedDesc = 'DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_AMOUNT_ADDED_DESC',
  DeploymentBoostersStddevPopulationAmountRemovedAsc = 'DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_AMOUNT_REMOVED_ASC',
  DeploymentBoostersStddevPopulationAmountRemovedDesc = 'DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_AMOUNT_REMOVED_DESC',
  DeploymentBoostersStddevPopulationBlockRangeAsc = 'DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  DeploymentBoostersStddevPopulationBlockRangeDesc = 'DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  DeploymentBoostersStddevPopulationConsumerAsc = 'DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_CONSUMER_ASC',
  DeploymentBoostersStddevPopulationConsumerDesc = 'DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_CONSUMER_DESC',
  DeploymentBoostersStddevPopulationCreateAtAsc = 'DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_CREATE_AT_ASC',
  DeploymentBoostersStddevPopulationCreateAtDesc = 'DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_CREATE_AT_DESC',
  DeploymentBoostersStddevPopulationDeploymentIdAsc = 'DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_DEPLOYMENT_ID_ASC',
  DeploymentBoostersStddevPopulationDeploymentIdDesc = 'DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_DEPLOYMENT_ID_DESC',
  DeploymentBoostersStddevPopulationEraIdxAsc = 'DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_ERA_IDX_ASC',
  DeploymentBoostersStddevPopulationEraIdxDesc = 'DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_ERA_IDX_DESC',
  DeploymentBoostersStddevPopulationIdAsc = 'DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_ID_ASC',
  DeploymentBoostersStddevPopulationIdDesc = 'DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_ID_DESC',
  DeploymentBoostersStddevPopulationProjectIdAsc = 'DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_PROJECT_ID_ASC',
  DeploymentBoostersStddevPopulationProjectIdDesc = 'DEPLOYMENT_BOOSTERS_STDDEV_POPULATION_PROJECT_ID_DESC',
  DeploymentBoostersStddevSampleAmountAddedAsc = 'DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_AMOUNT_ADDED_ASC',
  DeploymentBoostersStddevSampleAmountAddedDesc = 'DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_AMOUNT_ADDED_DESC',
  DeploymentBoostersStddevSampleAmountRemovedAsc = 'DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_AMOUNT_REMOVED_ASC',
  DeploymentBoostersStddevSampleAmountRemovedDesc = 'DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_AMOUNT_REMOVED_DESC',
  DeploymentBoostersStddevSampleBlockRangeAsc = 'DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  DeploymentBoostersStddevSampleBlockRangeDesc = 'DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  DeploymentBoostersStddevSampleConsumerAsc = 'DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_CONSUMER_ASC',
  DeploymentBoostersStddevSampleConsumerDesc = 'DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_CONSUMER_DESC',
  DeploymentBoostersStddevSampleCreateAtAsc = 'DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_CREATE_AT_ASC',
  DeploymentBoostersStddevSampleCreateAtDesc = 'DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_CREATE_AT_DESC',
  DeploymentBoostersStddevSampleDeploymentIdAsc = 'DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC',
  DeploymentBoostersStddevSampleDeploymentIdDesc = 'DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC',
  DeploymentBoostersStddevSampleEraIdxAsc = 'DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_ERA_IDX_ASC',
  DeploymentBoostersStddevSampleEraIdxDesc = 'DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_ERA_IDX_DESC',
  DeploymentBoostersStddevSampleIdAsc = 'DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_ID_ASC',
  DeploymentBoostersStddevSampleIdDesc = 'DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_ID_DESC',
  DeploymentBoostersStddevSampleProjectIdAsc = 'DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_PROJECT_ID_ASC',
  DeploymentBoostersStddevSampleProjectIdDesc = 'DEPLOYMENT_BOOSTERS_STDDEV_SAMPLE_PROJECT_ID_DESC',
  DeploymentBoostersSumAmountAddedAsc = 'DEPLOYMENT_BOOSTERS_SUM_AMOUNT_ADDED_ASC',
  DeploymentBoostersSumAmountAddedDesc = 'DEPLOYMENT_BOOSTERS_SUM_AMOUNT_ADDED_DESC',
  DeploymentBoostersSumAmountRemovedAsc = 'DEPLOYMENT_BOOSTERS_SUM_AMOUNT_REMOVED_ASC',
  DeploymentBoostersSumAmountRemovedDesc = 'DEPLOYMENT_BOOSTERS_SUM_AMOUNT_REMOVED_DESC',
  DeploymentBoostersSumBlockRangeAsc = 'DEPLOYMENT_BOOSTERS_SUM_BLOCK_RANGE_ASC',
  DeploymentBoostersSumBlockRangeDesc = 'DEPLOYMENT_BOOSTERS_SUM_BLOCK_RANGE_DESC',
  DeploymentBoostersSumConsumerAsc = 'DEPLOYMENT_BOOSTERS_SUM_CONSUMER_ASC',
  DeploymentBoostersSumConsumerDesc = 'DEPLOYMENT_BOOSTERS_SUM_CONSUMER_DESC',
  DeploymentBoostersSumCreateAtAsc = 'DEPLOYMENT_BOOSTERS_SUM_CREATE_AT_ASC',
  DeploymentBoostersSumCreateAtDesc = 'DEPLOYMENT_BOOSTERS_SUM_CREATE_AT_DESC',
  DeploymentBoostersSumDeploymentIdAsc = 'DEPLOYMENT_BOOSTERS_SUM_DEPLOYMENT_ID_ASC',
  DeploymentBoostersSumDeploymentIdDesc = 'DEPLOYMENT_BOOSTERS_SUM_DEPLOYMENT_ID_DESC',
  DeploymentBoostersSumEraIdxAsc = 'DEPLOYMENT_BOOSTERS_SUM_ERA_IDX_ASC',
  DeploymentBoostersSumEraIdxDesc = 'DEPLOYMENT_BOOSTERS_SUM_ERA_IDX_DESC',
  DeploymentBoostersSumIdAsc = 'DEPLOYMENT_BOOSTERS_SUM_ID_ASC',
  DeploymentBoostersSumIdDesc = 'DEPLOYMENT_BOOSTERS_SUM_ID_DESC',
  DeploymentBoostersSumProjectIdAsc = 'DEPLOYMENT_BOOSTERS_SUM_PROJECT_ID_ASC',
  DeploymentBoostersSumProjectIdDesc = 'DEPLOYMENT_BOOSTERS_SUM_PROJECT_ID_DESC',
  DeploymentBoostersVariancePopulationAmountAddedAsc = 'DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_AMOUNT_ADDED_ASC',
  DeploymentBoostersVariancePopulationAmountAddedDesc = 'DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_AMOUNT_ADDED_DESC',
  DeploymentBoostersVariancePopulationAmountRemovedAsc = 'DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_AMOUNT_REMOVED_ASC',
  DeploymentBoostersVariancePopulationAmountRemovedDesc = 'DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_AMOUNT_REMOVED_DESC',
  DeploymentBoostersVariancePopulationBlockRangeAsc = 'DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  DeploymentBoostersVariancePopulationBlockRangeDesc = 'DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  DeploymentBoostersVariancePopulationConsumerAsc = 'DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_CONSUMER_ASC',
  DeploymentBoostersVariancePopulationConsumerDesc = 'DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_CONSUMER_DESC',
  DeploymentBoostersVariancePopulationCreateAtAsc = 'DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_CREATE_AT_ASC',
  DeploymentBoostersVariancePopulationCreateAtDesc = 'DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_CREATE_AT_DESC',
  DeploymentBoostersVariancePopulationDeploymentIdAsc = 'DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC',
  DeploymentBoostersVariancePopulationDeploymentIdDesc = 'DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC',
  DeploymentBoostersVariancePopulationEraIdxAsc = 'DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_ERA_IDX_ASC',
  DeploymentBoostersVariancePopulationEraIdxDesc = 'DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_ERA_IDX_DESC',
  DeploymentBoostersVariancePopulationIdAsc = 'DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_ID_ASC',
  DeploymentBoostersVariancePopulationIdDesc = 'DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_ID_DESC',
  DeploymentBoostersVariancePopulationProjectIdAsc = 'DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_PROJECT_ID_ASC',
  DeploymentBoostersVariancePopulationProjectIdDesc = 'DEPLOYMENT_BOOSTERS_VARIANCE_POPULATION_PROJECT_ID_DESC',
  DeploymentBoostersVarianceSampleAmountAddedAsc = 'DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_AMOUNT_ADDED_ASC',
  DeploymentBoostersVarianceSampleAmountAddedDesc = 'DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_AMOUNT_ADDED_DESC',
  DeploymentBoostersVarianceSampleAmountRemovedAsc = 'DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_AMOUNT_REMOVED_ASC',
  DeploymentBoostersVarianceSampleAmountRemovedDesc = 'DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_AMOUNT_REMOVED_DESC',
  DeploymentBoostersVarianceSampleBlockRangeAsc = 'DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  DeploymentBoostersVarianceSampleBlockRangeDesc = 'DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  DeploymentBoostersVarianceSampleConsumerAsc = 'DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_CONSUMER_ASC',
  DeploymentBoostersVarianceSampleConsumerDesc = 'DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_CONSUMER_DESC',
  DeploymentBoostersVarianceSampleCreateAtAsc = 'DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_CREATE_AT_ASC',
  DeploymentBoostersVarianceSampleCreateAtDesc = 'DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_CREATE_AT_DESC',
  DeploymentBoostersVarianceSampleDeploymentIdAsc = 'DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC',
  DeploymentBoostersVarianceSampleDeploymentIdDesc = 'DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC',
  DeploymentBoostersVarianceSampleEraIdxAsc = 'DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_ERA_IDX_ASC',
  DeploymentBoostersVarianceSampleEraIdxDesc = 'DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_ERA_IDX_DESC',
  DeploymentBoostersVarianceSampleIdAsc = 'DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_ID_ASC',
  DeploymentBoostersVarianceSampleIdDesc = 'DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_ID_DESC',
  DeploymentBoostersVarianceSampleProjectIdAsc = 'DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_PROJECT_ID_ASC',
  DeploymentBoostersVarianceSampleProjectIdDesc = 'DEPLOYMENT_BOOSTERS_VARIANCE_SAMPLE_PROJECT_ID_DESC',
  DeploymentBoosterSummariesAverageBlockRangeAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_BLOCK_RANGE_ASC',
  DeploymentBoosterSummariesAverageBlockRangeDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_BLOCK_RANGE_DESC',
  DeploymentBoosterSummariesAverageConsumerAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_CONSUMER_ASC',
  DeploymentBoosterSummariesAverageConsumerDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_CONSUMER_DESC',
  DeploymentBoosterSummariesAverageCreateAtAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_CREATE_AT_ASC',
  DeploymentBoosterSummariesAverageCreateAtDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_CREATE_AT_DESC',
  DeploymentBoosterSummariesAverageDeploymentIdAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_DEPLOYMENT_ID_ASC',
  DeploymentBoosterSummariesAverageDeploymentIdDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_DEPLOYMENT_ID_DESC',
  DeploymentBoosterSummariesAverageIdAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_ID_ASC',
  DeploymentBoosterSummariesAverageIdDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_ID_DESC',
  DeploymentBoosterSummariesAverageProjectIdAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_PROJECT_ID_ASC',
  DeploymentBoosterSummariesAverageProjectIdDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_PROJECT_ID_DESC',
  DeploymentBoosterSummariesAverageTotalAddedAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_TOTAL_ADDED_ASC',
  DeploymentBoosterSummariesAverageTotalAddedDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_TOTAL_ADDED_DESC',
  DeploymentBoosterSummariesAverageTotalAmountAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_TOTAL_AMOUNT_ASC',
  DeploymentBoosterSummariesAverageTotalAmountDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_TOTAL_AMOUNT_DESC',
  DeploymentBoosterSummariesAverageTotalRemovedAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_TOTAL_REMOVED_ASC',
  DeploymentBoosterSummariesAverageTotalRemovedDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_TOTAL_REMOVED_DESC',
  DeploymentBoosterSummariesAverageUpdateAtAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_UPDATE_AT_ASC',
  DeploymentBoosterSummariesAverageUpdateAtDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_AVERAGE_UPDATE_AT_DESC',
  DeploymentBoosterSummariesByProjectIdCountAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_BY_PROJECT_ID__COUNT_ASC',
  DeploymentBoosterSummariesByProjectIdCountDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_BY_PROJECT_ID__COUNT_DESC',
  DeploymentBoosterSummariesCountAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_COUNT_ASC',
  DeploymentBoosterSummariesCountDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_COUNT_DESC',
  DeploymentBoosterSummariesDistinctCountBlockRangeAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  DeploymentBoosterSummariesDistinctCountBlockRangeDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  DeploymentBoosterSummariesDistinctCountConsumerAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_CONSUMER_ASC',
  DeploymentBoosterSummariesDistinctCountConsumerDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_CONSUMER_DESC',
  DeploymentBoosterSummariesDistinctCountCreateAtAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_CREATE_AT_ASC',
  DeploymentBoosterSummariesDistinctCountCreateAtDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_CREATE_AT_DESC',
  DeploymentBoosterSummariesDistinctCountDeploymentIdAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_DEPLOYMENT_ID_ASC',
  DeploymentBoosterSummariesDistinctCountDeploymentIdDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_DEPLOYMENT_ID_DESC',
  DeploymentBoosterSummariesDistinctCountIdAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_ID_ASC',
  DeploymentBoosterSummariesDistinctCountIdDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_ID_DESC',
  DeploymentBoosterSummariesDistinctCountProjectIdAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_PROJECT_ID_ASC',
  DeploymentBoosterSummariesDistinctCountProjectIdDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_PROJECT_ID_DESC',
  DeploymentBoosterSummariesDistinctCountTotalAddedAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_TOTAL_ADDED_ASC',
  DeploymentBoosterSummariesDistinctCountTotalAddedDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_TOTAL_ADDED_DESC',
  DeploymentBoosterSummariesDistinctCountTotalAmountAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_TOTAL_AMOUNT_ASC',
  DeploymentBoosterSummariesDistinctCountTotalAmountDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_TOTAL_AMOUNT_DESC',
  DeploymentBoosterSummariesDistinctCountTotalRemovedAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_TOTAL_REMOVED_ASC',
  DeploymentBoosterSummariesDistinctCountTotalRemovedDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_TOTAL_REMOVED_DESC',
  DeploymentBoosterSummariesDistinctCountUpdateAtAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_UPDATE_AT_ASC',
  DeploymentBoosterSummariesDistinctCountUpdateAtDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_DISTINCT_COUNT_UPDATE_AT_DESC',
  DeploymentBoosterSummariesMaxBlockRangeAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_BLOCK_RANGE_ASC',
  DeploymentBoosterSummariesMaxBlockRangeDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_BLOCK_RANGE_DESC',
  DeploymentBoosterSummariesMaxConsumerAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_CONSUMER_ASC',
  DeploymentBoosterSummariesMaxConsumerDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_CONSUMER_DESC',
  DeploymentBoosterSummariesMaxCreateAtAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_CREATE_AT_ASC',
  DeploymentBoosterSummariesMaxCreateAtDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_CREATE_AT_DESC',
  DeploymentBoosterSummariesMaxDeploymentIdAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_DEPLOYMENT_ID_ASC',
  DeploymentBoosterSummariesMaxDeploymentIdDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_DEPLOYMENT_ID_DESC',
  DeploymentBoosterSummariesMaxIdAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_ID_ASC',
  DeploymentBoosterSummariesMaxIdDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_ID_DESC',
  DeploymentBoosterSummariesMaxProjectIdAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_PROJECT_ID_ASC',
  DeploymentBoosterSummariesMaxProjectIdDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_PROJECT_ID_DESC',
  DeploymentBoosterSummariesMaxTotalAddedAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_TOTAL_ADDED_ASC',
  DeploymentBoosterSummariesMaxTotalAddedDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_TOTAL_ADDED_DESC',
  DeploymentBoosterSummariesMaxTotalAmountAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_TOTAL_AMOUNT_ASC',
  DeploymentBoosterSummariesMaxTotalAmountDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_TOTAL_AMOUNT_DESC',
  DeploymentBoosterSummariesMaxTotalRemovedAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_TOTAL_REMOVED_ASC',
  DeploymentBoosterSummariesMaxTotalRemovedDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_TOTAL_REMOVED_DESC',
  DeploymentBoosterSummariesMaxUpdateAtAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_UPDATE_AT_ASC',
  DeploymentBoosterSummariesMaxUpdateAtDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MAX_UPDATE_AT_DESC',
  DeploymentBoosterSummariesMinBlockRangeAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_BLOCK_RANGE_ASC',
  DeploymentBoosterSummariesMinBlockRangeDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_BLOCK_RANGE_DESC',
  DeploymentBoosterSummariesMinConsumerAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_CONSUMER_ASC',
  DeploymentBoosterSummariesMinConsumerDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_CONSUMER_DESC',
  DeploymentBoosterSummariesMinCreateAtAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_CREATE_AT_ASC',
  DeploymentBoosterSummariesMinCreateAtDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_CREATE_AT_DESC',
  DeploymentBoosterSummariesMinDeploymentIdAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_DEPLOYMENT_ID_ASC',
  DeploymentBoosterSummariesMinDeploymentIdDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_DEPLOYMENT_ID_DESC',
  DeploymentBoosterSummariesMinIdAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_ID_ASC',
  DeploymentBoosterSummariesMinIdDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_ID_DESC',
  DeploymentBoosterSummariesMinProjectIdAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_PROJECT_ID_ASC',
  DeploymentBoosterSummariesMinProjectIdDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_PROJECT_ID_DESC',
  DeploymentBoosterSummariesMinTotalAddedAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_TOTAL_ADDED_ASC',
  DeploymentBoosterSummariesMinTotalAddedDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_TOTAL_ADDED_DESC',
  DeploymentBoosterSummariesMinTotalAmountAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_TOTAL_AMOUNT_ASC',
  DeploymentBoosterSummariesMinTotalAmountDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_TOTAL_AMOUNT_DESC',
  DeploymentBoosterSummariesMinTotalRemovedAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_TOTAL_REMOVED_ASC',
  DeploymentBoosterSummariesMinTotalRemovedDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_TOTAL_REMOVED_DESC',
  DeploymentBoosterSummariesMinUpdateAtAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_UPDATE_AT_ASC',
  DeploymentBoosterSummariesMinUpdateAtDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_MIN_UPDATE_AT_DESC',
  DeploymentBoosterSummariesStddevPopulationBlockRangeAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  DeploymentBoosterSummariesStddevPopulationBlockRangeDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  DeploymentBoosterSummariesStddevPopulationConsumerAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_CONSUMER_ASC',
  DeploymentBoosterSummariesStddevPopulationConsumerDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_CONSUMER_DESC',
  DeploymentBoosterSummariesStddevPopulationCreateAtAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_CREATE_AT_ASC',
  DeploymentBoosterSummariesStddevPopulationCreateAtDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_CREATE_AT_DESC',
  DeploymentBoosterSummariesStddevPopulationDeploymentIdAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_DEPLOYMENT_ID_ASC',
  DeploymentBoosterSummariesStddevPopulationDeploymentIdDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_DEPLOYMENT_ID_DESC',
  DeploymentBoosterSummariesStddevPopulationIdAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_ID_ASC',
  DeploymentBoosterSummariesStddevPopulationIdDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_ID_DESC',
  DeploymentBoosterSummariesStddevPopulationProjectIdAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_PROJECT_ID_ASC',
  DeploymentBoosterSummariesStddevPopulationProjectIdDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_PROJECT_ID_DESC',
  DeploymentBoosterSummariesStddevPopulationTotalAddedAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_TOTAL_ADDED_ASC',
  DeploymentBoosterSummariesStddevPopulationTotalAddedDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_TOTAL_ADDED_DESC',
  DeploymentBoosterSummariesStddevPopulationTotalAmountAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_TOTAL_AMOUNT_ASC',
  DeploymentBoosterSummariesStddevPopulationTotalAmountDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_TOTAL_AMOUNT_DESC',
  DeploymentBoosterSummariesStddevPopulationTotalRemovedAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_TOTAL_REMOVED_ASC',
  DeploymentBoosterSummariesStddevPopulationTotalRemovedDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_TOTAL_REMOVED_DESC',
  DeploymentBoosterSummariesStddevPopulationUpdateAtAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_UPDATE_AT_ASC',
  DeploymentBoosterSummariesStddevPopulationUpdateAtDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_POPULATION_UPDATE_AT_DESC',
  DeploymentBoosterSummariesStddevSampleBlockRangeAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  DeploymentBoosterSummariesStddevSampleBlockRangeDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  DeploymentBoosterSummariesStddevSampleConsumerAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_CONSUMER_ASC',
  DeploymentBoosterSummariesStddevSampleConsumerDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_CONSUMER_DESC',
  DeploymentBoosterSummariesStddevSampleCreateAtAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_CREATE_AT_ASC',
  DeploymentBoosterSummariesStddevSampleCreateAtDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_CREATE_AT_DESC',
  DeploymentBoosterSummariesStddevSampleDeploymentIdAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC',
  DeploymentBoosterSummariesStddevSampleDeploymentIdDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC',
  DeploymentBoosterSummariesStddevSampleIdAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_ID_ASC',
  DeploymentBoosterSummariesStddevSampleIdDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_ID_DESC',
  DeploymentBoosterSummariesStddevSampleProjectIdAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_PROJECT_ID_ASC',
  DeploymentBoosterSummariesStddevSampleProjectIdDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_PROJECT_ID_DESC',
  DeploymentBoosterSummariesStddevSampleTotalAddedAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_TOTAL_ADDED_ASC',
  DeploymentBoosterSummariesStddevSampleTotalAddedDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_TOTAL_ADDED_DESC',
  DeploymentBoosterSummariesStddevSampleTotalAmountAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_TOTAL_AMOUNT_ASC',
  DeploymentBoosterSummariesStddevSampleTotalAmountDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_TOTAL_AMOUNT_DESC',
  DeploymentBoosterSummariesStddevSampleTotalRemovedAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_TOTAL_REMOVED_ASC',
  DeploymentBoosterSummariesStddevSampleTotalRemovedDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_TOTAL_REMOVED_DESC',
  DeploymentBoosterSummariesStddevSampleUpdateAtAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_UPDATE_AT_ASC',
  DeploymentBoosterSummariesStddevSampleUpdateAtDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_STDDEV_SAMPLE_UPDATE_AT_DESC',
  DeploymentBoosterSummariesSumBlockRangeAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_BLOCK_RANGE_ASC',
  DeploymentBoosterSummariesSumBlockRangeDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_BLOCK_RANGE_DESC',
  DeploymentBoosterSummariesSumConsumerAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_CONSUMER_ASC',
  DeploymentBoosterSummariesSumConsumerDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_CONSUMER_DESC',
  DeploymentBoosterSummariesSumCreateAtAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_CREATE_AT_ASC',
  DeploymentBoosterSummariesSumCreateAtDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_CREATE_AT_DESC',
  DeploymentBoosterSummariesSumDeploymentIdAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_DEPLOYMENT_ID_ASC',
  DeploymentBoosterSummariesSumDeploymentIdDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_DEPLOYMENT_ID_DESC',
  DeploymentBoosterSummariesSumIdAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_ID_ASC',
  DeploymentBoosterSummariesSumIdDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_ID_DESC',
  DeploymentBoosterSummariesSumProjectIdAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_PROJECT_ID_ASC',
  DeploymentBoosterSummariesSumProjectIdDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_PROJECT_ID_DESC',
  DeploymentBoosterSummariesSumTotalAddedAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_TOTAL_ADDED_ASC',
  DeploymentBoosterSummariesSumTotalAddedDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_TOTAL_ADDED_DESC',
  DeploymentBoosterSummariesSumTotalAmountAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_TOTAL_AMOUNT_ASC',
  DeploymentBoosterSummariesSumTotalAmountDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_TOTAL_AMOUNT_DESC',
  DeploymentBoosterSummariesSumTotalRemovedAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_TOTAL_REMOVED_ASC',
  DeploymentBoosterSummariesSumTotalRemovedDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_TOTAL_REMOVED_DESC',
  DeploymentBoosterSummariesSumUpdateAtAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_UPDATE_AT_ASC',
  DeploymentBoosterSummariesSumUpdateAtDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_SUM_UPDATE_AT_DESC',
  DeploymentBoosterSummariesVariancePopulationBlockRangeAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  DeploymentBoosterSummariesVariancePopulationBlockRangeDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  DeploymentBoosterSummariesVariancePopulationConsumerAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_CONSUMER_ASC',
  DeploymentBoosterSummariesVariancePopulationConsumerDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_CONSUMER_DESC',
  DeploymentBoosterSummariesVariancePopulationCreateAtAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_CREATE_AT_ASC',
  DeploymentBoosterSummariesVariancePopulationCreateAtDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_CREATE_AT_DESC',
  DeploymentBoosterSummariesVariancePopulationDeploymentIdAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC',
  DeploymentBoosterSummariesVariancePopulationDeploymentIdDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC',
  DeploymentBoosterSummariesVariancePopulationIdAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_ID_ASC',
  DeploymentBoosterSummariesVariancePopulationIdDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_ID_DESC',
  DeploymentBoosterSummariesVariancePopulationProjectIdAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_PROJECT_ID_ASC',
  DeploymentBoosterSummariesVariancePopulationProjectIdDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_PROJECT_ID_DESC',
  DeploymentBoosterSummariesVariancePopulationTotalAddedAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_TOTAL_ADDED_ASC',
  DeploymentBoosterSummariesVariancePopulationTotalAddedDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_TOTAL_ADDED_DESC',
  DeploymentBoosterSummariesVariancePopulationTotalAmountAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_TOTAL_AMOUNT_ASC',
  DeploymentBoosterSummariesVariancePopulationTotalAmountDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_TOTAL_AMOUNT_DESC',
  DeploymentBoosterSummariesVariancePopulationTotalRemovedAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_TOTAL_REMOVED_ASC',
  DeploymentBoosterSummariesVariancePopulationTotalRemovedDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_TOTAL_REMOVED_DESC',
  DeploymentBoosterSummariesVariancePopulationUpdateAtAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_UPDATE_AT_ASC',
  DeploymentBoosterSummariesVariancePopulationUpdateAtDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_POPULATION_UPDATE_AT_DESC',
  DeploymentBoosterSummariesVarianceSampleBlockRangeAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  DeploymentBoosterSummariesVarianceSampleBlockRangeDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  DeploymentBoosterSummariesVarianceSampleConsumerAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_CONSUMER_ASC',
  DeploymentBoosterSummariesVarianceSampleConsumerDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_CONSUMER_DESC',
  DeploymentBoosterSummariesVarianceSampleCreateAtAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_CREATE_AT_ASC',
  DeploymentBoosterSummariesVarianceSampleCreateAtDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_CREATE_AT_DESC',
  DeploymentBoosterSummariesVarianceSampleDeploymentIdAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC',
  DeploymentBoosterSummariesVarianceSampleDeploymentIdDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC',
  DeploymentBoosterSummariesVarianceSampleIdAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_ID_ASC',
  DeploymentBoosterSummariesVarianceSampleIdDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_ID_DESC',
  DeploymentBoosterSummariesVarianceSampleProjectIdAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_PROJECT_ID_ASC',
  DeploymentBoosterSummariesVarianceSampleProjectIdDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_PROJECT_ID_DESC',
  DeploymentBoosterSummariesVarianceSampleTotalAddedAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_TOTAL_ADDED_ASC',
  DeploymentBoosterSummariesVarianceSampleTotalAddedDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_TOTAL_ADDED_DESC',
  DeploymentBoosterSummariesVarianceSampleTotalAmountAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_TOTAL_AMOUNT_ASC',
  DeploymentBoosterSummariesVarianceSampleTotalAmountDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_TOTAL_AMOUNT_DESC',
  DeploymentBoosterSummariesVarianceSampleTotalRemovedAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_TOTAL_REMOVED_ASC',
  DeploymentBoosterSummariesVarianceSampleTotalRemovedDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_TOTAL_REMOVED_DESC',
  DeploymentBoosterSummariesVarianceSampleUpdateAtAsc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_UPDATE_AT_ASC',
  DeploymentBoosterSummariesVarianceSampleUpdateAtDesc = 'DEPLOYMENT_BOOSTER_SUMMARIES_VARIANCE_SAMPLE_UPDATE_AT_DESC',
  DeploymentIdAsc = 'DEPLOYMENT_ID_ASC',
  DeploymentIdDesc = 'DEPLOYMENT_ID_DESC',
  DeploymentMetadataAsc = 'DEPLOYMENT_METADATA_ASC',
  DeploymentMetadataDesc = 'DEPLOYMENT_METADATA_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  IndexerAllocationsAverageAmountAddedAsc = 'INDEXER_ALLOCATIONS_AVERAGE_AMOUNT_ADDED_ASC',
  IndexerAllocationsAverageAmountAddedDesc = 'INDEXER_ALLOCATIONS_AVERAGE_AMOUNT_ADDED_DESC',
  IndexerAllocationsAverageAmountRemovedAsc = 'INDEXER_ALLOCATIONS_AVERAGE_AMOUNT_REMOVED_ASC',
  IndexerAllocationsAverageAmountRemovedDesc = 'INDEXER_ALLOCATIONS_AVERAGE_AMOUNT_REMOVED_DESC',
  IndexerAllocationsAverageBlockRangeAsc = 'INDEXER_ALLOCATIONS_AVERAGE_BLOCK_RANGE_ASC',
  IndexerAllocationsAverageBlockRangeDesc = 'INDEXER_ALLOCATIONS_AVERAGE_BLOCK_RANGE_DESC',
  IndexerAllocationsAverageCreateAtAsc = 'INDEXER_ALLOCATIONS_AVERAGE_CREATE_AT_ASC',
  IndexerAllocationsAverageCreateAtDesc = 'INDEXER_ALLOCATIONS_AVERAGE_CREATE_AT_DESC',
  IndexerAllocationsAverageDeploymentIdAsc = 'INDEXER_ALLOCATIONS_AVERAGE_DEPLOYMENT_ID_ASC',
  IndexerAllocationsAverageDeploymentIdDesc = 'INDEXER_ALLOCATIONS_AVERAGE_DEPLOYMENT_ID_DESC',
  IndexerAllocationsAverageEraIdxAsc = 'INDEXER_ALLOCATIONS_AVERAGE_ERA_IDX_ASC',
  IndexerAllocationsAverageEraIdxDesc = 'INDEXER_ALLOCATIONS_AVERAGE_ERA_IDX_DESC',
  IndexerAllocationsAverageIdAsc = 'INDEXER_ALLOCATIONS_AVERAGE_ID_ASC',
  IndexerAllocationsAverageIdDesc = 'INDEXER_ALLOCATIONS_AVERAGE_ID_DESC',
  IndexerAllocationsAverageIndexerIdAsc = 'INDEXER_ALLOCATIONS_AVERAGE_INDEXER_ID_ASC',
  IndexerAllocationsAverageIndexerIdDesc = 'INDEXER_ALLOCATIONS_AVERAGE_INDEXER_ID_DESC',
  IndexerAllocationsAverageProjectIdAsc = 'INDEXER_ALLOCATIONS_AVERAGE_PROJECT_ID_ASC',
  IndexerAllocationsAverageProjectIdDesc = 'INDEXER_ALLOCATIONS_AVERAGE_PROJECT_ID_DESC',
  IndexerAllocationsByProjectIdCountAsc = 'INDEXER_ALLOCATIONS_BY_PROJECT_ID__COUNT_ASC',
  IndexerAllocationsByProjectIdCountDesc = 'INDEXER_ALLOCATIONS_BY_PROJECT_ID__COUNT_DESC',
  IndexerAllocationsCountAsc = 'INDEXER_ALLOCATIONS_COUNT_ASC',
  IndexerAllocationsCountDesc = 'INDEXER_ALLOCATIONS_COUNT_DESC',
  IndexerAllocationsDistinctCountAmountAddedAsc = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_AMOUNT_ADDED_ASC',
  IndexerAllocationsDistinctCountAmountAddedDesc = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_AMOUNT_ADDED_DESC',
  IndexerAllocationsDistinctCountAmountRemovedAsc = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_AMOUNT_REMOVED_ASC',
  IndexerAllocationsDistinctCountAmountRemovedDesc = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_AMOUNT_REMOVED_DESC',
  IndexerAllocationsDistinctCountBlockRangeAsc = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  IndexerAllocationsDistinctCountBlockRangeDesc = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  IndexerAllocationsDistinctCountCreateAtAsc = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_CREATE_AT_ASC',
  IndexerAllocationsDistinctCountCreateAtDesc = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_CREATE_AT_DESC',
  IndexerAllocationsDistinctCountDeploymentIdAsc = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_DEPLOYMENT_ID_ASC',
  IndexerAllocationsDistinctCountDeploymentIdDesc = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_DEPLOYMENT_ID_DESC',
  IndexerAllocationsDistinctCountEraIdxAsc = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_ERA_IDX_ASC',
  IndexerAllocationsDistinctCountEraIdxDesc = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_ERA_IDX_DESC',
  IndexerAllocationsDistinctCountIdAsc = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_ID_ASC',
  IndexerAllocationsDistinctCountIdDesc = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_ID_DESC',
  IndexerAllocationsDistinctCountIndexerIdAsc = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_INDEXER_ID_ASC',
  IndexerAllocationsDistinctCountIndexerIdDesc = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_INDEXER_ID_DESC',
  IndexerAllocationsDistinctCountProjectIdAsc = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_PROJECT_ID_ASC',
  IndexerAllocationsDistinctCountProjectIdDesc = 'INDEXER_ALLOCATIONS_DISTINCT_COUNT_PROJECT_ID_DESC',
  IndexerAllocationsMaxAmountAddedAsc = 'INDEXER_ALLOCATIONS_MAX_AMOUNT_ADDED_ASC',
  IndexerAllocationsMaxAmountAddedDesc = 'INDEXER_ALLOCATIONS_MAX_AMOUNT_ADDED_DESC',
  IndexerAllocationsMaxAmountRemovedAsc = 'INDEXER_ALLOCATIONS_MAX_AMOUNT_REMOVED_ASC',
  IndexerAllocationsMaxAmountRemovedDesc = 'INDEXER_ALLOCATIONS_MAX_AMOUNT_REMOVED_DESC',
  IndexerAllocationsMaxBlockRangeAsc = 'INDEXER_ALLOCATIONS_MAX_BLOCK_RANGE_ASC',
  IndexerAllocationsMaxBlockRangeDesc = 'INDEXER_ALLOCATIONS_MAX_BLOCK_RANGE_DESC',
  IndexerAllocationsMaxCreateAtAsc = 'INDEXER_ALLOCATIONS_MAX_CREATE_AT_ASC',
  IndexerAllocationsMaxCreateAtDesc = 'INDEXER_ALLOCATIONS_MAX_CREATE_AT_DESC',
  IndexerAllocationsMaxDeploymentIdAsc = 'INDEXER_ALLOCATIONS_MAX_DEPLOYMENT_ID_ASC',
  IndexerAllocationsMaxDeploymentIdDesc = 'INDEXER_ALLOCATIONS_MAX_DEPLOYMENT_ID_DESC',
  IndexerAllocationsMaxEraIdxAsc = 'INDEXER_ALLOCATIONS_MAX_ERA_IDX_ASC',
  IndexerAllocationsMaxEraIdxDesc = 'INDEXER_ALLOCATIONS_MAX_ERA_IDX_DESC',
  IndexerAllocationsMaxIdAsc = 'INDEXER_ALLOCATIONS_MAX_ID_ASC',
  IndexerAllocationsMaxIdDesc = 'INDEXER_ALLOCATIONS_MAX_ID_DESC',
  IndexerAllocationsMaxIndexerIdAsc = 'INDEXER_ALLOCATIONS_MAX_INDEXER_ID_ASC',
  IndexerAllocationsMaxIndexerIdDesc = 'INDEXER_ALLOCATIONS_MAX_INDEXER_ID_DESC',
  IndexerAllocationsMaxProjectIdAsc = 'INDEXER_ALLOCATIONS_MAX_PROJECT_ID_ASC',
  IndexerAllocationsMaxProjectIdDesc = 'INDEXER_ALLOCATIONS_MAX_PROJECT_ID_DESC',
  IndexerAllocationsMinAmountAddedAsc = 'INDEXER_ALLOCATIONS_MIN_AMOUNT_ADDED_ASC',
  IndexerAllocationsMinAmountAddedDesc = 'INDEXER_ALLOCATIONS_MIN_AMOUNT_ADDED_DESC',
  IndexerAllocationsMinAmountRemovedAsc = 'INDEXER_ALLOCATIONS_MIN_AMOUNT_REMOVED_ASC',
  IndexerAllocationsMinAmountRemovedDesc = 'INDEXER_ALLOCATIONS_MIN_AMOUNT_REMOVED_DESC',
  IndexerAllocationsMinBlockRangeAsc = 'INDEXER_ALLOCATIONS_MIN_BLOCK_RANGE_ASC',
  IndexerAllocationsMinBlockRangeDesc = 'INDEXER_ALLOCATIONS_MIN_BLOCK_RANGE_DESC',
  IndexerAllocationsMinCreateAtAsc = 'INDEXER_ALLOCATIONS_MIN_CREATE_AT_ASC',
  IndexerAllocationsMinCreateAtDesc = 'INDEXER_ALLOCATIONS_MIN_CREATE_AT_DESC',
  IndexerAllocationsMinDeploymentIdAsc = 'INDEXER_ALLOCATIONS_MIN_DEPLOYMENT_ID_ASC',
  IndexerAllocationsMinDeploymentIdDesc = 'INDEXER_ALLOCATIONS_MIN_DEPLOYMENT_ID_DESC',
  IndexerAllocationsMinEraIdxAsc = 'INDEXER_ALLOCATIONS_MIN_ERA_IDX_ASC',
  IndexerAllocationsMinEraIdxDesc = 'INDEXER_ALLOCATIONS_MIN_ERA_IDX_DESC',
  IndexerAllocationsMinIdAsc = 'INDEXER_ALLOCATIONS_MIN_ID_ASC',
  IndexerAllocationsMinIdDesc = 'INDEXER_ALLOCATIONS_MIN_ID_DESC',
  IndexerAllocationsMinIndexerIdAsc = 'INDEXER_ALLOCATIONS_MIN_INDEXER_ID_ASC',
  IndexerAllocationsMinIndexerIdDesc = 'INDEXER_ALLOCATIONS_MIN_INDEXER_ID_DESC',
  IndexerAllocationsMinProjectIdAsc = 'INDEXER_ALLOCATIONS_MIN_PROJECT_ID_ASC',
  IndexerAllocationsMinProjectIdDesc = 'INDEXER_ALLOCATIONS_MIN_PROJECT_ID_DESC',
  IndexerAllocationsStddevPopulationAmountAddedAsc = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_AMOUNT_ADDED_ASC',
  IndexerAllocationsStddevPopulationAmountAddedDesc = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_AMOUNT_ADDED_DESC',
  IndexerAllocationsStddevPopulationAmountRemovedAsc = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_AMOUNT_REMOVED_ASC',
  IndexerAllocationsStddevPopulationAmountRemovedDesc = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_AMOUNT_REMOVED_DESC',
  IndexerAllocationsStddevPopulationBlockRangeAsc = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  IndexerAllocationsStddevPopulationBlockRangeDesc = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  IndexerAllocationsStddevPopulationCreateAtAsc = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_CREATE_AT_ASC',
  IndexerAllocationsStddevPopulationCreateAtDesc = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_CREATE_AT_DESC',
  IndexerAllocationsStddevPopulationDeploymentIdAsc = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_DEPLOYMENT_ID_ASC',
  IndexerAllocationsStddevPopulationDeploymentIdDesc = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_DEPLOYMENT_ID_DESC',
  IndexerAllocationsStddevPopulationEraIdxAsc = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_ERA_IDX_ASC',
  IndexerAllocationsStddevPopulationEraIdxDesc = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_ERA_IDX_DESC',
  IndexerAllocationsStddevPopulationIdAsc = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_ID_ASC',
  IndexerAllocationsStddevPopulationIdDesc = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_ID_DESC',
  IndexerAllocationsStddevPopulationIndexerIdAsc = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_INDEXER_ID_ASC',
  IndexerAllocationsStddevPopulationIndexerIdDesc = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_INDEXER_ID_DESC',
  IndexerAllocationsStddevPopulationProjectIdAsc = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_PROJECT_ID_ASC',
  IndexerAllocationsStddevPopulationProjectIdDesc = 'INDEXER_ALLOCATIONS_STDDEV_POPULATION_PROJECT_ID_DESC',
  IndexerAllocationsStddevSampleAmountAddedAsc = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_AMOUNT_ADDED_ASC',
  IndexerAllocationsStddevSampleAmountAddedDesc = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_AMOUNT_ADDED_DESC',
  IndexerAllocationsStddevSampleAmountRemovedAsc = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_AMOUNT_REMOVED_ASC',
  IndexerAllocationsStddevSampleAmountRemovedDesc = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_AMOUNT_REMOVED_DESC',
  IndexerAllocationsStddevSampleBlockRangeAsc = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  IndexerAllocationsStddevSampleBlockRangeDesc = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  IndexerAllocationsStddevSampleCreateAtAsc = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_CREATE_AT_ASC',
  IndexerAllocationsStddevSampleCreateAtDesc = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_CREATE_AT_DESC',
  IndexerAllocationsStddevSampleDeploymentIdAsc = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC',
  IndexerAllocationsStddevSampleDeploymentIdDesc = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC',
  IndexerAllocationsStddevSampleEraIdxAsc = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_ERA_IDX_ASC',
  IndexerAllocationsStddevSampleEraIdxDesc = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_ERA_IDX_DESC',
  IndexerAllocationsStddevSampleIdAsc = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_ID_ASC',
  IndexerAllocationsStddevSampleIdDesc = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_ID_DESC',
  IndexerAllocationsStddevSampleIndexerIdAsc = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_INDEXER_ID_ASC',
  IndexerAllocationsStddevSampleIndexerIdDesc = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_INDEXER_ID_DESC',
  IndexerAllocationsStddevSampleProjectIdAsc = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_PROJECT_ID_ASC',
  IndexerAllocationsStddevSampleProjectIdDesc = 'INDEXER_ALLOCATIONS_STDDEV_SAMPLE_PROJECT_ID_DESC',
  IndexerAllocationsSumAmountAddedAsc = 'INDEXER_ALLOCATIONS_SUM_AMOUNT_ADDED_ASC',
  IndexerAllocationsSumAmountAddedDesc = 'INDEXER_ALLOCATIONS_SUM_AMOUNT_ADDED_DESC',
  IndexerAllocationsSumAmountRemovedAsc = 'INDEXER_ALLOCATIONS_SUM_AMOUNT_REMOVED_ASC',
  IndexerAllocationsSumAmountRemovedDesc = 'INDEXER_ALLOCATIONS_SUM_AMOUNT_REMOVED_DESC',
  IndexerAllocationsSumBlockRangeAsc = 'INDEXER_ALLOCATIONS_SUM_BLOCK_RANGE_ASC',
  IndexerAllocationsSumBlockRangeDesc = 'INDEXER_ALLOCATIONS_SUM_BLOCK_RANGE_DESC',
  IndexerAllocationsSumCreateAtAsc = 'INDEXER_ALLOCATIONS_SUM_CREATE_AT_ASC',
  IndexerAllocationsSumCreateAtDesc = 'INDEXER_ALLOCATIONS_SUM_CREATE_AT_DESC',
  IndexerAllocationsSumDeploymentIdAsc = 'INDEXER_ALLOCATIONS_SUM_DEPLOYMENT_ID_ASC',
  IndexerAllocationsSumDeploymentIdDesc = 'INDEXER_ALLOCATIONS_SUM_DEPLOYMENT_ID_DESC',
  IndexerAllocationsSumEraIdxAsc = 'INDEXER_ALLOCATIONS_SUM_ERA_IDX_ASC',
  IndexerAllocationsSumEraIdxDesc = 'INDEXER_ALLOCATIONS_SUM_ERA_IDX_DESC',
  IndexerAllocationsSumIdAsc = 'INDEXER_ALLOCATIONS_SUM_ID_ASC',
  IndexerAllocationsSumIdDesc = 'INDEXER_ALLOCATIONS_SUM_ID_DESC',
  IndexerAllocationsSumIndexerIdAsc = 'INDEXER_ALLOCATIONS_SUM_INDEXER_ID_ASC',
  IndexerAllocationsSumIndexerIdDesc = 'INDEXER_ALLOCATIONS_SUM_INDEXER_ID_DESC',
  IndexerAllocationsSumProjectIdAsc = 'INDEXER_ALLOCATIONS_SUM_PROJECT_ID_ASC',
  IndexerAllocationsSumProjectIdDesc = 'INDEXER_ALLOCATIONS_SUM_PROJECT_ID_DESC',
  IndexerAllocationsVariancePopulationAmountAddedAsc = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_AMOUNT_ADDED_ASC',
  IndexerAllocationsVariancePopulationAmountAddedDesc = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_AMOUNT_ADDED_DESC',
  IndexerAllocationsVariancePopulationAmountRemovedAsc = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_AMOUNT_REMOVED_ASC',
  IndexerAllocationsVariancePopulationAmountRemovedDesc = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_AMOUNT_REMOVED_DESC',
  IndexerAllocationsVariancePopulationBlockRangeAsc = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  IndexerAllocationsVariancePopulationBlockRangeDesc = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  IndexerAllocationsVariancePopulationCreateAtAsc = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_CREATE_AT_ASC',
  IndexerAllocationsVariancePopulationCreateAtDesc = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_CREATE_AT_DESC',
  IndexerAllocationsVariancePopulationDeploymentIdAsc = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC',
  IndexerAllocationsVariancePopulationDeploymentIdDesc = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC',
  IndexerAllocationsVariancePopulationEraIdxAsc = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_ERA_IDX_ASC',
  IndexerAllocationsVariancePopulationEraIdxDesc = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_ERA_IDX_DESC',
  IndexerAllocationsVariancePopulationIdAsc = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_ID_ASC',
  IndexerAllocationsVariancePopulationIdDesc = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_ID_DESC',
  IndexerAllocationsVariancePopulationIndexerIdAsc = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_INDEXER_ID_ASC',
  IndexerAllocationsVariancePopulationIndexerIdDesc = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_INDEXER_ID_DESC',
  IndexerAllocationsVariancePopulationProjectIdAsc = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_PROJECT_ID_ASC',
  IndexerAllocationsVariancePopulationProjectIdDesc = 'INDEXER_ALLOCATIONS_VARIANCE_POPULATION_PROJECT_ID_DESC',
  IndexerAllocationsVarianceSampleAmountAddedAsc = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_AMOUNT_ADDED_ASC',
  IndexerAllocationsVarianceSampleAmountAddedDesc = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_AMOUNT_ADDED_DESC',
  IndexerAllocationsVarianceSampleAmountRemovedAsc = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_AMOUNT_REMOVED_ASC',
  IndexerAllocationsVarianceSampleAmountRemovedDesc = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_AMOUNT_REMOVED_DESC',
  IndexerAllocationsVarianceSampleBlockRangeAsc = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  IndexerAllocationsVarianceSampleBlockRangeDesc = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  IndexerAllocationsVarianceSampleCreateAtAsc = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_CREATE_AT_ASC',
  IndexerAllocationsVarianceSampleCreateAtDesc = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_CREATE_AT_DESC',
  IndexerAllocationsVarianceSampleDeploymentIdAsc = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC',
  IndexerAllocationsVarianceSampleDeploymentIdDesc = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC',
  IndexerAllocationsVarianceSampleEraIdxAsc = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_ERA_IDX_ASC',
  IndexerAllocationsVarianceSampleEraIdxDesc = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_ERA_IDX_DESC',
  IndexerAllocationsVarianceSampleIdAsc = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_ID_ASC',
  IndexerAllocationsVarianceSampleIdDesc = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_ID_DESC',
  IndexerAllocationsVarianceSampleIndexerIdAsc = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  IndexerAllocationsVarianceSampleIndexerIdDesc = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  IndexerAllocationsVarianceSampleProjectIdAsc = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_PROJECT_ID_ASC',
  IndexerAllocationsVarianceSampleProjectIdDesc = 'INDEXER_ALLOCATIONS_VARIANCE_SAMPLE_PROJECT_ID_DESC',
  IndexerAllocationRewardsAverageBlockRangeAsc = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_BLOCK_RANGE_ASC',
  IndexerAllocationRewardsAverageBlockRangeDesc = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_BLOCK_RANGE_DESC',
  IndexerAllocationRewardsAverageBurntAsc = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_BURNT_ASC',
  IndexerAllocationRewardsAverageBurntDesc = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_BURNT_DESC',
  IndexerAllocationRewardsAverageCreateAtAsc = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_CREATE_AT_ASC',
  IndexerAllocationRewardsAverageCreateAtDesc = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_CREATE_AT_DESC',
  IndexerAllocationRewardsAverageDeploymentIdAsc = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_DEPLOYMENT_ID_ASC',
  IndexerAllocationRewardsAverageDeploymentIdDesc = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_DEPLOYMENT_ID_DESC',
  IndexerAllocationRewardsAverageEraIdxAsc = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_ERA_IDX_ASC',
  IndexerAllocationRewardsAverageEraIdxDesc = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_ERA_IDX_DESC',
  IndexerAllocationRewardsAverageIdAsc = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_ID_ASC',
  IndexerAllocationRewardsAverageIdDesc = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_ID_DESC',
  IndexerAllocationRewardsAverageIndexerIdAsc = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_INDEXER_ID_ASC',
  IndexerAllocationRewardsAverageIndexerIdDesc = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_INDEXER_ID_DESC',
  IndexerAllocationRewardsAverageProjectIdAsc = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_PROJECT_ID_ASC',
  IndexerAllocationRewardsAverageProjectIdDesc = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_PROJECT_ID_DESC',
  IndexerAllocationRewardsAverageRewardAsc = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_REWARD_ASC',
  IndexerAllocationRewardsAverageRewardDesc = 'INDEXER_ALLOCATION_REWARDS_AVERAGE_REWARD_DESC',
  IndexerAllocationRewardsByProjectIdCountAsc = 'INDEXER_ALLOCATION_REWARDS_BY_PROJECT_ID__COUNT_ASC',
  IndexerAllocationRewardsByProjectIdCountDesc = 'INDEXER_ALLOCATION_REWARDS_BY_PROJECT_ID__COUNT_DESC',
  IndexerAllocationRewardsCountAsc = 'INDEXER_ALLOCATION_REWARDS_COUNT_ASC',
  IndexerAllocationRewardsCountDesc = 'INDEXER_ALLOCATION_REWARDS_COUNT_DESC',
  IndexerAllocationRewardsDistinctCountBlockRangeAsc = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  IndexerAllocationRewardsDistinctCountBlockRangeDesc = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  IndexerAllocationRewardsDistinctCountBurntAsc = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_BURNT_ASC',
  IndexerAllocationRewardsDistinctCountBurntDesc = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_BURNT_DESC',
  IndexerAllocationRewardsDistinctCountCreateAtAsc = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_CREATE_AT_ASC',
  IndexerAllocationRewardsDistinctCountCreateAtDesc = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_CREATE_AT_DESC',
  IndexerAllocationRewardsDistinctCountDeploymentIdAsc = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_DEPLOYMENT_ID_ASC',
  IndexerAllocationRewardsDistinctCountDeploymentIdDesc = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_DEPLOYMENT_ID_DESC',
  IndexerAllocationRewardsDistinctCountEraIdxAsc = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_ERA_IDX_ASC',
  IndexerAllocationRewardsDistinctCountEraIdxDesc = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_ERA_IDX_DESC',
  IndexerAllocationRewardsDistinctCountIdAsc = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_ID_ASC',
  IndexerAllocationRewardsDistinctCountIdDesc = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_ID_DESC',
  IndexerAllocationRewardsDistinctCountIndexerIdAsc = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_INDEXER_ID_ASC',
  IndexerAllocationRewardsDistinctCountIndexerIdDesc = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_INDEXER_ID_DESC',
  IndexerAllocationRewardsDistinctCountProjectIdAsc = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_PROJECT_ID_ASC',
  IndexerAllocationRewardsDistinctCountProjectIdDesc = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_PROJECT_ID_DESC',
  IndexerAllocationRewardsDistinctCountRewardAsc = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_REWARD_ASC',
  IndexerAllocationRewardsDistinctCountRewardDesc = 'INDEXER_ALLOCATION_REWARDS_DISTINCT_COUNT_REWARD_DESC',
  IndexerAllocationRewardsMaxBlockRangeAsc = 'INDEXER_ALLOCATION_REWARDS_MAX_BLOCK_RANGE_ASC',
  IndexerAllocationRewardsMaxBlockRangeDesc = 'INDEXER_ALLOCATION_REWARDS_MAX_BLOCK_RANGE_DESC',
  IndexerAllocationRewardsMaxBurntAsc = 'INDEXER_ALLOCATION_REWARDS_MAX_BURNT_ASC',
  IndexerAllocationRewardsMaxBurntDesc = 'INDEXER_ALLOCATION_REWARDS_MAX_BURNT_DESC',
  IndexerAllocationRewardsMaxCreateAtAsc = 'INDEXER_ALLOCATION_REWARDS_MAX_CREATE_AT_ASC',
  IndexerAllocationRewardsMaxCreateAtDesc = 'INDEXER_ALLOCATION_REWARDS_MAX_CREATE_AT_DESC',
  IndexerAllocationRewardsMaxDeploymentIdAsc = 'INDEXER_ALLOCATION_REWARDS_MAX_DEPLOYMENT_ID_ASC',
  IndexerAllocationRewardsMaxDeploymentIdDesc = 'INDEXER_ALLOCATION_REWARDS_MAX_DEPLOYMENT_ID_DESC',
  IndexerAllocationRewardsMaxEraIdxAsc = 'INDEXER_ALLOCATION_REWARDS_MAX_ERA_IDX_ASC',
  IndexerAllocationRewardsMaxEraIdxDesc = 'INDEXER_ALLOCATION_REWARDS_MAX_ERA_IDX_DESC',
  IndexerAllocationRewardsMaxIdAsc = 'INDEXER_ALLOCATION_REWARDS_MAX_ID_ASC',
  IndexerAllocationRewardsMaxIdDesc = 'INDEXER_ALLOCATION_REWARDS_MAX_ID_DESC',
  IndexerAllocationRewardsMaxIndexerIdAsc = 'INDEXER_ALLOCATION_REWARDS_MAX_INDEXER_ID_ASC',
  IndexerAllocationRewardsMaxIndexerIdDesc = 'INDEXER_ALLOCATION_REWARDS_MAX_INDEXER_ID_DESC',
  IndexerAllocationRewardsMaxProjectIdAsc = 'INDEXER_ALLOCATION_REWARDS_MAX_PROJECT_ID_ASC',
  IndexerAllocationRewardsMaxProjectIdDesc = 'INDEXER_ALLOCATION_REWARDS_MAX_PROJECT_ID_DESC',
  IndexerAllocationRewardsMaxRewardAsc = 'INDEXER_ALLOCATION_REWARDS_MAX_REWARD_ASC',
  IndexerAllocationRewardsMaxRewardDesc = 'INDEXER_ALLOCATION_REWARDS_MAX_REWARD_DESC',
  IndexerAllocationRewardsMinBlockRangeAsc = 'INDEXER_ALLOCATION_REWARDS_MIN_BLOCK_RANGE_ASC',
  IndexerAllocationRewardsMinBlockRangeDesc = 'INDEXER_ALLOCATION_REWARDS_MIN_BLOCK_RANGE_DESC',
  IndexerAllocationRewardsMinBurntAsc = 'INDEXER_ALLOCATION_REWARDS_MIN_BURNT_ASC',
  IndexerAllocationRewardsMinBurntDesc = 'INDEXER_ALLOCATION_REWARDS_MIN_BURNT_DESC',
  IndexerAllocationRewardsMinCreateAtAsc = 'INDEXER_ALLOCATION_REWARDS_MIN_CREATE_AT_ASC',
  IndexerAllocationRewardsMinCreateAtDesc = 'INDEXER_ALLOCATION_REWARDS_MIN_CREATE_AT_DESC',
  IndexerAllocationRewardsMinDeploymentIdAsc = 'INDEXER_ALLOCATION_REWARDS_MIN_DEPLOYMENT_ID_ASC',
  IndexerAllocationRewardsMinDeploymentIdDesc = 'INDEXER_ALLOCATION_REWARDS_MIN_DEPLOYMENT_ID_DESC',
  IndexerAllocationRewardsMinEraIdxAsc = 'INDEXER_ALLOCATION_REWARDS_MIN_ERA_IDX_ASC',
  IndexerAllocationRewardsMinEraIdxDesc = 'INDEXER_ALLOCATION_REWARDS_MIN_ERA_IDX_DESC',
  IndexerAllocationRewardsMinIdAsc = 'INDEXER_ALLOCATION_REWARDS_MIN_ID_ASC',
  IndexerAllocationRewardsMinIdDesc = 'INDEXER_ALLOCATION_REWARDS_MIN_ID_DESC',
  IndexerAllocationRewardsMinIndexerIdAsc = 'INDEXER_ALLOCATION_REWARDS_MIN_INDEXER_ID_ASC',
  IndexerAllocationRewardsMinIndexerIdDesc = 'INDEXER_ALLOCATION_REWARDS_MIN_INDEXER_ID_DESC',
  IndexerAllocationRewardsMinProjectIdAsc = 'INDEXER_ALLOCATION_REWARDS_MIN_PROJECT_ID_ASC',
  IndexerAllocationRewardsMinProjectIdDesc = 'INDEXER_ALLOCATION_REWARDS_MIN_PROJECT_ID_DESC',
  IndexerAllocationRewardsMinRewardAsc = 'INDEXER_ALLOCATION_REWARDS_MIN_REWARD_ASC',
  IndexerAllocationRewardsMinRewardDesc = 'INDEXER_ALLOCATION_REWARDS_MIN_REWARD_DESC',
  IndexerAllocationRewardsStddevPopulationBlockRangeAsc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  IndexerAllocationRewardsStddevPopulationBlockRangeDesc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  IndexerAllocationRewardsStddevPopulationBurntAsc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_BURNT_ASC',
  IndexerAllocationRewardsStddevPopulationBurntDesc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_BURNT_DESC',
  IndexerAllocationRewardsStddevPopulationCreateAtAsc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_CREATE_AT_ASC',
  IndexerAllocationRewardsStddevPopulationCreateAtDesc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_CREATE_AT_DESC',
  IndexerAllocationRewardsStddevPopulationDeploymentIdAsc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_DEPLOYMENT_ID_ASC',
  IndexerAllocationRewardsStddevPopulationDeploymentIdDesc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_DEPLOYMENT_ID_DESC',
  IndexerAllocationRewardsStddevPopulationEraIdxAsc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_ERA_IDX_ASC',
  IndexerAllocationRewardsStddevPopulationEraIdxDesc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_ERA_IDX_DESC',
  IndexerAllocationRewardsStddevPopulationIdAsc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_ID_ASC',
  IndexerAllocationRewardsStddevPopulationIdDesc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_ID_DESC',
  IndexerAllocationRewardsStddevPopulationIndexerIdAsc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_INDEXER_ID_ASC',
  IndexerAllocationRewardsStddevPopulationIndexerIdDesc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_INDEXER_ID_DESC',
  IndexerAllocationRewardsStddevPopulationProjectIdAsc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_PROJECT_ID_ASC',
  IndexerAllocationRewardsStddevPopulationProjectIdDesc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_PROJECT_ID_DESC',
  IndexerAllocationRewardsStddevPopulationRewardAsc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_REWARD_ASC',
  IndexerAllocationRewardsStddevPopulationRewardDesc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_POPULATION_REWARD_DESC',
  IndexerAllocationRewardsStddevSampleBlockRangeAsc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  IndexerAllocationRewardsStddevSampleBlockRangeDesc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  IndexerAllocationRewardsStddevSampleBurntAsc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_BURNT_ASC',
  IndexerAllocationRewardsStddevSampleBurntDesc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_BURNT_DESC',
  IndexerAllocationRewardsStddevSampleCreateAtAsc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_CREATE_AT_ASC',
  IndexerAllocationRewardsStddevSampleCreateAtDesc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_CREATE_AT_DESC',
  IndexerAllocationRewardsStddevSampleDeploymentIdAsc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC',
  IndexerAllocationRewardsStddevSampleDeploymentIdDesc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC',
  IndexerAllocationRewardsStddevSampleEraIdxAsc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_ERA_IDX_ASC',
  IndexerAllocationRewardsStddevSampleEraIdxDesc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_ERA_IDX_DESC',
  IndexerAllocationRewardsStddevSampleIdAsc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_ID_ASC',
  IndexerAllocationRewardsStddevSampleIdDesc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_ID_DESC',
  IndexerAllocationRewardsStddevSampleIndexerIdAsc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_INDEXER_ID_ASC',
  IndexerAllocationRewardsStddevSampleIndexerIdDesc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_INDEXER_ID_DESC',
  IndexerAllocationRewardsStddevSampleProjectIdAsc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_PROJECT_ID_ASC',
  IndexerAllocationRewardsStddevSampleProjectIdDesc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_PROJECT_ID_DESC',
  IndexerAllocationRewardsStddevSampleRewardAsc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_REWARD_ASC',
  IndexerAllocationRewardsStddevSampleRewardDesc = 'INDEXER_ALLOCATION_REWARDS_STDDEV_SAMPLE_REWARD_DESC',
  IndexerAllocationRewardsSumBlockRangeAsc = 'INDEXER_ALLOCATION_REWARDS_SUM_BLOCK_RANGE_ASC',
  IndexerAllocationRewardsSumBlockRangeDesc = 'INDEXER_ALLOCATION_REWARDS_SUM_BLOCK_RANGE_DESC',
  IndexerAllocationRewardsSumBurntAsc = 'INDEXER_ALLOCATION_REWARDS_SUM_BURNT_ASC',
  IndexerAllocationRewardsSumBurntDesc = 'INDEXER_ALLOCATION_REWARDS_SUM_BURNT_DESC',
  IndexerAllocationRewardsSumCreateAtAsc = 'INDEXER_ALLOCATION_REWARDS_SUM_CREATE_AT_ASC',
  IndexerAllocationRewardsSumCreateAtDesc = 'INDEXER_ALLOCATION_REWARDS_SUM_CREATE_AT_DESC',
  IndexerAllocationRewardsSumDeploymentIdAsc = 'INDEXER_ALLOCATION_REWARDS_SUM_DEPLOYMENT_ID_ASC',
  IndexerAllocationRewardsSumDeploymentIdDesc = 'INDEXER_ALLOCATION_REWARDS_SUM_DEPLOYMENT_ID_DESC',
  IndexerAllocationRewardsSumEraIdxAsc = 'INDEXER_ALLOCATION_REWARDS_SUM_ERA_IDX_ASC',
  IndexerAllocationRewardsSumEraIdxDesc = 'INDEXER_ALLOCATION_REWARDS_SUM_ERA_IDX_DESC',
  IndexerAllocationRewardsSumIdAsc = 'INDEXER_ALLOCATION_REWARDS_SUM_ID_ASC',
  IndexerAllocationRewardsSumIdDesc = 'INDEXER_ALLOCATION_REWARDS_SUM_ID_DESC',
  IndexerAllocationRewardsSumIndexerIdAsc = 'INDEXER_ALLOCATION_REWARDS_SUM_INDEXER_ID_ASC',
  IndexerAllocationRewardsSumIndexerIdDesc = 'INDEXER_ALLOCATION_REWARDS_SUM_INDEXER_ID_DESC',
  IndexerAllocationRewardsSumProjectIdAsc = 'INDEXER_ALLOCATION_REWARDS_SUM_PROJECT_ID_ASC',
  IndexerAllocationRewardsSumProjectIdDesc = 'INDEXER_ALLOCATION_REWARDS_SUM_PROJECT_ID_DESC',
  IndexerAllocationRewardsSumRewardAsc = 'INDEXER_ALLOCATION_REWARDS_SUM_REWARD_ASC',
  IndexerAllocationRewardsSumRewardDesc = 'INDEXER_ALLOCATION_REWARDS_SUM_REWARD_DESC',
  IndexerAllocationRewardsVariancePopulationBlockRangeAsc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  IndexerAllocationRewardsVariancePopulationBlockRangeDesc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  IndexerAllocationRewardsVariancePopulationBurntAsc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_BURNT_ASC',
  IndexerAllocationRewardsVariancePopulationBurntDesc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_BURNT_DESC',
  IndexerAllocationRewardsVariancePopulationCreateAtAsc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_CREATE_AT_ASC',
  IndexerAllocationRewardsVariancePopulationCreateAtDesc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_CREATE_AT_DESC',
  IndexerAllocationRewardsVariancePopulationDeploymentIdAsc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC',
  IndexerAllocationRewardsVariancePopulationDeploymentIdDesc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC',
  IndexerAllocationRewardsVariancePopulationEraIdxAsc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_ERA_IDX_ASC',
  IndexerAllocationRewardsVariancePopulationEraIdxDesc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_ERA_IDX_DESC',
  IndexerAllocationRewardsVariancePopulationIdAsc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_ID_ASC',
  IndexerAllocationRewardsVariancePopulationIdDesc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_ID_DESC',
  IndexerAllocationRewardsVariancePopulationIndexerIdAsc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_INDEXER_ID_ASC',
  IndexerAllocationRewardsVariancePopulationIndexerIdDesc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_INDEXER_ID_DESC',
  IndexerAllocationRewardsVariancePopulationProjectIdAsc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_PROJECT_ID_ASC',
  IndexerAllocationRewardsVariancePopulationProjectIdDesc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_PROJECT_ID_DESC',
  IndexerAllocationRewardsVariancePopulationRewardAsc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_REWARD_ASC',
  IndexerAllocationRewardsVariancePopulationRewardDesc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_POPULATION_REWARD_DESC',
  IndexerAllocationRewardsVarianceSampleBlockRangeAsc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  IndexerAllocationRewardsVarianceSampleBlockRangeDesc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  IndexerAllocationRewardsVarianceSampleBurntAsc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_BURNT_ASC',
  IndexerAllocationRewardsVarianceSampleBurntDesc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_BURNT_DESC',
  IndexerAllocationRewardsVarianceSampleCreateAtAsc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_CREATE_AT_ASC',
  IndexerAllocationRewardsVarianceSampleCreateAtDesc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_CREATE_AT_DESC',
  IndexerAllocationRewardsVarianceSampleDeploymentIdAsc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC',
  IndexerAllocationRewardsVarianceSampleDeploymentIdDesc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC',
  IndexerAllocationRewardsVarianceSampleEraIdxAsc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_ERA_IDX_ASC',
  IndexerAllocationRewardsVarianceSampleEraIdxDesc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_ERA_IDX_DESC',
  IndexerAllocationRewardsVarianceSampleIdAsc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_ID_ASC',
  IndexerAllocationRewardsVarianceSampleIdDesc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_ID_DESC',
  IndexerAllocationRewardsVarianceSampleIndexerIdAsc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  IndexerAllocationRewardsVarianceSampleIndexerIdDesc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  IndexerAllocationRewardsVarianceSampleProjectIdAsc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_PROJECT_ID_ASC',
  IndexerAllocationRewardsVarianceSampleProjectIdDesc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_PROJECT_ID_DESC',
  IndexerAllocationRewardsVarianceSampleRewardAsc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_REWARD_ASC',
  IndexerAllocationRewardsVarianceSampleRewardDesc = 'INDEXER_ALLOCATION_REWARDS_VARIANCE_SAMPLE_REWARD_DESC',
  IndexerAllocationRewardSummariesAverageBlockRangeAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_BLOCK_RANGE_ASC',
  IndexerAllocationRewardSummariesAverageBlockRangeDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_BLOCK_RANGE_DESC',
  IndexerAllocationRewardSummariesAverageCreateAtAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_CREATE_AT_ASC',
  IndexerAllocationRewardSummariesAverageCreateAtDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_CREATE_AT_DESC',
  IndexerAllocationRewardSummariesAverageDeploymentIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_DEPLOYMENT_ID_ASC',
  IndexerAllocationRewardSummariesAverageDeploymentIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_DEPLOYMENT_ID_DESC',
  IndexerAllocationRewardSummariesAverageIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_ID_ASC',
  IndexerAllocationRewardSummariesAverageIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_ID_DESC',
  IndexerAllocationRewardSummariesAverageIndexerIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_INDEXER_ID_ASC',
  IndexerAllocationRewardSummariesAverageIndexerIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_INDEXER_ID_DESC',
  IndexerAllocationRewardSummariesAverageProjectIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_PROJECT_ID_ASC',
  IndexerAllocationRewardSummariesAverageProjectIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_PROJECT_ID_DESC',
  IndexerAllocationRewardSummariesAverageTotalBurntAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_TOTAL_BURNT_ASC',
  IndexerAllocationRewardSummariesAverageTotalBurntDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_TOTAL_BURNT_DESC',
  IndexerAllocationRewardSummariesAverageTotalRewardAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_TOTAL_REWARD_ASC',
  IndexerAllocationRewardSummariesAverageTotalRewardDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_TOTAL_REWARD_DESC',
  IndexerAllocationRewardSummariesAverageUpdateAtAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_UPDATE_AT_ASC',
  IndexerAllocationRewardSummariesAverageUpdateAtDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_AVERAGE_UPDATE_AT_DESC',
  IndexerAllocationRewardSummariesByProjectIdCountAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_BY_PROJECT_ID__COUNT_ASC',
  IndexerAllocationRewardSummariesByProjectIdCountDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_BY_PROJECT_ID__COUNT_DESC',
  IndexerAllocationRewardSummariesCountAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_COUNT_ASC',
  IndexerAllocationRewardSummariesCountDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_COUNT_DESC',
  IndexerAllocationRewardSummariesDistinctCountBlockRangeAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  IndexerAllocationRewardSummariesDistinctCountBlockRangeDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  IndexerAllocationRewardSummariesDistinctCountCreateAtAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_CREATE_AT_ASC',
  IndexerAllocationRewardSummariesDistinctCountCreateAtDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_CREATE_AT_DESC',
  IndexerAllocationRewardSummariesDistinctCountDeploymentIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_DEPLOYMENT_ID_ASC',
  IndexerAllocationRewardSummariesDistinctCountDeploymentIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_DEPLOYMENT_ID_DESC',
  IndexerAllocationRewardSummariesDistinctCountIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_ID_ASC',
  IndexerAllocationRewardSummariesDistinctCountIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_ID_DESC',
  IndexerAllocationRewardSummariesDistinctCountIndexerIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_INDEXER_ID_ASC',
  IndexerAllocationRewardSummariesDistinctCountIndexerIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_INDEXER_ID_DESC',
  IndexerAllocationRewardSummariesDistinctCountProjectIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_PROJECT_ID_ASC',
  IndexerAllocationRewardSummariesDistinctCountProjectIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_PROJECT_ID_DESC',
  IndexerAllocationRewardSummariesDistinctCountTotalBurntAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_TOTAL_BURNT_ASC',
  IndexerAllocationRewardSummariesDistinctCountTotalBurntDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_TOTAL_BURNT_DESC',
  IndexerAllocationRewardSummariesDistinctCountTotalRewardAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_TOTAL_REWARD_ASC',
  IndexerAllocationRewardSummariesDistinctCountTotalRewardDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_TOTAL_REWARD_DESC',
  IndexerAllocationRewardSummariesDistinctCountUpdateAtAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_UPDATE_AT_ASC',
  IndexerAllocationRewardSummariesDistinctCountUpdateAtDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_DISTINCT_COUNT_UPDATE_AT_DESC',
  IndexerAllocationRewardSummariesMaxBlockRangeAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_BLOCK_RANGE_ASC',
  IndexerAllocationRewardSummariesMaxBlockRangeDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_BLOCK_RANGE_DESC',
  IndexerAllocationRewardSummariesMaxCreateAtAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_CREATE_AT_ASC',
  IndexerAllocationRewardSummariesMaxCreateAtDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_CREATE_AT_DESC',
  IndexerAllocationRewardSummariesMaxDeploymentIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_DEPLOYMENT_ID_ASC',
  IndexerAllocationRewardSummariesMaxDeploymentIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_DEPLOYMENT_ID_DESC',
  IndexerAllocationRewardSummariesMaxIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_ID_ASC',
  IndexerAllocationRewardSummariesMaxIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_ID_DESC',
  IndexerAllocationRewardSummariesMaxIndexerIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_INDEXER_ID_ASC',
  IndexerAllocationRewardSummariesMaxIndexerIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_INDEXER_ID_DESC',
  IndexerAllocationRewardSummariesMaxProjectIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_PROJECT_ID_ASC',
  IndexerAllocationRewardSummariesMaxProjectIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_PROJECT_ID_DESC',
  IndexerAllocationRewardSummariesMaxTotalBurntAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_TOTAL_BURNT_ASC',
  IndexerAllocationRewardSummariesMaxTotalBurntDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_TOTAL_BURNT_DESC',
  IndexerAllocationRewardSummariesMaxTotalRewardAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_TOTAL_REWARD_ASC',
  IndexerAllocationRewardSummariesMaxTotalRewardDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_TOTAL_REWARD_DESC',
  IndexerAllocationRewardSummariesMaxUpdateAtAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_UPDATE_AT_ASC',
  IndexerAllocationRewardSummariesMaxUpdateAtDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MAX_UPDATE_AT_DESC',
  IndexerAllocationRewardSummariesMinBlockRangeAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_BLOCK_RANGE_ASC',
  IndexerAllocationRewardSummariesMinBlockRangeDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_BLOCK_RANGE_DESC',
  IndexerAllocationRewardSummariesMinCreateAtAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_CREATE_AT_ASC',
  IndexerAllocationRewardSummariesMinCreateAtDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_CREATE_AT_DESC',
  IndexerAllocationRewardSummariesMinDeploymentIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_DEPLOYMENT_ID_ASC',
  IndexerAllocationRewardSummariesMinDeploymentIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_DEPLOYMENT_ID_DESC',
  IndexerAllocationRewardSummariesMinIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_ID_ASC',
  IndexerAllocationRewardSummariesMinIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_ID_DESC',
  IndexerAllocationRewardSummariesMinIndexerIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_INDEXER_ID_ASC',
  IndexerAllocationRewardSummariesMinIndexerIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_INDEXER_ID_DESC',
  IndexerAllocationRewardSummariesMinProjectIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_PROJECT_ID_ASC',
  IndexerAllocationRewardSummariesMinProjectIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_PROJECT_ID_DESC',
  IndexerAllocationRewardSummariesMinTotalBurntAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_TOTAL_BURNT_ASC',
  IndexerAllocationRewardSummariesMinTotalBurntDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_TOTAL_BURNT_DESC',
  IndexerAllocationRewardSummariesMinTotalRewardAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_TOTAL_REWARD_ASC',
  IndexerAllocationRewardSummariesMinTotalRewardDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_TOTAL_REWARD_DESC',
  IndexerAllocationRewardSummariesMinUpdateAtAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_UPDATE_AT_ASC',
  IndexerAllocationRewardSummariesMinUpdateAtDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_MIN_UPDATE_AT_DESC',
  IndexerAllocationRewardSummariesStddevPopulationBlockRangeAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  IndexerAllocationRewardSummariesStddevPopulationBlockRangeDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  IndexerAllocationRewardSummariesStddevPopulationCreateAtAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_CREATE_AT_ASC',
  IndexerAllocationRewardSummariesStddevPopulationCreateAtDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_CREATE_AT_DESC',
  IndexerAllocationRewardSummariesStddevPopulationDeploymentIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_DEPLOYMENT_ID_ASC',
  IndexerAllocationRewardSummariesStddevPopulationDeploymentIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_DEPLOYMENT_ID_DESC',
  IndexerAllocationRewardSummariesStddevPopulationIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_ID_ASC',
  IndexerAllocationRewardSummariesStddevPopulationIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_ID_DESC',
  IndexerAllocationRewardSummariesStddevPopulationIndexerIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_INDEXER_ID_ASC',
  IndexerAllocationRewardSummariesStddevPopulationIndexerIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_INDEXER_ID_DESC',
  IndexerAllocationRewardSummariesStddevPopulationProjectIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_PROJECT_ID_ASC',
  IndexerAllocationRewardSummariesStddevPopulationProjectIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_PROJECT_ID_DESC',
  IndexerAllocationRewardSummariesStddevPopulationTotalBurntAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_TOTAL_BURNT_ASC',
  IndexerAllocationRewardSummariesStddevPopulationTotalBurntDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_TOTAL_BURNT_DESC',
  IndexerAllocationRewardSummariesStddevPopulationTotalRewardAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_TOTAL_REWARD_ASC',
  IndexerAllocationRewardSummariesStddevPopulationTotalRewardDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_TOTAL_REWARD_DESC',
  IndexerAllocationRewardSummariesStddevPopulationUpdateAtAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_UPDATE_AT_ASC',
  IndexerAllocationRewardSummariesStddevPopulationUpdateAtDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_POPULATION_UPDATE_AT_DESC',
  IndexerAllocationRewardSummariesStddevSampleBlockRangeAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  IndexerAllocationRewardSummariesStddevSampleBlockRangeDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  IndexerAllocationRewardSummariesStddevSampleCreateAtAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_CREATE_AT_ASC',
  IndexerAllocationRewardSummariesStddevSampleCreateAtDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_CREATE_AT_DESC',
  IndexerAllocationRewardSummariesStddevSampleDeploymentIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC',
  IndexerAllocationRewardSummariesStddevSampleDeploymentIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC',
  IndexerAllocationRewardSummariesStddevSampleIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_ID_ASC',
  IndexerAllocationRewardSummariesStddevSampleIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_ID_DESC',
  IndexerAllocationRewardSummariesStddevSampleIndexerIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_INDEXER_ID_ASC',
  IndexerAllocationRewardSummariesStddevSampleIndexerIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_INDEXER_ID_DESC',
  IndexerAllocationRewardSummariesStddevSampleProjectIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_PROJECT_ID_ASC',
  IndexerAllocationRewardSummariesStddevSampleProjectIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_PROJECT_ID_DESC',
  IndexerAllocationRewardSummariesStddevSampleTotalBurntAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_TOTAL_BURNT_ASC',
  IndexerAllocationRewardSummariesStddevSampleTotalBurntDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_TOTAL_BURNT_DESC',
  IndexerAllocationRewardSummariesStddevSampleTotalRewardAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_TOTAL_REWARD_ASC',
  IndexerAllocationRewardSummariesStddevSampleTotalRewardDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_TOTAL_REWARD_DESC',
  IndexerAllocationRewardSummariesStddevSampleUpdateAtAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_UPDATE_AT_ASC',
  IndexerAllocationRewardSummariesStddevSampleUpdateAtDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_STDDEV_SAMPLE_UPDATE_AT_DESC',
  IndexerAllocationRewardSummariesSumBlockRangeAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_BLOCK_RANGE_ASC',
  IndexerAllocationRewardSummariesSumBlockRangeDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_BLOCK_RANGE_DESC',
  IndexerAllocationRewardSummariesSumCreateAtAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_CREATE_AT_ASC',
  IndexerAllocationRewardSummariesSumCreateAtDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_CREATE_AT_DESC',
  IndexerAllocationRewardSummariesSumDeploymentIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_DEPLOYMENT_ID_ASC',
  IndexerAllocationRewardSummariesSumDeploymentIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_DEPLOYMENT_ID_DESC',
  IndexerAllocationRewardSummariesSumIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_ID_ASC',
  IndexerAllocationRewardSummariesSumIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_ID_DESC',
  IndexerAllocationRewardSummariesSumIndexerIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_INDEXER_ID_ASC',
  IndexerAllocationRewardSummariesSumIndexerIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_INDEXER_ID_DESC',
  IndexerAllocationRewardSummariesSumProjectIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_PROJECT_ID_ASC',
  IndexerAllocationRewardSummariesSumProjectIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_PROJECT_ID_DESC',
  IndexerAllocationRewardSummariesSumTotalBurntAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_TOTAL_BURNT_ASC',
  IndexerAllocationRewardSummariesSumTotalBurntDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_TOTAL_BURNT_DESC',
  IndexerAllocationRewardSummariesSumTotalRewardAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_TOTAL_REWARD_ASC',
  IndexerAllocationRewardSummariesSumTotalRewardDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_TOTAL_REWARD_DESC',
  IndexerAllocationRewardSummariesSumUpdateAtAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_UPDATE_AT_ASC',
  IndexerAllocationRewardSummariesSumUpdateAtDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_SUM_UPDATE_AT_DESC',
  IndexerAllocationRewardSummariesVariancePopulationBlockRangeAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  IndexerAllocationRewardSummariesVariancePopulationBlockRangeDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  IndexerAllocationRewardSummariesVariancePopulationCreateAtAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_CREATE_AT_ASC',
  IndexerAllocationRewardSummariesVariancePopulationCreateAtDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_CREATE_AT_DESC',
  IndexerAllocationRewardSummariesVariancePopulationDeploymentIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC',
  IndexerAllocationRewardSummariesVariancePopulationDeploymentIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC',
  IndexerAllocationRewardSummariesVariancePopulationIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_ID_ASC',
  IndexerAllocationRewardSummariesVariancePopulationIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_ID_DESC',
  IndexerAllocationRewardSummariesVariancePopulationIndexerIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_INDEXER_ID_ASC',
  IndexerAllocationRewardSummariesVariancePopulationIndexerIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_INDEXER_ID_DESC',
  IndexerAllocationRewardSummariesVariancePopulationProjectIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_PROJECT_ID_ASC',
  IndexerAllocationRewardSummariesVariancePopulationProjectIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_PROJECT_ID_DESC',
  IndexerAllocationRewardSummariesVariancePopulationTotalBurntAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_TOTAL_BURNT_ASC',
  IndexerAllocationRewardSummariesVariancePopulationTotalBurntDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_TOTAL_BURNT_DESC',
  IndexerAllocationRewardSummariesVariancePopulationTotalRewardAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_TOTAL_REWARD_ASC',
  IndexerAllocationRewardSummariesVariancePopulationTotalRewardDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_TOTAL_REWARD_DESC',
  IndexerAllocationRewardSummariesVariancePopulationUpdateAtAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_UPDATE_AT_ASC',
  IndexerAllocationRewardSummariesVariancePopulationUpdateAtDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_POPULATION_UPDATE_AT_DESC',
  IndexerAllocationRewardSummariesVarianceSampleBlockRangeAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  IndexerAllocationRewardSummariesVarianceSampleBlockRangeDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  IndexerAllocationRewardSummariesVarianceSampleCreateAtAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_CREATE_AT_ASC',
  IndexerAllocationRewardSummariesVarianceSampleCreateAtDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_CREATE_AT_DESC',
  IndexerAllocationRewardSummariesVarianceSampleDeploymentIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC',
  IndexerAllocationRewardSummariesVarianceSampleDeploymentIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC',
  IndexerAllocationRewardSummariesVarianceSampleIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_ID_ASC',
  IndexerAllocationRewardSummariesVarianceSampleIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_ID_DESC',
  IndexerAllocationRewardSummariesVarianceSampleIndexerIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  IndexerAllocationRewardSummariesVarianceSampleIndexerIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  IndexerAllocationRewardSummariesVarianceSampleProjectIdAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_PROJECT_ID_ASC',
  IndexerAllocationRewardSummariesVarianceSampleProjectIdDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_PROJECT_ID_DESC',
  IndexerAllocationRewardSummariesVarianceSampleTotalBurntAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_TOTAL_BURNT_ASC',
  IndexerAllocationRewardSummariesVarianceSampleTotalBurntDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_TOTAL_BURNT_DESC',
  IndexerAllocationRewardSummariesVarianceSampleTotalRewardAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_TOTAL_REWARD_ASC',
  IndexerAllocationRewardSummariesVarianceSampleTotalRewardDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_TOTAL_REWARD_DESC',
  IndexerAllocationRewardSummariesVarianceSampleUpdateAtAsc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_UPDATE_AT_ASC',
  IndexerAllocationRewardSummariesVarianceSampleUpdateAtDesc = 'INDEXER_ALLOCATION_REWARD_SUMMARIES_VARIANCE_SAMPLE_UPDATE_AT_DESC',
  IndexerAllocationSummariesAverageBlockRangeAsc = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_BLOCK_RANGE_ASC',
  IndexerAllocationSummariesAverageBlockRangeDesc = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_BLOCK_RANGE_DESC',
  IndexerAllocationSummariesAverageCreateAtAsc = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_CREATE_AT_ASC',
  IndexerAllocationSummariesAverageCreateAtDesc = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_CREATE_AT_DESC',
  IndexerAllocationSummariesAverageDeploymentIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_DEPLOYMENT_ID_ASC',
  IndexerAllocationSummariesAverageDeploymentIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_DEPLOYMENT_ID_DESC',
  IndexerAllocationSummariesAverageIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_ID_ASC',
  IndexerAllocationSummariesAverageIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_ID_DESC',
  IndexerAllocationSummariesAverageIndexerIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_INDEXER_ID_ASC',
  IndexerAllocationSummariesAverageIndexerIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_INDEXER_ID_DESC',
  IndexerAllocationSummariesAverageProjectIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_PROJECT_ID_ASC',
  IndexerAllocationSummariesAverageProjectIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_PROJECT_ID_DESC',
  IndexerAllocationSummariesAverageTotalAddedAsc = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_TOTAL_ADDED_ASC',
  IndexerAllocationSummariesAverageTotalAddedDesc = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_TOTAL_ADDED_DESC',
  IndexerAllocationSummariesAverageTotalAmountAsc = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_TOTAL_AMOUNT_ASC',
  IndexerAllocationSummariesAverageTotalAmountDesc = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_TOTAL_AMOUNT_DESC',
  IndexerAllocationSummariesAverageTotalRemovedAsc = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_TOTAL_REMOVED_ASC',
  IndexerAllocationSummariesAverageTotalRemovedDesc = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_TOTAL_REMOVED_DESC',
  IndexerAllocationSummariesAverageUpdateAtAsc = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_UPDATE_AT_ASC',
  IndexerAllocationSummariesAverageUpdateAtDesc = 'INDEXER_ALLOCATION_SUMMARIES_AVERAGE_UPDATE_AT_DESC',
  IndexerAllocationSummariesByProjectIdCountAsc = 'INDEXER_ALLOCATION_SUMMARIES_BY_PROJECT_ID__COUNT_ASC',
  IndexerAllocationSummariesByProjectIdCountDesc = 'INDEXER_ALLOCATION_SUMMARIES_BY_PROJECT_ID__COUNT_DESC',
  IndexerAllocationSummariesCountAsc = 'INDEXER_ALLOCATION_SUMMARIES_COUNT_ASC',
  IndexerAllocationSummariesCountDesc = 'INDEXER_ALLOCATION_SUMMARIES_COUNT_DESC',
  IndexerAllocationSummariesDistinctCountBlockRangeAsc = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  IndexerAllocationSummariesDistinctCountBlockRangeDesc = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  IndexerAllocationSummariesDistinctCountCreateAtAsc = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_CREATE_AT_ASC',
  IndexerAllocationSummariesDistinctCountCreateAtDesc = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_CREATE_AT_DESC',
  IndexerAllocationSummariesDistinctCountDeploymentIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_DEPLOYMENT_ID_ASC',
  IndexerAllocationSummariesDistinctCountDeploymentIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_DEPLOYMENT_ID_DESC',
  IndexerAllocationSummariesDistinctCountIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_ID_ASC',
  IndexerAllocationSummariesDistinctCountIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_ID_DESC',
  IndexerAllocationSummariesDistinctCountIndexerIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_INDEXER_ID_ASC',
  IndexerAllocationSummariesDistinctCountIndexerIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_INDEXER_ID_DESC',
  IndexerAllocationSummariesDistinctCountProjectIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_PROJECT_ID_ASC',
  IndexerAllocationSummariesDistinctCountProjectIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_PROJECT_ID_DESC',
  IndexerAllocationSummariesDistinctCountTotalAddedAsc = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_TOTAL_ADDED_ASC',
  IndexerAllocationSummariesDistinctCountTotalAddedDesc = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_TOTAL_ADDED_DESC',
  IndexerAllocationSummariesDistinctCountTotalAmountAsc = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_TOTAL_AMOUNT_ASC',
  IndexerAllocationSummariesDistinctCountTotalAmountDesc = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_TOTAL_AMOUNT_DESC',
  IndexerAllocationSummariesDistinctCountTotalRemovedAsc = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_TOTAL_REMOVED_ASC',
  IndexerAllocationSummariesDistinctCountTotalRemovedDesc = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_TOTAL_REMOVED_DESC',
  IndexerAllocationSummariesDistinctCountUpdateAtAsc = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_UPDATE_AT_ASC',
  IndexerAllocationSummariesDistinctCountUpdateAtDesc = 'INDEXER_ALLOCATION_SUMMARIES_DISTINCT_COUNT_UPDATE_AT_DESC',
  IndexerAllocationSummariesMaxBlockRangeAsc = 'INDEXER_ALLOCATION_SUMMARIES_MAX_BLOCK_RANGE_ASC',
  IndexerAllocationSummariesMaxBlockRangeDesc = 'INDEXER_ALLOCATION_SUMMARIES_MAX_BLOCK_RANGE_DESC',
  IndexerAllocationSummariesMaxCreateAtAsc = 'INDEXER_ALLOCATION_SUMMARIES_MAX_CREATE_AT_ASC',
  IndexerAllocationSummariesMaxCreateAtDesc = 'INDEXER_ALLOCATION_SUMMARIES_MAX_CREATE_AT_DESC',
  IndexerAllocationSummariesMaxDeploymentIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_MAX_DEPLOYMENT_ID_ASC',
  IndexerAllocationSummariesMaxDeploymentIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_MAX_DEPLOYMENT_ID_DESC',
  IndexerAllocationSummariesMaxIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_MAX_ID_ASC',
  IndexerAllocationSummariesMaxIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_MAX_ID_DESC',
  IndexerAllocationSummariesMaxIndexerIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_MAX_INDEXER_ID_ASC',
  IndexerAllocationSummariesMaxIndexerIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_MAX_INDEXER_ID_DESC',
  IndexerAllocationSummariesMaxProjectIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_MAX_PROJECT_ID_ASC',
  IndexerAllocationSummariesMaxProjectIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_MAX_PROJECT_ID_DESC',
  IndexerAllocationSummariesMaxTotalAddedAsc = 'INDEXER_ALLOCATION_SUMMARIES_MAX_TOTAL_ADDED_ASC',
  IndexerAllocationSummariesMaxTotalAddedDesc = 'INDEXER_ALLOCATION_SUMMARIES_MAX_TOTAL_ADDED_DESC',
  IndexerAllocationSummariesMaxTotalAmountAsc = 'INDEXER_ALLOCATION_SUMMARIES_MAX_TOTAL_AMOUNT_ASC',
  IndexerAllocationSummariesMaxTotalAmountDesc = 'INDEXER_ALLOCATION_SUMMARIES_MAX_TOTAL_AMOUNT_DESC',
  IndexerAllocationSummariesMaxTotalRemovedAsc = 'INDEXER_ALLOCATION_SUMMARIES_MAX_TOTAL_REMOVED_ASC',
  IndexerAllocationSummariesMaxTotalRemovedDesc = 'INDEXER_ALLOCATION_SUMMARIES_MAX_TOTAL_REMOVED_DESC',
  IndexerAllocationSummariesMaxUpdateAtAsc = 'INDEXER_ALLOCATION_SUMMARIES_MAX_UPDATE_AT_ASC',
  IndexerAllocationSummariesMaxUpdateAtDesc = 'INDEXER_ALLOCATION_SUMMARIES_MAX_UPDATE_AT_DESC',
  IndexerAllocationSummariesMinBlockRangeAsc = 'INDEXER_ALLOCATION_SUMMARIES_MIN_BLOCK_RANGE_ASC',
  IndexerAllocationSummariesMinBlockRangeDesc = 'INDEXER_ALLOCATION_SUMMARIES_MIN_BLOCK_RANGE_DESC',
  IndexerAllocationSummariesMinCreateAtAsc = 'INDEXER_ALLOCATION_SUMMARIES_MIN_CREATE_AT_ASC',
  IndexerAllocationSummariesMinCreateAtDesc = 'INDEXER_ALLOCATION_SUMMARIES_MIN_CREATE_AT_DESC',
  IndexerAllocationSummariesMinDeploymentIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_MIN_DEPLOYMENT_ID_ASC',
  IndexerAllocationSummariesMinDeploymentIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_MIN_DEPLOYMENT_ID_DESC',
  IndexerAllocationSummariesMinIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_MIN_ID_ASC',
  IndexerAllocationSummariesMinIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_MIN_ID_DESC',
  IndexerAllocationSummariesMinIndexerIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_MIN_INDEXER_ID_ASC',
  IndexerAllocationSummariesMinIndexerIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_MIN_INDEXER_ID_DESC',
  IndexerAllocationSummariesMinProjectIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_MIN_PROJECT_ID_ASC',
  IndexerAllocationSummariesMinProjectIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_MIN_PROJECT_ID_DESC',
  IndexerAllocationSummariesMinTotalAddedAsc = 'INDEXER_ALLOCATION_SUMMARIES_MIN_TOTAL_ADDED_ASC',
  IndexerAllocationSummariesMinTotalAddedDesc = 'INDEXER_ALLOCATION_SUMMARIES_MIN_TOTAL_ADDED_DESC',
  IndexerAllocationSummariesMinTotalAmountAsc = 'INDEXER_ALLOCATION_SUMMARIES_MIN_TOTAL_AMOUNT_ASC',
  IndexerAllocationSummariesMinTotalAmountDesc = 'INDEXER_ALLOCATION_SUMMARIES_MIN_TOTAL_AMOUNT_DESC',
  IndexerAllocationSummariesMinTotalRemovedAsc = 'INDEXER_ALLOCATION_SUMMARIES_MIN_TOTAL_REMOVED_ASC',
  IndexerAllocationSummariesMinTotalRemovedDesc = 'INDEXER_ALLOCATION_SUMMARIES_MIN_TOTAL_REMOVED_DESC',
  IndexerAllocationSummariesMinUpdateAtAsc = 'INDEXER_ALLOCATION_SUMMARIES_MIN_UPDATE_AT_ASC',
  IndexerAllocationSummariesMinUpdateAtDesc = 'INDEXER_ALLOCATION_SUMMARIES_MIN_UPDATE_AT_DESC',
  IndexerAllocationSummariesStddevPopulationBlockRangeAsc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  IndexerAllocationSummariesStddevPopulationBlockRangeDesc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  IndexerAllocationSummariesStddevPopulationCreateAtAsc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_CREATE_AT_ASC',
  IndexerAllocationSummariesStddevPopulationCreateAtDesc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_CREATE_AT_DESC',
  IndexerAllocationSummariesStddevPopulationDeploymentIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_DEPLOYMENT_ID_ASC',
  IndexerAllocationSummariesStddevPopulationDeploymentIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_DEPLOYMENT_ID_DESC',
  IndexerAllocationSummariesStddevPopulationIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_ID_ASC',
  IndexerAllocationSummariesStddevPopulationIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_ID_DESC',
  IndexerAllocationSummariesStddevPopulationIndexerIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_INDEXER_ID_ASC',
  IndexerAllocationSummariesStddevPopulationIndexerIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_INDEXER_ID_DESC',
  IndexerAllocationSummariesStddevPopulationProjectIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_PROJECT_ID_ASC',
  IndexerAllocationSummariesStddevPopulationProjectIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_PROJECT_ID_DESC',
  IndexerAllocationSummariesStddevPopulationTotalAddedAsc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_TOTAL_ADDED_ASC',
  IndexerAllocationSummariesStddevPopulationTotalAddedDesc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_TOTAL_ADDED_DESC',
  IndexerAllocationSummariesStddevPopulationTotalAmountAsc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_TOTAL_AMOUNT_ASC',
  IndexerAllocationSummariesStddevPopulationTotalAmountDesc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_TOTAL_AMOUNT_DESC',
  IndexerAllocationSummariesStddevPopulationTotalRemovedAsc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_TOTAL_REMOVED_ASC',
  IndexerAllocationSummariesStddevPopulationTotalRemovedDesc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_TOTAL_REMOVED_DESC',
  IndexerAllocationSummariesStddevPopulationUpdateAtAsc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_UPDATE_AT_ASC',
  IndexerAllocationSummariesStddevPopulationUpdateAtDesc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_POPULATION_UPDATE_AT_DESC',
  IndexerAllocationSummariesStddevSampleBlockRangeAsc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  IndexerAllocationSummariesStddevSampleBlockRangeDesc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  IndexerAllocationSummariesStddevSampleCreateAtAsc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_CREATE_AT_ASC',
  IndexerAllocationSummariesStddevSampleCreateAtDesc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_CREATE_AT_DESC',
  IndexerAllocationSummariesStddevSampleDeploymentIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_DEPLOYMENT_ID_ASC',
  IndexerAllocationSummariesStddevSampleDeploymentIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_DEPLOYMENT_ID_DESC',
  IndexerAllocationSummariesStddevSampleIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_ID_ASC',
  IndexerAllocationSummariesStddevSampleIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_ID_DESC',
  IndexerAllocationSummariesStddevSampleIndexerIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_INDEXER_ID_ASC',
  IndexerAllocationSummariesStddevSampleIndexerIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_INDEXER_ID_DESC',
  IndexerAllocationSummariesStddevSampleProjectIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_PROJECT_ID_ASC',
  IndexerAllocationSummariesStddevSampleProjectIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_PROJECT_ID_DESC',
  IndexerAllocationSummariesStddevSampleTotalAddedAsc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_TOTAL_ADDED_ASC',
  IndexerAllocationSummariesStddevSampleTotalAddedDesc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_TOTAL_ADDED_DESC',
  IndexerAllocationSummariesStddevSampleTotalAmountAsc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_TOTAL_AMOUNT_ASC',
  IndexerAllocationSummariesStddevSampleTotalAmountDesc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_TOTAL_AMOUNT_DESC',
  IndexerAllocationSummariesStddevSampleTotalRemovedAsc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_TOTAL_REMOVED_ASC',
  IndexerAllocationSummariesStddevSampleTotalRemovedDesc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_TOTAL_REMOVED_DESC',
  IndexerAllocationSummariesStddevSampleUpdateAtAsc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_UPDATE_AT_ASC',
  IndexerAllocationSummariesStddevSampleUpdateAtDesc = 'INDEXER_ALLOCATION_SUMMARIES_STDDEV_SAMPLE_UPDATE_AT_DESC',
  IndexerAllocationSummariesSumBlockRangeAsc = 'INDEXER_ALLOCATION_SUMMARIES_SUM_BLOCK_RANGE_ASC',
  IndexerAllocationSummariesSumBlockRangeDesc = 'INDEXER_ALLOCATION_SUMMARIES_SUM_BLOCK_RANGE_DESC',
  IndexerAllocationSummariesSumCreateAtAsc = 'INDEXER_ALLOCATION_SUMMARIES_SUM_CREATE_AT_ASC',
  IndexerAllocationSummariesSumCreateAtDesc = 'INDEXER_ALLOCATION_SUMMARIES_SUM_CREATE_AT_DESC',
  IndexerAllocationSummariesSumDeploymentIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_SUM_DEPLOYMENT_ID_ASC',
  IndexerAllocationSummariesSumDeploymentIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_SUM_DEPLOYMENT_ID_DESC',
  IndexerAllocationSummariesSumIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_SUM_ID_ASC',
  IndexerAllocationSummariesSumIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_SUM_ID_DESC',
  IndexerAllocationSummariesSumIndexerIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_SUM_INDEXER_ID_ASC',
  IndexerAllocationSummariesSumIndexerIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_SUM_INDEXER_ID_DESC',
  IndexerAllocationSummariesSumProjectIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_SUM_PROJECT_ID_ASC',
  IndexerAllocationSummariesSumProjectIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_SUM_PROJECT_ID_DESC',
  IndexerAllocationSummariesSumTotalAddedAsc = 'INDEXER_ALLOCATION_SUMMARIES_SUM_TOTAL_ADDED_ASC',
  IndexerAllocationSummariesSumTotalAddedDesc = 'INDEXER_ALLOCATION_SUMMARIES_SUM_TOTAL_ADDED_DESC',
  IndexerAllocationSummariesSumTotalAmountAsc = 'INDEXER_ALLOCATION_SUMMARIES_SUM_TOTAL_AMOUNT_ASC',
  IndexerAllocationSummariesSumTotalAmountDesc = 'INDEXER_ALLOCATION_SUMMARIES_SUM_TOTAL_AMOUNT_DESC',
  IndexerAllocationSummariesSumTotalRemovedAsc = 'INDEXER_ALLOCATION_SUMMARIES_SUM_TOTAL_REMOVED_ASC',
  IndexerAllocationSummariesSumTotalRemovedDesc = 'INDEXER_ALLOCATION_SUMMARIES_SUM_TOTAL_REMOVED_DESC',
  IndexerAllocationSummariesSumUpdateAtAsc = 'INDEXER_ALLOCATION_SUMMARIES_SUM_UPDATE_AT_ASC',
  IndexerAllocationSummariesSumUpdateAtDesc = 'INDEXER_ALLOCATION_SUMMARIES_SUM_UPDATE_AT_DESC',
  IndexerAllocationSummariesVariancePopulationBlockRangeAsc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  IndexerAllocationSummariesVariancePopulationBlockRangeDesc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  IndexerAllocationSummariesVariancePopulationCreateAtAsc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_CREATE_AT_ASC',
  IndexerAllocationSummariesVariancePopulationCreateAtDesc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_CREATE_AT_DESC',
  IndexerAllocationSummariesVariancePopulationDeploymentIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_DEPLOYMENT_ID_ASC',
  IndexerAllocationSummariesVariancePopulationDeploymentIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_DEPLOYMENT_ID_DESC',
  IndexerAllocationSummariesVariancePopulationIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_ID_ASC',
  IndexerAllocationSummariesVariancePopulationIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_ID_DESC',
  IndexerAllocationSummariesVariancePopulationIndexerIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_INDEXER_ID_ASC',
  IndexerAllocationSummariesVariancePopulationIndexerIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_INDEXER_ID_DESC',
  IndexerAllocationSummariesVariancePopulationProjectIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_PROJECT_ID_ASC',
  IndexerAllocationSummariesVariancePopulationProjectIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_PROJECT_ID_DESC',
  IndexerAllocationSummariesVariancePopulationTotalAddedAsc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_TOTAL_ADDED_ASC',
  IndexerAllocationSummariesVariancePopulationTotalAddedDesc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_TOTAL_ADDED_DESC',
  IndexerAllocationSummariesVariancePopulationTotalAmountAsc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_TOTAL_AMOUNT_ASC',
  IndexerAllocationSummariesVariancePopulationTotalAmountDesc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_TOTAL_AMOUNT_DESC',
  IndexerAllocationSummariesVariancePopulationTotalRemovedAsc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_TOTAL_REMOVED_ASC',
  IndexerAllocationSummariesVariancePopulationTotalRemovedDesc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_TOTAL_REMOVED_DESC',
  IndexerAllocationSummariesVariancePopulationUpdateAtAsc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_UPDATE_AT_ASC',
  IndexerAllocationSummariesVariancePopulationUpdateAtDesc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_POPULATION_UPDATE_AT_DESC',
  IndexerAllocationSummariesVarianceSampleBlockRangeAsc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  IndexerAllocationSummariesVarianceSampleBlockRangeDesc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  IndexerAllocationSummariesVarianceSampleCreateAtAsc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_CREATE_AT_ASC',
  IndexerAllocationSummariesVarianceSampleCreateAtDesc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_CREATE_AT_DESC',
  IndexerAllocationSummariesVarianceSampleDeploymentIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_ASC',
  IndexerAllocationSummariesVarianceSampleDeploymentIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_DEPLOYMENT_ID_DESC',
  IndexerAllocationSummariesVarianceSampleIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_ID_ASC',
  IndexerAllocationSummariesVarianceSampleIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_ID_DESC',
  IndexerAllocationSummariesVarianceSampleIndexerIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  IndexerAllocationSummariesVarianceSampleIndexerIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  IndexerAllocationSummariesVarianceSampleProjectIdAsc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_PROJECT_ID_ASC',
  IndexerAllocationSummariesVarianceSampleProjectIdDesc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_PROJECT_ID_DESC',
  IndexerAllocationSummariesVarianceSampleTotalAddedAsc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_TOTAL_ADDED_ASC',
  IndexerAllocationSummariesVarianceSampleTotalAddedDesc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_TOTAL_ADDED_DESC',
  IndexerAllocationSummariesVarianceSampleTotalAmountAsc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_TOTAL_AMOUNT_ASC',
  IndexerAllocationSummariesVarianceSampleTotalAmountDesc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_TOTAL_AMOUNT_DESC',
  IndexerAllocationSummariesVarianceSampleTotalRemovedAsc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_TOTAL_REMOVED_ASC',
  IndexerAllocationSummariesVarianceSampleTotalRemovedDesc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_TOTAL_REMOVED_DESC',
  IndexerAllocationSummariesVarianceSampleUpdateAtAsc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_UPDATE_AT_ASC',
  IndexerAllocationSummariesVarianceSampleUpdateAtDesc = 'INDEXER_ALLOCATION_SUMMARIES_VARIANCE_SAMPLE_UPDATE_AT_DESC',
  LastEventAsc = 'LAST_EVENT_ASC',
  LastEventDesc = 'LAST_EVENT_DESC',
  MetadataAsc = 'METADATA_ASC',
  MetadataDesc = 'METADATA_DESC',
  Natural = 'NATURAL',
  OwnerAsc = 'OWNER_ASC',
  OwnerDesc = 'OWNER_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  TotalAllocationAsc = 'TOTAL_ALLOCATION_ASC',
  TotalAllocationDesc = 'TOTAL_ALLOCATION_DESC',
  TotalBoostAsc = 'TOTAL_BOOST_ASC',
  TotalBoostDesc = 'TOTAL_BOOST_DESC',
  TotalRewardAsc = 'TOTAL_REWARD_ASC',
  TotalRewardDesc = 'TOTAL_REWARD_DESC',
  TypeAsc = 'TYPE_ASC',
  TypeDesc = 'TYPE_DESC',
  UpdatedTimestampAsc = 'UPDATED_TIMESTAMP_ASC',
  UpdatedTimestampDesc = 'UPDATED_TIMESTAMP_DESC'
}

/** The root query type which gives access points into the data universe. */
export type Query = Node & {
  __typename?: 'Query';
  _metadata?: Maybe<_Metadata>;
  _metadatas?: Maybe<_Metadatas>;
  _poi?: Maybe<_Poi>;
  _poiByChainBlockHash?: Maybe<_Poi>;
  _poiByHash?: Maybe<_Poi>;
  /** Reads a single `_Poi` using its globally unique `ID`. */
  _poiByNodeId?: Maybe<_Poi>;
  _poiByParentHash?: Maybe<_Poi>;
  /** Reads and enables pagination through a set of `_Poi`. */
  _pois?: Maybe<_PoisConnection>;
  acceptedOffer?: Maybe<AcceptedOffer>;
  /** Reads a single `AcceptedOffer` using its globally unique `ID`. */
  acceptedOfferByNodeId?: Maybe<AcceptedOffer>;
  /** Reads and enables pagination through a set of `AcceptedOffer`. */
  acceptedOffers?: Maybe<AcceptedOffersConnection>;
  airdrop?: Maybe<Airdrop>;
  airdropAmount?: Maybe<AirdropAmount>;
  /** Reads a single `AirdropAmount` using its globally unique `ID`. */
  airdropAmountByNodeId?: Maybe<AirdropAmount>;
  /** Reads and enables pagination through a set of `AirdropAmount`. */
  airdropAmounts?: Maybe<AirdropAmountsConnection>;
  /** Reads a single `Airdrop` using its globally unique `ID`. */
  airdropByNodeId?: Maybe<Airdrop>;
  airdropUser?: Maybe<AirdropUser>;
  /** Reads a single `AirdropUser` using its globally unique `ID`. */
  airdropUserByNodeId?: Maybe<AirdropUser>;
  /** Reads and enables pagination through a set of `AirdropUser`. */
  airdropUsers?: Maybe<AirdropUsersConnection>;
  /** Reads and enables pagination through a set of `Airdrop`. */
  airdrops?: Maybe<AirdropsConnection>;
  cach?: Maybe<Cach>;
  /** Reads a single `Cach` using its globally unique `ID`. */
  cachByNodeId?: Maybe<Cach>;
  /** Reads and enables pagination through a set of `Cach`. */
  caches?: Maybe<CachesConnection>;
  consumerController?: Maybe<ConsumerController>;
  /** Reads a single `ConsumerController` using its globally unique `ID`. */
  consumerControllerByNodeId?: Maybe<ConsumerController>;
  /** Reads and enables pagination through a set of `ConsumerController`. */
  consumerControllers?: Maybe<ConsumerControllersConnection>;
  consumerQueryReward?: Maybe<ConsumerQueryReward>;
  /** Reads a single `ConsumerQueryReward` using its globally unique `ID`. */
  consumerQueryRewardByNodeId?: Maybe<ConsumerQueryReward>;
  /** Reads and enables pagination through a set of `ConsumerQueryRewardSummary`. */
  consumerQueryRewardSummaries?: Maybe<ConsumerQueryRewardSummariesConnection>;
  consumerQueryRewardSummary?: Maybe<ConsumerQueryRewardSummary>;
  /** Reads a single `ConsumerQueryRewardSummary` using its globally unique `ID`. */
  consumerQueryRewardSummaryByNodeId?: Maybe<ConsumerQueryRewardSummary>;
  /** Reads and enables pagination through a set of `ConsumerQueryReward`. */
  consumerQueryRewards?: Maybe<ConsumerQueryRewardsConnection>;
  controller?: Maybe<Controller>;
  /** Reads a single `Controller` using its globally unique `ID`. */
  controllerByNodeId?: Maybe<Controller>;
  /** Reads and enables pagination through a set of `Controller`. */
  controllers?: Maybe<ControllersConnection>;
  delegation?: Maybe<Delegation>;
  /** Reads a single `Delegation` using its globally unique `ID`. */
  delegationByNodeId?: Maybe<Delegation>;
  /** Reads and enables pagination through a set of `Delegation`. */
  delegations?: Maybe<DelegationsConnection>;
  delegator?: Maybe<Delegator>;
  /** Reads a single `Delegator` using its globally unique `ID`. */
  delegatorByNodeId?: Maybe<Delegator>;
  /** Reads and enables pagination through a set of `Delegator`. */
  delegators?: Maybe<DelegatorsConnection>;
  deployment?: Maybe<Deployment>;
  deploymentBooster?: Maybe<DeploymentBooster>;
  /** Reads a single `DeploymentBooster` using its globally unique `ID`. */
  deploymentBoosterByNodeId?: Maybe<DeploymentBooster>;
  /** Reads and enables pagination through a set of `DeploymentBoosterSummary`. */
  deploymentBoosterSummaries?: Maybe<DeploymentBoosterSummariesConnection>;
  deploymentBoosterSummary?: Maybe<DeploymentBoosterSummary>;
  /** Reads a single `DeploymentBoosterSummary` using its globally unique `ID`. */
  deploymentBoosterSummaryByNodeId?: Maybe<DeploymentBoosterSummary>;
  /** Reads and enables pagination through a set of `DeploymentBooster`. */
  deploymentBoosters?: Maybe<DeploymentBoostersConnection>;
  /** Reads a single `Deployment` using its globally unique `ID`. */
  deploymentByNodeId?: Maybe<Deployment>;
  /** Reads and enables pagination through a set of `Deployment`. */
  deployments?: Maybe<DeploymentsConnection>;
  dispute?: Maybe<Dispute>;
  /** Reads a single `Dispute` using its globally unique `ID`. */
  disputeByNodeId?: Maybe<Dispute>;
  /** Reads and enables pagination through a set of `Dispute`. */
  disputes?: Maybe<DisputesConnection>;
  era?: Maybe<Era>;
  /** Reads a single `Era` using its globally unique `ID`. */
  eraByNodeId?: Maybe<Era>;
  /** Reads and enables pagination through a set of `EraDelegatorApy`. */
  eraDelegatorApies?: Maybe<EraDelegatorApiesConnection>;
  eraDelegatorApy?: Maybe<EraDelegatorApy>;
  /** Reads a single `EraDelegatorApy` using its globally unique `ID`. */
  eraDelegatorApyByNodeId?: Maybe<EraDelegatorApy>;
  eraDelegatorIndexer?: Maybe<EraDelegatorIndexer>;
  /** Reads and enables pagination through a set of `EraDelegatorIndexerApy`. */
  eraDelegatorIndexerApies?: Maybe<EraDelegatorIndexerApiesConnection>;
  eraDelegatorIndexerApy?: Maybe<EraDelegatorIndexerApy>;
  /** Reads a single `EraDelegatorIndexerApy` using its globally unique `ID`. */
  eraDelegatorIndexerApyByNodeId?: Maybe<EraDelegatorIndexerApy>;
  /** Reads a single `EraDelegatorIndexer` using its globally unique `ID`. */
  eraDelegatorIndexerByNodeId?: Maybe<EraDelegatorIndexer>;
  /** Reads and enables pagination through a set of `EraDelegatorIndexer`. */
  eraDelegatorIndexers?: Maybe<EraDelegatorIndexersConnection>;
  eraDeploymentReward?: Maybe<EraDeploymentReward>;
  /** Reads a single `EraDeploymentReward` using its globally unique `ID`. */
  eraDeploymentRewardByNodeId?: Maybe<EraDeploymentReward>;
  /** Reads and enables pagination through a set of `EraDeploymentReward`. */
  eraDeploymentRewards?: Maybe<EraDeploymentRewardsConnection>;
  /** Reads and enables pagination through a set of `EraIndexerApy`. */
  eraIndexerApies?: Maybe<EraIndexerApiesConnection>;
  eraIndexerApy?: Maybe<EraIndexerApy>;
  /** Reads a single `EraIndexerApy` using its globally unique `ID`. */
  eraIndexerApyByNodeId?: Maybe<EraIndexerApy>;
  eraIndexerDelegator?: Maybe<EraIndexerDelegator>;
  /** Reads a single `EraIndexerDelegator` using its globally unique `ID`. */
  eraIndexerDelegatorByNodeId?: Maybe<EraIndexerDelegator>;
  /** Reads and enables pagination through a set of `EraIndexerDelegator`. */
  eraIndexerDelegators?: Maybe<EraIndexerDelegatorsConnection>;
  /** Reads and enables pagination through a set of `EraIndexerDeploymentApy`. */
  eraIndexerDeploymentApies?: Maybe<EraIndexerDeploymentApiesConnection>;
  eraIndexerDeploymentApy?: Maybe<EraIndexerDeploymentApy>;
  /** Reads a single `EraIndexerDeploymentApy` using its globally unique `ID`. */
  eraIndexerDeploymentApyByNodeId?: Maybe<EraIndexerDeploymentApy>;
  eraReward?: Maybe<EraReward>;
  /** Reads a single `EraReward` using its globally unique `ID`. */
  eraRewardByNodeId?: Maybe<EraReward>;
  eraRewardClaimed?: Maybe<EraRewardClaimed>;
  /** Reads a single `EraRewardClaimed` using its globally unique `ID`. */
  eraRewardClaimedByNodeId?: Maybe<EraRewardClaimed>;
  /** Reads and enables pagination through a set of `EraRewardClaimed`. */
  eraRewardClaimeds?: Maybe<EraRewardClaimedsConnection>;
  /** Reads and enables pagination through a set of `EraReward`. */
  eraRewards?: Maybe<EraRewardsConnection>;
  eraStake?: Maybe<EraStake>;
  /** Reads a single `EraStake` using its globally unique `ID`. */
  eraStakeByNodeId?: Maybe<EraStake>;
  eraStakeUpdate?: Maybe<EraStakeUpdate>;
  /** Reads a single `EraStakeUpdate` using its globally unique `ID`. */
  eraStakeUpdateByNodeId?: Maybe<EraStakeUpdate>;
  /** Reads and enables pagination through a set of `EraStakeUpdate`. */
  eraStakeUpdates?: Maybe<EraStakeUpdatesConnection>;
  /** Reads and enables pagination through a set of `EraStake`. */
  eraStakes?: Maybe<EraStakesConnection>;
  /** Reads and enables pagination through a set of `Era`. */
  eras?: Maybe<ErasConnection>;
  exception?: Maybe<Exception>;
  /** Reads a single `Exception` using its globally unique `ID`. */
  exceptionByNodeId?: Maybe<Exception>;
  /** Reads and enables pagination through a set of `Exception`. */
  exceptions?: Maybe<ExceptionsConnection>;
  indexer?: Maybe<Indexer>;
  indexerAllocation?: Maybe<IndexerAllocation>;
  /** Reads a single `IndexerAllocation` using its globally unique `ID`. */
  indexerAllocationByNodeId?: Maybe<IndexerAllocation>;
  indexerAllocationOverflow?: Maybe<IndexerAllocationOverflow>;
  /** Reads a single `IndexerAllocationOverflow` using its globally unique `ID`. */
  indexerAllocationOverflowByNodeId?: Maybe<IndexerAllocationOverflow>;
  /** Reads and enables pagination through a set of `IndexerAllocationOverflow`. */
  indexerAllocationOverflows?: Maybe<IndexerAllocationOverflowsConnection>;
  indexerAllocationReward?: Maybe<IndexerAllocationReward>;
  /** Reads a single `IndexerAllocationReward` using its globally unique `ID`. */
  indexerAllocationRewardByNodeId?: Maybe<IndexerAllocationReward>;
  /** Reads and enables pagination through a set of `IndexerAllocationRewardSummary`. */
  indexerAllocationRewardSummaries?: Maybe<IndexerAllocationRewardSummariesConnection>;
  indexerAllocationRewardSummary?: Maybe<IndexerAllocationRewardSummary>;
  /** Reads a single `IndexerAllocationRewardSummary` using its globally unique `ID`. */
  indexerAllocationRewardSummaryByNodeId?: Maybe<IndexerAllocationRewardSummary>;
  /** Reads and enables pagination through a set of `IndexerAllocationReward`. */
  indexerAllocationRewards?: Maybe<IndexerAllocationRewardsConnection>;
  /** Reads and enables pagination through a set of `IndexerAllocationSummary`. */
  indexerAllocationSummaries?: Maybe<IndexerAllocationSummariesConnection>;
  indexerAllocationSummary?: Maybe<IndexerAllocationSummary>;
  /** Reads a single `IndexerAllocationSummary` using its globally unique `ID`. */
  indexerAllocationSummaryByNodeId?: Maybe<IndexerAllocationSummary>;
  /** Reads and enables pagination through a set of `IndexerAllocation`. */
  indexerAllocations?: Maybe<IndexerAllocationsConnection>;
  /** Reads and enables pagination through a set of `IndexerApySummary`. */
  indexerApySummaries?: Maybe<IndexerApySummariesConnection>;
  indexerApySummary?: Maybe<IndexerApySummary>;
  /** Reads a single `IndexerApySummary` using its globally unique `ID`. */
  indexerApySummaryByNodeId?: Maybe<IndexerApySummary>;
  /** Reads a single `Indexer` using its globally unique `ID`. */
  indexerByNodeId?: Maybe<Indexer>;
  indexerCommissionRate?: Maybe<IndexerCommissionRate>;
  /** Reads a single `IndexerCommissionRate` using its globally unique `ID`. */
  indexerCommissionRateByNodeId?: Maybe<IndexerCommissionRate>;
  /** Reads and enables pagination through a set of `IndexerCommissionRate`. */
  indexerCommissionRates?: Maybe<IndexerCommissionRatesConnection>;
  indexerDeployment?: Maybe<IndexerDeployment>;
  /** Reads a single `IndexerDeployment` using its globally unique `ID`. */
  indexerDeploymentByNodeId?: Maybe<IndexerDeployment>;
  /** Reads and enables pagination through a set of `IndexerDeployment`. */
  indexerDeployments?: Maybe<IndexerDeploymentsConnection>;
  indexerEraDeploymentReward?: Maybe<IndexerEraDeploymentReward>;
  /** Reads a single `IndexerEraDeploymentReward` using its globally unique `ID`. */
  indexerEraDeploymentRewardByNodeId?: Maybe<IndexerEraDeploymentReward>;
  /** Reads and enables pagination through a set of `IndexerEraDeploymentReward`. */
  indexerEraDeploymentRewards?: Maybe<IndexerEraDeploymentRewardsConnection>;
  /** Reads and enables pagination through a set of `IndexerLaborHistory`. */
  indexerLaborHistories?: Maybe<IndexerLaborHistoriesConnection>;
  indexerLaborHistory?: Maybe<IndexerLaborHistory>;
  /** Reads a single `IndexerLaborHistory` using its globally unique `ID`. */
  indexerLaborHistoryByNodeId?: Maybe<IndexerLaborHistory>;
  indexerLatestAllocationOverflow?: Maybe<IndexerLatestAllocationOverflow>;
  /** Reads a single `IndexerLatestAllocationOverflow` using its globally unique `ID`. */
  indexerLatestAllocationOverflowByNodeId?: Maybe<IndexerLatestAllocationOverflow>;
  /** Reads and enables pagination through a set of `IndexerLatestAllocationOverflow`. */
  indexerLatestAllocationOverflows?: Maybe<IndexerLatestAllocationOverflowsConnection>;
  indexerMissedLabor?: Maybe<IndexerMissedLabor>;
  /** Reads a single `IndexerMissedLabor` using its globally unique `ID`. */
  indexerMissedLaborByNodeId?: Maybe<IndexerMissedLabor>;
  /** Reads and enables pagination through a set of `IndexerMissedLabor`. */
  indexerMissedLabors?: Maybe<IndexerMissedLaborsConnection>;
  indexerReward?: Maybe<IndexerReward>;
  /** Reads a single `IndexerReward` using its globally unique `ID`. */
  indexerRewardByNodeId?: Maybe<IndexerReward>;
  /** Reads and enables pagination through a set of `IndexerReward`. */
  indexerRewards?: Maybe<IndexerRewardsConnection>;
  indexerStake?: Maybe<IndexerStake>;
  /** Reads a single `IndexerStake` using its globally unique `ID`. */
  indexerStakeByNodeId?: Maybe<IndexerStake>;
  /** Reads and enables pagination through a set of `IndexerStakeSummary`. */
  indexerStakeSummaries?: Maybe<IndexerStakeSummariesConnection>;
  indexerStakeSummary?: Maybe<IndexerStakeSummary>;
  /** Reads a single `IndexerStakeSummary` using its globally unique `ID`. */
  indexerStakeSummaryByNodeId?: Maybe<IndexerStakeSummary>;
  indexerStakeWeight?: Maybe<IndexerStakeWeight>;
  /** Reads a single `IndexerStakeWeight` using its globally unique `ID`. */
  indexerStakeWeightByNodeId?: Maybe<IndexerStakeWeight>;
  /** Reads and enables pagination through a set of `IndexerStakeWeight`. */
  indexerStakeWeights?: Maybe<IndexerStakeWeightsConnection>;
  /** Reads and enables pagination through a set of `IndexerStake`. */
  indexerStakes?: Maybe<IndexerStakesConnection>;
  /** Reads and enables pagination through a set of `Indexer`. */
  indexers?: Maybe<IndexersConnection>;
  /** Fetches an object given its globally unique `ID`. */
  node?: Maybe<Node>;
  /** The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`. */
  nodeId: Scalars['ID']['output'];
  offer?: Maybe<Offer>;
  /** Reads a single `Offer` using its globally unique `ID`. */
  offerByNodeId?: Maybe<Offer>;
  /** Reads and enables pagination through a set of `Offer`. */
  offers?: Maybe<OffersConnection>;
  order?: Maybe<Order>;
  /** Reads a single `Order` using its globally unique `ID`. */
  orderByNodeId?: Maybe<Order>;
  /** Reads and enables pagination through a set of `Order`. */
  orders?: Maybe<OrdersConnection>;
  plan?: Maybe<Plan>;
  /** Reads a single `Plan` using its globally unique `ID`. */
  planByNodeId?: Maybe<Plan>;
  planTemplate?: Maybe<PlanTemplate>;
  /** Reads a single `PlanTemplate` using its globally unique `ID`. */
  planTemplateByNodeId?: Maybe<PlanTemplate>;
  /** Reads and enables pagination through a set of `PlanTemplate`. */
  planTemplates?: Maybe<PlanTemplatesConnection>;
  /** Reads and enables pagination through a set of `Plan`. */
  plans?: Maybe<PlansConnection>;
  priceOracle?: Maybe<PriceOracle>;
  /** Reads a single `PriceOracle` using its globally unique `ID`. */
  priceOracleByNodeId?: Maybe<PriceOracle>;
  /** Reads and enables pagination through a set of `PriceOracle`. */
  priceOracles?: Maybe<PriceOraclesConnection>;
  project?: Maybe<Project>;
  /** Reads a single `Project` using its globally unique `ID`. */
  projectByNodeId?: Maybe<Project>;
  /** Reads and enables pagination through a set of `Project`. */
  projects?: Maybe<ProjectsConnection>;
  /**
   * Exposes the root query type nested one level down. This is helpful for Relay 1
   * which can only query top level fields if they are in a particular form.
   */
  query: Query;
  reward?: Maybe<Reward>;
  /** Reads a single `Reward` using its globally unique `ID`. */
  rewardByNodeId?: Maybe<Reward>;
  /** Reads and enables pagination through a set of `Reward`. */
  rewards?: Maybe<RewardsConnection>;
  serviceAgreement?: Maybe<ServiceAgreement>;
  /** Reads a single `ServiceAgreement` using its globally unique `ID`. */
  serviceAgreementByNodeId?: Maybe<ServiceAgreement>;
  /** Reads and enables pagination through a set of `ServiceAgreement`. */
  serviceAgreements?: Maybe<ServiceAgreementsConnection>;
  sqtoken?: Maybe<Sqtoken>;
  /** Reads a single `Sqtoken` using its globally unique `ID`. */
  sqtokenByNodeId?: Maybe<Sqtoken>;
  /** Reads and enables pagination through a set of `Sqtoken`. */
  sqtokens?: Maybe<SqtokensConnection>;
  stateChannel?: Maybe<StateChannel>;
  /** Reads a single `StateChannel` using its globally unique `ID`. */
  stateChannelByNodeId?: Maybe<StateChannel>;
  /** Reads and enables pagination through a set of `StateChannel`. */
  stateChannels?: Maybe<StateChannelsConnection>;
  tokenHolder?: Maybe<TokenHolder>;
  /** Reads a single `TokenHolder` using its globally unique `ID`. */
  tokenHolderByNodeId?: Maybe<TokenHolder>;
  /** Reads and enables pagination through a set of `TokenHolder`. */
  tokenHolders?: Maybe<TokenHoldersConnection>;
  totalLock?: Maybe<TotalLock>;
  /** Reads a single `TotalLock` using its globally unique `ID`. */
  totalLockByNodeId?: Maybe<TotalLock>;
  /** Reads and enables pagination through a set of `TotalLock`. */
  totalLocks?: Maybe<TotalLocksConnection>;
  transfer?: Maybe<Transfer>;
  /** Reads a single `Transfer` using its globally unique `ID`. */
  transferByNodeId?: Maybe<Transfer>;
  /** Reads and enables pagination through a set of `Transfer`. */
  transfers?: Maybe<TransfersConnection>;
  unclaimedReward?: Maybe<UnclaimedReward>;
  /** Reads a single `UnclaimedReward` using its globally unique `ID`. */
  unclaimedRewardByNodeId?: Maybe<UnclaimedReward>;
  /** Reads and enables pagination through a set of `UnclaimedReward`. */
  unclaimedRewards?: Maybe<UnclaimedRewardsConnection>;
  withdraw?: Maybe<Withdraw>;
  /** Reads a single `Withdraw` using its globally unique `ID`. */
  withdrawByNodeId?: Maybe<Withdraw>;
  withdrawl?: Maybe<Withdrawl>;
  /** Reads a single `Withdrawl` using its globally unique `ID`. */
  withdrawlByNodeId?: Maybe<Withdrawl>;
  /** Reads and enables pagination through a set of `Withdrawl`. */
  withdrawls?: Maybe<WithdrawlsConnection>;
  /** Reads and enables pagination through a set of `Withdraw`. */
  withdraws?: Maybe<WithdrawsConnection>;
};


/** The root query type which gives access points into the data universe. */
export type Query_MetadataArgs = {
  chainId?: InputMaybe<Scalars['String']['input']>;
};


/** The root query type which gives access points into the data universe. */
export type Query_MetadatasArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
};


/** The root query type which gives access points into the data universe. */
export type Query_PoiArgs = {
  id: Scalars['Int']['input'];
};


/** The root query type which gives access points into the data universe. */
export type Query_PoiByChainBlockHashArgs = {
  chainBlockHash: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type Query_PoiByHashArgs = {
  hash: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type Query_PoiByNodeIdArgs = {
  distinct?: InputMaybe<Array<InputMaybe<_Poi_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type Query_PoiByParentHashArgs = {
  parentHash: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type Query_PoisArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<_Poi_Distinct_Enum>>>;
  filter?: InputMaybe<_PoiFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<_PoisOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


/** The root query type which gives access points into the data universe. */
export type QueryAcceptedOfferArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryAcceptedOfferByNodeIdArgs = {
  distinct?: InputMaybe<Array<InputMaybe<Accepted_Offers_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryAcceptedOffersArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Accepted_Offers_Distinct_Enum>>>;
  filter?: InputMaybe<AcceptedOfferFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<AcceptedOffersOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


/** The root query type which gives access points into the data universe. */
export type QueryAirdropArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryAirdropAmountArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryAirdropAmountByNodeIdArgs = {
  distinct?: InputMaybe<Array<InputMaybe<Airdrop_Amounts_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryAirdropAmountsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Airdrop_Amounts_Distinct_Enum>>>;
  filter?: InputMaybe<AirdropAmountFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<AirdropAmountsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


/** The root query type which gives access points into the data universe. */
export type QueryAirdropByNodeIdArgs = {
  distinct?: InputMaybe<Array<InputMaybe<Airdrops_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryAirdropUserArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryAirdropUserByNodeIdArgs = {
  distinct?: InputMaybe<Array<InputMaybe<Airdrop_Users_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryAirdropUsersArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Airdrop_Users_Distinct_Enum>>>;
  filter?: InputMaybe<AirdropUserFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<AirdropUsersOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


/** The root query type which gives access points into the data universe. */
export type QueryAirdropsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Airdrops_Distinct_Enum>>>;
  filter?: InputMaybe<AirdropFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<AirdropsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


/** The root query type which gives access points into the data universe. */
export type QueryCachArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryCachByNodeIdArgs = {
  distinct?: InputMaybe<Array<InputMaybe<Caches_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryCachesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Caches_Distinct_Enum>>>;
  filter?: InputMaybe<CachFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<CachesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


/** The root query type which gives access points into the data universe. */
export type QueryConsumerControllerArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryConsumerControllerByNodeIdArgs = {
  distinct?: InputMaybe<Array<InputMaybe<Consumer_Controllers_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryConsumerControllersArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Consumer_Controllers_Distinct_Enum>>>;
  filter?: InputMaybe<ConsumerControllerFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ConsumerControllersOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


/** The root query type which gives access points into the data universe. */
export type QueryConsumerQueryRewardArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryConsumerQueryRewardByNodeIdArgs = {
  distinct?: InputMaybe<Array<InputMaybe<Consumer_Query_Rewards_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryConsumerQueryRewardSummariesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Consumer_Query_Reward_Summaries_Distinct_Enum>>>;
  filter?: InputMaybe<ConsumerQueryRewardSummaryFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ConsumerQueryRewardSummariesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


/** The root query type which gives access points into the data universe. */
export type QueryConsumerQueryRewardSummaryArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryConsumerQueryRewardSummaryByNodeIdArgs = {
  distinct?: InputMaybe<Array<InputMaybe<Consumer_Query_Reward_Summaries_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryConsumerQueryRewardsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Consumer_Query_Rewards_Distinct_Enum>>>;
  filter?: InputMaybe<ConsumerQueryRewardFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ConsumerQueryRewardsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


/** The root query type which gives access points into the data universe. */
export type QueryControllerArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryControllerByNodeIdArgs = {
  distinct?: InputMaybe<Array<InputMaybe<Controllers_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryControllersArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Controllers_Distinct_Enum>>>;
  filter?: InputMaybe<ControllerFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ControllersOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


/** The root query type which gives access points into the data universe. */
export type QueryDelegationArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryDelegationByNodeIdArgs = {
  distinct?: InputMaybe<Array<InputMaybe<Delegations_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryDelegationsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Delegations_Distinct_Enum>>>;
  filter?: InputMaybe<DelegationFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<DelegationsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


/** The root query type which gives access points into the data universe. */
export type QueryDelegatorArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryDelegatorByNodeIdArgs = {
  distinct?: InputMaybe<Array<InputMaybe<Delegators_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryDelegatorsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Delegators_Distinct_Enum>>>;
  filter?: InputMaybe<DelegatorFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<DelegatorsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


/** The root query type which gives access points into the data universe. */
export type QueryDeploymentArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryDeploymentBoosterArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryDeploymentBoosterByNodeIdArgs = {
  distinct?: InputMaybe<Array<InputMaybe<Deployment_Boosters_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryDeploymentBoosterSummariesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Deployment_Booster_Summaries_Distinct_Enum>>>;
  filter?: InputMaybe<DeploymentBoosterSummaryFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<DeploymentBoosterSummariesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


/** The root query type which gives access points into the data universe. */
export type QueryDeploymentBoosterSummaryArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryDeploymentBoosterSummaryByNodeIdArgs = {
  distinct?: InputMaybe<Array<InputMaybe<Deployment_Booster_Summaries_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryDeploymentBoostersArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Deployment_Boosters_Distinct_Enum>>>;
  filter?: InputMaybe<DeploymentBoosterFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<DeploymentBoostersOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


/** The root query type which gives access points into the data universe. */
export type QueryDeploymentByNodeIdArgs = {
  distinct?: InputMaybe<Array<InputMaybe<Deployments_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryDeploymentsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Deployments_Distinct_Enum>>>;
  filter?: InputMaybe<DeploymentFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<DeploymentsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


/** The root query type which gives access points into the data universe. */
export type QueryDisputeArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryDisputeByNodeIdArgs = {
  distinct?: InputMaybe<Array<InputMaybe<Disputes_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryDisputesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Disputes_Distinct_Enum>>>;
  filter?: InputMaybe<DisputeFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<DisputesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


/** The root query type which gives access points into the data universe. */
export type QueryEraArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryEraByNodeIdArgs = {
  distinct?: InputMaybe<Array<InputMaybe<Eras_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryEraDelegatorApiesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Era_Delegator_Apies_Distinct_Enum>>>;
  filter?: InputMaybe<EraDelegatorApyFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<EraDelegatorApiesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


/** The root query type which gives access points into the data universe. */
export type QueryEraDelegatorApyArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryEraDelegatorApyByNodeIdArgs = {
  distinct?: InputMaybe<Array<InputMaybe<Era_Delegator_Apies_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryEraDelegatorIndexerArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryEraDelegatorIndexerApiesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Era_Delegator_Indexer_Apies_Distinct_Enum>>>;
  filter?: InputMaybe<EraDelegatorIndexerApyFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<EraDelegatorIndexerApiesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


/** The root query type which gives access points into the data universe. */
export type QueryEraDelegatorIndexerApyArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryEraDelegatorIndexerApyByNodeIdArgs = {
  distinct?: InputMaybe<Array<InputMaybe<Era_Delegator_Indexer_Apies_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryEraDelegatorIndexerByNodeIdArgs = {
  distinct?: InputMaybe<Array<InputMaybe<Era_Delegator_Indexers_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryEraDelegatorIndexersArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Era_Delegator_Indexers_Distinct_Enum>>>;
  filter?: InputMaybe<EraDelegatorIndexerFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<EraDelegatorIndexersOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


/** The root query type which gives access points into the data universe. */
export type QueryEraDeploymentRewardArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryEraDeploymentRewardByNodeIdArgs = {
  distinct?: InputMaybe<Array<InputMaybe<Era_Deployment_Rewards_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryEraDeploymentRewardsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Era_Deployment_Rewards_Distinct_Enum>>>;
  filter?: InputMaybe<EraDeploymentRewardFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<EraDeploymentRewardsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


/** The root query type which gives access points into the data universe. */
export type QueryEraIndexerApiesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Era_Indexer_Apies_Distinct_Enum>>>;
  filter?: InputMaybe<EraIndexerApyFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<EraIndexerApiesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


/** The root query type which gives access points into the data universe. */
export type QueryEraIndexerApyArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryEraIndexerApyByNodeIdArgs = {
  distinct?: InputMaybe<Array<InputMaybe<Era_Indexer_Apies_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryEraIndexerDelegatorArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryEraIndexerDelegatorByNodeIdArgs = {
  distinct?: InputMaybe<Array<InputMaybe<Era_Indexer_Delegators_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryEraIndexerDelegatorsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Era_Indexer_Delegators_Distinct_Enum>>>;
  filter?: InputMaybe<EraIndexerDelegatorFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<EraIndexerDelegatorsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


/** The root query type which gives access points into the data universe. */
export type QueryEraIndexerDeploymentApiesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Era_Indexer_Deployment_Apies_Distinct_Enum>>>;
  filter?: InputMaybe<EraIndexerDeploymentApyFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<EraIndexerDeploymentApiesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


/** The root query type which gives access points into the data universe. */
export type QueryEraIndexerDeploymentApyArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryEraIndexerDeploymentApyByNodeIdArgs = {
  distinct?: InputMaybe<Array<InputMaybe<Era_Indexer_Deployment_Apies_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryEraRewardArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryEraRewardByNodeIdArgs = {
  distinct?: InputMaybe<Array<InputMaybe<Era_Rewards_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryEraRewardClaimedArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryEraRewardClaimedByNodeIdArgs = {
  distinct?: InputMaybe<Array<InputMaybe<Era_Reward_Claimeds_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryEraRewardClaimedsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Era_Reward_Claimeds_Distinct_Enum>>>;
  filter?: InputMaybe<EraRewardClaimedFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<EraRewardClaimedsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


/** The root query type which gives access points into the data universe. */
export type QueryEraRewardsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Era_Rewards_Distinct_Enum>>>;
  filter?: InputMaybe<EraRewardFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<EraRewardsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


/** The root query type which gives access points into the data universe. */
export type QueryEraStakeArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryEraStakeByNodeIdArgs = {
  distinct?: InputMaybe<Array<InputMaybe<Era_Stakes_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryEraStakeUpdateArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryEraStakeUpdateByNodeIdArgs = {
  distinct?: InputMaybe<Array<InputMaybe<Era_Stake_Updates_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryEraStakeUpdatesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Era_Stake_Updates_Distinct_Enum>>>;
  filter?: InputMaybe<EraStakeUpdateFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<EraStakeUpdatesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


/** The root query type which gives access points into the data universe. */
export type QueryEraStakesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Era_Stakes_Distinct_Enum>>>;
  filter?: InputMaybe<EraStakeFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<EraStakesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


/** The root query type which gives access points into the data universe. */
export type QueryErasArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Eras_Distinct_Enum>>>;
  filter?: InputMaybe<EraFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ErasOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


/** The root query type which gives access points into the data universe. */
export type QueryExceptionArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryExceptionByNodeIdArgs = {
  distinct?: InputMaybe<Array<InputMaybe<Exceptions_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryExceptionsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Exceptions_Distinct_Enum>>>;
  filter?: InputMaybe<ExceptionFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ExceptionsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


/** The root query type which gives access points into the data universe. */
export type QueryIndexerArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryIndexerAllocationArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryIndexerAllocationByNodeIdArgs = {
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Allocations_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryIndexerAllocationOverflowArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryIndexerAllocationOverflowByNodeIdArgs = {
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Allocation_Overflows_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryIndexerAllocationOverflowsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Allocation_Overflows_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerAllocationOverflowFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexerAllocationOverflowsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


/** The root query type which gives access points into the data universe. */
export type QueryIndexerAllocationRewardArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryIndexerAllocationRewardByNodeIdArgs = {
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Allocation_Rewards_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryIndexerAllocationRewardSummariesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Allocation_Reward_Summaries_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerAllocationRewardSummaryFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexerAllocationRewardSummariesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


/** The root query type which gives access points into the data universe. */
export type QueryIndexerAllocationRewardSummaryArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryIndexerAllocationRewardSummaryByNodeIdArgs = {
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Allocation_Reward_Summaries_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryIndexerAllocationRewardsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Allocation_Rewards_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerAllocationRewardFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexerAllocationRewardsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


/** The root query type which gives access points into the data universe. */
export type QueryIndexerAllocationSummariesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Allocation_Summaries_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerAllocationSummaryFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexerAllocationSummariesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


/** The root query type which gives access points into the data universe. */
export type QueryIndexerAllocationSummaryArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryIndexerAllocationSummaryByNodeIdArgs = {
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Allocation_Summaries_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryIndexerAllocationsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Allocations_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerAllocationFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexerAllocationsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


/** The root query type which gives access points into the data universe. */
export type QueryIndexerApySummariesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Apy_Summaries_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerApySummaryFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexerApySummariesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


/** The root query type which gives access points into the data universe. */
export type QueryIndexerApySummaryArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryIndexerApySummaryByNodeIdArgs = {
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Apy_Summaries_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryIndexerByNodeIdArgs = {
  distinct?: InputMaybe<Array<InputMaybe<Indexers_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryIndexerCommissionRateArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryIndexerCommissionRateByNodeIdArgs = {
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Commission_Rates_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryIndexerCommissionRatesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Commission_Rates_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerCommissionRateFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexerCommissionRatesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


/** The root query type which gives access points into the data universe. */
export type QueryIndexerDeploymentArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryIndexerDeploymentByNodeIdArgs = {
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Deployments_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryIndexerDeploymentsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Deployments_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerDeploymentFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexerDeploymentsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


/** The root query type which gives access points into the data universe. */
export type QueryIndexerEraDeploymentRewardArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryIndexerEraDeploymentRewardByNodeIdArgs = {
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Era_Deployment_Rewards_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryIndexerEraDeploymentRewardsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Era_Deployment_Rewards_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerEraDeploymentRewardFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexerEraDeploymentRewardsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


/** The root query type which gives access points into the data universe. */
export type QueryIndexerLaborHistoriesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Labor_Histories_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerLaborHistoryFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexerLaborHistoriesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


/** The root query type which gives access points into the data universe. */
export type QueryIndexerLaborHistoryArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryIndexerLaborHistoryByNodeIdArgs = {
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Labor_Histories_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryIndexerLatestAllocationOverflowArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryIndexerLatestAllocationOverflowByNodeIdArgs = {
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Latest_Allocation_Overflows_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryIndexerLatestAllocationOverflowsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Latest_Allocation_Overflows_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerLatestAllocationOverflowFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexerLatestAllocationOverflowsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


/** The root query type which gives access points into the data universe. */
export type QueryIndexerMissedLaborArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryIndexerMissedLaborByNodeIdArgs = {
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Missed_Labors_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryIndexerMissedLaborsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Missed_Labors_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerMissedLaborFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexerMissedLaborsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


/** The root query type which gives access points into the data universe. */
export type QueryIndexerRewardArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryIndexerRewardByNodeIdArgs = {
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Rewards_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryIndexerRewardsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Rewards_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerRewardFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexerRewardsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


/** The root query type which gives access points into the data universe. */
export type QueryIndexerStakeArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryIndexerStakeByNodeIdArgs = {
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Stakes_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryIndexerStakeSummariesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Stake_Summaries_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerStakeSummaryFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexerStakeSummariesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


/** The root query type which gives access points into the data universe. */
export type QueryIndexerStakeSummaryArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryIndexerStakeSummaryByNodeIdArgs = {
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Stake_Summaries_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryIndexerStakeWeightArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryIndexerStakeWeightByNodeIdArgs = {
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Stake_Weights_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryIndexerStakeWeightsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Stake_Weights_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerStakeWeightFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexerStakeWeightsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


/** The root query type which gives access points into the data universe. */
export type QueryIndexerStakesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexer_Stakes_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerStakeFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexerStakesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


/** The root query type which gives access points into the data universe. */
export type QueryIndexersArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexers_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexersOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


/** The root query type which gives access points into the data universe. */
export type QueryNodeArgs = {
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryOfferArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryOfferByNodeIdArgs = {
  distinct?: InputMaybe<Array<InputMaybe<Offers_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryOffersArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Offers_Distinct_Enum>>>;
  filter?: InputMaybe<OfferFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<OffersOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


/** The root query type which gives access points into the data universe. */
export type QueryOrderArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryOrderByNodeIdArgs = {
  distinct?: InputMaybe<Array<InputMaybe<Orders_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryOrdersArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Orders_Distinct_Enum>>>;
  filter?: InputMaybe<OrderFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<OrdersOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


/** The root query type which gives access points into the data universe. */
export type QueryPlanArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryPlanByNodeIdArgs = {
  distinct?: InputMaybe<Array<InputMaybe<Plans_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryPlanTemplateArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryPlanTemplateByNodeIdArgs = {
  distinct?: InputMaybe<Array<InputMaybe<Plan_Templates_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryPlanTemplatesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Plan_Templates_Distinct_Enum>>>;
  filter?: InputMaybe<PlanTemplateFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<PlanTemplatesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


/** The root query type which gives access points into the data universe. */
export type QueryPlansArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Plans_Distinct_Enum>>>;
  filter?: InputMaybe<PlanFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<PlansOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


/** The root query type which gives access points into the data universe. */
export type QueryPriceOracleArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryPriceOracleByNodeIdArgs = {
  distinct?: InputMaybe<Array<InputMaybe<Price_Oracles_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryPriceOraclesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Price_Oracles_Distinct_Enum>>>;
  filter?: InputMaybe<PriceOracleFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<PriceOraclesOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


/** The root query type which gives access points into the data universe. */
export type QueryProjectArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryProjectByNodeIdArgs = {
  distinct?: InputMaybe<Array<InputMaybe<Projects_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryProjectsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Projects_Distinct_Enum>>>;
  filter?: InputMaybe<ProjectFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ProjectsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


/** The root query type which gives access points into the data universe. */
export type QueryRewardArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryRewardByNodeIdArgs = {
  distinct?: InputMaybe<Array<InputMaybe<Rewards_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryRewardsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Rewards_Distinct_Enum>>>;
  filter?: InputMaybe<RewardFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<RewardsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


/** The root query type which gives access points into the data universe. */
export type QueryServiceAgreementArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryServiceAgreementByNodeIdArgs = {
  distinct?: InputMaybe<Array<InputMaybe<Service_Agreements_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryServiceAgreementsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Service_Agreements_Distinct_Enum>>>;
  filter?: InputMaybe<ServiceAgreementFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ServiceAgreementsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


/** The root query type which gives access points into the data universe. */
export type QuerySqtokenArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QuerySqtokenByNodeIdArgs = {
  distinct?: InputMaybe<Array<InputMaybe<Sqtokens_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QuerySqtokensArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Sqtokens_Distinct_Enum>>>;
  filter?: InputMaybe<SqtokenFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<SqtokensOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


/** The root query type which gives access points into the data universe. */
export type QueryStateChannelArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryStateChannelByNodeIdArgs = {
  distinct?: InputMaybe<Array<InputMaybe<State_Channels_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryStateChannelsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<State_Channels_Distinct_Enum>>>;
  filter?: InputMaybe<StateChannelFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<StateChannelsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


/** The root query type which gives access points into the data universe. */
export type QueryTokenHolderArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryTokenHolderByNodeIdArgs = {
  distinct?: InputMaybe<Array<InputMaybe<Token_Holders_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryTokenHoldersArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Token_Holders_Distinct_Enum>>>;
  filter?: InputMaybe<TokenHolderFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<TokenHoldersOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


/** The root query type which gives access points into the data universe. */
export type QueryTotalLockArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryTotalLockByNodeIdArgs = {
  distinct?: InputMaybe<Array<InputMaybe<Total_Locks_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryTotalLocksArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Total_Locks_Distinct_Enum>>>;
  filter?: InputMaybe<TotalLockFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<TotalLocksOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


/** The root query type which gives access points into the data universe. */
export type QueryTransferArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryTransferByNodeIdArgs = {
  distinct?: InputMaybe<Array<InputMaybe<Transfers_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryTransfersArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Transfers_Distinct_Enum>>>;
  filter?: InputMaybe<TransferFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<TransfersOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


/** The root query type which gives access points into the data universe. */
export type QueryUnclaimedRewardArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryUnclaimedRewardByNodeIdArgs = {
  distinct?: InputMaybe<Array<InputMaybe<Unclaimed_Rewards_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryUnclaimedRewardsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Unclaimed_Rewards_Distinct_Enum>>>;
  filter?: InputMaybe<UnclaimedRewardFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<UnclaimedRewardsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


/** The root query type which gives access points into the data universe. */
export type QueryWithdrawArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryWithdrawByNodeIdArgs = {
  distinct?: InputMaybe<Array<InputMaybe<Withdraws_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryWithdrawlArgs = {
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryWithdrawlByNodeIdArgs = {
  distinct?: InputMaybe<Array<InputMaybe<Withdrawls_Distinct_Enum>>>;
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryWithdrawlsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Withdrawls_Distinct_Enum>>>;
  filter?: InputMaybe<WithdrawlFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<WithdrawlsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


/** The root query type which gives access points into the data universe. */
export type QueryWithdrawsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Withdraws_Distinct_Enum>>>;
  filter?: InputMaybe<WithdrawFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<WithdrawsOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

export type Reward = Node & {
  __typename?: 'Reward';
  amount: Scalars['BigFloat']['output'];
  claimedTime: Scalars['Datetime']['output'];
  createdBlock?: Maybe<Scalars['Int']['output']>;
  /** Reads a single `Delegator` that is related to this `Reward`. */
  delegator?: Maybe<Delegator>;
  delegatorAddress: Scalars['String']['output'];
  delegatorId?: Maybe<Scalars['String']['output']>;
  id: Scalars['String']['output'];
  indexerAddress: Scalars['String']['output'];
  lastEvent?: Maybe<Scalars['String']['output']>;
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
};

export type RewardAggregates = {
  __typename?: 'RewardAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  average?: Maybe<RewardAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  distinctCount?: Maybe<RewardDistinctCountAggregates>;
  keys?: Maybe<Array<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  max?: Maybe<RewardMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  min?: Maybe<RewardMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevPopulation?: Maybe<RewardStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevSample?: Maybe<RewardStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  sum?: Maybe<RewardSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  variancePopulation?: Maybe<RewardVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  varianceSample?: Maybe<RewardVarianceSampleAggregates>;
};

/** A filter to be used against aggregates of `Reward` object types. */
export type RewardAggregatesFilter = {
  /** Mean average aggregate over matching `Reward` objects. */
  average?: InputMaybe<RewardAverageAggregateFilter>;
  /** Distinct count aggregate over matching `Reward` objects. */
  distinctCount?: InputMaybe<RewardDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `Reward` object to be included within the aggregate. */
  filter?: InputMaybe<RewardFilter>;
  /** Maximum aggregate over matching `Reward` objects. */
  max?: InputMaybe<RewardMaxAggregateFilter>;
  /** Minimum aggregate over matching `Reward` objects. */
  min?: InputMaybe<RewardMinAggregateFilter>;
  /** Population standard deviation aggregate over matching `Reward` objects. */
  stddevPopulation?: InputMaybe<RewardStddevPopulationAggregateFilter>;
  /** Sample standard deviation aggregate over matching `Reward` objects. */
  stddevSample?: InputMaybe<RewardStddevSampleAggregateFilter>;
  /** Sum aggregate over matching `Reward` objects. */
  sum?: InputMaybe<RewardSumAggregateFilter>;
  /** Population variance aggregate over matching `Reward` objects. */
  variancePopulation?: InputMaybe<RewardVariancePopulationAggregateFilter>;
  /** Sample variance aggregate over matching `Reward` objects. */
  varianceSample?: InputMaybe<RewardVarianceSampleAggregateFilter>;
};

export type RewardAverageAggregateFilter = {
  amount?: InputMaybe<BigFloatFilter>;
  createdBlock?: InputMaybe<BigFloatFilter>;
};

export type RewardAverageAggregates = {
  __typename?: 'RewardAverageAggregates';
  /** Mean average of amount across the matching connection */
  amount?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
};

export type RewardDistinctCountAggregateFilter = {
  _blockRange?: InputMaybe<BigIntFilter>;
  _id?: InputMaybe<BigIntFilter>;
  amount?: InputMaybe<BigIntFilter>;
  claimedTime?: InputMaybe<BigIntFilter>;
  createdBlock?: InputMaybe<BigIntFilter>;
  delegatorAddress?: InputMaybe<BigIntFilter>;
  delegatorId?: InputMaybe<BigIntFilter>;
  id?: InputMaybe<BigIntFilter>;
  indexerAddress?: InputMaybe<BigIntFilter>;
  lastEvent?: InputMaybe<BigIntFilter>;
};

export type RewardDistinctCountAggregates = {
  __typename?: 'RewardDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  _blockRange?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  _id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of amount across the matching connection */
  amount?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of claimedTime across the matching connection */
  claimedTime?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of delegatorAddress across the matching connection */
  delegatorAddress?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of delegatorId across the matching connection */
  delegatorId?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of indexerAddress across the matching connection */
  indexerAddress?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of lastEvent across the matching connection */
  lastEvent?: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `Reward` object types. All fields are combined with a logical ‘and.’ */
export type RewardFilter = {
  /** Filter by the object’s `amount` field. */
  amount?: InputMaybe<BigFloatFilter>;
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<RewardFilter>>;
  /** Filter by the object’s `claimedTime` field. */
  claimedTime?: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `createdBlock` field. */
  createdBlock?: InputMaybe<IntFilter>;
  /** Filter by the object’s `delegator` relation. */
  delegator?: InputMaybe<DelegatorFilter>;
  /** Filter by the object’s `delegatorAddress` field. */
  delegatorAddress?: InputMaybe<StringFilter>;
  /** A related `delegator` exists. */
  delegatorExists?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `delegatorId` field. */
  delegatorId?: InputMaybe<StringFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<StringFilter>;
  /** Filter by the object’s `indexerAddress` field. */
  indexerAddress?: InputMaybe<StringFilter>;
  /** Filter by the object’s `lastEvent` field. */
  lastEvent?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<RewardFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<RewardFilter>>;
};

export type RewardMaxAggregateFilter = {
  amount?: InputMaybe<BigFloatFilter>;
  createdBlock?: InputMaybe<IntFilter>;
};

export type RewardMaxAggregates = {
  __typename?: 'RewardMaxAggregates';
  /** Maximum of amount across the matching connection */
  amount?: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['Int']['output']>;
};

export type RewardMinAggregateFilter = {
  amount?: InputMaybe<BigFloatFilter>;
  createdBlock?: InputMaybe<IntFilter>;
};

export type RewardMinAggregates = {
  __typename?: 'RewardMinAggregates';
  /** Minimum of amount across the matching connection */
  amount?: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['Int']['output']>;
};

export type RewardStddevPopulationAggregateFilter = {
  amount?: InputMaybe<BigFloatFilter>;
  createdBlock?: InputMaybe<BigFloatFilter>;
};

export type RewardStddevPopulationAggregates = {
  __typename?: 'RewardStddevPopulationAggregates';
  /** Population standard deviation of amount across the matching connection */
  amount?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
};

export type RewardStddevSampleAggregateFilter = {
  amount?: InputMaybe<BigFloatFilter>;
  createdBlock?: InputMaybe<BigFloatFilter>;
};

export type RewardStddevSampleAggregates = {
  __typename?: 'RewardStddevSampleAggregates';
  /** Sample standard deviation of amount across the matching connection */
  amount?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
};

export type RewardSumAggregateFilter = {
  amount?: InputMaybe<BigFloatFilter>;
  createdBlock?: InputMaybe<BigIntFilter>;
};

export type RewardSumAggregates = {
  __typename?: 'RewardSumAggregates';
  /** Sum of amount across the matching connection */
  amount: Scalars['BigFloat']['output'];
  /** Sum of createdBlock across the matching connection */
  createdBlock: Scalars['BigInt']['output'];
};

export type RewardVariancePopulationAggregateFilter = {
  amount?: InputMaybe<BigFloatFilter>;
  createdBlock?: InputMaybe<BigFloatFilter>;
};

export type RewardVariancePopulationAggregates = {
  __typename?: 'RewardVariancePopulationAggregates';
  /** Population variance of amount across the matching connection */
  amount?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
};

export type RewardVarianceSampleAggregateFilter = {
  amount?: InputMaybe<BigFloatFilter>;
  createdBlock?: InputMaybe<BigFloatFilter>;
};

export type RewardVarianceSampleAggregates = {
  __typename?: 'RewardVarianceSampleAggregates';
  /** Sample variance of amount across the matching connection */
  amount?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `Reward` values. */
export type RewardsConnection = {
  __typename?: 'RewardsConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<RewardAggregates>;
  /** A list of edges which contains the `Reward` and cursor to aid in pagination. */
  edges: Array<RewardsEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<RewardAggregates>>;
  /** A list of `Reward` objects. */
  nodes: Array<Maybe<Reward>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Reward` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Reward` values. */
export type RewardsConnectionGroupedAggregatesArgs = {
  groupBy: Array<RewardsGroupBy>;
  having?: InputMaybe<RewardsHavingInput>;
};

/** A `Reward` edge in the connection. */
export type RewardsEdge = {
  __typename?: 'RewardsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `Reward` at the end of the edge. */
  node?: Maybe<Reward>;
};

/** Grouping methods for `Reward` for usage during aggregation. */
export enum RewardsGroupBy {
  Amount = 'AMOUNT',
  ClaimedTime = 'CLAIMED_TIME',
  ClaimedTimeTruncatedToDay = 'CLAIMED_TIME_TRUNCATED_TO_DAY',
  ClaimedTimeTruncatedToHour = 'CLAIMED_TIME_TRUNCATED_TO_HOUR',
  CreatedBlock = 'CREATED_BLOCK',
  DelegatorAddress = 'DELEGATOR_ADDRESS',
  DelegatorId = 'DELEGATOR_ID',
  Id = 'ID',
  IndexerAddress = 'INDEXER_ADDRESS',
  LastEvent = 'LAST_EVENT'
}

export type RewardsHavingAverageInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
  claimedTime?: InputMaybe<HavingDatetimeFilter>;
  createdBlock?: InputMaybe<HavingIntFilter>;
};

export type RewardsHavingDistinctCountInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
  claimedTime?: InputMaybe<HavingDatetimeFilter>;
  createdBlock?: InputMaybe<HavingIntFilter>;
};

/** Conditions for `Reward` aggregates. */
export type RewardsHavingInput = {
  AND?: InputMaybe<Array<RewardsHavingInput>>;
  OR?: InputMaybe<Array<RewardsHavingInput>>;
  average?: InputMaybe<RewardsHavingAverageInput>;
  distinctCount?: InputMaybe<RewardsHavingDistinctCountInput>;
  max?: InputMaybe<RewardsHavingMaxInput>;
  min?: InputMaybe<RewardsHavingMinInput>;
  stddevPopulation?: InputMaybe<RewardsHavingStddevPopulationInput>;
  stddevSample?: InputMaybe<RewardsHavingStddevSampleInput>;
  sum?: InputMaybe<RewardsHavingSumInput>;
  variancePopulation?: InputMaybe<RewardsHavingVariancePopulationInput>;
  varianceSample?: InputMaybe<RewardsHavingVarianceSampleInput>;
};

export type RewardsHavingMaxInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
  claimedTime?: InputMaybe<HavingDatetimeFilter>;
  createdBlock?: InputMaybe<HavingIntFilter>;
};

export type RewardsHavingMinInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
  claimedTime?: InputMaybe<HavingDatetimeFilter>;
  createdBlock?: InputMaybe<HavingIntFilter>;
};

export type RewardsHavingStddevPopulationInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
  claimedTime?: InputMaybe<HavingDatetimeFilter>;
  createdBlock?: InputMaybe<HavingIntFilter>;
};

export type RewardsHavingStddevSampleInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
  claimedTime?: InputMaybe<HavingDatetimeFilter>;
  createdBlock?: InputMaybe<HavingIntFilter>;
};

export type RewardsHavingSumInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
  claimedTime?: InputMaybe<HavingDatetimeFilter>;
  createdBlock?: InputMaybe<HavingIntFilter>;
};

export type RewardsHavingVariancePopulationInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
  claimedTime?: InputMaybe<HavingDatetimeFilter>;
  createdBlock?: InputMaybe<HavingIntFilter>;
};

export type RewardsHavingVarianceSampleInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
  claimedTime?: InputMaybe<HavingDatetimeFilter>;
  createdBlock?: InputMaybe<HavingIntFilter>;
};

/** Methods to use when ordering `Reward`. */
export enum RewardsOrderBy {
  AmountAsc = 'AMOUNT_ASC',
  AmountDesc = 'AMOUNT_DESC',
  ClaimedTimeAsc = 'CLAIMED_TIME_ASC',
  ClaimedTimeDesc = 'CLAIMED_TIME_DESC',
  CreatedBlockAsc = 'CREATED_BLOCK_ASC',
  CreatedBlockDesc = 'CREATED_BLOCK_DESC',
  DelegatorAddressAsc = 'DELEGATOR_ADDRESS_ASC',
  DelegatorAddressDesc = 'DELEGATOR_ADDRESS_DESC',
  DelegatorByDelegatorIdCreatedBlockAsc = 'DELEGATOR_BY_DELEGATOR_ID__CREATED_BLOCK_ASC',
  DelegatorByDelegatorIdCreatedBlockDesc = 'DELEGATOR_BY_DELEGATOR_ID__CREATED_BLOCK_DESC',
  DelegatorByDelegatorIdExitEraAsc = 'DELEGATOR_BY_DELEGATOR_ID__EXIT_ERA_ASC',
  DelegatorByDelegatorIdExitEraDesc = 'DELEGATOR_BY_DELEGATOR_ID__EXIT_ERA_DESC',
  DelegatorByDelegatorIdIdAsc = 'DELEGATOR_BY_DELEGATOR_ID__ID_ASC',
  DelegatorByDelegatorIdIdDesc = 'DELEGATOR_BY_DELEGATOR_ID__ID_DESC',
  DelegatorByDelegatorIdLastEventAsc = 'DELEGATOR_BY_DELEGATOR_ID__LAST_EVENT_ASC',
  DelegatorByDelegatorIdLastEventDesc = 'DELEGATOR_BY_DELEGATOR_ID__LAST_EVENT_DESC',
  DelegatorByDelegatorIdStartEraAsc = 'DELEGATOR_BY_DELEGATOR_ID__START_ERA_ASC',
  DelegatorByDelegatorIdStartEraDesc = 'DELEGATOR_BY_DELEGATOR_ID__START_ERA_DESC',
  DelegatorByDelegatorIdTotalDelegationsAsc = 'DELEGATOR_BY_DELEGATOR_ID__TOTAL_DELEGATIONS_ASC',
  DelegatorByDelegatorIdTotalDelegationsDesc = 'DELEGATOR_BY_DELEGATOR_ID__TOTAL_DELEGATIONS_DESC',
  DelegatorIdAsc = 'DELEGATOR_ID_ASC',
  DelegatorIdDesc = 'DELEGATOR_ID_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  IndexerAddressAsc = 'INDEXER_ADDRESS_ASC',
  IndexerAddressDesc = 'INDEXER_ADDRESS_DESC',
  LastEventAsc = 'LAST_EVENT_ASC',
  LastEventDesc = 'LAST_EVENT_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

export type ServiceAgreement = Node & {
  __typename?: 'ServiceAgreement';
  /** Reads and enables pagination through a set of `AcceptedOffer`. */
  acceptedOffers: AcceptedOffersConnection;
  consumerAddress: Scalars['String']['output'];
  createdBlock?: Maybe<Scalars['Int']['output']>;
  /** Reads a single `Deployment` that is related to this `ServiceAgreement`. */
  deployment?: Maybe<Deployment>;
  deploymentId: Scalars['String']['output'];
  endTime: Scalars['Datetime']['output'];
  id: Scalars['String']['output'];
  indexerAddress: Scalars['String']['output'];
  /** Reads and enables pagination through a set of `Indexer`. */
  indexersByAcceptedOfferServiceAgreementIdAndIndexerId: ServiceAgreementIndexersByAcceptedOfferServiceAgreementIdAndIndexerIdManyToManyConnection;
  lastEvent?: Maybe<Scalars['String']['output']>;
  lockedAmount: Scalars['BigFloat']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  /** Reads and enables pagination through a set of `Offer`. */
  offersByAcceptedOfferServiceAgreementIdAndOfferId: ServiceAgreementOffersByAcceptedOfferServiceAgreementIdAndOfferIdManyToManyConnection;
  period: Scalars['BigFloat']['output'];
  /** Reads a single `PlanTemplate` that is related to this `ServiceAgreement`. */
  planTemplate?: Maybe<PlanTemplate>;
  planTemplateId: Scalars['String']['output'];
  startTime: Scalars['Datetime']['output'];
};


export type ServiceAgreementAcceptedOffersArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Accepted_Offers_Distinct_Enum>>>;
  filter?: InputMaybe<AcceptedOfferFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<AcceptedOffersOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type ServiceAgreementIndexersByAcceptedOfferServiceAgreementIdAndIndexerIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Indexers_Distinct_Enum>>>;
  filter?: InputMaybe<IndexerFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IndexersOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};


export type ServiceAgreementOffersByAcceptedOfferServiceAgreementIdAndOfferIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Offers_Distinct_Enum>>>;
  filter?: InputMaybe<OfferFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<OffersOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

export type ServiceAgreementAggregates = {
  __typename?: 'ServiceAgreementAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  average?: Maybe<ServiceAgreementAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  distinctCount?: Maybe<ServiceAgreementDistinctCountAggregates>;
  keys?: Maybe<Array<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  max?: Maybe<ServiceAgreementMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  min?: Maybe<ServiceAgreementMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevPopulation?: Maybe<ServiceAgreementStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevSample?: Maybe<ServiceAgreementStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  sum?: Maybe<ServiceAgreementSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  variancePopulation?: Maybe<ServiceAgreementVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  varianceSample?: Maybe<ServiceAgreementVarianceSampleAggregates>;
};

/** A filter to be used against aggregates of `ServiceAgreement` object types. */
export type ServiceAgreementAggregatesFilter = {
  /** Mean average aggregate over matching `ServiceAgreement` objects. */
  average?: InputMaybe<ServiceAgreementAverageAggregateFilter>;
  /** Distinct count aggregate over matching `ServiceAgreement` objects. */
  distinctCount?: InputMaybe<ServiceAgreementDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `ServiceAgreement` object to be included within the aggregate. */
  filter?: InputMaybe<ServiceAgreementFilter>;
  /** Maximum aggregate over matching `ServiceAgreement` objects. */
  max?: InputMaybe<ServiceAgreementMaxAggregateFilter>;
  /** Minimum aggregate over matching `ServiceAgreement` objects. */
  min?: InputMaybe<ServiceAgreementMinAggregateFilter>;
  /** Population standard deviation aggregate over matching `ServiceAgreement` objects. */
  stddevPopulation?: InputMaybe<ServiceAgreementStddevPopulationAggregateFilter>;
  /** Sample standard deviation aggregate over matching `ServiceAgreement` objects. */
  stddevSample?: InputMaybe<ServiceAgreementStddevSampleAggregateFilter>;
  /** Sum aggregate over matching `ServiceAgreement` objects. */
  sum?: InputMaybe<ServiceAgreementSumAggregateFilter>;
  /** Population variance aggregate over matching `ServiceAgreement` objects. */
  variancePopulation?: InputMaybe<ServiceAgreementVariancePopulationAggregateFilter>;
  /** Sample variance aggregate over matching `ServiceAgreement` objects. */
  varianceSample?: InputMaybe<ServiceAgreementVarianceSampleAggregateFilter>;
};

export type ServiceAgreementAverageAggregateFilter = {
  createdBlock?: InputMaybe<BigFloatFilter>;
  lockedAmount?: InputMaybe<BigFloatFilter>;
  period?: InputMaybe<BigFloatFilter>;
};

export type ServiceAgreementAverageAggregates = {
  __typename?: 'ServiceAgreementAverageAggregates';
  /** Mean average of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of lockedAmount across the matching connection */
  lockedAmount?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of period across the matching connection */
  period?: Maybe<Scalars['BigFloat']['output']>;
};

export type ServiceAgreementDistinctCountAggregateFilter = {
  _blockRange?: InputMaybe<BigIntFilter>;
  _id?: InputMaybe<BigIntFilter>;
  consumerAddress?: InputMaybe<BigIntFilter>;
  createdBlock?: InputMaybe<BigIntFilter>;
  deploymentId?: InputMaybe<BigIntFilter>;
  endTime?: InputMaybe<BigIntFilter>;
  id?: InputMaybe<BigIntFilter>;
  indexerAddress?: InputMaybe<BigIntFilter>;
  lastEvent?: InputMaybe<BigIntFilter>;
  lockedAmount?: InputMaybe<BigIntFilter>;
  period?: InputMaybe<BigIntFilter>;
  planTemplateId?: InputMaybe<BigIntFilter>;
  startTime?: InputMaybe<BigIntFilter>;
};

export type ServiceAgreementDistinctCountAggregates = {
  __typename?: 'ServiceAgreementDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  _blockRange?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  _id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of consumerAddress across the matching connection */
  consumerAddress?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of deploymentId across the matching connection */
  deploymentId?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of endTime across the matching connection */
  endTime?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of indexerAddress across the matching connection */
  indexerAddress?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of lastEvent across the matching connection */
  lastEvent?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of lockedAmount across the matching connection */
  lockedAmount?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of period across the matching connection */
  period?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of planTemplateId across the matching connection */
  planTemplateId?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of startTime across the matching connection */
  startTime?: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `ServiceAgreement` object types. All fields are combined with a logical ‘and.’ */
export type ServiceAgreementFilter = {
  /** Filter by the object’s `acceptedOffers` relation. */
  acceptedOffers?: InputMaybe<ServiceAgreementToManyAcceptedOfferFilter>;
  /** Some related `acceptedOffers` exist. */
  acceptedOffersExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<ServiceAgreementFilter>>;
  /** Filter by the object’s `consumerAddress` field. */
  consumerAddress?: InputMaybe<StringFilter>;
  /** Filter by the object’s `createdBlock` field. */
  createdBlock?: InputMaybe<IntFilter>;
  /** Filter by the object’s `deployment` relation. */
  deployment?: InputMaybe<DeploymentFilter>;
  /** Filter by the object’s `deploymentId` field. */
  deploymentId?: InputMaybe<StringFilter>;
  /** Filter by the object’s `endTime` field. */
  endTime?: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<StringFilter>;
  /** Filter by the object’s `indexerAddress` field. */
  indexerAddress?: InputMaybe<StringFilter>;
  /** Filter by the object’s `lastEvent` field. */
  lastEvent?: InputMaybe<StringFilter>;
  /** Filter by the object’s `lockedAmount` field. */
  lockedAmount?: InputMaybe<BigFloatFilter>;
  /** Negates the expression. */
  not?: InputMaybe<ServiceAgreementFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<ServiceAgreementFilter>>;
  /** Filter by the object’s `period` field. */
  period?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `planTemplate` relation. */
  planTemplate?: InputMaybe<PlanTemplateFilter>;
  /** Filter by the object’s `planTemplateId` field. */
  planTemplateId?: InputMaybe<StringFilter>;
  /** Filter by the object’s `startTime` field. */
  startTime?: InputMaybe<DatetimeFilter>;
};

/** A connection to a list of `Indexer` values, with data from `AcceptedOffer`. */
export type ServiceAgreementIndexersByAcceptedOfferServiceAgreementIdAndIndexerIdManyToManyConnection = {
  __typename?: 'ServiceAgreementIndexersByAcceptedOfferServiceAgreementIdAndIndexerIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<IndexerAggregates>;
  /** A list of edges which contains the `Indexer`, info from the `AcceptedOffer`, and the cursor to aid in pagination. */
  edges: Array<ServiceAgreementIndexersByAcceptedOfferServiceAgreementIdAndIndexerIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<IndexerAggregates>>;
  /** A list of `Indexer` objects. */
  nodes: Array<Maybe<Indexer>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Indexer` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Indexer` values, with data from `AcceptedOffer`. */
export type ServiceAgreementIndexersByAcceptedOfferServiceAgreementIdAndIndexerIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: Array<IndexersGroupBy>;
  having?: InputMaybe<IndexersHavingInput>;
};

/** A `Indexer` edge in the connection, with data from `AcceptedOffer`. */
export type ServiceAgreementIndexersByAcceptedOfferServiceAgreementIdAndIndexerIdManyToManyEdge = {
  __typename?: 'ServiceAgreementIndexersByAcceptedOfferServiceAgreementIdAndIndexerIdManyToManyEdge';
  /** Reads and enables pagination through a set of `AcceptedOffer`. */
  acceptedOffers: AcceptedOffersConnection;
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `Indexer` at the end of the edge. */
  node?: Maybe<Indexer>;
};


/** A `Indexer` edge in the connection, with data from `AcceptedOffer`. */
export type ServiceAgreementIndexersByAcceptedOfferServiceAgreementIdAndIndexerIdManyToManyEdgeAcceptedOffersArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Accepted_Offers_Distinct_Enum>>>;
  filter?: InputMaybe<AcceptedOfferFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<AcceptedOffersOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

export type ServiceAgreementMaxAggregateFilter = {
  createdBlock?: InputMaybe<IntFilter>;
  lockedAmount?: InputMaybe<BigFloatFilter>;
  period?: InputMaybe<BigFloatFilter>;
};

export type ServiceAgreementMaxAggregates = {
  __typename?: 'ServiceAgreementMaxAggregates';
  /** Maximum of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['Int']['output']>;
  /** Maximum of lockedAmount across the matching connection */
  lockedAmount?: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of period across the matching connection */
  period?: Maybe<Scalars['BigFloat']['output']>;
};

export type ServiceAgreementMinAggregateFilter = {
  createdBlock?: InputMaybe<IntFilter>;
  lockedAmount?: InputMaybe<BigFloatFilter>;
  period?: InputMaybe<BigFloatFilter>;
};

export type ServiceAgreementMinAggregates = {
  __typename?: 'ServiceAgreementMinAggregates';
  /** Minimum of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['Int']['output']>;
  /** Minimum of lockedAmount across the matching connection */
  lockedAmount?: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of period across the matching connection */
  period?: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `Offer` values, with data from `AcceptedOffer`. */
export type ServiceAgreementOffersByAcceptedOfferServiceAgreementIdAndOfferIdManyToManyConnection = {
  __typename?: 'ServiceAgreementOffersByAcceptedOfferServiceAgreementIdAndOfferIdManyToManyConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<OfferAggregates>;
  /** A list of edges which contains the `Offer`, info from the `AcceptedOffer`, and the cursor to aid in pagination. */
  edges: Array<ServiceAgreementOffersByAcceptedOfferServiceAgreementIdAndOfferIdManyToManyEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<OfferAggregates>>;
  /** A list of `Offer` objects. */
  nodes: Array<Maybe<Offer>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Offer` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Offer` values, with data from `AcceptedOffer`. */
export type ServiceAgreementOffersByAcceptedOfferServiceAgreementIdAndOfferIdManyToManyConnectionGroupedAggregatesArgs = {
  groupBy: Array<OffersGroupBy>;
  having?: InputMaybe<OffersHavingInput>;
};

/** A `Offer` edge in the connection, with data from `AcceptedOffer`. */
export type ServiceAgreementOffersByAcceptedOfferServiceAgreementIdAndOfferIdManyToManyEdge = {
  __typename?: 'ServiceAgreementOffersByAcceptedOfferServiceAgreementIdAndOfferIdManyToManyEdge';
  /** Reads and enables pagination through a set of `AcceptedOffer`. */
  acceptedOffers: AcceptedOffersConnection;
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `Offer` at the end of the edge. */
  node?: Maybe<Offer>;
};


/** A `Offer` edge in the connection, with data from `AcceptedOffer`. */
export type ServiceAgreementOffersByAcceptedOfferServiceAgreementIdAndOfferIdManyToManyEdgeAcceptedOffersArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Accepted_Offers_Distinct_Enum>>>;
  filter?: InputMaybe<AcceptedOfferFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<AcceptedOffersOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

export type ServiceAgreementStddevPopulationAggregateFilter = {
  createdBlock?: InputMaybe<BigFloatFilter>;
  lockedAmount?: InputMaybe<BigFloatFilter>;
  period?: InputMaybe<BigFloatFilter>;
};

export type ServiceAgreementStddevPopulationAggregates = {
  __typename?: 'ServiceAgreementStddevPopulationAggregates';
  /** Population standard deviation of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of lockedAmount across the matching connection */
  lockedAmount?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of period across the matching connection */
  period?: Maybe<Scalars['BigFloat']['output']>;
};

export type ServiceAgreementStddevSampleAggregateFilter = {
  createdBlock?: InputMaybe<BigFloatFilter>;
  lockedAmount?: InputMaybe<BigFloatFilter>;
  period?: InputMaybe<BigFloatFilter>;
};

export type ServiceAgreementStddevSampleAggregates = {
  __typename?: 'ServiceAgreementStddevSampleAggregates';
  /** Sample standard deviation of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of lockedAmount across the matching connection */
  lockedAmount?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of period across the matching connection */
  period?: Maybe<Scalars['BigFloat']['output']>;
};

export type ServiceAgreementSumAggregateFilter = {
  createdBlock?: InputMaybe<BigIntFilter>;
  lockedAmount?: InputMaybe<BigFloatFilter>;
  period?: InputMaybe<BigFloatFilter>;
};

export type ServiceAgreementSumAggregates = {
  __typename?: 'ServiceAgreementSumAggregates';
  /** Sum of createdBlock across the matching connection */
  createdBlock: Scalars['BigInt']['output'];
  /** Sum of lockedAmount across the matching connection */
  lockedAmount: Scalars['BigFloat']['output'];
  /** Sum of period across the matching connection */
  period: Scalars['BigFloat']['output'];
};

/** A filter to be used against many `AcceptedOffer` object types. All fields are combined with a logical ‘and.’ */
export type ServiceAgreementToManyAcceptedOfferFilter = {
  /** Aggregates across related `AcceptedOffer` match the filter criteria. */
  aggregates?: InputMaybe<AcceptedOfferAggregatesFilter>;
  /** Every related `AcceptedOffer` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<AcceptedOfferFilter>;
  /** No related `AcceptedOffer` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<AcceptedOfferFilter>;
  /** Some related `AcceptedOffer` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<AcceptedOfferFilter>;
};

export type ServiceAgreementVariancePopulationAggregateFilter = {
  createdBlock?: InputMaybe<BigFloatFilter>;
  lockedAmount?: InputMaybe<BigFloatFilter>;
  period?: InputMaybe<BigFloatFilter>;
};

export type ServiceAgreementVariancePopulationAggregates = {
  __typename?: 'ServiceAgreementVariancePopulationAggregates';
  /** Population variance of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of lockedAmount across the matching connection */
  lockedAmount?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of period across the matching connection */
  period?: Maybe<Scalars['BigFloat']['output']>;
};

export type ServiceAgreementVarianceSampleAggregateFilter = {
  createdBlock?: InputMaybe<BigFloatFilter>;
  lockedAmount?: InputMaybe<BigFloatFilter>;
  period?: InputMaybe<BigFloatFilter>;
};

export type ServiceAgreementVarianceSampleAggregates = {
  __typename?: 'ServiceAgreementVarianceSampleAggregates';
  /** Sample variance of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of lockedAmount across the matching connection */
  lockedAmount?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of period across the matching connection */
  period?: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `ServiceAgreement` values. */
export type ServiceAgreementsConnection = {
  __typename?: 'ServiceAgreementsConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<ServiceAgreementAggregates>;
  /** A list of edges which contains the `ServiceAgreement` and cursor to aid in pagination. */
  edges: Array<ServiceAgreementsEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<ServiceAgreementAggregates>>;
  /** A list of `ServiceAgreement` objects. */
  nodes: Array<Maybe<ServiceAgreement>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `ServiceAgreement` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `ServiceAgreement` values. */
export type ServiceAgreementsConnectionGroupedAggregatesArgs = {
  groupBy: Array<ServiceAgreementsGroupBy>;
  having?: InputMaybe<ServiceAgreementsHavingInput>;
};

/** A `ServiceAgreement` edge in the connection. */
export type ServiceAgreementsEdge = {
  __typename?: 'ServiceAgreementsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `ServiceAgreement` at the end of the edge. */
  node?: Maybe<ServiceAgreement>;
};

/** Grouping methods for `ServiceAgreement` for usage during aggregation. */
export enum ServiceAgreementsGroupBy {
  ConsumerAddress = 'CONSUMER_ADDRESS',
  CreatedBlock = 'CREATED_BLOCK',
  DeploymentId = 'DEPLOYMENT_ID',
  EndTime = 'END_TIME',
  EndTimeTruncatedToDay = 'END_TIME_TRUNCATED_TO_DAY',
  EndTimeTruncatedToHour = 'END_TIME_TRUNCATED_TO_HOUR',
  Id = 'ID',
  IndexerAddress = 'INDEXER_ADDRESS',
  LastEvent = 'LAST_EVENT',
  LockedAmount = 'LOCKED_AMOUNT',
  Period = 'PERIOD',
  PlanTemplateId = 'PLAN_TEMPLATE_ID',
  StartTime = 'START_TIME',
  StartTimeTruncatedToDay = 'START_TIME_TRUNCATED_TO_DAY',
  StartTimeTruncatedToHour = 'START_TIME_TRUNCATED_TO_HOUR'
}

export type ServiceAgreementsHavingAverageInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
  endTime?: InputMaybe<HavingDatetimeFilter>;
  lockedAmount?: InputMaybe<HavingBigfloatFilter>;
  period?: InputMaybe<HavingBigfloatFilter>;
  startTime?: InputMaybe<HavingDatetimeFilter>;
};

export type ServiceAgreementsHavingDistinctCountInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
  endTime?: InputMaybe<HavingDatetimeFilter>;
  lockedAmount?: InputMaybe<HavingBigfloatFilter>;
  period?: InputMaybe<HavingBigfloatFilter>;
  startTime?: InputMaybe<HavingDatetimeFilter>;
};

/** Conditions for `ServiceAgreement` aggregates. */
export type ServiceAgreementsHavingInput = {
  AND?: InputMaybe<Array<ServiceAgreementsHavingInput>>;
  OR?: InputMaybe<Array<ServiceAgreementsHavingInput>>;
  average?: InputMaybe<ServiceAgreementsHavingAverageInput>;
  distinctCount?: InputMaybe<ServiceAgreementsHavingDistinctCountInput>;
  max?: InputMaybe<ServiceAgreementsHavingMaxInput>;
  min?: InputMaybe<ServiceAgreementsHavingMinInput>;
  stddevPopulation?: InputMaybe<ServiceAgreementsHavingStddevPopulationInput>;
  stddevSample?: InputMaybe<ServiceAgreementsHavingStddevSampleInput>;
  sum?: InputMaybe<ServiceAgreementsHavingSumInput>;
  variancePopulation?: InputMaybe<ServiceAgreementsHavingVariancePopulationInput>;
  varianceSample?: InputMaybe<ServiceAgreementsHavingVarianceSampleInput>;
};

export type ServiceAgreementsHavingMaxInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
  endTime?: InputMaybe<HavingDatetimeFilter>;
  lockedAmount?: InputMaybe<HavingBigfloatFilter>;
  period?: InputMaybe<HavingBigfloatFilter>;
  startTime?: InputMaybe<HavingDatetimeFilter>;
};

export type ServiceAgreementsHavingMinInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
  endTime?: InputMaybe<HavingDatetimeFilter>;
  lockedAmount?: InputMaybe<HavingBigfloatFilter>;
  period?: InputMaybe<HavingBigfloatFilter>;
  startTime?: InputMaybe<HavingDatetimeFilter>;
};

export type ServiceAgreementsHavingStddevPopulationInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
  endTime?: InputMaybe<HavingDatetimeFilter>;
  lockedAmount?: InputMaybe<HavingBigfloatFilter>;
  period?: InputMaybe<HavingBigfloatFilter>;
  startTime?: InputMaybe<HavingDatetimeFilter>;
};

export type ServiceAgreementsHavingStddevSampleInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
  endTime?: InputMaybe<HavingDatetimeFilter>;
  lockedAmount?: InputMaybe<HavingBigfloatFilter>;
  period?: InputMaybe<HavingBigfloatFilter>;
  startTime?: InputMaybe<HavingDatetimeFilter>;
};

export type ServiceAgreementsHavingSumInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
  endTime?: InputMaybe<HavingDatetimeFilter>;
  lockedAmount?: InputMaybe<HavingBigfloatFilter>;
  period?: InputMaybe<HavingBigfloatFilter>;
  startTime?: InputMaybe<HavingDatetimeFilter>;
};

export type ServiceAgreementsHavingVariancePopulationInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
  endTime?: InputMaybe<HavingDatetimeFilter>;
  lockedAmount?: InputMaybe<HavingBigfloatFilter>;
  period?: InputMaybe<HavingBigfloatFilter>;
  startTime?: InputMaybe<HavingDatetimeFilter>;
};

export type ServiceAgreementsHavingVarianceSampleInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
  endTime?: InputMaybe<HavingDatetimeFilter>;
  lockedAmount?: InputMaybe<HavingBigfloatFilter>;
  period?: InputMaybe<HavingBigfloatFilter>;
  startTime?: InputMaybe<HavingDatetimeFilter>;
};

/** Methods to use when ordering `ServiceAgreement`. */
export enum ServiceAgreementsOrderBy {
  AcceptedOffersAverageBlockRangeAsc = 'ACCEPTED_OFFERS_AVERAGE_BLOCK_RANGE_ASC',
  AcceptedOffersAverageBlockRangeDesc = 'ACCEPTED_OFFERS_AVERAGE_BLOCK_RANGE_DESC',
  AcceptedOffersAverageCreatedBlockAsc = 'ACCEPTED_OFFERS_AVERAGE_CREATED_BLOCK_ASC',
  AcceptedOffersAverageCreatedBlockDesc = 'ACCEPTED_OFFERS_AVERAGE_CREATED_BLOCK_DESC',
  AcceptedOffersAverageIdAsc = 'ACCEPTED_OFFERS_AVERAGE_ID_ASC',
  AcceptedOffersAverageIdDesc = 'ACCEPTED_OFFERS_AVERAGE_ID_DESC',
  AcceptedOffersAverageIndexerIdAsc = 'ACCEPTED_OFFERS_AVERAGE_INDEXER_ID_ASC',
  AcceptedOffersAverageIndexerIdDesc = 'ACCEPTED_OFFERS_AVERAGE_INDEXER_ID_DESC',
  AcceptedOffersAverageLastEventAsc = 'ACCEPTED_OFFERS_AVERAGE_LAST_EVENT_ASC',
  AcceptedOffersAverageLastEventDesc = 'ACCEPTED_OFFERS_AVERAGE_LAST_EVENT_DESC',
  AcceptedOffersAverageOfferIdAsc = 'ACCEPTED_OFFERS_AVERAGE_OFFER_ID_ASC',
  AcceptedOffersAverageOfferIdDesc = 'ACCEPTED_OFFERS_AVERAGE_OFFER_ID_DESC',
  AcceptedOffersAverageServiceAgreementIdAsc = 'ACCEPTED_OFFERS_AVERAGE_SERVICE_AGREEMENT_ID_ASC',
  AcceptedOffersAverageServiceAgreementIdDesc = 'ACCEPTED_OFFERS_AVERAGE_SERVICE_AGREEMENT_ID_DESC',
  AcceptedOffersByServiceAgreementIdCountAsc = 'ACCEPTED_OFFERS_BY_SERVICE_AGREEMENT_ID__COUNT_ASC',
  AcceptedOffersByServiceAgreementIdCountDesc = 'ACCEPTED_OFFERS_BY_SERVICE_AGREEMENT_ID__COUNT_DESC',
  AcceptedOffersCountAsc = 'ACCEPTED_OFFERS_COUNT_ASC',
  AcceptedOffersCountDesc = 'ACCEPTED_OFFERS_COUNT_DESC',
  AcceptedOffersDistinctCountBlockRangeAsc = 'ACCEPTED_OFFERS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  AcceptedOffersDistinctCountBlockRangeDesc = 'ACCEPTED_OFFERS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  AcceptedOffersDistinctCountCreatedBlockAsc = 'ACCEPTED_OFFERS_DISTINCT_COUNT_CREATED_BLOCK_ASC',
  AcceptedOffersDistinctCountCreatedBlockDesc = 'ACCEPTED_OFFERS_DISTINCT_COUNT_CREATED_BLOCK_DESC',
  AcceptedOffersDistinctCountIdAsc = 'ACCEPTED_OFFERS_DISTINCT_COUNT_ID_ASC',
  AcceptedOffersDistinctCountIdDesc = 'ACCEPTED_OFFERS_DISTINCT_COUNT_ID_DESC',
  AcceptedOffersDistinctCountIndexerIdAsc = 'ACCEPTED_OFFERS_DISTINCT_COUNT_INDEXER_ID_ASC',
  AcceptedOffersDistinctCountIndexerIdDesc = 'ACCEPTED_OFFERS_DISTINCT_COUNT_INDEXER_ID_DESC',
  AcceptedOffersDistinctCountLastEventAsc = 'ACCEPTED_OFFERS_DISTINCT_COUNT_LAST_EVENT_ASC',
  AcceptedOffersDistinctCountLastEventDesc = 'ACCEPTED_OFFERS_DISTINCT_COUNT_LAST_EVENT_DESC',
  AcceptedOffersDistinctCountOfferIdAsc = 'ACCEPTED_OFFERS_DISTINCT_COUNT_OFFER_ID_ASC',
  AcceptedOffersDistinctCountOfferIdDesc = 'ACCEPTED_OFFERS_DISTINCT_COUNT_OFFER_ID_DESC',
  AcceptedOffersDistinctCountServiceAgreementIdAsc = 'ACCEPTED_OFFERS_DISTINCT_COUNT_SERVICE_AGREEMENT_ID_ASC',
  AcceptedOffersDistinctCountServiceAgreementIdDesc = 'ACCEPTED_OFFERS_DISTINCT_COUNT_SERVICE_AGREEMENT_ID_DESC',
  AcceptedOffersMaxBlockRangeAsc = 'ACCEPTED_OFFERS_MAX_BLOCK_RANGE_ASC',
  AcceptedOffersMaxBlockRangeDesc = 'ACCEPTED_OFFERS_MAX_BLOCK_RANGE_DESC',
  AcceptedOffersMaxCreatedBlockAsc = 'ACCEPTED_OFFERS_MAX_CREATED_BLOCK_ASC',
  AcceptedOffersMaxCreatedBlockDesc = 'ACCEPTED_OFFERS_MAX_CREATED_BLOCK_DESC',
  AcceptedOffersMaxIdAsc = 'ACCEPTED_OFFERS_MAX_ID_ASC',
  AcceptedOffersMaxIdDesc = 'ACCEPTED_OFFERS_MAX_ID_DESC',
  AcceptedOffersMaxIndexerIdAsc = 'ACCEPTED_OFFERS_MAX_INDEXER_ID_ASC',
  AcceptedOffersMaxIndexerIdDesc = 'ACCEPTED_OFFERS_MAX_INDEXER_ID_DESC',
  AcceptedOffersMaxLastEventAsc = 'ACCEPTED_OFFERS_MAX_LAST_EVENT_ASC',
  AcceptedOffersMaxLastEventDesc = 'ACCEPTED_OFFERS_MAX_LAST_EVENT_DESC',
  AcceptedOffersMaxOfferIdAsc = 'ACCEPTED_OFFERS_MAX_OFFER_ID_ASC',
  AcceptedOffersMaxOfferIdDesc = 'ACCEPTED_OFFERS_MAX_OFFER_ID_DESC',
  AcceptedOffersMaxServiceAgreementIdAsc = 'ACCEPTED_OFFERS_MAX_SERVICE_AGREEMENT_ID_ASC',
  AcceptedOffersMaxServiceAgreementIdDesc = 'ACCEPTED_OFFERS_MAX_SERVICE_AGREEMENT_ID_DESC',
  AcceptedOffersMinBlockRangeAsc = 'ACCEPTED_OFFERS_MIN_BLOCK_RANGE_ASC',
  AcceptedOffersMinBlockRangeDesc = 'ACCEPTED_OFFERS_MIN_BLOCK_RANGE_DESC',
  AcceptedOffersMinCreatedBlockAsc = 'ACCEPTED_OFFERS_MIN_CREATED_BLOCK_ASC',
  AcceptedOffersMinCreatedBlockDesc = 'ACCEPTED_OFFERS_MIN_CREATED_BLOCK_DESC',
  AcceptedOffersMinIdAsc = 'ACCEPTED_OFFERS_MIN_ID_ASC',
  AcceptedOffersMinIdDesc = 'ACCEPTED_OFFERS_MIN_ID_DESC',
  AcceptedOffersMinIndexerIdAsc = 'ACCEPTED_OFFERS_MIN_INDEXER_ID_ASC',
  AcceptedOffersMinIndexerIdDesc = 'ACCEPTED_OFFERS_MIN_INDEXER_ID_DESC',
  AcceptedOffersMinLastEventAsc = 'ACCEPTED_OFFERS_MIN_LAST_EVENT_ASC',
  AcceptedOffersMinLastEventDesc = 'ACCEPTED_OFFERS_MIN_LAST_EVENT_DESC',
  AcceptedOffersMinOfferIdAsc = 'ACCEPTED_OFFERS_MIN_OFFER_ID_ASC',
  AcceptedOffersMinOfferIdDesc = 'ACCEPTED_OFFERS_MIN_OFFER_ID_DESC',
  AcceptedOffersMinServiceAgreementIdAsc = 'ACCEPTED_OFFERS_MIN_SERVICE_AGREEMENT_ID_ASC',
  AcceptedOffersMinServiceAgreementIdDesc = 'ACCEPTED_OFFERS_MIN_SERVICE_AGREEMENT_ID_DESC',
  AcceptedOffersStddevPopulationBlockRangeAsc = 'ACCEPTED_OFFERS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  AcceptedOffersStddevPopulationBlockRangeDesc = 'ACCEPTED_OFFERS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  AcceptedOffersStddevPopulationCreatedBlockAsc = 'ACCEPTED_OFFERS_STDDEV_POPULATION_CREATED_BLOCK_ASC',
  AcceptedOffersStddevPopulationCreatedBlockDesc = 'ACCEPTED_OFFERS_STDDEV_POPULATION_CREATED_BLOCK_DESC',
  AcceptedOffersStddevPopulationIdAsc = 'ACCEPTED_OFFERS_STDDEV_POPULATION_ID_ASC',
  AcceptedOffersStddevPopulationIdDesc = 'ACCEPTED_OFFERS_STDDEV_POPULATION_ID_DESC',
  AcceptedOffersStddevPopulationIndexerIdAsc = 'ACCEPTED_OFFERS_STDDEV_POPULATION_INDEXER_ID_ASC',
  AcceptedOffersStddevPopulationIndexerIdDesc = 'ACCEPTED_OFFERS_STDDEV_POPULATION_INDEXER_ID_DESC',
  AcceptedOffersStddevPopulationLastEventAsc = 'ACCEPTED_OFFERS_STDDEV_POPULATION_LAST_EVENT_ASC',
  AcceptedOffersStddevPopulationLastEventDesc = 'ACCEPTED_OFFERS_STDDEV_POPULATION_LAST_EVENT_DESC',
  AcceptedOffersStddevPopulationOfferIdAsc = 'ACCEPTED_OFFERS_STDDEV_POPULATION_OFFER_ID_ASC',
  AcceptedOffersStddevPopulationOfferIdDesc = 'ACCEPTED_OFFERS_STDDEV_POPULATION_OFFER_ID_DESC',
  AcceptedOffersStddevPopulationServiceAgreementIdAsc = 'ACCEPTED_OFFERS_STDDEV_POPULATION_SERVICE_AGREEMENT_ID_ASC',
  AcceptedOffersStddevPopulationServiceAgreementIdDesc = 'ACCEPTED_OFFERS_STDDEV_POPULATION_SERVICE_AGREEMENT_ID_DESC',
  AcceptedOffersStddevSampleBlockRangeAsc = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  AcceptedOffersStddevSampleBlockRangeDesc = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  AcceptedOffersStddevSampleCreatedBlockAsc = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_CREATED_BLOCK_ASC',
  AcceptedOffersStddevSampleCreatedBlockDesc = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_CREATED_BLOCK_DESC',
  AcceptedOffersStddevSampleIdAsc = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_ID_ASC',
  AcceptedOffersStddevSampleIdDesc = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_ID_DESC',
  AcceptedOffersStddevSampleIndexerIdAsc = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_INDEXER_ID_ASC',
  AcceptedOffersStddevSampleIndexerIdDesc = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_INDEXER_ID_DESC',
  AcceptedOffersStddevSampleLastEventAsc = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_LAST_EVENT_ASC',
  AcceptedOffersStddevSampleLastEventDesc = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_LAST_EVENT_DESC',
  AcceptedOffersStddevSampleOfferIdAsc = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_OFFER_ID_ASC',
  AcceptedOffersStddevSampleOfferIdDesc = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_OFFER_ID_DESC',
  AcceptedOffersStddevSampleServiceAgreementIdAsc = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_SERVICE_AGREEMENT_ID_ASC',
  AcceptedOffersStddevSampleServiceAgreementIdDesc = 'ACCEPTED_OFFERS_STDDEV_SAMPLE_SERVICE_AGREEMENT_ID_DESC',
  AcceptedOffersSumBlockRangeAsc = 'ACCEPTED_OFFERS_SUM_BLOCK_RANGE_ASC',
  AcceptedOffersSumBlockRangeDesc = 'ACCEPTED_OFFERS_SUM_BLOCK_RANGE_DESC',
  AcceptedOffersSumCreatedBlockAsc = 'ACCEPTED_OFFERS_SUM_CREATED_BLOCK_ASC',
  AcceptedOffersSumCreatedBlockDesc = 'ACCEPTED_OFFERS_SUM_CREATED_BLOCK_DESC',
  AcceptedOffersSumIdAsc = 'ACCEPTED_OFFERS_SUM_ID_ASC',
  AcceptedOffersSumIdDesc = 'ACCEPTED_OFFERS_SUM_ID_DESC',
  AcceptedOffersSumIndexerIdAsc = 'ACCEPTED_OFFERS_SUM_INDEXER_ID_ASC',
  AcceptedOffersSumIndexerIdDesc = 'ACCEPTED_OFFERS_SUM_INDEXER_ID_DESC',
  AcceptedOffersSumLastEventAsc = 'ACCEPTED_OFFERS_SUM_LAST_EVENT_ASC',
  AcceptedOffersSumLastEventDesc = 'ACCEPTED_OFFERS_SUM_LAST_EVENT_DESC',
  AcceptedOffersSumOfferIdAsc = 'ACCEPTED_OFFERS_SUM_OFFER_ID_ASC',
  AcceptedOffersSumOfferIdDesc = 'ACCEPTED_OFFERS_SUM_OFFER_ID_DESC',
  AcceptedOffersSumServiceAgreementIdAsc = 'ACCEPTED_OFFERS_SUM_SERVICE_AGREEMENT_ID_ASC',
  AcceptedOffersSumServiceAgreementIdDesc = 'ACCEPTED_OFFERS_SUM_SERVICE_AGREEMENT_ID_DESC',
  AcceptedOffersVariancePopulationBlockRangeAsc = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  AcceptedOffersVariancePopulationBlockRangeDesc = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  AcceptedOffersVariancePopulationCreatedBlockAsc = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_CREATED_BLOCK_ASC',
  AcceptedOffersVariancePopulationCreatedBlockDesc = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_CREATED_BLOCK_DESC',
  AcceptedOffersVariancePopulationIdAsc = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_ID_ASC',
  AcceptedOffersVariancePopulationIdDesc = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_ID_DESC',
  AcceptedOffersVariancePopulationIndexerIdAsc = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_INDEXER_ID_ASC',
  AcceptedOffersVariancePopulationIndexerIdDesc = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_INDEXER_ID_DESC',
  AcceptedOffersVariancePopulationLastEventAsc = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_LAST_EVENT_ASC',
  AcceptedOffersVariancePopulationLastEventDesc = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_LAST_EVENT_DESC',
  AcceptedOffersVariancePopulationOfferIdAsc = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_OFFER_ID_ASC',
  AcceptedOffersVariancePopulationOfferIdDesc = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_OFFER_ID_DESC',
  AcceptedOffersVariancePopulationServiceAgreementIdAsc = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_SERVICE_AGREEMENT_ID_ASC',
  AcceptedOffersVariancePopulationServiceAgreementIdDesc = 'ACCEPTED_OFFERS_VARIANCE_POPULATION_SERVICE_AGREEMENT_ID_DESC',
  AcceptedOffersVarianceSampleBlockRangeAsc = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  AcceptedOffersVarianceSampleBlockRangeDesc = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  AcceptedOffersVarianceSampleCreatedBlockAsc = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_CREATED_BLOCK_ASC',
  AcceptedOffersVarianceSampleCreatedBlockDesc = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_CREATED_BLOCK_DESC',
  AcceptedOffersVarianceSampleIdAsc = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_ID_ASC',
  AcceptedOffersVarianceSampleIdDesc = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_ID_DESC',
  AcceptedOffersVarianceSampleIndexerIdAsc = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_INDEXER_ID_ASC',
  AcceptedOffersVarianceSampleIndexerIdDesc = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_INDEXER_ID_DESC',
  AcceptedOffersVarianceSampleLastEventAsc = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_LAST_EVENT_ASC',
  AcceptedOffersVarianceSampleLastEventDesc = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_LAST_EVENT_DESC',
  AcceptedOffersVarianceSampleOfferIdAsc = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_OFFER_ID_ASC',
  AcceptedOffersVarianceSampleOfferIdDesc = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_OFFER_ID_DESC',
  AcceptedOffersVarianceSampleServiceAgreementIdAsc = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_SERVICE_AGREEMENT_ID_ASC',
  AcceptedOffersVarianceSampleServiceAgreementIdDesc = 'ACCEPTED_OFFERS_VARIANCE_SAMPLE_SERVICE_AGREEMENT_ID_DESC',
  ConsumerAddressAsc = 'CONSUMER_ADDRESS_ASC',
  ConsumerAddressDesc = 'CONSUMER_ADDRESS_DESC',
  CreatedBlockAsc = 'CREATED_BLOCK_ASC',
  CreatedBlockDesc = 'CREATED_BLOCK_DESC',
  DeploymentByDeploymentIdCreatedBlockAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_ASC',
  DeploymentByDeploymentIdCreatedBlockDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_DESC',
  DeploymentByDeploymentIdCreatedTimestampAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_ASC',
  DeploymentByDeploymentIdCreatedTimestampDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_DESC',
  DeploymentByDeploymentIdIdAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__ID_ASC',
  DeploymentByDeploymentIdIdDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__ID_DESC',
  DeploymentByDeploymentIdLastEventAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_ASC',
  DeploymentByDeploymentIdLastEventDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_DESC',
  DeploymentByDeploymentIdMetadataAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_ASC',
  DeploymentByDeploymentIdMetadataDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_DESC',
  DeploymentByDeploymentIdProjectIdAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_ASC',
  DeploymentByDeploymentIdProjectIdDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_DESC',
  DeploymentIdAsc = 'DEPLOYMENT_ID_ASC',
  DeploymentIdDesc = 'DEPLOYMENT_ID_DESC',
  EndTimeAsc = 'END_TIME_ASC',
  EndTimeDesc = 'END_TIME_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  IndexerAddressAsc = 'INDEXER_ADDRESS_ASC',
  IndexerAddressDesc = 'INDEXER_ADDRESS_DESC',
  LastEventAsc = 'LAST_EVENT_ASC',
  LastEventDesc = 'LAST_EVENT_DESC',
  LockedAmountAsc = 'LOCKED_AMOUNT_ASC',
  LockedAmountDesc = 'LOCKED_AMOUNT_DESC',
  Natural = 'NATURAL',
  PeriodAsc = 'PERIOD_ASC',
  PeriodDesc = 'PERIOD_DESC',
  PlanTemplateByPlanTemplateIdActiveAsc = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__ACTIVE_ASC',
  PlanTemplateByPlanTemplateIdActiveDesc = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__ACTIVE_DESC',
  PlanTemplateByPlanTemplateIdCreatedBlockAsc = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__CREATED_BLOCK_ASC',
  PlanTemplateByPlanTemplateIdCreatedBlockDesc = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__CREATED_BLOCK_DESC',
  PlanTemplateByPlanTemplateIdDailyReqCapAsc = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__DAILY_REQ_CAP_ASC',
  PlanTemplateByPlanTemplateIdDailyReqCapDesc = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__DAILY_REQ_CAP_DESC',
  PlanTemplateByPlanTemplateIdIdAsc = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__ID_ASC',
  PlanTemplateByPlanTemplateIdIdDesc = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__ID_DESC',
  PlanTemplateByPlanTemplateIdLastEventAsc = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__LAST_EVENT_ASC',
  PlanTemplateByPlanTemplateIdLastEventDesc = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__LAST_EVENT_DESC',
  PlanTemplateByPlanTemplateIdMetadataAsc = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__METADATA_ASC',
  PlanTemplateByPlanTemplateIdMetadataDesc = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__METADATA_DESC',
  PlanTemplateByPlanTemplateIdPeriodAsc = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__PERIOD_ASC',
  PlanTemplateByPlanTemplateIdPeriodDesc = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__PERIOD_DESC',
  PlanTemplateByPlanTemplateIdPriceTokenAsc = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__PRICE_TOKEN_ASC',
  PlanTemplateByPlanTemplateIdPriceTokenDesc = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__PRICE_TOKEN_DESC',
  PlanTemplateByPlanTemplateIdRateLimitAsc = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__RATE_LIMIT_ASC',
  PlanTemplateByPlanTemplateIdRateLimitDesc = 'PLAN_TEMPLATE_BY_PLAN_TEMPLATE_ID__RATE_LIMIT_DESC',
  PlanTemplateIdAsc = 'PLAN_TEMPLATE_ID_ASC',
  PlanTemplateIdDesc = 'PLAN_TEMPLATE_ID_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  StartTimeAsc = 'START_TIME_ASC',
  StartTimeDesc = 'START_TIME_DESC'
}

export enum ServiceStatus {
  Ready = 'READY',
  Terminated = 'TERMINATED'
}

/** A filter to be used against ServiceStatus fields. All fields are combined with a logical ‘and.’ */
export type ServiceStatusFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: InputMaybe<ServiceStatus>;
  /** Equal to the specified value. */
  equalTo?: InputMaybe<ServiceStatus>;
  /** Greater than the specified value. */
  greaterThan?: InputMaybe<ServiceStatus>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: InputMaybe<ServiceStatus>;
  /** Included in the specified list. */
  in?: InputMaybe<Array<ServiceStatus>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: InputMaybe<Scalars['Boolean']['input']>;
  /** Less than the specified value. */
  lessThan?: InputMaybe<ServiceStatus>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: InputMaybe<ServiceStatus>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: InputMaybe<ServiceStatus>;
  /** Not equal to the specified value. */
  notEqualTo?: InputMaybe<ServiceStatus>;
  /** Not included in the specified list. */
  notIn?: InputMaybe<Array<ServiceStatus>>;
};

export type Sqtoken = Node & {
  __typename?: 'Sqtoken';
  circulatingSupply: Scalars['BigFloat']['output'];
  id: Scalars['String']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  /** Reads and enables pagination through a set of `TokenHolder`. */
  tokenHolders: TokenHoldersConnection;
  totalSupply: Scalars['BigFloat']['output'];
};


export type SqtokenTokenHoldersArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  blockHeight?: InputMaybe<Scalars['String']['input']>;
  distinct?: InputMaybe<Array<InputMaybe<Token_Holders_Distinct_Enum>>>;
  filter?: InputMaybe<TokenHolderFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<TokenHoldersOrderBy>>;
  orderByNull?: InputMaybe<NullOrder>;
};

export type SqtokenAggregates = {
  __typename?: 'SqtokenAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  average?: Maybe<SqtokenAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  distinctCount?: Maybe<SqtokenDistinctCountAggregates>;
  keys?: Maybe<Array<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  max?: Maybe<SqtokenMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  min?: Maybe<SqtokenMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevPopulation?: Maybe<SqtokenStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevSample?: Maybe<SqtokenStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  sum?: Maybe<SqtokenSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  variancePopulation?: Maybe<SqtokenVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  varianceSample?: Maybe<SqtokenVarianceSampleAggregates>;
};

export type SqtokenAverageAggregates = {
  __typename?: 'SqtokenAverageAggregates';
  /** Mean average of circulatingSupply across the matching connection */
  circulatingSupply?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of totalSupply across the matching connection */
  totalSupply?: Maybe<Scalars['BigFloat']['output']>;
};

export type SqtokenDistinctCountAggregates = {
  __typename?: 'SqtokenDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  _blockRange?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  _id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of circulatingSupply across the matching connection */
  circulatingSupply?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of totalSupply across the matching connection */
  totalSupply?: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `Sqtoken` object types. All fields are combined with a logical ‘and.’ */
export type SqtokenFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<SqtokenFilter>>;
  /** Filter by the object’s `circulatingSupply` field. */
  circulatingSupply?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<SqtokenFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<SqtokenFilter>>;
  /** Filter by the object’s `tokenHolders` relation. */
  tokenHolders?: InputMaybe<SqtokenToManyTokenHolderFilter>;
  /** Some related `tokenHolders` exist. */
  tokenHoldersExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `totalSupply` field. */
  totalSupply?: InputMaybe<BigFloatFilter>;
};

export type SqtokenMaxAggregates = {
  __typename?: 'SqtokenMaxAggregates';
  /** Maximum of circulatingSupply across the matching connection */
  circulatingSupply?: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of totalSupply across the matching connection */
  totalSupply?: Maybe<Scalars['BigFloat']['output']>;
};

export type SqtokenMinAggregates = {
  __typename?: 'SqtokenMinAggregates';
  /** Minimum of circulatingSupply across the matching connection */
  circulatingSupply?: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of totalSupply across the matching connection */
  totalSupply?: Maybe<Scalars['BigFloat']['output']>;
};

export type SqtokenStddevPopulationAggregates = {
  __typename?: 'SqtokenStddevPopulationAggregates';
  /** Population standard deviation of circulatingSupply across the matching connection */
  circulatingSupply?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of totalSupply across the matching connection */
  totalSupply?: Maybe<Scalars['BigFloat']['output']>;
};

export type SqtokenStddevSampleAggregates = {
  __typename?: 'SqtokenStddevSampleAggregates';
  /** Sample standard deviation of circulatingSupply across the matching connection */
  circulatingSupply?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of totalSupply across the matching connection */
  totalSupply?: Maybe<Scalars['BigFloat']['output']>;
};

export type SqtokenSumAggregates = {
  __typename?: 'SqtokenSumAggregates';
  /** Sum of circulatingSupply across the matching connection */
  circulatingSupply: Scalars['BigFloat']['output'];
  /** Sum of totalSupply across the matching connection */
  totalSupply: Scalars['BigFloat']['output'];
};

/** A filter to be used against many `TokenHolder` object types. All fields are combined with a logical ‘and.’ */
export type SqtokenToManyTokenHolderFilter = {
  /** Aggregates across related `TokenHolder` match the filter criteria. */
  aggregates?: InputMaybe<TokenHolderAggregatesFilter>;
  /** Every related `TokenHolder` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<TokenHolderFilter>;
  /** No related `TokenHolder` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<TokenHolderFilter>;
  /** Some related `TokenHolder` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<TokenHolderFilter>;
};

export type SqtokenVariancePopulationAggregates = {
  __typename?: 'SqtokenVariancePopulationAggregates';
  /** Population variance of circulatingSupply across the matching connection */
  circulatingSupply?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of totalSupply across the matching connection */
  totalSupply?: Maybe<Scalars['BigFloat']['output']>;
};

export type SqtokenVarianceSampleAggregates = {
  __typename?: 'SqtokenVarianceSampleAggregates';
  /** Sample variance of circulatingSupply across the matching connection */
  circulatingSupply?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of totalSupply across the matching connection */
  totalSupply?: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `Sqtoken` values. */
export type SqtokensConnection = {
  __typename?: 'SqtokensConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<SqtokenAggregates>;
  /** A list of edges which contains the `Sqtoken` and cursor to aid in pagination. */
  edges: Array<SqtokensEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<SqtokenAggregates>>;
  /** A list of `Sqtoken` objects. */
  nodes: Array<Maybe<Sqtoken>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Sqtoken` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Sqtoken` values. */
export type SqtokensConnectionGroupedAggregatesArgs = {
  groupBy: Array<SqtokensGroupBy>;
  having?: InputMaybe<SqtokensHavingInput>;
};

/** A `Sqtoken` edge in the connection. */
export type SqtokensEdge = {
  __typename?: 'SqtokensEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `Sqtoken` at the end of the edge. */
  node?: Maybe<Sqtoken>;
};

/** Grouping methods for `Sqtoken` for usage during aggregation. */
export enum SqtokensGroupBy {
  CirculatingSupply = 'CIRCULATING_SUPPLY',
  Id = 'ID',
  TotalSupply = 'TOTAL_SUPPLY'
}

export type SqtokensHavingAverageInput = {
  circulatingSupply?: InputMaybe<HavingBigfloatFilter>;
  totalSupply?: InputMaybe<HavingBigfloatFilter>;
};

export type SqtokensHavingDistinctCountInput = {
  circulatingSupply?: InputMaybe<HavingBigfloatFilter>;
  totalSupply?: InputMaybe<HavingBigfloatFilter>;
};

/** Conditions for `Sqtoken` aggregates. */
export type SqtokensHavingInput = {
  AND?: InputMaybe<Array<SqtokensHavingInput>>;
  OR?: InputMaybe<Array<SqtokensHavingInput>>;
  average?: InputMaybe<SqtokensHavingAverageInput>;
  distinctCount?: InputMaybe<SqtokensHavingDistinctCountInput>;
  max?: InputMaybe<SqtokensHavingMaxInput>;
  min?: InputMaybe<SqtokensHavingMinInput>;
  stddevPopulation?: InputMaybe<SqtokensHavingStddevPopulationInput>;
  stddevSample?: InputMaybe<SqtokensHavingStddevSampleInput>;
  sum?: InputMaybe<SqtokensHavingSumInput>;
  variancePopulation?: InputMaybe<SqtokensHavingVariancePopulationInput>;
  varianceSample?: InputMaybe<SqtokensHavingVarianceSampleInput>;
};

export type SqtokensHavingMaxInput = {
  circulatingSupply?: InputMaybe<HavingBigfloatFilter>;
  totalSupply?: InputMaybe<HavingBigfloatFilter>;
};

export type SqtokensHavingMinInput = {
  circulatingSupply?: InputMaybe<HavingBigfloatFilter>;
  totalSupply?: InputMaybe<HavingBigfloatFilter>;
};

export type SqtokensHavingStddevPopulationInput = {
  circulatingSupply?: InputMaybe<HavingBigfloatFilter>;
  totalSupply?: InputMaybe<HavingBigfloatFilter>;
};

export type SqtokensHavingStddevSampleInput = {
  circulatingSupply?: InputMaybe<HavingBigfloatFilter>;
  totalSupply?: InputMaybe<HavingBigfloatFilter>;
};

export type SqtokensHavingSumInput = {
  circulatingSupply?: InputMaybe<HavingBigfloatFilter>;
  totalSupply?: InputMaybe<HavingBigfloatFilter>;
};

export type SqtokensHavingVariancePopulationInput = {
  circulatingSupply?: InputMaybe<HavingBigfloatFilter>;
  totalSupply?: InputMaybe<HavingBigfloatFilter>;
};

export type SqtokensHavingVarianceSampleInput = {
  circulatingSupply?: InputMaybe<HavingBigfloatFilter>;
  totalSupply?: InputMaybe<HavingBigfloatFilter>;
};

/** Methods to use when ordering `Sqtoken`. */
export enum SqtokensOrderBy {
  CirculatingSupplyAsc = 'CIRCULATING_SUPPLY_ASC',
  CirculatingSupplyDesc = 'CIRCULATING_SUPPLY_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  TokenHoldersAverageBalanceAsc = 'TOKEN_HOLDERS_AVERAGE_BALANCE_ASC',
  TokenHoldersAverageBalanceDesc = 'TOKEN_HOLDERS_AVERAGE_BALANCE_DESC',
  TokenHoldersAverageBlockRangeAsc = 'TOKEN_HOLDERS_AVERAGE_BLOCK_RANGE_ASC',
  TokenHoldersAverageBlockRangeDesc = 'TOKEN_HOLDERS_AVERAGE_BLOCK_RANGE_DESC',
  TokenHoldersAverageIdAsc = 'TOKEN_HOLDERS_AVERAGE_ID_ASC',
  TokenHoldersAverageIdDesc = 'TOKEN_HOLDERS_AVERAGE_ID_DESC',
  TokenHoldersAverageTokenIdAsc = 'TOKEN_HOLDERS_AVERAGE_TOKEN_ID_ASC',
  TokenHoldersAverageTokenIdDesc = 'TOKEN_HOLDERS_AVERAGE_TOKEN_ID_DESC',
  TokenHoldersByTokenIdCountAsc = 'TOKEN_HOLDERS_BY_TOKEN_ID__COUNT_ASC',
  TokenHoldersByTokenIdCountDesc = 'TOKEN_HOLDERS_BY_TOKEN_ID__COUNT_DESC',
  TokenHoldersCountAsc = 'TOKEN_HOLDERS_COUNT_ASC',
  TokenHoldersCountDesc = 'TOKEN_HOLDERS_COUNT_DESC',
  TokenHoldersDistinctCountBalanceAsc = 'TOKEN_HOLDERS_DISTINCT_COUNT_BALANCE_ASC',
  TokenHoldersDistinctCountBalanceDesc = 'TOKEN_HOLDERS_DISTINCT_COUNT_BALANCE_DESC',
  TokenHoldersDistinctCountBlockRangeAsc = 'TOKEN_HOLDERS_DISTINCT_COUNT_BLOCK_RANGE_ASC',
  TokenHoldersDistinctCountBlockRangeDesc = 'TOKEN_HOLDERS_DISTINCT_COUNT_BLOCK_RANGE_DESC',
  TokenHoldersDistinctCountIdAsc = 'TOKEN_HOLDERS_DISTINCT_COUNT_ID_ASC',
  TokenHoldersDistinctCountIdDesc = 'TOKEN_HOLDERS_DISTINCT_COUNT_ID_DESC',
  TokenHoldersDistinctCountTokenIdAsc = 'TOKEN_HOLDERS_DISTINCT_COUNT_TOKEN_ID_ASC',
  TokenHoldersDistinctCountTokenIdDesc = 'TOKEN_HOLDERS_DISTINCT_COUNT_TOKEN_ID_DESC',
  TokenHoldersMaxBalanceAsc = 'TOKEN_HOLDERS_MAX_BALANCE_ASC',
  TokenHoldersMaxBalanceDesc = 'TOKEN_HOLDERS_MAX_BALANCE_DESC',
  TokenHoldersMaxBlockRangeAsc = 'TOKEN_HOLDERS_MAX_BLOCK_RANGE_ASC',
  TokenHoldersMaxBlockRangeDesc = 'TOKEN_HOLDERS_MAX_BLOCK_RANGE_DESC',
  TokenHoldersMaxIdAsc = 'TOKEN_HOLDERS_MAX_ID_ASC',
  TokenHoldersMaxIdDesc = 'TOKEN_HOLDERS_MAX_ID_DESC',
  TokenHoldersMaxTokenIdAsc = 'TOKEN_HOLDERS_MAX_TOKEN_ID_ASC',
  TokenHoldersMaxTokenIdDesc = 'TOKEN_HOLDERS_MAX_TOKEN_ID_DESC',
  TokenHoldersMinBalanceAsc = 'TOKEN_HOLDERS_MIN_BALANCE_ASC',
  TokenHoldersMinBalanceDesc = 'TOKEN_HOLDERS_MIN_BALANCE_DESC',
  TokenHoldersMinBlockRangeAsc = 'TOKEN_HOLDERS_MIN_BLOCK_RANGE_ASC',
  TokenHoldersMinBlockRangeDesc = 'TOKEN_HOLDERS_MIN_BLOCK_RANGE_DESC',
  TokenHoldersMinIdAsc = 'TOKEN_HOLDERS_MIN_ID_ASC',
  TokenHoldersMinIdDesc = 'TOKEN_HOLDERS_MIN_ID_DESC',
  TokenHoldersMinTokenIdAsc = 'TOKEN_HOLDERS_MIN_TOKEN_ID_ASC',
  TokenHoldersMinTokenIdDesc = 'TOKEN_HOLDERS_MIN_TOKEN_ID_DESC',
  TokenHoldersStddevPopulationBalanceAsc = 'TOKEN_HOLDERS_STDDEV_POPULATION_BALANCE_ASC',
  TokenHoldersStddevPopulationBalanceDesc = 'TOKEN_HOLDERS_STDDEV_POPULATION_BALANCE_DESC',
  TokenHoldersStddevPopulationBlockRangeAsc = 'TOKEN_HOLDERS_STDDEV_POPULATION_BLOCK_RANGE_ASC',
  TokenHoldersStddevPopulationBlockRangeDesc = 'TOKEN_HOLDERS_STDDEV_POPULATION_BLOCK_RANGE_DESC',
  TokenHoldersStddevPopulationIdAsc = 'TOKEN_HOLDERS_STDDEV_POPULATION_ID_ASC',
  TokenHoldersStddevPopulationIdDesc = 'TOKEN_HOLDERS_STDDEV_POPULATION_ID_DESC',
  TokenHoldersStddevPopulationTokenIdAsc = 'TOKEN_HOLDERS_STDDEV_POPULATION_TOKEN_ID_ASC',
  TokenHoldersStddevPopulationTokenIdDesc = 'TOKEN_HOLDERS_STDDEV_POPULATION_TOKEN_ID_DESC',
  TokenHoldersStddevSampleBalanceAsc = 'TOKEN_HOLDERS_STDDEV_SAMPLE_BALANCE_ASC',
  TokenHoldersStddevSampleBalanceDesc = 'TOKEN_HOLDERS_STDDEV_SAMPLE_BALANCE_DESC',
  TokenHoldersStddevSampleBlockRangeAsc = 'TOKEN_HOLDERS_STDDEV_SAMPLE_BLOCK_RANGE_ASC',
  TokenHoldersStddevSampleBlockRangeDesc = 'TOKEN_HOLDERS_STDDEV_SAMPLE_BLOCK_RANGE_DESC',
  TokenHoldersStddevSampleIdAsc = 'TOKEN_HOLDERS_STDDEV_SAMPLE_ID_ASC',
  TokenHoldersStddevSampleIdDesc = 'TOKEN_HOLDERS_STDDEV_SAMPLE_ID_DESC',
  TokenHoldersStddevSampleTokenIdAsc = 'TOKEN_HOLDERS_STDDEV_SAMPLE_TOKEN_ID_ASC',
  TokenHoldersStddevSampleTokenIdDesc = 'TOKEN_HOLDERS_STDDEV_SAMPLE_TOKEN_ID_DESC',
  TokenHoldersSumBalanceAsc = 'TOKEN_HOLDERS_SUM_BALANCE_ASC',
  TokenHoldersSumBalanceDesc = 'TOKEN_HOLDERS_SUM_BALANCE_DESC',
  TokenHoldersSumBlockRangeAsc = 'TOKEN_HOLDERS_SUM_BLOCK_RANGE_ASC',
  TokenHoldersSumBlockRangeDesc = 'TOKEN_HOLDERS_SUM_BLOCK_RANGE_DESC',
  TokenHoldersSumIdAsc = 'TOKEN_HOLDERS_SUM_ID_ASC',
  TokenHoldersSumIdDesc = 'TOKEN_HOLDERS_SUM_ID_DESC',
  TokenHoldersSumTokenIdAsc = 'TOKEN_HOLDERS_SUM_TOKEN_ID_ASC',
  TokenHoldersSumTokenIdDesc = 'TOKEN_HOLDERS_SUM_TOKEN_ID_DESC',
  TokenHoldersVariancePopulationBalanceAsc = 'TOKEN_HOLDERS_VARIANCE_POPULATION_BALANCE_ASC',
  TokenHoldersVariancePopulationBalanceDesc = 'TOKEN_HOLDERS_VARIANCE_POPULATION_BALANCE_DESC',
  TokenHoldersVariancePopulationBlockRangeAsc = 'TOKEN_HOLDERS_VARIANCE_POPULATION_BLOCK_RANGE_ASC',
  TokenHoldersVariancePopulationBlockRangeDesc = 'TOKEN_HOLDERS_VARIANCE_POPULATION_BLOCK_RANGE_DESC',
  TokenHoldersVariancePopulationIdAsc = 'TOKEN_HOLDERS_VARIANCE_POPULATION_ID_ASC',
  TokenHoldersVariancePopulationIdDesc = 'TOKEN_HOLDERS_VARIANCE_POPULATION_ID_DESC',
  TokenHoldersVariancePopulationTokenIdAsc = 'TOKEN_HOLDERS_VARIANCE_POPULATION_TOKEN_ID_ASC',
  TokenHoldersVariancePopulationTokenIdDesc = 'TOKEN_HOLDERS_VARIANCE_POPULATION_TOKEN_ID_DESC',
  TokenHoldersVarianceSampleBalanceAsc = 'TOKEN_HOLDERS_VARIANCE_SAMPLE_BALANCE_ASC',
  TokenHoldersVarianceSampleBalanceDesc = 'TOKEN_HOLDERS_VARIANCE_SAMPLE_BALANCE_DESC',
  TokenHoldersVarianceSampleBlockRangeAsc = 'TOKEN_HOLDERS_VARIANCE_SAMPLE_BLOCK_RANGE_ASC',
  TokenHoldersVarianceSampleBlockRangeDesc = 'TOKEN_HOLDERS_VARIANCE_SAMPLE_BLOCK_RANGE_DESC',
  TokenHoldersVarianceSampleIdAsc = 'TOKEN_HOLDERS_VARIANCE_SAMPLE_ID_ASC',
  TokenHoldersVarianceSampleIdDesc = 'TOKEN_HOLDERS_VARIANCE_SAMPLE_ID_DESC',
  TokenHoldersVarianceSampleTokenIdAsc = 'TOKEN_HOLDERS_VARIANCE_SAMPLE_TOKEN_ID_ASC',
  TokenHoldersVarianceSampleTokenIdDesc = 'TOKEN_HOLDERS_VARIANCE_SAMPLE_TOKEN_ID_DESC',
  TotalSupplyAsc = 'TOTAL_SUPPLY_ASC',
  TotalSupplyDesc = 'TOTAL_SUPPLY_DESC'
}

export type StateChannel = Node & {
  __typename?: 'StateChannel';
  agent?: Maybe<Scalars['String']['output']>;
  consumer: Scalars['String']['output'];
  /** Reads a single `Deployment` that is related to this `StateChannel`. */
  deployment?: Maybe<Deployment>;
  deploymentId: Scalars['String']['output'];
  expiredAt: Scalars['Datetime']['output'];
  id: Scalars['String']['output'];
  indexer: Scalars['String']['output'];
  isFinal: Scalars['Boolean']['output'];
  lastEvent?: Maybe<Scalars['String']['output']>;
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  price: Scalars['BigFloat']['output'];
  realTotal: Scalars['BigFloat']['output'];
  spent: Scalars['BigFloat']['output'];
  startTime: Scalars['Datetime']['output'];
  status: ChannelStatus;
  terminateByIndexer: Scalars['Boolean']['output'];
  terminatedAt?: Maybe<Scalars['Datetime']['output']>;
  total: Scalars['BigFloat']['output'];
};

export type StateChannelAggregates = {
  __typename?: 'StateChannelAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  average?: Maybe<StateChannelAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  distinctCount?: Maybe<StateChannelDistinctCountAggregates>;
  keys?: Maybe<Array<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  max?: Maybe<StateChannelMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  min?: Maybe<StateChannelMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevPopulation?: Maybe<StateChannelStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevSample?: Maybe<StateChannelStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  sum?: Maybe<StateChannelSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  variancePopulation?: Maybe<StateChannelVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  varianceSample?: Maybe<StateChannelVarianceSampleAggregates>;
};

/** A filter to be used against aggregates of `StateChannel` object types. */
export type StateChannelAggregatesFilter = {
  /** Mean average aggregate over matching `StateChannel` objects. */
  average?: InputMaybe<StateChannelAverageAggregateFilter>;
  /** Distinct count aggregate over matching `StateChannel` objects. */
  distinctCount?: InputMaybe<StateChannelDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `StateChannel` object to be included within the aggregate. */
  filter?: InputMaybe<StateChannelFilter>;
  /** Maximum aggregate over matching `StateChannel` objects. */
  max?: InputMaybe<StateChannelMaxAggregateFilter>;
  /** Minimum aggregate over matching `StateChannel` objects. */
  min?: InputMaybe<StateChannelMinAggregateFilter>;
  /** Population standard deviation aggregate over matching `StateChannel` objects. */
  stddevPopulation?: InputMaybe<StateChannelStddevPopulationAggregateFilter>;
  /** Sample standard deviation aggregate over matching `StateChannel` objects. */
  stddevSample?: InputMaybe<StateChannelStddevSampleAggregateFilter>;
  /** Sum aggregate over matching `StateChannel` objects. */
  sum?: InputMaybe<StateChannelSumAggregateFilter>;
  /** Population variance aggregate over matching `StateChannel` objects. */
  variancePopulation?: InputMaybe<StateChannelVariancePopulationAggregateFilter>;
  /** Sample variance aggregate over matching `StateChannel` objects. */
  varianceSample?: InputMaybe<StateChannelVarianceSampleAggregateFilter>;
};

export type StateChannelAverageAggregateFilter = {
  price?: InputMaybe<BigFloatFilter>;
  realTotal?: InputMaybe<BigFloatFilter>;
  spent?: InputMaybe<BigFloatFilter>;
  total?: InputMaybe<BigFloatFilter>;
};

export type StateChannelAverageAggregates = {
  __typename?: 'StateChannelAverageAggregates';
  /** Mean average of price across the matching connection */
  price?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of realTotal across the matching connection */
  realTotal?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of spent across the matching connection */
  spent?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of total across the matching connection */
  total?: Maybe<Scalars['BigFloat']['output']>;
};

export type StateChannelDistinctCountAggregateFilter = {
  _blockRange?: InputMaybe<BigIntFilter>;
  _id?: InputMaybe<BigIntFilter>;
  agent?: InputMaybe<BigIntFilter>;
  consumer?: InputMaybe<BigIntFilter>;
  deploymentId?: InputMaybe<BigIntFilter>;
  expiredAt?: InputMaybe<BigIntFilter>;
  id?: InputMaybe<BigIntFilter>;
  indexer?: InputMaybe<BigIntFilter>;
  isFinal?: InputMaybe<BigIntFilter>;
  lastEvent?: InputMaybe<BigIntFilter>;
  price?: InputMaybe<BigIntFilter>;
  realTotal?: InputMaybe<BigIntFilter>;
  spent?: InputMaybe<BigIntFilter>;
  startTime?: InputMaybe<BigIntFilter>;
  status?: InputMaybe<BigIntFilter>;
  terminateByIndexer?: InputMaybe<BigIntFilter>;
  terminatedAt?: InputMaybe<BigIntFilter>;
  total?: InputMaybe<BigIntFilter>;
};

export type StateChannelDistinctCountAggregates = {
  __typename?: 'StateChannelDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  _blockRange?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  _id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of agent across the matching connection */
  agent?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of consumer across the matching connection */
  consumer?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of deploymentId across the matching connection */
  deploymentId?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of expiredAt across the matching connection */
  expiredAt?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of indexer across the matching connection */
  indexer?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of isFinal across the matching connection */
  isFinal?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of lastEvent across the matching connection */
  lastEvent?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of price across the matching connection */
  price?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of realTotal across the matching connection */
  realTotal?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of spent across the matching connection */
  spent?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of startTime across the matching connection */
  startTime?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of status across the matching connection */
  status?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of terminateByIndexer across the matching connection */
  terminateByIndexer?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of terminatedAt across the matching connection */
  terminatedAt?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of total across the matching connection */
  total?: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `StateChannel` object types. All fields are combined with a logical ‘and.’ */
export type StateChannelFilter = {
  /** Filter by the object’s `agent` field. */
  agent?: InputMaybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<StateChannelFilter>>;
  /** Filter by the object’s `consumer` field. */
  consumer?: InputMaybe<StringFilter>;
  /** Filter by the object’s `deployment` relation. */
  deployment?: InputMaybe<DeploymentFilter>;
  /** Filter by the object’s `deploymentId` field. */
  deploymentId?: InputMaybe<StringFilter>;
  /** Filter by the object’s `expiredAt` field. */
  expiredAt?: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<StringFilter>;
  /** Filter by the object’s `indexer` field. */
  indexer?: InputMaybe<StringFilter>;
  /** Filter by the object’s `isFinal` field. */
  isFinal?: InputMaybe<BooleanFilter>;
  /** Filter by the object’s `lastEvent` field. */
  lastEvent?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<StateChannelFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<StateChannelFilter>>;
  /** Filter by the object’s `price` field. */
  price?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `realTotal` field. */
  realTotal?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `spent` field. */
  spent?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `startTime` field. */
  startTime?: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `status` field. */
  status?: InputMaybe<ChannelStatusFilter>;
  /** Filter by the object’s `terminateByIndexer` field. */
  terminateByIndexer?: InputMaybe<BooleanFilter>;
  /** Filter by the object’s `terminatedAt` field. */
  terminatedAt?: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `total` field. */
  total?: InputMaybe<BigFloatFilter>;
};

export type StateChannelMaxAggregateFilter = {
  price?: InputMaybe<BigFloatFilter>;
  realTotal?: InputMaybe<BigFloatFilter>;
  spent?: InputMaybe<BigFloatFilter>;
  total?: InputMaybe<BigFloatFilter>;
};

export type StateChannelMaxAggregates = {
  __typename?: 'StateChannelMaxAggregates';
  /** Maximum of price across the matching connection */
  price?: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of realTotal across the matching connection */
  realTotal?: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of spent across the matching connection */
  spent?: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of total across the matching connection */
  total?: Maybe<Scalars['BigFloat']['output']>;
};

export type StateChannelMinAggregateFilter = {
  price?: InputMaybe<BigFloatFilter>;
  realTotal?: InputMaybe<BigFloatFilter>;
  spent?: InputMaybe<BigFloatFilter>;
  total?: InputMaybe<BigFloatFilter>;
};

export type StateChannelMinAggregates = {
  __typename?: 'StateChannelMinAggregates';
  /** Minimum of price across the matching connection */
  price?: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of realTotal across the matching connection */
  realTotal?: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of spent across the matching connection */
  spent?: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of total across the matching connection */
  total?: Maybe<Scalars['BigFloat']['output']>;
};

export type StateChannelStddevPopulationAggregateFilter = {
  price?: InputMaybe<BigFloatFilter>;
  realTotal?: InputMaybe<BigFloatFilter>;
  spent?: InputMaybe<BigFloatFilter>;
  total?: InputMaybe<BigFloatFilter>;
};

export type StateChannelStddevPopulationAggregates = {
  __typename?: 'StateChannelStddevPopulationAggregates';
  /** Population standard deviation of price across the matching connection */
  price?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of realTotal across the matching connection */
  realTotal?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of spent across the matching connection */
  spent?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of total across the matching connection */
  total?: Maybe<Scalars['BigFloat']['output']>;
};

export type StateChannelStddevSampleAggregateFilter = {
  price?: InputMaybe<BigFloatFilter>;
  realTotal?: InputMaybe<BigFloatFilter>;
  spent?: InputMaybe<BigFloatFilter>;
  total?: InputMaybe<BigFloatFilter>;
};

export type StateChannelStddevSampleAggregates = {
  __typename?: 'StateChannelStddevSampleAggregates';
  /** Sample standard deviation of price across the matching connection */
  price?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of realTotal across the matching connection */
  realTotal?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of spent across the matching connection */
  spent?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of total across the matching connection */
  total?: Maybe<Scalars['BigFloat']['output']>;
};

export type StateChannelSumAggregateFilter = {
  price?: InputMaybe<BigFloatFilter>;
  realTotal?: InputMaybe<BigFloatFilter>;
  spent?: InputMaybe<BigFloatFilter>;
  total?: InputMaybe<BigFloatFilter>;
};

export type StateChannelSumAggregates = {
  __typename?: 'StateChannelSumAggregates';
  /** Sum of price across the matching connection */
  price: Scalars['BigFloat']['output'];
  /** Sum of realTotal across the matching connection */
  realTotal: Scalars['BigFloat']['output'];
  /** Sum of spent across the matching connection */
  spent: Scalars['BigFloat']['output'];
  /** Sum of total across the matching connection */
  total: Scalars['BigFloat']['output'];
};

export type StateChannelVariancePopulationAggregateFilter = {
  price?: InputMaybe<BigFloatFilter>;
  realTotal?: InputMaybe<BigFloatFilter>;
  spent?: InputMaybe<BigFloatFilter>;
  total?: InputMaybe<BigFloatFilter>;
};

export type StateChannelVariancePopulationAggregates = {
  __typename?: 'StateChannelVariancePopulationAggregates';
  /** Population variance of price across the matching connection */
  price?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of realTotal across the matching connection */
  realTotal?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of spent across the matching connection */
  spent?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of total across the matching connection */
  total?: Maybe<Scalars['BigFloat']['output']>;
};

export type StateChannelVarianceSampleAggregateFilter = {
  price?: InputMaybe<BigFloatFilter>;
  realTotal?: InputMaybe<BigFloatFilter>;
  spent?: InputMaybe<BigFloatFilter>;
  total?: InputMaybe<BigFloatFilter>;
};

export type StateChannelVarianceSampleAggregates = {
  __typename?: 'StateChannelVarianceSampleAggregates';
  /** Sample variance of price across the matching connection */
  price?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of realTotal across the matching connection */
  realTotal?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of spent across the matching connection */
  spent?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of total across the matching connection */
  total?: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `StateChannel` values. */
export type StateChannelsConnection = {
  __typename?: 'StateChannelsConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<StateChannelAggregates>;
  /** A list of edges which contains the `StateChannel` and cursor to aid in pagination. */
  edges: Array<StateChannelsEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<StateChannelAggregates>>;
  /** A list of `StateChannel` objects. */
  nodes: Array<Maybe<StateChannel>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `StateChannel` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `StateChannel` values. */
export type StateChannelsConnectionGroupedAggregatesArgs = {
  groupBy: Array<StateChannelsGroupBy>;
  having?: InputMaybe<StateChannelsHavingInput>;
};

/** A `StateChannel` edge in the connection. */
export type StateChannelsEdge = {
  __typename?: 'StateChannelsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `StateChannel` at the end of the edge. */
  node?: Maybe<StateChannel>;
};

/** Grouping methods for `StateChannel` for usage during aggregation. */
export enum StateChannelsGroupBy {
  Agent = 'AGENT',
  Consumer = 'CONSUMER',
  DeploymentId = 'DEPLOYMENT_ID',
  ExpiredAt = 'EXPIRED_AT',
  ExpiredAtTruncatedToDay = 'EXPIRED_AT_TRUNCATED_TO_DAY',
  ExpiredAtTruncatedToHour = 'EXPIRED_AT_TRUNCATED_TO_HOUR',
  Id = 'ID',
  Indexer = 'INDEXER',
  IsFinal = 'IS_FINAL',
  LastEvent = 'LAST_EVENT',
  Price = 'PRICE',
  RealTotal = 'REAL_TOTAL',
  Spent = 'SPENT',
  StartTime = 'START_TIME',
  StartTimeTruncatedToDay = 'START_TIME_TRUNCATED_TO_DAY',
  StartTimeTruncatedToHour = 'START_TIME_TRUNCATED_TO_HOUR',
  Status = 'STATUS',
  TerminatedAt = 'TERMINATED_AT',
  TerminatedAtTruncatedToDay = 'TERMINATED_AT_TRUNCATED_TO_DAY',
  TerminatedAtTruncatedToHour = 'TERMINATED_AT_TRUNCATED_TO_HOUR',
  TerminateByIndexer = 'TERMINATE_BY_INDEXER',
  Total = 'TOTAL'
}

export type StateChannelsHavingAverageInput = {
  expiredAt?: InputMaybe<HavingDatetimeFilter>;
  price?: InputMaybe<HavingBigfloatFilter>;
  realTotal?: InputMaybe<HavingBigfloatFilter>;
  spent?: InputMaybe<HavingBigfloatFilter>;
  startTime?: InputMaybe<HavingDatetimeFilter>;
  terminatedAt?: InputMaybe<HavingDatetimeFilter>;
  total?: InputMaybe<HavingBigfloatFilter>;
};

export type StateChannelsHavingDistinctCountInput = {
  expiredAt?: InputMaybe<HavingDatetimeFilter>;
  price?: InputMaybe<HavingBigfloatFilter>;
  realTotal?: InputMaybe<HavingBigfloatFilter>;
  spent?: InputMaybe<HavingBigfloatFilter>;
  startTime?: InputMaybe<HavingDatetimeFilter>;
  terminatedAt?: InputMaybe<HavingDatetimeFilter>;
  total?: InputMaybe<HavingBigfloatFilter>;
};

/** Conditions for `StateChannel` aggregates. */
export type StateChannelsHavingInput = {
  AND?: InputMaybe<Array<StateChannelsHavingInput>>;
  OR?: InputMaybe<Array<StateChannelsHavingInput>>;
  average?: InputMaybe<StateChannelsHavingAverageInput>;
  distinctCount?: InputMaybe<StateChannelsHavingDistinctCountInput>;
  max?: InputMaybe<StateChannelsHavingMaxInput>;
  min?: InputMaybe<StateChannelsHavingMinInput>;
  stddevPopulation?: InputMaybe<StateChannelsHavingStddevPopulationInput>;
  stddevSample?: InputMaybe<StateChannelsHavingStddevSampleInput>;
  sum?: InputMaybe<StateChannelsHavingSumInput>;
  variancePopulation?: InputMaybe<StateChannelsHavingVariancePopulationInput>;
  varianceSample?: InputMaybe<StateChannelsHavingVarianceSampleInput>;
};

export type StateChannelsHavingMaxInput = {
  expiredAt?: InputMaybe<HavingDatetimeFilter>;
  price?: InputMaybe<HavingBigfloatFilter>;
  realTotal?: InputMaybe<HavingBigfloatFilter>;
  spent?: InputMaybe<HavingBigfloatFilter>;
  startTime?: InputMaybe<HavingDatetimeFilter>;
  terminatedAt?: InputMaybe<HavingDatetimeFilter>;
  total?: InputMaybe<HavingBigfloatFilter>;
};

export type StateChannelsHavingMinInput = {
  expiredAt?: InputMaybe<HavingDatetimeFilter>;
  price?: InputMaybe<HavingBigfloatFilter>;
  realTotal?: InputMaybe<HavingBigfloatFilter>;
  spent?: InputMaybe<HavingBigfloatFilter>;
  startTime?: InputMaybe<HavingDatetimeFilter>;
  terminatedAt?: InputMaybe<HavingDatetimeFilter>;
  total?: InputMaybe<HavingBigfloatFilter>;
};

export type StateChannelsHavingStddevPopulationInput = {
  expiredAt?: InputMaybe<HavingDatetimeFilter>;
  price?: InputMaybe<HavingBigfloatFilter>;
  realTotal?: InputMaybe<HavingBigfloatFilter>;
  spent?: InputMaybe<HavingBigfloatFilter>;
  startTime?: InputMaybe<HavingDatetimeFilter>;
  terminatedAt?: InputMaybe<HavingDatetimeFilter>;
  total?: InputMaybe<HavingBigfloatFilter>;
};

export type StateChannelsHavingStddevSampleInput = {
  expiredAt?: InputMaybe<HavingDatetimeFilter>;
  price?: InputMaybe<HavingBigfloatFilter>;
  realTotal?: InputMaybe<HavingBigfloatFilter>;
  spent?: InputMaybe<HavingBigfloatFilter>;
  startTime?: InputMaybe<HavingDatetimeFilter>;
  terminatedAt?: InputMaybe<HavingDatetimeFilter>;
  total?: InputMaybe<HavingBigfloatFilter>;
};

export type StateChannelsHavingSumInput = {
  expiredAt?: InputMaybe<HavingDatetimeFilter>;
  price?: InputMaybe<HavingBigfloatFilter>;
  realTotal?: InputMaybe<HavingBigfloatFilter>;
  spent?: InputMaybe<HavingBigfloatFilter>;
  startTime?: InputMaybe<HavingDatetimeFilter>;
  terminatedAt?: InputMaybe<HavingDatetimeFilter>;
  total?: InputMaybe<HavingBigfloatFilter>;
};

export type StateChannelsHavingVariancePopulationInput = {
  expiredAt?: InputMaybe<HavingDatetimeFilter>;
  price?: InputMaybe<HavingBigfloatFilter>;
  realTotal?: InputMaybe<HavingBigfloatFilter>;
  spent?: InputMaybe<HavingBigfloatFilter>;
  startTime?: InputMaybe<HavingDatetimeFilter>;
  terminatedAt?: InputMaybe<HavingDatetimeFilter>;
  total?: InputMaybe<HavingBigfloatFilter>;
};

export type StateChannelsHavingVarianceSampleInput = {
  expiredAt?: InputMaybe<HavingDatetimeFilter>;
  price?: InputMaybe<HavingBigfloatFilter>;
  realTotal?: InputMaybe<HavingBigfloatFilter>;
  spent?: InputMaybe<HavingBigfloatFilter>;
  startTime?: InputMaybe<HavingDatetimeFilter>;
  terminatedAt?: InputMaybe<HavingDatetimeFilter>;
  total?: InputMaybe<HavingBigfloatFilter>;
};

/** Methods to use when ordering `StateChannel`. */
export enum StateChannelsOrderBy {
  AgentAsc = 'AGENT_ASC',
  AgentDesc = 'AGENT_DESC',
  ConsumerAsc = 'CONSUMER_ASC',
  ConsumerDesc = 'CONSUMER_DESC',
  DeploymentByDeploymentIdCreatedBlockAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_ASC',
  DeploymentByDeploymentIdCreatedBlockDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_BLOCK_DESC',
  DeploymentByDeploymentIdCreatedTimestampAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_ASC',
  DeploymentByDeploymentIdCreatedTimestampDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__CREATED_TIMESTAMP_DESC',
  DeploymentByDeploymentIdIdAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__ID_ASC',
  DeploymentByDeploymentIdIdDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__ID_DESC',
  DeploymentByDeploymentIdLastEventAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_ASC',
  DeploymentByDeploymentIdLastEventDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__LAST_EVENT_DESC',
  DeploymentByDeploymentIdMetadataAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_ASC',
  DeploymentByDeploymentIdMetadataDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__METADATA_DESC',
  DeploymentByDeploymentIdProjectIdAsc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_ASC',
  DeploymentByDeploymentIdProjectIdDesc = 'DEPLOYMENT_BY_DEPLOYMENT_ID__PROJECT_ID_DESC',
  DeploymentIdAsc = 'DEPLOYMENT_ID_ASC',
  DeploymentIdDesc = 'DEPLOYMENT_ID_DESC',
  ExpiredAtAsc = 'EXPIRED_AT_ASC',
  ExpiredAtDesc = 'EXPIRED_AT_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  IndexerAsc = 'INDEXER_ASC',
  IndexerDesc = 'INDEXER_DESC',
  IsFinalAsc = 'IS_FINAL_ASC',
  IsFinalDesc = 'IS_FINAL_DESC',
  LastEventAsc = 'LAST_EVENT_ASC',
  LastEventDesc = 'LAST_EVENT_DESC',
  Natural = 'NATURAL',
  PriceAsc = 'PRICE_ASC',
  PriceDesc = 'PRICE_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  RealTotalAsc = 'REAL_TOTAL_ASC',
  RealTotalDesc = 'REAL_TOTAL_DESC',
  SpentAsc = 'SPENT_ASC',
  SpentDesc = 'SPENT_DESC',
  StartTimeAsc = 'START_TIME_ASC',
  StartTimeDesc = 'START_TIME_DESC',
  StatusAsc = 'STATUS_ASC',
  StatusDesc = 'STATUS_DESC',
  TerminatedAtAsc = 'TERMINATED_AT_ASC',
  TerminatedAtDesc = 'TERMINATED_AT_DESC',
  TerminateByIndexerAsc = 'TERMINATE_BY_INDEXER_ASC',
  TerminateByIndexerDesc = 'TERMINATE_BY_INDEXER_DESC',
  TotalAsc = 'TOTAL_ASC',
  TotalDesc = 'TOTAL_DESC'
}

/** A filter to be used against String fields. All fields are combined with a logical ‘and.’ */
export type StringFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: InputMaybe<Scalars['String']['input']>;
  /** Not equal to the specified value, treating null like an ordinary value (case-insensitive). */
  distinctFromInsensitive?: InputMaybe<Scalars['String']['input']>;
  /** Ends with the specified string (case-sensitive). */
  endsWith?: InputMaybe<Scalars['String']['input']>;
  /** Ends with the specified string (case-insensitive). */
  endsWithInsensitive?: InputMaybe<Scalars['String']['input']>;
  /** Equal to the specified value. */
  equalTo?: InputMaybe<Scalars['String']['input']>;
  /** Equal to the specified value (case-insensitive). */
  equalToInsensitive?: InputMaybe<Scalars['String']['input']>;
  /** Greater than the specified value. */
  greaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Greater than the specified value (case-insensitive). */
  greaterThanInsensitive?: InputMaybe<Scalars['String']['input']>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: InputMaybe<Scalars['String']['input']>;
  /** Greater than or equal to the specified value (case-insensitive). */
  greaterThanOrEqualToInsensitive?: InputMaybe<Scalars['String']['input']>;
  /** Included in the specified list. */
  in?: InputMaybe<Array<Scalars['String']['input']>>;
  /** Included in the specified list (case-insensitive). */
  inInsensitive?: InputMaybe<Array<Scalars['String']['input']>>;
  /** Contains the specified string (case-sensitive). */
  includes?: InputMaybe<Scalars['String']['input']>;
  /** Contains the specified string (case-insensitive). */
  includesInsensitive?: InputMaybe<Scalars['String']['input']>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: InputMaybe<Scalars['Boolean']['input']>;
  /** Less than the specified value. */
  lessThan?: InputMaybe<Scalars['String']['input']>;
  /** Less than the specified value (case-insensitive). */
  lessThanInsensitive?: InputMaybe<Scalars['String']['input']>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: InputMaybe<Scalars['String']['input']>;
  /** Less than or equal to the specified value (case-insensitive). */
  lessThanOrEqualToInsensitive?: InputMaybe<Scalars['String']['input']>;
  /** Matches the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters. */
  like?: InputMaybe<Scalars['String']['input']>;
  /** Matches the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters. */
  likeInsensitive?: InputMaybe<Scalars['String']['input']>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: InputMaybe<Scalars['String']['input']>;
  /** Equal to the specified value, treating null like an ordinary value (case-insensitive). */
  notDistinctFromInsensitive?: InputMaybe<Scalars['String']['input']>;
  /** Does not end with the specified string (case-sensitive). */
  notEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Does not end with the specified string (case-insensitive). */
  notEndsWithInsensitive?: InputMaybe<Scalars['String']['input']>;
  /** Not equal to the specified value. */
  notEqualTo?: InputMaybe<Scalars['String']['input']>;
  /** Not equal to the specified value (case-insensitive). */
  notEqualToInsensitive?: InputMaybe<Scalars['String']['input']>;
  /** Not included in the specified list. */
  notIn?: InputMaybe<Array<Scalars['String']['input']>>;
  /** Not included in the specified list (case-insensitive). */
  notInInsensitive?: InputMaybe<Array<Scalars['String']['input']>>;
  /** Does not contain the specified string (case-sensitive). */
  notIncludes?: InputMaybe<Scalars['String']['input']>;
  /** Does not contain the specified string (case-insensitive). */
  notIncludesInsensitive?: InputMaybe<Scalars['String']['input']>;
  /** Does not match the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters. */
  notLike?: InputMaybe<Scalars['String']['input']>;
  /** Does not match the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters. */
  notLikeInsensitive?: InputMaybe<Scalars['String']['input']>;
  /** Does not start with the specified string (case-sensitive). */
  notStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Does not start with the specified string (case-insensitive). */
  notStartsWithInsensitive?: InputMaybe<Scalars['String']['input']>;
  /** Starts with the specified string (case-sensitive). */
  startsWith?: InputMaybe<Scalars['String']['input']>;
  /** Starts with the specified string (case-insensitive). */
  startsWithInsensitive?: InputMaybe<Scalars['String']['input']>;
};

export type TableEstimate = {
  __typename?: 'TableEstimate';
  estimate?: Maybe<Scalars['Int']['output']>;
  table?: Maybe<Scalars['String']['output']>;
};

export type TokenHolder = Node & {
  __typename?: 'TokenHolder';
  balance: Scalars['BigFloat']['output'];
  id: Scalars['String']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  /** Reads a single `Sqtoken` that is related to this `TokenHolder`. */
  token?: Maybe<Sqtoken>;
  tokenId: Scalars['String']['output'];
};

export type TokenHolderAggregates = {
  __typename?: 'TokenHolderAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  average?: Maybe<TokenHolderAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  distinctCount?: Maybe<TokenHolderDistinctCountAggregates>;
  keys?: Maybe<Array<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  max?: Maybe<TokenHolderMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  min?: Maybe<TokenHolderMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevPopulation?: Maybe<TokenHolderStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevSample?: Maybe<TokenHolderStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  sum?: Maybe<TokenHolderSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  variancePopulation?: Maybe<TokenHolderVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  varianceSample?: Maybe<TokenHolderVarianceSampleAggregates>;
};

/** A filter to be used against aggregates of `TokenHolder` object types. */
export type TokenHolderAggregatesFilter = {
  /** Mean average aggregate over matching `TokenHolder` objects. */
  average?: InputMaybe<TokenHolderAverageAggregateFilter>;
  /** Distinct count aggregate over matching `TokenHolder` objects. */
  distinctCount?: InputMaybe<TokenHolderDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `TokenHolder` object to be included within the aggregate. */
  filter?: InputMaybe<TokenHolderFilter>;
  /** Maximum aggregate over matching `TokenHolder` objects. */
  max?: InputMaybe<TokenHolderMaxAggregateFilter>;
  /** Minimum aggregate over matching `TokenHolder` objects. */
  min?: InputMaybe<TokenHolderMinAggregateFilter>;
  /** Population standard deviation aggregate over matching `TokenHolder` objects. */
  stddevPopulation?: InputMaybe<TokenHolderStddevPopulationAggregateFilter>;
  /** Sample standard deviation aggregate over matching `TokenHolder` objects. */
  stddevSample?: InputMaybe<TokenHolderStddevSampleAggregateFilter>;
  /** Sum aggregate over matching `TokenHolder` objects. */
  sum?: InputMaybe<TokenHolderSumAggregateFilter>;
  /** Population variance aggregate over matching `TokenHolder` objects. */
  variancePopulation?: InputMaybe<TokenHolderVariancePopulationAggregateFilter>;
  /** Sample variance aggregate over matching `TokenHolder` objects. */
  varianceSample?: InputMaybe<TokenHolderVarianceSampleAggregateFilter>;
};

export type TokenHolderAverageAggregateFilter = {
  balance?: InputMaybe<BigFloatFilter>;
};

export type TokenHolderAverageAggregates = {
  __typename?: 'TokenHolderAverageAggregates';
  /** Mean average of balance across the matching connection */
  balance?: Maybe<Scalars['BigFloat']['output']>;
};

export type TokenHolderDistinctCountAggregateFilter = {
  _blockRange?: InputMaybe<BigIntFilter>;
  _id?: InputMaybe<BigIntFilter>;
  balance?: InputMaybe<BigIntFilter>;
  id?: InputMaybe<BigIntFilter>;
  tokenId?: InputMaybe<BigIntFilter>;
};

export type TokenHolderDistinctCountAggregates = {
  __typename?: 'TokenHolderDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  _blockRange?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  _id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of balance across the matching connection */
  balance?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of tokenId across the matching connection */
  tokenId?: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `TokenHolder` object types. All fields are combined with a logical ‘and.’ */
export type TokenHolderFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<TokenHolderFilter>>;
  /** Filter by the object’s `balance` field. */
  balance?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<TokenHolderFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<TokenHolderFilter>>;
  /** Filter by the object’s `token` relation. */
  token?: InputMaybe<SqtokenFilter>;
  /** Filter by the object’s `tokenId` field. */
  tokenId?: InputMaybe<StringFilter>;
};

export type TokenHolderMaxAggregateFilter = {
  balance?: InputMaybe<BigFloatFilter>;
};

export type TokenHolderMaxAggregates = {
  __typename?: 'TokenHolderMaxAggregates';
  /** Maximum of balance across the matching connection */
  balance?: Maybe<Scalars['BigFloat']['output']>;
};

export type TokenHolderMinAggregateFilter = {
  balance?: InputMaybe<BigFloatFilter>;
};

export type TokenHolderMinAggregates = {
  __typename?: 'TokenHolderMinAggregates';
  /** Minimum of balance across the matching connection */
  balance?: Maybe<Scalars['BigFloat']['output']>;
};

export type TokenHolderStddevPopulationAggregateFilter = {
  balance?: InputMaybe<BigFloatFilter>;
};

export type TokenHolderStddevPopulationAggregates = {
  __typename?: 'TokenHolderStddevPopulationAggregates';
  /** Population standard deviation of balance across the matching connection */
  balance?: Maybe<Scalars['BigFloat']['output']>;
};

export type TokenHolderStddevSampleAggregateFilter = {
  balance?: InputMaybe<BigFloatFilter>;
};

export type TokenHolderStddevSampleAggregates = {
  __typename?: 'TokenHolderStddevSampleAggregates';
  /** Sample standard deviation of balance across the matching connection */
  balance?: Maybe<Scalars['BigFloat']['output']>;
};

export type TokenHolderSumAggregateFilter = {
  balance?: InputMaybe<BigFloatFilter>;
};

export type TokenHolderSumAggregates = {
  __typename?: 'TokenHolderSumAggregates';
  /** Sum of balance across the matching connection */
  balance: Scalars['BigFloat']['output'];
};

export type TokenHolderVariancePopulationAggregateFilter = {
  balance?: InputMaybe<BigFloatFilter>;
};

export type TokenHolderVariancePopulationAggregates = {
  __typename?: 'TokenHolderVariancePopulationAggregates';
  /** Population variance of balance across the matching connection */
  balance?: Maybe<Scalars['BigFloat']['output']>;
};

export type TokenHolderVarianceSampleAggregateFilter = {
  balance?: InputMaybe<BigFloatFilter>;
};

export type TokenHolderVarianceSampleAggregates = {
  __typename?: 'TokenHolderVarianceSampleAggregates';
  /** Sample variance of balance across the matching connection */
  balance?: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `TokenHolder` values. */
export type TokenHoldersConnection = {
  __typename?: 'TokenHoldersConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<TokenHolderAggregates>;
  /** A list of edges which contains the `TokenHolder` and cursor to aid in pagination. */
  edges: Array<TokenHoldersEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<TokenHolderAggregates>>;
  /** A list of `TokenHolder` objects. */
  nodes: Array<Maybe<TokenHolder>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `TokenHolder` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `TokenHolder` values. */
export type TokenHoldersConnectionGroupedAggregatesArgs = {
  groupBy: Array<TokenHoldersGroupBy>;
  having?: InputMaybe<TokenHoldersHavingInput>;
};

/** A `TokenHolder` edge in the connection. */
export type TokenHoldersEdge = {
  __typename?: 'TokenHoldersEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `TokenHolder` at the end of the edge. */
  node?: Maybe<TokenHolder>;
};

/** Grouping methods for `TokenHolder` for usage during aggregation. */
export enum TokenHoldersGroupBy {
  Balance = 'BALANCE',
  Id = 'ID',
  TokenId = 'TOKEN_ID'
}

export type TokenHoldersHavingAverageInput = {
  balance?: InputMaybe<HavingBigfloatFilter>;
};

export type TokenHoldersHavingDistinctCountInput = {
  balance?: InputMaybe<HavingBigfloatFilter>;
};

/** Conditions for `TokenHolder` aggregates. */
export type TokenHoldersHavingInput = {
  AND?: InputMaybe<Array<TokenHoldersHavingInput>>;
  OR?: InputMaybe<Array<TokenHoldersHavingInput>>;
  average?: InputMaybe<TokenHoldersHavingAverageInput>;
  distinctCount?: InputMaybe<TokenHoldersHavingDistinctCountInput>;
  max?: InputMaybe<TokenHoldersHavingMaxInput>;
  min?: InputMaybe<TokenHoldersHavingMinInput>;
  stddevPopulation?: InputMaybe<TokenHoldersHavingStddevPopulationInput>;
  stddevSample?: InputMaybe<TokenHoldersHavingStddevSampleInput>;
  sum?: InputMaybe<TokenHoldersHavingSumInput>;
  variancePopulation?: InputMaybe<TokenHoldersHavingVariancePopulationInput>;
  varianceSample?: InputMaybe<TokenHoldersHavingVarianceSampleInput>;
};

export type TokenHoldersHavingMaxInput = {
  balance?: InputMaybe<HavingBigfloatFilter>;
};

export type TokenHoldersHavingMinInput = {
  balance?: InputMaybe<HavingBigfloatFilter>;
};

export type TokenHoldersHavingStddevPopulationInput = {
  balance?: InputMaybe<HavingBigfloatFilter>;
};

export type TokenHoldersHavingStddevSampleInput = {
  balance?: InputMaybe<HavingBigfloatFilter>;
};

export type TokenHoldersHavingSumInput = {
  balance?: InputMaybe<HavingBigfloatFilter>;
};

export type TokenHoldersHavingVariancePopulationInput = {
  balance?: InputMaybe<HavingBigfloatFilter>;
};

export type TokenHoldersHavingVarianceSampleInput = {
  balance?: InputMaybe<HavingBigfloatFilter>;
};

/** Methods to use when ordering `TokenHolder`. */
export enum TokenHoldersOrderBy {
  BalanceAsc = 'BALANCE_ASC',
  BalanceDesc = 'BALANCE_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  SqtokenByTokenIdCirculatingSupplyAsc = 'SQTOKEN_BY_TOKEN_ID__CIRCULATING_SUPPLY_ASC',
  SqtokenByTokenIdCirculatingSupplyDesc = 'SQTOKEN_BY_TOKEN_ID__CIRCULATING_SUPPLY_DESC',
  SqtokenByTokenIdIdAsc = 'SQTOKEN_BY_TOKEN_ID__ID_ASC',
  SqtokenByTokenIdIdDesc = 'SQTOKEN_BY_TOKEN_ID__ID_DESC',
  SqtokenByTokenIdTotalSupplyAsc = 'SQTOKEN_BY_TOKEN_ID__TOTAL_SUPPLY_ASC',
  SqtokenByTokenIdTotalSupplyDesc = 'SQTOKEN_BY_TOKEN_ID__TOTAL_SUPPLY_DESC',
  TokenIdAsc = 'TOKEN_ID_ASC',
  TokenIdDesc = 'TOKEN_ID_DESC'
}

export type TotalLock = Node & {
  __typename?: 'TotalLock';
  createdBlock?: Maybe<Scalars['Int']['output']>;
  id: Scalars['String']['output'];
  lastEvent?: Maybe<Scalars['String']['output']>;
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  totalDelegation: Scalars['JSON']['output'];
  totalStake: Scalars['JSON']['output'];
};

export type TotalLockAggregates = {
  __typename?: 'TotalLockAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  average?: Maybe<TotalLockAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  distinctCount?: Maybe<TotalLockDistinctCountAggregates>;
  keys?: Maybe<Array<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  max?: Maybe<TotalLockMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  min?: Maybe<TotalLockMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevPopulation?: Maybe<TotalLockStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevSample?: Maybe<TotalLockStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  sum?: Maybe<TotalLockSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  variancePopulation?: Maybe<TotalLockVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  varianceSample?: Maybe<TotalLockVarianceSampleAggregates>;
};

export type TotalLockAverageAggregates = {
  __typename?: 'TotalLockAverageAggregates';
  /** Mean average of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
};

export type TotalLockDistinctCountAggregates = {
  __typename?: 'TotalLockDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  _blockRange?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  _id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of lastEvent across the matching connection */
  lastEvent?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of totalDelegation across the matching connection */
  totalDelegation?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of totalStake across the matching connection */
  totalStake?: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `TotalLock` object types. All fields are combined with a logical ‘and.’ */
export type TotalLockFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<TotalLockFilter>>;
  /** Filter by the object’s `createdBlock` field. */
  createdBlock?: InputMaybe<IntFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<StringFilter>;
  /** Filter by the object’s `lastEvent` field. */
  lastEvent?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<TotalLockFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<TotalLockFilter>>;
  /** Filter by the object’s `totalDelegation` field. */
  totalDelegation?: InputMaybe<JsonFilter>;
  /** Filter by the object’s `totalStake` field. */
  totalStake?: InputMaybe<JsonFilter>;
};

export type TotalLockMaxAggregates = {
  __typename?: 'TotalLockMaxAggregates';
  /** Maximum of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['Int']['output']>;
};

export type TotalLockMinAggregates = {
  __typename?: 'TotalLockMinAggregates';
  /** Minimum of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['Int']['output']>;
};

export type TotalLockStddevPopulationAggregates = {
  __typename?: 'TotalLockStddevPopulationAggregates';
  /** Population standard deviation of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
};

export type TotalLockStddevSampleAggregates = {
  __typename?: 'TotalLockStddevSampleAggregates';
  /** Sample standard deviation of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
};

export type TotalLockSumAggregates = {
  __typename?: 'TotalLockSumAggregates';
  /** Sum of createdBlock across the matching connection */
  createdBlock: Scalars['BigInt']['output'];
};

export type TotalLockVariancePopulationAggregates = {
  __typename?: 'TotalLockVariancePopulationAggregates';
  /** Population variance of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
};

export type TotalLockVarianceSampleAggregates = {
  __typename?: 'TotalLockVarianceSampleAggregates';
  /** Sample variance of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `TotalLock` values. */
export type TotalLocksConnection = {
  __typename?: 'TotalLocksConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<TotalLockAggregates>;
  /** A list of edges which contains the `TotalLock` and cursor to aid in pagination. */
  edges: Array<TotalLocksEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<TotalLockAggregates>>;
  /** A list of `TotalLock` objects. */
  nodes: Array<Maybe<TotalLock>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `TotalLock` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `TotalLock` values. */
export type TotalLocksConnectionGroupedAggregatesArgs = {
  groupBy: Array<TotalLocksGroupBy>;
  having?: InputMaybe<TotalLocksHavingInput>;
};

/** A `TotalLock` edge in the connection. */
export type TotalLocksEdge = {
  __typename?: 'TotalLocksEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `TotalLock` at the end of the edge. */
  node?: Maybe<TotalLock>;
};

/** Grouping methods for `TotalLock` for usage during aggregation. */
export enum TotalLocksGroupBy {
  CreatedBlock = 'CREATED_BLOCK',
  Id = 'ID',
  LastEvent = 'LAST_EVENT',
  TotalDelegation = 'TOTAL_DELEGATION',
  TotalStake = 'TOTAL_STAKE'
}

export type TotalLocksHavingAverageInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
};

export type TotalLocksHavingDistinctCountInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
};

/** Conditions for `TotalLock` aggregates. */
export type TotalLocksHavingInput = {
  AND?: InputMaybe<Array<TotalLocksHavingInput>>;
  OR?: InputMaybe<Array<TotalLocksHavingInput>>;
  average?: InputMaybe<TotalLocksHavingAverageInput>;
  distinctCount?: InputMaybe<TotalLocksHavingDistinctCountInput>;
  max?: InputMaybe<TotalLocksHavingMaxInput>;
  min?: InputMaybe<TotalLocksHavingMinInput>;
  stddevPopulation?: InputMaybe<TotalLocksHavingStddevPopulationInput>;
  stddevSample?: InputMaybe<TotalLocksHavingStddevSampleInput>;
  sum?: InputMaybe<TotalLocksHavingSumInput>;
  variancePopulation?: InputMaybe<TotalLocksHavingVariancePopulationInput>;
  varianceSample?: InputMaybe<TotalLocksHavingVarianceSampleInput>;
};

export type TotalLocksHavingMaxInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
};

export type TotalLocksHavingMinInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
};

export type TotalLocksHavingStddevPopulationInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
};

export type TotalLocksHavingStddevSampleInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
};

export type TotalLocksHavingSumInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
};

export type TotalLocksHavingVariancePopulationInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
};

export type TotalLocksHavingVarianceSampleInput = {
  createdBlock?: InputMaybe<HavingIntFilter>;
};

/** Methods to use when ordering `TotalLock`. */
export enum TotalLocksOrderBy {
  CreatedBlockAsc = 'CREATED_BLOCK_ASC',
  CreatedBlockDesc = 'CREATED_BLOCK_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  LastEventAsc = 'LAST_EVENT_ASC',
  LastEventDesc = 'LAST_EVENT_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  TotalDelegationAsc = 'TOTAL_DELEGATION_ASC',
  TotalDelegationDesc = 'TOTAL_DELEGATION_DESC',
  TotalStakeAsc = 'TOTAL_STAKE_ASC',
  TotalStakeDesc = 'TOTAL_STAKE_DESC'
}

export type Transfer = Node & {
  __typename?: 'Transfer';
  amount: Scalars['BigFloat']['output'];
  blockheight: Scalars['BigFloat']['output'];
  from: Scalars['String']['output'];
  id: Scalars['String']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  timestamp: Scalars['Datetime']['output'];
  to: Scalars['String']['output'];
  txHash: Scalars['String']['output'];
};

export type TransferAggregates = {
  __typename?: 'TransferAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  average?: Maybe<TransferAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  distinctCount?: Maybe<TransferDistinctCountAggregates>;
  keys?: Maybe<Array<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  max?: Maybe<TransferMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  min?: Maybe<TransferMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevPopulation?: Maybe<TransferStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevSample?: Maybe<TransferStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  sum?: Maybe<TransferSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  variancePopulation?: Maybe<TransferVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  varianceSample?: Maybe<TransferVarianceSampleAggregates>;
};

export type TransferAverageAggregates = {
  __typename?: 'TransferAverageAggregates';
  /** Mean average of amount across the matching connection */
  amount?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of blockheight across the matching connection */
  blockheight?: Maybe<Scalars['BigFloat']['output']>;
};

export type TransferDistinctCountAggregates = {
  __typename?: 'TransferDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  _blockRange?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  _id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of amount across the matching connection */
  amount?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of blockheight across the matching connection */
  blockheight?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of from across the matching connection */
  from?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of timestamp across the matching connection */
  timestamp?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of to across the matching connection */
  to?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of txHash across the matching connection */
  txHash?: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `Transfer` object types. All fields are combined with a logical ‘and.’ */
export type TransferFilter = {
  /** Filter by the object’s `amount` field. */
  amount?: InputMaybe<BigFloatFilter>;
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<TransferFilter>>;
  /** Filter by the object’s `blockheight` field. */
  blockheight?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `from` field. */
  from?: InputMaybe<StringFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<TransferFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<TransferFilter>>;
  /** Filter by the object’s `timestamp` field. */
  timestamp?: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `to` field. */
  to?: InputMaybe<StringFilter>;
  /** Filter by the object’s `txHash` field. */
  txHash?: InputMaybe<StringFilter>;
};

export type TransferMaxAggregates = {
  __typename?: 'TransferMaxAggregates';
  /** Maximum of amount across the matching connection */
  amount?: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of blockheight across the matching connection */
  blockheight?: Maybe<Scalars['BigFloat']['output']>;
};

export type TransferMinAggregates = {
  __typename?: 'TransferMinAggregates';
  /** Minimum of amount across the matching connection */
  amount?: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of blockheight across the matching connection */
  blockheight?: Maybe<Scalars['BigFloat']['output']>;
};

export type TransferStddevPopulationAggregates = {
  __typename?: 'TransferStddevPopulationAggregates';
  /** Population standard deviation of amount across the matching connection */
  amount?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of blockheight across the matching connection */
  blockheight?: Maybe<Scalars['BigFloat']['output']>;
};

export type TransferStddevSampleAggregates = {
  __typename?: 'TransferStddevSampleAggregates';
  /** Sample standard deviation of amount across the matching connection */
  amount?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of blockheight across the matching connection */
  blockheight?: Maybe<Scalars['BigFloat']['output']>;
};

export type TransferSumAggregates = {
  __typename?: 'TransferSumAggregates';
  /** Sum of amount across the matching connection */
  amount: Scalars['BigFloat']['output'];
  /** Sum of blockheight across the matching connection */
  blockheight: Scalars['BigFloat']['output'];
};

export type TransferVariancePopulationAggregates = {
  __typename?: 'TransferVariancePopulationAggregates';
  /** Population variance of amount across the matching connection */
  amount?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of blockheight across the matching connection */
  blockheight?: Maybe<Scalars['BigFloat']['output']>;
};

export type TransferVarianceSampleAggregates = {
  __typename?: 'TransferVarianceSampleAggregates';
  /** Sample variance of amount across the matching connection */
  amount?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of blockheight across the matching connection */
  blockheight?: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `Transfer` values. */
export type TransfersConnection = {
  __typename?: 'TransfersConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<TransferAggregates>;
  /** A list of edges which contains the `Transfer` and cursor to aid in pagination. */
  edges: Array<TransfersEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<TransferAggregates>>;
  /** A list of `Transfer` objects. */
  nodes: Array<Maybe<Transfer>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Transfer` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Transfer` values. */
export type TransfersConnectionGroupedAggregatesArgs = {
  groupBy: Array<TransfersGroupBy>;
  having?: InputMaybe<TransfersHavingInput>;
};

/** A `Transfer` edge in the connection. */
export type TransfersEdge = {
  __typename?: 'TransfersEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `Transfer` at the end of the edge. */
  node?: Maybe<Transfer>;
};

/** Grouping methods for `Transfer` for usage during aggregation. */
export enum TransfersGroupBy {
  Amount = 'AMOUNT',
  Blockheight = 'BLOCKHEIGHT',
  From = 'FROM',
  Id = 'ID',
  Timestamp = 'TIMESTAMP',
  TimestampTruncatedToDay = 'TIMESTAMP_TRUNCATED_TO_DAY',
  TimestampTruncatedToHour = 'TIMESTAMP_TRUNCATED_TO_HOUR',
  To = 'TO',
  TxHash = 'TX_HASH'
}

export type TransfersHavingAverageInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
  blockheight?: InputMaybe<HavingBigfloatFilter>;
  timestamp?: InputMaybe<HavingDatetimeFilter>;
};

export type TransfersHavingDistinctCountInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
  blockheight?: InputMaybe<HavingBigfloatFilter>;
  timestamp?: InputMaybe<HavingDatetimeFilter>;
};

/** Conditions for `Transfer` aggregates. */
export type TransfersHavingInput = {
  AND?: InputMaybe<Array<TransfersHavingInput>>;
  OR?: InputMaybe<Array<TransfersHavingInput>>;
  average?: InputMaybe<TransfersHavingAverageInput>;
  distinctCount?: InputMaybe<TransfersHavingDistinctCountInput>;
  max?: InputMaybe<TransfersHavingMaxInput>;
  min?: InputMaybe<TransfersHavingMinInput>;
  stddevPopulation?: InputMaybe<TransfersHavingStddevPopulationInput>;
  stddevSample?: InputMaybe<TransfersHavingStddevSampleInput>;
  sum?: InputMaybe<TransfersHavingSumInput>;
  variancePopulation?: InputMaybe<TransfersHavingVariancePopulationInput>;
  varianceSample?: InputMaybe<TransfersHavingVarianceSampleInput>;
};

export type TransfersHavingMaxInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
  blockheight?: InputMaybe<HavingBigfloatFilter>;
  timestamp?: InputMaybe<HavingDatetimeFilter>;
};

export type TransfersHavingMinInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
  blockheight?: InputMaybe<HavingBigfloatFilter>;
  timestamp?: InputMaybe<HavingDatetimeFilter>;
};

export type TransfersHavingStddevPopulationInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
  blockheight?: InputMaybe<HavingBigfloatFilter>;
  timestamp?: InputMaybe<HavingDatetimeFilter>;
};

export type TransfersHavingStddevSampleInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
  blockheight?: InputMaybe<HavingBigfloatFilter>;
  timestamp?: InputMaybe<HavingDatetimeFilter>;
};

export type TransfersHavingSumInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
  blockheight?: InputMaybe<HavingBigfloatFilter>;
  timestamp?: InputMaybe<HavingDatetimeFilter>;
};

export type TransfersHavingVariancePopulationInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
  blockheight?: InputMaybe<HavingBigfloatFilter>;
  timestamp?: InputMaybe<HavingDatetimeFilter>;
};

export type TransfersHavingVarianceSampleInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
  blockheight?: InputMaybe<HavingBigfloatFilter>;
  timestamp?: InputMaybe<HavingDatetimeFilter>;
};

/** Methods to use when ordering `Transfer`. */
export enum TransfersOrderBy {
  AmountAsc = 'AMOUNT_ASC',
  AmountDesc = 'AMOUNT_DESC',
  BlockheightAsc = 'BLOCKHEIGHT_ASC',
  BlockheightDesc = 'BLOCKHEIGHT_DESC',
  FromAsc = 'FROM_ASC',
  FromDesc = 'FROM_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  TimestampAsc = 'TIMESTAMP_ASC',
  TimestampDesc = 'TIMESTAMP_DESC',
  ToAsc = 'TO_ASC',
  ToDesc = 'TO_DESC',
  TxHashAsc = 'TX_HASH_ASC',
  TxHashDesc = 'TX_HASH_DESC'
}

export type UnclaimedReward = Node & {
  __typename?: 'UnclaimedReward';
  amount: Scalars['BigFloat']['output'];
  createdBlock?: Maybe<Scalars['Int']['output']>;
  /** Reads a single `Delegator` that is related to this `UnclaimedReward`. */
  delegator?: Maybe<Delegator>;
  delegatorAddress: Scalars['String']['output'];
  delegatorId?: Maybe<Scalars['String']['output']>;
  id: Scalars['String']['output'];
  indexerAddress: Scalars['String']['output'];
  lastEvent?: Maybe<Scalars['String']['output']>;
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
};

export type UnclaimedRewardAggregates = {
  __typename?: 'UnclaimedRewardAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  average?: Maybe<UnclaimedRewardAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  distinctCount?: Maybe<UnclaimedRewardDistinctCountAggregates>;
  keys?: Maybe<Array<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  max?: Maybe<UnclaimedRewardMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  min?: Maybe<UnclaimedRewardMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevPopulation?: Maybe<UnclaimedRewardStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevSample?: Maybe<UnclaimedRewardStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  sum?: Maybe<UnclaimedRewardSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  variancePopulation?: Maybe<UnclaimedRewardVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  varianceSample?: Maybe<UnclaimedRewardVarianceSampleAggregates>;
};

/** A filter to be used against aggregates of `UnclaimedReward` object types. */
export type UnclaimedRewardAggregatesFilter = {
  /** Mean average aggregate over matching `UnclaimedReward` objects. */
  average?: InputMaybe<UnclaimedRewardAverageAggregateFilter>;
  /** Distinct count aggregate over matching `UnclaimedReward` objects. */
  distinctCount?: InputMaybe<UnclaimedRewardDistinctCountAggregateFilter>;
  /** A filter that must pass for the relevant `UnclaimedReward` object to be included within the aggregate. */
  filter?: InputMaybe<UnclaimedRewardFilter>;
  /** Maximum aggregate over matching `UnclaimedReward` objects. */
  max?: InputMaybe<UnclaimedRewardMaxAggregateFilter>;
  /** Minimum aggregate over matching `UnclaimedReward` objects. */
  min?: InputMaybe<UnclaimedRewardMinAggregateFilter>;
  /** Population standard deviation aggregate over matching `UnclaimedReward` objects. */
  stddevPopulation?: InputMaybe<UnclaimedRewardStddevPopulationAggregateFilter>;
  /** Sample standard deviation aggregate over matching `UnclaimedReward` objects. */
  stddevSample?: InputMaybe<UnclaimedRewardStddevSampleAggregateFilter>;
  /** Sum aggregate over matching `UnclaimedReward` objects. */
  sum?: InputMaybe<UnclaimedRewardSumAggregateFilter>;
  /** Population variance aggregate over matching `UnclaimedReward` objects. */
  variancePopulation?: InputMaybe<UnclaimedRewardVariancePopulationAggregateFilter>;
  /** Sample variance aggregate over matching `UnclaimedReward` objects. */
  varianceSample?: InputMaybe<UnclaimedRewardVarianceSampleAggregateFilter>;
};

export type UnclaimedRewardAverageAggregateFilter = {
  amount?: InputMaybe<BigFloatFilter>;
  createdBlock?: InputMaybe<BigFloatFilter>;
};

export type UnclaimedRewardAverageAggregates = {
  __typename?: 'UnclaimedRewardAverageAggregates';
  /** Mean average of amount across the matching connection */
  amount?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
};

export type UnclaimedRewardDistinctCountAggregateFilter = {
  _blockRange?: InputMaybe<BigIntFilter>;
  _id?: InputMaybe<BigIntFilter>;
  amount?: InputMaybe<BigIntFilter>;
  createdBlock?: InputMaybe<BigIntFilter>;
  delegatorAddress?: InputMaybe<BigIntFilter>;
  delegatorId?: InputMaybe<BigIntFilter>;
  id?: InputMaybe<BigIntFilter>;
  indexerAddress?: InputMaybe<BigIntFilter>;
  lastEvent?: InputMaybe<BigIntFilter>;
};

export type UnclaimedRewardDistinctCountAggregates = {
  __typename?: 'UnclaimedRewardDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  _blockRange?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  _id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of amount across the matching connection */
  amount?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of delegatorAddress across the matching connection */
  delegatorAddress?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of delegatorId across the matching connection */
  delegatorId?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of indexerAddress across the matching connection */
  indexerAddress?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of lastEvent across the matching connection */
  lastEvent?: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `UnclaimedReward` object types. All fields are combined with a logical ‘and.’ */
export type UnclaimedRewardFilter = {
  /** Filter by the object’s `amount` field. */
  amount?: InputMaybe<BigFloatFilter>;
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<UnclaimedRewardFilter>>;
  /** Filter by the object’s `createdBlock` field. */
  createdBlock?: InputMaybe<IntFilter>;
  /** Filter by the object’s `delegator` relation. */
  delegator?: InputMaybe<DelegatorFilter>;
  /** Filter by the object’s `delegatorAddress` field. */
  delegatorAddress?: InputMaybe<StringFilter>;
  /** A related `delegator` exists. */
  delegatorExists?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `delegatorId` field. */
  delegatorId?: InputMaybe<StringFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<StringFilter>;
  /** Filter by the object’s `indexerAddress` field. */
  indexerAddress?: InputMaybe<StringFilter>;
  /** Filter by the object’s `lastEvent` field. */
  lastEvent?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<UnclaimedRewardFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<UnclaimedRewardFilter>>;
};

export type UnclaimedRewardMaxAggregateFilter = {
  amount?: InputMaybe<BigFloatFilter>;
  createdBlock?: InputMaybe<IntFilter>;
};

export type UnclaimedRewardMaxAggregates = {
  __typename?: 'UnclaimedRewardMaxAggregates';
  /** Maximum of amount across the matching connection */
  amount?: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['Int']['output']>;
};

export type UnclaimedRewardMinAggregateFilter = {
  amount?: InputMaybe<BigFloatFilter>;
  createdBlock?: InputMaybe<IntFilter>;
};

export type UnclaimedRewardMinAggregates = {
  __typename?: 'UnclaimedRewardMinAggregates';
  /** Minimum of amount across the matching connection */
  amount?: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['Int']['output']>;
};

export type UnclaimedRewardStddevPopulationAggregateFilter = {
  amount?: InputMaybe<BigFloatFilter>;
  createdBlock?: InputMaybe<BigFloatFilter>;
};

export type UnclaimedRewardStddevPopulationAggregates = {
  __typename?: 'UnclaimedRewardStddevPopulationAggregates';
  /** Population standard deviation of amount across the matching connection */
  amount?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
};

export type UnclaimedRewardStddevSampleAggregateFilter = {
  amount?: InputMaybe<BigFloatFilter>;
  createdBlock?: InputMaybe<BigFloatFilter>;
};

export type UnclaimedRewardStddevSampleAggregates = {
  __typename?: 'UnclaimedRewardStddevSampleAggregates';
  /** Sample standard deviation of amount across the matching connection */
  amount?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
};

export type UnclaimedRewardSumAggregateFilter = {
  amount?: InputMaybe<BigFloatFilter>;
  createdBlock?: InputMaybe<BigIntFilter>;
};

export type UnclaimedRewardSumAggregates = {
  __typename?: 'UnclaimedRewardSumAggregates';
  /** Sum of amount across the matching connection */
  amount: Scalars['BigFloat']['output'];
  /** Sum of createdBlock across the matching connection */
  createdBlock: Scalars['BigInt']['output'];
};

export type UnclaimedRewardVariancePopulationAggregateFilter = {
  amount?: InputMaybe<BigFloatFilter>;
  createdBlock?: InputMaybe<BigFloatFilter>;
};

export type UnclaimedRewardVariancePopulationAggregates = {
  __typename?: 'UnclaimedRewardVariancePopulationAggregates';
  /** Population variance of amount across the matching connection */
  amount?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
};

export type UnclaimedRewardVarianceSampleAggregateFilter = {
  amount?: InputMaybe<BigFloatFilter>;
  createdBlock?: InputMaybe<BigFloatFilter>;
};

export type UnclaimedRewardVarianceSampleAggregates = {
  __typename?: 'UnclaimedRewardVarianceSampleAggregates';
  /** Sample variance of amount across the matching connection */
  amount?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `UnclaimedReward` values. */
export type UnclaimedRewardsConnection = {
  __typename?: 'UnclaimedRewardsConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<UnclaimedRewardAggregates>;
  /** A list of edges which contains the `UnclaimedReward` and cursor to aid in pagination. */
  edges: Array<UnclaimedRewardsEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<UnclaimedRewardAggregates>>;
  /** A list of `UnclaimedReward` objects. */
  nodes: Array<Maybe<UnclaimedReward>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `UnclaimedReward` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `UnclaimedReward` values. */
export type UnclaimedRewardsConnectionGroupedAggregatesArgs = {
  groupBy: Array<UnclaimedRewardsGroupBy>;
  having?: InputMaybe<UnclaimedRewardsHavingInput>;
};

/** A `UnclaimedReward` edge in the connection. */
export type UnclaimedRewardsEdge = {
  __typename?: 'UnclaimedRewardsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `UnclaimedReward` at the end of the edge. */
  node?: Maybe<UnclaimedReward>;
};

/** Grouping methods for `UnclaimedReward` for usage during aggregation. */
export enum UnclaimedRewardsGroupBy {
  Amount = 'AMOUNT',
  CreatedBlock = 'CREATED_BLOCK',
  DelegatorAddress = 'DELEGATOR_ADDRESS',
  DelegatorId = 'DELEGATOR_ID',
  Id = 'ID',
  IndexerAddress = 'INDEXER_ADDRESS',
  LastEvent = 'LAST_EVENT'
}

export type UnclaimedRewardsHavingAverageInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
  createdBlock?: InputMaybe<HavingIntFilter>;
};

export type UnclaimedRewardsHavingDistinctCountInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
  createdBlock?: InputMaybe<HavingIntFilter>;
};

/** Conditions for `UnclaimedReward` aggregates. */
export type UnclaimedRewardsHavingInput = {
  AND?: InputMaybe<Array<UnclaimedRewardsHavingInput>>;
  OR?: InputMaybe<Array<UnclaimedRewardsHavingInput>>;
  average?: InputMaybe<UnclaimedRewardsHavingAverageInput>;
  distinctCount?: InputMaybe<UnclaimedRewardsHavingDistinctCountInput>;
  max?: InputMaybe<UnclaimedRewardsHavingMaxInput>;
  min?: InputMaybe<UnclaimedRewardsHavingMinInput>;
  stddevPopulation?: InputMaybe<UnclaimedRewardsHavingStddevPopulationInput>;
  stddevSample?: InputMaybe<UnclaimedRewardsHavingStddevSampleInput>;
  sum?: InputMaybe<UnclaimedRewardsHavingSumInput>;
  variancePopulation?: InputMaybe<UnclaimedRewardsHavingVariancePopulationInput>;
  varianceSample?: InputMaybe<UnclaimedRewardsHavingVarianceSampleInput>;
};

export type UnclaimedRewardsHavingMaxInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
  createdBlock?: InputMaybe<HavingIntFilter>;
};

export type UnclaimedRewardsHavingMinInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
  createdBlock?: InputMaybe<HavingIntFilter>;
};

export type UnclaimedRewardsHavingStddevPopulationInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
  createdBlock?: InputMaybe<HavingIntFilter>;
};

export type UnclaimedRewardsHavingStddevSampleInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
  createdBlock?: InputMaybe<HavingIntFilter>;
};

export type UnclaimedRewardsHavingSumInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
  createdBlock?: InputMaybe<HavingIntFilter>;
};

export type UnclaimedRewardsHavingVariancePopulationInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
  createdBlock?: InputMaybe<HavingIntFilter>;
};

export type UnclaimedRewardsHavingVarianceSampleInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
  createdBlock?: InputMaybe<HavingIntFilter>;
};

/** Methods to use when ordering `UnclaimedReward`. */
export enum UnclaimedRewardsOrderBy {
  AmountAsc = 'AMOUNT_ASC',
  AmountDesc = 'AMOUNT_DESC',
  CreatedBlockAsc = 'CREATED_BLOCK_ASC',
  CreatedBlockDesc = 'CREATED_BLOCK_DESC',
  DelegatorAddressAsc = 'DELEGATOR_ADDRESS_ASC',
  DelegatorAddressDesc = 'DELEGATOR_ADDRESS_DESC',
  DelegatorByDelegatorIdCreatedBlockAsc = 'DELEGATOR_BY_DELEGATOR_ID__CREATED_BLOCK_ASC',
  DelegatorByDelegatorIdCreatedBlockDesc = 'DELEGATOR_BY_DELEGATOR_ID__CREATED_BLOCK_DESC',
  DelegatorByDelegatorIdExitEraAsc = 'DELEGATOR_BY_DELEGATOR_ID__EXIT_ERA_ASC',
  DelegatorByDelegatorIdExitEraDesc = 'DELEGATOR_BY_DELEGATOR_ID__EXIT_ERA_DESC',
  DelegatorByDelegatorIdIdAsc = 'DELEGATOR_BY_DELEGATOR_ID__ID_ASC',
  DelegatorByDelegatorIdIdDesc = 'DELEGATOR_BY_DELEGATOR_ID__ID_DESC',
  DelegatorByDelegatorIdLastEventAsc = 'DELEGATOR_BY_DELEGATOR_ID__LAST_EVENT_ASC',
  DelegatorByDelegatorIdLastEventDesc = 'DELEGATOR_BY_DELEGATOR_ID__LAST_EVENT_DESC',
  DelegatorByDelegatorIdStartEraAsc = 'DELEGATOR_BY_DELEGATOR_ID__START_ERA_ASC',
  DelegatorByDelegatorIdStartEraDesc = 'DELEGATOR_BY_DELEGATOR_ID__START_ERA_DESC',
  DelegatorByDelegatorIdTotalDelegationsAsc = 'DELEGATOR_BY_DELEGATOR_ID__TOTAL_DELEGATIONS_ASC',
  DelegatorByDelegatorIdTotalDelegationsDesc = 'DELEGATOR_BY_DELEGATOR_ID__TOTAL_DELEGATIONS_DESC',
  DelegatorIdAsc = 'DELEGATOR_ID_ASC',
  DelegatorIdDesc = 'DELEGATOR_ID_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  IndexerAddressAsc = 'INDEXER_ADDRESS_ASC',
  IndexerAddressDesc = 'INDEXER_ADDRESS_DESC',
  LastEventAsc = 'LAST_EVENT_ASC',
  LastEventDesc = 'LAST_EVENT_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

export type Withdraw = Node & {
  __typename?: 'Withdraw';
  amount: Scalars['BigFloat']['output'];
  blockheight: Scalars['Int']['output'];
  createAt: Scalars['Datetime']['output'];
  id: Scalars['String']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  sender: Scalars['String']['output'];
  txHash: Scalars['String']['output'];
};

export type WithdrawAggregates = {
  __typename?: 'WithdrawAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  average?: Maybe<WithdrawAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  distinctCount?: Maybe<WithdrawDistinctCountAggregates>;
  keys?: Maybe<Array<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  max?: Maybe<WithdrawMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  min?: Maybe<WithdrawMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevPopulation?: Maybe<WithdrawStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevSample?: Maybe<WithdrawStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  sum?: Maybe<WithdrawSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  variancePopulation?: Maybe<WithdrawVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  varianceSample?: Maybe<WithdrawVarianceSampleAggregates>;
};

export type WithdrawAverageAggregates = {
  __typename?: 'WithdrawAverageAggregates';
  /** Mean average of amount across the matching connection */
  amount?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of blockheight across the matching connection */
  blockheight?: Maybe<Scalars['BigFloat']['output']>;
};

export type WithdrawDistinctCountAggregates = {
  __typename?: 'WithdrawDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  _blockRange?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  _id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of amount across the matching connection */
  amount?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of blockheight across the matching connection */
  blockheight?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createAt across the matching connection */
  createAt?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of sender across the matching connection */
  sender?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of txHash across the matching connection */
  txHash?: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `Withdraw` object types. All fields are combined with a logical ‘and.’ */
export type WithdrawFilter = {
  /** Filter by the object’s `amount` field. */
  amount?: InputMaybe<BigFloatFilter>;
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<WithdrawFilter>>;
  /** Filter by the object’s `blockheight` field. */
  blockheight?: InputMaybe<IntFilter>;
  /** Filter by the object’s `createAt` field. */
  createAt?: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<WithdrawFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<WithdrawFilter>>;
  /** Filter by the object’s `sender` field. */
  sender?: InputMaybe<StringFilter>;
  /** Filter by the object’s `txHash` field. */
  txHash?: InputMaybe<StringFilter>;
};

export type WithdrawMaxAggregates = {
  __typename?: 'WithdrawMaxAggregates';
  /** Maximum of amount across the matching connection */
  amount?: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of blockheight across the matching connection */
  blockheight?: Maybe<Scalars['Int']['output']>;
};

export type WithdrawMinAggregates = {
  __typename?: 'WithdrawMinAggregates';
  /** Minimum of amount across the matching connection */
  amount?: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of blockheight across the matching connection */
  blockheight?: Maybe<Scalars['Int']['output']>;
};

export type WithdrawStddevPopulationAggregates = {
  __typename?: 'WithdrawStddevPopulationAggregates';
  /** Population standard deviation of amount across the matching connection */
  amount?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of blockheight across the matching connection */
  blockheight?: Maybe<Scalars['BigFloat']['output']>;
};

export type WithdrawStddevSampleAggregates = {
  __typename?: 'WithdrawStddevSampleAggregates';
  /** Sample standard deviation of amount across the matching connection */
  amount?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of blockheight across the matching connection */
  blockheight?: Maybe<Scalars['BigFloat']['output']>;
};

export type WithdrawSumAggregates = {
  __typename?: 'WithdrawSumAggregates';
  /** Sum of amount across the matching connection */
  amount: Scalars['BigFloat']['output'];
  /** Sum of blockheight across the matching connection */
  blockheight: Scalars['BigInt']['output'];
};

export type WithdrawVariancePopulationAggregates = {
  __typename?: 'WithdrawVariancePopulationAggregates';
  /** Population variance of amount across the matching connection */
  amount?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of blockheight across the matching connection */
  blockheight?: Maybe<Scalars['BigFloat']['output']>;
};

export type WithdrawVarianceSampleAggregates = {
  __typename?: 'WithdrawVarianceSampleAggregates';
  /** Sample variance of amount across the matching connection */
  amount?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of blockheight across the matching connection */
  blockheight?: Maybe<Scalars['BigFloat']['output']>;
};

export enum WithdrawalStatus {
  Cancelled = 'CANCELLED',
  Claimed = 'CLAIMED',
  Ongoing = 'ONGOING'
}

/** A filter to be used against WithdrawalStatus fields. All fields are combined with a logical ‘and.’ */
export type WithdrawalStatusFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: InputMaybe<WithdrawalStatus>;
  /** Equal to the specified value. */
  equalTo?: InputMaybe<WithdrawalStatus>;
  /** Greater than the specified value. */
  greaterThan?: InputMaybe<WithdrawalStatus>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: InputMaybe<WithdrawalStatus>;
  /** Included in the specified list. */
  in?: InputMaybe<Array<WithdrawalStatus>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: InputMaybe<Scalars['Boolean']['input']>;
  /** Less than the specified value. */
  lessThan?: InputMaybe<WithdrawalStatus>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: InputMaybe<WithdrawalStatus>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: InputMaybe<WithdrawalStatus>;
  /** Not equal to the specified value. */
  notEqualTo?: InputMaybe<WithdrawalStatus>;
  /** Not included in the specified list. */
  notIn?: InputMaybe<Array<WithdrawalStatus>>;
};

export enum WithdrawalType {
  Commission = 'COMMISSION',
  Merge = 'MERGE',
  Undelegation = 'UNDELEGATION',
  Unstake = 'UNSTAKE'
}

/** A filter to be used against WithdrawalType fields. All fields are combined with a logical ‘and.’ */
export type WithdrawalTypeFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: InputMaybe<WithdrawalType>;
  /** Equal to the specified value. */
  equalTo?: InputMaybe<WithdrawalType>;
  /** Greater than the specified value. */
  greaterThan?: InputMaybe<WithdrawalType>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: InputMaybe<WithdrawalType>;
  /** Included in the specified list. */
  in?: InputMaybe<Array<WithdrawalType>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: InputMaybe<Scalars['Boolean']['input']>;
  /** Less than the specified value. */
  lessThan?: InputMaybe<WithdrawalType>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: InputMaybe<WithdrawalType>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: InputMaybe<WithdrawalType>;
  /** Not equal to the specified value. */
  notEqualTo?: InputMaybe<WithdrawalType>;
  /** Not included in the specified list. */
  notIn?: InputMaybe<Array<WithdrawalType>>;
};

export type Withdrawl = Node & {
  __typename?: 'Withdrawl';
  amount: Scalars['BigFloat']['output'];
  createdBlock?: Maybe<Scalars['Int']['output']>;
  delegator: Scalars['String']['output'];
  id: Scalars['String']['output'];
  index: Scalars['BigFloat']['output'];
  indexer: Scalars['String']['output'];
  lastEvent?: Maybe<Scalars['String']['output']>;
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  startTime: Scalars['Datetime']['output'];
  status: WithdrawalStatus;
  type: WithdrawalType;
};

export type WithdrawlAggregates = {
  __typename?: 'WithdrawlAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  average?: Maybe<WithdrawlAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  distinctCount?: Maybe<WithdrawlDistinctCountAggregates>;
  keys?: Maybe<Array<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  max?: Maybe<WithdrawlMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  min?: Maybe<WithdrawlMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevPopulation?: Maybe<WithdrawlStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevSample?: Maybe<WithdrawlStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  sum?: Maybe<WithdrawlSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  variancePopulation?: Maybe<WithdrawlVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  varianceSample?: Maybe<WithdrawlVarianceSampleAggregates>;
};

export type WithdrawlAverageAggregates = {
  __typename?: 'WithdrawlAverageAggregates';
  /** Mean average of amount across the matching connection */
  amount?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
  /** Mean average of index across the matching connection */
  index?: Maybe<Scalars['BigFloat']['output']>;
};

export type WithdrawlDistinctCountAggregates = {
  __typename?: 'WithdrawlDistinctCountAggregates';
  /** Distinct count of _blockRange across the matching connection */
  _blockRange?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of _id across the matching connection */
  _id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of amount across the matching connection */
  amount?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of delegator across the matching connection */
  delegator?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of index across the matching connection */
  index?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of indexer across the matching connection */
  indexer?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of lastEvent across the matching connection */
  lastEvent?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of startTime across the matching connection */
  startTime?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of status across the matching connection */
  status?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of type across the matching connection */
  type?: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `Withdrawl` object types. All fields are combined with a logical ‘and.’ */
export type WithdrawlFilter = {
  /** Filter by the object’s `amount` field. */
  amount?: InputMaybe<BigFloatFilter>;
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<WithdrawlFilter>>;
  /** Filter by the object’s `createdBlock` field. */
  createdBlock?: InputMaybe<IntFilter>;
  /** Filter by the object’s `delegator` field. */
  delegator?: InputMaybe<StringFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<StringFilter>;
  /** Filter by the object’s `index` field. */
  index?: InputMaybe<BigFloatFilter>;
  /** Filter by the object’s `indexer` field. */
  indexer?: InputMaybe<StringFilter>;
  /** Filter by the object’s `lastEvent` field. */
  lastEvent?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<WithdrawlFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<WithdrawlFilter>>;
  /** Filter by the object’s `startTime` field. */
  startTime?: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `status` field. */
  status?: InputMaybe<WithdrawalStatusFilter>;
  /** Filter by the object’s `type` field. */
  type?: InputMaybe<WithdrawalTypeFilter>;
};

export type WithdrawlMaxAggregates = {
  __typename?: 'WithdrawlMaxAggregates';
  /** Maximum of amount across the matching connection */
  amount?: Maybe<Scalars['BigFloat']['output']>;
  /** Maximum of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['Int']['output']>;
  /** Maximum of index across the matching connection */
  index?: Maybe<Scalars['BigFloat']['output']>;
};

export type WithdrawlMinAggregates = {
  __typename?: 'WithdrawlMinAggregates';
  /** Minimum of amount across the matching connection */
  amount?: Maybe<Scalars['BigFloat']['output']>;
  /** Minimum of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['Int']['output']>;
  /** Minimum of index across the matching connection */
  index?: Maybe<Scalars['BigFloat']['output']>;
};

export type WithdrawlStddevPopulationAggregates = {
  __typename?: 'WithdrawlStddevPopulationAggregates';
  /** Population standard deviation of amount across the matching connection */
  amount?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
  /** Population standard deviation of index across the matching connection */
  index?: Maybe<Scalars['BigFloat']['output']>;
};

export type WithdrawlStddevSampleAggregates = {
  __typename?: 'WithdrawlStddevSampleAggregates';
  /** Sample standard deviation of amount across the matching connection */
  amount?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample standard deviation of index across the matching connection */
  index?: Maybe<Scalars['BigFloat']['output']>;
};

export type WithdrawlSumAggregates = {
  __typename?: 'WithdrawlSumAggregates';
  /** Sum of amount across the matching connection */
  amount: Scalars['BigFloat']['output'];
  /** Sum of createdBlock across the matching connection */
  createdBlock: Scalars['BigInt']['output'];
  /** Sum of index across the matching connection */
  index: Scalars['BigFloat']['output'];
};

export type WithdrawlVariancePopulationAggregates = {
  __typename?: 'WithdrawlVariancePopulationAggregates';
  /** Population variance of amount across the matching connection */
  amount?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
  /** Population variance of index across the matching connection */
  index?: Maybe<Scalars['BigFloat']['output']>;
};

export type WithdrawlVarianceSampleAggregates = {
  __typename?: 'WithdrawlVarianceSampleAggregates';
  /** Sample variance of amount across the matching connection */
  amount?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of createdBlock across the matching connection */
  createdBlock?: Maybe<Scalars['BigFloat']['output']>;
  /** Sample variance of index across the matching connection */
  index?: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `Withdrawl` values. */
export type WithdrawlsConnection = {
  __typename?: 'WithdrawlsConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<WithdrawlAggregates>;
  /** A list of edges which contains the `Withdrawl` and cursor to aid in pagination. */
  edges: Array<WithdrawlsEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<WithdrawlAggregates>>;
  /** A list of `Withdrawl` objects. */
  nodes: Array<Maybe<Withdrawl>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Withdrawl` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Withdrawl` values. */
export type WithdrawlsConnectionGroupedAggregatesArgs = {
  groupBy: Array<WithdrawlsGroupBy>;
  having?: InputMaybe<WithdrawlsHavingInput>;
};

/** A `Withdrawl` edge in the connection. */
export type WithdrawlsEdge = {
  __typename?: 'WithdrawlsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `Withdrawl` at the end of the edge. */
  node?: Maybe<Withdrawl>;
};

/** Grouping methods for `Withdrawl` for usage during aggregation. */
export enum WithdrawlsGroupBy {
  Amount = 'AMOUNT',
  CreatedBlock = 'CREATED_BLOCK',
  Delegator = 'DELEGATOR',
  Id = 'ID',
  Index = 'INDEX',
  Indexer = 'INDEXER',
  LastEvent = 'LAST_EVENT',
  StartTime = 'START_TIME',
  StartTimeTruncatedToDay = 'START_TIME_TRUNCATED_TO_DAY',
  StartTimeTruncatedToHour = 'START_TIME_TRUNCATED_TO_HOUR',
  Status = 'STATUS',
  Type = 'TYPE'
}

export type WithdrawlsHavingAverageInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
  createdBlock?: InputMaybe<HavingIntFilter>;
  index?: InputMaybe<HavingBigfloatFilter>;
  startTime?: InputMaybe<HavingDatetimeFilter>;
};

export type WithdrawlsHavingDistinctCountInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
  createdBlock?: InputMaybe<HavingIntFilter>;
  index?: InputMaybe<HavingBigfloatFilter>;
  startTime?: InputMaybe<HavingDatetimeFilter>;
};

/** Conditions for `Withdrawl` aggregates. */
export type WithdrawlsHavingInput = {
  AND?: InputMaybe<Array<WithdrawlsHavingInput>>;
  OR?: InputMaybe<Array<WithdrawlsHavingInput>>;
  average?: InputMaybe<WithdrawlsHavingAverageInput>;
  distinctCount?: InputMaybe<WithdrawlsHavingDistinctCountInput>;
  max?: InputMaybe<WithdrawlsHavingMaxInput>;
  min?: InputMaybe<WithdrawlsHavingMinInput>;
  stddevPopulation?: InputMaybe<WithdrawlsHavingStddevPopulationInput>;
  stddevSample?: InputMaybe<WithdrawlsHavingStddevSampleInput>;
  sum?: InputMaybe<WithdrawlsHavingSumInput>;
  variancePopulation?: InputMaybe<WithdrawlsHavingVariancePopulationInput>;
  varianceSample?: InputMaybe<WithdrawlsHavingVarianceSampleInput>;
};

export type WithdrawlsHavingMaxInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
  createdBlock?: InputMaybe<HavingIntFilter>;
  index?: InputMaybe<HavingBigfloatFilter>;
  startTime?: InputMaybe<HavingDatetimeFilter>;
};

export type WithdrawlsHavingMinInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
  createdBlock?: InputMaybe<HavingIntFilter>;
  index?: InputMaybe<HavingBigfloatFilter>;
  startTime?: InputMaybe<HavingDatetimeFilter>;
};

export type WithdrawlsHavingStddevPopulationInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
  createdBlock?: InputMaybe<HavingIntFilter>;
  index?: InputMaybe<HavingBigfloatFilter>;
  startTime?: InputMaybe<HavingDatetimeFilter>;
};

export type WithdrawlsHavingStddevSampleInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
  createdBlock?: InputMaybe<HavingIntFilter>;
  index?: InputMaybe<HavingBigfloatFilter>;
  startTime?: InputMaybe<HavingDatetimeFilter>;
};

export type WithdrawlsHavingSumInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
  createdBlock?: InputMaybe<HavingIntFilter>;
  index?: InputMaybe<HavingBigfloatFilter>;
  startTime?: InputMaybe<HavingDatetimeFilter>;
};

export type WithdrawlsHavingVariancePopulationInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
  createdBlock?: InputMaybe<HavingIntFilter>;
  index?: InputMaybe<HavingBigfloatFilter>;
  startTime?: InputMaybe<HavingDatetimeFilter>;
};

export type WithdrawlsHavingVarianceSampleInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
  createdBlock?: InputMaybe<HavingIntFilter>;
  index?: InputMaybe<HavingBigfloatFilter>;
  startTime?: InputMaybe<HavingDatetimeFilter>;
};

/** Methods to use when ordering `Withdrawl`. */
export enum WithdrawlsOrderBy {
  AmountAsc = 'AMOUNT_ASC',
  AmountDesc = 'AMOUNT_DESC',
  CreatedBlockAsc = 'CREATED_BLOCK_ASC',
  CreatedBlockDesc = 'CREATED_BLOCK_DESC',
  DelegatorAsc = 'DELEGATOR_ASC',
  DelegatorDesc = 'DELEGATOR_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  IndexerAsc = 'INDEXER_ASC',
  IndexerDesc = 'INDEXER_DESC',
  IndexAsc = 'INDEX_ASC',
  IndexDesc = 'INDEX_DESC',
  LastEventAsc = 'LAST_EVENT_ASC',
  LastEventDesc = 'LAST_EVENT_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  StartTimeAsc = 'START_TIME_ASC',
  StartTimeDesc = 'START_TIME_DESC',
  StatusAsc = 'STATUS_ASC',
  StatusDesc = 'STATUS_DESC',
  TypeAsc = 'TYPE_ASC',
  TypeDesc = 'TYPE_DESC'
}

/** A connection to a list of `Withdraw` values. */
export type WithdrawsConnection = {
  __typename?: 'WithdrawsConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<WithdrawAggregates>;
  /** A list of edges which contains the `Withdraw` and cursor to aid in pagination. */
  edges: Array<WithdrawsEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<WithdrawAggregates>>;
  /** A list of `Withdraw` objects. */
  nodes: Array<Maybe<Withdraw>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Withdraw` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `Withdraw` values. */
export type WithdrawsConnectionGroupedAggregatesArgs = {
  groupBy: Array<WithdrawsGroupBy>;
  having?: InputMaybe<WithdrawsHavingInput>;
};

/** A `Withdraw` edge in the connection. */
export type WithdrawsEdge = {
  __typename?: 'WithdrawsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `Withdraw` at the end of the edge. */
  node?: Maybe<Withdraw>;
};

/** Grouping methods for `Withdraw` for usage during aggregation. */
export enum WithdrawsGroupBy {
  Amount = 'AMOUNT',
  Blockheight = 'BLOCKHEIGHT',
  CreateAt = 'CREATE_AT',
  CreateAtTruncatedToDay = 'CREATE_AT_TRUNCATED_TO_DAY',
  CreateAtTruncatedToHour = 'CREATE_AT_TRUNCATED_TO_HOUR',
  Id = 'ID',
  Sender = 'SENDER',
  TxHash = 'TX_HASH'
}

export type WithdrawsHavingAverageInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
  blockheight?: InputMaybe<HavingIntFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
};

export type WithdrawsHavingDistinctCountInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
  blockheight?: InputMaybe<HavingIntFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
};

/** Conditions for `Withdraw` aggregates. */
export type WithdrawsHavingInput = {
  AND?: InputMaybe<Array<WithdrawsHavingInput>>;
  OR?: InputMaybe<Array<WithdrawsHavingInput>>;
  average?: InputMaybe<WithdrawsHavingAverageInput>;
  distinctCount?: InputMaybe<WithdrawsHavingDistinctCountInput>;
  max?: InputMaybe<WithdrawsHavingMaxInput>;
  min?: InputMaybe<WithdrawsHavingMinInput>;
  stddevPopulation?: InputMaybe<WithdrawsHavingStddevPopulationInput>;
  stddevSample?: InputMaybe<WithdrawsHavingStddevSampleInput>;
  sum?: InputMaybe<WithdrawsHavingSumInput>;
  variancePopulation?: InputMaybe<WithdrawsHavingVariancePopulationInput>;
  varianceSample?: InputMaybe<WithdrawsHavingVarianceSampleInput>;
};

export type WithdrawsHavingMaxInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
  blockheight?: InputMaybe<HavingIntFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
};

export type WithdrawsHavingMinInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
  blockheight?: InputMaybe<HavingIntFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
};

export type WithdrawsHavingStddevPopulationInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
  blockheight?: InputMaybe<HavingIntFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
};

export type WithdrawsHavingStddevSampleInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
  blockheight?: InputMaybe<HavingIntFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
};

export type WithdrawsHavingSumInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
  blockheight?: InputMaybe<HavingIntFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
};

export type WithdrawsHavingVariancePopulationInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
  blockheight?: InputMaybe<HavingIntFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
};

export type WithdrawsHavingVarianceSampleInput = {
  amount?: InputMaybe<HavingBigfloatFilter>;
  blockheight?: InputMaybe<HavingIntFilter>;
  createAt?: InputMaybe<HavingDatetimeFilter>;
};

/** Methods to use when ordering `Withdraw`. */
export enum WithdrawsOrderBy {
  AmountAsc = 'AMOUNT_ASC',
  AmountDesc = 'AMOUNT_DESC',
  BlockheightAsc = 'BLOCKHEIGHT_ASC',
  BlockheightDesc = 'BLOCKHEIGHT_DESC',
  CreateAtAsc = 'CREATE_AT_ASC',
  CreateAtDesc = 'CREATE_AT_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  SenderAsc = 'SENDER_ASC',
  SenderDesc = 'SENDER_DESC',
  TxHashAsc = 'TX_HASH_ASC',
  TxHashDesc = 'TX_HASH_DESC'
}

export type _Metadata = {
  __typename?: '_Metadata';
  chain?: Maybe<Scalars['String']['output']>;
  dbSize?: Maybe<Scalars['BigInt']['output']>;
  deployments?: Maybe<Scalars['JSON']['output']>;
  dynamicDatasources?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  evmChainId?: Maybe<Scalars['String']['output']>;
  genesisHash?: Maybe<Scalars['String']['output']>;
  indexerHealthy?: Maybe<Scalars['Boolean']['output']>;
  indexerNodeVersion?: Maybe<Scalars['String']['output']>;
  lastCreatedPoiHeight?: Maybe<Scalars['Int']['output']>;
  lastFinalizedVerifiedHeight?: Maybe<Scalars['Int']['output']>;
  lastProcessedHeight?: Maybe<Scalars['Int']['output']>;
  lastProcessedTimestamp?: Maybe<Scalars['Date']['output']>;
  latestSyncedPoiHeight?: Maybe<Scalars['Int']['output']>;
  queryNodeVersion?: Maybe<Scalars['String']['output']>;
  rowCountEstimate?: Maybe<Array<Maybe<TableEstimate>>>;
  specName?: Maybe<Scalars['String']['output']>;
  startHeight?: Maybe<Scalars['Int']['output']>;
  targetHeight?: Maybe<Scalars['Int']['output']>;
  unfinalizedBlocks?: Maybe<Scalars['String']['output']>;
};

export type _Metadatas = {
  __typename?: '_Metadatas';
  nodes: Array<Maybe<_Metadata>>;
  totalCount: Scalars['Int']['output'];
};

export type _MetadatasEdge = {
  __typename?: '_MetadatasEdge';
  cursor?: Maybe<Scalars['Cursor']['output']>;
  node?: Maybe<_Metadata>;
};

export type _Poi = Node & {
  __typename?: '_Poi';
  chainBlockHash?: Maybe<Scalars['String']['output']>;
  createdAt: Scalars['Datetime']['output'];
  hash?: Maybe<Scalars['String']['output']>;
  id: Scalars['Int']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  operationHashRoot?: Maybe<Scalars['String']['output']>;
  parentHash?: Maybe<Scalars['String']['output']>;
  updatedAt: Scalars['Datetime']['output'];
};

export type _PoiAggregates = {
  __typename?: '_PoiAggregates';
  /** Mean average aggregates across the matching connection (ignoring before/after/first/last/offset) */
  average?: Maybe<_PoiAverageAggregates>;
  /** Distinct count aggregates across the matching connection (ignoring before/after/first/last/offset) */
  distinctCount?: Maybe<_PoiDistinctCountAggregates>;
  keys?: Maybe<Array<Scalars['String']['output']>>;
  /** Maximum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  max?: Maybe<_PoiMaxAggregates>;
  /** Minimum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  min?: Maybe<_PoiMinAggregates>;
  /** Population standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevPopulation?: Maybe<_PoiStddevPopulationAggregates>;
  /** Sample standard deviation aggregates across the matching connection (ignoring before/after/first/last/offset) */
  stddevSample?: Maybe<_PoiStddevSampleAggregates>;
  /** Sum aggregates across the matching connection (ignoring before/after/first/last/offset) */
  sum?: Maybe<_PoiSumAggregates>;
  /** Population variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  variancePopulation?: Maybe<_PoiVariancePopulationAggregates>;
  /** Sample variance aggregates across the matching connection (ignoring before/after/first/last/offset) */
  varianceSample?: Maybe<_PoiVarianceSampleAggregates>;
};

export type _PoiAverageAggregates = {
  __typename?: '_PoiAverageAggregates';
  /** Mean average of id across the matching connection */
  id?: Maybe<Scalars['BigFloat']['output']>;
};

export type _PoiDistinctCountAggregates = {
  __typename?: '_PoiDistinctCountAggregates';
  /** Distinct count of chainBlockHash across the matching connection */
  chainBlockHash?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of createdAt across the matching connection */
  createdAt?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of hash across the matching connection */
  hash?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of id across the matching connection */
  id?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of operationHashRoot across the matching connection */
  operationHashRoot?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of parentHash across the matching connection */
  parentHash?: Maybe<Scalars['BigInt']['output']>;
  /** Distinct count of updatedAt across the matching connection */
  updatedAt?: Maybe<Scalars['BigInt']['output']>;
};

/** A filter to be used against `_Poi` object types. All fields are combined with a logical ‘and.’ */
export type _PoiFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<_PoiFilter>>;
  /** Filter by the object’s `createdAt` field. */
  createdAt?: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<IntFilter>;
  /** Negates the expression. */
  not?: InputMaybe<_PoiFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<_PoiFilter>>;
  /** Filter by the object’s `updatedAt` field. */
  updatedAt?: InputMaybe<DatetimeFilter>;
};

/** Grouping methods for `_Poi` for usage during aggregation. */
export enum _PoiGroupBy {
  CreatedAt = 'CREATED_AT',
  CreatedAtTruncatedToDay = 'CREATED_AT_TRUNCATED_TO_DAY',
  CreatedAtTruncatedToHour = 'CREATED_AT_TRUNCATED_TO_HOUR',
  OperationHashRoot = 'OPERATION_HASH_ROOT',
  UpdatedAt = 'UPDATED_AT',
  UpdatedAtTruncatedToDay = 'UPDATED_AT_TRUNCATED_TO_DAY',
  UpdatedAtTruncatedToHour = 'UPDATED_AT_TRUNCATED_TO_HOUR'
}

export type _PoiHavingAverageInput = {
  createdAt?: InputMaybe<HavingDatetimeFilter>;
  id?: InputMaybe<HavingIntFilter>;
  updatedAt?: InputMaybe<HavingDatetimeFilter>;
};

export type _PoiHavingDistinctCountInput = {
  createdAt?: InputMaybe<HavingDatetimeFilter>;
  id?: InputMaybe<HavingIntFilter>;
  updatedAt?: InputMaybe<HavingDatetimeFilter>;
};

/** Conditions for `_Poi` aggregates. */
export type _PoiHavingInput = {
  AND?: InputMaybe<Array<_PoiHavingInput>>;
  OR?: InputMaybe<Array<_PoiHavingInput>>;
  average?: InputMaybe<_PoiHavingAverageInput>;
  distinctCount?: InputMaybe<_PoiHavingDistinctCountInput>;
  max?: InputMaybe<_PoiHavingMaxInput>;
  min?: InputMaybe<_PoiHavingMinInput>;
  stddevPopulation?: InputMaybe<_PoiHavingStddevPopulationInput>;
  stddevSample?: InputMaybe<_PoiHavingStddevSampleInput>;
  sum?: InputMaybe<_PoiHavingSumInput>;
  variancePopulation?: InputMaybe<_PoiHavingVariancePopulationInput>;
  varianceSample?: InputMaybe<_PoiHavingVarianceSampleInput>;
};

export type _PoiHavingMaxInput = {
  createdAt?: InputMaybe<HavingDatetimeFilter>;
  id?: InputMaybe<HavingIntFilter>;
  updatedAt?: InputMaybe<HavingDatetimeFilter>;
};

export type _PoiHavingMinInput = {
  createdAt?: InputMaybe<HavingDatetimeFilter>;
  id?: InputMaybe<HavingIntFilter>;
  updatedAt?: InputMaybe<HavingDatetimeFilter>;
};

export type _PoiHavingStddevPopulationInput = {
  createdAt?: InputMaybe<HavingDatetimeFilter>;
  id?: InputMaybe<HavingIntFilter>;
  updatedAt?: InputMaybe<HavingDatetimeFilter>;
};

export type _PoiHavingStddevSampleInput = {
  createdAt?: InputMaybe<HavingDatetimeFilter>;
  id?: InputMaybe<HavingIntFilter>;
  updatedAt?: InputMaybe<HavingDatetimeFilter>;
};

export type _PoiHavingSumInput = {
  createdAt?: InputMaybe<HavingDatetimeFilter>;
  id?: InputMaybe<HavingIntFilter>;
  updatedAt?: InputMaybe<HavingDatetimeFilter>;
};

export type _PoiHavingVariancePopulationInput = {
  createdAt?: InputMaybe<HavingDatetimeFilter>;
  id?: InputMaybe<HavingIntFilter>;
  updatedAt?: InputMaybe<HavingDatetimeFilter>;
};

export type _PoiHavingVarianceSampleInput = {
  createdAt?: InputMaybe<HavingDatetimeFilter>;
  id?: InputMaybe<HavingIntFilter>;
  updatedAt?: InputMaybe<HavingDatetimeFilter>;
};

export type _PoiMaxAggregates = {
  __typename?: '_PoiMaxAggregates';
  /** Maximum of id across the matching connection */
  id?: Maybe<Scalars['Int']['output']>;
};

export type _PoiMinAggregates = {
  __typename?: '_PoiMinAggregates';
  /** Minimum of id across the matching connection */
  id?: Maybe<Scalars['Int']['output']>;
};

export type _PoiStddevPopulationAggregates = {
  __typename?: '_PoiStddevPopulationAggregates';
  /** Population standard deviation of id across the matching connection */
  id?: Maybe<Scalars['BigFloat']['output']>;
};

export type _PoiStddevSampleAggregates = {
  __typename?: '_PoiStddevSampleAggregates';
  /** Sample standard deviation of id across the matching connection */
  id?: Maybe<Scalars['BigFloat']['output']>;
};

export type _PoiSumAggregates = {
  __typename?: '_PoiSumAggregates';
  /** Sum of id across the matching connection */
  id: Scalars['BigInt']['output'];
};

export type _PoiVariancePopulationAggregates = {
  __typename?: '_PoiVariancePopulationAggregates';
  /** Population variance of id across the matching connection */
  id?: Maybe<Scalars['BigFloat']['output']>;
};

export type _PoiVarianceSampleAggregates = {
  __typename?: '_PoiVarianceSampleAggregates';
  /** Sample variance of id across the matching connection */
  id?: Maybe<Scalars['BigFloat']['output']>;
};

/** A connection to a list of `_Poi` values. */
export type _PoisConnection = {
  __typename?: '_PoisConnection';
  /** Aggregates across the matching connection (ignoring before/after/first/last/offset) */
  aggregates?: Maybe<_PoiAggregates>;
  /** A list of edges which contains the `_Poi` and cursor to aid in pagination. */
  edges: Array<_PoisEdge>;
  /** Grouped aggregates across the matching connection (ignoring before/after/first/last/offset) */
  groupedAggregates?: Maybe<Array<_PoiAggregates>>;
  /** A list of `_Poi` objects. */
  nodes: Array<Maybe<_Poi>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `_Poi` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};


/** A connection to a list of `_Poi` values. */
export type _PoisConnectionGroupedAggregatesArgs = {
  groupBy: Array<_PoiGroupBy>;
  having?: InputMaybe<_PoiHavingInput>;
};

/** A `_Poi` edge in the connection. */
export type _PoisEdge = {
  __typename?: '_PoisEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `_Poi` at the end of the edge. */
  node?: Maybe<_Poi>;
};

/** Methods to use when ordering `_Poi`. */
export enum _PoisOrderBy {
  ChainBlockHashAsc = 'CHAIN_BLOCK_HASH_ASC',
  ChainBlockHashDesc = 'CHAIN_BLOCK_HASH_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  HashAsc = 'HASH_ASC',
  HashDesc = 'HASH_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  Natural = 'NATURAL',
  OperationHashRootAsc = 'OPERATION_HASH_ROOT_ASC',
  OperationHashRootDesc = 'OPERATION_HASH_ROOT_DESC',
  ParentHashAsc = 'PARENT_HASH_ASC',
  ParentHashDesc = 'PARENT_HASH_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  UpdatedAtAsc = 'UPDATED_AT_ASC',
  UpdatedAtDesc = 'UPDATED_AT_DESC'
}

export enum _Poi_Distinct_Enum {
  Chainblockhash = 'CHAINBLOCKHASH',
  Createdat = 'CREATEDAT',
  Hash = 'HASH',
  Id = 'ID',
  Operationhashroot = 'OPERATIONHASHROOT',
  Parenthash = 'PARENTHASH',
  Updatedat = 'UPDATEDAT'
}

export enum Accepted_Offers_Distinct_Enum {
  CreatedBlock = 'CREATED_BLOCK',
  Id = 'ID',
  IndexerId = 'INDEXER_ID',
  LastEvent = 'LAST_EVENT',
  OfferId = 'OFFER_ID',
  ServiceAgreementId = 'SERVICE_AGREEMENT_ID'
}

export enum Airdrop_Amounts_Distinct_Enum {
  ClaimedAmount = 'CLAIMED_AMOUNT',
  CreateAt = 'CREATE_AT',
  Id = 'ID',
  TotalAirdropAmount = 'TOTAL_AIRDROP_AMOUNT',
  UpdateAt = 'UPDATE_AT'
}

export enum Airdrop_Users_Distinct_Enum {
  AirdropId = 'AIRDROP_ID',
  Amount = 'AMOUNT',
  CreateAt = 'CREATE_AT',
  Id = 'ID',
  Status = 'STATUS',
  UpdateAt = 'UPDATE_AT',
  User = 'USER'
}

export enum Airdrops_Distinct_Enum {
  CreateAt = 'CREATE_AT',
  EndTime = 'END_TIME',
  HasWithdrawn = 'HAS_WITHDRAWN',
  Id = 'ID',
  StartTime = 'START_TIME',
  TokenAddress = 'TOKEN_ADDRESS',
  UpdateAt = 'UPDATE_AT',
  WithdrawAmount = 'WITHDRAW_AMOUNT'
}

export enum Caches_Distinct_Enum {
  Id = 'ID',
  Value = 'VALUE'
}

export enum Consumer_Controllers_Distinct_Enum {
  Consumer = 'CONSUMER',
  Controller = 'CONTROLLER',
  CreatedBlock = 'CREATED_BLOCK',
  Id = 'ID',
  LastEvent = 'LAST_EVENT'
}

export enum Consumer_Query_Reward_Summaries_Distinct_Enum {
  Consumer = 'CONSUMER',
  CreateAt = 'CREATE_AT',
  DeploymentId = 'DEPLOYMENT_ID',
  Id = 'ID',
  OrderType = 'ORDER_TYPE',
  ProjectId = 'PROJECT_ID',
  TotalRefunded = 'TOTAL_REFUNDED',
  TotalSpent = 'TOTAL_SPENT',
  UpdateAt = 'UPDATE_AT'
}

export enum Consumer_Query_Rewards_Distinct_Enum {
  Consumer = 'CONSUMER',
  CreateAt = 'CREATE_AT',
  DeploymentId = 'DEPLOYMENT_ID',
  Id = 'ID',
  OrderId = 'ORDER_ID',
  OrderType = 'ORDER_TYPE',
  ProjectId = 'PROJECT_ID',
  Refunded = 'REFUNDED',
  Spent = 'SPENT',
  UpdateAt = 'UPDATE_AT'
}

export enum Controllers_Distinct_Enum {
  Controller = 'CONTROLLER',
  CreatedBlock = 'CREATED_BLOCK',
  Id = 'ID',
  IndexerId = 'INDEXER_ID',
  IsActive = 'IS_ACTIVE',
  LastEvent = 'LAST_EVENT'
}

export enum Delegations_Distinct_Enum {
  Amount = 'AMOUNT',
  CreatedBlock = 'CREATED_BLOCK',
  DelegatorId = 'DELEGATOR_ID',
  ExitEra = 'EXIT_ERA',
  Id = 'ID',
  IndexerId = 'INDEXER_ID',
  LastEvent = 'LAST_EVENT'
}

export enum Delegators_Distinct_Enum {
  CreatedBlock = 'CREATED_BLOCK',
  ExitEra = 'EXIT_ERA',
  Id = 'ID',
  LastEvent = 'LAST_EVENT',
  StartEra = 'START_ERA',
  TotalDelegations = 'TOTAL_DELEGATIONS'
}

export enum Deployment_Booster_Summaries_Distinct_Enum {
  Consumer = 'CONSUMER',
  CreateAt = 'CREATE_AT',
  DeploymentId = 'DEPLOYMENT_ID',
  Id = 'ID',
  ProjectId = 'PROJECT_ID',
  TotalAdded = 'TOTAL_ADDED',
  TotalAmount = 'TOTAL_AMOUNT',
  TotalRemoved = 'TOTAL_REMOVED',
  UpdateAt = 'UPDATE_AT'
}

export enum Deployment_Boosters_Distinct_Enum {
  AmountAdded = 'AMOUNT_ADDED',
  AmountRemoved = 'AMOUNT_REMOVED',
  Consumer = 'CONSUMER',
  CreateAt = 'CREATE_AT',
  DeploymentId = 'DEPLOYMENT_ID',
  EraIdx = 'ERA_IDX',
  Id = 'ID',
  ProjectId = 'PROJECT_ID'
}

export enum Deployments_Distinct_Enum {
  CreatedBlock = 'CREATED_BLOCK',
  CreatedTimestamp = 'CREATED_TIMESTAMP',
  Id = 'ID',
  LastEvent = 'LAST_EVENT',
  Metadata = 'METADATA',
  ProjectId = 'PROJECT_ID'
}

export enum Disputes_Distinct_Enum {
  DisputeType = 'DISPUTE_TYPE',
  Fisherman = 'FISHERMAN',
  Id = 'ID',
  IsFinalized = 'IS_FINALIZED',
  ReturnAmount = 'RETURN_AMOUNT',
  Runner = 'RUNNER',
  SlashAmount = 'SLASH_AMOUNT',
  State = 'STATE'
}

export enum Era_Delegator_Apies_Distinct_Enum {
  Apy = 'APY',
  CreateAt = 'CREATE_AT',
  DelegatorId = 'DELEGATOR_ID',
  EraIdx = 'ERA_IDX',
  Id = 'ID',
  Reward = 'REWARD',
  UpdateAt = 'UPDATE_AT'
}

export enum Era_Delegator_Indexer_Apies_Distinct_Enum {
  Apy = 'APY',
  CreateAt = 'CREATE_AT',
  DelegatorId = 'DELEGATOR_ID',
  EraIdx = 'ERA_IDX',
  Id = 'ID',
  IndexerId = 'INDEXER_ID',
  Reward = 'REWARD',
  Stake = 'STAKE',
  UpdateAt = 'UPDATE_AT'
}

export enum Era_Delegator_Indexers_Distinct_Enum {
  Delegator = 'DELEGATOR',
  Era = 'ERA',
  Id = 'ID',
  Indexers = 'INDEXERS',
  SelfStake = 'SELF_STAKE',
  TotalStake = 'TOTAL_STAKE'
}

export enum Era_Deployment_Rewards_Distinct_Enum {
  AgreementRewards = 'AGREEMENT_REWARDS',
  AllocationRewards = 'ALLOCATION_REWARDS',
  ChangesHeight = 'CHANGES_HEIGHT',
  DeploymentId = 'DEPLOYMENT_ID',
  EraIdx = 'ERA_IDX',
  Id = 'ID',
  QueryRewards = 'QUERY_REWARDS',
  StateChannelRewards = 'STATE_CHANNEL_REWARDS',
  TotalRewards = 'TOTAL_REWARDS'
}

export enum Era_Indexer_Apies_Distinct_Enum {
  CreateAt = 'CREATE_AT',
  DelegatorApy = 'DELEGATOR_APY',
  DelegatorReward = 'DELEGATOR_REWARD',
  EraIdx = 'ERA_IDX',
  Id = 'ID',
  IndexerApy = 'INDEXER_APY',
  IndexerId = 'INDEXER_ID',
  IndexerReward = 'INDEXER_REWARD',
  UpdateAt = 'UPDATE_AT'
}

export enum Era_Indexer_Delegators_Distinct_Enum {
  Delegators = 'DELEGATORS',
  Era = 'ERA',
  Id = 'ID',
  Indexer = 'INDEXER',
  SelfStake = 'SELF_STAKE',
  TotalStake = 'TOTAL_STAKE'
}

export enum Era_Indexer_Deployment_Apies_Distinct_Enum {
  AgreementReward = 'AGREEMENT_REWARD',
  AllocationReward = 'ALLOCATION_REWARD',
  Apy = 'APY',
  ApyCalcAdded = 'APY_CALC_ADDED',
  ApyCalcAllocation = 'APY_CALC_ALLOCATION',
  ApyCalcAllocationRecordAt = 'APY_CALC_ALLOCATION_RECORD_AT',
  ApyCalcHistory = 'APY_CALC_HISTORY',
  ApyCalcRemoval = 'APY_CALC_REMOVAL',
  CreateAt = 'CREATE_AT',
  DeploymentId = 'DEPLOYMENT_ID',
  EraIdx = 'ERA_IDX',
  FlexPlanReward = 'FLEX_PLAN_REWARD',
  Id = 'ID',
  IndexerId = 'INDEXER_ID',
  UpdateAt = 'UPDATE_AT'
}

export enum Era_Reward_Claimeds_Distinct_Enum {
  Id = 'ID',
  LastClaimedEra = 'LAST_CLAIMED_ERA'
}

export enum Era_Rewards_Distinct_Enum {
  Amount = 'AMOUNT',
  Claimed = 'CLAIMED',
  CreatedBlock = 'CREATED_BLOCK',
  CreatedTimestamp = 'CREATED_TIMESTAMP',
  DelegatorId = 'DELEGATOR_ID',
  EraId = 'ERA_ID',
  EraIdx = 'ERA_IDX',
  Id = 'ID',
  IndexerId = 'INDEXER_ID',
  IsCommission = 'IS_COMMISSION',
  IsIndexer = 'IS_INDEXER'
}

export enum Era_Stake_Updates_Distinct_Enum {
  Id = 'ID',
  LastUpdateEraId = 'LAST_UPDATE_ERA_ID'
}

export enum Era_Stakes_Distinct_Enum {
  DelegatorId = 'DELEGATOR_ID',
  EraId = 'ERA_ID',
  EraIdx = 'ERA_IDX',
  Id = 'ID',
  IndexerId = 'INDEXER_ID',
  Stake = 'STAKE'
}

export enum Eras_Distinct_Enum {
  CreatedBlock = 'CREATED_BLOCK',
  EndTime = 'END_TIME',
  EraPeriod = 'ERA_PERIOD',
  ForceNext = 'FORCE_NEXT',
  Id = 'ID',
  LastEvent = 'LAST_EVENT',
  StartTime = 'START_TIME'
}

export enum Exceptions_Distinct_Enum {
  Error = 'ERROR',
  Handler = 'HANDLER',
  Id = 'ID'
}

export enum Indexer_Allocation_Overflows_Distinct_Enum {
  CreateAt = 'CREATE_AT',
  EraIdxEnd = 'ERA_IDX_END',
  EraIdxStart = 'ERA_IDX_START',
  Id = 'ID',
  IndexerId = 'INDEXER_ID',
  OverflowEnd = 'OVERFLOW_END',
  OverflowStart = 'OVERFLOW_START',
  OverflowTime = 'OVERFLOW_TIME',
  UpdateAt = 'UPDATE_AT'
}

export enum Indexer_Allocation_Reward_Summaries_Distinct_Enum {
  CreateAt = 'CREATE_AT',
  DeploymentId = 'DEPLOYMENT_ID',
  Id = 'ID',
  IndexerId = 'INDEXER_ID',
  ProjectId = 'PROJECT_ID',
  TotalBurnt = 'TOTAL_BURNT',
  TotalReward = 'TOTAL_REWARD',
  UpdateAt = 'UPDATE_AT'
}

export enum Indexer_Allocation_Rewards_Distinct_Enum {
  Burnt = 'BURNT',
  CreateAt = 'CREATE_AT',
  DeploymentId = 'DEPLOYMENT_ID',
  EraIdx = 'ERA_IDX',
  Id = 'ID',
  IndexerId = 'INDEXER_ID',
  ProjectId = 'PROJECT_ID',
  Reward = 'REWARD'
}

export enum Indexer_Allocation_Summaries_Distinct_Enum {
  CreateAt = 'CREATE_AT',
  DeploymentId = 'DEPLOYMENT_ID',
  Id = 'ID',
  IndexerId = 'INDEXER_ID',
  ProjectId = 'PROJECT_ID',
  TotalAdded = 'TOTAL_ADDED',
  TotalAmount = 'TOTAL_AMOUNT',
  TotalRemoved = 'TOTAL_REMOVED',
  UpdateAt = 'UPDATE_AT'
}

export enum Indexer_Allocations_Distinct_Enum {
  AmountAdded = 'AMOUNT_ADDED',
  AmountRemoved = 'AMOUNT_REMOVED',
  CreateAt = 'CREATE_AT',
  DeploymentId = 'DEPLOYMENT_ID',
  EraIdx = 'ERA_IDX',
  Id = 'ID',
  IndexerId = 'INDEXER_ID',
  ProjectId = 'PROJECT_ID'
}

export enum Indexer_Apy_Summaries_Distinct_Enum {
  CreateAt = 'CREATE_AT',
  DelegatorApy = 'DELEGATOR_APY',
  DelegatorReward = 'DELEGATOR_REWARD',
  EraIdx = 'ERA_IDX',
  Id = 'ID',
  IndexerApy = 'INDEXER_APY',
  IndexerId = 'INDEXER_ID',
  IndexerReward = 'INDEXER_REWARD',
  UpdateAt = 'UPDATE_AT'
}

export enum Indexer_Commission_Rates_Distinct_Enum {
  CommissionRate = 'COMMISSION_RATE',
  EraId = 'ERA_ID',
  EraIdx = 'ERA_IDX',
  Id = 'ID',
  IndexerId = 'INDEXER_ID'
}

export enum Indexer_Deployments_Distinct_Enum {
  CreatedBlock = 'CREATED_BLOCK',
  DeploymentId = 'DEPLOYMENT_ID',
  Id = 'ID',
  IndexerId = 'INDEXER_ID',
  LastEvent = 'LAST_EVENT',
  Status = 'STATUS',
  Timestamp = 'TIMESTAMP'
}

export enum Indexer_Era_Deployment_Rewards_Distinct_Enum {
  AgreementRewards = 'AGREEMENT_REWARDS',
  AllocationRewards = 'ALLOCATION_REWARDS',
  ChangesHeight = 'CHANGES_HEIGHT',
  DeploymentId = 'DEPLOYMENT_ID',
  EraIdx = 'ERA_IDX',
  Id = 'ID',
  IndexerId = 'INDEXER_ID',
  QueryRewards = 'QUERY_REWARDS',
  StateChannelRewards = 'STATE_CHANNEL_REWARDS',
  TotalRewards = 'TOTAL_REWARDS'
}

export enum Indexer_Labor_Histories_Distinct_Enum {
  Amount = 'AMOUNT',
  CreateAt = 'CREATE_AT',
  DeploymentId = 'DEPLOYMENT_ID',
  EraIdx = 'ERA_IDX',
  Id = 'ID',
  IndexerId = 'INDEXER_ID'
}

export enum Indexer_Latest_Allocation_Overflows_Distinct_Enum {
  CreateAt = 'CREATE_AT',
  Id = 'ID',
  OverflowIdId = 'OVERFLOW_ID_ID',
  UpdateAt = 'UPDATE_AT'
}

export enum Indexer_Missed_Labors_Distinct_Enum {
  CreateAt = 'CREATE_AT',
  DeploymentId = 'DEPLOYMENT_ID',
  EraIdx = 'ERA_IDX',
  Id = 'ID',
  IndexerId = 'INDEXER_ID',
  MissedLabor = 'MISSED_LABOR'
}

export enum Indexer_Rewards_Distinct_Enum {
  Amount = 'AMOUNT',
  CreatedBlock = 'CREATED_BLOCK',
  EraId = 'ERA_ID',
  EraIdx = 'ERA_IDX',
  Id = 'ID',
  IndexerId = 'INDEXER_ID',
  LastEvent = 'LAST_EVENT'
}

export enum Indexer_Stake_Summaries_Distinct_Enum {
  DelegatorStake = 'DELEGATOR_STAKE',
  EraId = 'ERA_ID',
  EraIdx = 'ERA_IDX',
  Id = 'ID',
  IndexerStake = 'INDEXER_STAKE',
  NextDelegatorStake = 'NEXT_DELEGATOR_STAKE',
  NextIndexerStake = 'NEXT_INDEXER_STAKE',
  NextTotalStake = 'NEXT_TOTAL_STAKE',
  TotalStake = 'TOTAL_STAKE'
}

export enum Indexer_Stake_Weights_Distinct_Enum {
  CreateAt = 'CREATE_AT',
  EraIdx = 'ERA_IDX',
  Id = 'ID',
  IndexerId = 'INDEXER_ID',
  UpdateAt = 'UPDATE_AT',
  Weight = 'WEIGHT'
}

export enum Indexer_Stakes_Distinct_Enum {
  DelegatorStake = 'DELEGATOR_STAKE',
  EraId = 'ERA_ID',
  EraIdx = 'ERA_IDX',
  Id = 'ID',
  IndexerId = 'INDEXER_ID',
  IndexerStake = 'INDEXER_STAKE',
  TotalStake = 'TOTAL_STAKE'
}

export enum Indexers_Distinct_Enum {
  Active = 'ACTIVE',
  Capacity = 'CAPACITY',
  Commission = 'COMMISSION',
  Controller = 'CONTROLLER',
  CreatedBlock = 'CREATED_BLOCK',
  Id = 'ID',
  LastClaimEra = 'LAST_CLAIM_ERA',
  LastEvent = 'LAST_EVENT',
  LastSettledEra = 'LAST_SETTLED_ERA',
  MaxUnstakeAmount = 'MAX_UNSTAKE_AMOUNT',
  Metadata = 'METADATA',
  SelfStake = 'SELF_STAKE',
  TotalStake = 'TOTAL_STAKE'
}

export enum Offers_Distinct_Enum {
  Accepted = 'ACCEPTED',
  Consumer = 'CONSUMER',
  CreatedBlock = 'CREATED_BLOCK',
  DeploymentId = 'DEPLOYMENT_ID',
  Deposit = 'DEPOSIT',
  ExpireDate = 'EXPIRE_DATE',
  Id = 'ID',
  LastEvent = 'LAST_EVENT',
  Limit = 'LIMIT',
  MinimumAcceptHeight = 'MINIMUM_ACCEPT_HEIGHT',
  MinimumStakingAmount = 'MINIMUM_STAKING_AMOUNT',
  PlanTemplateId = 'PLAN_TEMPLATE_ID',
  ReachLimit = 'REACH_LIMIT',
  Withdrawn = 'WITHDRAWN',
  WithdrawPenalty = 'WITHDRAW_PENALTY'
}

export enum Orders_Distinct_Enum {
  AmountGet = 'AMOUNT_GET',
  AmountGive = 'AMOUNT_GIVE',
  CreateAt = 'CREATE_AT',
  Id = 'ID',
  Sender = 'SENDER',
  Status = 'STATUS',
  TokenGet = 'TOKEN_GET',
  TokenGive = 'TOKEN_GIVE',
  TokenGiveBalance = 'TOKEN_GIVE_BALANCE',
  UpdateAt = 'UPDATE_AT'
}

export enum Plan_Templates_Distinct_Enum {
  Active = 'ACTIVE',
  CreatedBlock = 'CREATED_BLOCK',
  DailyReqCap = 'DAILY_REQ_CAP',
  Id = 'ID',
  LastEvent = 'LAST_EVENT',
  Metadata = 'METADATA',
  Period = 'PERIOD',
  PriceToken = 'PRICE_TOKEN',
  RateLimit = 'RATE_LIMIT'
}

export enum Plans_Distinct_Enum {
  Active = 'ACTIVE',
  CreatedBlock = 'CREATED_BLOCK',
  Creator = 'CREATOR',
  DeploymentId = 'DEPLOYMENT_ID',
  Id = 'ID',
  LastEvent = 'LAST_EVENT',
  PlanTemplateId = 'PLAN_TEMPLATE_ID',
  Price = 'PRICE'
}

export enum Price_Oracles_Distinct_Enum {
  AfterPrice = 'AFTER_PRICE',
  BeforePrice = 'BEFORE_PRICE',
  CreatedBlock = 'CREATED_BLOCK',
  FromToken = 'FROM_TOKEN',
  Id = 'ID',
  ToToken = 'TO_TOKEN'
}

export enum Projects_Distinct_Enum {
  BoostAllocationRatio = 'BOOST_ALLOCATION_RATIO',
  CreatedBlock = 'CREATED_BLOCK',
  CreatedTimestamp = 'CREATED_TIMESTAMP',
  DeploymentId = 'DEPLOYMENT_ID',
  DeploymentMetadata = 'DEPLOYMENT_METADATA',
  Id = 'ID',
  LastEvent = 'LAST_EVENT',
  Metadata = 'METADATA',
  Owner = 'OWNER',
  TotalAllocation = 'TOTAL_ALLOCATION',
  TotalBoost = 'TOTAL_BOOST',
  TotalReward = 'TOTAL_REWARD',
  Type = 'TYPE',
  UpdatedTimestamp = 'UPDATED_TIMESTAMP'
}

export enum Rewards_Distinct_Enum {
  Amount = 'AMOUNT',
  ClaimedTime = 'CLAIMED_TIME',
  CreatedBlock = 'CREATED_BLOCK',
  DelegatorAddress = 'DELEGATOR_ADDRESS',
  DelegatorId = 'DELEGATOR_ID',
  Id = 'ID',
  IndexerAddress = 'INDEXER_ADDRESS',
  LastEvent = 'LAST_EVENT'
}

export enum Service_Agreements_Distinct_Enum {
  ConsumerAddress = 'CONSUMER_ADDRESS',
  CreatedBlock = 'CREATED_BLOCK',
  DeploymentId = 'DEPLOYMENT_ID',
  EndTime = 'END_TIME',
  Id = 'ID',
  IndexerAddress = 'INDEXER_ADDRESS',
  LastEvent = 'LAST_EVENT',
  LockedAmount = 'LOCKED_AMOUNT',
  Period = 'PERIOD',
  PlanTemplateId = 'PLAN_TEMPLATE_ID',
  StartTime = 'START_TIME'
}

export enum Sqtokens_Distinct_Enum {
  CirculatingSupply = 'CIRCULATING_SUPPLY',
  Id = 'ID',
  TotalSupply = 'TOTAL_SUPPLY'
}

export enum State_Channels_Distinct_Enum {
  Agent = 'AGENT',
  Consumer = 'CONSUMER',
  DeploymentId = 'DEPLOYMENT_ID',
  ExpiredAt = 'EXPIRED_AT',
  Id = 'ID',
  Indexer = 'INDEXER',
  IsFinal = 'IS_FINAL',
  LastEvent = 'LAST_EVENT',
  Price = 'PRICE',
  RealTotal = 'REAL_TOTAL',
  Spent = 'SPENT',
  StartTime = 'START_TIME',
  Status = 'STATUS',
  TerminatedAt = 'TERMINATED_AT',
  TerminateByIndexer = 'TERMINATE_BY_INDEXER',
  Total = 'TOTAL'
}

export enum Token_Holders_Distinct_Enum {
  Balance = 'BALANCE',
  Id = 'ID',
  TokenId = 'TOKEN_ID'
}

export enum Total_Locks_Distinct_Enum {
  CreatedBlock = 'CREATED_BLOCK',
  Id = 'ID',
  LastEvent = 'LAST_EVENT',
  TotalDelegation = 'TOTAL_DELEGATION',
  TotalStake = 'TOTAL_STAKE'
}

export enum Transfers_Distinct_Enum {
  Amount = 'AMOUNT',
  Blockheight = 'BLOCKHEIGHT',
  From = 'FROM',
  Id = 'ID',
  Timestamp = 'TIMESTAMP',
  To = 'TO',
  TxHash = 'TX_HASH'
}

export enum Unclaimed_Rewards_Distinct_Enum {
  Amount = 'AMOUNT',
  CreatedBlock = 'CREATED_BLOCK',
  DelegatorAddress = 'DELEGATOR_ADDRESS',
  DelegatorId = 'DELEGATOR_ID',
  Id = 'ID',
  IndexerAddress = 'INDEXER_ADDRESS',
  LastEvent = 'LAST_EVENT'
}

export enum Withdrawls_Distinct_Enum {
  Amount = 'AMOUNT',
  CreatedBlock = 'CREATED_BLOCK',
  Delegator = 'DELEGATOR',
  Id = 'ID',
  Index = 'INDEX',
  Indexer = 'INDEXER',
  LastEvent = 'LAST_EVENT',
  StartTime = 'START_TIME',
  Status = 'STATUS',
  Type = 'TYPE'
}

export enum Withdraws_Distinct_Enum {
  Amount = 'AMOUNT',
  Blockheight = 'BLOCKHEIGHT',
  CreateAt = 'CREATE_AT',
  Id = 'ID',
  Sender = 'SENDER',
  TxHash = 'TX_HASH'
}
