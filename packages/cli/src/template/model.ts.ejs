// Auto-generated , DO NOT EDIT
import {Entity, FunctionPropertyNames, FieldsExpression, GetOptions } from "@subql/types-core";
import assert from 'assert';
<%if (props.importJsonInterfaces.length !== 0) { %>
import { <% props.importJsonInterfaces.forEach(function(interface){ %>
    <%= interface %>,
<% }); %>} from '../interfaces';
<% } %>
<%if (props.importEnums.length !== 0) { %>
import {<% props.importEnums.forEach(function(e){ %>
    <%= e %>,
<% }); %>} from '../enums';<% } %>

export type <%= props.className %>Props = Omit<<%=props.className %>, NonNullable<FunctionPropertyNames<<%=props.className %>>> | '_name'>;

/*
 * Compat types allows for support of alternative `id` types without refactoring the node
 */
type Compat<%= props.className %>Props = Omit<<%= props.className %>Props, 'id'> & { id: string; };
type CompatEntity = Omit<Entity, 'id'> & { id: <%=props.idType %>; };

export class <%= props.className %> implements CompatEntity {

    constructor(
        <% props.fields.forEach(function(field) { if (field.required) { %>
        <%= field.name %>: <%= field.type %><%= field.isArray ? "[]" : "" %>,<% } %><% }) %>
    ) {
        <% props.fields.filter(function(field) {return field.required === true;}).forEach(function(requiredField) { %>this.<%= requiredField.name %> = <%= requiredField.name %>;
        <% }) %>
    }

    <% props.fields.forEach(function(field){ %>public <%= field.name %><%= field.required ? "" : "?" %>: <%= field.type %><%= field.isArray ? "[]" : "" %>;
    <% }); %>

    get _name(): string {
        return '<%=props.entityName %>';
    }

    async save(): Promise<void> {
        const id = this.id;
        assert(id !== null, "Cannot save <%=props.className %> entity without an ID");
        await store.set('<%=props.entityName %>', id.toString(), this as unknown as Compat<%=props.className %>Props);
    }

    static async remove(id: <%=props.idType %>): Promise<void> {
        assert(id !== null, "Cannot remove <%=props.className %> entity without an ID");
        await store.remove('<%=props.entityName %>', id.toString());
    }

    static async get(id: <%=props.idType %>): Promise<<%=props.className %> | undefined> {
        assert((id !== null && id !== undefined), "Cannot get <%=props.className %> entity without an ID");
        const record = await store.get('<%=props.entityName %>', id.toString());
        if (record) {
            return this.create(record as unknown as <%= props.className %>Props);
        } else {
            return;
        }
    }
<% props.indexedFields.forEach(function(field){ %>
    <% if (field.unique) {%>

    static async getBy<%=helper.upperFirst(field.name) %>(<%=field.name %>: <%=field.type %>): Promise<<%=props.className %> | undefined> {
        const record = await store.getOneByField('<%=props.entityName %>', '<%=field.name %>', <%=field.name %>);
        if (record) {
            return this.create(record as unknown as <%= props.className %>Props);
        } else {
            return;
        }
    }
    <% } else { %>static async getBy<%=helper.upperFirst(field.name) %>(<%=field.name %>: <%=field.type %>, options: GetOptions<Compat<%=props.className %>Props>): Promise<<%=props.className %>[]> {
        // Inputs must be cast as the store interface has not been updated to support alternative ID types
        const records = await store.getByField<Compat<%=props.className %>Props>('<%=props.entityName %>', '<%=field.name %>', <%=field.name %>, options);
        return records.map(record => this.create(record as unknown as <%= props.className %>Props));
    }
    <% }%>
<% }); %>

    /**
     * Gets entities matching the specified filters and options.
     *
     * ⚠️ This function will first search cache data followed by DB data. Please consider this when using order and offset options.⚠️
     * */
    static async getByFields(filter: FieldsExpression<<%= props.className %>Props>[], options: GetOptions<<%= props.className %>Props>): Promise<<%=props.className %>[]> {
        const records = await store.getByFields<Compat<%=props.className %>Props>('<%=props.entityName %>', filter  as unknown as FieldsExpression<Compat<%=props.className %>Props>[], options as unknown as GetOptions<Compat<%=props.className %>Props>);
        return records.map(record => this.create(record as unknown as <%= props.className %>Props));
    }

    static create(record: <%= props.className %>Props): <%=props.className %> {
        assert(record.id !== undefined && record.id !== null, "id must be provided");
        const entity = new this(
        <% props.fields.filter(function(field) {return field.required === true;}).forEach(function(requiredField) { %>    record.<%= requiredField.name %>,
        <% }) %>);
        Object.assign(entity,record);
        return entity;
    }
}
