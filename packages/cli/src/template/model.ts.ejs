// Auto-generated , DO NOT EDIT
import {Entity, FunctionPropertyNames} from "@subql/types";
import assert from 'assert';
<%if (props.importJsonInterfaces.length !== 0) { %>
import {<% props.importJsonInterfaces.forEach(function(interface){ %>
    <%= interface %>,
<% }); %>} from '../interfaces'
<% } %>

export class <%= props.className %> implements Entity {

    constructor(id: string) {
        this.id = id;
    }

<% props.fields.forEach(function(field){ %>
    public <%= field.name %><%= field.required ? "" : "?" %>: <%= field.type %><%= field.isArray ? "[]" : "" %>;
<% }); %>

    async save(): Promise<void>{
        let id = this.id;
        assert(id !== null, "Cannot save <%=props.className %> entity without an ID");
        await store.set('<%=props.entityName %>', id.toString(), this);
    }
    static async remove(id:string): Promise<void>{
        assert(id !== null, "Cannot remove <%=props.className %> entity without an ID");
        await store.remove('<%=props.entityName %>', id.toString());
    }

    static async get(id:string): Promise<<%=props.className %> | undefined>{
        assert((id !== null && id !== undefined), "Cannot get <%=props.className %> entity without an ID");
        const record = await store.get('<%=props.entityName %>', id.toString());
        if (record){
            return <%=props.className %>.create(record);
        }else{
            return;
        }
    }

<% props.indexedFields.forEach(function(field){ %>
    static async getBy<%=helper.upperFirst(field.name) %>(<%=field.name %>: <%=field.type %>): Promise<<%=props.className %><%=field.unique ? '' : '[]' %> | undefined>{
      <% if (field.unique) {%>
      const record = await store.getOneByField('<%=props.entityName %>', '<%=field.name %>', <%=field.name %>);
      if (record){
          return <%=props.className %>.create(record);
      }else{
          return;
      }
      <% } else { %>
      const records = await store.getByField('<%=props.entityName %>', '<%=field.name %>', <%=field.name %>);
      return records.map(record => <%=props.className %>.create(record));
      <% }%>
    }
<% }); %>

    static create(record: Partial<Omit<<%=props.className %>, FunctionPropertyNames<<%=props.className %>>>> & Entity): <%=props.className %> {
        assert(typeof record.id === 'string', "id must be provided");
        let entity = new <%=props.className %>(record.id);
        Object.assign(entity,record);
        return entity;
    }
}
